
capstone_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086b8  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08008908  08008908  00009908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008a0c  08008a0c  00009a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008a14  08008a14  00009a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008a18  08008a18  00009a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000009  20000000  08008a1c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000340  2000000c  08008a25  0000a00c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000034c  08008a25  0000a34c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000a009  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b565  00000000  00000000  0000a03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f22  00000000  00000000  000255a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001670  00000000  00000000  000284c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001178  00000000  00000000  00029b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000396f4  00000000  00000000  0002acb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e658  00000000  00000000  000643a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016e420  00000000  00000000  000829fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f0e1c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000060c0  00000000  00000000  001f0e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000053  00000000  00000000  001f6f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000000c 	.word	0x2000000c
 800026c:	00000000 	.word	0x00000000
 8000270:	080088f0 	.word	0x080088f0

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000010 	.word	0x20000010
 800028c:	080088f0 	.word	0x080088f0

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b97e 	b.w	80005a4 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14d      	bne.n	8000368 <__udivmoddi4+0xa8>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	460f      	mov	r7, r1
 80002d0:	4684      	mov	ip, r0
 80002d2:	4696      	mov	lr, r2
 80002d4:	fab2 f382 	clz	r3, r2
 80002d8:	d960      	bls.n	800039c <__udivmoddi4+0xdc>
 80002da:	b14b      	cbz	r3, 80002f0 <__udivmoddi4+0x30>
 80002dc:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80002ea:	fa20 f202 	lsr.w	r2, r0, r2
 80002ee:	4317      	orrs	r7, r2
 80002f0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f4:	fa1f f48e 	uxth.w	r4, lr
 80002f8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002fc:	fbb7 f1f6 	udiv	r1, r7, r6
 8000300:	fb06 7711 	mls	r7, r6, r1, r7
 8000304:	fb01 f004 	mul.w	r0, r1, r4
 8000308:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800030c:	4290      	cmp	r0, r2
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x62>
 8000310:	eb1e 0202 	adds.w	r2, lr, r2
 8000314:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x60>
 800031a:	4290      	cmp	r0, r2
 800031c:	f200 812d 	bhi.w	800057a <__udivmoddi4+0x2ba>
 8000320:	4639      	mov	r1, r7
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	fa1f fc8c 	uxth.w	ip, ip
 8000328:	fbb2 f0f6 	udiv	r0, r2, r6
 800032c:	fb06 2210 	mls	r2, r6, r0, r2
 8000330:	fb00 f404 	mul.w	r4, r0, r4
 8000334:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000338:	4564      	cmp	r4, ip
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x8e>
 800033c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x8c>
 8000346:	4564      	cmp	r4, ip
 8000348:	f200 811a 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 800034c:	4610      	mov	r0, r2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	ebac 0c04 	sub.w	ip, ip, r4
 8000356:	2100      	movs	r1, #0
 8000358:	b125      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035a:	fa2c f303 	lsr.w	r3, ip, r3
 800035e:	2200      	movs	r2, #0
 8000360:	e9c5 3200 	strd	r3, r2, [r5]
 8000364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000368:	428b      	cmp	r3, r1
 800036a:	d905      	bls.n	8000378 <__udivmoddi4+0xb8>
 800036c:	b10d      	cbz	r5, 8000372 <__udivmoddi4+0xb2>
 800036e:	e9c5 0100 	strd	r0, r1, [r5]
 8000372:	2100      	movs	r1, #0
 8000374:	4608      	mov	r0, r1
 8000376:	e7f5      	b.n	8000364 <__udivmoddi4+0xa4>
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	d14d      	bne.n	800041c <__udivmoddi4+0x15c>
 8000380:	42a3      	cmp	r3, r4
 8000382:	f0c0 80f2 	bcc.w	800056a <__udivmoddi4+0x2aa>
 8000386:	4290      	cmp	r0, r2
 8000388:	f080 80ef 	bcs.w	800056a <__udivmoddi4+0x2aa>
 800038c:	4606      	mov	r6, r0
 800038e:	4623      	mov	r3, r4
 8000390:	4608      	mov	r0, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e6      	beq.n	8000364 <__udivmoddi4+0xa4>
 8000396:	e9c5 6300 	strd	r6, r3, [r5]
 800039a:	e7e3      	b.n	8000364 <__udivmoddi4+0xa4>
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 80a2 	bne.w	80004e6 <__udivmoddi4+0x226>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a8:	fa1f f68e 	uxth.w	r6, lr
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f4f7 	udiv	r4, r2, r7
 80003b2:	fb07 2014 	mls	r0, r7, r4, r2
 80003b6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb06 f004 	mul.w	r0, r6, r4
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d90f      	bls.n	80003e6 <__udivmoddi4+0x126>
 80003c6:	eb1e 0202 	adds.w	r2, lr, r2
 80003ca:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 80003ce:	bf2c      	ite	cs
 80003d0:	f04f 0901 	movcs.w	r9, #1
 80003d4:	f04f 0900 	movcc.w	r9, #0
 80003d8:	4290      	cmp	r0, r2
 80003da:	d903      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003dc:	f1b9 0f00 	cmp.w	r9, #0
 80003e0:	f000 80c8 	beq.w	8000574 <__udivmoddi4+0x2b4>
 80003e4:	4644      	mov	r4, r8
 80003e6:	1a12      	subs	r2, r2, r0
 80003e8:	fa1f fc8c 	uxth.w	ip, ip
 80003ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f0:	fb07 2210 	mls	r2, r7, r0, r2
 80003f4:	fb00 f606 	mul.w	r6, r0, r6
 80003f8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003fc:	4566      	cmp	r6, ip
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x152>
 8000400:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000404:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000408:	d202      	bcs.n	8000410 <__udivmoddi4+0x150>
 800040a:	4566      	cmp	r6, ip
 800040c:	f200 80bb 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000410:	4610      	mov	r0, r2
 8000412:	ebac 0c06 	sub.w	ip, ip, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	e79d      	b.n	8000358 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa04 fe01 	lsl.w	lr, r4, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	fa20 fc06 	lsr.w	ip, r0, r6
 800042e:	40f4      	lsrs	r4, r6
 8000430:	408a      	lsls	r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	ea4e 030c 	orr.w	r3, lr, ip
 8000438:	fa00 fe01 	lsl.w	lr, r0, r1
 800043c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb4 f0f8 	udiv	r0, r4, r8
 800044c:	fb08 4410 	mls	r4, r8, r0, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb00 f90c 	mul.w	r9, r0, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1ba>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a1      	cmp	r9, r4
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 8093 	beq.w	800059e <__udivmoddi4+0x2de>
 8000478:	4650      	mov	r0, sl
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f8 	udiv	r3, r4, r8
 8000486:	fb08 4413 	mls	r4, r8, r3, r4
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000492:	45a4      	cmp	ip, r4
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1e4>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1e2>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d87a      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a8:	eba4 040c 	sub.w	r4, r4, ip
 80004ac:	fba0 9802 	umull	r9, r8, r0, r2
 80004b0:	4544      	cmp	r4, r8
 80004b2:	46cc      	mov	ip, r9
 80004b4:	4643      	mov	r3, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1fe>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x208>
 80004ba:	45ce      	cmp	lr, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x208>
 80004be:	3801      	subs	r0, #1
 80004c0:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c4:	eb68 0307 	sbc.w	r3, r8, r7
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x222>
 80004ca:	ebbe 020c 	subs.w	r2, lr, ip
 80004ce:	eb64 0403 	sbc.w	r4, r4, r3
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	fa22 f301 	lsr.w	r3, r2, r1
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	431e      	orrs	r6, r3
 80004de:	e9c5 6400 	strd	r6, r4, [r5]
 80004e2:	2100      	movs	r1, #0
 80004e4:	e73e      	b.n	8000364 <__udivmoddi4+0xa4>
 80004e6:	fa02 fe03 	lsl.w	lr, r2, r3
 80004ea:	f1c3 0120 	rsb	r1, r3, #32
 80004ee:	fa04 f203 	lsl.w	r2, r4, r3
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	40cc      	lsrs	r4, r1
 80004f8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004fc:	fa20 f101 	lsr.w	r1, r0, r1
 8000500:	fa1f f68e 	uxth.w	r6, lr
 8000504:	fbb4 f0f7 	udiv	r0, r4, r7
 8000508:	430a      	orrs	r2, r1
 800050a:	fb07 4410 	mls	r4, r7, r0, r4
 800050e:	0c11      	lsrs	r1, r2, #16
 8000510:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000514:	fb00 f406 	mul.w	r4, r0, r6
 8000518:	428c      	cmp	r4, r1
 800051a:	d90e      	bls.n	800053a <__udivmoddi4+0x27a>
 800051c:	eb1e 0101 	adds.w	r1, lr, r1
 8000520:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8000524:	bf2c      	ite	cs
 8000526:	f04f 0901 	movcs.w	r9, #1
 800052a:	f04f 0900 	movcc.w	r9, #0
 800052e:	428c      	cmp	r4, r1
 8000530:	d902      	bls.n	8000538 <__udivmoddi4+0x278>
 8000532:	f1b9 0f00 	cmp.w	r9, #0
 8000536:	d02c      	beq.n	8000592 <__udivmoddi4+0x2d2>
 8000538:	4640      	mov	r0, r8
 800053a:	1b09      	subs	r1, r1, r4
 800053c:	b292      	uxth	r2, r2
 800053e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000542:	fb07 1114 	mls	r1, r7, r4, r1
 8000546:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054a:	fb04 f106 	mul.w	r1, r4, r6
 800054e:	4291      	cmp	r1, r2
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x2a2>
 8000552:	eb1e 0202 	adds.w	r2, lr, r2
 8000556:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 800055a:	d201      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 800055c:	4291      	cmp	r1, r2
 800055e:	d815      	bhi.n	800058c <__udivmoddi4+0x2cc>
 8000560:	4644      	mov	r4, r8
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000568:	e721      	b.n	80003ae <__udivmoddi4+0xee>
 800056a:	1a86      	subs	r6, r0, r2
 800056c:	eb64 0303 	sbc.w	r3, r4, r3
 8000570:	2001      	movs	r0, #1
 8000572:	e70e      	b.n	8000392 <__udivmoddi4+0xd2>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e735      	b.n	80003e6 <__udivmoddi4+0x126>
 800057a:	3902      	subs	r1, #2
 800057c:	4472      	add	r2, lr
 800057e:	e6d0      	b.n	8000322 <__udivmoddi4+0x62>
 8000580:	44f4      	add	ip, lr
 8000582:	3802      	subs	r0, #2
 8000584:	e6e3      	b.n	800034e <__udivmoddi4+0x8e>
 8000586:	44f4      	add	ip, lr
 8000588:	3802      	subs	r0, #2
 800058a:	e742      	b.n	8000412 <__udivmoddi4+0x152>
 800058c:	3c02      	subs	r4, #2
 800058e:	4472      	add	r2, lr
 8000590:	e7e7      	b.n	8000562 <__udivmoddi4+0x2a2>
 8000592:	3802      	subs	r0, #2
 8000594:	4471      	add	r1, lr
 8000596:	e7d0      	b.n	800053a <__udivmoddi4+0x27a>
 8000598:	3b02      	subs	r3, #2
 800059a:	443c      	add	r4, r7
 800059c:	e782      	b.n	80004a4 <__udivmoddi4+0x1e4>
 800059e:	3802      	subs	r0, #2
 80005a0:	443c      	add	r4, r7
 80005a2:	e76a      	b.n	800047a <__udivmoddi4+0x1ba>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f000 fdb0 	bl	8001110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f814 	bl	80005dc <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005b4:	f000 f860 	bl	8000678 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 fa78 	bl	8000aac <MX_GPIO_Init>
  MX_ADC1_Init();
 80005bc:	f000 f874 	bl	80006a8 <MX_ADC1_Init>
  MX_AES_Init();
 80005c0:	f000 f8e2 	bl	8000788 <MX_AES_Init>
  MX_I2C1_Init();
 80005c4:	f000 f91a 	bl	80007fc <MX_I2C1_Init>
  MX_ICACHE_Init();
 80005c8:	f000 f956 	bl	8000878 <MX_ICACHE_Init>
  MX_SPI1_Init();
 80005cc:	f000 f968 	bl	80008a0 <MX_SPI1_Init>
  MX_UART4_Init();
 80005d0:	f000 f9d4 	bl	800097c <MX_UART4_Init>
  MX_USART1_UART_Init();
 80005d4:	f000 fa1e 	bl	8000a14 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <main+0x30>

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b09e      	sub	sp, #120	@ 0x78
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0318 	add.w	r3, r7, #24
 80005e6:	2260      	movs	r2, #96	@ 0x60
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f008 f954 	bl	8008898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
 80005fe:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000600:	2000      	movs	r0, #0
 8000602:	f003 f807 	bl	8003614 <HAL_PWREx_ControlVoltageScaling>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800060c:	f000 faaa 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000610:	2312      	movs	r3, #18
 8000612:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000618:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061a:	2310      	movs	r3, #16
 800061c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061e:	2301      	movs	r3, #1
 8000620:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000622:	2310      	movs	r3, #16
 8000624:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000626:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062c:	2300      	movs	r3, #0
 800062e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0318 	add.w	r3, r7, #24
 8000634:	4618      	mov	r0, r3
 8000636:	f003 f899 	bl	800376c <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000640:	f000 fa90 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	231f      	movs	r3, #31
 8000646:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f003 ff5f 	bl	8004524 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800066c:	f000 fa7a 	bl	8000b64 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3778      	adds	r7, #120	@ 0x78
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800067e:	f003 f855 	bl	800372c <HAL_PWREx_EnableVddIO2>

  PWR_PVDTypeDef sConfigPVD = {0};
 8000682:	463b      	mov	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_7;
 800068a:	23e0      	movs	r3, #224	@ 0xe0
 800068c:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000692:	463b      	mov	r3, r7
 8000694:	4618      	mov	r0, r3
 8000696:	f002 ff3f 	bl	8003518 <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 800069a:	f002 ffab 	bl	80035f4 <HAL_PWR_EnablePVD>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2220      	movs	r2, #32
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f008 f8ef 	bl	8008898 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000778 <MX_ADC1_Init+0xd0>)
 80006bc:	4a2f      	ldr	r2, [pc, #188]	@ (800077c <MX_ADC1_Init+0xd4>)
 80006be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000778 <MX_ADC1_Init+0xd0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80006c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <MX_ADC1_Init+0xd0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80006cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000778 <MX_ADC1_Init+0xd0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d2:	4b29      	ldr	r3, [pc, #164]	@ (8000778 <MX_ADC1_Init+0xd0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006d8:	4b27      	ldr	r3, [pc, #156]	@ (8000778 <MX_ADC1_Init+0xd0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006de:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <MX_ADC1_Init+0xd0>)
 80006e0:	2204      	movs	r2, #4
 80006e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006e4:	4b24      	ldr	r3, [pc, #144]	@ (8000778 <MX_ADC1_Init+0xd0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ea:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <MX_ADC1_Init+0xd0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 80006f2:	4b21      	ldr	r3, [pc, #132]	@ (8000778 <MX_ADC1_Init+0xd0>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <MX_ADC1_Init+0xd0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000700:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <MX_ADC1_Init+0xd0>)
 8000702:	2200      	movs	r2, #0
 8000704:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000706:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <MX_ADC1_Init+0xd0>)
 8000708:	2200      	movs	r2, #0
 800070a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800070c:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <MX_ADC1_Init+0xd0>)
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000714:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <MX_ADC1_Init+0xd0>)
 8000716:	2200      	movs	r2, #0
 8000718:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800071a:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <MX_ADC1_Init+0xd0>)
 800071c:	2200      	movs	r2, #0
 800071e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000720:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <MX_ADC1_Init+0xd0>)
 8000722:	2200      	movs	r2, #0
 8000724:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000726:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_ADC1_Init+0xd0>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_ADC1_Init+0xd0>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000734:	4810      	ldr	r0, [pc, #64]	@ (8000778 <MX_ADC1_Init+0xd0>)
 8000736:	f001 f88b 	bl	8001850 <HAL_ADC_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000740:	f000 fa10 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_ADC1_Init+0xd8>)
 8000746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000748:	2306      	movs	r3, #6
 800074a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_ADC1_Init+0xdc>)
 8000752:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000754:	2304      	movs	r3, #4
 8000756:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_ADC1_Init+0xd0>)
 8000762:	f001 fb5d 	bl	8001e20 <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800076c:	f000 f9fa 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000028 	.word	0x20000028
 800077c:	42028000 	.word	0x42028000
 8000780:	04000002 	.word	0x04000002
 8000784:	ffff0000 	.word	0xffff0000

08000788 <MX_AES_Init>:
  * @brief AES Initialization Function
  * @param None
  * @retval None
  */
static void MX_AES_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 800078c:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <MX_AES_Init+0x60>)
 800078e:	4a17      	ldr	r2, [pc, #92]	@ (80007ec <MX_AES_Init+0x64>)
 8000790:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_NO_SWAP;
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_AES_Init+0x60>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 8000798:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_AES_Init+0x60>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 800079e:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_AES_Init+0x60>)
 80007a0:	4a13      	ldr	r2, [pc, #76]	@ (80007f0 <MX_AES_Init+0x68>)
 80007a2:	60da      	str	r2, [r3, #12]
  hcryp.Init.pInitVect = (uint32_t *)pInitVectAES;
 80007a4:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <MX_AES_Init+0x60>)
 80007a6:	4a13      	ldr	r2, [pc, #76]	@ (80007f4 <MX_AES_Init+0x6c>)
 80007a8:	611a      	str	r2, [r3, #16]
  hcryp.Init.Algorithm = CRYP_AES_GCM_GMAC;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_AES_Init+0x60>)
 80007ac:	2260      	movs	r2, #96	@ 0x60
 80007ae:	615a      	str	r2, [r3, #20]
  hcryp.Init.Header = (uint32_t *)HeaderAES;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <MX_AES_Init+0x60>)
 80007b2:	4a11      	ldr	r2, [pc, #68]	@ (80007f8 <MX_AES_Init+0x70>)
 80007b4:	619a      	str	r2, [r3, #24]
  hcryp.Init.HeaderSize = 1;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_AES_Init+0x60>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	61da      	str	r2, [r3, #28]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <MX_AES_Init+0x60>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_WORD;
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_AES_Init+0x60>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 80007c8:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <MX_AES_Init+0x60>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hcryp.Init.KeyMode = CRYP_KEYMODE_NORMAL;
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_AES_Init+0x60>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <MX_AES_Init+0x60>)
 80007d6:	f002 faa9 	bl	8002d2c <HAL_CRYP_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_AES_Init+0x5c>
  {
    Error_Handler();
 80007e0:	f000 f9c0 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200000b4 	.word	0x200000b4
 80007ec:	420c0000 	.word	0x420c0000
 80007f0:	2000011c 	.word	0x2000011c
 80007f4:	2000012c 	.word	0x2000012c
 80007f8:	08008908 	.word	0x08008908

080007fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000802:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <MX_I2C1_Init+0x78>)
 8000804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000808:	f640 6214 	movw	r2, #3604	@ 0xe14
 800080c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800080e:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000814:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000816:	2201      	movs	r2, #1
 8000818:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800081a:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <MX_I2C1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000820:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000826:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082c:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000832:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000838:	480d      	ldr	r0, [pc, #52]	@ (8000870 <MX_I2C1_Init+0x74>)
 800083a:	f002 fd0b 	bl	8003254 <HAL_I2C_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000844:	f000 f98e 	bl	8000b64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	4809      	ldr	r0, [pc, #36]	@ (8000870 <MX_I2C1_Init+0x74>)
 800084c:	f002 fd9d 	bl	800338a <HAL_I2CEx_ConfigAnalogFilter>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000856:	f000 f985 	bl	8000b64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <MX_I2C1_Init+0x74>)
 800085e:	f002 fddf 	bl	8003420 <HAL_I2CEx_ConfigDigitalFilter>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000868:	f000 f97c 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000013c 	.word	0x2000013c
 8000874:	40005400 	.word	0x40005400

08000878 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800087c:	2000      	movs	r0, #0
 800087e:	f002 fe1b 	bl	80034b8 <HAL_ICACHE_ConfigAssociativityMode>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000888:	f000 f96c 	bl	8000b64 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800088c:	f002 fe34 	bl	80034f8 <HAL_ICACHE_Enable>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000896:	f000 f965 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b0:	4b30      	ldr	r3, [pc, #192]	@ (8000974 <MX_SPI1_Init+0xd4>)
 80008b2:	4a31      	ldr	r2, [pc, #196]	@ (8000978 <MX_SPI1_Init+0xd8>)
 80008b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000974 <MX_SPI1_Init+0xd4>)
 80008b8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80008bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008be:	4b2d      	ldr	r3, [pc, #180]	@ (8000974 <MX_SPI1_Init+0xd4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000974 <MX_SPI1_Init+0xd4>)
 80008c6:	2203      	movs	r2, #3
 80008c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <MX_SPI1_Init+0xd4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d0:	4b28      	ldr	r3, [pc, #160]	@ (8000974 <MX_SPI1_Init+0xd4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008d6:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <MX_SPI1_Init+0xd4>)
 80008d8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80008dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008de:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <MX_SPI1_Init+0xd4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e4:	4b23      	ldr	r3, [pc, #140]	@ (8000974 <MX_SPI1_Init+0xd4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ea:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <MX_SPI1_Init+0xd4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f0:	4b20      	ldr	r3, [pc, #128]	@ (8000974 <MX_SPI1_Init+0xd4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <MX_SPI1_Init+0xd4>)
 80008f8:	2207      	movs	r2, #7
 80008fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <MX_SPI1_Init+0xd4>)
 80008fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000902:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000904:	4b1b      	ldr	r3, [pc, #108]	@ (8000974 <MX_SPI1_Init+0xd4>)
 8000906:	2200      	movs	r2, #0
 8000908:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800090a:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <MX_SPI1_Init+0xd4>)
 800090c:	2200      	movs	r2, #0
 800090e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000910:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <MX_SPI1_Init+0xd4>)
 8000912:	2200      	movs	r2, #0
 8000914:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000916:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <MX_SPI1_Init+0xd4>)
 8000918:	2200      	movs	r2, #0
 800091a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800091c:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <MX_SPI1_Init+0xd4>)
 800091e:	2200      	movs	r2, #0
 8000920:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000922:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <MX_SPI1_Init+0xd4>)
 8000924:	2200      	movs	r2, #0
 8000926:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <MX_SPI1_Init+0xd4>)
 800092a:	2200      	movs	r2, #0
 800092c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_SPI1_Init+0xd4>)
 8000930:	2200      	movs	r2, #0
 8000932:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <MX_SPI1_Init+0xd4>)
 8000936:	2200      	movs	r2, #0
 8000938:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800093a:	480e      	ldr	r0, [pc, #56]	@ (8000974 <MX_SPI1_Init+0xd4>)
 800093c:	f007 f91a 	bl	8007b74 <HAL_SPI_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8000946:	f000 f90d 	bl	8000b64 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800094e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000952:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	@ (8000974 <MX_SPI1_Init+0xd4>)
 800095e:	f007 fa3a 	bl	8007dd6 <HAL_SPIEx_SetConfigAutonomousMode>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8000968:	f000 f8fc 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000190 	.word	0x20000190
 8000978:	40013000 	.word	0x40013000

0800097c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000980:	4b22      	ldr	r3, [pc, #136]	@ (8000a0c <MX_UART4_Init+0x90>)
 8000982:	4a23      	ldr	r2, [pc, #140]	@ (8000a10 <MX_UART4_Init+0x94>)
 8000984:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000986:	4b21      	ldr	r3, [pc, #132]	@ (8000a0c <MX_UART4_Init+0x90>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <MX_UART4_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <MX_UART4_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800099a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <MX_UART4_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <MX_UART4_Init+0x90>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <MX_UART4_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <MX_UART4_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <MX_UART4_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_UART4_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <MX_UART4_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009c4:	4811      	ldr	r0, [pc, #68]	@ (8000a0c <MX_UART4_Init+0x90>)
 80009c6:	f007 fa47 	bl	8007e58 <HAL_UART_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80009d0:	f000 f8c8 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	480d      	ldr	r0, [pc, #52]	@ (8000a0c <MX_UART4_Init+0x90>)
 80009d8:	f007 fe94 	bl	8008704 <HAL_UARTEx_SetTxFifoThreshold>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80009e2:	f000 f8bf 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	4808      	ldr	r0, [pc, #32]	@ (8000a0c <MX_UART4_Init+0x90>)
 80009ea:	f007 fec9 	bl	8008780 <HAL_UARTEx_SetRxFifoThreshold>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80009f4:	f000 f8b6 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <MX_UART4_Init+0x90>)
 80009fa:	f007 fe4a 	bl	8008692 <HAL_UARTEx_DisableFifoMode>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000a04:	f000 f8ae 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000220 	.word	0x20000220
 8000a10:	40004c00 	.word	0x40004c00

08000a14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a18:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a1a:	4a23      	ldr	r2, [pc, #140]	@ (8000aa8 <MX_USART1_UART_Init+0x94>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a50:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a56:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a5c:	4811      	ldr	r0, [pc, #68]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a5e:	f007 f9fb 	bl	8007e58 <HAL_UART_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a68:	f000 f87c 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a70:	f007 fe48 	bl	8008704 <HAL_UARTEx_SetTxFifoThreshold>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a7a:	f000 f873 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4808      	ldr	r0, [pc, #32]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a82:	f007 fe7d 	bl	8008780 <HAL_UARTEx_SetRxFifoThreshold>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a8c:	f000 f86a 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a92:	f007 fdfe 	bl	8008692 <HAL_UARTEx_DisableFifoMode>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a9c:	f000 f862 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200002b4 	.word	0x200002b4
 8000aa8:	40013800 	.word	0x40013800

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	4b26      	ldr	r3, [pc, #152]	@ (8000b5c <MX_GPIO_Init+0xb0>)
 8000ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ac8:	4a24      	ldr	r2, [pc, #144]	@ (8000b5c <MX_GPIO_Init+0xb0>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ad2:	4b22      	ldr	r3, [pc, #136]	@ (8000b5c <MX_GPIO_Init+0xb0>)
 8000ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <MX_GPIO_Init+0xb0>)
 8000ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8000b5c <MX_GPIO_Init+0xb0>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000af0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_GPIO_Init+0xb0>)
 8000af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_GPIO_Init+0xb0>)
 8000b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b04:	4a15      	ldr	r2, [pc, #84]	@ (8000b5c <MX_GPIO_Init+0xb0>)
 8000b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <MX_GPIO_Init+0xb0>)
 8000b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <MX_GPIO_Init+0xb0>)
 8000b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b22:	4a0e      	ldr	r2, [pc, #56]	@ (8000b5c <MX_GPIO_Init+0xb0>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <MX_GPIO_Init+0xb0>)
 8000b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b3a:	2380      	movs	r3, #128	@ 0x80
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <MX_GPIO_Init+0xb4>)
 8000b4e:	f002 f9a9 	bl	8002ea4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b52:	bf00      	nop
 8000b54:	3728      	adds	r7, #40	@ 0x28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	46020c00 	.word	0x46020c00
 8000b60:	42020400 	.word	0x42020400

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <Error_Handler+0x8>

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <HAL_MspInit+0x30>)
 8000b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b7c:	4a08      	ldr	r2, [pc, #32]	@ (8000ba0 <HAL_MspInit+0x30>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_MspInit+0x30>)
 8000b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b8c:	f003 0304 	and.w	r3, r3, #4
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000b94:	f002 fdda 	bl	800374c <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	46020c00 	.word	0x46020c00

08000ba4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b0c0      	sub	sp, #256	@ 0x100
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	22d8      	movs	r2, #216	@ 0xd8
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f007 fe67 	bl	8008898 <memset>
  if(hadc->Instance==ADC1)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a24      	ldr	r2, [pc, #144]	@ (8000c60 <HAL_ADC_MspInit+0xbc>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d140      	bne.n	8000c56 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000bd4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000be0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000be4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4618      	mov	r0, r3
 8000bee:	f004 f869 	bl	8004cc4 <HAL_RCCEx_PeriphCLKConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000bf8:	f7ff ffb4 	bl	8000b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bfc:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <HAL_ADC_MspInit+0xc0>)
 8000bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c02:	4a18      	ldr	r2, [pc, #96]	@ (8000c64 <HAL_ADC_MspInit+0xc0>)
 8000c04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c0c:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <HAL_ADC_MspInit+0xc0>)
 8000c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <HAL_ADC_MspInit+0xc0>)
 8000c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c20:	4a10      	ldr	r2, [pc, #64]	@ (8000c64 <HAL_ADC_MspInit+0xc0>)
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <HAL_ADC_MspInit+0xc0>)
 8000c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <HAL_ADC_MspInit+0xc4>)
 8000c52:	f002 f927 	bl	8002ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c56:	bf00      	nop
 8000c58:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	42028000 	.word	0x42028000
 8000c64:	46020c00 	.word	0x46020c00
 8000c68:	42020800 	.word	0x42020800

08000c6c <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca8 <HAL_CRYP_MspInit+0x3c>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d10e      	bne.n	8000c9c <HAL_CRYP_MspInit+0x30>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <HAL_CRYP_MspInit+0x40>)
 8000c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c84:	4a09      	ldr	r2, [pc, #36]	@ (8000cac <HAL_CRYP_MspInit+0x40>)
 8000c86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c8e:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <HAL_CRYP_MspInit+0x40>)
 8000c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	420c0000 	.word	0x420c0000
 8000cac:	46020c00 	.word	0x46020c00

08000cb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0c0      	sub	sp, #256	@ 0x100
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	22d8      	movs	r2, #216	@ 0xd8
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f007 fde1 	bl	8008898 <memset>
  if(hi2c->Instance==I2C1)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a27      	ldr	r2, [pc, #156]	@ (8000d78 <HAL_I2C_MspInit+0xc8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d145      	bne.n	8000d6c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ce0:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f003 ffe5 	bl	8004cc4 <HAL_RCCEx_PeriphCLKConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000d00:	f7ff ff30 	bl	8000b64 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d04:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <HAL_I2C_MspInit+0xcc>)
 8000d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000d7c <HAL_I2C_MspInit+0xcc>)
 8000d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d10:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d14:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <HAL_I2C_MspInit+0xcc>)
 8000d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000d22:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d2a:	2312      	movs	r3, #18
 8000d2c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d42:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000d46:	4619      	mov	r1, r3
 8000d48:	480d      	ldr	r0, [pc, #52]	@ (8000d80 <HAL_I2C_MspInit+0xd0>)
 8000d4a:	f002 f8ab 	bl	8002ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d7c <HAL_I2C_MspInit+0xcc>)
 8000d50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d54:	4a09      	ldr	r2, [pc, #36]	@ (8000d7c <HAL_I2C_MspInit+0xcc>)
 8000d56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d5a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000d5e:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <HAL_I2C_MspInit+0xcc>)
 8000d60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	46020c00 	.word	0x46020c00
 8000d80:	42021800 	.word	0x42021800

08000d84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0c0      	sub	sp, #256	@ 0x100
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	22d8      	movs	r2, #216	@ 0xd8
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f007 fd77 	bl	8008898 <memset>
  if(hspi->Instance==SPI1)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a27      	ldr	r2, [pc, #156]	@ (8000e4c <HAL_SPI_MspInit+0xc8>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d146      	bne.n	8000e42 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000db4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8000dc0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 ff79 	bl	8004cc4 <HAL_RCCEx_PeriphCLKConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000dd8:	f7ff fec4 	bl	8000b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e50 <HAL_SPI_MspInit+0xcc>)
 8000dde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000de2:	4a1b      	ldr	r2, [pc, #108]	@ (8000e50 <HAL_SPI_MspInit+0xcc>)
 8000de4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000de8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000dec:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <HAL_SPI_MspInit+0xcc>)
 8000dee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000df2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <HAL_SPI_MspInit+0xcc>)
 8000dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e00:	4a13      	ldr	r2, [pc, #76]	@ (8000e50 <HAL_SPI_MspInit+0xcc>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <HAL_SPI_MspInit+0xcc>)
 8000e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e18:	23e0      	movs	r3, #224	@ 0xe0
 8000e1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e30:	2305      	movs	r3, #5
 8000e32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <HAL_SPI_MspInit+0xd0>)
 8000e3e:	f002 f831 	bl	8002ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40013000 	.word	0x40013000
 8000e50:	46020c00 	.word	0x46020c00
 8000e54:	42020000 	.word	0x42020000

08000e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0c2      	sub	sp, #264	@ 0x108
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000e62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000e66:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e78:	f107 0318 	add.w	r3, r7, #24
 8000e7c:	22d8      	movs	r2, #216	@ 0xd8
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f007 fd09 	bl	8008898 <memset>
  if(huart->Instance==UART4)
 8000e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000e8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a52      	ldr	r2, [pc, #328]	@ (8000fdc <HAL_UART_MspInit+0x184>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d145      	bne.n	8000f24 <HAL_UART_MspInit+0xcc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e98:	f04f 0208 	mov.w	r2, #8
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea8:	f107 0318 	add.w	r3, r7, #24
 8000eac:	4618      	mov	r0, r3
 8000eae:	f003 ff09 	bl	8004cc4 <HAL_RCCEx_PeriphCLKConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8000eb8:	f7ff fe54 	bl	8000b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ebc:	4b48      	ldr	r3, [pc, #288]	@ (8000fe0 <HAL_UART_MspInit+0x188>)
 8000ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ec2:	4a47      	ldr	r2, [pc, #284]	@ (8000fe0 <HAL_UART_MspInit+0x188>)
 8000ec4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ec8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ecc:	4b44      	ldr	r3, [pc, #272]	@ (8000fe0 <HAL_UART_MspInit+0x188>)
 8000ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ed2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b41      	ldr	r3, [pc, #260]	@ (8000fe0 <HAL_UART_MspInit+0x188>)
 8000edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ee0:	4a3f      	ldr	r2, [pc, #252]	@ (8000fe0 <HAL_UART_MspInit+0x188>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000eea:	4b3d      	ldr	r3, [pc, #244]	@ (8000fe0 <HAL_UART_MspInit+0x188>)
 8000eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f10:	2308      	movs	r3, #8
 8000f12:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4831      	ldr	r0, [pc, #196]	@ (8000fe4 <HAL_UART_MspInit+0x18c>)
 8000f1e:	f001 ffc1 	bl	8002ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f22:	e056      	b.n	8000fd2 <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==USART1)
 8000f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000f28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe8 <HAL_UART_MspInit+0x190>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d14d      	bne.n	8000fd2 <HAL_UART_MspInit+0x17a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f36:	f04f 0201 	mov.w	r2, #1
 8000f3a:	f04f 0300 	mov.w	r3, #0
 8000f3e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f42:	2300      	movs	r3, #0
 8000f44:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f46:	f107 0318 	add.w	r3, r7, #24
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f003 feba 	bl	8004cc4 <HAL_RCCEx_PeriphCLKConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_UART_MspInit+0x102>
      Error_Handler();
 8000f56:	f7ff fe05 	bl	8000b64 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f5a:	4b21      	ldr	r3, [pc, #132]	@ (8000fe0 <HAL_UART_MspInit+0x188>)
 8000f5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000f60:	4a1f      	ldr	r2, [pc, #124]	@ (8000fe0 <HAL_UART_MspInit+0x188>)
 8000f62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f66:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <HAL_UART_MspInit+0x188>)
 8000f6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000f70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <HAL_UART_MspInit+0x188>)
 8000f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f7e:	4a18      	ldr	r2, [pc, #96]	@ (8000fe0 <HAL_UART_MspInit+0x188>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f88:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <HAL_UART_MspInit+0x188>)
 8000f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8e:	f003 0201 	and.w	r2, r3, #1
 8000f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000f96:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000fa0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000fa4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fa6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000faa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <HAL_UART_MspInit+0x18c>)
 8000fce:	f001 ff69 	bl	8002ea4 <HAL_GPIO_Init>
}
 8000fd2:	bf00      	nop
 8000fd4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40004c00 	.word	0x40004c00
 8000fe0:	46020c00 	.word	0x46020c00
 8000fe4:	42020000 	.word	0x42020000
 8000fe8:	40013800 	.word	0x40013800

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <MemManage_Handler+0x4>

08001004 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <UsageFault_Handler+0x4>

08001014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001042:	f000 f90b 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001050:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <SystemInit+0x68>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001056:	4a17      	ldr	r2, [pc, #92]	@ (80010b4 <SystemInit+0x68>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <SystemInit+0x6c>)
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001066:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <SystemInit+0x6c>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <SystemInit+0x6c>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <SystemInit+0x6c>)
 8001074:	2200      	movs	r2, #0
 8001076:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001078:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <SystemInit+0x6c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0e      	ldr	r2, [pc, #56]	@ (80010b8 <SystemInit+0x6c>)
 800107e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001082:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001086:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <SystemInit+0x6c>)
 800108a:	2200      	movs	r2, #0
 800108c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <SystemInit+0x6c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a09      	ldr	r2, [pc, #36]	@ (80010b8 <SystemInit+0x6c>)
 8001094:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001098:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800109a:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <SystemInit+0x6c>)
 800109c:	2200      	movs	r2, #0
 800109e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010a0:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <SystemInit+0x68>)
 80010a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010a6:	609a      	str	r2, [r3, #8]
  #endif
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00
 80010b8:	46020c00 	.word	0x46020c00

080010bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80010bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010f4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c0:	f7ff ffc4 	bl	800104c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010c6:	e003      	b.n	80010d0 <LoopCopyDataInit>

080010c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010ce:	3104      	adds	r1, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010d0:	480a      	ldr	r0, [pc, #40]	@ (80010fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010d8:	d3f6      	bcc.n	80010c8 <CopyDataInit>
	ldr	r2, =_sbss
 80010da:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010dc:	e002      	b.n	80010e4 <LoopFillZerobss>

080010de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010e0:	f842 3b04 	str.w	r3, [r2], #4

080010e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <LoopForever+0x16>)
	cmp	r2, r3
 80010e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010e8:	d3f9      	bcc.n	80010de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ea:	f007 fbdd 	bl	80088a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ee:	f7ff fa5b 	bl	80005a8 <main>

080010f2 <LoopForever>:

LoopForever:
    b LoopForever
 80010f2:	e7fe      	b.n	80010f2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80010f4:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 80010f8:	08008a1c 	.word	0x08008a1c
	ldr	r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001100:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8001104:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001108:	2000034c 	.word	0x2000034c

0800110c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC1_2_IRQHandler>
	...

08001110 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_Init+0x50>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a11      	ldr	r2, [pc, #68]	@ (8001160 <HAL_Init+0x50>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f001 fd2a 	bl	8002b7a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001126:	f003 fbef 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 800112a:	4602      	mov	r2, r0
 800112c:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <HAL_Init+0x54>)
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	f003 030f 	and.w	r3, r3, #15
 8001134:	490c      	ldr	r1, [pc, #48]	@ (8001168 <HAL_Init+0x58>)
 8001136:	5ccb      	ldrb	r3, [r1, r3]
 8001138:	fa22 f303 	lsr.w	r3, r2, r3
 800113c:	4a0b      	ldr	r2, [pc, #44]	@ (800116c <HAL_Init+0x5c>)
 800113e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001140:	2004      	movs	r0, #4
 8001142:	f001 fd61 	bl	8002c08 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001146:	200f      	movs	r0, #15
 8001148:	f000 f812 	bl	8001170 <HAL_InitTick>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e002      	b.n	800115c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001156:	f7ff fd0b 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40022000 	.word	0x40022000
 8001164:	46020c00 	.word	0x46020c00
 8001168:	0800890c 	.word	0x0800890c
 800116c:	20000000 	.word	0x20000000

08001170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800117c:	4b33      	ldr	r3, [pc, #204]	@ (800124c <HAL_InitTick+0xdc>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e05c      	b.n	8001242 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001188:	4b31      	ldr	r3, [pc, #196]	@ (8001250 <HAL_InitTick+0xe0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b04      	cmp	r3, #4
 8001192:	d10c      	bne.n	80011ae <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001194:	4b2f      	ldr	r3, [pc, #188]	@ (8001254 <HAL_InitTick+0xe4>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b2c      	ldr	r3, [pc, #176]	@ (800124c <HAL_InitTick+0xdc>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	e037      	b.n	800121e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80011ae:	f001 fd83 	bl	8002cb8 <HAL_SYSTICK_GetCLKSourceConfig>
 80011b2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d023      	beq.n	8001202 <HAL_InitTick+0x92>
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d82d      	bhi.n	800121c <HAL_InitTick+0xac>
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_InitTick+0x5e>
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d00d      	beq.n	80011e8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80011cc:	e026      	b.n	800121c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80011ce:	4b21      	ldr	r3, [pc, #132]	@ (8001254 <HAL_InitTick+0xe4>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b1e      	ldr	r3, [pc, #120]	@ (800124c <HAL_InitTick+0xdc>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4619      	mov	r1, r3
 80011d8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80011dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e4:	60fb      	str	r3, [r7, #12]
        break;
 80011e6:	e01a      	b.n	800121e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80011e8:	4b18      	ldr	r3, [pc, #96]	@ (800124c <HAL_InitTick+0xdc>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80011f6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80011fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fe:	60fb      	str	r3, [r7, #12]
        break;
 8001200:	e00d      	b.n	800121e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001202:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_InitTick+0xdc>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001210:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001214:	fbb2 f3f3 	udiv	r3, r2, r3
 8001218:	60fb      	str	r3, [r7, #12]
        break;
 800121a:	e000      	b.n	800121e <HAL_InitTick+0xae>
        break;
 800121c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f001 fcd0 	bl	8002bc4 <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e009      	b.n	8001242 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122e:	2200      	movs	r2, #0
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001236:	f001 fcab 	bl	8002b90 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800123a:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <HAL_InitTick+0xe8>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008
 8001250:	e000e010 	.word	0xe000e010
 8001254:	20000000 	.word	0x20000000
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_IncTick+0x20>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_IncTick+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <HAL_IncTick+0x24>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008
 8001280:	20000348 	.word	0x20000348

08001284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <HAL_GetTick+0x14>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000348 	.word	0x20000348

0800129c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	609a      	str	r2, [r3, #8]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	609a      	str	r2, [r3, #8]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a0a      	ldr	r2, [pc, #40]	@ (8001340 <LL_ADC_SetResolution+0x3c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d104      	bne.n	8001324 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3b01      	subs	r3, #1
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	f023 020c 	bic.w	r2, r3, #12
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	60da      	str	r2, [r3, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	46021000 	.word	0x46021000

08001344 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3360      	adds	r3, #96	@ 0x60
 8001356:	461a      	mov	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	430b      	orrs	r3, r1
 8001374:	431a      	orrs	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 800137a:	bf00      	nop
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001386:	b480      	push	{r7}
 8001388:	b085      	sub	sp, #20
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3360      	adds	r3, #96	@ 0x60
 8001394:	461a      	mov	r2, r3
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b087      	sub	sp, #28
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3360      	adds	r3, #96	@ 0x60
 80013c2:	461a      	mov	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3360      	adds	r3, #96	@ 0x60
 80013f8:	461a      	mov	r2, r3
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	431a      	orrs	r2, r3
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	601a      	str	r2, [r3, #0]
}
 8001412:	bf00      	nop
 8001414:	371c      	adds	r7, #28
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800141e:	b480      	push	{r7}
 8001420:	b087      	sub	sp, #28
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3360      	adds	r3, #96	@ 0x60
 800142e:	461a      	mov	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	431a      	orrs	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	601a      	str	r2, [r3, #0]
}
 8001448:	bf00      	nop
 800144a:	371c      	adds	r7, #28
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001462:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001466:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001476:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	2a00      	cmp	r2, #0
 800147e:	d002      	beq.n	8001486 <LL_ADC_SetGainCompensation+0x32>
 8001480:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001484:	e000      	b.n	8001488 <LL_ADC_SetGainCompensation+0x34>
 8001486:	2200      	movs	r2, #0
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	671a      	str	r2, [r3, #112]	@ 0x70
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800149a:	b480      	push	{r7}
 800149c:	b085      	sub	sp, #20
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	695a      	ldr	r2, [r3, #20]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2107      	movs	r1, #7
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	401a      	ands	r2, r3
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	431a      	orrs	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	@ 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001594 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d020      	beq.n	800152e <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3330      	adds	r3, #48	@ 0x30
 80014f0:	461a      	mov	r2, r3
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	4413      	add	r3, r2
 80014fe:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	f003 031f 	and.w	r3, r3, #31
 800150a:	211f      	movs	r1, #31
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	401a      	ands	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	0e9b      	lsrs	r3, r3, #26
 8001518:	f003 011f 	and.w	r1, r3, #31
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	f003 031f 	and.w	r3, r3, #31
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	431a      	orrs	r2, r3
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 800152c:	e02b      	b.n	8001586 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	210f      	movs	r1, #15
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	401a      	ands	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d104      	bne.n	8001556 <LL_ADC_REG_SetSequencerRanks+0x7e>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	0e9b      	lsrs	r3, r3, #26
 8001550:	f003 031f 	and.w	r3, r3, #31
 8001554:	e010      	b.n	8001578 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	fa93 f3a3 	rbit	r3, r3
 8001560:	613b      	str	r3, [r7, #16]
  return result;
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 800156c:	2320      	movs	r3, #32
 800156e:	e003      	b.n	8001578 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fab3 f383 	clz	r3, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	f001 011f 	and.w	r1, r1, #31
 800157e:	408b      	lsls	r3, r1
 8001580:	431a      	orrs	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001586:	bf00      	nop
 8001588:	3724      	adds	r7, #36	@ 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	46021000 	.word	0x46021000

08001598 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001598:	b480      	push	{r7}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d107      	bne.n	80015bc <LL_ADC_REG_SetSequencerChAdd+0x24>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	0e9b      	lsrs	r3, r3, #26
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	2201      	movs	r2, #1
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	e015      	b.n	80015e8 <LL_ADC_REG_SetSequencerChAdd+0x50>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	fa93 f3a3 	rbit	r3, r3
 80015c6:	60fb      	str	r3, [r7, #12]
  return result;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 80015d2:	2320      	movs	r3, #32
 80015d4:	e003      	b.n	80015de <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	fab3 f383 	clz	r3, r3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f003 031f 	and.w	r3, r3, #31
 80015e2:	2201      	movs	r2, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015f2:	bf00      	nop
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	0e9b      	lsrs	r3, r3, #26
 8001610:	f003 031f 	and.w	r3, r3, #31
 8001614:	2101      	movs	r1, #1
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	401a      	ands	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001630:	b480      	push	{r7}
 8001632:	b08b      	sub	sp, #44	@ 0x2c
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4a2d      	ldr	r2, [pc, #180]	@ (80016f4 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d042      	beq.n	80016ca <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d104      	bne.n	8001658 <LL_ADC_SetChannelSamplingTime+0x28>
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	0e9b      	lsrs	r3, r3, #26
 8001652:	f003 021f 	and.w	r2, r3, #31
 8001656:	e011      	b.n	800167c <LL_ADC_SetChannelSamplingTime+0x4c>
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	617b      	str	r3, [r7, #20]
  return result;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 800166e:	2320      	movs	r3, #32
 8001670:	e003      	b.n	800167a <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	0e5b      	lsrs	r3, r3, #25
 8001680:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001684:	460b      	mov	r3, r1
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	1ad2      	subs	r2, r2, r3
 800168e:	4613      	mov	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3314      	adds	r3, #20
 800169a:	461a      	mov	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	0e5b      	lsrs	r3, r3, #25
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	4413      	add	r3, r2
 80016a8:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	2107      	movs	r1, #7
 80016b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	401a      	ands	r2, r3
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	431a      	orrs	r2, r3
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 80016c8:	e00e      	b.n	80016e8 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	43db      	mvns	r3, r3
 80016d4:	401a      	ands	r2, r3
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	0219      	lsls	r1, r3, #8
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	400b      	ands	r3, r1
 80016de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016e2:	431a      	orrs	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	615a      	str	r2, [r3, #20]
}
 80016e8:	bf00      	nop
 80016ea:	372c      	adds	r7, #44	@ 0x2c
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	46021000 	.word	0x46021000

080016f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001710:	43db      	mvns	r3, r3
 8001712:	401a      	ands	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0318 	and.w	r3, r3, #24
 800171a:	4908      	ldr	r1, [pc, #32]	@ (800173c <LL_ADC_SetChannelSingleDiff+0x44>)
 800171c:	40d9      	lsrs	r1, r3
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	400b      	ands	r3, r1
 8001722:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001726:	431a      	orrs	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800172e:	bf00      	nop
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	000fffff 	.word	0x000fffff

08001740 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001750:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6093      	str	r3, [r2, #8]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001774:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001778:	d101      	bne.n	800177e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800179c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	609a      	str	r2, [r3, #8]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80017c8:	d101      	bne.n	80017ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d101      	bne.n	80017f4 <LL_ADC_IsEnabled+0x18>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <LL_ADC_IsEnabled+0x1a>
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	2b04      	cmp	r3, #4
 8001814:	d101      	bne.n	800181a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	2b08      	cmp	r3, #8
 800183a:	d101      	bne.n	8001840 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b08b      	sub	sp, #44	@ 0x2c
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e2ce      	b.n	8001e0e <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a95      	ldr	r2, [pc, #596]	@ (8001ad4 <HAL_ADC_Init+0x284>)
 800187e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001884:	2b00      	cmp	r3, #0
 8001886:	d109      	bne.n	800189c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff f98b 	bl	8000ba4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff5f 	bl	8001764 <LL_ADC_IsDeepPowerDownEnabled>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff45 	bl	8001740 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff7a 	bl	80017b4 <LL_ADC_IsInternalRegulatorEnabled>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d115      	bne.n	80018f2 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff5e 	bl	800178c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018d0:	4b81      	ldr	r3, [pc, #516]	@ (8001ad8 <HAL_ADC_Init+0x288>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	099b      	lsrs	r3, r3, #6
 80018d6:	4a81      	ldr	r2, [pc, #516]	@ (8001adc <HAL_ADC_Init+0x28c>)
 80018d8:	fba2 2303 	umull	r2, r3, r2, r3
 80018dc:	099b      	lsrs	r3, r3, #6
 80018de:	3301      	adds	r3, #1
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018e4:	e002      	b.n	80018ec <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f9      	bne.n	80018e6 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff5c 	bl	80017b4 <LL_ADC_IsInternalRegulatorEnabled>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10e      	bne.n	8001920 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001906:	f043 0210 	orr.w	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff6c 	bl	8001802 <LL_ADC_REG_IsConversionOngoing>
 800192a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001930:	f003 0310 	and.w	r3, r3, #16
 8001934:	2b00      	cmp	r3, #0
 8001936:	f040 825f 	bne.w	8001df8 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b00      	cmp	r3, #0
 800193e:	f040 825b 	bne.w	8001df8 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001946:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800194a:	f043 0202 	orr.w	r2, r3, #2
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff40 	bl	80017dc <LL_ADC_IsEnabled>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d14f      	bne.n	8001a02 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a5b      	ldr	r2, [pc, #364]	@ (8001ad4 <HAL_ADC_Init+0x284>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d037      	beq.n	80019dc <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a5b      	ldr	r2, [pc, #364]	@ (8001ae0 <HAL_ADC_Init+0x290>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d004      	beq.n	8001980 <HAL_ADC_Init+0x130>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ae4 <HAL_ADC_Init+0x294>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d10e      	bne.n	800199e <HAL_ADC_Init+0x14e>
 8001980:	4857      	ldr	r0, [pc, #348]	@ (8001ae0 <HAL_ADC_Init+0x290>)
 8001982:	f7ff ff2b 	bl	80017dc <LL_ADC_IsEnabled>
 8001986:	4604      	mov	r4, r0
 8001988:	4856      	ldr	r0, [pc, #344]	@ (8001ae4 <HAL_ADC_Init+0x294>)
 800198a:	f7ff ff27 	bl	80017dc <LL_ADC_IsEnabled>
 800198e:	4603      	mov	r3, r0
 8001990:	4323      	orrs	r3, r4
 8001992:	2b00      	cmp	r3, #0
 8001994:	bf0c      	ite	eq
 8001996:	2301      	moveq	r3, #1
 8001998:	2300      	movne	r3, #0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	e008      	b.n	80019b0 <HAL_ADC_Init+0x160>
 800199e:	484d      	ldr	r0, [pc, #308]	@ (8001ad4 <HAL_ADC_Init+0x284>)
 80019a0:	f7ff ff1c 	bl	80017dc <LL_ADC_IsEnabled>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bf0c      	ite	eq
 80019aa:	2301      	moveq	r3, #1
 80019ac:	2300      	movne	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d026      	beq.n	8001a02 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a49      	ldr	r2, [pc, #292]	@ (8001ae0 <HAL_ADC_Init+0x290>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d004      	beq.n	80019c8 <HAL_ADC_Init+0x178>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a48      	ldr	r2, [pc, #288]	@ (8001ae4 <HAL_ADC_Init+0x294>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d101      	bne.n	80019cc <HAL_ADC_Init+0x17c>
 80019c8:	4a47      	ldr	r2, [pc, #284]	@ (8001ae8 <HAL_ADC_Init+0x298>)
 80019ca:	e000      	b.n	80019ce <HAL_ADC_Init+0x17e>
 80019cc:	4a47      	ldr	r2, [pc, #284]	@ (8001aec <HAL_ADC_Init+0x29c>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4619      	mov	r1, r3
 80019d4:	4610      	mov	r0, r2
 80019d6:	f7ff fc61 	bl	800129c <LL_ADC_SetCommonClock>
 80019da:	e012      	b.n	8001a02 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4619      	mov	r1, r3
 80019e6:	4610      	mov	r0, r2
 80019e8:	f7ff fc8c 	bl	8001304 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80019ec:	4b3f      	ldr	r3, [pc, #252]	@ (8001aec <HAL_ADC_Init+0x29c>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80019fc:	493b      	ldr	r1, [pc, #236]	@ (8001aec <HAL_ADC_Init+0x29c>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a33      	ldr	r2, [pc, #204]	@ (8001ad4 <HAL_ADC_Init+0x284>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d010      	beq.n	8001a2e <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a12:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001a18:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001a1e:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001a26:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	623b      	str	r3, [r7, #32]
 8001a2c:	e035      	b.n	8001a9a <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	7f1b      	ldrb	r3, [r3, #28]
 8001a32:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a3a:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a3c:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a42:	2a00      	cmp	r2, #0
 8001a44:	d002      	beq.n	8001a4c <HAL_ADC_Init+0x1fc>
 8001a46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a4a:	e000      	b.n	8001a4e <HAL_ADC_Init+0x1fe>
 8001a4c:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a4e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001a54:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	da04      	bge.n	8001a68 <HAL_ADC_Init+0x218>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a66:	e001      	b.n	8001a6c <HAL_ADC_Init+0x21c>
 8001a68:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8001a6c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	491b      	ldr	r1, [pc, #108]	@ (8001ae0 <HAL_ADC_Init+0x290>)
 8001a74:	428b      	cmp	r3, r1
 8001a76:	d004      	beq.n	8001a82 <HAL_ADC_Init+0x232>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4919      	ldr	r1, [pc, #100]	@ (8001ae4 <HAL_ADC_Init+0x294>)
 8001a7e:	428b      	cmp	r3, r1
 8001a80:	d103      	bne.n	8001a8a <HAL_ADC_Init+0x23a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a88:	e003      	b.n	8001a92 <HAL_ADC_Init+0x242>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a90:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001a92:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a94:	6a3a      	ldr	r2, [r7, #32]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d131      	bne.n	8001b08 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <HAL_ADC_Init+0x284>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d007      	beq.n	8001abe <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	045b      	lsls	r3, r3, #17
 8001ab6:	6a3a      	ldr	r2, [r7, #32]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	e024      	b.n	8001b08 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d113      	bne.n	8001af0 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ace:	623b      	str	r3, [r7, #32]
 8001ad0:	e01a      	b.n	8001b08 <HAL_ADC_Init+0x2b8>
 8001ad2:	bf00      	nop
 8001ad4:	46021000 	.word	0x46021000
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	053e2d63 	.word	0x053e2d63
 8001ae0:	42028000 	.word	0x42028000
 8001ae4:	42028100 	.word	0x42028100
 8001ae8:	42028300 	.word	0x42028300
 8001aec:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001af4:	f043 0220 	orr.w	r2, r3, #32
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a75      	ldr	r2, [pc, #468]	@ (8001ce4 <HAL_ADC_Init+0x494>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d018      	beq.n	8001b44 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b1e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b26:	4313      	orrs	r3, r2
 8001b28:	6a3a      	ldr	r2, [r7, #32]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	4b6c      	ldr	r3, [pc, #432]	@ (8001ce8 <HAL_ADC_Init+0x498>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	6a39      	ldr	r1, [r7, #32]
 8001b3e:	430b      	orrs	r3, r1
 8001b40:	60d3      	str	r3, [r2, #12]
 8001b42:	e031      	b.n	8001ba8 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d009      	beq.n	8001b60 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b50:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	6a3a      	ldr	r2, [r7, #32]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	4b61      	ldr	r3, [pc, #388]	@ (8001cec <HAL_ADC_Init+0x49c>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	6a39      	ldr	r1, [r7, #32]
 8001b70:	430b      	orrs	r3, r1
 8001b72:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1a      	ldr	r2, [r3, #32]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d008      	beq.n	8001ba8 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a4d      	ldr	r2, [pc, #308]	@ (8001ce4 <HAL_ADC_Init+0x494>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	f000 80a4 	beq.w	8001cfc <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fe22 	bl	8001802 <LL_ADC_REG_IsConversionOngoing>
 8001bbe:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fe2f 	bl	8001828 <LL_ADC_INJ_IsConversionOngoing>
 8001bca:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d166      	bne.n	8001ca0 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d163      	bne.n	8001ca0 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7f1b      	ldrb	r3, [r3, #28]
 8001bdc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4943      	ldr	r1, [pc, #268]	@ (8001cf0 <HAL_ADC_Init+0x4a0>)
 8001be4:	428b      	cmp	r3, r1
 8001be6:	d004      	beq.n	8001bf2 <HAL_ADC_Init+0x3a2>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4941      	ldr	r1, [pc, #260]	@ (8001cf4 <HAL_ADC_Init+0x4a4>)
 8001bee:	428b      	cmp	r3, r1
 8001bf0:	d102      	bne.n	8001bf8 <HAL_ADC_Init+0x3a8>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf6:	e002      	b.n	8001bfe <HAL_ADC_Init+0x3ae>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bfc:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c0c:	f023 0303 	bic.w	r3, r3, #3
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	6a39      	ldr	r1, [r7, #32]
 8001c16:	430b      	orrs	r3, r1
 8001c18:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	f7ff fc11 	bl	8001454 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d11e      	bne.n	8001c7a <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c40:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf8 <HAL_ADC_Init+0x4a8>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001c50:	0411      	lsls	r1, r2, #16
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c56:	4311      	orrs	r1, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8001c5c:	4311      	orrs	r1, r2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8001c62:	4311      	orrs	r1, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001c68:	0892      	lsrs	r2, r2, #2
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	611a      	str	r2, [r3, #16]
 8001c78:	e007      	b.n	8001c8a <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d10c      	bne.n	8001cc2 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f023 010f 	bic.w	r1, r3, #15
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb6:	1e5a      	subs	r2, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cc0:	e007      	b.n	8001cd2 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 020f 	bic.w	r2, r2, #15
 8001cd0:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001cd6:	f023 0303 	bic.w	r3, r3, #3
 8001cda:	f043 0201 	orr.w	r2, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ce2:	e092      	b.n	8001e0a <HAL_ADC_Init+0x5ba>
 8001ce4:	46021000 	.word	0x46021000
 8001ce8:	fff0c013 	.word	0xfff0c013
 8001cec:	ffde800d 	.word	0xffde800d
 8001cf0:	42028000 	.word	0x42028000
 8001cf4:	42028100 	.word	0x42028100
 8001cf8:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d111      	bne.n	8001d2a <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001d0e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8001d14:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8001d1a:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	4b39      	ldr	r3, [pc, #228]	@ (8001e18 <HAL_ADC_Init+0x5c8>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	69f9      	ldr	r1, [r7, #28]
 8001d3a:	430b      	orrs	r3, r1
 8001d3c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d46:	461a      	mov	r2, r3
 8001d48:	2100      	movs	r1, #0
 8001d4a:	f7ff fba6 	bl	800149a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d56:	461a      	mov	r2, r3
 8001d58:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8001d5c:	f7ff fb9d 	bl	800149a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d108      	bne.n	8001d7a <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f062 020f 	orn	r2, r2, #15
 8001d76:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d78:	e018      	b.n	8001dac <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d82:	d113      	bne.n	8001dac <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	f003 031c 	and.w	r3, r3, #28
 8001d96:	f06f 020f 	mvn.w	r2, #15
 8001d9a:	fa02 f103 	lsl.w	r1, r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <HAL_ADC_Init+0x5cc>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	6a3a      	ldr	r2, [r7, #32]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d10b      	bne.n	8001dd4 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001dc6:	f023 0303 	bic.w	r3, r3, #3
 8001dca:	f043 0201 	orr.w	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001dd2:	e01a      	b.n	8001e0a <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001dd8:	f023 0312 	bic.w	r3, r3, #18
 8001ddc:	f043 0210 	orr.w	r2, r3, #16
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001de8:	f043 0201 	orr.w	r2, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001df6:	e008      	b.n	8001e0a <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001dfc:	f043 0210 	orr.w	r2, r3, #16
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8001e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	372c      	adds	r7, #44	@ 0x2c
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd90      	pop	{r4, r7, pc}
 8001e16:	bf00      	nop
 8001e18:	f7fffc02 	.word	0xf7fffc02
 8001e1c:	833ffff3 	.word	0x833ffff3

08001e20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b0b7      	sub	sp, #220	@ 0xdc
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4aa8      	ldr	r2, [pc, #672]	@ (80020dc <HAL_ADC_ConfigChannel+0x2bc>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d103      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d102      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x36>
 8001e50:	2302      	movs	r3, #2
 8001e52:	f000 bdfe 	b.w	8002a52 <HAL_ADC_ConfigChannel+0xc32>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fccd 	bl	8001802 <LL_ADC_REG_IsConversionOngoing>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 85c1 	bne.w	80029f2 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a99      	ldr	r2, [pc, #612]	@ (80020dc <HAL_ADC_ConfigChannel+0x2bc>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	f000 8409 	beq.w	800268e <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d108      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x7a>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0e9b      	lsrs	r3, r3, #26
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2201      	movs	r2, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	e01d      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0xb6>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8001eae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001eb2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8001eb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	e004      	b.n	8001ecc <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8001ec2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	69d1      	ldr	r1, [r2, #28]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6859      	ldr	r1, [r3, #4]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f7ff faf1 	bl	80014d8 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fc81 	bl	8001802 <LL_ADC_REG_IsConversionOngoing>
 8001f00:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fc8d 	bl	8001828 <LL_ADC_INJ_IsConversionOngoing>
 8001f0e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 81df 	bne.w	80022da <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f040 81da 	bne.w	80022da <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	6819      	ldr	r1, [r3, #0]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	461a      	mov	r2, r3
 8001f34:	f7ff fb7c 	bl	8001630 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d046      	beq.n	8001fe8 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6919      	ldr	r1, [r3, #16]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f6a:	f7ff f9eb 	bl	8001344 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6919      	ldr	r1, [r3, #16]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f7ff fa19 	bl	80013b2 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	7e9b      	ldrb	r3, [r3, #26]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d11e      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x17e>
 8001f98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f9c:	e000      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x180>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f7ff fa3c 	bl	800141e <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d102      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x19c>
 8001fb6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001fba:	e000      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x19e>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f7ff fa12 	bl	80013e8 <LL_ADC_SetOffsetSignedSaturation>
 8001fc4:	e189      	b.n	80022da <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f7ff fa24 	bl	800141e <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f7ff fa01 	bl	80013e8 <LL_ADC_SetOffsetSignedSaturation>
 8001fe6:	e178      	b.n	80022da <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff f9c9 	bl	8001386 <LL_ADC_GetOffsetChannel>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10a      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x1f4>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff f9be 	bl	8001386 <LL_ADC_GetOffsetChannel>
 800200a:	4603      	mov	r3, r0
 800200c:	0e9b      	lsrs	r3, r3, #26
 800200e:	f003 021f 	and.w	r2, r3, #31
 8002012:	e01e      	b.n	8002052 <HAL_ADC_ConfigChannel+0x232>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff f9b3 	bl	8001386 <LL_ADC_GetOffsetChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002032:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002036:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800203a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002042:	2320      	movs	r3, #32
 8002044:	e004      	b.n	8002050 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8002046:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d105      	bne.n	800206a <HAL_ADC_ConfigChannel+0x24a>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	0e9b      	lsrs	r3, r3, #26
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	e018      	b.n	800209c <HAL_ADC_ConfigChannel+0x27c>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800207e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002082:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 800208e:	2320      	movs	r3, #32
 8002090:	e004      	b.n	800209c <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002092:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800209c:	429a      	cmp	r2, r3
 800209e:	d107      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	2300      	movs	r3, #0
 80020aa:	2100      	movs	r1, #0
 80020ac:	f7ff f94a 	bl	8001344 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2101      	movs	r1, #1
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f965 	bl	8001386 <LL_ADC_GetOffsetChannel>
 80020bc:	4603      	mov	r3, r0
 80020be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10c      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x2c0>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2101      	movs	r1, #1
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff f95a 	bl	8001386 <LL_ADC_GetOffsetChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	0e9b      	lsrs	r3, r3, #26
 80020d6:	f003 021f 	and.w	r2, r3, #31
 80020da:	e020      	b.n	800211e <HAL_ADC_ConfigChannel+0x2fe>
 80020dc:	46021000 	.word	0x46021000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff f94d 	bl	8001386 <LL_ADC_GetOffsetChannel>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80020fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002102:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002106:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800210e:	2320      	movs	r3, #32
 8002110:	e004      	b.n	800211c <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002112:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d105      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x316>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	0e9b      	lsrs	r3, r3, #26
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	e018      	b.n	8002168 <HAL_ADC_ConfigChannel+0x348>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800214a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800214e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002152:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 800215a:	2320      	movs	r3, #32
 800215c:	e004      	b.n	8002168 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 800215e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002168:	429a      	cmp	r2, r3
 800216a:	d107      	bne.n	800217c <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	2300      	movs	r3, #0
 8002176:	2101      	movs	r1, #1
 8002178:	f7ff f8e4 	bl	8001344 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2102      	movs	r1, #2
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f8ff 	bl	8001386 <LL_ADC_GetOffsetChannel>
 8002188:	4603      	mov	r3, r0
 800218a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10a      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x388>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2102      	movs	r1, #2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff f8f4 	bl	8001386 <LL_ADC_GetOffsetChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	0e9b      	lsrs	r3, r3, #26
 80021a2:	f003 021f 	and.w	r2, r3, #31
 80021a6:	e01a      	b.n	80021de <HAL_ADC_ConfigChannel+0x3be>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2102      	movs	r1, #2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff f8e9 	bl	8001386 <LL_ADC_GetOffsetChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80021c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80021c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80021ce:	2320      	movs	r3, #32
 80021d0:	e004      	b.n	80021dc <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80021d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d105      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x3d6>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	0e9b      	lsrs	r3, r3, #26
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	e011      	b.n	800221a <HAL_ADC_ConfigChannel+0x3fa>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002206:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002208:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800220e:	2320      	movs	r3, #32
 8002210:	e003      	b.n	800221a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800221a:	429a      	cmp	r2, r3
 800221c:	d107      	bne.n	800222e <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2300      	movs	r3, #0
 8002228:	2102      	movs	r1, #2
 800222a:	f7ff f88b 	bl	8001344 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2103      	movs	r1, #3
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff f8a6 	bl	8001386 <LL_ADC_GetOffsetChannel>
 800223a:	4603      	mov	r3, r0
 800223c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10a      	bne.n	800225a <HAL_ADC_ConfigChannel+0x43a>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2103      	movs	r1, #3
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff f89b 	bl	8001386 <LL_ADC_GetOffsetChannel>
 8002250:	4603      	mov	r3, r0
 8002252:	0e9b      	lsrs	r3, r3, #26
 8002254:	f003 021f 	and.w	r2, r3, #31
 8002258:	e017      	b.n	800228a <HAL_ADC_ConfigChannel+0x46a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2103      	movs	r1, #3
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff f890 	bl	8001386 <LL_ADC_GetOffsetChannel>
 8002266:	4603      	mov	r3, r0
 8002268:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002272:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002274:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002276:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 800227c:	2320      	movs	r3, #32
 800227e:	e003      	b.n	8002288 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8002280:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d105      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x482>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	0e9b      	lsrs	r3, r3, #26
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	e011      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x4a6>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80022b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80022b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 80022ba:	2320      	movs	r3, #32
 80022bc:	e003      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 80022be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d107      	bne.n	80022da <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	2300      	movs	r3, #0
 80022d4:	2103      	movs	r1, #3
 80022d6:	f7ff f835 	bl	8001344 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fa7c 	bl	80017dc <LL_ADC_IsEnabled>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 83ad 	bne.w	8002a46 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6819      	ldr	r1, [r3, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	461a      	mov	r2, r3
 80022fa:	f7ff f9fd 	bl	80016f8 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002306:	f040 80d6 	bne.w	80024b6 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10b      	bne.n	800232e <HAL_ADC_ConfigChannel+0x50e>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	0e9b      	lsrs	r3, r3, #26
 800231c:	3301      	adds	r3, #1
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	2b09      	cmp	r3, #9
 8002324:	bf94      	ite	ls
 8002326:	2301      	movls	r3, #1
 8002328:	2300      	movhi	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	e019      	b.n	8002362 <HAL_ADC_ConfigChannel+0x542>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800233c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800233e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002346:	2320      	movs	r3, #32
 8002348:	e003      	b.n	8002352 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800234a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	3301      	adds	r3, #1
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	2b09      	cmp	r3, #9
 800235a:	bf94      	ite	ls
 800235c:	2301      	movls	r3, #1
 800235e:	2300      	movhi	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d04d      	beq.n	8002402 <HAL_ADC_ConfigChannel+0x5e2>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d107      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x562>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	0e9b      	lsrs	r3, r3, #26
 8002378:	3301      	adds	r3, #1
 800237a:	069b      	lsls	r3, r3, #26
 800237c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002380:	e015      	b.n	80023ae <HAL_ADC_ConfigChannel+0x58e>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002392:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800239a:	2320      	movs	r3, #32
 800239c:	e003      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800239e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	3301      	adds	r3, #1
 80023a8:	069b      	lsls	r3, r3, #26
 80023aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x5ae>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	0e9b      	lsrs	r3, r3, #26
 80023c0:	3301      	adds	r3, #1
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	2101      	movs	r1, #1
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	e017      	b.n	80023fe <HAL_ADC_ConfigChannel+0x5de>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80023dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023de:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80023e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 80023e6:	2320      	movs	r3, #32
 80023e8:	e003      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 80023ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	3301      	adds	r3, #1
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	2101      	movs	r1, #1
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	4313      	orrs	r3, r2
 8002400:	e04e      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x680>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d107      	bne.n	800241e <HAL_ADC_ConfigChannel+0x5fe>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	3301      	adds	r3, #1
 8002416:	069b      	lsls	r3, r3, #26
 8002418:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800241c:	e015      	b.n	800244a <HAL_ADC_ConfigChannel+0x62a>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8002436:	2320      	movs	r3, #32
 8002438:	e003      	b.n	8002442 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800243a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	3301      	adds	r3, #1
 8002444:	069b      	lsls	r3, r3, #26
 8002446:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_ADC_ConfigChannel+0x64a>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0e9b      	lsrs	r3, r3, #26
 800245c:	3301      	adds	r3, #1
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	2101      	movs	r1, #1
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	e017      	b.n	800249a <HAL_ADC_ConfigChannel+0x67a>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	fa93 f3a3 	rbit	r3, r3
 8002476:	61bb      	str	r3, [r7, #24]
  return result;
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8002482:	2320      	movs	r3, #32
 8002484:	e003      	b.n	800248e <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	3301      	adds	r3, #1
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	2101      	movs	r1, #1
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	4313      	orrs	r3, r2
 800249c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	461a      	mov	r2, r3
 80024ae:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80024b2:	f7ff f8bd 	bl	8001630 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f280 82c3 	bge.w	8002a46 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a92      	ldr	r2, [pc, #584]	@ (8002710 <HAL_ADC_ConfigChannel+0x8f0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d004      	beq.n	80024d4 <HAL_ADC_ConfigChannel+0x6b4>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a91      	ldr	r2, [pc, #580]	@ (8002714 <HAL_ADC_ConfigChannel+0x8f4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d101      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x6b8>
 80024d4:	4b90      	ldr	r3, [pc, #576]	@ (8002718 <HAL_ADC_ConfigChannel+0x8f8>)
 80024d6:	e000      	b.n	80024da <HAL_ADC_ConfigChannel+0x6ba>
 80024d8:	4b90      	ldr	r3, [pc, #576]	@ (800271c <HAL_ADC_ConfigChannel+0x8fc>)
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe ff04 	bl	80012e8 <LL_ADC_GetCommonPathInternalCh>
 80024e0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a89      	ldr	r2, [pc, #548]	@ (8002710 <HAL_ADC_ConfigChannel+0x8f0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d004      	beq.n	80024f8 <HAL_ADC_ConfigChannel+0x6d8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a88      	ldr	r2, [pc, #544]	@ (8002714 <HAL_ADC_ConfigChannel+0x8f4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d10e      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x6f6>
 80024f8:	4885      	ldr	r0, [pc, #532]	@ (8002710 <HAL_ADC_ConfigChannel+0x8f0>)
 80024fa:	f7ff f96f 	bl	80017dc <LL_ADC_IsEnabled>
 80024fe:	4604      	mov	r4, r0
 8002500:	4884      	ldr	r0, [pc, #528]	@ (8002714 <HAL_ADC_ConfigChannel+0x8f4>)
 8002502:	f7ff f96b 	bl	80017dc <LL_ADC_IsEnabled>
 8002506:	4603      	mov	r3, r0
 8002508:	4323      	orrs	r3, r4
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	e008      	b.n	8002528 <HAL_ADC_ConfigChannel+0x708>
 8002516:	4882      	ldr	r0, [pc, #520]	@ (8002720 <HAL_ADC_ConfigChannel+0x900>)
 8002518:	f7ff f960 	bl	80017dc <LL_ADC_IsEnabled>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	bf0c      	ite	eq
 8002522:	2301      	moveq	r3, #1
 8002524:	2300      	movne	r3, #0
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80a6 	beq.w	800267a <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a7c      	ldr	r2, [pc, #496]	@ (8002724 <HAL_ADC_ConfigChannel+0x904>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d13c      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002538:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800253c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d136      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a71      	ldr	r2, [pc, #452]	@ (8002710 <HAL_ADC_ConfigChannel+0x8f0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00a      	beq.n	8002564 <HAL_ADC_ConfigChannel+0x744>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a70      	ldr	r2, [pc, #448]	@ (8002714 <HAL_ADC_ConfigChannel+0x8f4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d005      	beq.n	8002564 <HAL_ADC_ConfigChannel+0x744>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a70      	ldr	r2, [pc, #448]	@ (8002720 <HAL_ADC_ConfigChannel+0x900>)
 800255e:	4293      	cmp	r3, r2
 8002560:	f040 826e 	bne.w	8002a40 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a69      	ldr	r2, [pc, #420]	@ (8002710 <HAL_ADC_ConfigChannel+0x8f0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d004      	beq.n	8002578 <HAL_ADC_ConfigChannel+0x758>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a68      	ldr	r2, [pc, #416]	@ (8002714 <HAL_ADC_ConfigChannel+0x8f4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x75c>
 8002578:	4a67      	ldr	r2, [pc, #412]	@ (8002718 <HAL_ADC_ConfigChannel+0x8f8>)
 800257a:	e000      	b.n	800257e <HAL_ADC_ConfigChannel+0x75e>
 800257c:	4a67      	ldr	r2, [pc, #412]	@ (800271c <HAL_ADC_ConfigChannel+0x8fc>)
 800257e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002582:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002586:	4619      	mov	r1, r3
 8002588:	4610      	mov	r0, r2
 800258a:	f7fe fe9a 	bl	80012c2 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800258e:	4b66      	ldr	r3, [pc, #408]	@ (8002728 <HAL_ADC_ConfigChannel+0x908>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	099b      	lsrs	r3, r3, #6
 8002594:	4a65      	ldr	r2, [pc, #404]	@ (800272c <HAL_ADC_ConfigChannel+0x90c>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	099b      	lsrs	r3, r3, #6
 800259c:	3301      	adds	r3, #1
 800259e:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80025a0:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80025a2:	e002      	b.n	80025aa <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f9      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025b0:	e246      	b.n	8002a40 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a5e      	ldr	r2, [pc, #376]	@ (8002730 <HAL_ADC_ConfigChannel+0x910>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d12b      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d125      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a50      	ldr	r2, [pc, #320]	@ (8002710 <HAL_ADC_ConfigChannel+0x8f0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00a      	beq.n	80025e8 <HAL_ADC_ConfigChannel+0x7c8>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a4f      	ldr	r2, [pc, #316]	@ (8002714 <HAL_ADC_ConfigChannel+0x8f4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d005      	beq.n	80025e8 <HAL_ADC_ConfigChannel+0x7c8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002720 <HAL_ADC_ConfigChannel+0x900>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	f040 822e 	bne.w	8002a44 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a48      	ldr	r2, [pc, #288]	@ (8002710 <HAL_ADC_ConfigChannel+0x8f0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d004      	beq.n	80025fc <HAL_ADC_ConfigChannel+0x7dc>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a47      	ldr	r2, [pc, #284]	@ (8002714 <HAL_ADC_ConfigChannel+0x8f4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x7e0>
 80025fc:	4a46      	ldr	r2, [pc, #280]	@ (8002718 <HAL_ADC_ConfigChannel+0x8f8>)
 80025fe:	e000      	b.n	8002602 <HAL_ADC_ConfigChannel+0x7e2>
 8002600:	4a46      	ldr	r2, [pc, #280]	@ (800271c <HAL_ADC_ConfigChannel+0x8fc>)
 8002602:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800260a:	4619      	mov	r1, r3
 800260c:	4610      	mov	r0, r2
 800260e:	f7fe fe58 	bl	80012c2 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002612:	e217      	b.n	8002a44 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a46      	ldr	r2, [pc, #280]	@ (8002734 <HAL_ADC_ConfigChannel+0x914>)
 800261a:	4293      	cmp	r3, r2
 800261c:	f040 8213 	bne.w	8002a46 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002620:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002624:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 820c 	bne.w	8002a46 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a37      	ldr	r2, [pc, #220]	@ (8002710 <HAL_ADC_ConfigChannel+0x8f0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00a      	beq.n	800264e <HAL_ADC_ConfigChannel+0x82e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a35      	ldr	r2, [pc, #212]	@ (8002714 <HAL_ADC_ConfigChannel+0x8f4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d005      	beq.n	800264e <HAL_ADC_ConfigChannel+0x82e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a36      	ldr	r2, [pc, #216]	@ (8002720 <HAL_ADC_ConfigChannel+0x900>)
 8002648:	4293      	cmp	r3, r2
 800264a:	f040 81fc 	bne.w	8002a46 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a2f      	ldr	r2, [pc, #188]	@ (8002710 <HAL_ADC_ConfigChannel+0x8f0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d004      	beq.n	8002662 <HAL_ADC_ConfigChannel+0x842>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a2d      	ldr	r2, [pc, #180]	@ (8002714 <HAL_ADC_ConfigChannel+0x8f4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x846>
 8002662:	4a2d      	ldr	r2, [pc, #180]	@ (8002718 <HAL_ADC_ConfigChannel+0x8f8>)
 8002664:	e000      	b.n	8002668 <HAL_ADC_ConfigChannel+0x848>
 8002666:	4a2d      	ldr	r2, [pc, #180]	@ (800271c <HAL_ADC_ConfigChannel+0x8fc>)
 8002668:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800266c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002670:	4619      	mov	r1, r3
 8002672:	4610      	mov	r0, r2
 8002674:	f7fe fe25 	bl	80012c2 <LL_ADC_SetCommonPathInternalCh>
 8002678:	e1e5      	b.n	8002a46 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800267e:	f043 0220 	orr.w	r2, r3, #32
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800268c:	e1db      	b.n	8002a46 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	f000 811b 	beq.w	80028d6 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026a8:	d004      	beq.n	80026b4 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80026ae:	4a22      	ldr	r2, [pc, #136]	@ (8002738 <HAL_ADC_ConfigChannel+0x918>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d107      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe ff6b 	bl	8001598 <LL_ADC_REG_SetSequencerChAdd>
 80026c2:	e059      	b.n	8002778 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	210f      	movs	r1, #15
 80026d4:	fa01 f303 	lsl.w	r3, r1, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	401a      	ands	r2, r3
 80026dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x8d4>
 80026e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026ec:	0e9b      	lsrs	r3, r3, #26
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	e027      	b.n	8002744 <HAL_ADC_ConfigChannel+0x924>
 80026f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026f8:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	60fb      	str	r3, [r7, #12]
  return result;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d117      	bne.n	800273c <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 800270c:	2320      	movs	r3, #32
 800270e:	e019      	b.n	8002744 <HAL_ADC_ConfigChannel+0x924>
 8002710:	42028000 	.word	0x42028000
 8002714:	42028100 	.word	0x42028100
 8002718:	42028300 	.word	0x42028300
 800271c:	46021300 	.word	0x46021300
 8002720:	46021000 	.word	0x46021000
 8002724:	ce080000 	.word	0xce080000
 8002728:	20000000 	.word	0x20000000
 800272c:	053e2d63 	.word	0x053e2d63
 8002730:	ca040000 	.word	0xca040000
 8002734:	80000001 	.word	0x80000001
 8002738:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	6839      	ldr	r1, [r7, #0]
 8002746:	6849      	ldr	r1, [r1, #4]
 8002748:	f001 011f 	and.w	r1, r1, #31
 800274c:	408b      	lsls	r3, r1
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	089b      	lsrs	r3, r3, #2
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002762:	429a      	cmp	r2, r3
 8002764:	d808      	bhi.n	8002778 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002772:	4619      	mov	r1, r3
 8002774:	f7fe feb0 	bl	80014d8 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	461a      	mov	r2, r3
 8002782:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002786:	f7fe ff53 	bl	8001630 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f280 8159 	bge.w	8002a46 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a9b      	ldr	r2, [pc, #620]	@ (8002a08 <HAL_ADC_ConfigChannel+0xbe8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d004      	beq.n	80027a8 <HAL_ADC_ConfigChannel+0x988>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a9a      	ldr	r2, [pc, #616]	@ (8002a0c <HAL_ADC_ConfigChannel+0xbec>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d101      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x98c>
 80027a8:	4b99      	ldr	r3, [pc, #612]	@ (8002a10 <HAL_ADC_ConfigChannel+0xbf0>)
 80027aa:	e000      	b.n	80027ae <HAL_ADC_ConfigChannel+0x98e>
 80027ac:	4b99      	ldr	r3, [pc, #612]	@ (8002a14 <HAL_ADC_ConfigChannel+0xbf4>)
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe fd9a 	bl	80012e8 <LL_ADC_GetCommonPathInternalCh>
 80027b4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a96      	ldr	r2, [pc, #600]	@ (8002a18 <HAL_ADC_ConfigChannel+0xbf8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d12b      	bne.n	800281a <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d125      	bne.n	800281a <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a8d      	ldr	r2, [pc, #564]	@ (8002a08 <HAL_ADC_ConfigChannel+0xbe8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d004      	beq.n	80027e2 <HAL_ADC_ConfigChannel+0x9c2>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a8b      	ldr	r2, [pc, #556]	@ (8002a0c <HAL_ADC_ConfigChannel+0xbec>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x9c6>
 80027e2:	4a8b      	ldr	r2, [pc, #556]	@ (8002a10 <HAL_ADC_ConfigChannel+0xbf0>)
 80027e4:	e000      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x9c8>
 80027e6:	4a8b      	ldr	r2, [pc, #556]	@ (8002a14 <HAL_ADC_ConfigChannel+0xbf4>)
 80027e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027f0:	4619      	mov	r1, r3
 80027f2:	4610      	mov	r0, r2
 80027f4:	f7fe fd65 	bl	80012c2 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80027f8:	4b88      	ldr	r3, [pc, #544]	@ (8002a1c <HAL_ADC_ConfigChannel+0xbfc>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	099b      	lsrs	r3, r3, #6
 80027fe:	4a88      	ldr	r2, [pc, #544]	@ (8002a20 <HAL_ADC_ConfigChannel+0xc00>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	099b      	lsrs	r3, r3, #6
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800280a:	e002      	b.n	8002812 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	3b01      	subs	r3, #1
 8002810:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f9      	bne.n	800280c <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002818:	e045      	b.n	80028a6 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a81      	ldr	r2, [pc, #516]	@ (8002a24 <HAL_ADC_ConfigChannel+0xc04>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d11b      	bne.n	800285c <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002828:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800282c:	2b00      	cmp	r3, #0
 800282e:	d115      	bne.n	800285c <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a74      	ldr	r2, [pc, #464]	@ (8002a08 <HAL_ADC_ConfigChannel+0xbe8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d004      	beq.n	8002844 <HAL_ADC_ConfigChannel+0xa24>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a73      	ldr	r2, [pc, #460]	@ (8002a0c <HAL_ADC_ConfigChannel+0xbec>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d101      	bne.n	8002848 <HAL_ADC_ConfigChannel+0xa28>
 8002844:	4a72      	ldr	r2, [pc, #456]	@ (8002a10 <HAL_ADC_ConfigChannel+0xbf0>)
 8002846:	e000      	b.n	800284a <HAL_ADC_ConfigChannel+0xa2a>
 8002848:	4a72      	ldr	r2, [pc, #456]	@ (8002a14 <HAL_ADC_ConfigChannel+0xbf4>)
 800284a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800284e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002852:	4619      	mov	r1, r3
 8002854:	4610      	mov	r0, r2
 8002856:	f7fe fd34 	bl	80012c2 <LL_ADC_SetCommonPathInternalCh>
 800285a:	e024      	b.n	80028a6 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a71      	ldr	r2, [pc, #452]	@ (8002a28 <HAL_ADC_ConfigChannel+0xc08>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d11f      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002866:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800286a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d115      	bne.n	800289e <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a64      	ldr	r2, [pc, #400]	@ (8002a08 <HAL_ADC_ConfigChannel+0xbe8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d004      	beq.n	8002886 <HAL_ADC_ConfigChannel+0xa66>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a62      	ldr	r2, [pc, #392]	@ (8002a0c <HAL_ADC_ConfigChannel+0xbec>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d101      	bne.n	800288a <HAL_ADC_ConfigChannel+0xa6a>
 8002886:	4a62      	ldr	r2, [pc, #392]	@ (8002a10 <HAL_ADC_ConfigChannel+0xbf0>)
 8002888:	e000      	b.n	800288c <HAL_ADC_ConfigChannel+0xa6c>
 800288a:	4a62      	ldr	r2, [pc, #392]	@ (8002a14 <HAL_ADC_ConfigChannel+0xbf4>)
 800288c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002890:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002894:	4619      	mov	r1, r3
 8002896:	4610      	mov	r0, r2
 8002898:	f7fe fd13 	bl	80012c2 <LL_ADC_SetCommonPathInternalCh>
 800289c:	e003      	b.n	80028a6 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a62      	ldr	r2, [pc, #392]	@ (8002a2c <HAL_ADC_ConfigChannel+0xc0c>)
 80028a4:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a61      	ldr	r2, [pc, #388]	@ (8002a30 <HAL_ADC_ConfigChannel+0xc10>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	f040 80ca 	bne.w	8002a46 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 80c3 	bne.w	8002a46 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0201 	orr.w	r2, r2, #1
 80028d0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80028d4:	e0b7      	b.n	8002a46 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028de:	d004      	beq.n	80028ea <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80028e4:	4a53      	ldr	r2, [pc, #332]	@ (8002a34 <HAL_ADC_ConfigChannel+0xc14>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d106      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe fe83 	bl	80015fe <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f280 80a2 	bge.w	8002a46 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a40      	ldr	r2, [pc, #256]	@ (8002a08 <HAL_ADC_ConfigChannel+0xbe8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d004      	beq.n	8002916 <HAL_ADC_ConfigChannel+0xaf6>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a3e      	ldr	r2, [pc, #248]	@ (8002a0c <HAL_ADC_ConfigChannel+0xbec>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <HAL_ADC_ConfigChannel+0xafa>
 8002916:	4b3e      	ldr	r3, [pc, #248]	@ (8002a10 <HAL_ADC_ConfigChannel+0xbf0>)
 8002918:	e000      	b.n	800291c <HAL_ADC_ConfigChannel+0xafc>
 800291a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a14 <HAL_ADC_ConfigChannel+0xbf4>)
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe fce3 	bl	80012e8 <LL_ADC_GetCommonPathInternalCh>
 8002922:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a43      	ldr	r2, [pc, #268]	@ (8002a38 <HAL_ADC_ConfigChannel+0xc18>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d115      	bne.n	800295c <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a34      	ldr	r2, [pc, #208]	@ (8002a08 <HAL_ADC_ConfigChannel+0xbe8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d004      	beq.n	8002944 <HAL_ADC_ConfigChannel+0xb24>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a33      	ldr	r2, [pc, #204]	@ (8002a0c <HAL_ADC_ConfigChannel+0xbec>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d101      	bne.n	8002948 <HAL_ADC_ConfigChannel+0xb28>
 8002944:	4a32      	ldr	r2, [pc, #200]	@ (8002a10 <HAL_ADC_ConfigChannel+0xbf0>)
 8002946:	e000      	b.n	800294a <HAL_ADC_ConfigChannel+0xb2a>
 8002948:	4a32      	ldr	r2, [pc, #200]	@ (8002a14 <HAL_ADC_ConfigChannel+0xbf4>)
 800294a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800294e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002952:	4619      	mov	r1, r3
 8002954:	4610      	mov	r0, r2
 8002956:	f7fe fcb4 	bl	80012c2 <LL_ADC_SetCommonPathInternalCh>
 800295a:	e034      	b.n	80029c6 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a36      	ldr	r2, [pc, #216]	@ (8002a3c <HAL_ADC_ConfigChannel+0xc1c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d115      	bne.n	8002992 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a27      	ldr	r2, [pc, #156]	@ (8002a08 <HAL_ADC_ConfigChannel+0xbe8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d004      	beq.n	800297a <HAL_ADC_ConfigChannel+0xb5a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a25      	ldr	r2, [pc, #148]	@ (8002a0c <HAL_ADC_ConfigChannel+0xbec>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d101      	bne.n	800297e <HAL_ADC_ConfigChannel+0xb5e>
 800297a:	4a25      	ldr	r2, [pc, #148]	@ (8002a10 <HAL_ADC_ConfigChannel+0xbf0>)
 800297c:	e000      	b.n	8002980 <HAL_ADC_ConfigChannel+0xb60>
 800297e:	4a25      	ldr	r2, [pc, #148]	@ (8002a14 <HAL_ADC_ConfigChannel+0xbf4>)
 8002980:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002984:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002988:	4619      	mov	r1, r3
 800298a:	4610      	mov	r0, r2
 800298c:	f7fe fc99 	bl	80012c2 <LL_ADC_SetCommonPathInternalCh>
 8002990:	e019      	b.n	80029c6 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a24      	ldr	r2, [pc, #144]	@ (8002a28 <HAL_ADC_ConfigChannel+0xc08>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d114      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a19      	ldr	r2, [pc, #100]	@ (8002a08 <HAL_ADC_ConfigChannel+0xbe8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d004      	beq.n	80029b0 <HAL_ADC_ConfigChannel+0xb90>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a18      	ldr	r2, [pc, #96]	@ (8002a0c <HAL_ADC_ConfigChannel+0xbec>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0xb94>
 80029b0:	4a17      	ldr	r2, [pc, #92]	@ (8002a10 <HAL_ADC_ConfigChannel+0xbf0>)
 80029b2:	e000      	b.n	80029b6 <HAL_ADC_ConfigChannel+0xb96>
 80029b4:	4a17      	ldr	r2, [pc, #92]	@ (8002a14 <HAL_ADC_ConfigChannel+0xbf4>)
 80029b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029ba:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80029be:	4619      	mov	r1, r3
 80029c0:	4610      	mov	r0, r2
 80029c2:	f7fe fc7e 	bl	80012c2 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a19      	ldr	r2, [pc, #100]	@ (8002a30 <HAL_ADC_ConfigChannel+0xc10>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d13a      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d134      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0201 	orr.w	r2, r2, #1
 80029ec:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80029f0:	e029      	b.n	8002a46 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029f6:	f043 0220 	orr.w	r2, r3, #32
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002a04:	e01f      	b.n	8002a46 <HAL_ADC_ConfigChannel+0xc26>
 8002a06:	bf00      	nop
 8002a08:	42028000 	.word	0x42028000
 8002a0c:	42028100 	.word	0x42028100
 8002a10:	42028300 	.word	0x42028300
 8002a14:	46021300 	.word	0x46021300
 8002a18:	b6002000 	.word	0xb6002000
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	053e2d63 	.word	0x053e2d63
 8002a24:	ba004000 	.word	0xba004000
 8002a28:	80000001 	.word	0x80000001
 8002a2c:	b2001000 	.word	0xb2001000
 8002a30:	d7200000 	.word	0xd7200000
 8002a34:	80000010 	.word	0x80000010
 8002a38:	ce080000 	.word	0xce080000
 8002a3c:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a40:	bf00      	nop
 8002a42:	e000      	b.n	8002a46 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a44:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8002a4e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	37dc      	adds	r7, #220	@ 0xdc
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd90      	pop	{r4, r7, pc}
 8002a5a:	bf00      	nop

08002a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8e:	4a04      	ldr	r2, [pc, #16]	@ (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	60d3      	str	r3, [r2, #12]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa8:	4b04      	ldr	r3, [pc, #16]	@ (8002abc <__NVIC_GetPriorityGrouping+0x18>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	0a1b      	lsrs	r3, r3, #8
 8002aae:	f003 0307 	and.w	r3, r3, #7
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	6039      	str	r1, [r7, #0]
 8002aca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002acc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	db0a      	blt.n	8002aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	490c      	ldr	r1, [pc, #48]	@ (8002b0c <__NVIC_SetPriority+0x4c>)
 8002ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ade:	0112      	lsls	r2, r2, #4
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae8:	e00a      	b.n	8002b00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	4908      	ldr	r1, [pc, #32]	@ (8002b10 <__NVIC_SetPriority+0x50>)
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	3b04      	subs	r3, #4
 8002af8:	0112      	lsls	r2, r2, #4
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	440b      	add	r3, r1
 8002afe:	761a      	strb	r2, [r3, #24]
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000e100 	.word	0xe000e100
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	@ 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f1c3 0307 	rsb	r3, r3, #7
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	bf28      	it	cs
 8002b32:	2304      	movcs	r3, #4
 8002b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	d902      	bls.n	8002b44 <NVIC_EncodePriority+0x30>
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3b03      	subs	r3, #3
 8002b42:	e000      	b.n	8002b46 <NVIC_EncodePriority+0x32>
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43da      	mvns	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	401a      	ands	r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	43d9      	mvns	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b6c:	4313      	orrs	r3, r2
         );
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3724      	adds	r7, #36	@ 0x24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ff6a 	bl	8002a5c <__NVIC_SetPriorityGrouping>
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b9e:	f7ff ff81 	bl	8002aa4 <__NVIC_GetPriorityGrouping>
 8002ba2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	6978      	ldr	r0, [r7, #20]
 8002baa:	f7ff ffb3 	bl	8002b14 <NVIC_EncodePriority>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff ff82 	bl	8002ac0 <__NVIC_SetPriority>
}
 8002bbc:	bf00      	nop
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bd4:	d301      	bcc.n	8002bda <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e00d      	b.n	8002bf6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002bda:	4a0a      	ldr	r2, [pc, #40]	@ (8002c04 <HAL_SYSTICK_Config+0x40>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002be2:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <HAL_SYSTICK_Config+0x40>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002be8:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <HAL_SYSTICK_Config+0x40>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a05      	ldr	r2, [pc, #20]	@ (8002c04 <HAL_SYSTICK_Config+0x40>)
 8002bee:	f043 0303 	orr.w	r3, r3, #3
 8002bf2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	e000e010 	.word	0xe000e010

08002c08 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d844      	bhi.n	8002ca0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002c16:	a201      	add	r2, pc, #4	@ (adr r2, 8002c1c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1c:	08002c3f 	.word	0x08002c3f
 8002c20:	08002c5d 	.word	0x08002c5d
 8002c24:	08002c7f 	.word	0x08002c7f
 8002c28:	08002ca1 	.word	0x08002ca1
 8002c2c:	08002c31 	.word	0x08002c31
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002c30:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c36:	f043 0304 	orr.w	r3, r3, #4
 8002c3a:	6013      	str	r3, [r2, #0]
      break;
 8002c3c:	e031      	b.n	8002ca2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a1b      	ldr	r2, [pc, #108]	@ (8002cb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c44:	f023 0304 	bic.w	r3, r3, #4
 8002c48:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c50:	4a18      	ldr	r2, [pc, #96]	@ (8002cb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c52:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002c56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002c5a:	e022      	b.n	8002ca2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002c5c:	4b14      	ldr	r3, [pc, #80]	@ (8002cb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a13      	ldr	r2, [pc, #76]	@ (8002cb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c62:	f023 0304 	bic.w	r3, r3, #4
 8002c66:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002c68:	4b12      	ldr	r3, [pc, #72]	@ (8002cb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c6e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002c72:	4a10      	ldr	r2, [pc, #64]	@ (8002cb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002c7c:	e011      	b.n	8002ca2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c84:	f023 0304 	bic.w	r3, r3, #4
 8002c88:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c90:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002c94:	4a07      	ldr	r2, [pc, #28]	@ (8002cb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c96:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002c9e:	e000      	b.n	8002ca2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002ca0:	bf00      	nop
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000e010 	.word	0xe000e010
 8002cb4:	46020c00 	.word	0x46020c00

08002cb8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002cbe:	4b19      	ldr	r3, [pc, #100]	@ (8002d24 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002cca:	2304      	movs	r3, #4
 8002ccc:	607b      	str	r3, [r7, #4]
 8002cce:	e021      	b.n	8002d14 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002cd0:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8002cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cd6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002cda:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ce2:	d011      	beq.n	8002d08 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002cea:	d810      	bhi.n	8002d0e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cf8:	d003      	beq.n	8002d02 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002cfa:	e008      	b.n	8002d0e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	607b      	str	r3, [r7, #4]
        break;
 8002d00:	e008      	b.n	8002d14 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002d02:	2301      	movs	r3, #1
 8002d04:	607b      	str	r3, [r7, #4]
        break;
 8002d06:	e005      	b.n	8002d14 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	607b      	str	r3, [r7, #4]
        break;
 8002d0c:	e002      	b.n	8002d14 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
        break;
 8002d12:	bf00      	nop
    }
  }
  return systick_source;
 8002d14:	687b      	ldr	r3, [r7, #4]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000e010 	.word	0xe000e010
 8002d28:	46020c00 	.word	0x46020c00

08002d2c <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
#if defined(SAES)
  uint32_t tickstart;
#endif /* SAES */

  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e0a7      	b.n	8002e8e <HAL_CRYP_Init+0x162>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fd ff8a 	bl	8000c6c <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  if (hcryp->Instance == AES)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a4e      	ldr	r2, [pc, #312]	@ (8002e98 <HAL_CRYP_Init+0x16c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d116      	bne.n	8002d90 <HAL_CRYP_Init+0x64>
  {
    /* Set the key size, data type and Algorithm */
    cr_value = (uint32_t)(hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm | hcryp->Init.KeyMode);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm and mode */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, cr_value);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4b46      	ldr	r3, [pc, #280]	@ (8002e9c <HAL_CRYP_Init+0x170>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e070      	b.n	8002e72 <HAL_CRYP_Init+0x146>
  }
  else
  {
    /* SAES is initializing, fetching random number from the RNG */
    tickstart = HAL_GetTick();
 8002d90:	f7fe fa78 	bl	8001284 <HAL_GetTick>
 8002d94:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8002d96:	e01e      	b.n	8002dd6 <HAL_CRYP_Init+0xaa>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8002d98:	f7fe fa74 	bl	8001284 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b52      	cmp	r3, #82	@ 0x52
 8002da4:	d917      	bls.n	8002dd6 <HAL_CRYP_Init+0xaa>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dba:	f043 0210 	orr.w	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e05b      	b.n	8002e8e <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d0d9      	beq.n	8002d98 <HAL_CRYP_Init+0x6c>
      }
    }
    /* SAES is initializing, no random number fetching error flagged */
    tickstart = HAL_GetTick();
 8002de4:	f7fe fa4e 	bl	8001284 <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8002dea:	e01e      	b.n	8002e2a <HAL_CRYP_Init+0xfe>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8002dec:	f7fe fa4a 	bl	8001284 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b52      	cmp	r3, #82	@ 0x52
 8002df8:	d917      	bls.n	8002e2a <HAL_CRYP_Init+0xfe>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0201 	bic.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_RNG;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e031      	b.n	8002e8e <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d0d8      	beq.n	8002dec <HAL_CRYP_Init+0xc0>
      }
    }
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8002e4e:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm, Key selection and key protection */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD | AES_CR_KEYSEL |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea0 <HAL_CRYP_Init+0x174>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	6013      	str	r3, [r2, #0]
               AES_CR_KEYPROT, cr_value);
  }
  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	420c0000 	.word	0x420c0000
 8002e9c:	fcfaff99 	.word	0xfcfaff99
 8002ea0:	8cf2ff99 	.word	0x8cf2ff99

08002ea4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b089      	sub	sp, #36	@ 0x24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002eb6:	e1ba      	b.n	800322e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 81aa 	beq.w	8003228 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a55      	ldr	r2, [pc, #340]	@ (800302c <HAL_GPIO_Init+0x188>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d15d      	bne.n	8002f98 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f003 0201 	and.w	r2, r3, #1
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002f0c:	4a48      	ldr	r2, [pc, #288]	@ (8003030 <HAL_GPIO_Init+0x18c>)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f14:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002f16:	4a46      	ldr	r2, [pc, #280]	@ (8003030 <HAL_GPIO_Init+0x18c>)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	08da      	lsrs	r2, r3, #3
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	3208      	adds	r2, #8
 8002f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	220f      	movs	r2, #15
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	220b      	movs	r2, #11
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	08da      	lsrs	r2, r3, #3
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	3208      	adds	r2, #8
 8002f62:	69f9      	ldr	r1, [r7, #28]
 8002f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	2203      	movs	r2, #3
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	2202      	movs	r2, #2
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e067      	b.n	8003068 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0x104>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b12      	cmp	r3, #18
 8002fa6:	d145      	bne.n	8003034 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	08da      	lsrs	r2, r3, #3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3208      	adds	r2, #8
 8002fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	220f      	movs	r2, #15
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f003 020f 	and.w	r2, r3, #15
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69fa      	ldr	r2, [r7, #28]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	08da      	lsrs	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3208      	adds	r2, #8
 8002fee:	69f9      	ldr	r1, [r7, #28]
 8002ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	2203      	movs	r2, #3
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	4013      	ands	r3, r2
 800300a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0203 	and.w	r2, r3, #3
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	4313      	orrs	r3, r2
 8003020:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e01e      	b.n	8003068 <HAL_GPIO_Init+0x1c4>
 800302a:	bf00      	nop
 800302c:	46020000 	.word	0x46020000
 8003030:	08008964 	.word	0x08008964
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	4013      	ands	r3, r2
 800304a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0203 	and.w	r2, r3, #3
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	4313      	orrs	r3, r2
 8003060:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	69fa      	ldr	r2, [r7, #28]
 8003066:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d00b      	beq.n	8003088 <HAL_GPIO_Init+0x1e4>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d007      	beq.n	8003088 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800307c:	2b11      	cmp	r3, #17
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b12      	cmp	r3, #18
 8003086:	d130      	bne.n	80030ea <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	4013      	ands	r3, r2
 800309e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80030be:	2201      	movs	r2, #1
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	f003 0201 	and.w	r2, r3, #1
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	d017      	beq.n	8003122 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	2203      	movs	r2, #3
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	4013      	ands	r3, r2
 8003108:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	4313      	orrs	r3, r2
 800311a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d07c      	beq.n	8003228 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800312e:	4a47      	ldr	r2, [pc, #284]	@ (800324c <HAL_GPIO_Init+0x3a8>)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	089b      	lsrs	r3, r3, #2
 8003134:	3318      	adds	r3, #24
 8003136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	220f      	movs	r2, #15
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	4013      	ands	r3, r2
 8003150:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	0a9a      	lsrs	r2, r3, #10
 8003156:	4b3e      	ldr	r3, [pc, #248]	@ (8003250 <HAL_GPIO_Init+0x3ac>)
 8003158:	4013      	ands	r3, r2
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	f002 0203 	and.w	r2, r2, #3
 8003160:	00d2      	lsls	r2, r2, #3
 8003162:	4093      	lsls	r3, r2
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	4313      	orrs	r3, r2
 8003168:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800316a:	4938      	ldr	r1, [pc, #224]	@ (800324c <HAL_GPIO_Init+0x3a8>)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	3318      	adds	r3, #24
 8003172:	69fa      	ldr	r2, [r7, #28]
 8003174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003178:	4b34      	ldr	r3, [pc, #208]	@ (800324c <HAL_GPIO_Init+0x3a8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	43db      	mvns	r3, r3
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	4013      	ands	r3, r2
 8003186:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800319c:	4a2b      	ldr	r2, [pc, #172]	@ (800324c <HAL_GPIO_Init+0x3a8>)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80031a2:	4b2a      	ldr	r3, [pc, #168]	@ (800324c <HAL_GPIO_Init+0x3a8>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80031c6:	4a21      	ldr	r2, [pc, #132]	@ (800324c <HAL_GPIO_Init+0x3a8>)
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80031cc:	4b1f      	ldr	r3, [pc, #124]	@ (800324c <HAL_GPIO_Init+0x3a8>)
 80031ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031d2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	4013      	ands	r3, r2
 80031dc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80031f2:	4a16      	ldr	r2, [pc, #88]	@ (800324c <HAL_GPIO_Init+0x3a8>)
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80031fa:	4b14      	ldr	r3, [pc, #80]	@ (800324c <HAL_GPIO_Init+0x3a8>)
 80031fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003200:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	43db      	mvns	r3, r3
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	4013      	ands	r3, r2
 800320a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003220:	4a0a      	ldr	r2, [pc, #40]	@ (800324c <HAL_GPIO_Init+0x3a8>)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	3301      	adds	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	f47f ae3d 	bne.w	8002eb8 <HAL_GPIO_Init+0x14>
  }
}
 800323e:	bf00      	nop
 8003240:	bf00      	nop
 8003242:	3724      	adds	r7, #36	@ 0x24
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	46022000 	.word	0x46022000
 8003250:	002f7f7f 	.word	0x002f7f7f

08003254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e08d      	b.n	8003382 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fd fd18 	bl	8000cb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2224      	movs	r2, #36	@ 0x24
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0201 	bic.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d107      	bne.n	80032ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	e006      	b.n	80032dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80032da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d108      	bne.n	80032f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	e007      	b.n	8003306 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003304:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003314:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003318:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003328:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69d9      	ldr	r1, [r3, #28]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1a      	ldr	r2, [r3, #32]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b20      	cmp	r3, #32
 800339e:	d138      	bne.n	8003412 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e032      	b.n	8003414 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2224      	movs	r2, #36	@ 0x24
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0201 	bic.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033dc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6819      	ldr	r1, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0201 	orr.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	e000      	b.n	8003414 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003412:	2302      	movs	r3, #2
  }
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b20      	cmp	r3, #32
 8003434:	d139      	bne.n	80034aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003440:	2302      	movs	r3, #2
 8003442:	e033      	b.n	80034ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2224      	movs	r2, #36	@ 0x24
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003472:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0201 	orr.w	r2, r2, #1
 8003494:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e000      	b.n	80034ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034aa:	2302      	movs	r3, #2
  }
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80034c4:	4b0b      	ldr	r3, [pc, #44]	@ (80034f4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
 80034d4:	e007      	b.n	80034e6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80034d6:	4b07      	ldr	r3, [pc, #28]	@ (80034f4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 0204 	bic.w	r2, r3, #4
 80034de:	4905      	ldr	r1, [pc, #20]	@ (80034f4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	40030400 	.word	0x40030400

080034f8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80034fc:	4b05      	ldr	r3, [pc, #20]	@ (8003514 <HAL_ICACHE_Enable+0x1c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a04      	ldr	r2, [pc, #16]	@ (8003514 <HAL_ICACHE_Enable+0x1c>)
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	40030400 	.word	0x40030400

08003518 <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e059      	b.n	80035de <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 800352a:	4b30      	ldr	r3, [pc, #192]	@ (80035ec <HAL_PWR_ConfigPVD+0xd4>)
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	492d      	ldr	r1, [pc, #180]	@ (80035ec <HAL_PWR_ConfigPVD+0xd4>)
 8003538:	4313      	orrs	r3, r2
 800353a:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800353c:	4b2c      	ldr	r3, [pc, #176]	@ (80035f0 <HAL_PWR_ConfigPVD+0xd8>)
 800353e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003542:	4a2b      	ldr	r2, [pc, #172]	@ (80035f0 <HAL_PWR_ConfigPVD+0xd8>)
 8003544:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003548:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800354c:	4b28      	ldr	r3, [pc, #160]	@ (80035f0 <HAL_PWR_ConfigPVD+0xd8>)
 800354e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003552:	4a27      	ldr	r2, [pc, #156]	@ (80035f0 <HAL_PWR_ConfigPVD+0xd8>)
 8003554:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003558:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800355c:	4b24      	ldr	r3, [pc, #144]	@ (80035f0 <HAL_PWR_ConfigPVD+0xd8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a23      	ldr	r2, [pc, #140]	@ (80035f0 <HAL_PWR_ConfigPVD+0xd8>)
 8003562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003566:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8003568:	4b21      	ldr	r3, [pc, #132]	@ (80035f0 <HAL_PWR_ConfigPVD+0xd8>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4a20      	ldr	r2, [pc, #128]	@ (80035f0 <HAL_PWR_ConfigPVD+0xd8>)
 800356e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003572:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8003580:	4b1b      	ldr	r3, [pc, #108]	@ (80035f0 <HAL_PWR_ConfigPVD+0xd8>)
 8003582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003586:	4a1a      	ldr	r2, [pc, #104]	@ (80035f0 <HAL_PWR_ConfigPVD+0xd8>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800358c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800359c:	4b14      	ldr	r3, [pc, #80]	@ (80035f0 <HAL_PWR_ConfigPVD+0xd8>)
 800359e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035a2:	4a13      	ldr	r2, [pc, #76]	@ (80035f0 <HAL_PWR_ConfigPVD+0xd8>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80035b8:	4b0d      	ldr	r3, [pc, #52]	@ (80035f0 <HAL_PWR_ConfigPVD+0xd8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0c      	ldr	r2, [pc, #48]	@ (80035f0 <HAL_PWR_ConfigPVD+0xd8>)
 80035be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c2:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80035d0:	4b07      	ldr	r3, [pc, #28]	@ (80035f0 <HAL_PWR_ConfigPVD+0xd8>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4a06      	ldr	r2, [pc, #24]	@ (80035f0 <HAL_PWR_ConfigPVD+0xd8>)
 80035d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035da:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	46020800 	.word	0x46020800
 80035f0:	46022000 	.word	0x46022000

080035f4 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 80035f8:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <HAL_PWR_EnablePVD+0x1c>)
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	4a04      	ldr	r2, [pc, #16]	@ (8003610 <HAL_PWR_EnablePVD+0x1c>)
 80035fe:	f043 0310 	orr.w	r3, r3, #16
 8003602:	6113      	str	r3, [r2, #16]
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	46020800 	.word	0x46020800

08003614 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800361c:	4b39      	ldr	r3, [pc, #228]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800361e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003620:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003624:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	429a      	cmp	r2, r3
 800362c:	d10b      	bne.n	8003646 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003634:	d905      	bls.n	8003642 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003636:	4b33      	ldr	r3, [pc, #204]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	4a32      	ldr	r2, [pc, #200]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800363c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003640:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e057      	b.n	80036f6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800364c:	d90a      	bls.n	8003664 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800364e:	4b2d      	ldr	r3, [pc, #180]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4313      	orrs	r3, r2
 800365a:	4a2a      	ldr	r2, [pc, #168]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800365c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003660:	60d3      	str	r3, [r2, #12]
 8003662:	e007      	b.n	8003674 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003664:	4b27      	ldr	r3, [pc, #156]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800366c:	4925      	ldr	r1, [pc, #148]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4313      	orrs	r3, r2
 8003672:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003674:	4b24      	ldr	r3, [pc, #144]	@ (8003708 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a24      	ldr	r2, [pc, #144]	@ (800370c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	099b      	lsrs	r3, r3, #6
 8003680:	2232      	movs	r2, #50	@ 0x32
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	4a21      	ldr	r2, [pc, #132]	@ (800370c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	099b      	lsrs	r3, r3, #6
 800368e:	3301      	adds	r3, #1
 8003690:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003692:	e002      	b.n	800369a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3b01      	subs	r3, #1
 8003698:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800369a:	4b1a      	ldr	r3, [pc, #104]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <HAL_PWREx_ControlVoltageScaling+0x98>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f3      	bne.n	8003694 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d01b      	beq.n	80036ea <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80036b2:	4b15      	ldr	r3, [pc, #84]	@ (8003708 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a15      	ldr	r2, [pc, #84]	@ (800370c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80036b8:	fba2 2303 	umull	r2, r3, r2, r3
 80036bc:	099b      	lsrs	r3, r3, #6
 80036be:	2232      	movs	r2, #50	@ 0x32
 80036c0:	fb02 f303 	mul.w	r3, r2, r3
 80036c4:	4a11      	ldr	r2, [pc, #68]	@ (800370c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	099b      	lsrs	r3, r3, #6
 80036cc:	3301      	adds	r3, #1
 80036ce:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80036d0:	e002      	b.n	80036d8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80036d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d102      	bne.n	80036ea <HAL_PWREx_ControlVoltageScaling+0xd6>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f3      	bne.n	80036d2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e000      	b.n	80036f6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	46020800 	.word	0x46020800
 8003708:	20000000 	.word	0x20000000
 800370c:	10624dd3 	.word	0x10624dd3

08003710 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003714:	4b04      	ldr	r3, [pc, #16]	@ (8003728 <HAL_PWREx_GetVoltageRange+0x18>)
 8003716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003718:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800371c:	4618      	mov	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	46020800 	.word	0x46020800

0800372c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003730:	4b05      	ldr	r3, [pc, #20]	@ (8003748 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	4a04      	ldr	r2, [pc, #16]	@ (8003748 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003736:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800373a:	6113      	str	r3, [r2, #16]
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	46020800 	.word	0x46020800

0800374c <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003750:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <HAL_PWREx_EnableVddA+0x1c>)
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	4a04      	ldr	r2, [pc, #16]	@ (8003768 <HAL_PWREx_EnableVddA+0x1c>)
 8003756:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800375a:	6113      	str	r3, [r2, #16]
}
 800375c:	bf00      	nop
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	46020800 	.word	0x46020800

0800376c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08e      	sub	sp, #56	@ 0x38
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003774:	2300      	movs	r3, #0
 8003776:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d102      	bne.n	8003786 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	f000 bec8 	b.w	8004516 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003786:	4b99      	ldr	r3, [pc, #612]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003790:	4b96      	ldr	r3, [pc, #600]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 8003792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 816c 	beq.w	8003a80 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80037a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <HAL_RCC_OscConfig+0x52>
 80037ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b0:	2b0c      	cmp	r3, #12
 80037b2:	f040 80de 	bne.w	8003972 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	f040 80da 	bne.w	8003972 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f000 bea5 	b.w	8004516 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037d0:	4b86      	ldr	r3, [pc, #536]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d004      	beq.n	80037e6 <HAL_RCC_OscConfig+0x7a>
 80037dc:	4b83      	ldr	r3, [pc, #524]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80037e4:	e005      	b.n	80037f2 <HAL_RCC_OscConfig+0x86>
 80037e6:	4b81      	ldr	r3, [pc, #516]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80037e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d255      	bcs.n	80038a2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	4618      	mov	r0, r3
 8003802:	f001 f9d9 	bl	8004bb8 <RCC_SetFlashLatencyFromMSIRange>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	f000 be82 	b.w	8004516 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003812:	4b76      	ldr	r3, [pc, #472]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	4a75      	ldr	r2, [pc, #468]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 8003818:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800381c:	6093      	str	r3, [r2, #8]
 800381e:	4b73      	ldr	r3, [pc, #460]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	4970      	ldr	r1, [pc, #448]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 800382c:	4313      	orrs	r3, r2
 800382e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003834:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003838:	d309      	bcc.n	800384e <HAL_RCC_OscConfig+0xe2>
 800383a:	4b6c      	ldr	r3, [pc, #432]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f023 021f 	bic.w	r2, r3, #31
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	4969      	ldr	r1, [pc, #420]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 8003848:	4313      	orrs	r3, r2
 800384a:	60cb      	str	r3, [r1, #12]
 800384c:	e07e      	b.n	800394c <HAL_RCC_OscConfig+0x1e0>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	2b00      	cmp	r3, #0
 8003854:	da0a      	bge.n	800386c <HAL_RCC_OscConfig+0x100>
 8003856:	4b65      	ldr	r3, [pc, #404]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	015b      	lsls	r3, r3, #5
 8003864:	4961      	ldr	r1, [pc, #388]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 8003866:	4313      	orrs	r3, r2
 8003868:	60cb      	str	r3, [r1, #12]
 800386a:	e06f      	b.n	800394c <HAL_RCC_OscConfig+0x1e0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003874:	d30a      	bcc.n	800388c <HAL_RCC_OscConfig+0x120>
 8003876:	4b5d      	ldr	r3, [pc, #372]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	029b      	lsls	r3, r3, #10
 8003884:	4959      	ldr	r1, [pc, #356]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 8003886:	4313      	orrs	r3, r2
 8003888:	60cb      	str	r3, [r1, #12]
 800388a:	e05f      	b.n	800394c <HAL_RCC_OscConfig+0x1e0>
 800388c:	4b57      	ldr	r3, [pc, #348]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	03db      	lsls	r3, r3, #15
 800389a:	4954      	ldr	r1, [pc, #336]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 800389c:	4313      	orrs	r3, r2
 800389e:	60cb      	str	r3, [r1, #12]
 80038a0:	e054      	b.n	800394c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80038a2:	4b52      	ldr	r3, [pc, #328]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	4a51      	ldr	r2, [pc, #324]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80038a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038ac:	6093      	str	r3, [r2, #8]
 80038ae:	4b4f      	ldr	r3, [pc, #316]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ba:	494c      	ldr	r1, [pc, #304]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80038c8:	d309      	bcc.n	80038de <HAL_RCC_OscConfig+0x172>
 80038ca:	4b48      	ldr	r3, [pc, #288]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f023 021f 	bic.w	r2, r3, #31
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	4945      	ldr	r1, [pc, #276]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	60cb      	str	r3, [r1, #12]
 80038dc:	e028      	b.n	8003930 <HAL_RCC_OscConfig+0x1c4>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	da0a      	bge.n	80038fc <HAL_RCC_OscConfig+0x190>
 80038e6:	4b41      	ldr	r3, [pc, #260]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	015b      	lsls	r3, r3, #5
 80038f4:	493d      	ldr	r1, [pc, #244]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60cb      	str	r3, [r1, #12]
 80038fa:	e019      	b.n	8003930 <HAL_RCC_OscConfig+0x1c4>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003904:	d30a      	bcc.n	800391c <HAL_RCC_OscConfig+0x1b0>
 8003906:	4b39      	ldr	r3, [pc, #228]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	029b      	lsls	r3, r3, #10
 8003914:	4935      	ldr	r1, [pc, #212]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 8003916:	4313      	orrs	r3, r2
 8003918:	60cb      	str	r3, [r1, #12]
 800391a:	e009      	b.n	8003930 <HAL_RCC_OscConfig+0x1c4>
 800391c:	4b33      	ldr	r3, [pc, #204]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	03db      	lsls	r3, r3, #15
 800392a:	4930      	ldr	r1, [pc, #192]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 800392c:	4313      	orrs	r3, r2
 800392e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10a      	bne.n	800394c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393a:	4618      	mov	r0, r3
 800393c:	f001 f93c 	bl	8004bb8 <RCC_SetFlashLatencyFromMSIRange>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	f000 bde5 	b.w	8004516 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800394c:	f001 f8de 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003950:	4b27      	ldr	r3, [pc, #156]	@ (80039f0 <HAL_RCC_OscConfig+0x284>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7fd fc0b 	bl	8001170 <HAL_InitTick>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 808a 	beq.w	8003a7e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800396a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800396e:	f000 bdd2 	b.w	8004516 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d066      	beq.n	8003a48 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800397a:	4b1c      	ldr	r3, [pc, #112]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a1b      	ldr	r2, [pc, #108]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003986:	f7fd fc7d 	bl	8001284 <HAL_GetTick>
 800398a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800398c:	e009      	b.n	80039a2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800398e:	f7fd fc79 	bl	8001284 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d902      	bls.n	80039a2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	f000 bdba 	b.w	8004516 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80039a2:	4b12      	ldr	r3, [pc, #72]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0ef      	beq.n	800398e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80039ae:	4b0f      	ldr	r3, [pc, #60]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	4a0e      	ldr	r2, [pc, #56]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80039b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039b8:	6093      	str	r3, [r2, #8]
 80039ba:	4b0c      	ldr	r3, [pc, #48]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c6:	4909      	ldr	r1, [pc, #36]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80039d4:	d30e      	bcc.n	80039f4 <HAL_RCC_OscConfig+0x288>
 80039d6:	4b05      	ldr	r3, [pc, #20]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f023 021f 	bic.w	r2, r3, #31
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	4902      	ldr	r1, [pc, #8]	@ (80039ec <HAL_RCC_OscConfig+0x280>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60cb      	str	r3, [r1, #12]
 80039e8:	e04a      	b.n	8003a80 <HAL_RCC_OscConfig+0x314>
 80039ea:	bf00      	nop
 80039ec:	46020c00 	.word	0x46020c00
 80039f0:	20000004 	.word	0x20000004
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	da0a      	bge.n	8003a12 <HAL_RCC_OscConfig+0x2a6>
 80039fc:	4b98      	ldr	r3, [pc, #608]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	015b      	lsls	r3, r3, #5
 8003a0a:	4995      	ldr	r1, [pc, #596]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60cb      	str	r3, [r1, #12]
 8003a10:	e036      	b.n	8003a80 <HAL_RCC_OscConfig+0x314>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a1a:	d30a      	bcc.n	8003a32 <HAL_RCC_OscConfig+0x2c6>
 8003a1c:	4b90      	ldr	r3, [pc, #576]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	029b      	lsls	r3, r3, #10
 8003a2a:	498d      	ldr	r1, [pc, #564]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60cb      	str	r3, [r1, #12]
 8003a30:	e026      	b.n	8003a80 <HAL_RCC_OscConfig+0x314>
 8003a32:	4b8b      	ldr	r3, [pc, #556]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	03db      	lsls	r3, r3, #15
 8003a40:	4987      	ldr	r1, [pc, #540]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60cb      	str	r3, [r1, #12]
 8003a46:	e01b      	b.n	8003a80 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003a48:	4b85      	ldr	r3, [pc, #532]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a84      	ldr	r2, [pc, #528]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
 8003a52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a54:	f7fd fc16 	bl	8001284 <HAL_GetTick>
 8003a58:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003a5a:	e009      	b.n	8003a70 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a5c:	f7fd fc12 	bl	8001284 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d902      	bls.n	8003a70 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	f000 bd53 	b.w	8004516 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003a70:	4b7b      	ldr	r3, [pc, #492]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1ef      	bne.n	8003a5c <HAL_RCC_OscConfig+0x2f0>
 8003a7c:	e000      	b.n	8003a80 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003a7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 808b 	beq.w	8003ba4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x334>
 8003a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a96:	2b0c      	cmp	r3, #12
 8003a98:	d109      	bne.n	8003aae <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d106      	bne.n	8003aae <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d17d      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	f000 bd34 	b.w	8004516 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x35a>
 8003ab8:	4b69      	ldr	r3, [pc, #420]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a68      	ldr	r2, [pc, #416]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003abe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	e041      	b.n	8003b4a <HAL_RCC_OscConfig+0x3de>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ace:	d112      	bne.n	8003af6 <HAL_RCC_OscConfig+0x38a>
 8003ad0:	4b63      	ldr	r3, [pc, #396]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a62      	ldr	r2, [pc, #392]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003ad6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	4b60      	ldr	r3, [pc, #384]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a5f      	ldr	r2, [pc, #380]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003ae2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b5d      	ldr	r3, [pc, #372]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a5c      	ldr	r2, [pc, #368]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	e029      	b.n	8003b4a <HAL_RCC_OscConfig+0x3de>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003afe:	d112      	bne.n	8003b26 <HAL_RCC_OscConfig+0x3ba>
 8003b00:	4b57      	ldr	r3, [pc, #348]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a56      	ldr	r2, [pc, #344]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	4b54      	ldr	r3, [pc, #336]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a53      	ldr	r2, [pc, #332]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b51      	ldr	r3, [pc, #324]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a50      	ldr	r2, [pc, #320]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	e011      	b.n	8003b4a <HAL_RCC_OscConfig+0x3de>
 8003b26:	4b4e      	ldr	r3, [pc, #312]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a4d      	ldr	r2, [pc, #308]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	4b4b      	ldr	r3, [pc, #300]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a4a      	ldr	r2, [pc, #296]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4b48      	ldr	r3, [pc, #288]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a47      	ldr	r2, [pc, #284]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d014      	beq.n	8003b7c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003b52:	f7fd fb97 	bl	8001284 <HAL_GetTick>
 8003b56:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b58:	e009      	b.n	8003b6e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5a:	f7fd fb93 	bl	8001284 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b64      	cmp	r3, #100	@ 0x64
 8003b66:	d902      	bls.n	8003b6e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	f000 bcd4 	b.w	8004516 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0ef      	beq.n	8003b5a <HAL_RCC_OscConfig+0x3ee>
 8003b7a:	e013      	b.n	8003ba4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003b7c:	f7fd fb82 	bl	8001284 <HAL_GetTick>
 8003b80:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b82:	e009      	b.n	8003b98 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b84:	f7fd fb7e 	bl	8001284 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	@ 0x64
 8003b90:	d902      	bls.n	8003b98 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	f000 bcbf 	b.w	8004516 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b98:	4b31      	ldr	r3, [pc, #196]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1ef      	bne.n	8003b84 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d05f      	beq.n	8003c70 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d005      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x456>
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	d114      	bne.n	8003be6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d111      	bne.n	8003be6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f000 bca3 	b.w	8004516 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003bd0:	4b23      	ldr	r3, [pc, #140]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	041b      	lsls	r3, r3, #16
 8003bde:	4920      	ldr	r1, [pc, #128]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003be4:	e044      	b.n	8003c70 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d024      	beq.n	8003c38 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003bee:	4b1c      	ldr	r3, [pc, #112]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bf8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003bfa:	f7fd fb43 	bl	8001284 <HAL_GetTick>
 8003bfe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c00:	e009      	b.n	8003c16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c02:	f7fd fb3f 	bl	8001284 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d902      	bls.n	8003c16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	f000 bc80 	b.w	8004516 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c16:	4b12      	ldr	r3, [pc, #72]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ef      	beq.n	8003c02 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003c22:	4b0f      	ldr	r3, [pc, #60]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	041b      	lsls	r3, r3, #16
 8003c30:	490b      	ldr	r1, [pc, #44]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	610b      	str	r3, [r1, #16]
 8003c36:	e01b      	b.n	8003c70 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003c38:	4b09      	ldr	r3, [pc, #36]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a08      	ldr	r2, [pc, #32]	@ (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003c3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c42:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c44:	f7fd fb1e 	bl	8001284 <HAL_GetTick>
 8003c48:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c4a:	e00b      	b.n	8003c64 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4c:	f7fd fb1a 	bl	8001284 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d904      	bls.n	8003c64 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	f000 bc5b 	b.w	8004516 <HAL_RCC_OscConfig+0xdaa>
 8003c60:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c64:	4baf      	ldr	r3, [pc, #700]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1ed      	bne.n	8003c4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80c8 	beq.w	8003e0e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c84:	4ba7      	ldr	r3, [pc, #668]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d111      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c92:	4ba4      	ldr	r3, [pc, #656]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c98:	4aa2      	ldr	r2, [pc, #648]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003c9a:	f043 0304 	orr.w	r3, r3, #4
 8003c9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003ca2:	4ba0      	ldr	r3, [pc, #640]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003cb6:	4b9c      	ldr	r3, [pc, #624]	@ (8003f28 <HAL_RCC_OscConfig+0x7bc>)
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d119      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003cc2:	4b99      	ldr	r3, [pc, #612]	@ (8003f28 <HAL_RCC_OscConfig+0x7bc>)
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc6:	4a98      	ldr	r2, [pc, #608]	@ (8003f28 <HAL_RCC_OscConfig+0x7bc>)
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cce:	f7fd fad9 	bl	8001284 <HAL_GetTick>
 8003cd2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003cd4:	e009      	b.n	8003cea <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd6:	f7fd fad5 	bl	8001284 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d902      	bls.n	8003cea <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	f000 bc16 	b.w	8004516 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003cea:	4b8f      	ldr	r3, [pc, #572]	@ (8003f28 <HAL_RCC_OscConfig+0x7bc>)
 8003cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ef      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d05f      	beq.n	8003dbe <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003cfe:	4b89      	ldr	r3, [pc, #548]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d04:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d037      	beq.n	8003d84 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d006      	beq.n	8003d2c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e3f4      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d01b      	beq.n	8003d6e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003d36:	4b7b      	ldr	r3, [pc, #492]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003d38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d3c:	4a79      	ldr	r2, [pc, #484]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003d3e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003d42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003d46:	f7fd fa9d 	bl	8001284 <HAL_GetTick>
 8003d4a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d4e:	f7fd fa99 	bl	8001284 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b05      	cmp	r3, #5
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e3da      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d60:	4b70      	ldr	r3, [pc, #448]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003d62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1ef      	bne.n	8003d4e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003d6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d74:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	4969      	ldr	r1, [pc, #420]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003d84:	4b67      	ldr	r3, [pc, #412]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003d86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d8a:	4a66      	ldr	r2, [pc, #408]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003d8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003d94:	f7fd fa76 	bl	8001284 <HAL_GetTick>
 8003d98:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d9c:	f7fd fa72 	bl	8001284 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b05      	cmp	r3, #5
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e3b3      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003dae:	4b5d      	ldr	r3, [pc, #372]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003db4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0ef      	beq.n	8003d9c <HAL_RCC_OscConfig+0x630>
 8003dbc:	e01b      	b.n	8003df6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003dbe:	4b59      	ldr	r3, [pc, #356]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dc4:	4a57      	ldr	r2, [pc, #348]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003dc6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003dca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003dce:	f7fd fa59 	bl	8001284 <HAL_GetTick>
 8003dd2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd6:	f7fd fa55 	bl	8001284 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b05      	cmp	r3, #5
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e396      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003de8:	4b4e      	ldr	r3, [pc, #312]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003dea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1ef      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003df6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d107      	bne.n	8003e0e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfe:	4b49      	ldr	r3, [pc, #292]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e04:	4a47      	ldr	r2, [pc, #284]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003e06:	f023 0304 	bic.w	r3, r3, #4
 8003e0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 8111 	beq.w	800403e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e22:	4b40      	ldr	r3, [pc, #256]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d111      	bne.n	8003e54 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e30:	4b3c      	ldr	r3, [pc, #240]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e36:	4a3b      	ldr	r2, [pc, #236]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003e38:	f043 0304 	orr.w	r3, r3, #4
 8003e3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003e40:	4b38      	ldr	r3, [pc, #224]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e54:	4b34      	ldr	r3, [pc, #208]	@ (8003f28 <HAL_RCC_OscConfig+0x7bc>)
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d118      	bne.n	8003e92 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003e60:	4b31      	ldr	r3, [pc, #196]	@ (8003f28 <HAL_RCC_OscConfig+0x7bc>)
 8003e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e64:	4a30      	ldr	r2, [pc, #192]	@ (8003f28 <HAL_RCC_OscConfig+0x7bc>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6c:	f7fd fa0a 	bl	8001284 <HAL_GetTick>
 8003e70:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e74:	f7fd fa06 	bl	8001284 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e347      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e86:	4b28      	ldr	r3, [pc, #160]	@ (8003f28 <HAL_RCC_OscConfig+0x7bc>)
 8003e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01f      	beq.n	8003ede <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d010      	beq.n	8003ecc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003eb2:	f043 0304 	orr.w	r3, r3, #4
 8003eb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003eba:	4b1a      	ldr	r3, [pc, #104]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003ebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ec0:	4a18      	ldr	r2, [pc, #96]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003eca:	e018      	b.n	8003efe <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ecc:	4b15      	ldr	r3, [pc, #84]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ed2:	4a14      	ldr	r2, [pc, #80]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003edc:	e00f      	b.n	8003efe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ede:	4b11      	ldr	r3, [pc, #68]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ee4:	4a0f      	ldr	r2, [pc, #60]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003ee6:	f023 0301 	bic.w	r3, r3, #1
 8003eea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003eee:	4b0d      	ldr	r3, [pc, #52]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8003f24 <HAL_RCC_OscConfig+0x7b8>)
 8003ef6:	f023 0304 	bic.w	r3, r3, #4
 8003efa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d057      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003f06:	f7fd f9bd 	bl	8001284 <HAL_GetTick>
 8003f0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f0c:	e00e      	b.n	8003f2c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0e:	f7fd f9b9 	bl	8001284 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d905      	bls.n	8003f2c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e2f8      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
 8003f24:	46020c00 	.word	0x46020c00
 8003f28:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f2c:	4b9c      	ldr	r3, [pc, #624]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8003f2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0e9      	beq.n	8003f0e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01b      	beq.n	8003f7e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f46:	4b96      	ldr	r3, [pc, #600]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8003f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f4c:	4a94      	ldr	r2, [pc, #592]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8003f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f56:	e00a      	b.n	8003f6e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f58:	f7fd f994 	bl	8001284 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e2d3      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f6e:	4b8c      	ldr	r3, [pc, #560]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8003f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0ed      	beq.n	8003f58 <HAL_RCC_OscConfig+0x7ec>
 8003f7c:	e053      	b.n	8004026 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f7e:	4b88      	ldr	r3, [pc, #544]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8003f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f84:	4a86      	ldr	r2, [pc, #536]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8003f86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f90:	f7fd f978 	bl	8001284 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e2b7      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003fa6:	4b7e      	ldr	r3, [pc, #504]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8003fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1ed      	bne.n	8003f90 <HAL_RCC_OscConfig+0x824>
 8003fb4:	e037      	b.n	8004026 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003fb6:	f7fd f965 	bl	8001284 <HAL_GetTick>
 8003fba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fd f961 	bl	8001284 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e2a0      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fd4:	4b72      	ldr	r3, [pc, #456]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8003fd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1ed      	bne.n	8003fbe <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003fe2:	4b6f      	ldr	r3, [pc, #444]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8003fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d01a      	beq.n	8004026 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ff0:	4b6b      	ldr	r3, [pc, #428]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8003ff2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ff6:	4a6a      	ldr	r2, [pc, #424]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8003ff8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ffc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004000:	e00a      	b.n	8004018 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004002:	f7fd f93f 	bl	8001284 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004010:	4293      	cmp	r3, r2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e27e      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004018:	4b61      	ldr	r3, [pc, #388]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 800401a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800401e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1ed      	bne.n	8004002 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004026:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800402a:	2b01      	cmp	r3, #1
 800402c:	d107      	bne.n	800403e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402e:	4b5c      	ldr	r3, [pc, #368]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8004030:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004034:	4a5a      	ldr	r2, [pc, #360]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8004036:	f023 0304 	bic.w	r3, r3, #4
 800403a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d036      	beq.n	80040b8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d019      	beq.n	8004086 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004052:	4b53      	ldr	r3, [pc, #332]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a52      	ldr	r2, [pc, #328]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8004058:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800405c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800405e:	f7fd f911 	bl	8001284 <HAL_GetTick>
 8004062:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004066:	f7fd f90d 	bl	8001284 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e24e      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004078:	4b49      	ldr	r3, [pc, #292]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x8fa>
 8004084:	e018      	b.n	80040b8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004086:	4b46      	ldr	r3, [pc, #280]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a45      	ldr	r2, [pc, #276]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 800408c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004090:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004092:	f7fd f8f7 	bl	8001284 <HAL_GetTick>
 8004096:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800409a:	f7fd f8f3 	bl	8001284 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e234      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80040ac:	4b3c      	ldr	r3, [pc, #240]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f0      	bne.n	800409a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d036      	beq.n	8004132 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d019      	beq.n	8004100 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80040cc:	4b34      	ldr	r3, [pc, #208]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a33      	ldr	r2, [pc, #204]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 80040d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040d6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80040d8:	f7fd f8d4 	bl	8001284 <HAL_GetTick>
 80040dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80040e0:	f7fd f8d0 	bl	8001284 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e211      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80040f2:	4b2b      	ldr	r3, [pc, #172]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0x974>
 80040fe:	e018      	b.n	8004132 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004100:	4b27      	ldr	r3, [pc, #156]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a26      	ldr	r2, [pc, #152]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8004106:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800410a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800410c:	f7fd f8ba 	bl	8001284 <HAL_GetTick>
 8004110:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004114:	f7fd f8b6 	bl	8001284 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e1f7      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004126:	4b1e      	ldr	r3, [pc, #120]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d07f      	beq.n	800423e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004142:	2b00      	cmp	r3, #0
 8004144:	d062      	beq.n	800420c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004146:	4b16      	ldr	r3, [pc, #88]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	4a15      	ldr	r2, [pc, #84]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 800414c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004150:	6093      	str	r3, [r2, #8]
 8004152:	4b13      	ldr	r3, [pc, #76]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415e:	4910      	ldr	r1, [pc, #64]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8004160:	4313      	orrs	r3, r2
 8004162:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800416c:	d309      	bcc.n	8004182 <HAL_RCC_OscConfig+0xa16>
 800416e:	4b0c      	ldr	r3, [pc, #48]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f023 021f 	bic.w	r2, r3, #31
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	4909      	ldr	r1, [pc, #36]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 800417c:	4313      	orrs	r3, r2
 800417e:	60cb      	str	r3, [r1, #12]
 8004180:	e02a      	b.n	80041d8 <HAL_RCC_OscConfig+0xa6c>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	2b00      	cmp	r3, #0
 8004188:	da0c      	bge.n	80041a4 <HAL_RCC_OscConfig+0xa38>
 800418a:	4b05      	ldr	r3, [pc, #20]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	015b      	lsls	r3, r3, #5
 8004198:	4901      	ldr	r1, [pc, #4]	@ (80041a0 <HAL_RCC_OscConfig+0xa34>)
 800419a:	4313      	orrs	r3, r2
 800419c:	60cb      	str	r3, [r1, #12]
 800419e:	e01b      	b.n	80041d8 <HAL_RCC_OscConfig+0xa6c>
 80041a0:	46020c00 	.word	0x46020c00
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ac:	d30a      	bcc.n	80041c4 <HAL_RCC_OscConfig+0xa58>
 80041ae:	4ba1      	ldr	r3, [pc, #644]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	029b      	lsls	r3, r3, #10
 80041bc:	499d      	ldr	r1, [pc, #628]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	60cb      	str	r3, [r1, #12]
 80041c2:	e009      	b.n	80041d8 <HAL_RCC_OscConfig+0xa6c>
 80041c4:	4b9b      	ldr	r3, [pc, #620]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	03db      	lsls	r3, r3, #15
 80041d2:	4998      	ldr	r1, [pc, #608]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80041d8:	4b96      	ldr	r3, [pc, #600]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a95      	ldr	r2, [pc, #596]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80041de:	f043 0310 	orr.w	r3, r3, #16
 80041e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80041e4:	f7fd f84e 	bl	8001284 <HAL_GetTick>
 80041e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80041ec:	f7fd f84a 	bl	8001284 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e18b      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80041fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0xa80>
 800420a:	e018      	b.n	800423e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800420c:	4b89      	ldr	r3, [pc, #548]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a88      	ldr	r2, [pc, #544]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 8004212:	f023 0310 	bic.w	r3, r3, #16
 8004216:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004218:	f7fd f834 	bl	8001284 <HAL_GetTick>
 800421c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004220:	f7fd f830 	bl	8001284 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e171      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004232:	4b80      	ldr	r3, [pc, #512]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8166 	beq.w	8004514 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004248:	2300      	movs	r3, #0
 800424a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800424e:	4b79      	ldr	r3, [pc, #484]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	2b0c      	cmp	r3, #12
 8004258:	f000 80f2 	beq.w	8004440 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004260:	2b02      	cmp	r3, #2
 8004262:	f040 80c5 	bne.w	80043f0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004266:	4b73      	ldr	r3, [pc, #460]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a72      	ldr	r2, [pc, #456]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 800426c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004270:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004272:	f7fd f807 	bl	8001284 <HAL_GetTick>
 8004276:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800427a:	f7fd f803 	bl	8001284 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e144      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800428c:	4b69      	ldr	r3, [pc, #420]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f0      	bne.n	800427a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004298:	4b66      	ldr	r3, [pc, #408]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 800429a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d111      	bne.n	80042ca <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80042a6:	4b63      	ldr	r3, [pc, #396]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80042a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042ac:	4a61      	ldr	r2, [pc, #388]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80042ae:	f043 0304 	orr.w	r3, r3, #4
 80042b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80042b6:	4b5f      	ldr	r3, [pc, #380]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80042b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80042c4:	2301      	movs	r3, #1
 80042c6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80042ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004438 <HAL_RCC_OscConfig+0xccc>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042d6:	d102      	bne.n	80042de <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80042d8:	2301      	movs	r3, #1
 80042da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80042de:	4b56      	ldr	r3, [pc, #344]	@ (8004438 <HAL_RCC_OscConfig+0xccc>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	4a55      	ldr	r2, [pc, #340]	@ (8004438 <HAL_RCC_OscConfig+0xccc>)
 80042e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042e8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80042ea:	4b52      	ldr	r3, [pc, #328]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80042ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80042fe:	3a01      	subs	r2, #1
 8004300:	0212      	lsls	r2, r2, #8
 8004302:	4311      	orrs	r1, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004308:	430a      	orrs	r2, r1
 800430a:	494a      	ldr	r1, [pc, #296]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 800430c:	4313      	orrs	r3, r2
 800430e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004310:	4b48      	ldr	r3, [pc, #288]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 8004312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004314:	4b49      	ldr	r3, [pc, #292]	@ (800443c <HAL_RCC_OscConfig+0xcd0>)
 8004316:	4013      	ands	r3, r2
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800431c:	3a01      	subs	r2, #1
 800431e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004326:	3a01      	subs	r2, #1
 8004328:	0252      	lsls	r2, r2, #9
 800432a:	b292      	uxth	r2, r2
 800432c:	4311      	orrs	r1, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004332:	3a01      	subs	r2, #1
 8004334:	0412      	lsls	r2, r2, #16
 8004336:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800433a:	4311      	orrs	r1, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004340:	3a01      	subs	r2, #1
 8004342:	0612      	lsls	r2, r2, #24
 8004344:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004348:	430a      	orrs	r2, r1
 800434a:	493a      	ldr	r1, [pc, #232]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 800434c:	4313      	orrs	r3, r2
 800434e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004350:	4b38      	ldr	r3, [pc, #224]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 8004352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004354:	4a37      	ldr	r2, [pc, #220]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 8004356:	f023 0310 	bic.w	r3, r3, #16
 800435a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004360:	4a34      	ldr	r2, [pc, #208]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004366:	4b33      	ldr	r3, [pc, #204]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 8004368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436a:	4a32      	ldr	r2, [pc, #200]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 800436c:	f043 0310 	orr.w	r3, r3, #16
 8004370:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004372:	4b30      	ldr	r3, [pc, #192]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 8004374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004376:	f023 020c 	bic.w	r2, r3, #12
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437e:	492d      	ldr	r1, [pc, #180]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 8004380:	4313      	orrs	r3, r2
 8004382:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004384:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004388:	2b01      	cmp	r3, #1
 800438a:	d105      	bne.n	8004398 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800438c:	4b2a      	ldr	r3, [pc, #168]	@ (8004438 <HAL_RCC_OscConfig+0xccc>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a29      	ldr	r2, [pc, #164]	@ (8004438 <HAL_RCC_OscConfig+0xccc>)
 8004392:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004396:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004398:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800439c:	2b01      	cmp	r3, #1
 800439e:	d107      	bne.n	80043b0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80043a0:	4b24      	ldr	r3, [pc, #144]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80043a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043a6:	4a23      	ldr	r2, [pc, #140]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80043a8:	f023 0304 	bic.w	r3, r3, #4
 80043ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80043b0:	4b20      	ldr	r3, [pc, #128]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80043b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043bc:	f7fc ff62 	bl	8001284 <HAL_GetTick>
 80043c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c4:	f7fc ff5e 	bl	8001284 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e09f      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80043d6:	4b17      	ldr	r3, [pc, #92]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80043e2:	4b14      	ldr	r3, [pc, #80]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80043e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e6:	4a13      	ldr	r2, [pc, #76]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80043e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043ec:	6293      	str	r3, [r2, #40]	@ 0x28
 80043ee:	e091      	b.n	8004514 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80043f0:	4b10      	ldr	r3, [pc, #64]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a0f      	ldr	r2, [pc, #60]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 80043f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043fc:	f7fc ff42 	bl	8001284 <HAL_GetTick>
 8004400:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004404:	f7fc ff3e 	bl	8001284 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e07f      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004416:	4b07      	ldr	r3, [pc, #28]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004422:	4b04      	ldr	r3, [pc, #16]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 8004424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004426:	4a03      	ldr	r2, [pc, #12]	@ (8004434 <HAL_RCC_OscConfig+0xcc8>)
 8004428:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800442c:	f023 0303 	bic.w	r3, r3, #3
 8004430:	6293      	str	r3, [r2, #40]	@ 0x28
 8004432:	e06f      	b.n	8004514 <HAL_RCC_OscConfig+0xda8>
 8004434:	46020c00 	.word	0x46020c00
 8004438:	46020800 	.word	0x46020800
 800443c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004440:	4b37      	ldr	r3, [pc, #220]	@ (8004520 <HAL_RCC_OscConfig+0xdb4>)
 8004442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004444:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004446:	4b36      	ldr	r3, [pc, #216]	@ (8004520 <HAL_RCC_OscConfig+0xdb4>)
 8004448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004450:	2b01      	cmp	r3, #1
 8004452:	d039      	beq.n	80044c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f003 0203 	and.w	r2, r3, #3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800445e:	429a      	cmp	r2, r3
 8004460:	d132      	bne.n	80044c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	0a1b      	lsrs	r3, r3, #8
 8004466:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004470:	429a      	cmp	r2, r3
 8004472:	d129      	bne.n	80044c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800447e:	429a      	cmp	r2, r3
 8004480:	d122      	bne.n	80044c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800448c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800448e:	429a      	cmp	r2, r3
 8004490:	d11a      	bne.n	80044c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	0a5b      	lsrs	r3, r3, #9
 8004496:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d111      	bne.n	80044c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	0c1b      	lsrs	r3, r3, #16
 80044a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d108      	bne.n	80044c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	0e1b      	lsrs	r3, r3, #24
 80044ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e024      	b.n	8004516 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80044cc:	4b14      	ldr	r3, [pc, #80]	@ (8004520 <HAL_RCC_OscConfig+0xdb4>)
 80044ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d0:	08db      	lsrs	r3, r3, #3
 80044d2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80044da:	429a      	cmp	r2, r3
 80044dc:	d01a      	beq.n	8004514 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80044de:	4b10      	ldr	r3, [pc, #64]	@ (8004520 <HAL_RCC_OscConfig+0xdb4>)
 80044e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e2:	4a0f      	ldr	r2, [pc, #60]	@ (8004520 <HAL_RCC_OscConfig+0xdb4>)
 80044e4:	f023 0310 	bic.w	r3, r3, #16
 80044e8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ea:	f7fc fecb 	bl	8001284 <HAL_GetTick>
 80044ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80044f0:	bf00      	nop
 80044f2:	f7fc fec7 	bl	8001284 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d0f9      	beq.n	80044f2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004502:	4a07      	ldr	r2, [pc, #28]	@ (8004520 <HAL_RCC_OscConfig+0xdb4>)
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004508:	4b05      	ldr	r3, [pc, #20]	@ (8004520 <HAL_RCC_OscConfig+0xdb4>)
 800450a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450c:	4a04      	ldr	r2, [pc, #16]	@ (8004520 <HAL_RCC_OscConfig+0xdb4>)
 800450e:	f043 0310 	orr.w	r3, r3, #16
 8004512:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3738      	adds	r7, #56	@ 0x38
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	46020c00 	.word	0x46020c00

08004524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e1d9      	b.n	80048ec <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004538:	4b9b      	ldr	r3, [pc, #620]	@ (80047a8 <HAL_RCC_ClockConfig+0x284>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d910      	bls.n	8004568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	4b98      	ldr	r3, [pc, #608]	@ (80047a8 <HAL_RCC_ClockConfig+0x284>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 020f 	bic.w	r2, r3, #15
 800454e:	4996      	ldr	r1, [pc, #600]	@ (80047a8 <HAL_RCC_ClockConfig+0x284>)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	4313      	orrs	r3, r2
 8004554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004556:	4b94      	ldr	r3, [pc, #592]	@ (80047a8 <HAL_RCC_ClockConfig+0x284>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d001      	beq.n	8004568 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e1c1      	b.n	80048ec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b00      	cmp	r3, #0
 8004572:	d010      	beq.n	8004596 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695a      	ldr	r2, [r3, #20]
 8004578:	4b8c      	ldr	r3, [pc, #560]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 800457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004580:	429a      	cmp	r2, r3
 8004582:	d908      	bls.n	8004596 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004584:	4b89      	ldr	r3, [pc, #548]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 8004586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004588:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	4986      	ldr	r1, [pc, #536]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 8004592:	4313      	orrs	r3, r2
 8004594:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d012      	beq.n	80045c8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	4b81      	ldr	r3, [pc, #516]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d909      	bls.n	80045c8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80045b4:	4b7d      	ldr	r3, [pc, #500]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	497a      	ldr	r1, [pc, #488]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d010      	beq.n	80045f6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	4b74      	ldr	r3, [pc, #464]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d908      	bls.n	80045f6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80045e4:	4b71      	ldr	r3, [pc, #452]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	496e      	ldr	r1, [pc, #440]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d010      	beq.n	8004624 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	4b69      	ldr	r3, [pc, #420]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	429a      	cmp	r2, r3
 8004610:	d908      	bls.n	8004624 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004612:	4b66      	ldr	r3, [pc, #408]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f023 020f 	bic.w	r2, r3, #15
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	4963      	ldr	r1, [pc, #396]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 8004620:	4313      	orrs	r3, r2
 8004622:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80d2 	beq.w	80047d6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004632:	2300      	movs	r3, #0
 8004634:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b03      	cmp	r3, #3
 800463c:	d143      	bne.n	80046c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800463e:	4b5b      	ldr	r3, [pc, #364]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 8004640:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d110      	bne.n	800466e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800464c:	4b57      	ldr	r3, [pc, #348]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 800464e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004652:	4a56      	ldr	r2, [pc, #344]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 8004654:	f043 0304 	orr.w	r3, r3, #4
 8004658:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800465c:	4b53      	ldr	r3, [pc, #332]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 800465e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	60bb      	str	r3, [r7, #8]
 8004668:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800466a:	2301      	movs	r3, #1
 800466c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800466e:	f7fc fe09 	bl	8001284 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004674:	4b4e      	ldr	r3, [pc, #312]	@ (80047b0 <HAL_RCC_ClockConfig+0x28c>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00f      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004680:	e008      	b.n	8004694 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004682:	f7fc fdff 	bl	8001284 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e12b      	b.n	80048ec <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004694:	4b46      	ldr	r3, [pc, #280]	@ (80047b0 <HAL_RCC_ClockConfig+0x28c>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f0      	beq.n	8004682 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d107      	bne.n	80046b6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80046a6:	4b41      	ldr	r3, [pc, #260]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 80046a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ac:	4a3f      	ldr	r2, [pc, #252]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 80046ae:	f023 0304 	bic.w	r3, r3, #4
 80046b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80046b6:	4b3d      	ldr	r3, [pc, #244]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d121      	bne.n	8004706 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e112      	b.n	80048ec <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d107      	bne.n	80046de <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ce:	4b37      	ldr	r3, [pc, #220]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d115      	bne.n	8004706 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e106      	b.n	80048ec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d107      	bne.n	80046f6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80046e6:	4b31      	ldr	r3, [pc, #196]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e0fa      	b.n	80048ec <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f6:	4b2d      	ldr	r3, [pc, #180]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e0f2      	b.n	80048ec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004706:	4b29      	ldr	r3, [pc, #164]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f023 0203 	bic.w	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4926      	ldr	r1, [pc, #152]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 8004714:	4313      	orrs	r3, r2
 8004716:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004718:	f7fc fdb4 	bl	8001284 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b03      	cmp	r3, #3
 8004724:	d112      	bne.n	800474c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004726:	e00a      	b.n	800473e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004728:	f7fc fdac 	bl	8001284 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004736:	4293      	cmp	r3, r2
 8004738:	d901      	bls.n	800473e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e0d6      	b.n	80048ec <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800473e:	4b1b      	ldr	r3, [pc, #108]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f003 030c 	and.w	r3, r3, #12
 8004746:	2b0c      	cmp	r3, #12
 8004748:	d1ee      	bne.n	8004728 <HAL_RCC_ClockConfig+0x204>
 800474a:	e044      	b.n	80047d6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d112      	bne.n	800477a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004754:	e00a      	b.n	800476c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004756:	f7fc fd95 	bl	8001284 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e0bf      	b.n	80048ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800476c:	4b0f      	ldr	r3, [pc, #60]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	f003 030c 	and.w	r3, r3, #12
 8004774:	2b08      	cmp	r3, #8
 8004776:	d1ee      	bne.n	8004756 <HAL_RCC_ClockConfig+0x232>
 8004778:	e02d      	b.n	80047d6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d123      	bne.n	80047ca <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004782:	e00a      	b.n	800479a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004784:	f7fc fd7e 	bl	8001284 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e0a8      	b.n	80048ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800479a:	4b04      	ldr	r3, [pc, #16]	@ (80047ac <HAL_RCC_ClockConfig+0x288>)
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	f003 030c 	and.w	r3, r3, #12
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1ee      	bne.n	8004784 <HAL_RCC_ClockConfig+0x260>
 80047a6:	e016      	b.n	80047d6 <HAL_RCC_ClockConfig+0x2b2>
 80047a8:	40022000 	.word	0x40022000
 80047ac:	46020c00 	.word	0x46020c00
 80047b0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b4:	f7fc fd66 	bl	8001284 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e090      	b.n	80048ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ca:	4b4a      	ldr	r3, [pc, #296]	@ (80048f4 <HAL_RCC_ClockConfig+0x3d0>)
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d1ee      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d010      	beq.n	8004804 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	4b43      	ldr	r3, [pc, #268]	@ (80048f4 <HAL_RCC_ClockConfig+0x3d0>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d208      	bcs.n	8004804 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80047f2:	4b40      	ldr	r3, [pc, #256]	@ (80048f4 <HAL_RCC_ClockConfig+0x3d0>)
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f023 020f 	bic.w	r2, r3, #15
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	493d      	ldr	r1, [pc, #244]	@ (80048f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004800:	4313      	orrs	r3, r2
 8004802:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004804:	4b3c      	ldr	r3, [pc, #240]	@ (80048f8 <HAL_RCC_ClockConfig+0x3d4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d210      	bcs.n	8004834 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004812:	4b39      	ldr	r3, [pc, #228]	@ (80048f8 <HAL_RCC_ClockConfig+0x3d4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 020f 	bic.w	r2, r3, #15
 800481a:	4937      	ldr	r1, [pc, #220]	@ (80048f8 <HAL_RCC_ClockConfig+0x3d4>)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	4313      	orrs	r3, r2
 8004820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b35      	ldr	r3, [pc, #212]	@ (80048f8 <HAL_RCC_ClockConfig+0x3d4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e05b      	b.n	80048ec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d010      	beq.n	8004862 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	4b2b      	ldr	r3, [pc, #172]	@ (80048f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800484c:	429a      	cmp	r2, r3
 800484e:	d208      	bcs.n	8004862 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004850:	4b28      	ldr	r3, [pc, #160]	@ (80048f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	4925      	ldr	r1, [pc, #148]	@ (80048f4 <HAL_RCC_ClockConfig+0x3d0>)
 800485e:	4313      	orrs	r3, r2
 8004860:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d012      	beq.n	8004894 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691a      	ldr	r2, [r3, #16]
 8004872:	4b20      	ldr	r3, [pc, #128]	@ (80048f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800487c:	429a      	cmp	r2, r3
 800487e:	d209      	bcs.n	8004894 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004880:	4b1c      	ldr	r3, [pc, #112]	@ (80048f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	4919      	ldr	r1, [pc, #100]	@ (80048f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004890:	4313      	orrs	r3, r2
 8004892:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b00      	cmp	r3, #0
 800489e:	d010      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	4b13      	ldr	r3, [pc, #76]	@ (80048f4 <HAL_RCC_ClockConfig+0x3d0>)
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d208      	bcs.n	80048c2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80048b0:	4b10      	ldr	r3, [pc, #64]	@ (80048f4 <HAL_RCC_ClockConfig+0x3d0>)
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	490d      	ldr	r1, [pc, #52]	@ (80048f4 <HAL_RCC_ClockConfig+0x3d0>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80048c2:	f000 f821 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 80048c6:	4602      	mov	r2, r0
 80048c8:	4b0a      	ldr	r3, [pc, #40]	@ (80048f4 <HAL_RCC_ClockConfig+0x3d0>)
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	490a      	ldr	r1, [pc, #40]	@ (80048fc <HAL_RCC_ClockConfig+0x3d8>)
 80048d2:	5ccb      	ldrb	r3, [r1, r3]
 80048d4:	fa22 f303 	lsr.w	r3, r2, r3
 80048d8:	4a09      	ldr	r2, [pc, #36]	@ (8004900 <HAL_RCC_ClockConfig+0x3dc>)
 80048da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048dc:	4b09      	ldr	r3, [pc, #36]	@ (8004904 <HAL_RCC_ClockConfig+0x3e0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fc fc45 	bl	8001170 <HAL_InitTick>
 80048e6:	4603      	mov	r3, r0
 80048e8:	73fb      	strb	r3, [r7, #15]

  return status;
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	46020c00 	.word	0x46020c00
 80048f8:	40022000 	.word	0x40022000
 80048fc:	0800890c 	.word	0x0800890c
 8004900:	20000000 	.word	0x20000000
 8004904:	20000004 	.word	0x20000004

08004908 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004908:	b480      	push	{r7}
 800490a:	b08b      	sub	sp, #44	@ 0x2c
 800490c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004916:	4b78      	ldr	r3, [pc, #480]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f003 030c 	and.w	r3, r3, #12
 800491e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004920:	4b75      	ldr	r3, [pc, #468]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d005      	beq.n	800493c <HAL_RCC_GetSysClockFreq+0x34>
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2b0c      	cmp	r3, #12
 8004934:	d121      	bne.n	800497a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d11e      	bne.n	800497a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800493c:	4b6e      	ldr	r3, [pc, #440]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004948:	4b6b      	ldr	r3, [pc, #428]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800494a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800494e:	0b1b      	lsrs	r3, r3, #12
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	627b      	str	r3, [r7, #36]	@ 0x24
 8004956:	e005      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004958:	4b67      	ldr	r3, [pc, #412]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	0f1b      	lsrs	r3, r3, #28
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004964:	4a65      	ldr	r2, [pc, #404]	@ (8004afc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d110      	bne.n	8004996 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004976:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004978:	e00d      	b.n	8004996 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800497a:	4b5f      	ldr	r3, [pc, #380]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	2b04      	cmp	r3, #4
 8004984:	d102      	bne.n	800498c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004986:	4b5e      	ldr	r3, [pc, #376]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004988:	623b      	str	r3, [r7, #32]
 800498a:	e004      	b.n	8004996 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b08      	cmp	r3, #8
 8004990:	d101      	bne.n	8004996 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004992:	4b5b      	ldr	r3, [pc, #364]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004994:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	2b0c      	cmp	r3, #12
 800499a:	f040 80a5 	bne.w	8004ae8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800499e:	4b56      	ldr	r3, [pc, #344]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80049a8:	4b53      	ldr	r3, [pc, #332]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ac:	0a1b      	lsrs	r3, r3, #8
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	3301      	adds	r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80049b6:	4b50      	ldr	r3, [pc, #320]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80049c2:	4b4d      	ldr	r3, [pc, #308]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c6:	08db      	lsrs	r3, r3, #3
 80049c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	fb02 f303 	mul.w	r3, r2, r3
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d003      	beq.n	80049ec <HAL_RCC_GetSysClockFreq+0xe4>
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d022      	beq.n	8004a30 <HAL_RCC_GetSysClockFreq+0x128>
 80049ea:	e043      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004b04 <HAL_RCC_GetSysClockFreq+0x1fc>
 80049fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049fe:	4b3e      	ldr	r3, [pc, #248]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a0e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a12:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004b08 <HAL_RCC_GetSysClockFreq+0x200>
 8004a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a2e:	e046      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004b04 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a42:	4b2d      	ldr	r3, [pc, #180]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a52:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a56:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004b08 <HAL_RCC_GetSysClockFreq+0x200>
 8004a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a72:	e024      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	ee07 3a90 	vmov	s15, r3
 8004a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a94:	ee07 3a90 	vmov	s15, r3
 8004a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a9c:	ed97 6a01 	vldr	s12, [r7, #4]
 8004aa0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004b08 <HAL_RCC_GetSysClockFreq+0x200>
 8004aa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004aa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004aac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004abc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004abe:	4b0e      	ldr	r3, [pc, #56]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac2:	0e1b      	lsrs	r3, r3, #24
 8004ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ac8:	3301      	adds	r3, #1
 8004aca:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ad6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae2:	ee17 3a90 	vmov	r3, s15
 8004ae6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	372c      	adds	r7, #44	@ 0x2c
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	46020c00 	.word	0x46020c00
 8004afc:	08008924 	.word	0x08008924
 8004b00:	00f42400 	.word	0x00f42400
 8004b04:	4b742400 	.word	0x4b742400
 8004b08:	46000000 	.word	0x46000000

08004b0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004b10:	f7ff fefa 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8004b14:	4602      	mov	r2, r0
 8004b16:	4b07      	ldr	r3, [pc, #28]	@ (8004b34 <HAL_RCC_GetHCLKFreq+0x28>)
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	4906      	ldr	r1, [pc, #24]	@ (8004b38 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004b20:	5ccb      	ldrb	r3, [r1, r3]
 8004b22:	fa22 f303 	lsr.w	r3, r2, r3
 8004b26:	4a05      	ldr	r2, [pc, #20]	@ (8004b3c <HAL_RCC_GetHCLKFreq+0x30>)
 8004b28:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004b2a:	4b04      	ldr	r3, [pc, #16]	@ (8004b3c <HAL_RCC_GetHCLKFreq+0x30>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	46020c00 	.word	0x46020c00
 8004b38:	0800890c 	.word	0x0800890c
 8004b3c:	20000000 	.word	0x20000000

08004b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004b44:	f7ff ffe2 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b05      	ldr	r3, [pc, #20]	@ (8004b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	091b      	lsrs	r3, r3, #4
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	4903      	ldr	r1, [pc, #12]	@ (8004b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b56:	5ccb      	ldrb	r3, [r1, r3]
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	46020c00 	.word	0x46020c00
 8004b64:	0800891c 	.word	0x0800891c

08004b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004b6c:	f7ff ffce 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8004b70:	4602      	mov	r2, r0
 8004b72:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	0a1b      	lsrs	r3, r3, #8
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	4903      	ldr	r1, [pc, #12]	@ (8004b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b7e:	5ccb      	ldrb	r3, [r1, r3]
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	46020c00 	.word	0x46020c00
 8004b8c:	0800891c 	.word	0x0800891c

08004b90 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004b94:	f7ff ffba 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	4b05      	ldr	r3, [pc, #20]	@ (8004bb0 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	091b      	lsrs	r3, r3, #4
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	4903      	ldr	r1, [pc, #12]	@ (8004bb4 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004ba6:	5ccb      	ldrb	r3, [r1, r3]
 8004ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	46020c00 	.word	0x46020c00
 8004bb4:	0800891c 	.word	0x0800891c

08004bb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004bc0:	4b3e      	ldr	r3, [pc, #248]	@ (8004cbc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004bce:	f7fe fd9f 	bl	8003710 <HAL_PWREx_GetVoltageRange>
 8004bd2:	6178      	str	r0, [r7, #20]
 8004bd4:	e019      	b.n	8004c0a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bd6:	4b39      	ldr	r3, [pc, #228]	@ (8004cbc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bdc:	4a37      	ldr	r2, [pc, #220]	@ (8004cbc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bde:	f043 0304 	orr.w	r3, r3, #4
 8004be2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004be6:	4b35      	ldr	r3, [pc, #212]	@ (8004cbc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bf4:	f7fe fd8c 	bl	8003710 <HAL_PWREx_GetVoltageRange>
 8004bf8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bfa:	4b30      	ldr	r3, [pc, #192]	@ (8004cbc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c00:	4a2e      	ldr	r2, [pc, #184]	@ (8004cbc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004c02:	f023 0304 	bic.w	r3, r3, #4
 8004c06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c10:	d003      	beq.n	8004c1a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c18:	d109      	bne.n	8004c2e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c20:	d202      	bcs.n	8004c28 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004c22:	2301      	movs	r3, #1
 8004c24:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004c26:	e033      	b.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004c28:	2300      	movs	r3, #0
 8004c2a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004c2c:	e030      	b.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c34:	d208      	bcs.n	8004c48 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c3c:	d102      	bne.n	8004c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004c3e:	2303      	movs	r3, #3
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	e025      	b.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e035      	b.n	8004cb4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c4e:	d90f      	bls.n	8004c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c5c:	d902      	bls.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	e015      	b.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004c64:	2301      	movs	r3, #1
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	e012      	b.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	e00f      	b.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c76:	d109      	bne.n	8004c8c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c7e:	d102      	bne.n	8004c86 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004c80:	2301      	movs	r3, #1
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	e004      	b.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004c86:	2302      	movs	r3, #2
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	e001      	b.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c90:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f023 020f 	bic.w	r2, r3, #15
 8004c98:	4909      	ldr	r1, [pc, #36]	@ (8004cc0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004ca0:	4b07      	ldr	r3, [pc, #28]	@ (8004cc0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d001      	beq.n	8004cb2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	46020c00 	.word	0x46020c00
 8004cc0:	40022000 	.word	0x40022000

08004cc4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc8:	b0c4      	sub	sp, #272	@ 0x110
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f002 0401 	and.w	r4, r2, #1
 8004ce8:	2500      	movs	r5, #0
 8004cea:	ea54 0305 	orrs.w	r3, r4, r5
 8004cee:	d00b      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004cf0:	4bd5      	ldr	r3, [pc, #852]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cf6:	f023 0103 	bic.w	r1, r3, #3
 8004cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d00:	4ad1      	ldr	r2, [pc, #836]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d02:	430b      	orrs	r3, r1
 8004d04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d10:	f002 0802 	and.w	r8, r2, #2
 8004d14:	f04f 0900 	mov.w	r9, #0
 8004d18:	ea58 0309 	orrs.w	r3, r8, r9
 8004d1c:	d00b      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004d1e:	4bca      	ldr	r3, [pc, #808]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d24:	f023 010c 	bic.w	r1, r3, #12
 8004d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d2e:	4ac6      	ldr	r2, [pc, #792]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d30:	430b      	orrs	r3, r1
 8004d32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f002 0a04 	and.w	sl, r2, #4
 8004d42:	f04f 0b00 	mov.w	fp, #0
 8004d46:	ea5a 030b 	orrs.w	r3, sl, fp
 8004d4a:	d00b      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004d4c:	4bbe      	ldr	r3, [pc, #760]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d52:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5c:	4aba      	ldr	r2, [pc, #744]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d5e:	430b      	orrs	r3, r1
 8004d60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	f002 0308 	and.w	r3, r2, #8
 8004d70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004d74:	2300      	movs	r3, #0
 8004d76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004d7a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	4313      	orrs	r3, r2
 8004d82:	d00b      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004d84:	4bb0      	ldr	r3, [pc, #704]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d94:	4aac      	ldr	r2, [pc, #688]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d96:	430b      	orrs	r3, r1
 8004d98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f002 0310 	and.w	r3, r2, #16
 8004da8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004dac:	2300      	movs	r3, #0
 8004dae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004db2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004db6:	460b      	mov	r3, r1
 8004db8:	4313      	orrs	r3, r2
 8004dba:	d00b      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004dbc:	4ba2      	ldr	r3, [pc, #648]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dc2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dcc:	4a9e      	ldr	r2, [pc, #632]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004de0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004de4:	2300      	movs	r3, #0
 8004de6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004dea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4313      	orrs	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004df4:	4b94      	ldr	r3, [pc, #592]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004df6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004dfa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e04:	4a90      	ldr	r2, [pc, #576]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e06:	430b      	orrs	r3, r1
 8004e08:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	f002 0320 	and.w	r3, r2, #32
 8004e18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e26:	460b      	mov	r3, r1
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	d00b      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004e2c:	4b86      	ldr	r3, [pc, #536]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e32:	f023 0107 	bic.w	r1, r3, #7
 8004e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e3c:	4a82      	ldr	r2, [pc, #520]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e54:	2300      	movs	r3, #0
 8004e56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004e5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4313      	orrs	r3, r2
 8004e62:	d00b      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004e64:	4b78      	ldr	r3, [pc, #480]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e6a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e74:	4a74      	ldr	r2, [pc, #464]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e76:	430b      	orrs	r3, r1
 8004e78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004e88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004e96:	460b      	mov	r3, r1
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	d00b      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004e9c:	4b6a      	ldr	r3, [pc, #424]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ea2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eac:	4a66      	ldr	r2, [pc, #408]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004eae:	430b      	orrs	r3, r1
 8004eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004eca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	d00b      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004ed4:	4b5c      	ldr	r3, [pc, #368]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ed6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004eda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ee4:	4a58      	ldr	r2, [pc, #352]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004efc:	2300      	movs	r3, #0
 8004efe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004f02:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004f06:	460b      	mov	r3, r1
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	d00b      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004f0c:	4b4e      	ldr	r3, [pc, #312]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f12:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f1c:	4a4a      	ldr	r2, [pc, #296]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8004f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004f30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f34:	2300      	movs	r3, #0
 8004f36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4313      	orrs	r3, r2
 8004f42:	d00b      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8004f44:	4b40      	ldr	r3, [pc, #256]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f4a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f54:	4a3c      	ldr	r2, [pc, #240]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f56:	430b      	orrs	r3, r1
 8004f58:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8004f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004f68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f72:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f76:	460b      	mov	r3, r1
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	d00c      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8004f7c:	4b32      	ldr	r3, [pc, #200]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f82:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f90:	430b      	orrs	r3, r1
 8004f92:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9e:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004fac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	d00c      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004fb6:	4b24      	ldr	r3, [pc, #144]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fbc:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004fdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fe6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004fea:	460b      	mov	r3, r1
 8004fec:	4313      	orrs	r3, r2
 8004fee:	d00c      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004ff0:	4b15      	ldr	r3, [pc, #84]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ff6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005002:	4a11      	ldr	r2, [pc, #68]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005004:	430b      	orrs	r3, r1
 8005006:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800500a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800500e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005012:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005016:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800501a:	2300      	movs	r3, #0
 800501c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005020:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005024:	460b      	mov	r3, r1
 8005026:	4313      	orrs	r3, r2
 8005028:	d010      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800502a:	4b07      	ldr	r3, [pc, #28]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800502c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005030:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800503c:	4a02      	ldr	r2, [pc, #8]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800503e:	430b      	orrs	r3, r1
 8005040:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005044:	e002      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8005046:	bf00      	nop
 8005048:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800504c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005058:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800505c:	2300      	movs	r3, #0
 800505e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005062:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005066:	460b      	mov	r3, r1
 8005068:	4313      	orrs	r3, r2
 800506a:	d04c      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800506c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005070:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005074:	2b80      	cmp	r3, #128	@ 0x80
 8005076:	d02d      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005078:	2b80      	cmp	r3, #128	@ 0x80
 800507a:	d827      	bhi.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x408>
 800507c:	2b60      	cmp	r3, #96	@ 0x60
 800507e:	d02b      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005080:	2b60      	cmp	r3, #96	@ 0x60
 8005082:	d823      	bhi.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005084:	2b40      	cmp	r3, #64	@ 0x40
 8005086:	d006      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8005088:	2b40      	cmp	r3, #64	@ 0x40
 800508a:	d81f      	bhi.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x408>
 800508c:	2b00      	cmp	r3, #0
 800508e:	d009      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005090:	2b20      	cmp	r3, #32
 8005092:	d011      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005094:	e01a      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005096:	4bbe      	ldr	r3, [pc, #760]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509a:	4abd      	ldr	r2, [pc, #756]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80050a2:	e01a      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050a8:	3308      	adds	r3, #8
 80050aa:	4618      	mov	r0, r3
 80050ac:	f002 fc32 	bl	8007914 <RCCEx_PLL2_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80050b6:	e010      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050bc:	332c      	adds	r3, #44	@ 0x2c
 80050be:	4618      	mov	r0, r3
 80050c0:	f002 fcc0 	bl	8007a44 <RCCEx_PLL3_Config>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80050ca:	e006      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80050d2:	e002      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80050d4:	bf00      	nop
 80050d6:	e000      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80050d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050da:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10d      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80050e2:	4bab      	ldr	r3, [pc, #684]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050e8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80050ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050f4:	4aa6      	ldr	r2, [pc, #664]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050f6:	430b      	orrs	r3, r1
 80050f8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80050fc:	e003      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fe:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005102:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800510a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005112:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005116:	2300      	movs	r3, #0
 8005118:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800511c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005120:	460b      	mov	r3, r1
 8005122:	4313      	orrs	r3, r2
 8005124:	d053      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800512a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800512e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005132:	d033      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8005134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005138:	d82c      	bhi.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800513a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800513e:	d02f      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8005140:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005144:	d826      	bhi.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005146:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800514a:	d008      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800514c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005150:	d820      	bhi.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800515a:	d011      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800515c:	e01a      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800515e:	4b8c      	ldr	r3, [pc, #560]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005162:	4a8b      	ldr	r2, [pc, #556]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005168:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800516a:	e01a      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800516c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005170:	3308      	adds	r3, #8
 8005172:	4618      	mov	r0, r3
 8005174:	f002 fbce 	bl	8007914 <RCCEx_PLL2_Config>
 8005178:	4603      	mov	r3, r0
 800517a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800517e:	e010      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005184:	332c      	adds	r3, #44	@ 0x2c
 8005186:	4618      	mov	r0, r3
 8005188:	f002 fc5c 	bl	8007a44 <RCCEx_PLL3_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005192:	e006      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800519a:	e002      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800519c:	bf00      	nop
 800519e:	e000      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80051a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10d      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80051aa:	4b79      	ldr	r3, [pc, #484]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051b0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80051b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80051bc:	4a74      	ldr	r2, [pc, #464]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051be:	430b      	orrs	r3, r1
 80051c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80051c4:	e003      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80051ca:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80051ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80051da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051dc:	2300      	movs	r3, #0
 80051de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80051e0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80051e4:	460b      	mov	r3, r1
 80051e6:	4313      	orrs	r3, r2
 80051e8:	d046      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80051ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051f2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80051f6:	d028      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x586>
 80051f8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80051fc:	d821      	bhi.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80051fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005202:	d022      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005204:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005208:	d81b      	bhi.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800520a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800520e:	d01c      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005210:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005214:	d815      	bhi.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005216:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800521a:	d008      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 800521c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005220:	d80f      	bhi.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d011      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800522a:	d00e      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x586>
 800522c:	e009      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800522e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005232:	3308      	adds	r3, #8
 8005234:	4618      	mov	r0, r3
 8005236:	f002 fb6d 	bl	8007914 <RCCEx_PLL2_Config>
 800523a:	4603      	mov	r3, r0
 800523c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005240:	e004      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005248:	e000      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 800524a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800524c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10d      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005254:	4b4e      	ldr	r3, [pc, #312]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005256:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800525a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800525e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005262:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005266:	4a4a      	ldr	r2, [pc, #296]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005268:	430b      	orrs	r3, r1
 800526a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800526e:	e003      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005270:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005274:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005284:	673b      	str	r3, [r7, #112]	@ 0x70
 8005286:	2300      	movs	r3, #0
 8005288:	677b      	str	r3, [r7, #116]	@ 0x74
 800528a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800528e:	460b      	mov	r3, r1
 8005290:	4313      	orrs	r3, r2
 8005292:	d03f      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005298:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800529c:	2b04      	cmp	r3, #4
 800529e:	d81e      	bhi.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x61a>
 80052a0:	a201      	add	r2, pc, #4	@ (adr r2, 80052a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80052a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a6:	bf00      	nop
 80052a8:	080052e7 	.word	0x080052e7
 80052ac:	080052bd 	.word	0x080052bd
 80052b0:	080052cb 	.word	0x080052cb
 80052b4:	080052e7 	.word	0x080052e7
 80052b8:	080052e7 	.word	0x080052e7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052bc:	4b34      	ldr	r3, [pc, #208]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	4a33      	ldr	r2, [pc, #204]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80052c8:	e00e      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ce:	332c      	adds	r3, #44	@ 0x2c
 80052d0:	4618      	mov	r0, r3
 80052d2:	f002 fbb7 	bl	8007a44 <RCCEx_PLL3_Config>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80052dc:	e004      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80052e4:	e000      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 80052e6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80052e8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10d      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80052f0:	4b27      	ldr	r3, [pc, #156]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052f6:	f023 0107 	bic.w	r1, r3, #7
 80052fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005302:	4a23      	ldr	r2, [pc, #140]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005304:	430b      	orrs	r3, r1
 8005306:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800530a:	e003      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005310:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005320:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005322:	2300      	movs	r3, #0
 8005324:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005326:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800532a:	460b      	mov	r3, r1
 800532c:	4313      	orrs	r3, r2
 800532e:	d04c      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005334:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005338:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800533c:	d02a      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 800533e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005342:	d821      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005344:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005348:	d026      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 800534a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800534e:	d81b      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005350:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005354:	d00e      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8005356:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800535a:	d815      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01d      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8005360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005364:	d110      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005366:	4b0a      	ldr	r3, [pc, #40]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536a:	4a09      	ldr	r2, [pc, #36]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800536c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005370:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005372:	e014      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005378:	332c      	adds	r3, #44	@ 0x2c
 800537a:	4618      	mov	r0, r3
 800537c:	f002 fb62 	bl	8007a44 <RCCEx_PLL3_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005386:	e00a      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800538e:	e006      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8005390:	46020c00 	.word	0x46020c00
        break;
 8005394:	bf00      	nop
 8005396:	e002      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8005398:	bf00      	nop
 800539a:	e000      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 800539c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800539e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10d      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80053a6:	4baf      	ldr	r3, [pc, #700]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80053a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80053b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053b8:	4aaa      	ldr	r2, [pc, #680]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80053ba:	430b      	orrs	r3, r1
 80053bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80053c0:	e003      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80053c6:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80053d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80053d8:	2300      	movs	r3, #0
 80053da:	667b      	str	r3, [r7, #100]	@ 0x64
 80053dc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80053e0:	460b      	mov	r3, r1
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f000 80b5 	beq.w	8005552 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053e8:	2300      	movs	r3, #0
 80053ea:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ee:	4b9d      	ldr	r3, [pc, #628]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80053f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d113      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053fc:	4b99      	ldr	r3, [pc, #612]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80053fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005402:	4a98      	ldr	r2, [pc, #608]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005404:	f043 0304 	orr.w	r3, r3, #4
 8005408:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800540c:	4b95      	ldr	r3, [pc, #596]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800540e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800541a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 800541e:	2301      	movs	r3, #1
 8005420:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005424:	4b90      	ldr	r3, [pc, #576]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005428:	4a8f      	ldr	r2, [pc, #572]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800542a:	f043 0301 	orr.w	r3, r3, #1
 800542e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005430:	f7fb ff28 	bl	8001284 <HAL_GetTick>
 8005434:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005438:	e00b      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800543a:	f7fb ff23 	bl	8001284 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d903      	bls.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005450:	e005      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005452:	4b85      	ldr	r3, [pc, #532]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0ed      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 800545e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005462:	2b00      	cmp	r3, #0
 8005464:	d165      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005466:	4b7f      	ldr	r3, [pc, #508]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800546c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005470:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005478:	2b00      	cmp	r3, #0
 800547a:	d023      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x800>
 800547c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005480:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005488:	4293      	cmp	r3, r2
 800548a:	d01b      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800548c:	4b75      	ldr	r3, [pc, #468]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800548e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005492:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005496:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800549a:	4b72      	ldr	r3, [pc, #456]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800549c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054a0:	4a70      	ldr	r2, [pc, #448]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80054a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054aa:	4b6e      	ldr	r3, [pc, #440]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80054ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054b0:	4a6c      	ldr	r2, [pc, #432]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80054b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054ba:	4a6a      	ldr	r2, [pc, #424]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80054bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d019      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d0:	f7fb fed8 	bl	8001284 <HAL_GetTick>
 80054d4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054d8:	e00d      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054da:	f7fb fed3 	bl	8001284 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e4:	1ad2      	subs	r2, r2, r3
 80054e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d903      	bls.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 80054f4:	e006      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80054f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0ea      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8005504:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10d      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800550c:	4b55      	ldr	r3, [pc, #340]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800550e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005512:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800551a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800551e:	4a51      	ldr	r2, [pc, #324]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005520:	430b      	orrs	r3, r1
 8005522:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005526:	e008      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005528:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800552c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8005530:	e003      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005532:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005536:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800553a:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 800553e:	2b01      	cmp	r3, #1
 8005540:	d107      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005542:	4b48      	ldr	r3, [pc, #288]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005544:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005548:	4a46      	ldr	r2, [pc, #280]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800554a:	f023 0304 	bic.w	r3, r3, #4
 800554e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800555e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005560:	2300      	movs	r3, #0
 8005562:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005564:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005568:	460b      	mov	r3, r1
 800556a:	4313      	orrs	r3, r2
 800556c:	d042      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800556e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005572:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005576:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800557a:	d022      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800557c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005580:	d81b      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8005582:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005586:	d011      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8005588:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800558c:	d815      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d019      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x902>
 8005592:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005596:	d110      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800559c:	3308      	adds	r3, #8
 800559e:	4618      	mov	r0, r3
 80055a0:	f002 f9b8 	bl	8007914 <RCCEx_PLL2_Config>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80055aa:	e00d      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80055ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80055b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055b6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80055b8:	e006      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80055c0:	e002      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80055c2:	bf00      	nop
 80055c4:	e000      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80055c6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80055c8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10d      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80055d0:	4b24      	ldr	r3, [pc, #144]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80055d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055d6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80055da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80055e2:	4a20      	ldr	r2, [pc, #128]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80055e4:	430b      	orrs	r3, r1
 80055e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80055ea:	e003      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ec:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80055f0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80055f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005600:	653b      	str	r3, [r7, #80]	@ 0x50
 8005602:	2300      	movs	r3, #0
 8005604:	657b      	str	r3, [r7, #84]	@ 0x54
 8005606:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800560a:	460b      	mov	r3, r1
 800560c:	4313      	orrs	r3, r2
 800560e:	d031      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005614:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800561c:	d00b      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800561e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005622:	d804      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800562c:	d007      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005634:	e004      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005636:	bf00      	nop
 8005638:	e002      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800563a:	bf00      	nop
 800563c:	e000      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800563e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005640:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005644:	2b00      	cmp	r3, #0
 8005646:	d111      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005648:	4b06      	ldr	r3, [pc, #24]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800564a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800564e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005656:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800565a:	4a02      	ldr	r2, [pc, #8]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800565c:	430b      	orrs	r3, r1
 800565e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005662:	e007      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8005664:	46020c00 	.word	0x46020c00
 8005668:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800566c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005670:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005680:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005682:	2300      	movs	r3, #0
 8005684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005686:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800568a:	460b      	mov	r3, r1
 800568c:	4313      	orrs	r3, r2
 800568e:	d00c      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005690:	4bb2      	ldr	r3, [pc, #712]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005692:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005696:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800569a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800569e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80056a2:	4aae      	ldr	r2, [pc, #696]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80056a4:	430b      	orrs	r3, r1
 80056a6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80056aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80056b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80056b8:	2300      	movs	r3, #0
 80056ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80056bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80056c0:	460b      	mov	r3, r1
 80056c2:	4313      	orrs	r3, r2
 80056c4:	d019      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80056c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056d2:	d105      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056d4:	4ba1      	ldr	r3, [pc, #644]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80056d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d8:	4aa0      	ldr	r2, [pc, #640]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80056da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056de:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80056e0:	4b9e      	ldr	r3, [pc, #632]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80056e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056e6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80056ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056f2:	4a9a      	ldr	r2, [pc, #616]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80056f4:	430b      	orrs	r3, r1
 80056f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80056fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005706:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005708:	2300      	movs	r3, #0
 800570a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800570c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005710:	460b      	mov	r3, r1
 8005712:	4313      	orrs	r3, r2
 8005714:	d00c      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005716:	4b91      	ldr	r3, [pc, #580]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800571c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005724:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005728:	4a8c      	ldr	r2, [pc, #560]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800572a:	430b      	orrs	r3, r1
 800572c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800573c:	633b      	str	r3, [r7, #48]	@ 0x30
 800573e:	2300      	movs	r3, #0
 8005740:	637b      	str	r3, [r7, #52]	@ 0x34
 8005742:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005746:	460b      	mov	r3, r1
 8005748:	4313      	orrs	r3, r2
 800574a:	d00c      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800574c:	4b83      	ldr	r3, [pc, #524]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800574e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005752:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800575a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800575e:	4a7f      	ldr	r2, [pc, #508]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005760:	430b      	orrs	r3, r1
 8005762:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005772:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005774:	2300      	movs	r3, #0
 8005776:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005778:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800577c:	460b      	mov	r3, r1
 800577e:	4313      	orrs	r3, r2
 8005780:	d00c      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005782:	4b76      	ldr	r3, [pc, #472]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005784:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005788:	f023 0218 	bic.w	r2, r3, #24
 800578c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005790:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005794:	4971      	ldr	r1, [pc, #452]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800579c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80057a8:	623b      	str	r3, [r7, #32]
 80057aa:	2300      	movs	r3, #0
 80057ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80057b2:	460b      	mov	r3, r1
 80057b4:	4313      	orrs	r3, r2
 80057b6:	d032      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80057b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80057c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057c4:	d105      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c6:	4b65      	ldr	r3, [pc, #404]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80057c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ca:	4a64      	ldr	r2, [pc, #400]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80057cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057d0:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80057d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80057da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057de:	d108      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057e4:	3308      	adds	r3, #8
 80057e6:	4618      	mov	r0, r3
 80057e8:	f002 f894 	bl	8007914 <RCCEx_PLL2_Config>
 80057ec:	4603      	mov	r3, r0
 80057ee:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 80057f2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10d      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80057fa:	4b58      	ldr	r3, [pc, #352]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80057fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005800:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005808:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800580c:	4953      	ldr	r1, [pc, #332]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005814:	e003      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005816:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800581a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800581e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	2100      	movs	r1, #0
 8005828:	61b9      	str	r1, [r7, #24]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	61fb      	str	r3, [r7, #28]
 8005830:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005834:	460b      	mov	r3, r1
 8005836:	4313      	orrs	r3, r2
 8005838:	d04a      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800583a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800583e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005842:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005846:	d01e      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8005848:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800584c:	d825      	bhi.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800584e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005852:	d00e      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8005854:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005858:	d81f      	bhi.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800585a:	2b00      	cmp	r3, #0
 800585c:	d021      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800585e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005862:	d11a      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005864:	4b3d      	ldr	r3, [pc, #244]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005868:	4a3c      	ldr	r2, [pc, #240]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800586a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800586e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005870:	e018      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005876:	3308      	adds	r3, #8
 8005878:	4618      	mov	r0, r3
 800587a:	f002 f84b 	bl	8007914 <RCCEx_PLL2_Config>
 800587e:	4603      	mov	r3, r0
 8005880:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005884:	e00e      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800588a:	332c      	adds	r3, #44	@ 0x2c
 800588c:	4618      	mov	r0, r3
 800588e:	f002 f8d9 	bl	8007a44 <RCCEx_PLL3_Config>
 8005892:	4603      	mov	r3, r0
 8005894:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005898:	e004      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80058a0:	e000      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 80058a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10d      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80058ac:	4b2b      	ldr	r3, [pc, #172]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80058ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80058be:	4927      	ldr	r1, [pc, #156]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80058c6:	e003      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80058cc:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80058d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80058dc:	613b      	str	r3, [r7, #16]
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80058e6:	460b      	mov	r3, r1
 80058e8:	4313      	orrs	r3, r2
 80058ea:	d03d      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80058ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058f8:	d00e      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80058fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058fe:	d815      	bhi.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005900:	2b00      	cmp	r3, #0
 8005902:	d017      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005904:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005908:	d110      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800590a:	4b14      	ldr	r3, [pc, #80]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800590c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590e:	4a13      	ldr	r2, [pc, #76]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005914:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005916:	e00e      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800591c:	3308      	adds	r3, #8
 800591e:	4618      	mov	r0, r3
 8005920:	f001 fff8 	bl	8007914 <RCCEx_PLL2_Config>
 8005924:	4603      	mov	r3, r0
 8005926:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800592a:	e004      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005932:	e000      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8005934:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005936:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800593a:	2b00      	cmp	r3, #0
 800593c:	d110      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800593e:	4b07      	ldr	r3, [pc, #28]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005944:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005950:	4902      	ldr	r1, [pc, #8]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005958:	e006      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 800595a:	bf00      	nop
 800595c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005960:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005964:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005970:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005974:	60bb      	str	r3, [r7, #8]
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800597e:	460b      	mov	r3, r1
 8005980:	4313      	orrs	r3, r2
 8005982:	d00c      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005984:	4b2c      	ldr	r3, [pc, #176]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005986:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800598a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800598e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005992:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005996:	4928      	ldr	r1, [pc, #160]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800599e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	2100      	movs	r1, #0
 80059a8:	6039      	str	r1, [r7, #0]
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	607b      	str	r3, [r7, #4]
 80059b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80059b4:	460b      	mov	r3, r1
 80059b6:	4313      	orrs	r3, r2
 80059b8:	d036      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80059ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80059c2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80059c6:	d00d      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80059c8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80059cc:	d811      	bhi.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80059ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059d2:	d012      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80059d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059d8:	d80b      	bhi.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00d      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80059de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e2:	d106      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059e4:	4b14      	ldr	r3, [pc, #80]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80059e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e8:	4a13      	ldr	r2, [pc, #76]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80059ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ee:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80059f0:	e004      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80059f8:	e000      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 80059fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059fc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10d      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8005a04:	4b0c      	ldr	r3, [pc, #48]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005a06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a0a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005a16:	4908      	ldr	r1, [pc, #32]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005a1e:	e003      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a20:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005a24:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005a28:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8005a32:	46bd      	mov	sp, r7
 8005a34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a38:	46020c00 	.word	0x46020c00

08005a3c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b089      	sub	sp, #36	@ 0x24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005a44:	4ba6      	ldr	r3, [pc, #664]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005a4e:	4ba4      	ldr	r3, [pc, #656]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005a58:	4ba1      	ldr	r3, [pc, #644]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5c:	0a1b      	lsrs	r3, r3, #8
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	3301      	adds	r3, #1
 8005a64:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005a66:	4b9e      	ldr	r3, [pc, #632]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6a:	091b      	lsrs	r3, r3, #4
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005a72:	4b9b      	ldr	r3, [pc, #620]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a76:	08db      	lsrs	r3, r3, #3
 8005a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	fb02 f303 	mul.w	r3, r2, r3
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d062      	beq.n	8005b5a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	f200 8081 	bhi.w	8005b9e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d024      	beq.n	8005aec <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d17a      	bne.n	8005b9e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005ce4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aba:	4b89      	ldr	r3, [pc, #548]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ace:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aea:	e08f      	b.n	8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005aec:	4b7c      	ldr	r3, [pc, #496]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005af8:	4b79      	ldr	r3, [pc, #484]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	0f1b      	lsrs	r3, r3, #28
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	e006      	b.n	8005b12 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005b04:	4b76      	ldr	r3, [pc, #472]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b0a:	041b      	lsls	r3, r3, #16
 8005b0c:	0f1b      	lsrs	r3, r3, #28
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	4a76      	ldr	r2, [pc, #472]	@ (8005cec <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	ee07 3a90 	vmov	s15, r3
 8005b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b38:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b3c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005b40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b58:	e058      	b.n	8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	ee07 3a90 	vmov	s15, r3
 8005b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b64:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ce4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005b68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b74:	ee07 3a90 	vmov	s15, r3
 8005b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b80:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005b84:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b88:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b90:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b9c:	e036      	b.n	8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005b9e:	4b50      	ldr	r3, [pc, #320]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d005      	beq.n	8005bb6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005baa:	4b4d      	ldr	r3, [pc, #308]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	0f1b      	lsrs	r3, r3, #28
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	e006      	b.n	8005bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005bb6:	4b4a      	ldr	r3, [pc, #296]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005bb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bbc:	041b      	lsls	r3, r3, #16
 8005bbe:	0f1b      	lsrs	r3, r3, #28
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	4a49      	ldr	r2, [pc, #292]	@ (8005cec <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	ee07 3a90 	vmov	s15, r3
 8005bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bea:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bee:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c0a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005c0c:	4b34      	ldr	r3, [pc, #208]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d017      	beq.n	8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005c18:	4b31      	ldr	r3, [pc, #196]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c1c:	0a5b      	lsrs	r3, r3, #9
 8005c1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005c2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c2e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005c32:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c3e:	ee17 2a90 	vmov	r2, s15
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	e002      	b.n	8005c4e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005c4e:	4b24      	ldr	r3, [pc, #144]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d017      	beq.n	8005c8a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005c5a:	4b21      	ldr	r3, [pc, #132]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c5e:	0c1b      	lsrs	r3, r3, #16
 8005c60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c64:	ee07 3a90 	vmov	s15, r3
 8005c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005c6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c70:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005c74:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c80:	ee17 2a90 	vmov	r2, s15
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	605a      	str	r2, [r3, #4]
 8005c88:	e002      	b.n	8005c90 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005c90:	4b13      	ldr	r3, [pc, #76]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d017      	beq.n	8005ccc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005c9c:	4b10      	ldr	r3, [pc, #64]	@ (8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca0:	0e1b      	lsrs	r3, r3, #24
 8005ca2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ca6:	ee07 3a90 	vmov	s15, r3
 8005caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005cae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cb2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005cb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cc2:	ee17 2a90 	vmov	r2, s15
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005cca:	e002      	b.n	8005cd2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	609a      	str	r2, [r3, #8]
}
 8005cd2:	bf00      	nop
 8005cd4:	3724      	adds	r7, #36	@ 0x24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	46020c00 	.word	0x46020c00
 8005ce4:	4b742400 	.word	0x4b742400
 8005ce8:	46000000 	.word	0x46000000
 8005cec:	08008924 	.word	0x08008924

08005cf0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b089      	sub	sp, #36	@ 0x24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005cf8:	4ba6      	ldr	r3, [pc, #664]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d00:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005d02:	4ba4      	ldr	r3, [pc, #656]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005d0c:	4ba1      	ldr	r3, [pc, #644]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d10:	0a1b      	lsrs	r3, r3, #8
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	3301      	adds	r3, #1
 8005d18:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005d1a:	4b9e      	ldr	r3, [pc, #632]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1e:	091b      	lsrs	r3, r3, #4
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005d26:	4b9b      	ldr	r3, [pc, #620]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2a:	08db      	lsrs	r3, r3, #3
 8005d2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d062      	beq.n	8005e0e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	f200 8081 	bhi.w	8005e52 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d024      	beq.n	8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d17a      	bne.n	8005e52 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d66:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d6e:	4b89      	ldr	r3, [pc, #548]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d82:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005f9c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d9e:	e08f      	b.n	8005ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005da0:	4b7c      	ldr	r3, [pc, #496]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005dac:	4b79      	ldr	r3, [pc, #484]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	0f1b      	lsrs	r3, r3, #28
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	e006      	b.n	8005dc6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005db8:	4b76      	ldr	r3, [pc, #472]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005dba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005dbe:	041b      	lsls	r3, r3, #16
 8005dc0:	0f1b      	lsrs	r3, r3, #28
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	4a76      	ldr	r2, [pc, #472]	@ (8005fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dcc:	ee07 3a90 	vmov	s15, r3
 8005dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	ee07 3a90 	vmov	s15, r3
 8005de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dec:	ed97 6a02 	vldr	s12, [r7, #8]
 8005df0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005f9c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005df4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e00:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e0c:	e058      	b.n	8005ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	ee07 3a90 	vmov	s15, r3
 8005e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e18:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005e1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e20:	4b5c      	ldr	r3, [pc, #368]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e28:	ee07 3a90 	vmov	s15, r3
 8005e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e30:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e34:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005f9c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005e38:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005e3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e44:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e50:	e036      	b.n	8005ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005e52:	4b50      	ldr	r3, [pc, #320]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d005      	beq.n	8005e6a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005e5e:	4b4d      	ldr	r3, [pc, #308]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	0f1b      	lsrs	r3, r3, #28
 8005e64:	f003 030f 	and.w	r3, r3, #15
 8005e68:	e006      	b.n	8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e70:	041b      	lsls	r3, r3, #16
 8005e72:	0f1b      	lsrs	r3, r3, #28
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	4a49      	ldr	r2, [pc, #292]	@ (8005fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	ee07 3a90 	vmov	s15, r3
 8005e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ea2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005f9c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ebe:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005ec0:	4b34      	ldr	r3, [pc, #208]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d017      	beq.n	8005efc <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ecc:	4b31      	ldr	r3, [pc, #196]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed0:	0a5b      	lsrs	r3, r3, #9
 8005ed2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005ede:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ee2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ee6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ef2:	ee17 2a90 	vmov	r2, s15
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	e002      	b.n	8005f02 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005f02:	4b24      	ldr	r3, [pc, #144]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d017      	beq.n	8005f3e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005f0e:	4b21      	ldr	r3, [pc, #132]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f12:	0c1b      	lsrs	r3, r3, #16
 8005f14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f18:	ee07 3a90 	vmov	s15, r3
 8005f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005f20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f24:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005f28:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f34:	ee17 2a90 	vmov	r2, s15
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	605a      	str	r2, [r3, #4]
 8005f3c:	e002      	b.n	8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005f44:	4b13      	ldr	r3, [pc, #76]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d017      	beq.n	8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005f50:	4b10      	ldr	r3, [pc, #64]	@ (8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f54:	0e1b      	lsrs	r3, r3, #24
 8005f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005f62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f66:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005f6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f76:	ee17 2a90 	vmov	r2, s15
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f7e:	e002      	b.n	8005f86 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	609a      	str	r2, [r3, #8]
}
 8005f86:	bf00      	nop
 8005f88:	3724      	adds	r7, #36	@ 0x24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	46020c00 	.word	0x46020c00
 8005f98:	4b742400 	.word	0x4b742400
 8005f9c:	46000000 	.word	0x46000000
 8005fa0:	08008924 	.word	0x08008924

08005fa4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b089      	sub	sp, #36	@ 0x24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005fac:	4ba6      	ldr	r3, [pc, #664]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005fb6:	4ba4      	ldr	r3, [pc, #656]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005fc0:	4ba1      	ldr	r3, [pc, #644]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc4:	0a1b      	lsrs	r3, r3, #8
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	3301      	adds	r3, #1
 8005fcc:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005fce:	4b9e      	ldr	r3, [pc, #632]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd2:	091b      	lsrs	r3, r3, #4
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005fda:	4b9b      	ldr	r3, [pc, #620]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fde:	08db      	lsrs	r3, r3, #3
 8005fe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	fb02 f303 	mul.w	r3, r2, r3
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d062      	beq.n	80060c2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	f200 8081 	bhi.w	8006106 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d024      	beq.n	8006054 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d17a      	bne.n	8006106 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800601e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006022:	4b89      	ldr	r3, [pc, #548]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006032:	ed97 6a02 	vldr	s12, [r7, #8]
 8006036:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800603a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800603e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006046:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800604a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8006052:	e08f      	b.n	8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006054:	4b7c      	ldr	r3, [pc, #496]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006060:	4b79      	ldr	r3, [pc, #484]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	0f1b      	lsrs	r3, r3, #28
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	e006      	b.n	800607a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800606c:	4b76      	ldr	r3, [pc, #472]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800606e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006072:	041b      	lsls	r3, r3, #16
 8006074:	0f1b      	lsrs	r3, r3, #28
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	4a76      	ldr	r2, [pc, #472]	@ (8006254 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800607c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006080:	ee07 3a90 	vmov	s15, r3
 8006084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	ee07 3a90 	vmov	s15, r3
 800609c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80060a4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80060a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80060b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060c0:	e058      	b.n	8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	ee07 3a90 	vmov	s15, r3
 80060c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060cc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80060d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060d4:	4b5c      	ldr	r3, [pc, #368]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80060d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060dc:	ee07 3a90 	vmov	s15, r3
 80060e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80060e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80060e8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80060ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80060f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80060f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80060fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006100:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006104:	e036      	b.n	8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006106:	4b50      	ldr	r3, [pc, #320]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d005      	beq.n	800611e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8006112:	4b4d      	ldr	r3, [pc, #308]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	0f1b      	lsrs	r3, r3, #28
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	e006      	b.n	800612c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800611e:	4b4a      	ldr	r3, [pc, #296]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006124:	041b      	lsls	r3, r3, #16
 8006126:	0f1b      	lsrs	r3, r3, #28
 8006128:	f003 030f 	and.w	r3, r3, #15
 800612c:	4a49      	ldr	r2, [pc, #292]	@ (8006254 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800612e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	ee07 3a90 	vmov	s15, r3
 8006140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006152:	ed97 6a02 	vldr	s12, [r7, #8]
 8006156:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800615a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800615e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006166:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800616a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006172:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006174:	4b34      	ldr	r3, [pc, #208]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d017      	beq.n	80061b0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006180:	4b31      	ldr	r3, [pc, #196]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006184:	0a5b      	lsrs	r3, r3, #9
 8006186:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006192:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006196:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800619a:	edd7 6a07 	vldr	s13, [r7, #28]
 800619e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a6:	ee17 2a90 	vmov	r2, s15
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	e002      	b.n	80061b6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80061b6:	4b24      	ldr	r3, [pc, #144]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d017      	beq.n	80061f2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80061c2:	4b21      	ldr	r3, [pc, #132]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c6:	0c1b      	lsrs	r3, r3, #16
 80061c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061cc:	ee07 3a90 	vmov	s15, r3
 80061d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80061d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061d8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80061dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80061e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061e8:	ee17 2a90 	vmov	r2, s15
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	605a      	str	r2, [r3, #4]
 80061f0:	e002      	b.n	80061f8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80061f8:	4b13      	ldr	r3, [pc, #76]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d017      	beq.n	8006234 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006204:	4b10      	ldr	r3, [pc, #64]	@ (8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006208:	0e1b      	lsrs	r3, r3, #24
 800620a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800620e:	ee07 3a90 	vmov	s15, r3
 8006212:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800621a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800621e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800622a:	ee17 2a90 	vmov	r2, s15
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006232:	e002      	b.n	800623a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	609a      	str	r2, [r3, #8]
}
 800623a:	bf00      	nop
 800623c:	3724      	adds	r7, #36	@ 0x24
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	46020c00 	.word	0x46020c00
 800624c:	4b742400 	.word	0x4b742400
 8006250:	46000000 	.word	0x46000000
 8006254:	08008924 	.word	0x08008924

08006258 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08e      	sub	sp, #56	@ 0x38
 800625c:	af00      	add	r7, sp, #0
 800625e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006262:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006266:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800626a:	430b      	orrs	r3, r1
 800626c:	d145      	bne.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800626e:	4ba7      	ldr	r3, [pc, #668]	@ (800650c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006274:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006278:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800627a:	4ba4      	ldr	r3, [pc, #656]	@ (800650c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800627c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b02      	cmp	r3, #2
 8006286:	d108      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800628e:	d104      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006290:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006294:	637b      	str	r3, [r7, #52]	@ 0x34
 8006296:	f001 bb31 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800629a:	4b9c      	ldr	r3, [pc, #624]	@ (800650c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800629c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062a8:	d114      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80062aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062b0:	d110      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80062b2:	4b96      	ldr	r3, [pc, #600]	@ (800650c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80062b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062c0:	d103      	bne.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80062c2:	23fa      	movs	r3, #250	@ 0xfa
 80062c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80062c6:	f001 bb19 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80062ca:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80062ce:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80062d0:	f001 bb14 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80062d4:	4b8d      	ldr	r3, [pc, #564]	@ (800650c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062e0:	d107      	bne.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80062e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062e8:	d103      	bne.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80062ea:	4b89      	ldr	r3, [pc, #548]	@ (8006510 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80062ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ee:	f001 bb05 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80062f6:	f001 bb01 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80062fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062fe:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006302:	430b      	orrs	r3, r1
 8006304:	d151      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006306:	4b81      	ldr	r3, [pc, #516]	@ (800650c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006308:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800630c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006310:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006314:	2b80      	cmp	r3, #128	@ 0x80
 8006316:	d035      	beq.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631a:	2b80      	cmp	r3, #128	@ 0x80
 800631c:	d841      	bhi.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800631e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006320:	2b60      	cmp	r3, #96	@ 0x60
 8006322:	d02a      	beq.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	2b60      	cmp	r3, #96	@ 0x60
 8006328:	d83b      	bhi.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800632a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632c:	2b40      	cmp	r3, #64	@ 0x40
 800632e:	d009      	beq.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006332:	2b40      	cmp	r3, #64	@ 0x40
 8006334:	d835      	bhi.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00c      	beq.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800633c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633e:	2b20      	cmp	r3, #32
 8006340:	d012      	beq.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006342:	e02e      	b.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006344:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff fb77 	bl	8005a3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800634e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006350:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006352:	f001 bad3 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006356:	f107 0318 	add.w	r3, r7, #24
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff fcc8 	bl	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006364:	f001 baca 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006368:	f107 030c 	add.w	r3, r7, #12
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff fe19 	bl	8005fa4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006376:	f001 bac1 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800637a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800637e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006380:	f001 babc 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006384:	4b61      	ldr	r3, [pc, #388]	@ (800650c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800638c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006390:	d103      	bne.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006392:	4b60      	ldr	r3, [pc, #384]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006394:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006396:	f001 bab1 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800639e:	f001 baad 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063a6:	f001 baa9 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80063aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ae:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80063b2:	430b      	orrs	r3, r1
 80063b4:	d158      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80063b6:	4b55      	ldr	r3, [pc, #340]	@ (800650c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80063c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80063c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063c8:	d03b      	beq.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80063ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d0:	d846      	bhi.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80063d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063d8:	d02e      	beq.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80063da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063e0:	d83e      	bhi.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80063e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e8:	d00b      	beq.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80063ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063f0:	d836      	bhi.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80063f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00d      	beq.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80063f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063fe:	d012      	beq.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006400:	e02e      	b.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff fb18 	bl	8005a3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800640c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006410:	f001 ba74 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006414:	f107 0318 	add.w	r3, r7, #24
 8006418:	4618      	mov	r0, r3
 800641a:	f7ff fc69 	bl	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006422:	f001 ba6b 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006426:	f107 030c 	add.w	r3, r7, #12
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff fdba 	bl	8005fa4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006434:	f001 ba62 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006438:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800643c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800643e:	f001 ba5d 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006442:	4b32      	ldr	r3, [pc, #200]	@ (800650c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800644a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800644e:	d103      	bne.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006450:	4b30      	ldr	r3, [pc, #192]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006452:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006454:	f001 ba52 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800645c:	f001 ba4e 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006464:	f001 ba4a 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800646c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006470:	430b      	orrs	r3, r1
 8006472:	d126      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006474:	4b25      	ldr	r3, [pc, #148]	@ (800650c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006476:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800647a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800647e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006480:	4b22      	ldr	r3, [pc, #136]	@ (800650c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800648c:	d106      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006490:	2b00      	cmp	r3, #0
 8006492:	d103      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006494:	4b1f      	ldr	r3, [pc, #124]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006496:	637b      	str	r3, [r7, #52]	@ 0x34
 8006498:	f001 ba30 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800649c:	4b1b      	ldr	r3, [pc, #108]	@ (800650c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064a8:	d107      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064b0:	d103      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80064b2:	4b19      	ldr	r3, [pc, #100]	@ (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80064b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064b6:	f001 ba21 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80064be:	f001 ba1d 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80064c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064c6:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80064ca:	430b      	orrs	r3, r1
 80064cc:	d16e      	bne.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80064ce:	4b0f      	ldr	r3, [pc, #60]	@ (800650c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80064d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064d4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80064d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80064da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064dc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80064e0:	d03d      	beq.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80064e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80064e8:	d85c      	bhi.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80064ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064f0:	d014      	beq.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80064f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064f8:	d854      	bhi.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80064fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01f      	beq.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006502:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006506:	d012      	beq.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006508:	e04c      	b.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800650a:	bf00      	nop
 800650c:	46020c00 	.word	0x46020c00
 8006510:	0007a120 	.word	0x0007a120
 8006514:	00f42400 	.word	0x00f42400
 8006518:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800651c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff fa8b 	bl	8005a3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006528:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800652a:	f001 b9e7 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800652e:	f107 0318 	add.w	r3, r7, #24
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fbdc 	bl	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800653c:	f001 b9de 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006540:	4ba7      	ldr	r3, [pc, #668]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800654c:	d103      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800654e:	4ba5      	ldr	r3, [pc, #660]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006550:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006552:	f001 b9d3 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800655a:	f001 b9cf 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800655e:	4ba0      	ldr	r3, [pc, #640]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b20      	cmp	r3, #32
 8006568:	d118      	bne.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800656a:	4b9d      	ldr	r3, [pc, #628]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d005      	beq.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006576:	4b9a      	ldr	r3, [pc, #616]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	0e1b      	lsrs	r3, r3, #24
 800657c:	f003 030f 	and.w	r3, r3, #15
 8006580:	e006      	b.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006582:	4b97      	ldr	r3, [pc, #604]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006584:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006588:	041b      	lsls	r3, r3, #16
 800658a:	0e1b      	lsrs	r3, r3, #24
 800658c:	f003 030f 	and.w	r3, r3, #15
 8006590:	4a95      	ldr	r2, [pc, #596]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006596:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006598:	f001 b9b0 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065a0:	f001 b9ac 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065a8:	f001 b9a8 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80065ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065b0:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80065b4:	430b      	orrs	r3, r1
 80065b6:	d17f      	bne.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80065b8:	4b89      	ldr	r3, [pc, #548]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80065ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80065be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065c2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80065c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d165      	bne.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80065ca:	4b85      	ldr	r3, [pc, #532]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80065cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065d0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80065d4:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80065d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80065dc:	d034      	beq.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 80065de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80065e4:	d853      	bhi.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80065e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065ec:	d00b      	beq.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065f4:	d84b      	bhi.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80065f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d016      	beq.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006602:	d009      	beq.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006604:	e043      	b.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800660a:	4618      	mov	r0, r3
 800660c:	f7ff fa16 	bl	8005a3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006612:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006614:	f001 b972 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006618:	f107 0318 	add.w	r3, r7, #24
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fb67 	bl	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006626:	f001 b969 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800662a:	4b6d      	ldr	r3, [pc, #436]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006636:	d103      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006638:	4b6a      	ldr	r3, [pc, #424]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800663a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800663c:	f001 b95e 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006644:	f001 b95a 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006648:	4b65      	ldr	r3, [pc, #404]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b20      	cmp	r3, #32
 8006652:	d118      	bne.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006654:	4b62      	ldr	r3, [pc, #392]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006660:	4b5f      	ldr	r3, [pc, #380]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	0e1b      	lsrs	r3, r3, #24
 8006666:	f003 030f 	and.w	r3, r3, #15
 800666a:	e006      	b.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800666c:	4b5c      	ldr	r3, [pc, #368]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800666e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006672:	041b      	lsls	r3, r3, #16
 8006674:	0e1b      	lsrs	r3, r3, #24
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	4a5b      	ldr	r2, [pc, #364]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800667c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006680:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006682:	f001 b93b 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800668a:	f001 b937 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006692:	f001 b933 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006698:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800669c:	d108      	bne.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800669e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7ff f9ca 	bl	8005a3c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80066a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ac:	f001 b926 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80066b4:	f001 b922 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80066b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066bc:	1e51      	subs	r1, r2, #1
 80066be:	430b      	orrs	r3, r1
 80066c0:	d136      	bne.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80066c2:	4b47      	ldr	r3, [pc, #284]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80066c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066c8:	f003 0303 	and.w	r3, r3, #3
 80066cc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d104      	bne.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80066d4:	f7fe fa48 	bl	8004b68 <HAL_RCC_GetPCLK2Freq>
 80066d8:	6378      	str	r0, [r7, #52]	@ 0x34
 80066da:	f001 b90f 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80066de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d104      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80066e4:	f7fe f910 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 80066e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80066ea:	f001 b907 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80066ee:	4b3c      	ldr	r3, [pc, #240]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066fa:	d106      	bne.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80066fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d103      	bne.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8006702:	4b3a      	ldr	r3, [pc, #232]	@ (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006704:	637b      	str	r3, [r7, #52]	@ 0x34
 8006706:	f001 b8f9 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800670a:	4b35      	ldr	r3, [pc, #212]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800670c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b02      	cmp	r3, #2
 8006716:	d107      	bne.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671a:	2b03      	cmp	r3, #3
 800671c:	d104      	bne.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800671e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006722:	637b      	str	r3, [r7, #52]	@ 0x34
 8006724:	f001 b8ea 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	637b      	str	r3, [r7, #52]	@ 0x34
 800672c:	f001 b8e6 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006730:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006734:	1e91      	subs	r1, r2, #2
 8006736:	430b      	orrs	r3, r1
 8006738:	d136      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800673a:	4b29      	ldr	r3, [pc, #164]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800673c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006740:	f003 030c 	and.w	r3, r3, #12
 8006744:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006748:	2b00      	cmp	r3, #0
 800674a:	d104      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800674c:	f7fe f9f8 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 8006750:	6378      	str	r0, [r7, #52]	@ 0x34
 8006752:	f001 b8d3 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006758:	2b04      	cmp	r3, #4
 800675a:	d104      	bne.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800675c:	f7fe f8d4 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8006760:	6378      	str	r0, [r7, #52]	@ 0x34
 8006762:	f001 b8cb 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006766:	4b1e      	ldr	r3, [pc, #120]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800676e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006772:	d106      	bne.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006776:	2b08      	cmp	r3, #8
 8006778:	d103      	bne.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800677a:	4b1c      	ldr	r3, [pc, #112]	@ (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800677c:	637b      	str	r3, [r7, #52]	@ 0x34
 800677e:	f001 b8bd 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006782:	4b17      	ldr	r3, [pc, #92]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	2b02      	cmp	r3, #2
 800678e:	d107      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006792:	2b0c      	cmp	r3, #12
 8006794:	d104      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800679a:	637b      	str	r3, [r7, #52]	@ 0x34
 800679c:	f001 b8ae 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80067a4:	f001 b8aa 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80067a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067ac:	1f11      	subs	r1, r2, #4
 80067ae:	430b      	orrs	r3, r1
 80067b0:	d13f      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80067b2:	4b0b      	ldr	r3, [pc, #44]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80067b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80067bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80067be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d104      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80067c4:	f7fe f9bc 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 80067c8:	6378      	str	r0, [r7, #52]	@ 0x34
 80067ca:	f001 b897 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80067ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d0:	2b10      	cmp	r3, #16
 80067d2:	d10d      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80067d4:	f7fe f898 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 80067d8:	6378      	str	r0, [r7, #52]	@ 0x34
 80067da:	f001 b88f 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80067de:	bf00      	nop
 80067e0:	46020c00 	.word	0x46020c00
 80067e4:	02dc6c00 	.word	0x02dc6c00
 80067e8:	08008924 	.word	0x08008924
 80067ec:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80067f0:	4ba8      	ldr	r3, [pc, #672]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067fc:	d106      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80067fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006800:	2b20      	cmp	r3, #32
 8006802:	d103      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8006804:	4ba4      	ldr	r3, [pc, #656]	@ (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006806:	637b      	str	r3, [r7, #52]	@ 0x34
 8006808:	f001 b878 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800680c:	4ba1      	ldr	r3, [pc, #644]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800680e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b02      	cmp	r3, #2
 8006818:	d107      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800681a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681c:	2b30      	cmp	r3, #48	@ 0x30
 800681e:	d104      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006820:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006824:	637b      	str	r3, [r7, #52]	@ 0x34
 8006826:	f001 b869 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	637b      	str	r3, [r7, #52]	@ 0x34
 800682e:	f001 b865 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006836:	f1a2 0108 	sub.w	r1, r2, #8
 800683a:	430b      	orrs	r3, r1
 800683c:	d136      	bne.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800683e:	4b95      	ldr	r3, [pc, #596]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006844:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006848:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	2b00      	cmp	r3, #0
 800684e:	d104      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006850:	f7fe f976 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 8006854:	6378      	str	r0, [r7, #52]	@ 0x34
 8006856:	f001 b851 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	2b40      	cmp	r3, #64	@ 0x40
 800685e:	d104      	bne.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006860:	f7fe f852 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8006864:	6378      	str	r0, [r7, #52]	@ 0x34
 8006866:	f001 b849 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800686a:	4b8a      	ldr	r3, [pc, #552]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006876:	d106      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687a:	2b80      	cmp	r3, #128	@ 0x80
 800687c:	d103      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800687e:	4b86      	ldr	r3, [pc, #536]	@ (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006880:	637b      	str	r3, [r7, #52]	@ 0x34
 8006882:	f001 b83b 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006886:	4b83      	ldr	r3, [pc, #524]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b02      	cmp	r3, #2
 8006892:	d107      	bne.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006896:	2bc0      	cmp	r3, #192	@ 0xc0
 8006898:	d104      	bne.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800689a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800689e:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a0:	f001 b82c 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a8:	f001 b828 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80068ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068b0:	f1a2 0110 	sub.w	r1, r2, #16
 80068b4:	430b      	orrs	r3, r1
 80068b6:	d139      	bne.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80068b8:	4b76      	ldr	r3, [pc, #472]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80068c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d104      	bne.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80068ca:	f7fe f939 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 80068ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80068d0:	f001 b814 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80068d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068da:	d104      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068dc:	f7fe f814 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 80068e0:	6378      	str	r0, [r7, #52]	@ 0x34
 80068e2:	f001 b80b 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80068e6:	4b6b      	ldr	r3, [pc, #428]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068f2:	d107      	bne.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80068f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068fa:	d103      	bne.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80068fc:	4b66      	ldr	r3, [pc, #408]	@ (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80068fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006900:	f000 bffc 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006904:	4b63      	ldr	r3, [pc, #396]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006906:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b02      	cmp	r3, #2
 8006910:	d108      	bne.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8006912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006914:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006918:	d104      	bne.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800691a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800691e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006920:	f000 bfec 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
 8006928:	f000 bfe8 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800692c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006930:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8006934:	430b      	orrs	r3, r1
 8006936:	d139      	bne.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006938:	4b56      	ldr	r3, [pc, #344]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800693a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800693e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006942:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006946:	2b00      	cmp	r3, #0
 8006948:	d104      	bne.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800694a:	f7fe f8f9 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 800694e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006950:	f000 bfd4 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8006954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800695a:	d104      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800695c:	f7fd ffd4 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8006960:	6378      	str	r0, [r7, #52]	@ 0x34
 8006962:	f000 bfcb 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006966:	4b4b      	ldr	r3, [pc, #300]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800696e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006972:	d107      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006976:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800697a:	d103      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800697c:	4b46      	ldr	r3, [pc, #280]	@ (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800697e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006980:	f000 bfbc 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006984:	4b43      	ldr	r3, [pc, #268]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006986:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b02      	cmp	r3, #2
 8006990:	d108      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8006992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006994:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006998:	d104      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800699a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800699e:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a0:	f000 bfac 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a8:	f000 bfa8 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80069ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069b0:	f1a2 0120 	sub.w	r1, r2, #32
 80069b4:	430b      	orrs	r3, r1
 80069b6:	d158      	bne.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80069b8:	4b36      	ldr	r3, [pc, #216]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80069c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d104      	bne.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80069ca:	f7fe f8e1 	bl	8004b90 <HAL_RCC_GetPCLK3Freq>
 80069ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80069d0:	f000 bf94 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80069d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d104      	bne.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069da:	f7fd ff95 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 80069de:	6378      	str	r0, [r7, #52]	@ 0x34
 80069e0:	f000 bf8c 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80069e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069f0:	d106      	bne.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80069f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d103      	bne.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 80069f8:	4b27      	ldr	r3, [pc, #156]	@ (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80069fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80069fc:	f000 bf7e 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006a00:	4b24      	ldr	r3, [pc, #144]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d107      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	d104      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8006a14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a1a:	f000 bf6f 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d11b      	bne.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d118      	bne.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a30:	4b18      	ldr	r3, [pc, #96]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d005      	beq.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8006a3c:	4b15      	ldr	r3, [pc, #84]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	0e1b      	lsrs	r3, r3, #24
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	e006      	b.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8006a48:	4b12      	ldr	r3, [pc, #72]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a4e:	041b      	lsls	r3, r3, #16
 8006a50:	0e1b      	lsrs	r3, r3, #24
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	4a11      	ldr	r2, [pc, #68]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a5e:	f000 bf4d 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a66:	f000 bf49 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a6e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006a72:	430b      	orrs	r3, r1
 8006a74:	d172      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006a76:	4b07      	ldr	r3, [pc, #28]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a7c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006a80:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a88:	d10a      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a8a:	f7fd ff3d 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8006a8e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a90:	f000 bf34 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8006a94:	46020c00 	.word	0x46020c00
 8006a98:	00f42400 	.word	0x00f42400
 8006a9c:	08008924 	.word	0x08008924
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aa6:	d108      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aa8:	f107 0318 	add.w	r3, r7, #24
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7ff f91f 	bl	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab6:	f000 bf21 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d104      	bne.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006ac0:	f7fe f824 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8006ac4:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ac6:	f000 bf19 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006ad0:	d122      	bne.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ad2:	4bb0      	ldr	r3, [pc, #704]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0320 	and.w	r3, r3, #32
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	d118      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ade:	4bad      	ldr	r3, [pc, #692]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8006aea:	4baa      	ldr	r3, [pc, #680]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	0e1b      	lsrs	r3, r3, #24
 8006af0:	f003 030f 	and.w	r3, r3, #15
 8006af4:	e006      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8006af6:	4ba7      	ldr	r3, [pc, #668]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006af8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006afc:	041b      	lsls	r3, r3, #16
 8006afe:	0e1b      	lsrs	r3, r3, #24
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	4aa4      	ldr	r2, [pc, #656]	@ (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b0c:	f000 bef6 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b14:	f000 bef2 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006b18:	4b9e      	ldr	r3, [pc, #632]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b24:	d107      	bne.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b2c:	d103      	bne.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8006b2e:	4b9b      	ldr	r3, [pc, #620]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8006b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b32:	f000 bee3 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006b36:	4b97      	ldr	r3, [pc, #604]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b42:	d107      	bne.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8006b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b4a:	d103      	bne.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8006b4c:	4b93      	ldr	r3, [pc, #588]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8006b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b50:	f000 bed4 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b58:	f000 bed0 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b60:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006b64:	430b      	orrs	r3, r1
 8006b66:	d158      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006b68:	4b8a      	ldr	r3, [pc, #552]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006b6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	d84b      	bhi.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8006b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006bb9 	.word	0x08006bb9
 8006b84:	08006b95 	.word	0x08006b95
 8006b88:	08006ba7 	.word	0x08006ba7
 8006b8c:	08006bc3 	.word	0x08006bc3
 8006b90:	08006bcd 	.word	0x08006bcd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fe ff4f 	bl	8005a3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ba2:	f000 beab 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ba6:	f107 030c 	add.w	r3, r7, #12
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7ff f9fa 	bl	8005fa4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bb4:	f000 bea2 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006bb8:	f7fd ffa8 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8006bbc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006bbe:	f000 be9d 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006bc2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006bc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bc8:	f000 be98 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006bcc:	4b71      	ldr	r3, [pc, #452]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	d118      	bne.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bd8:	4b6e      	ldr	r3, [pc, #440]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d005      	beq.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006be4:	4b6b      	ldr	r3, [pc, #428]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	0e1b      	lsrs	r3, r3, #24
 8006bea:	f003 030f 	and.w	r3, r3, #15
 8006bee:	e006      	b.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8006bf0:	4b68      	ldr	r3, [pc, #416]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006bf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bf6:	041b      	lsls	r3, r3, #16
 8006bf8:	0e1b      	lsrs	r3, r3, #24
 8006bfa:	f003 030f 	and.w	r3, r3, #15
 8006bfe:	4a66      	ldr	r2, [pc, #408]	@ (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c04:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c06:	f000 be79 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c0e:	f000 be75 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c16:	f000 be71 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006c1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c1e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006c22:	430b      	orrs	r3, r1
 8006c24:	d167      	bne.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006c26:	4b5b      	ldr	r3, [pc, #364]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c2c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006c30:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c38:	d036      	beq.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c40:	d855      	bhi.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c48:	d029      	beq.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c50:	d84d      	bhi.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c58:	d013      	beq.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c60:	d845      	bhi.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d015      	beq.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8006c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c6e:	d13e      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fe fee1 	bl	8005a3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c7e:	f000 be3d 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c82:	f107 030c 	add.w	r3, r7, #12
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff f98c 	bl	8005fa4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c90:	f000 be34 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006c94:	f7fd ff3a 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8006c98:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006c9a:	f000 be2f 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006c9e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006ca2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ca4:	f000 be2a 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ca8:	4b3a      	ldr	r3, [pc, #232]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b20      	cmp	r3, #32
 8006cb2:	d118      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cb4:	4b37      	ldr	r3, [pc, #220]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8006cc0:	4b34      	ldr	r3, [pc, #208]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	0e1b      	lsrs	r3, r3, #24
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	e006      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006ccc:	4b31      	ldr	r3, [pc, #196]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cd2:	041b      	lsls	r3, r3, #16
 8006cd4:	0e1b      	lsrs	r3, r3, #24
 8006cd6:	f003 030f 	and.w	r3, r3, #15
 8006cda:	4a2f      	ldr	r2, [pc, #188]	@ (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ce0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ce2:	f000 be0b 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cea:	f000 be07 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cf2:	f000 be03 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cfa:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006cfe:	430b      	orrs	r3, r1
 8006d00:	d152      	bne.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006d02:	4b24      	ldr	r3, [pc, #144]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006d0c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d104      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d14:	f7fd ff14 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 8006d18:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d1a:	f000 bdef 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d24:	d104      	bne.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d26:	f7fd fdef 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8006d2a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d2c:	f000 bde6 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006d30:	4b18      	ldr	r3, [pc, #96]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d3c:	d107      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d44:	d103      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8006d46:	4b15      	ldr	r3, [pc, #84]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8006d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d4a:	f000 bdd7 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006d4e:	4b11      	ldr	r3, [pc, #68]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0320 	and.w	r3, r3, #32
 8006d56:	2b20      	cmp	r3, #32
 8006d58:	d122      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d60:	d11e      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d62:	4b0c      	ldr	r3, [pc, #48]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8006d6e:	4b09      	ldr	r3, [pc, #36]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	0e1b      	lsrs	r3, r3, #24
 8006d74:	f003 030f 	and.w	r3, r3, #15
 8006d78:	e006      	b.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8006d7a:	4b06      	ldr	r3, [pc, #24]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006d7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d80:	041b      	lsls	r3, r3, #16
 8006d82:	0e1b      	lsrs	r3, r3, #24
 8006d84:	f003 030f 	and.w	r3, r3, #15
 8006d88:	4a03      	ldr	r2, [pc, #12]	@ (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d90:	f000 bdb4 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8006d94:	46020c00 	.word	0x46020c00
 8006d98:	08008924 	.word	0x08008924
 8006d9c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006da4:	f000 bdaa 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dac:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006db0:	430b      	orrs	r3, r1
 8006db2:	d14c      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006db4:	4ba8      	ldr	r3, [pc, #672]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006dbe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d104      	bne.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006dc6:	f7fd febb 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 8006dca:	6378      	str	r0, [r7, #52]	@ 0x34
 8006dcc:	f000 bd96 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dd6:	d104      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006dd8:	f7fd fd96 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8006ddc:	6378      	str	r0, [r7, #52]	@ 0x34
 8006dde:	f000 bd8d 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006de2:	4b9d      	ldr	r3, [pc, #628]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dee:	d107      	bne.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8006df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006df6:	d103      	bne.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 8006df8:	4b98      	ldr	r3, [pc, #608]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dfc:	f000 bd7e 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006e00:	4b95      	ldr	r3, [pc, #596]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0320 	and.w	r3, r3, #32
 8006e08:	2b20      	cmp	r3, #32
 8006e0a:	d11c      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e12:	d118      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e14:	4b90      	ldr	r3, [pc, #576]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8006e20:	4b8d      	ldr	r3, [pc, #564]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	0e1b      	lsrs	r3, r3, #24
 8006e26:	f003 030f 	and.w	r3, r3, #15
 8006e2a:	e006      	b.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8006e2c:	4b8a      	ldr	r3, [pc, #552]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006e2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e32:	041b      	lsls	r3, r3, #16
 8006e34:	0e1b      	lsrs	r3, r3, #24
 8006e36:	f003 030f 	and.w	r3, r3, #15
 8006e3a:	4a89      	ldr	r2, [pc, #548]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8006e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e42:	f000 bd5b 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e4a:	f000 bd57 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e52:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006e56:	430b      	orrs	r3, r1
 8006e58:	d158      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006e5a:	4b7f      	ldr	r3, [pc, #508]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e60:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006e64:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e68:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e6a:	d028      	beq.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e70:	d848      	bhi.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e74:	2b80      	cmp	r3, #128	@ 0x80
 8006e76:	d00e      	beq.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7a:	2b80      	cmp	r3, #128	@ 0x80
 8006e7c:	d842      	bhi.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8006e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e86:	2b40      	cmp	r3, #64	@ 0x40
 8006e88:	d014      	beq.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8006e8a:	e03b      	b.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006e8c:	f7fd fe80 	bl	8004b90 <HAL_RCC_GetPCLK3Freq>
 8006e90:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006e92:	f000 bd33 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e96:	4b70      	ldr	r3, [pc, #448]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ea2:	d103      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8006ea4:	4b6d      	ldr	r3, [pc, #436]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006ea6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ea8:	f000 bd28 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006eb0:	f000 bd24 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006eb4:	f7fd fd28 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8006eb8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006eba:	f000 bd1f 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ebe:	4b66      	ldr	r3, [pc, #408]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0320 	and.w	r3, r3, #32
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	d118      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006eca:	4b63      	ldr	r3, [pc, #396]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d005      	beq.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 8006ed6:	4b60      	ldr	r3, [pc, #384]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	0e1b      	lsrs	r3, r3, #24
 8006edc:	f003 030f 	and.w	r3, r3, #15
 8006ee0:	e006      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8006ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006ee4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ee8:	041b      	lsls	r3, r3, #16
 8006eea:	0e1b      	lsrs	r3, r3, #24
 8006eec:	f003 030f 	and.w	r3, r3, #15
 8006ef0:	4a5b      	ldr	r2, [pc, #364]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8006ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ef6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ef8:	f000 bd00 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f00:	f000 bcfc 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f08:	f000 bcf8 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f10:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006f14:	430b      	orrs	r3, r1
 8006f16:	d14c      	bne.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006f18:	4b4f      	ldr	r3, [pc, #316]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f1e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006f22:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d104      	bne.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f2a:	f7fd fe09 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 8006f2e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f30:	f000 bce4 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f3a:	d104      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f3c:	f7fd fce4 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8006f40:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f42:	f000 bcdb 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006f46:	4b44      	ldr	r3, [pc, #272]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f52:	d107      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f5a:	d103      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8006f5c:	4b3f      	ldr	r3, [pc, #252]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f60:	f000 bccc 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006f64:	4b3c      	ldr	r3, [pc, #240]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0320 	and.w	r3, r3, #32
 8006f6c:	2b20      	cmp	r3, #32
 8006f6e:	d11c      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8006f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f72:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006f76:	d118      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f78:	4b37      	ldr	r3, [pc, #220]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8006f84:	4b34      	ldr	r3, [pc, #208]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	0e1b      	lsrs	r3, r3, #24
 8006f8a:	f003 030f 	and.w	r3, r3, #15
 8006f8e:	e006      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006f90:	4b31      	ldr	r3, [pc, #196]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006f92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f96:	041b      	lsls	r3, r3, #16
 8006f98:	0e1b      	lsrs	r3, r3, #24
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	4a30      	ldr	r2, [pc, #192]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8006fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa6:	f000 bca9 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fae:	f000 bca5 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8006fb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fb6:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 8006fba:	430b      	orrs	r3, r1
 8006fbc:	d152      	bne.n	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8006fbe:	4b26      	ldr	r3, [pc, #152]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006fc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fc4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006fc8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8006fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d104      	bne.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006fd0:	f7fd fdb6 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 8006fd4:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fd6:	f000 bc91 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 8006fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fe0:	d104      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006fe2:	f7fd fc91 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8006fe6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fe8:	f000 bc88 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8006fec:	4b1a      	ldr	r3, [pc, #104]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ff8:	d107      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007000:	d103      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8007002:	4b16      	ldr	r3, [pc, #88]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007004:	637b      	str	r3, [r7, #52]	@ 0x34
 8007006:	f000 bc79 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800700a:	4b13      	ldr	r3, [pc, #76]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0320 	and.w	r3, r3, #32
 8007012:	2b20      	cmp	r3, #32
 8007014:	d11c      	bne.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8007016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007018:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800701c:	d118      	bne.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800701e:	4b0e      	ldr	r3, [pc, #56]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d005      	beq.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800702a:	4b0b      	ldr	r3, [pc, #44]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	0e1b      	lsrs	r3, r3, #24
 8007030:	f003 030f 	and.w	r3, r3, #15
 8007034:	e006      	b.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 8007036:	4b08      	ldr	r3, [pc, #32]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007038:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800703c:	041b      	lsls	r3, r3, #16
 800703e:	0e1b      	lsrs	r3, r3, #24
 8007040:	f003 030f 	and.w	r3, r3, #15
 8007044:	4a06      	ldr	r2, [pc, #24]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800704a:	637b      	str	r3, [r7, #52]	@ 0x34
 800704c:	f000 bc56 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	637b      	str	r3, [r7, #52]	@ 0x34
 8007054:	f000 bc52 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007058:	46020c00 	.word	0x46020c00
 800705c:	00f42400 	.word	0x00f42400
 8007060:	08008924 	.word	0x08008924
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8007064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007068:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800706c:	430b      	orrs	r3, r1
 800706e:	d14a      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8007070:	4ba5      	ldr	r3, [pc, #660]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007072:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007076:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800707a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800707c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707e:	2b00      	cmp	r3, #0
 8007080:	d104      	bne.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007082:	f7fd fd5d 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 8007086:	6378      	str	r0, [r7, #52]	@ 0x34
 8007088:	f000 bc38 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800708c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007092:	d104      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007094:	f7fd fc38 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8007098:	6378      	str	r0, [r7, #52]	@ 0x34
 800709a:	f000 bc2f 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800709e:	4b9a      	ldr	r3, [pc, #616]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070aa:	d107      	bne.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070b2:	d103      	bne.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 80070b4:	4b95      	ldr	r3, [pc, #596]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80070b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070b8:	f000 bc20 	b.w	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 80070bc:	4b92      	ldr	r3, [pc, #584]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0320 	and.w	r3, r3, #32
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d11b      	bne.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 80070c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80070ce:	d117      	bne.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070d0:	4b8d      	ldr	r3, [pc, #564]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 80070dc:	4b8a      	ldr	r3, [pc, #552]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	0e1b      	lsrs	r3, r3, #24
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	e006      	b.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 80070e8:	4b87      	ldr	r3, [pc, #540]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80070ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070ee:	041b      	lsls	r3, r3, #16
 80070f0:	0e1b      	lsrs	r3, r3, #24
 80070f2:	f003 030f 	and.w	r3, r3, #15
 80070f6:	4a86      	ldr	r2, [pc, #536]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80070f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80070fe:	e3fd      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	637b      	str	r3, [r7, #52]	@ 0x34
 8007104:	e3fa      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800710a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800710e:	430b      	orrs	r3, r1
 8007110:	d164      	bne.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007112:	4b7d      	ldr	r3, [pc, #500]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007118:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800711c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800711e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007120:	2b00      	cmp	r3, #0
 8007122:	d120      	bne.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007124:	4b78      	ldr	r3, [pc, #480]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0320 	and.w	r3, r3, #32
 800712c:	2b20      	cmp	r3, #32
 800712e:	d117      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007130:	4b75      	ldr	r3, [pc, #468]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d005      	beq.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 800713c:	4b72      	ldr	r3, [pc, #456]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	0e1b      	lsrs	r3, r3, #24
 8007142:	f003 030f 	and.w	r3, r3, #15
 8007146:	e006      	b.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 8007148:	4b6f      	ldr	r3, [pc, #444]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800714a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800714e:	041b      	lsls	r3, r3, #16
 8007150:	0e1b      	lsrs	r3, r3, #24
 8007152:	f003 030f 	and.w	r3, r3, #15
 8007156:	4a6e      	ldr	r2, [pc, #440]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800715c:	637b      	str	r3, [r7, #52]	@ 0x34
 800715e:	e3cd      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	637b      	str	r3, [r7, #52]	@ 0x34
 8007164:	e3ca      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007166:	4b68      	ldr	r3, [pc, #416]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800716c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007170:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007174:	d112      	bne.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 8007176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800717c:	d10e      	bne.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800717e:	4b62      	ldr	r3, [pc, #392]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007188:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800718c:	d102      	bne.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 800718e:	23fa      	movs	r3, #250	@ 0xfa
 8007190:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007192:	e3b3      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8007194:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007198:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800719a:	e3af      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800719c:	4b5a      	ldr	r3, [pc, #360]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071a8:	d106      	bne.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80071aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071b0:	d102      	bne.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 80071b2:	4b56      	ldr	r3, [pc, #344]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80071b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80071b6:	e3a1      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80071b8:	4b53      	ldr	r3, [pc, #332]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80071ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d107      	bne.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 80071c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071cc:	d103      	bne.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 80071ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80071d4:	e392      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80071da:	e38f      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80071dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071e0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80071e4:	430b      	orrs	r3, r1
 80071e6:	d164      	bne.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80071e8:	4b47      	ldr	r3, [pc, #284]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80071ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80071ee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80071f2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d120      	bne.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80071fa:	4b43      	ldr	r3, [pc, #268]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b20      	cmp	r3, #32
 8007204:	d117      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007206:	4b40      	ldr	r3, [pc, #256]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d005      	beq.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 8007212:	4b3d      	ldr	r3, [pc, #244]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	0e1b      	lsrs	r3, r3, #24
 8007218:	f003 030f 	and.w	r3, r3, #15
 800721c:	e006      	b.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800721e:	4b3a      	ldr	r3, [pc, #232]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007220:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007224:	041b      	lsls	r3, r3, #16
 8007226:	0e1b      	lsrs	r3, r3, #24
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	4a38      	ldr	r2, [pc, #224]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800722e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007232:	637b      	str	r3, [r7, #52]	@ 0x34
 8007234:	e362      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	637b      	str	r3, [r7, #52]	@ 0x34
 800723a:	e35f      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800723c:	4b32      	ldr	r3, [pc, #200]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800723e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007242:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007246:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800724a:	d112      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 800724c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007252:	d10e      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007254:	4b2c      	ldr	r3, [pc, #176]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800725a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800725e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007262:	d102      	bne.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 8007264:	23fa      	movs	r3, #250	@ 0xfa
 8007266:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007268:	e348      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800726a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800726e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007270:	e344      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007272:	4b25      	ldr	r3, [pc, #148]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800727a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800727e:	d106      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 8007280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007282:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007286:	d102      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 8007288:	4b20      	ldr	r3, [pc, #128]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800728a:	637b      	str	r3, [r7, #52]	@ 0x34
 800728c:	e336      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800728e:	4b1e      	ldr	r3, [pc, #120]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b02      	cmp	r3, #2
 800729a:	d107      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 800729c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072a2:	d103      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 80072a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072aa:	e327      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80072b0:	e324      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80072b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072b6:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80072ba:	430b      	orrs	r3, r1
 80072bc:	d14e      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80072be:	4b12      	ldr	r3, [pc, #72]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80072c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072c4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80072c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d103      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80072d0:	f7fd fc36 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 80072d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80072d6:	e311      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80072d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80072da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072e6:	d119      	bne.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 80072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80072ee:	d115      	bne.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072f0:	4b05      	ldr	r3, [pc, #20]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80072f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072fe:	d109      	bne.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 8007300:	23fa      	movs	r3, #250	@ 0xfa
 8007302:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007304:	e2fa      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007306:	bf00      	nop
 8007308:	46020c00 	.word	0x46020c00
 800730c:	00f42400 	.word	0x00f42400
 8007310:	08008924 	.word	0x08008924
      }
      else
      {
        frequency = LSI_VALUE;
 8007314:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007318:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800731a:	e2ef      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800731c:	4ba8      	ldr	r3, [pc, #672]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007324:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007328:	d106      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007330:	d102      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 8007332:	4ba4      	ldr	r3, [pc, #656]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007334:	637b      	str	r3, [r7, #52]	@ 0x34
 8007336:	e2e1      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007338:	4ba1      	ldr	r3, [pc, #644]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800733a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b02      	cmp	r3, #2
 8007344:	d107      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 8007346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007348:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800734c:	d103      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 800734e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007352:	637b      	str	r3, [r7, #52]	@ 0x34
 8007354:	e2d2      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	637b      	str	r3, [r7, #52]	@ 0x34
 800735a:	e2cf      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800735c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007360:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007364:	430b      	orrs	r3, r1
 8007366:	d12d      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007368:	4b95      	ldr	r3, [pc, #596]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800736a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800736e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007372:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007374:	4b92      	ldr	r3, [pc, #584]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800737c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007380:	d105      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 8007382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007384:	2b00      	cmp	r3, #0
 8007386:	d102      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 8007388:	4b8e      	ldr	r3, [pc, #568]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800738a:	637b      	str	r3, [r7, #52]	@ 0x34
 800738c:	e2b6      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800738e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007394:	d107      	bne.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007396:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe fb4e 	bl	8005a3c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a4:	e2aa      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80073a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073ac:	d107      	bne.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ae:	f107 0318 	add.w	r3, r7, #24
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fe fc9c 	bl	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80073bc:	e29e      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c2:	e29b      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80073c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073c8:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80073cc:	430b      	orrs	r3, r1
 80073ce:	d156      	bne.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80073d0:	4b7b      	ldr	r3, [pc, #492]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80073d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073d6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80073da:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80073dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80073e2:	d028      	beq.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 80073e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80073ea:	d845      	bhi.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 80073ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073f2:	d013      	beq.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 80073f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073fa:	d83d      	bhi.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 80073fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d004      	beq.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 8007402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007404:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007408:	d004      	beq.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 800740a:	e035      	b.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800740c:	f7fd fbac 	bl	8004b68 <HAL_RCC_GetPCLK2Freq>
 8007410:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007412:	e273      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007414:	f7fd fa78 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8007418:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800741a:	e26f      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800741c:	4b68      	ldr	r3, [pc, #416]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007428:	d102      	bne.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 800742a:	4b66      	ldr	r3, [pc, #408]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800742c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800742e:	e265      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007430:	2300      	movs	r3, #0
 8007432:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007434:	e262      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007436:	4b62      	ldr	r3, [pc, #392]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0320 	and.w	r3, r3, #32
 800743e:	2b20      	cmp	r3, #32
 8007440:	d117      	bne.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007442:	4b5f      	ldr	r3, [pc, #380]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d005      	beq.n	800745a <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 800744e:	4b5c      	ldr	r3, [pc, #368]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	0e1b      	lsrs	r3, r3, #24
 8007454:	f003 030f 	and.w	r3, r3, #15
 8007458:	e006      	b.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 800745a:	4b59      	ldr	r3, [pc, #356]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800745c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007460:	041b      	lsls	r3, r3, #16
 8007462:	0e1b      	lsrs	r3, r3, #24
 8007464:	f003 030f 	and.w	r3, r3, #15
 8007468:	4a57      	ldr	r2, [pc, #348]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800746a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800746e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007470:	e244      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007476:	e241      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800747c:	e23e      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800747e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007482:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007486:	430b      	orrs	r3, r1
 8007488:	d156      	bne.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800748a:	4b4d      	ldr	r3, [pc, #308]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800748c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007490:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007494:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007498:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800749c:	d028      	beq.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074a4:	d845      	bhi.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 80074a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074ac:	d013      	beq.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 80074ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074b4:	d83d      	bhi.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 80074b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d004      	beq.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074c2:	d004      	beq.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 80074c4:	e035      	b.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80074c6:	f7fd fb3b 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 80074ca:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80074cc:	e216      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80074ce:	f7fd fa1b 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 80074d2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80074d4:	e212      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074d6:	4b3a      	ldr	r3, [pc, #232]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074e2:	d102      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 80074e4:	4b37      	ldr	r3, [pc, #220]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80074e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074e8:	e208      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074ee:	e205      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80074f0:	4b33      	ldr	r3, [pc, #204]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0320 	and.w	r3, r3, #32
 80074f8:	2b20      	cmp	r3, #32
 80074fa:	d117      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074fc:	4b30      	ldr	r3, [pc, #192]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d005      	beq.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8007508:	4b2d      	ldr	r3, [pc, #180]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	0e1b      	lsrs	r3, r3, #24
 800750e:	f003 030f 	and.w	r3, r3, #15
 8007512:	e006      	b.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 8007514:	4b2a      	ldr	r3, [pc, #168]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007516:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800751a:	041b      	lsls	r3, r3, #16
 800751c:	0e1b      	lsrs	r3, r3, #24
 800751e:	f003 030f 	and.w	r3, r3, #15
 8007522:	4a29      	ldr	r2, [pc, #164]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007528:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800752a:	e1e7      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007530:	e1e4      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007536:	e1e1      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800753c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007540:	430b      	orrs	r3, r1
 8007542:	d17c      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007544:	4b1e      	ldr	r3, [pc, #120]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007546:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800754a:	f003 0318 	and.w	r3, r3, #24
 800754e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007552:	2b18      	cmp	r3, #24
 8007554:	d870      	bhi.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 8007556:	a201      	add	r2, pc, #4	@ (adr r2, 800755c <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 8007558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755c:	080075cd 	.word	0x080075cd
 8007560:	08007639 	.word	0x08007639
 8007564:	08007639 	.word	0x08007639
 8007568:	08007639 	.word	0x08007639
 800756c:	08007639 	.word	0x08007639
 8007570:	08007639 	.word	0x08007639
 8007574:	08007639 	.word	0x08007639
 8007578:	08007639 	.word	0x08007639
 800757c:	080075d5 	.word	0x080075d5
 8007580:	08007639 	.word	0x08007639
 8007584:	08007639 	.word	0x08007639
 8007588:	08007639 	.word	0x08007639
 800758c:	08007639 	.word	0x08007639
 8007590:	08007639 	.word	0x08007639
 8007594:	08007639 	.word	0x08007639
 8007598:	08007639 	.word	0x08007639
 800759c:	080075dd 	.word	0x080075dd
 80075a0:	08007639 	.word	0x08007639
 80075a4:	08007639 	.word	0x08007639
 80075a8:	08007639 	.word	0x08007639
 80075ac:	08007639 	.word	0x08007639
 80075b0:	08007639 	.word	0x08007639
 80075b4:	08007639 	.word	0x08007639
 80075b8:	08007639 	.word	0x08007639
 80075bc:	080075f7 	.word	0x080075f7
 80075c0:	46020c00 	.word	0x46020c00
 80075c4:	00f42400 	.word	0x00f42400
 80075c8:	08008924 	.word	0x08008924
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80075cc:	f7fd fae0 	bl	8004b90 <HAL_RCC_GetPCLK3Freq>
 80075d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80075d2:	e193      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80075d4:	f7fd f998 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 80075d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80075da:	e18f      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075dc:	4b9f      	ldr	r3, [pc, #636]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075e8:	d102      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 80075ea:	4b9d      	ldr	r3, [pc, #628]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80075ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075ee:	e185      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075f4:	e182      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80075f6:	4b99      	ldr	r3, [pc, #612]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0320 	and.w	r3, r3, #32
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d117      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007602:	4b96      	ldr	r3, [pc, #600]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d005      	beq.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 800760e:	4b93      	ldr	r3, [pc, #588]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	0e1b      	lsrs	r3, r3, #24
 8007614:	f003 030f 	and.w	r3, r3, #15
 8007618:	e006      	b.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 800761a:	4b90      	ldr	r3, [pc, #576]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800761c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007620:	041b      	lsls	r3, r3, #16
 8007622:	0e1b      	lsrs	r3, r3, #24
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	4a8e      	ldr	r2, [pc, #568]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800762a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800762e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007630:	e164      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007636:	e161      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800763c:	e15e      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800763e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007642:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007646:	430b      	orrs	r3, r1
 8007648:	d155      	bne.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800764a:	4b84      	ldr	r3, [pc, #528]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800764c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007650:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007654:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800765c:	d013      	beq.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 800765e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007660:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007664:	d844      	bhi.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8007666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007668:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800766c:	d013      	beq.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 800766e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007670:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007674:	d83c      	bhi.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	2b00      	cmp	r3, #0
 800767a:	d014      	beq.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 800767c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007682:	d014      	beq.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8007684:	e034      	b.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007686:	f107 0318 	add.w	r3, r7, #24
 800768a:	4618      	mov	r0, r3
 800768c:	f7fe fb30 	bl	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007694:	e132      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe f9ce 	bl	8005a3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80076a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076a4:	e12a      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80076a6:	f7fd f92f 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 80076aa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80076ac:	e126      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80076ae:	4b6b      	ldr	r3, [pc, #428]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0320 	and.w	r3, r3, #32
 80076b6:	2b20      	cmp	r3, #32
 80076b8:	d117      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076ba:	4b68      	ldr	r3, [pc, #416]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d005      	beq.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 80076c6:	4b65      	ldr	r3, [pc, #404]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	0e1b      	lsrs	r3, r3, #24
 80076cc:	f003 030f 	and.w	r3, r3, #15
 80076d0:	e006      	b.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 80076d2:	4b62      	ldr	r3, [pc, #392]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80076d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076d8:	041b      	lsls	r3, r3, #16
 80076da:	0e1b      	lsrs	r3, r3, #24
 80076dc:	f003 030f 	and.w	r3, r3, #15
 80076e0:	4a60      	ldr	r2, [pc, #384]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80076e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076e8:	e108      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076ee:	e105      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076f4:	e102      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 80076f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076fa:	1e59      	subs	r1, r3, #1
 80076fc:	ea52 0301 	orrs.w	r3, r2, r1
 8007700:	d13c      	bne.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8007702:	4b56      	ldr	r3, [pc, #344]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007704:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007708:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800770c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800770e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007710:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007714:	d027      	beq.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8007716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007718:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800771c:	d82b      	bhi.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800771e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007720:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007724:	d017      	beq.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 8007726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007728:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800772c:	d823      	bhi.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800772e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007730:	2b00      	cmp	r3, #0
 8007732:	d004      	beq.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 8007734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007736:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800773a:	d004      	beq.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 800773c:	e01b      	b.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800773e:	f7fd f8e3 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8007742:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007744:	e0da      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800774a:	4618      	mov	r0, r3
 800774c:	f7fe f976 	bl	8005a3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007752:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007754:	e0d2      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007756:	f107 0318 	add.w	r3, r7, #24
 800775a:	4618      	mov	r0, r3
 800775c:	f7fe fac8 	bl	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007764:	e0ca      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007766:	f107 030c 	add.w	r3, r7, #12
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe fc1a 	bl	8005fa4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007774:	e0c2      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800777a:	e0bf      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800777c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007780:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007784:	430b      	orrs	r3, r1
 8007786:	d131      	bne.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007788:	4b34      	ldr	r3, [pc, #208]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800778a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800778e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007792:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007794:	4b31      	ldr	r3, [pc, #196]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d106      	bne.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d103      	bne.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 80077a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ae:	e0a5      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80077b0:	4b2a      	ldr	r3, [pc, #168]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80077b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077be:	d112      	bne.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 80077c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077c6:	d10e      	bne.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077c8:	4b24      	ldr	r3, [pc, #144]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80077ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077d6:	d102      	bne.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 80077d8:	23fa      	movs	r3, #250	@ 0xfa
 80077da:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077dc:	e08e      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80077de:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80077e2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077e4:	e08a      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ea:	e087      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80077ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077f0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80077f4:	430b      	orrs	r3, r1
 80077f6:	d13b      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80077f8:	4b18      	ldr	r3, [pc, #96]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80077fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077fe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007802:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007804:	4b15      	ldr	r3, [pc, #84]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800780c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007810:	d105      	bne.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 8007812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007814:	2b00      	cmp	r3, #0
 8007816:	d102      	bne.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 8007818:	4b13      	ldr	r3, [pc, #76]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800781a:	637b      	str	r3, [r7, #52]	@ 0x34
 800781c:	e06e      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800781e:	4b0f      	ldr	r3, [pc, #60]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800782a:	d106      	bne.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 800782c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007832:	d102      	bne.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007834:	4b0d      	ldr	r3, [pc, #52]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8007836:	637b      	str	r3, [r7, #52]	@ 0x34
 8007838:	e060      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800783a:	4b08      	ldr	r3, [pc, #32]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007846:	d106      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 8007848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800784e:	d102      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 8007850:	4b03      	ldr	r3, [pc, #12]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8007852:	637b      	str	r3, [r7, #52]	@ 0x34
 8007854:	e052      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	637b      	str	r3, [r7, #52]	@ 0x34
 800785a:	e04f      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800785c:	46020c00 	.word	0x46020c00
 8007860:	00f42400 	.word	0x00f42400
 8007864:	08008924 	.word	0x08008924
 8007868:	02dc6c00 	.word	0x02dc6c00
 800786c:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8007870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007874:	f1a3 0108 	sub.w	r1, r3, #8
 8007878:	ea52 0301 	orrs.w	r3, r2, r1
 800787c:	d13c      	bne.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800787e:	4b22      	ldr	r3, [pc, #136]	@ (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8007880:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007884:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007888:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800788a:	4b1f      	ldr	r3, [pc, #124]	@ (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007892:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007896:	d105      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8007898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789a:	2b00      	cmp	r3, #0
 800789c:	d102      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 800789e:	4b1b      	ldr	r3, [pc, #108]	@ (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 80078a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078a2:	e02b      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 80078a4:	4b18      	ldr	r3, [pc, #96]	@ (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078b0:	d106      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078b8:	d102      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 80078ba:	4b15      	ldr	r3, [pc, #84]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 80078bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80078be:	e01d      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 80078c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078c6:	d107      	bne.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fe f8b5 	bl	8005a3c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80078d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80078d6:	e011      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 80078d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078da:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80078de:	d108      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fe f8a9 	bl	8005a3c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 80078ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ec:	085b      	lsrs	r3, r3, #1
 80078ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80078f0:	e004      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80078f6:	e001      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80078fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3738      	adds	r7, #56	@ 0x38
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	46020c00 	.word	0x46020c00
 800790c:	00f42400 	.word	0x00f42400
 8007910:	007a1200 	.word	0x007a1200

08007914 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800791c:	4b47      	ldr	r3, [pc, #284]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a46      	ldr	r2, [pc, #280]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 8007922:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007926:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007928:	f7f9 fcac 	bl	8001284 <HAL_GetTick>
 800792c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800792e:	e008      	b.n	8007942 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007930:	f7f9 fca8 	bl	8001284 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b02      	cmp	r3, #2
 800793c:	d901      	bls.n	8007942 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e077      	b.n	8007a32 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007942:	4b3e      	ldr	r3, [pc, #248]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1f0      	bne.n	8007930 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800794e:	4b3b      	ldr	r3, [pc, #236]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 8007950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007952:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007956:	f023 0303 	bic.w	r3, r3, #3
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	6811      	ldr	r1, [r2, #0]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	6852      	ldr	r2, [r2, #4]
 8007962:	3a01      	subs	r2, #1
 8007964:	0212      	lsls	r2, r2, #8
 8007966:	430a      	orrs	r2, r1
 8007968:	4934      	ldr	r1, [pc, #208]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 800796a:	4313      	orrs	r3, r2
 800796c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800796e:	4b33      	ldr	r3, [pc, #204]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 8007970:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007972:	4b33      	ldr	r3, [pc, #204]	@ (8007a40 <RCCEx_PLL2_Config+0x12c>)
 8007974:	4013      	ands	r3, r2
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	6892      	ldr	r2, [r2, #8]
 800797a:	3a01      	subs	r2, #1
 800797c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	68d2      	ldr	r2, [r2, #12]
 8007984:	3a01      	subs	r2, #1
 8007986:	0252      	lsls	r2, r2, #9
 8007988:	b292      	uxth	r2, r2
 800798a:	4311      	orrs	r1, r2
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6912      	ldr	r2, [r2, #16]
 8007990:	3a01      	subs	r2, #1
 8007992:	0412      	lsls	r2, r2, #16
 8007994:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007998:	4311      	orrs	r1, r2
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	6952      	ldr	r2, [r2, #20]
 800799e:	3a01      	subs	r2, #1
 80079a0:	0612      	lsls	r2, r2, #24
 80079a2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80079a6:	430a      	orrs	r2, r1
 80079a8:	4924      	ldr	r1, [pc, #144]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80079ae:	4b23      	ldr	r3, [pc, #140]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 80079b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b2:	f023 020c 	bic.w	r2, r3, #12
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	4920      	ldr	r1, [pc, #128]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80079c0:	4b1e      	ldr	r3, [pc, #120]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 80079c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	491c      	ldr	r1, [pc, #112]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80079ce:	4b1b      	ldr	r3, [pc, #108]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 80079d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d2:	4a1a      	ldr	r2, [pc, #104]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 80079d4:	f023 0310 	bic.w	r3, r3, #16
 80079d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80079da:	4b18      	ldr	r3, [pc, #96]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 80079dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079e2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	69d2      	ldr	r2, [r2, #28]
 80079ea:	00d2      	lsls	r2, r2, #3
 80079ec:	4913      	ldr	r1, [pc, #76]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80079f2:	4b12      	ldr	r3, [pc, #72]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 80079f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f6:	4a11      	ldr	r2, [pc, #68]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 80079f8:	f043 0310 	orr.w	r3, r3, #16
 80079fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80079fe:	4b0f      	ldr	r3, [pc, #60]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a0e      	ldr	r2, [pc, #56]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 8007a04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a08:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a0a:	f7f9 fc3b 	bl	8001284 <HAL_GetTick>
 8007a0e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a10:	e008      	b.n	8007a24 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a12:	f7f9 fc37 	bl	8001284 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d901      	bls.n	8007a24 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e006      	b.n	8007a32 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a24:	4b05      	ldr	r3, [pc, #20]	@ (8007a3c <RCCEx_PLL2_Config+0x128>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0f0      	beq.n	8007a12 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007a30:	2300      	movs	r3, #0

}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	46020c00 	.word	0x46020c00
 8007a40:	80800000 	.word	0x80800000

08007a44 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007a4c:	4b47      	ldr	r3, [pc, #284]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a46      	ldr	r2, [pc, #280]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007a52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a56:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a58:	f7f9 fc14 	bl	8001284 <HAL_GetTick>
 8007a5c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a5e:	e008      	b.n	8007a72 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a60:	f7f9 fc10 	bl	8001284 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d901      	bls.n	8007a72 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e077      	b.n	8007b62 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a72:	4b3e      	ldr	r3, [pc, #248]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1f0      	bne.n	8007a60 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a82:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007a86:	f023 0303 	bic.w	r3, r3, #3
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	6811      	ldr	r1, [r2, #0]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6852      	ldr	r2, [r2, #4]
 8007a92:	3a01      	subs	r2, #1
 8007a94:	0212      	lsls	r2, r2, #8
 8007a96:	430a      	orrs	r2, r1
 8007a98:	4934      	ldr	r1, [pc, #208]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	630b      	str	r3, [r1, #48]	@ 0x30
 8007a9e:	4b33      	ldr	r3, [pc, #204]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007aa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007aa2:	4b33      	ldr	r3, [pc, #204]	@ (8007b70 <RCCEx_PLL3_Config+0x12c>)
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	6892      	ldr	r2, [r2, #8]
 8007aaa:	3a01      	subs	r2, #1
 8007aac:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	68d2      	ldr	r2, [r2, #12]
 8007ab4:	3a01      	subs	r2, #1
 8007ab6:	0252      	lsls	r2, r2, #9
 8007ab8:	b292      	uxth	r2, r2
 8007aba:	4311      	orrs	r1, r2
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	6912      	ldr	r2, [r2, #16]
 8007ac0:	3a01      	subs	r2, #1
 8007ac2:	0412      	lsls	r2, r2, #16
 8007ac4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007ac8:	4311      	orrs	r1, r2
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	6952      	ldr	r2, [r2, #20]
 8007ace:	3a01      	subs	r2, #1
 8007ad0:	0612      	lsls	r2, r2, #24
 8007ad2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	4924      	ldr	r1, [pc, #144]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007ade:	4b23      	ldr	r3, [pc, #140]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae2:	f023 020c 	bic.w	r2, r3, #12
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	4920      	ldr	r1, [pc, #128]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007af0:	4b1e      	ldr	r3, [pc, #120]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007af2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	491c      	ldr	r1, [pc, #112]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007afe:	4b1b      	ldr	r3, [pc, #108]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b02:	4a1a      	ldr	r2, [pc, #104]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007b04:	f023 0310 	bic.w	r3, r3, #16
 8007b08:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b0a:	4b18      	ldr	r3, [pc, #96]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b12:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	69d2      	ldr	r2, [r2, #28]
 8007b1a:	00d2      	lsls	r2, r2, #3
 8007b1c:	4913      	ldr	r1, [pc, #76]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007b22:	4b12      	ldr	r3, [pc, #72]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b26:	4a11      	ldr	r2, [pc, #68]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007b28:	f043 0310 	orr.w	r3, r3, #16
 8007b2c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a0e      	ldr	r2, [pc, #56]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b38:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b3a:	f7f9 fba3 	bl	8001284 <HAL_GetTick>
 8007b3e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b40:	e008      	b.n	8007b54 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b42:	f7f9 fb9f 	bl	8001284 <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d901      	bls.n	8007b54 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e006      	b.n	8007b62 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b54:	4b05      	ldr	r3, [pc, #20]	@ (8007b6c <RCCEx_PLL3_Config+0x128>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d0f0      	beq.n	8007b42 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	46020c00 	.word	0x46020c00
 8007b70:	80800000 	.word	0x80800000

08007b74 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e0fb      	b.n	8007d7e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a7f      	ldr	r2, [pc, #508]	@ (8007d88 <HAL_SPI_Init+0x214>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d004      	beq.n	8007b9a <HAL_SPI_Init+0x26>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a7d      	ldr	r2, [pc, #500]	@ (8007d8c <HAL_SPI_Init+0x218>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	e000      	b.n	8007b9c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007b9a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a78      	ldr	r2, [pc, #480]	@ (8007d88 <HAL_SPI_Init+0x214>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d004      	beq.n	8007bb6 <HAL_SPI_Init+0x42>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a76      	ldr	r2, [pc, #472]	@ (8007d8c <HAL_SPI_Init+0x218>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d105      	bne.n	8007bc2 <HAL_SPI_Init+0x4e>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	2b0f      	cmp	r3, #15
 8007bbc:	d901      	bls.n	8007bc2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e0dd      	b.n	8007d7e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f8ec 	bl	8007da0 <SPI_GetPacketSize>
 8007bc8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a6e      	ldr	r2, [pc, #440]	@ (8007d88 <HAL_SPI_Init+0x214>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d004      	beq.n	8007bde <HAL_SPI_Init+0x6a>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a6c      	ldr	r2, [pc, #432]	@ (8007d8c <HAL_SPI_Init+0x218>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d102      	bne.n	8007be4 <HAL_SPI_Init+0x70>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d816      	bhi.n	8007c12 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007be8:	4a69      	ldr	r2, [pc, #420]	@ (8007d90 <HAL_SPI_Init+0x21c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d00e      	beq.n	8007c0c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a68      	ldr	r2, [pc, #416]	@ (8007d94 <HAL_SPI_Init+0x220>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d009      	beq.n	8007c0c <HAL_SPI_Init+0x98>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a66      	ldr	r2, [pc, #408]	@ (8007d98 <HAL_SPI_Init+0x224>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d004      	beq.n	8007c0c <HAL_SPI_Init+0x98>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a65      	ldr	r2, [pc, #404]	@ (8007d9c <HAL_SPI_Init+0x228>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d104      	bne.n	8007c16 <HAL_SPI_Init+0xa2>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b10      	cmp	r3, #16
 8007c10:	d901      	bls.n	8007c16 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e0b3      	b.n	8007d7e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d106      	bne.n	8007c30 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7f9 f8aa 	bl	8000d84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 0201 	bic.w	r2, r2, #1
 8007c46:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007c52:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c5c:	d119      	bne.n	8007c92 <HAL_SPI_Init+0x11e>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c66:	d103      	bne.n	8007c70 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d008      	beq.n	8007c82 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10c      	bne.n	8007c92 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007c7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c80:	d107      	bne.n	8007c92 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00f      	beq.n	8007cbe <HAL_SPI_Init+0x14a>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	2b06      	cmp	r3, #6
 8007ca4:	d90b      	bls.n	8007cbe <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	e007      	b.n	8007cce <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ccc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	69da      	ldr	r2, [r3, #28]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce0:	ea42 0103 	orr.w	r1, r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68da      	ldr	r2, [r3, #12]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf8:	431a      	orrs	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	431a      	orrs	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	431a      	orrs	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d22:	431a      	orrs	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	431a      	orrs	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d2e:	431a      	orrs	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d34:	431a      	orrs	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d3a:	ea42 0103 	orr.w	r1, r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	46002000 	.word	0x46002000
 8007d8c:	56002000 	.word	0x56002000
 8007d90:	40013000 	.word	0x40013000
 8007d94:	50013000 	.word	0x50013000
 8007d98:	40003800 	.word	0x40003800
 8007d9c:	50003800 	.word	0x50003800

08007da0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dac:	095b      	lsrs	r3, r3, #5
 8007dae:	3301      	adds	r3, #1
 8007db0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	3301      	adds	r3, #1
 8007db8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	3307      	adds	r3, #7
 8007dbe:	08db      	lsrs	r3, r3, #3
 8007dc0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	fb02 f303 	mul.w	r3, r2, r3
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b083      	sub	sp, #12
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d12e      	bne.n	8007e4a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d101      	bne.n	8007dfa <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8007df6:	2302      	movs	r3, #2
 8007df8:	e028      	b.n	8007e4c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2202      	movs	r2, #2
 8007e06:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f022 0201 	bic.w	r2, r2, #1
 8007e18:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8007e26:	ea42 0103 	orr.w	r1, r2, r3
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	e000      	b.n	8007e4c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
  }
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e042      	b.n	8007ef0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d106      	bne.n	8007e82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7f8 ffeb 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2224      	movs	r2, #36	@ 0x24
 8007e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 0201 	bic.w	r2, r2, #1
 8007e98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f9d6 	bl	8008254 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f825 	bl	8007ef8 <UART_SetConfig>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d101      	bne.n	8007eb8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e01b      	b.n	8007ef0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689a      	ldr	r2, [r3, #8]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f042 0201 	orr.w	r2, r2, #1
 8007ee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fa55 	bl	8008398 <UART_CheckIdleState>
 8007eee:	4603      	mov	r3, r0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007efc:	b094      	sub	sp, #80	@ 0x50
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	4b83      	ldr	r3, [pc, #524]	@ (800811c <UART_SetConfig+0x224>)
 8007f0e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f12:	689a      	ldr	r2, [r3, #8]
 8007f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	497c      	ldr	r1, [pc, #496]	@ (8008120 <UART_SetConfig+0x228>)
 8007f30:	4019      	ands	r1, r3
 8007f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f48:	68d9      	ldr	r1, [r3, #12]
 8007f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	ea40 0301 	orr.w	r3, r0, r1
 8007f52:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	4b6f      	ldr	r3, [pc, #444]	@ (800811c <UART_SetConfig+0x224>)
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d009      	beq.n	8007f78 <UART_SetConfig+0x80>
 8007f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	4b6e      	ldr	r3, [pc, #440]	@ (8008124 <UART_SetConfig+0x22c>)
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d004      	beq.n	8007f78 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f70:	6a1a      	ldr	r2, [r3, #32]
 8007f72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f74:	4313      	orrs	r3, r2
 8007f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8007f82:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8007f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f8c:	430b      	orrs	r3, r1
 8007f8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f96:	f023 000f 	bic.w	r0, r3, #15
 8007f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f9c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	ea40 0301 	orr.w	r3, r0, r1
 8007fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	4b5e      	ldr	r3, [pc, #376]	@ (8008128 <UART_SetConfig+0x230>)
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d102      	bne.n	8007fb8 <UART_SetConfig+0xc0>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fb6:	e032      	b.n	800801e <UART_SetConfig+0x126>
 8007fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	4b5b      	ldr	r3, [pc, #364]	@ (800812c <UART_SetConfig+0x234>)
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d102      	bne.n	8007fc8 <UART_SetConfig+0xd0>
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fc6:	e02a      	b.n	800801e <UART_SetConfig+0x126>
 8007fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	4b58      	ldr	r3, [pc, #352]	@ (8008130 <UART_SetConfig+0x238>)
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d102      	bne.n	8007fd8 <UART_SetConfig+0xe0>
 8007fd2:	2304      	movs	r3, #4
 8007fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fd6:	e022      	b.n	800801e <UART_SetConfig+0x126>
 8007fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	4b55      	ldr	r3, [pc, #340]	@ (8008134 <UART_SetConfig+0x23c>)
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d102      	bne.n	8007fe8 <UART_SetConfig+0xf0>
 8007fe2:	2308      	movs	r3, #8
 8007fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fe6:	e01a      	b.n	800801e <UART_SetConfig+0x126>
 8007fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	4b52      	ldr	r3, [pc, #328]	@ (8008138 <UART_SetConfig+0x240>)
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d102      	bne.n	8007ff8 <UART_SetConfig+0x100>
 8007ff2:	2310      	movs	r3, #16
 8007ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ff6:	e012      	b.n	800801e <UART_SetConfig+0x126>
 8007ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	4b4f      	ldr	r3, [pc, #316]	@ (800813c <UART_SetConfig+0x244>)
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d103      	bne.n	800800a <UART_SetConfig+0x112>
 8008002:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8008006:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008008:	e009      	b.n	800801e <UART_SetConfig+0x126>
 800800a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	4b43      	ldr	r3, [pc, #268]	@ (800811c <UART_SetConfig+0x224>)
 8008010:	429a      	cmp	r2, r3
 8008012:	d102      	bne.n	800801a <UART_SetConfig+0x122>
 8008014:	2320      	movs	r3, #32
 8008016:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008018:	e001      	b.n	800801e <UART_SetConfig+0x126>
 800801a:	2300      	movs	r3, #0
 800801c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800801e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4b3e      	ldr	r3, [pc, #248]	@ (800811c <UART_SetConfig+0x224>)
 8008024:	429a      	cmp	r2, r3
 8008026:	d005      	beq.n	8008034 <UART_SetConfig+0x13c>
 8008028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	4b3d      	ldr	r3, [pc, #244]	@ (8008124 <UART_SetConfig+0x22c>)
 800802e:	429a      	cmp	r2, r3
 8008030:	f040 8088 	bne.w	8008144 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008036:	2200      	movs	r2, #0
 8008038:	623b      	str	r3, [r7, #32]
 800803a:	627a      	str	r2, [r7, #36]	@ 0x24
 800803c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008040:	f7fe f90a 	bl	8006258 <HAL_RCCEx_GetPeriphCLKFreq>
 8008044:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 80eb 	beq.w	8008224 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800804e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008052:	4a3b      	ldr	r2, [pc, #236]	@ (8008140 <UART_SetConfig+0x248>)
 8008054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008058:	461a      	mov	r2, r3
 800805a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800805c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008060:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	4613      	mov	r3, r2
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	4413      	add	r3, r2
 800806c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800806e:	429a      	cmp	r2, r3
 8008070:	d305      	bcc.n	800807e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008078:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800807a:	429a      	cmp	r2, r3
 800807c:	d903      	bls.n	8008086 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008084:	e048      	b.n	8008118 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008088:	2200      	movs	r2, #0
 800808a:	61bb      	str	r3, [r7, #24]
 800808c:	61fa      	str	r2, [r7, #28]
 800808e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008092:	4a2b      	ldr	r2, [pc, #172]	@ (8008140 <UART_SetConfig+0x248>)
 8008094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008098:	b29b      	uxth	r3, r3
 800809a:	2200      	movs	r2, #0
 800809c:	613b      	str	r3, [r7, #16]
 800809e:	617a      	str	r2, [r7, #20]
 80080a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80080a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80080a8:	f7f8 f8f2 	bl	8000290 <__aeabi_uldivmod>
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	4610      	mov	r0, r2
 80080b2:	4619      	mov	r1, r3
 80080b4:	f04f 0200 	mov.w	r2, #0
 80080b8:	f04f 0300 	mov.w	r3, #0
 80080bc:	020b      	lsls	r3, r1, #8
 80080be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080c2:	0202      	lsls	r2, r0, #8
 80080c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080c6:	6849      	ldr	r1, [r1, #4]
 80080c8:	0849      	lsrs	r1, r1, #1
 80080ca:	2000      	movs	r0, #0
 80080cc:	460c      	mov	r4, r1
 80080ce:	4605      	mov	r5, r0
 80080d0:	eb12 0804 	adds.w	r8, r2, r4
 80080d4:	eb43 0905 	adc.w	r9, r3, r5
 80080d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	60bb      	str	r3, [r7, #8]
 80080e0:	60fa      	str	r2, [r7, #12]
 80080e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080e6:	4640      	mov	r0, r8
 80080e8:	4649      	mov	r1, r9
 80080ea:	f7f8 f8d1 	bl	8000290 <__aeabi_uldivmod>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	4613      	mov	r3, r2
 80080f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80080f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080fc:	d308      	bcc.n	8008110 <UART_SetConfig+0x218>
 80080fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008100:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008104:	d204      	bcs.n	8008110 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8008106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800810c:	60da      	str	r2, [r3, #12]
 800810e:	e003      	b.n	8008118 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008116:	e085      	b.n	8008224 <UART_SetConfig+0x32c>
 8008118:	e084      	b.n	8008224 <UART_SetConfig+0x32c>
 800811a:	bf00      	nop
 800811c:	46002400 	.word	0x46002400
 8008120:	cfff69f3 	.word	0xcfff69f3
 8008124:	56002400 	.word	0x56002400
 8008128:	40013800 	.word	0x40013800
 800812c:	40004400 	.word	0x40004400
 8008130:	40004800 	.word	0x40004800
 8008134:	40004c00 	.word	0x40004c00
 8008138:	40005000 	.word	0x40005000
 800813c:	40006400 	.word	0x40006400
 8008140:	080089e4 	.word	0x080089e4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008146:	69db      	ldr	r3, [r3, #28]
 8008148:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800814c:	d13c      	bne.n	80081c8 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800814e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008150:	2200      	movs	r2, #0
 8008152:	603b      	str	r3, [r7, #0]
 8008154:	607a      	str	r2, [r7, #4]
 8008156:	e9d7 0100 	ldrd	r0, r1, [r7]
 800815a:	f7fe f87d 	bl	8006258 <HAL_RCCEx_GetPeriphCLKFreq>
 800815e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008162:	2b00      	cmp	r3, #0
 8008164:	d05e      	beq.n	8008224 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800816a:	4a39      	ldr	r2, [pc, #228]	@ (8008250 <UART_SetConfig+0x358>)
 800816c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008170:	461a      	mov	r2, r3
 8008172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008174:	fbb3 f3f2 	udiv	r3, r3, r2
 8008178:	005a      	lsls	r2, r3, #1
 800817a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	085b      	lsrs	r3, r3, #1
 8008180:	441a      	add	r2, r3
 8008182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	fbb2 f3f3 	udiv	r3, r2, r3
 800818a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800818c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800818e:	2b0f      	cmp	r3, #15
 8008190:	d916      	bls.n	80081c0 <UART_SetConfig+0x2c8>
 8008192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008198:	d212      	bcs.n	80081c0 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800819a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800819c:	b29b      	uxth	r3, r3
 800819e:	f023 030f 	bic.w	r3, r3, #15
 80081a2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081a6:	085b      	lsrs	r3, r3, #1
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	f003 0307 	and.w	r3, r3, #7
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80081b2:	4313      	orrs	r3, r2
 80081b4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80081b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80081bc:	60da      	str	r2, [r3, #12]
 80081be:	e031      	b.n	8008224 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80081c6:	e02d      	b.n	8008224 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80081c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081ca:	2200      	movs	r2, #0
 80081cc:	469a      	mov	sl, r3
 80081ce:	4693      	mov	fp, r2
 80081d0:	4650      	mov	r0, sl
 80081d2:	4659      	mov	r1, fp
 80081d4:	f7fe f840 	bl	8006258 <HAL_RCCEx_GetPeriphCLKFreq>
 80081d8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80081da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d021      	beq.n	8008224 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e4:	4a1a      	ldr	r2, [pc, #104]	@ (8008250 <UART_SetConfig+0x358>)
 80081e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081ea:	461a      	mov	r2, r3
 80081ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80081f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	085b      	lsrs	r3, r3, #1
 80081f8:	441a      	add	r2, r3
 80081fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008202:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008206:	2b0f      	cmp	r3, #15
 8008208:	d909      	bls.n	800821e <UART_SetConfig+0x326>
 800820a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800820c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008210:	d205      	bcs.n	800821e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008214:	b29a      	uxth	r2, r3
 8008216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	60da      	str	r2, [r3, #12]
 800821c:	e002      	b.n	8008224 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008226:	2201      	movs	r2, #1
 8008228:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800822c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822e:	2201      	movs	r2, #1
 8008230:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008236:	2200      	movs	r2, #0
 8008238:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800823a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800823c:	2200      	movs	r2, #0
 800823e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008240:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008244:	4618      	mov	r0, r3
 8008246:	3750      	adds	r7, #80	@ 0x50
 8008248:	46bd      	mov	sp, r7
 800824a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800824e:	bf00      	nop
 8008250:	080089e4 	.word	0x080089e4

08008254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008260:	f003 0308 	and.w	r3, r3, #8
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00a      	beq.n	800827e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	430a      	orrs	r2, r1
 800829e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00a      	beq.n	80082c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	430a      	orrs	r2, r1
 80082c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c6:	f003 0304 	and.w	r3, r3, #4
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00a      	beq.n	80082e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	430a      	orrs	r2, r1
 80082e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e8:	f003 0310 	and.w	r3, r3, #16
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00a      	beq.n	8008306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800830a:	f003 0320 	and.w	r3, r3, #32
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00a      	beq.n	8008328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	430a      	orrs	r2, r1
 8008326:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800832c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008330:	2b00      	cmp	r3, #0
 8008332:	d01a      	beq.n	800836a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	430a      	orrs	r2, r1
 8008348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800834e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008352:	d10a      	bne.n	800836a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800836e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00a      	beq.n	800838c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	430a      	orrs	r2, r1
 800838a:	605a      	str	r2, [r3, #4]
  }
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b098      	sub	sp, #96	@ 0x60
 800839c:	af02      	add	r7, sp, #8
 800839e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083a8:	f7f8 ff6c 	bl	8001284 <HAL_GetTick>
 80083ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0308 	and.w	r3, r3, #8
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d12f      	bne.n	800841c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083c4:	2200      	movs	r2, #0
 80083c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f88e 	bl	80084ec <UART_WaitOnFlagUntilTimeout>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d022      	beq.n	800841c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083de:	e853 3f00 	ldrex	r3, [r3]
 80083e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	461a      	mov	r2, r3
 80083f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80083f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083fc:	e841 2300 	strex	r3, r2, [r1]
 8008400:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e6      	bne.n	80083d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2220      	movs	r2, #32
 800840c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e063      	b.n	80084e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0304 	and.w	r3, r3, #4
 8008426:	2b04      	cmp	r3, #4
 8008428:	d149      	bne.n	80084be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800842a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008432:	2200      	movs	r2, #0
 8008434:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f857 	bl	80084ec <UART_WaitOnFlagUntilTimeout>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d03c      	beq.n	80084be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844c:	e853 3f00 	ldrex	r3, [r3]
 8008450:	623b      	str	r3, [r7, #32]
   return(result);
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008458:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008462:	633b      	str	r3, [r7, #48]	@ 0x30
 8008464:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008466:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800846a:	e841 2300 	strex	r3, r2, [r1]
 800846e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1e6      	bne.n	8008444 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3308      	adds	r3, #8
 800847c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	e853 3f00 	ldrex	r3, [r3]
 8008484:	60fb      	str	r3, [r7, #12]
   return(result);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f023 0301 	bic.w	r3, r3, #1
 800848c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3308      	adds	r3, #8
 8008494:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008496:	61fa      	str	r2, [r7, #28]
 8008498:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849a:	69b9      	ldr	r1, [r7, #24]
 800849c:	69fa      	ldr	r2, [r7, #28]
 800849e:	e841 2300 	strex	r3, r2, [r1]
 80084a2:	617b      	str	r3, [r7, #20]
   return(result);
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1e5      	bne.n	8008476 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2220      	movs	r2, #32
 80084ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e012      	b.n	80084e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2220      	movs	r2, #32
 80084ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3758      	adds	r7, #88	@ 0x58
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	4613      	mov	r3, r2
 80084fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084fc:	e04f      	b.n	800859e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008504:	d04b      	beq.n	800859e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008506:	f7f8 febd 	bl	8001284 <HAL_GetTick>
 800850a:	4602      	mov	r2, r0
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	429a      	cmp	r2, r3
 8008514:	d302      	bcc.n	800851c <UART_WaitOnFlagUntilTimeout+0x30>
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	e04e      	b.n	80085be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0304 	and.w	r3, r3, #4
 800852a:	2b00      	cmp	r3, #0
 800852c:	d037      	beq.n	800859e <UART_WaitOnFlagUntilTimeout+0xb2>
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2b80      	cmp	r3, #128	@ 0x80
 8008532:	d034      	beq.n	800859e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2b40      	cmp	r3, #64	@ 0x40
 8008538:	d031      	beq.n	800859e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	f003 0308 	and.w	r3, r3, #8
 8008544:	2b08      	cmp	r3, #8
 8008546:	d110      	bne.n	800856a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2208      	movs	r2, #8
 800854e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 f838 	bl	80085c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2208      	movs	r2, #8
 800855a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e029      	b.n	80085be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008574:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008578:	d111      	bne.n	800859e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008582:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 f81e 	bl	80085c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2220      	movs	r2, #32
 800858e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e00f      	b.n	80085be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	69da      	ldr	r2, [r3, #28]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	4013      	ands	r3, r2
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	bf0c      	ite	eq
 80085ae:	2301      	moveq	r3, #1
 80085b0:	2300      	movne	r3, #0
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	461a      	mov	r2, r3
 80085b6:	79fb      	ldrb	r3, [r7, #7]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d0a0      	beq.n	80084fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b095      	sub	sp, #84	@ 0x54
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d6:	e853 3f00 	ldrex	r3, [r3]
 80085da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	461a      	mov	r2, r3
 80085ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80085ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085f4:	e841 2300 	strex	r3, r2, [r1]
 80085f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e6      	bne.n	80085ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3308      	adds	r3, #8
 8008606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	e853 3f00 	ldrex	r3, [r3]
 800860e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008616:	f023 0301 	bic.w	r3, r3, #1
 800861a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3308      	adds	r3, #8
 8008622:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008624:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008626:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800862a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800862c:	e841 2300 	strex	r3, r2, [r1]
 8008630:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1e3      	bne.n	8008600 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800863c:	2b01      	cmp	r3, #1
 800863e:	d118      	bne.n	8008672 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	60bb      	str	r3, [r7, #8]
   return(result);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f023 0310 	bic.w	r3, r3, #16
 8008654:	647b      	str	r3, [r7, #68]	@ 0x44
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800865e:	61bb      	str	r3, [r7, #24]
 8008660:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	6979      	ldr	r1, [r7, #20]
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	613b      	str	r3, [r7, #16]
   return(result);
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e6      	bne.n	8008640 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2220      	movs	r2, #32
 8008676:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008686:	bf00      	nop
 8008688:	3754      	adds	r7, #84	@ 0x54
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008692:	b480      	push	{r7}
 8008694:	b085      	sub	sp, #20
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d101      	bne.n	80086a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80086a4:	2302      	movs	r3, #2
 80086a6:	e027      	b.n	80086f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2224      	movs	r2, #36	@ 0x24
 80086b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f022 0201 	bic.w	r2, r2, #1
 80086ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80086d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2220      	movs	r2, #32
 80086ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008714:	2b01      	cmp	r3, #1
 8008716:	d101      	bne.n	800871c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008718:	2302      	movs	r3, #2
 800871a:	e02d      	b.n	8008778 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2224      	movs	r2, #36	@ 0x24
 8008728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f022 0201 	bic.w	r2, r2, #1
 8008742:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	430a      	orrs	r2, r1
 8008756:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f84f 	bl	80087fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2220      	movs	r2, #32
 800876a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008790:	2b01      	cmp	r3, #1
 8008792:	d101      	bne.n	8008798 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008794:	2302      	movs	r3, #2
 8008796:	e02d      	b.n	80087f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2224      	movs	r2, #36	@ 0x24
 80087a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f022 0201 	bic.w	r2, r2, #1
 80087be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	430a      	orrs	r2, r1
 80087d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f811 	bl	80087fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2220      	movs	r2, #32
 80087e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008808:	2b00      	cmp	r3, #0
 800880a:	d108      	bne.n	800881e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800881c:	e031      	b.n	8008882 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800881e:	2308      	movs	r3, #8
 8008820:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008822:	2308      	movs	r3, #8
 8008824:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	0e5b      	lsrs	r3, r3, #25
 800882e:	b2db      	uxtb	r3, r3
 8008830:	f003 0307 	and.w	r3, r3, #7
 8008834:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	0f5b      	lsrs	r3, r3, #29
 800883e:	b2db      	uxtb	r3, r3
 8008840:	f003 0307 	and.w	r3, r3, #7
 8008844:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	7b3a      	ldrb	r2, [r7, #12]
 800884a:	4911      	ldr	r1, [pc, #68]	@ (8008890 <UARTEx_SetNbDataToProcess+0x94>)
 800884c:	5c8a      	ldrb	r2, [r1, r2]
 800884e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008852:	7b3a      	ldrb	r2, [r7, #12]
 8008854:	490f      	ldr	r1, [pc, #60]	@ (8008894 <UARTEx_SetNbDataToProcess+0x98>)
 8008856:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008858:	fb93 f3f2 	sdiv	r3, r3, r2
 800885c:	b29a      	uxth	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008864:	7bfb      	ldrb	r3, [r7, #15]
 8008866:	7b7a      	ldrb	r2, [r7, #13]
 8008868:	4909      	ldr	r1, [pc, #36]	@ (8008890 <UARTEx_SetNbDataToProcess+0x94>)
 800886a:	5c8a      	ldrb	r2, [r1, r2]
 800886c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008870:	7b7a      	ldrb	r2, [r7, #13]
 8008872:	4908      	ldr	r1, [pc, #32]	@ (8008894 <UARTEx_SetNbDataToProcess+0x98>)
 8008874:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008876:	fb93 f3f2 	sdiv	r3, r3, r2
 800887a:	b29a      	uxth	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008882:	bf00      	nop
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	080089fc 	.word	0x080089fc
 8008894:	08008a04 	.word	0x08008a04

08008898 <memset>:
 8008898:	4402      	add	r2, r0
 800889a:	4603      	mov	r3, r0
 800889c:	4293      	cmp	r3, r2
 800889e:	d100      	bne.n	80088a2 <memset+0xa>
 80088a0:	4770      	bx	lr
 80088a2:	f803 1b01 	strb.w	r1, [r3], #1
 80088a6:	e7f9      	b.n	800889c <memset+0x4>

080088a8 <__libc_init_array>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	4d0d      	ldr	r5, [pc, #52]	@ (80088e0 <__libc_init_array+0x38>)
 80088ac:	2600      	movs	r6, #0
 80088ae:	4c0d      	ldr	r4, [pc, #52]	@ (80088e4 <__libc_init_array+0x3c>)
 80088b0:	1b64      	subs	r4, r4, r5
 80088b2:	10a4      	asrs	r4, r4, #2
 80088b4:	42a6      	cmp	r6, r4
 80088b6:	d109      	bne.n	80088cc <__libc_init_array+0x24>
 80088b8:	4d0b      	ldr	r5, [pc, #44]	@ (80088e8 <__libc_init_array+0x40>)
 80088ba:	2600      	movs	r6, #0
 80088bc:	4c0b      	ldr	r4, [pc, #44]	@ (80088ec <__libc_init_array+0x44>)
 80088be:	f000 f817 	bl	80088f0 <_init>
 80088c2:	1b64      	subs	r4, r4, r5
 80088c4:	10a4      	asrs	r4, r4, #2
 80088c6:	42a6      	cmp	r6, r4
 80088c8:	d105      	bne.n	80088d6 <__libc_init_array+0x2e>
 80088ca:	bd70      	pop	{r4, r5, r6, pc}
 80088cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80088d0:	3601      	adds	r6, #1
 80088d2:	4798      	blx	r3
 80088d4:	e7ee      	b.n	80088b4 <__libc_init_array+0xc>
 80088d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80088da:	3601      	adds	r6, #1
 80088dc:	4798      	blx	r3
 80088de:	e7f2      	b.n	80088c6 <__libc_init_array+0x1e>
 80088e0:	08008a14 	.word	0x08008a14
 80088e4:	08008a14 	.word	0x08008a14
 80088e8:	08008a14 	.word	0x08008a14
 80088ec:	08008a18 	.word	0x08008a18

080088f0 <_init>:
 80088f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f2:	bf00      	nop
 80088f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088f6:	bc08      	pop	{r3}
 80088f8:	469e      	mov	lr, r3
 80088fa:	4770      	bx	lr

080088fc <_fini>:
 80088fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fe:	bf00      	nop
 8008900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008902:	bc08      	pop	{r3}
 8008904:	469e      	mov	lr, r3
 8008906:	4770      	bx	lr
