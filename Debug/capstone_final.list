
capstone_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d568  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012b7  0800d7b8  0800d7b8  0000e7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ea70  0800ea70  0000fa70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ea78  0800ea78  0000fa78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ea7c  0800ea7c  0000fa7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  20000000  0800ea80  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000071e  2000006c  0800eaec  0001006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000606  2000078a  0800eaec  0001078a  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0001006c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024431  00000000  00000000  000100a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004778  00000000  00000000  000344d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e50  00000000  00000000  00038c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017d5  00000000  00000000  0003aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d3c0  00000000  00000000  0003c275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002914d  00000000  00000000  00079635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00175e8a  00000000  00000000  000a2782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021860c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008868  00000000  00000000  00218650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000053  00000000  00000000  00220eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000006c 	.word	0x2000006c
 800026c:	00000000 	.word	0x00000000
 8000270:	0800d7a0 	.word	0x0800d7a0

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000070 	.word	0x20000070
 800028c:	0800d7a0 	.word	0x0800d7a0

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b97e 	b.w	80005a4 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14d      	bne.n	8000368 <__udivmoddi4+0xa8>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	460f      	mov	r7, r1
 80002d0:	4684      	mov	ip, r0
 80002d2:	4696      	mov	lr, r2
 80002d4:	fab2 f382 	clz	r3, r2
 80002d8:	d960      	bls.n	800039c <__udivmoddi4+0xdc>
 80002da:	b14b      	cbz	r3, 80002f0 <__udivmoddi4+0x30>
 80002dc:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80002ea:	fa20 f202 	lsr.w	r2, r0, r2
 80002ee:	4317      	orrs	r7, r2
 80002f0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f4:	fa1f f48e 	uxth.w	r4, lr
 80002f8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002fc:	fbb7 f1f6 	udiv	r1, r7, r6
 8000300:	fb06 7711 	mls	r7, r6, r1, r7
 8000304:	fb01 f004 	mul.w	r0, r1, r4
 8000308:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800030c:	4290      	cmp	r0, r2
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x62>
 8000310:	eb1e 0202 	adds.w	r2, lr, r2
 8000314:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x60>
 800031a:	4290      	cmp	r0, r2
 800031c:	f200 812d 	bhi.w	800057a <__udivmoddi4+0x2ba>
 8000320:	4639      	mov	r1, r7
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	fa1f fc8c 	uxth.w	ip, ip
 8000328:	fbb2 f0f6 	udiv	r0, r2, r6
 800032c:	fb06 2210 	mls	r2, r6, r0, r2
 8000330:	fb00 f404 	mul.w	r4, r0, r4
 8000334:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000338:	4564      	cmp	r4, ip
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x8e>
 800033c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x8c>
 8000346:	4564      	cmp	r4, ip
 8000348:	f200 811a 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 800034c:	4610      	mov	r0, r2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	ebac 0c04 	sub.w	ip, ip, r4
 8000356:	2100      	movs	r1, #0
 8000358:	b125      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035a:	fa2c f303 	lsr.w	r3, ip, r3
 800035e:	2200      	movs	r2, #0
 8000360:	e9c5 3200 	strd	r3, r2, [r5]
 8000364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000368:	428b      	cmp	r3, r1
 800036a:	d905      	bls.n	8000378 <__udivmoddi4+0xb8>
 800036c:	b10d      	cbz	r5, 8000372 <__udivmoddi4+0xb2>
 800036e:	e9c5 0100 	strd	r0, r1, [r5]
 8000372:	2100      	movs	r1, #0
 8000374:	4608      	mov	r0, r1
 8000376:	e7f5      	b.n	8000364 <__udivmoddi4+0xa4>
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	d14d      	bne.n	800041c <__udivmoddi4+0x15c>
 8000380:	42a3      	cmp	r3, r4
 8000382:	f0c0 80f2 	bcc.w	800056a <__udivmoddi4+0x2aa>
 8000386:	4290      	cmp	r0, r2
 8000388:	f080 80ef 	bcs.w	800056a <__udivmoddi4+0x2aa>
 800038c:	4606      	mov	r6, r0
 800038e:	4623      	mov	r3, r4
 8000390:	4608      	mov	r0, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e6      	beq.n	8000364 <__udivmoddi4+0xa4>
 8000396:	e9c5 6300 	strd	r6, r3, [r5]
 800039a:	e7e3      	b.n	8000364 <__udivmoddi4+0xa4>
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 80a2 	bne.w	80004e6 <__udivmoddi4+0x226>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a8:	fa1f f68e 	uxth.w	r6, lr
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f4f7 	udiv	r4, r2, r7
 80003b2:	fb07 2014 	mls	r0, r7, r4, r2
 80003b6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb06 f004 	mul.w	r0, r6, r4
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d90f      	bls.n	80003e6 <__udivmoddi4+0x126>
 80003c6:	eb1e 0202 	adds.w	r2, lr, r2
 80003ca:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 80003ce:	bf2c      	ite	cs
 80003d0:	f04f 0901 	movcs.w	r9, #1
 80003d4:	f04f 0900 	movcc.w	r9, #0
 80003d8:	4290      	cmp	r0, r2
 80003da:	d903      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003dc:	f1b9 0f00 	cmp.w	r9, #0
 80003e0:	f000 80c8 	beq.w	8000574 <__udivmoddi4+0x2b4>
 80003e4:	4644      	mov	r4, r8
 80003e6:	1a12      	subs	r2, r2, r0
 80003e8:	fa1f fc8c 	uxth.w	ip, ip
 80003ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f0:	fb07 2210 	mls	r2, r7, r0, r2
 80003f4:	fb00 f606 	mul.w	r6, r0, r6
 80003f8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003fc:	4566      	cmp	r6, ip
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x152>
 8000400:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000404:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000408:	d202      	bcs.n	8000410 <__udivmoddi4+0x150>
 800040a:	4566      	cmp	r6, ip
 800040c:	f200 80bb 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000410:	4610      	mov	r0, r2
 8000412:	ebac 0c06 	sub.w	ip, ip, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	e79d      	b.n	8000358 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa04 fe01 	lsl.w	lr, r4, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	fa20 fc06 	lsr.w	ip, r0, r6
 800042e:	40f4      	lsrs	r4, r6
 8000430:	408a      	lsls	r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	ea4e 030c 	orr.w	r3, lr, ip
 8000438:	fa00 fe01 	lsl.w	lr, r0, r1
 800043c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb4 f0f8 	udiv	r0, r4, r8
 800044c:	fb08 4410 	mls	r4, r8, r0, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb00 f90c 	mul.w	r9, r0, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1ba>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a1      	cmp	r9, r4
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 8093 	beq.w	800059e <__udivmoddi4+0x2de>
 8000478:	4650      	mov	r0, sl
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f8 	udiv	r3, r4, r8
 8000486:	fb08 4413 	mls	r4, r8, r3, r4
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000492:	45a4      	cmp	ip, r4
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1e4>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1e2>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d87a      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a8:	eba4 040c 	sub.w	r4, r4, ip
 80004ac:	fba0 9802 	umull	r9, r8, r0, r2
 80004b0:	4544      	cmp	r4, r8
 80004b2:	46cc      	mov	ip, r9
 80004b4:	4643      	mov	r3, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1fe>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x208>
 80004ba:	45ce      	cmp	lr, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x208>
 80004be:	3801      	subs	r0, #1
 80004c0:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c4:	eb68 0307 	sbc.w	r3, r8, r7
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x222>
 80004ca:	ebbe 020c 	subs.w	r2, lr, ip
 80004ce:	eb64 0403 	sbc.w	r4, r4, r3
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	fa22 f301 	lsr.w	r3, r2, r1
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	431e      	orrs	r6, r3
 80004de:	e9c5 6400 	strd	r6, r4, [r5]
 80004e2:	2100      	movs	r1, #0
 80004e4:	e73e      	b.n	8000364 <__udivmoddi4+0xa4>
 80004e6:	fa02 fe03 	lsl.w	lr, r2, r3
 80004ea:	f1c3 0120 	rsb	r1, r3, #32
 80004ee:	fa04 f203 	lsl.w	r2, r4, r3
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	40cc      	lsrs	r4, r1
 80004f8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004fc:	fa20 f101 	lsr.w	r1, r0, r1
 8000500:	fa1f f68e 	uxth.w	r6, lr
 8000504:	fbb4 f0f7 	udiv	r0, r4, r7
 8000508:	430a      	orrs	r2, r1
 800050a:	fb07 4410 	mls	r4, r7, r0, r4
 800050e:	0c11      	lsrs	r1, r2, #16
 8000510:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000514:	fb00 f406 	mul.w	r4, r0, r6
 8000518:	428c      	cmp	r4, r1
 800051a:	d90e      	bls.n	800053a <__udivmoddi4+0x27a>
 800051c:	eb1e 0101 	adds.w	r1, lr, r1
 8000520:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8000524:	bf2c      	ite	cs
 8000526:	f04f 0901 	movcs.w	r9, #1
 800052a:	f04f 0900 	movcc.w	r9, #0
 800052e:	428c      	cmp	r4, r1
 8000530:	d902      	bls.n	8000538 <__udivmoddi4+0x278>
 8000532:	f1b9 0f00 	cmp.w	r9, #0
 8000536:	d02c      	beq.n	8000592 <__udivmoddi4+0x2d2>
 8000538:	4640      	mov	r0, r8
 800053a:	1b09      	subs	r1, r1, r4
 800053c:	b292      	uxth	r2, r2
 800053e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000542:	fb07 1114 	mls	r1, r7, r4, r1
 8000546:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054a:	fb04 f106 	mul.w	r1, r4, r6
 800054e:	4291      	cmp	r1, r2
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x2a2>
 8000552:	eb1e 0202 	adds.w	r2, lr, r2
 8000556:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 800055a:	d201      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 800055c:	4291      	cmp	r1, r2
 800055e:	d815      	bhi.n	800058c <__udivmoddi4+0x2cc>
 8000560:	4644      	mov	r4, r8
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000568:	e721      	b.n	80003ae <__udivmoddi4+0xee>
 800056a:	1a86      	subs	r6, r0, r2
 800056c:	eb64 0303 	sbc.w	r3, r4, r3
 8000570:	2001      	movs	r0, #1
 8000572:	e70e      	b.n	8000392 <__udivmoddi4+0xd2>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e735      	b.n	80003e6 <__udivmoddi4+0x126>
 800057a:	3902      	subs	r1, #2
 800057c:	4472      	add	r2, lr
 800057e:	e6d0      	b.n	8000322 <__udivmoddi4+0x62>
 8000580:	44f4      	add	ip, lr
 8000582:	3802      	subs	r0, #2
 8000584:	e6e3      	b.n	800034e <__udivmoddi4+0x8e>
 8000586:	44f4      	add	ip, lr
 8000588:	3802      	subs	r0, #2
 800058a:	e742      	b.n	8000412 <__udivmoddi4+0x152>
 800058c:	3c02      	subs	r4, #2
 800058e:	4472      	add	r2, lr
 8000590:	e7e7      	b.n	8000562 <__udivmoddi4+0x2a2>
 8000592:	3802      	subs	r0, #2
 8000594:	4471      	add	r1, lr
 8000596:	e7d0      	b.n	800053a <__udivmoddi4+0x27a>
 8000598:	3b02      	subs	r3, #2
 800059a:	443c      	add	r4, r7
 800059c:	e782      	b.n	80004a4 <__udivmoddi4+0x1e4>
 800059e:	3802      	subs	r0, #2
 80005a0:	443c      	add	r4, r7
 80005a2:	e76a      	b.n	800047a <__udivmoddi4+0x1ba>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <EXTI12_IRQHandler>:
#endif /* __GNUC__ */
static void SystemClock_Config(void);
extern void isr(void);

void EXTI12_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
    uint16_t GPIO_Pin;

    /* Get GPIO_Pin */
    if (__HAL_GPIO_EXTI_GET_IT(CONF_WINC_SPI_INT_PIN))
 80005ae:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <EXTI12_IRQHandler+0x34>)
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d105      	bne.n	80005c6 <EXTI12_IRQHandler+0x1e>
 80005ba:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <EXTI12_IRQHandler+0x34>)
 80005bc:	691b      	ldr	r3, [r3, #16]
 80005be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d002      	beq.n	80005cc <EXTI12_IRQHandler+0x24>
    {
        GPIO_Pin = CONF_WINC_SPI_INT_PIN;
 80005c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ca:	80fb      	strh	r3, [r7, #6]
    }

    HAL_GPIO_EXTI_IRQHandler(GPIO_Pin);
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 f8f6 	bl	80037c0 <HAL_GPIO_EXTI_IRQHandler>
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	46022000 	.word	0x46022000

080005e0 <wifi_cb>:
  * @retval None
  */


static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	71fb      	strb	r3, [r7, #7]
	switch (u8MsgType) {
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	2b2c      	cmp	r3, #44	@ 0x2c
 80005f0:	d002      	beq.n	80005f8 <wifi_cb+0x18>
 80005f2:	2b32      	cmp	r3, #50	@ 0x32
 80005f4:	d00e      	beq.n	8000614 <wifi_cb+0x34>
			break;
		}

		default:
		{
			break;
 80005f6:	e027      	b.n	8000648 <wifi_cb+0x68>
			tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	60bb      	str	r3, [r7, #8]
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d020      	beq.n	8000646 <wifi_cb+0x66>
			} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d11c      	bne.n	8000646 <wifi_cb+0x66>
				printf("Station disconnected\r\n");
 800060c:	4810      	ldr	r0, [pc, #64]	@ (8000650 <wifi_cb+0x70>)
 800060e:	f00c facb 	bl	800cba8 <puts>
			break;
 8000612:	e018      	b.n	8000646 <wifi_cb+0x66>
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	60fb      	str	r3, [r7, #12]
			printf("Station connected\r\n");
 8000618:	480e      	ldr	r0, [pc, #56]	@ (8000654 <wifi_cb+0x74>)
 800061a:	f00c fac5 	bl	800cba8 <puts>
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	781b      	ldrb	r3, [r3, #0]
			printf("Station IP is %u.%u.%u.%u\r\n",
 8000622:	4619      	mov	r1, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	3301      	adds	r3, #1
 8000628:	781b      	ldrb	r3, [r3, #0]
			printf("Station IP is %u.%u.%u.%u\r\n",
 800062a:	461a      	mov	r2, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	3302      	adds	r3, #2
 8000630:	781b      	ldrb	r3, [r3, #0]
			printf("Station IP is %u.%u.%u.%u\r\n",
 8000632:	4618      	mov	r0, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	3303      	adds	r3, #3
 8000638:	781b      	ldrb	r3, [r3, #0]
			printf("Station IP is %u.%u.%u.%u\r\n",
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	4603      	mov	r3, r0
 800063e:	4806      	ldr	r0, [pc, #24]	@ (8000658 <wifi_cb+0x78>)
 8000640:	f00c fa42 	bl	800cac8 <iprintf>
			break;
 8000644:	e000      	b.n	8000648 <wifi_cb+0x68>
			break;
 8000646:	bf00      	nop
		}
	}
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	0800d7b8 	.word	0x0800d7b8
 8000654:	0800d7d0 	.word	0x0800d7d0
 8000658:	0800d7e4 	.word	0x0800d7e4

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b0ac      	sub	sp, #176	@ 0xb0
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000662:	f000 ff71 	bl	8001548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000666:	f000 f8d5 	bl	8000814 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800066a:	f000 f921 	bl	80008b0 <SystemPower_Config>

  /* USER CODE BEGIN SysInit */
  UartHandle.Instance        = USARTx;
 800066e:	4b60      	ldr	r3, [pc, #384]	@ (80007f0 <main+0x194>)
 8000670:	4a60      	ldr	r2, [pc, #384]	@ (80007f4 <main+0x198>)
 8000672:	601a      	str	r2, [r3, #0]

  UartHandle.Init.BaudRate   = 115200 ; //9600
 8000674:	4b5e      	ldr	r3, [pc, #376]	@ (80007f0 <main+0x194>)
 8000676:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800067a:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800067c:	4b5c      	ldr	r3, [pc, #368]	@ (80007f0 <main+0x194>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000682:	4b5b      	ldr	r3, [pc, #364]	@ (80007f0 <main+0x194>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE; //UART_PARITY_ODD
 8000688:	4b59      	ldr	r3, [pc, #356]	@ (80007f0 <main+0x194>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800068e:	4b58      	ldr	r3, [pc, #352]	@ (80007f0 <main+0x194>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000694:	4b56      	ldr	r3, [pc, #344]	@ (80007f0 <main+0x194>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800069a:	4b55      	ldr	r3, [pc, #340]	@ (80007f0 <main+0x194>)
 800069c:	2200      	movs	r2, #0
 800069e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80006a0:	4853      	ldr	r0, [pc, #332]	@ (80007f0 <main+0x194>)
 80006a2:	f008 f9f3 	bl	8008a8c <HAL_UART_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <main+0x54>
  {
    /* Initialization Error */
    Error_Handler();
 80006ac:	f000 fbd4 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b0:	f000 fb18 	bl	8000ce4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006b4:	f000 f914 	bl	80008e0 <MX_ADC1_Init>
  MX_AES_Init();
 80006b8:	f000 f982 	bl	80009c0 <MX_AES_Init>
  MX_I2C1_Init();
 80006bc:	f000 f9ba 	bl	8000a34 <MX_I2C1_Init>
  MX_ICACHE_Init();
 80006c0:	f000 f9f6 	bl	8000ab0 <MX_ICACHE_Init>
  MX_SPI1_Init();
 80006c4:	f000 fa08 	bl	8000ad8 <MX_SPI1_Init>
  MX_UART4_Init();
 80006c8:	f000 fa74 	bl	8000bb4 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80006cc:	f000 fabe 	bl	8000c4c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 80006d0:	4b49      	ldr	r3, [pc, #292]	@ (80007f8 <main+0x19c>)
 80006d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006d6:	4a48      	ldr	r2, [pc, #288]	@ (80007f8 <main+0x19c>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006e0:	4b45      	ldr	r3, [pc, #276]	@ (80007f8 <main+0x19c>)
 80006e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __GPIOA_CLK_ENABLE();
 80006ee:	4b42      	ldr	r3, [pc, #264]	@ (80007f8 <main+0x19c>)
 80006f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006f4:	4a40      	ldr	r2, [pc, #256]	@ (80007f8 <main+0x19c>)
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006fe:	4b3e      	ldr	r3, [pc, #248]	@ (80007f8 <main+0x19c>)
 8000700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
  __GPIOB_CLK_ENABLE();
 800070c:	4b3a      	ldr	r3, [pc, #232]	@ (80007f8 <main+0x19c>)
 800070e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000712:	4a39      	ldr	r2, [pc, #228]	@ (80007f8 <main+0x19c>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800071c:	4b36      	ldr	r3, [pc, #216]	@ (80007f8 <main+0x19c>)
 800071e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /* Initialize the BSP. */
  nm_bsp_init();
 800072a:	f008 ff23 	bl	8009574 <nm_bsp_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
 800072e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000732:	2218      	movs	r2, #24
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f00c fb16 	bl	800cd68 <memset>

  /* Initialize Wi-Fi driver with data and status callbacks. */
  param.pfAppWifiCb = wifi_cb;
 800073c:	4b2f      	ldr	r3, [pc, #188]	@ (80007fc <main+0x1a0>)
 800073e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  ret = m2m_wifi_init(&param);
 8000742:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000746:	4618      	mov	r0, r3
 8000748:	f00a f9ca 	bl	800aae0 <m2m_wifi_init>
 800074c:	4603      	mov	r3, r0
 800074e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
  if (M2M_SUCCESS != ret) {
 8000752:	f997 30af 	ldrsb.w	r3, [r7, #175]	@ 0xaf
 8000756:	2b00      	cmp	r3, #0
 8000758:	d007      	beq.n	800076a <main+0x10e>
      printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
 800075a:	f997 30af 	ldrsb.w	r3, [r7, #175]	@ 0xaf
 800075e:	4619      	mov	r1, r3
 8000760:	4827      	ldr	r0, [pc, #156]	@ (8000800 <main+0x1a4>)
 8000762:	f00c f9b1 	bl	800cac8 <iprintf>
    	while (1) {}
 8000766:	bf00      	nop
 8000768:	e7fd      	b.n	8000766 <main+0x10a>
  }

  /* Initialize AP mode parameters structure with SSID, channel and OPEN security type. */
  memset(&strM2MAPConfig, 0x00, sizeof(tstrM2MAPConfig));
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	2288      	movs	r2, #136	@ 0x88
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f00c faf8 	bl	800cd68 <memset>
  strcpy((char *)&strM2MAPConfig.au8SSID, MAIN_WLAN_SSID);
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	4a21      	ldr	r2, [pc, #132]	@ (8000804 <main+0x1a8>)
 800077e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000780:	c303      	stmia	r3!, {r0, r1}
 8000782:	801a      	strh	r2, [r3, #0]
  strM2MAPConfig.u8ListenChannel = MAIN_WLAN_CHANNEL;
 8000784:	2306      	movs	r3, #6
 8000786:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  strM2MAPConfig.u8SecType = MAIN_WLAN_AUTH;
 800078a:	2302      	movs	r3, #2
 800078c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

  strM2MAPConfig.au8DHCPServerIP[0] = 192;
 8000790:	23c0      	movs	r3, #192	@ 0xc0
 8000792:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
  strM2MAPConfig.au8DHCPServerIP[1] = 168;
 8000796:	23a8      	movs	r3, #168	@ 0xa8
 8000798:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
  strM2MAPConfig.au8DHCPServerIP[2] = 1;
 800079c:	2301      	movs	r3, #1
 800079e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  strM2MAPConfig.au8DHCPServerIP[3] = 1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

  #if USE_WPA_PSK
    strcpy((char *)&strM2MAPConfig.au8Key, MAIN_WLAN_WPA_PSK_KEY);
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	3345      	adds	r3, #69	@ 0x45
 80007ae:	4a16      	ldr	r2, [pc, #88]	@ (8000808 <main+0x1ac>)
 80007b0:	6810      	ldr	r0, [r2, #0]
 80007b2:	6018      	str	r0, [r3, #0]
 80007b4:	7912      	ldrb	r2, [r2, #4]
 80007b6:	711a      	strb	r2, [r3, #4]
    strM2MAPConfig.u8KeySz = strlen(MAIN_WLAN_WPA_PSK_KEY);
 80007b8:	2304      	movs	r3, #4
 80007ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  #endif
    /* Bring up AP mode with parameters structure. */
  ret = m2m_wifi_enable_ap(&strM2MAPConfig);
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00a f9b0 	bl	800ab28 <m2m_wifi_enable_ap>
 80007c8:	4603      	mov	r3, r0
 80007ca:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
  if (M2M_SUCCESS != ret) {
 80007ce:	f997 30af 	ldrsb.w	r3, [r7, #175]	@ 0xaf
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d004      	beq.n	80007e0 <main+0x184>
    printf("main: m2m_wifi_enable_ap call error!\r\n");
 80007d6:	480d      	ldr	r0, [pc, #52]	@ (800080c <main+0x1b0>)
 80007d8:	f00c f9e6 	bl	800cba8 <puts>
    while (1) { }
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <main+0x180>
  }

  printf("AP mode started. You can connect to %s.\r\n", (char *)MAIN_WLAN_SSID);
 80007e0:	4908      	ldr	r1, [pc, #32]	@ (8000804 <main+0x1a8>)
 80007e2:	480b      	ldr	r0, [pc, #44]	@ (8000810 <main+0x1b4>)
 80007e4:	f00c f970 	bl	800cac8 <iprintf>
  while(1) {
    m2m_wifi_handle_events(NULL);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f00a f992 	bl	800ab12 <m2m_wifi_handle_events>
 80007ee:	e7fb      	b.n	80007e8 <main+0x18c>
 80007f0:	200003a8 	.word	0x200003a8
 80007f4:	40013800 	.word	0x40013800
 80007f8:	46020c00 	.word	0x46020c00
 80007fc:	080005e1 	.word	0x080005e1
 8000800:	0800d800 	.word	0x0800d800
 8000804:	0800d828 	.word	0x0800d828
 8000808:	0800d834 	.word	0x0800d834
 800080c:	0800d83c 	.word	0x0800d83c
 8000810:	0800d864 	.word	0x0800d864

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b09e      	sub	sp, #120	@ 0x78
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	2260      	movs	r2, #96	@ 0x60
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f00c faa0 	bl	800cd68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	463b      	mov	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
 8000836:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000838:	2000      	movs	r0, #0
 800083a:	f003 f9dd 	bl	8003bf8 <HAL_PWREx_ControlVoltageScaling>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000844:	f000 fb08 	bl	8000e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000848:	2312      	movs	r3, #18
 800084a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000852:	2310      	movs	r3, #16
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000856:	2301      	movs	r3, #1
 8000858:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800085a:	2310      	movs	r3, #16
 800085c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800085e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	4618      	mov	r0, r3
 800086e:	f003 fa6f 	bl	8003d50 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000878:	f000 faee 	bl	8000e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	231f      	movs	r3, #31
 800087e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f004 f935 	bl	8004b08 <HAL_RCC_ClockConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a4:	f000 fad8 	bl	8000e58 <Error_Handler>
  }
}
 80008a8:	bf00      	nop
 80008aa:	3778      	adds	r7, #120	@ 0x78
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80008b6:	f003 fa2b 	bl	8003d10 <HAL_PWREx_EnableVddIO2>

  PWR_PVDTypeDef sConfigPVD = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_7;
 80008c2:	23e0      	movs	r3, #224	@ 0xe0
 80008c4:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80008ca:	463b      	mov	r3, r7
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 f915 	bl	8003afc <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 80008d2:	f003 f981 	bl	8003bd8 <HAL_PWR_EnablePVD>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008e6:	463b      	mov	r3, r7
 80008e8:	2220      	movs	r2, #32
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f00c fa3b 	bl	800cd68 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 80008f4:	4a2f      	ldr	r2, [pc, #188]	@ (80009b4 <MX_ADC1_Init+0xd4>)
 80008f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008f8:	4b2d      	ldr	r3, [pc, #180]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80008fe:	4b2c      	ldr	r3, [pc, #176]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000904:	4b2a      	ldr	r3, [pc, #168]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800090a:	4b29      	ldr	r3, [pc, #164]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000910:	4b27      	ldr	r3, [pc, #156]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000916:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000918:	2204      	movs	r2, #4
 800091a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800091c:	4b24      	ldr	r3, [pc, #144]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 800091e:	2200      	movs	r2, #0
 8000920:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000922:	4b23      	ldr	r3, [pc, #140]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 800092a:	4b21      	ldr	r3, [pc, #132]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 800092c:	2201      	movs	r2, #1
 800092e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000930:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000932:	2200      	movs	r2, #0
 8000934:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000938:	4b1d      	ldr	r3, [pc, #116]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 800093a:	2200      	movs	r2, #0
 800093c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093e:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000940:	2200      	movs	r2, #0
 8000942:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000944:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800094c:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 800094e:	2200      	movs	r2, #0
 8000950:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000954:	2200      	movs	r2, #0
 8000956:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000958:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 800095a:	2200      	movs	r2, #0
 800095c:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000960:	2200      	movs	r2, #0
 8000962:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800096c:	4810      	ldr	r0, [pc, #64]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 800096e:	f001 f9af 	bl	8001cd0 <HAL_ADC_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000978:	f000 fa6e 	bl	8000e58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800097c:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <MX_ADC1_Init+0xd8>)
 800097e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000980:	2306      	movs	r3, #6
 8000982:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <MX_ADC1_Init+0xdc>)
 800098a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800098c:	2304      	movs	r3, #4
 800098e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 800099a:	f001 fc81 	bl	80022a0 <HAL_ADC_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80009a4:	f000 fa58 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000088 	.word	0x20000088
 80009b4:	42028000 	.word	0x42028000
 80009b8:	04000002 	.word	0x04000002
 80009bc:	ffff0000 	.word	0xffff0000

080009c0 <MX_AES_Init>:
  * @brief AES Initialization Function
  * @param None
  * @retval None
  */
static void MX_AES_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 80009c4:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <MX_AES_Init+0x60>)
 80009c6:	4a17      	ldr	r2, [pc, #92]	@ (8000a24 <MX_AES_Init+0x64>)
 80009c8:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_NO_SWAP;
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <MX_AES_Init+0x60>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <MX_AES_Init+0x60>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 80009d6:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <MX_AES_Init+0x60>)
 80009d8:	4a13      	ldr	r2, [pc, #76]	@ (8000a28 <MX_AES_Init+0x68>)
 80009da:	60da      	str	r2, [r3, #12]
  hcryp.Init.pInitVect = (uint32_t *)pInitVectAES;
 80009dc:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <MX_AES_Init+0x60>)
 80009de:	4a13      	ldr	r2, [pc, #76]	@ (8000a2c <MX_AES_Init+0x6c>)
 80009e0:	611a      	str	r2, [r3, #16]
  hcryp.Init.Algorithm = CRYP_AES_GCM_GMAC;
 80009e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_AES_Init+0x60>)
 80009e4:	2260      	movs	r2, #96	@ 0x60
 80009e6:	615a      	str	r2, [r3, #20]
  hcryp.Init.Header = (uint32_t *)HeaderAES;
 80009e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a20 <MX_AES_Init+0x60>)
 80009ea:	4a11      	ldr	r2, [pc, #68]	@ (8000a30 <MX_AES_Init+0x70>)
 80009ec:	619a      	str	r2, [r3, #24]
  hcryp.Init.HeaderSize = 1;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_AES_Init+0x60>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	61da      	str	r2, [r3, #28]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <MX_AES_Init+0x60>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_WORD;
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_AES_Init+0x60>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 8000a00:	4b07      	ldr	r3, [pc, #28]	@ (8000a20 <MX_AES_Init+0x60>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hcryp.Init.KeyMode = CRYP_KEYMODE_NORMAL;
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_AES_Init+0x60>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	@ (8000a20 <MX_AES_Init+0x60>)
 8000a0e:	f002 fc2b 	bl	8003268 <HAL_CRYP_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_AES_Init+0x5c>
  {
    Error_Handler();
 8000a18:	f000 fa1e 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000114 	.word	0x20000114
 8000a24:	420c0000 	.word	0x420c0000
 8000a28:	2000017c 	.word	0x2000017c
 8000a2c:	2000018c 	.word	0x2000018c
 8000a30:	0800e6a8 	.word	0x0800e6a8

08000a34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000aac <MX_I2C1_Init+0x78>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a40:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000a44:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a58:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a5e:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a64:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a70:	480d      	ldr	r0, [pc, #52]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a72:	f002 fee1 	bl	8003838 <HAL_I2C_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a7c:	f000 f9ec 	bl	8000e58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	4809      	ldr	r0, [pc, #36]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a84:	f002 ff73 	bl	800396e <HAL_I2CEx_ConfigAnalogFilter>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a8e:	f000 f9e3 	bl	8000e58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a92:	2100      	movs	r1, #0
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a96:	f002 ffb5 	bl	8003a04 <HAL_I2CEx_ConfigDigitalFilter>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000aa0:	f000 f9da 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000019c 	.word	0x2000019c
 8000aac:	40005400 	.word	0x40005400

08000ab0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f002 fff1 	bl	8003a9c <HAL_ICACHE_ConfigAssociativityMode>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000ac0:	f000 f9ca 	bl	8000e58 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000ac4:	f003 f80a 	bl	8003adc <HAL_ICACHE_Enable>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000ace:	f000 f9c3 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ae8:	4b30      	ldr	r3, [pc, #192]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000aea:	4a31      	ldr	r2, [pc, #196]	@ (8000bb0 <MX_SPI1_Init+0xd8>)
 8000aec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aee:	4b2f      	ldr	r3, [pc, #188]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000af0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000af4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000af6:	4b2d      	ldr	r3, [pc, #180]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000afc:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000afe:	2203      	movs	r2, #3
 8000b00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b02:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b08:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b0e:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b10:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b22:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b28:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b42:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b48:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b4e:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b54:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b72:	480e      	ldr	r0, [pc, #56]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b74:	f007 faf0 	bl	8008158 <HAL_SPI_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8000b7e:	f000 f96b 	bl	8000e58 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000b86:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b8a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b96:	f007 ff38 	bl	8008a0a <HAL_SPIEx_SetConfigAutonomousMode>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8000ba0:	f000 f95a 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200001f0 	.word	0x200001f0
 8000bb0:	40013000 	.word	0x40013000

08000bb4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bb8:	4b22      	ldr	r3, [pc, #136]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bba:	4a23      	ldr	r2, [pc, #140]	@ (8000c48 <MX_UART4_Init+0x94>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b17      	ldr	r3, [pc, #92]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bea:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bfc:	4811      	ldr	r0, [pc, #68]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bfe:	f007 ff45 	bl	8008a8c <HAL_UART_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000c08:	f000 f926 	bl	8000e58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	480d      	ldr	r0, [pc, #52]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000c10:	f008 fb92 	bl	8009338 <HAL_UARTEx_SetTxFifoThreshold>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000c1a:	f000 f91d 	bl	8000e58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4808      	ldr	r0, [pc, #32]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000c22:	f008 fbc7 	bl	80093b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000c2c:	f000 f914 	bl	8000e58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000c30:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000c32:	f008 fb48 	bl	80092c6 <HAL_UARTEx_DisableFifoMode>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c3c:	f000 f90c 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000280 	.word	0x20000280
 8000c48:	40004c00 	.word	0x40004c00

08000c4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c50:	4b22      	ldr	r3, [pc, #136]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c52:	4a23      	ldr	r2, [pc, #140]	@ (8000ce0 <MX_USART1_UART_Init+0x94>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c56:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c82:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c94:	4811      	ldr	r0, [pc, #68]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c96:	f007 fef9 	bl	8008a8c <HAL_UART_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ca0:	f000 f8da 	bl	8000e58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000ca8:	f008 fb46 	bl	8009338 <HAL_UARTEx_SetTxFifoThreshold>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cb2:	f000 f8d1 	bl	8000e58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4808      	ldr	r0, [pc, #32]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000cba:	f008 fb7b 	bl	80093b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cc4:	f000 f8c8 	bl	8000e58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000cca:	f008 fafc 	bl	80092c6 <HAL_UARTEx_DisableFifoMode>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cd4:	f000 f8c0 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000314 	.word	0x20000314
 8000ce0:	40013800 	.word	0x40013800

08000ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	@ 0x28
 8000ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b52      	ldr	r3, [pc, #328]	@ (8000e44 <MX_GPIO_Init+0x160>)
 8000cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d00:	4a50      	ldr	r2, [pc, #320]	@ (8000e44 <MX_GPIO_Init+0x160>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d0a:	4b4e      	ldr	r3, [pc, #312]	@ (8000e44 <MX_GPIO_Init+0x160>)
 8000d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b4a      	ldr	r3, [pc, #296]	@ (8000e44 <MX_GPIO_Init+0x160>)
 8000d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d1e:	4a49      	ldr	r2, [pc, #292]	@ (8000e44 <MX_GPIO_Init+0x160>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d28:	4b46      	ldr	r3, [pc, #280]	@ (8000e44 <MX_GPIO_Init+0x160>)
 8000d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	4b43      	ldr	r3, [pc, #268]	@ (8000e44 <MX_GPIO_Init+0x160>)
 8000d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d3c:	4a41      	ldr	r2, [pc, #260]	@ (8000e44 <MX_GPIO_Init+0x160>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d46:	4b3f      	ldr	r3, [pc, #252]	@ (8000e44 <MX_GPIO_Init+0x160>)
 8000d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d54:	4b3b      	ldr	r3, [pc, #236]	@ (8000e44 <MX_GPIO_Init+0x160>)
 8000d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d5a:	4a3a      	ldr	r2, [pc, #232]	@ (8000e44 <MX_GPIO_Init+0x160>)
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d64:	4b37      	ldr	r3, [pc, #220]	@ (8000e44 <MX_GPIO_Init+0x160>)
 8000d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d72:	4b34      	ldr	r3, [pc, #208]	@ (8000e44 <MX_GPIO_Init+0x160>)
 8000d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d78:	4a32      	ldr	r2, [pc, #200]	@ (8000e44 <MX_GPIO_Init+0x160>)
 8000d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d82:	4b30      	ldr	r3, [pc, #192]	@ (8000e44 <MX_GPIO_Init+0x160>)
 8000d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_CHIP_ENABLE_GPIO_Port, WIFI_CHIP_ENABLE_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d96:	482c      	ldr	r0, [pc, #176]	@ (8000e48 <MX_GPIO_Init+0x164>)
 8000d98:	f002 fcfa 	bl	8003790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WIFI_RESET_Pin|WIFI_CS_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8000da2:	482a      	ldr	r0, [pc, #168]	@ (8000e4c <MX_GPIO_Init+0x168>)
 8000da4:	f002 fcf4 	bl	8003790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_WAKE_GPIO_Port, WIFI_WAKE_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2140      	movs	r1, #64	@ 0x40
 8000dac:	4828      	ldr	r0, [pc, #160]	@ (8000e50 <MX_GPIO_Init+0x16c>)
 8000dae:	f002 fcef 	bl	8003790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WIFI_CHIP_ENABLE_Pin */
  GPIO_InitStruct.Pin = WIFI_CHIP_ENABLE_Pin;
 8000db2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_CHIP_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481f      	ldr	r0, [pc, #124]	@ (8000e48 <MX_GPIO_Init+0x164>)
 8000dcc:	f002 fb08 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_RESET_Pin WIFI_CS_Pin */
  GPIO_InitStruct.Pin = WIFI_RESET_Pin|WIFI_CS_Pin;
 8000dd0:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4818      	ldr	r0, [pc, #96]	@ (8000e4c <MX_GPIO_Init+0x168>)
 8000dea:	f002 faf9 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = WIFI_INTERRUPT_Pin;
 8000dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df4:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <MX_GPIO_Init+0x170>)
 8000df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WIFI_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4812      	ldr	r0, [pc, #72]	@ (8000e4c <MX_GPIO_Init+0x168>)
 8000e04:	f002 faec 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_WAKE_Pin */
  GPIO_InitStruct.Pin = WIFI_WAKE_Pin;
 8000e08:	2340      	movs	r3, #64	@ 0x40
 8000e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_WAKE_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480c      	ldr	r0, [pc, #48]	@ (8000e50 <MX_GPIO_Init+0x16c>)
 8000e20:	f002 fade 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e24:	2380      	movs	r3, #128	@ 0x80
 8000e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	4804      	ldr	r0, [pc, #16]	@ (8000e48 <MX_GPIO_Init+0x164>)
 8000e38:	f002 fad2 	bl	80033e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	@ 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	46020c00 	.word	0x46020c00
 8000e48:	42020400 	.word	0x42020400
 8000e4c:	42020c00 	.word	0x42020c00
 8000e50:	42020800 	.word	0x42020800
 8000e54:	10110000 	.word	0x10110000

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <Error_Handler+0x8>

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <HAL_MspInit+0x30>)
 8000e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e70:	4a08      	ldr	r2, [pc, #32]	@ (8000e94 <HAL_MspInit+0x30>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000e7a:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_MspInit+0x30>)
 8000e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000e88:	f002 ff52 	bl	8003d30 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	46020c00 	.word	0x46020c00

08000e98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0c0      	sub	sp, #256	@ 0x100
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb0:	f107 0310 	add.w	r3, r7, #16
 8000eb4:	22d8      	movs	r2, #216	@ 0xd8
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f00b ff55 	bl	800cd68 <memset>
  if(hadc->Instance==ADC1)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a24      	ldr	r2, [pc, #144]	@ (8000f54 <HAL_ADC_MspInit+0xbc>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d140      	bne.n	8000f4a <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000ec8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ecc:	f04f 0300 	mov.w	r3, #0
 8000ed0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000ed4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ed8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f004 f9e1 	bl	80052a8 <HAL_RCCEx_PeriphCLKConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000eec:	f7ff ffb4 	bl	8000e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ef0:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <HAL_ADC_MspInit+0xc0>)
 8000ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ef6:	4a18      	ldr	r2, [pc, #96]	@ (8000f58 <HAL_ADC_MspInit+0xc0>)
 8000ef8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000efc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f00:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <HAL_ADC_MspInit+0xc0>)
 8000f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <HAL_ADC_MspInit+0xc0>)
 8000f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f14:	4a10      	ldr	r2, [pc, #64]	@ (8000f58 <HAL_ADC_MspInit+0xc0>)
 8000f16:	f043 0304 	orr.w	r3, r3, #4
 8000f1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <HAL_ADC_MspInit+0xc0>)
 8000f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f32:	2303      	movs	r3, #3
 8000f34:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <HAL_ADC_MspInit+0xc4>)
 8000f46:	f002 fa4b 	bl	80033e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	42028000 	.word	0x42028000
 8000f58:	46020c00 	.word	0x46020c00
 8000f5c:	42020800 	.word	0x42020800

08000f60 <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f9c <HAL_CRYP_MspInit+0x3c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d10e      	bne.n	8000f90 <HAL_CRYP_MspInit+0x30>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 8000f72:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <HAL_CRYP_MspInit+0x40>)
 8000f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f78:	4a09      	ldr	r2, [pc, #36]	@ (8000fa0 <HAL_CRYP_MspInit+0x40>)
 8000f7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <HAL_CRYP_MspInit+0x40>)
 8000f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	420c0000 	.word	0x420c0000
 8000fa0:	46020c00 	.word	0x46020c00

08000fa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0c0      	sub	sp, #256	@ 0x100
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	22d8      	movs	r2, #216	@ 0xd8
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f00b fecf 	bl	800cd68 <memset>
  if(hi2c->Instance==I2C1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a27      	ldr	r2, [pc, #156]	@ (800106c <HAL_I2C_MspInit+0xc8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d145      	bne.n	8001060 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fd4:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8000fd8:	f04f 0300 	mov.w	r3, #0
 8000fdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f004 f95d 	bl	80052a8 <HAL_RCCEx_PeriphCLKConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000ff4:	f7ff ff30 	bl	8000e58 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <HAL_I2C_MspInit+0xcc>)
 8000ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8001070 <HAL_I2C_MspInit+0xcc>)
 8001000:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001004:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001008:	4b19      	ldr	r3, [pc, #100]	@ (8001070 <HAL_I2C_MspInit+0xcc>)
 800100a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800100e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001016:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800101a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101e:	2312      	movs	r3, #18
 8001020:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001030:	2304      	movs	r3, #4
 8001032:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001036:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800103a:	4619      	mov	r1, r3
 800103c:	480d      	ldr	r0, [pc, #52]	@ (8001074 <HAL_I2C_MspInit+0xd0>)
 800103e:	f002 f9cf 	bl	80033e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <HAL_I2C_MspInit+0xcc>)
 8001044:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001048:	4a09      	ldr	r2, [pc, #36]	@ (8001070 <HAL_I2C_MspInit+0xcc>)
 800104a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800104e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001052:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <HAL_I2C_MspInit+0xcc>)
 8001054:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001060:	bf00      	nop
 8001062:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40005400 	.word	0x40005400
 8001070:	46020c00 	.word	0x46020c00
 8001074:	42021800 	.word	0x42021800

08001078 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b0c0      	sub	sp, #256	@ 0x100
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	22d8      	movs	r2, #216	@ 0xd8
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f00b fe65 	bl	800cd68 <memset>
  if(hspi->Instance==SPI1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a27      	ldr	r2, [pc, #156]	@ (8001140 <HAL_SPI_MspInit+0xc8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d146      	bne.n	8001136 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80010b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80010b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 f8f1 	bl	80052a8 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80010cc:	f7ff fec4 	bl	8000e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001144 <HAL_SPI_MspInit+0xcc>)
 80010d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80010d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001144 <HAL_SPI_MspInit+0xcc>)
 80010d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010dc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <HAL_SPI_MspInit+0xcc>)
 80010e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80010e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <HAL_SPI_MspInit+0xcc>)
 80010f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010f4:	4a13      	ldr	r2, [pc, #76]	@ (8001144 <HAL_SPI_MspInit+0xcc>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010fe:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <HAL_SPI_MspInit+0xcc>)
 8001100:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = WIFI_SCK_Pin|WIFI_MISO_Pin|WIFI_MOSI_Pin;
 800110c:	23e0      	movs	r3, #224	@ 0xe0
 800110e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001124:	2305      	movs	r3, #5
 8001126:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	@ (8001148 <HAL_SPI_MspInit+0xd0>)
 8001132:	f002 f955 	bl	80033e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001136:	bf00      	nop
 8001138:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40013000 	.word	0x40013000
 8001144:	46020c00 	.word	0x46020c00
 8001148:	42020000 	.word	0x42020000

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b0c2      	sub	sp, #264	@ 0x108
 8001150:	af00      	add	r7, sp, #0
 8001152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001156:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800115a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800116c:	f107 0318 	add.w	r3, r7, #24
 8001170:	22d8      	movs	r2, #216	@ 0xd8
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f00b fdf7 	bl	800cd68 <memset>
  if(huart->Instance==UART4)
 800117a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800117e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a52      	ldr	r2, [pc, #328]	@ (80012d0 <HAL_UART_MspInit+0x184>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d145      	bne.n	8001218 <HAL_UART_MspInit+0xcc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800118c:	f04f 0208 	mov.w	r2, #8
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001198:	2300      	movs	r3, #0
 800119a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119c:	f107 0318 	add.w	r3, r7, #24
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 f881 	bl	80052a8 <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 80011ac:	f7ff fe54 	bl	8000e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011b0:	4b48      	ldr	r3, [pc, #288]	@ (80012d4 <HAL_UART_MspInit+0x188>)
 80011b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80011b6:	4a47      	ldr	r2, [pc, #284]	@ (80012d4 <HAL_UART_MspInit+0x188>)
 80011b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011bc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80011c0:	4b44      	ldr	r3, [pc, #272]	@ (80012d4 <HAL_UART_MspInit+0x188>)
 80011c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80011c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	4b41      	ldr	r3, [pc, #260]	@ (80012d4 <HAL_UART_MspInit+0x188>)
 80011d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011d4:	4a3f      	ldr	r2, [pc, #252]	@ (80012d4 <HAL_UART_MspInit+0x188>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011de:	4b3d      	ldr	r3, [pc, #244]	@ (80012d4 <HAL_UART_MspInit+0x188>)
 80011e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011ec:	2303      	movs	r3, #3
 80011ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001204:	2308      	movs	r3, #8
 8001206:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800120e:	4619      	mov	r1, r3
 8001210:	4831      	ldr	r0, [pc, #196]	@ (80012d8 <HAL_UART_MspInit+0x18c>)
 8001212:	f002 f8e5 	bl	80033e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001216:	e056      	b.n	80012c6 <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==USART1)
 8001218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800121c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a2d      	ldr	r2, [pc, #180]	@ (80012dc <HAL_UART_MspInit+0x190>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d14d      	bne.n	80012c6 <HAL_UART_MspInit+0x17a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800122a:	f04f 0201 	mov.w	r2, #1
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001236:	2300      	movs	r3, #0
 8001238:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123a:	f107 0318 	add.w	r3, r7, #24
 800123e:	4618      	mov	r0, r3
 8001240:	f004 f832 	bl	80052a8 <HAL_RCCEx_PeriphCLKConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_UART_MspInit+0x102>
      Error_Handler();
 800124a:	f7ff fe05 	bl	8000e58 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800124e:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <HAL_UART_MspInit+0x188>)
 8001250:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001254:	4a1f      	ldr	r2, [pc, #124]	@ (80012d4 <HAL_UART_MspInit+0x188>)
 8001256:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800125a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800125e:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <HAL_UART_MspInit+0x188>)
 8001260:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001264:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <HAL_UART_MspInit+0x188>)
 800126e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001272:	4a18      	ldr	r2, [pc, #96]	@ (80012d4 <HAL_UART_MspInit+0x188>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800127c:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <HAL_UART_MspInit+0x188>)
 800127e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001282:	f003 0201 	and.w	r2, r3, #1
 8001286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800128a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001294:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001298:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800129a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800129e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012b4:	2307      	movs	r3, #7
 80012b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <HAL_UART_MspInit+0x18c>)
 80012c2:	f002 f88d 	bl	80033e0 <HAL_GPIO_Init>
}
 80012c6:	bf00      	nop
 80012c8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40004c00 	.word	0x40004c00
 80012d4:	46020c00 	.word	0x46020c00
 80012d8:	42020000 	.word	0x42020000
 80012dc:	40013800 	.word	0x40013800

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <NMI_Handler+0x4>

080012e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <MemManage_Handler+0x4>

080012f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <UsageFault_Handler+0x4>

08001308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001336:	f000 f9ad 	bl	8001694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}

0800133e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	60f8      	str	r0, [r7, #12]
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	e00a      	b.n	8001366 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001350:	f3af 8000 	nop.w
 8001354:	4601      	mov	r1, r0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	60ba      	str	r2, [r7, #8]
 800135c:	b2ca      	uxtb	r2, r1
 800135e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	3301      	adds	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	429a      	cmp	r2, r3
 800136c:	dbf0      	blt.n	8001350 <_read+0x12>
  }

  return len;
 800136e:	687b      	ldr	r3, [r7, #4]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	e009      	b.n	800139e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	60ba      	str	r2, [r7, #8]
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	3301      	adds	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	dbf1      	blt.n	800138a <_write+0x12>
  }
  return len;
 80013a6:	687b      	ldr	r3, [r7, #4]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_close>:

int _close(int file)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013d8:	605a      	str	r2, [r3, #4]
  return 0;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_isatty>:

int _isatty(int file)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013f0:	2301      	movs	r3, #1
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013fe:	b480      	push	{r7}
 8001400:	b085      	sub	sp, #20
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001420:	4a14      	ldr	r2, [pc, #80]	@ (8001474 <_sbrk+0x5c>)
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <_sbrk+0x60>)
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800142c:	4b13      	ldr	r3, [pc, #76]	@ (800147c <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <_sbrk+0x64>)
 8001436:	4a12      	ldr	r2, [pc, #72]	@ (8001480 <_sbrk+0x68>)
 8001438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <_sbrk+0x64>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	429a      	cmp	r2, r3
 8001446:	d207      	bcs.n	8001458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001448:	f00b fcec 	bl	800ce24 <__errno>
 800144c:	4603      	mov	r3, r0
 800144e:	220c      	movs	r2, #12
 8001450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001456:	e009      	b.n	800146c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001458:	4b08      	ldr	r3, [pc, #32]	@ (800147c <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800145e:	4b07      	ldr	r3, [pc, #28]	@ (800147c <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	4a05      	ldr	r2, [pc, #20]	@ (800147c <_sbrk+0x64>)
 8001468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20270000 	.word	0x20270000
 8001478:	00000400 	.word	0x00000400
 800147c:	2000043c 	.word	0x2000043c
 8001480:	20000790 	.word	0x20000790

08001484 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001488:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <SystemInit+0x68>)
 800148a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800148e:	4a17      	ldr	r2, [pc, #92]	@ (80014ec <SystemInit+0x68>)
 8001490:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001494:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <SystemInit+0x6c>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800149e:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <SystemInit+0x6c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <SystemInit+0x6c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <SystemInit+0x6c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <SystemInit+0x6c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0e      	ldr	r2, [pc, #56]	@ (80014f0 <SystemInit+0x6c>)
 80014b6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80014ba:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80014be:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <SystemInit+0x6c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <SystemInit+0x6c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a09      	ldr	r2, [pc, #36]	@ (80014f0 <SystemInit+0x6c>)
 80014cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80014d2:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <SystemInit+0x6c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014d8:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <SystemInit+0x68>)
 80014da:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014de:	609a      	str	r2, [r3, #8]
  #endif
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00
 80014f0:	46020c00 	.word	0x46020c00

080014f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80014f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800152c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014f8:	f7ff ffc4 	bl	8001484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014fe:	e003      	b.n	8001508 <LoopCopyDataInit>

08001500 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001500:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001502:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001504:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001506:	3104      	adds	r1, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001508:	480a      	ldr	r0, [pc, #40]	@ (8001534 <LoopForever+0xa>)
	ldr	r3, =_edata
 800150a:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <LoopForever+0xe>)
	adds	r2, r0, r1
 800150c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800150e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001510:	d3f6      	bcc.n	8001500 <CopyDataInit>
	ldr	r2, =_sbss
 8001512:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001514:	e002      	b.n	800151c <LoopFillZerobss>

08001516 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001516:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001518:	f842 3b04 	str.w	r3, [r2], #4

0800151c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800151c:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <LoopForever+0x16>)
	cmp	r2, r3
 800151e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001520:	d3f9      	bcc.n	8001516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001522:	f00b fc85 	bl	800ce30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001526:	f7ff f899 	bl	800065c <main>

0800152a <LoopForever>:

LoopForever:
    b LoopForever
 800152a:	e7fe      	b.n	800152a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800152c:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8001530:	0800ea80 	.word	0x0800ea80
	ldr	r0, =_sdata
 8001534:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001538:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 800153c:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 8001540:	2000078a 	.word	0x2000078a

08001544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC1_2_IRQHandler>
	...

08001548 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <HAL_Init+0x50>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a11      	ldr	r2, [pc, #68]	@ (8001598 <HAL_Init+0x50>)
 8001552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f001 fd90 	bl	800307e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800155e:	f003 fcc5 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8001562:	4602      	mov	r2, r0
 8001564:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <HAL_Init+0x54>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	f003 030f 	and.w	r3, r3, #15
 800156c:	490c      	ldr	r1, [pc, #48]	@ (80015a0 <HAL_Init+0x58>)
 800156e:	5ccb      	ldrb	r3, [r1, r3]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
 8001574:	4a0b      	ldr	r2, [pc, #44]	@ (80015a4 <HAL_Init+0x5c>)
 8001576:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001578:	2004      	movs	r0, #4
 800157a:	f001 fde3 	bl	8003144 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800157e:	200f      	movs	r0, #15
 8001580:	f000 f812 	bl	80015a8 <HAL_InitTick>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e002      	b.n	8001594 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800158e:	f7ff fc69 	bl	8000e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40022000 	.word	0x40022000
 800159c:	46020c00 	.word	0x46020c00
 80015a0:	0800e6ac 	.word	0x0800e6ac
 80015a4:	20000000 	.word	0x20000000

080015a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80015b4:	4b33      	ldr	r3, [pc, #204]	@ (8001684 <HAL_InitTick+0xdc>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e05c      	b.n	800167a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80015c0:	4b31      	ldr	r3, [pc, #196]	@ (8001688 <HAL_InitTick+0xe0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d10c      	bne.n	80015e6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80015cc:	4b2f      	ldr	r3, [pc, #188]	@ (800168c <HAL_InitTick+0xe4>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001684 <HAL_InitTick+0xdc>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	e037      	b.n	8001656 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80015e6:	f001 fe05 	bl	80031f4 <HAL_SYSTICK_GetCLKSourceConfig>
 80015ea:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d023      	beq.n	800163a <HAL_InitTick+0x92>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d82d      	bhi.n	8001654 <HAL_InitTick+0xac>
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_InitTick+0x5e>
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d00d      	beq.n	8001620 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001604:	e026      	b.n	8001654 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <HAL_InitTick+0xe4>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b1e      	ldr	r3, [pc, #120]	@ (8001684 <HAL_InitTick+0xdc>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001614:	fbb3 f3f1 	udiv	r3, r3, r1
 8001618:	fbb2 f3f3 	udiv	r3, r2, r3
 800161c:	60fb      	str	r3, [r7, #12]
        break;
 800161e:	e01a      	b.n	8001656 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001620:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <HAL_InitTick+0xdc>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800162a:	fbb3 f3f2 	udiv	r3, r3, r2
 800162e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	60fb      	str	r3, [r7, #12]
        break;
 8001638:	e00d      	b.n	8001656 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800163a:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <HAL_InitTick+0xdc>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001644:	fbb3 f3f2 	udiv	r3, r3, r2
 8001648:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800164c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001650:	60fb      	str	r3, [r7, #12]
        break;
 8001652:	e000      	b.n	8001656 <HAL_InitTick+0xae>
        break;
 8001654:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f001 fd52 	bl	8003100 <HAL_SYSTICK_Config>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e009      	b.n	800167a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001666:	2200      	movs	r2, #0
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800166e:	f001 fd11 	bl	8003094 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001672:	4a07      	ldr	r2, [pc, #28]	@ (8001690 <HAL_InitTick+0xe8>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000008 	.word	0x20000008
 8001688:	e000e010 	.word	0xe000e010
 800168c:	20000000 	.word	0x20000000
 8001690:	20000004 	.word	0x20000004

08001694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_IncTick+0x20>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <HAL_IncTick+0x24>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a04      	ldr	r2, [pc, #16]	@ (80016b8 <HAL_IncTick+0x24>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000008 	.word	0x20000008
 80016b8:	20000440 	.word	0x20000440

080016bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <HAL_GetTick+0x14>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000440 	.word	0x20000440

080016d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff ffee 	bl	80016bc <HAL_GetTick>
 80016e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016ec:	d005      	beq.n	80016fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <HAL_Delay+0x44>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016fa:	bf00      	nop
 80016fc:	f7ff ffde 	bl	80016bc <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	d8f7      	bhi.n	80016fc <HAL_Delay+0x28>
  {
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000008 	.word	0x20000008

0800171c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	609a      	str	r2, [r3, #8]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	609a      	str	r2, [r3, #8]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <LL_ADC_SetResolution+0x3c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d104      	bne.n	80017a4 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3b01      	subs	r3, #1
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f023 020c 	bic.w	r2, r3, #12
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	60da      	str	r2, [r3, #12]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	46021000 	.word	0x46021000

080017c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3360      	adds	r3, #96	@ 0x60
 80017d6:	461a      	mov	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	430b      	orrs	r3, r1
 80017f4:	431a      	orrs	r2, r3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80017fa:	bf00      	nop
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001806:	b480      	push	{r7}
 8001808:	b085      	sub	sp, #20
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3360      	adds	r3, #96	@ 0x60
 8001814:	461a      	mov	r2, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8001826:	4618      	mov	r0, r3
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001832:	b480      	push	{r7}
 8001834:	b087      	sub	sp, #28
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3360      	adds	r3, #96	@ 0x60
 8001842:	461a      	mov	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	431a      	orrs	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	601a      	str	r2, [r3, #0]
}
 800185c:	bf00      	nop
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3360      	adds	r3, #96	@ 0x60
 8001878:	461a      	mov	r2, r3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	431a      	orrs	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	601a      	str	r2, [r3, #0]
}
 8001892:	bf00      	nop
 8001894:	371c      	adds	r7, #28
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800189e:	b480      	push	{r7}
 80018a0:	b087      	sub	sp, #28
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3360      	adds	r3, #96	@ 0x60
 80018ae:	461a      	mov	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	431a      	orrs	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	601a      	str	r2, [r3, #0]
}
 80018c8:	bf00      	nop
 80018ca:	371c      	adds	r7, #28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018e6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	2a00      	cmp	r2, #0
 80018fe:	d002      	beq.n	8001906 <LL_ADC_SetGainCompensation+0x32>
 8001900:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001904:	e000      	b.n	8001908 <LL_ADC_SetGainCompensation+0x34>
 8001906:	2200      	movs	r2, #0
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	671a      	str	r2, [r3, #112]	@ 0x70
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800191a:	b480      	push	{r7}
 800191c:	b085      	sub	sp, #20
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2107      	movs	r1, #7
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	401a      	ands	r2, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	431a      	orrs	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	@ 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4a2b      	ldr	r2, [pc, #172]	@ (8001a14 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d020      	beq.n	80019ae <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3330      	adds	r3, #48	@ 0x30
 8001970:	461a      	mov	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	4413      	add	r3, r2
 800197e:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	211f      	movs	r1, #31
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	401a      	ands	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	0e9b      	lsrs	r3, r3, #26
 8001998:	f003 011f 	and.w	r1, r3, #31
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	431a      	orrs	r2, r3
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 80019ac:	e02b      	b.n	8001a06 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	210f      	movs	r1, #15
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	401a      	ands	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d104      	bne.n	80019d6 <LL_ADC_REG_SetSequencerRanks+0x7e>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	0e9b      	lsrs	r3, r3, #26
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	e010      	b.n	80019f8 <LL_ADC_REG_SetSequencerRanks+0xa0>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	fa93 f3a3 	rbit	r3, r3
 80019e0:	613b      	str	r3, [r7, #16]
  return result;
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 80019ec:	2320      	movs	r3, #32
 80019ee:	e003      	b.n	80019f8 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fab3 f383 	clz	r3, r3
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	f001 011f 	and.w	r1, r1, #31
 80019fe:	408b      	lsls	r3, r1
 8001a00:	431a      	orrs	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a06:	bf00      	nop
 8001a08:	3724      	adds	r7, #36	@ 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	46021000 	.word	0x46021000

08001a18 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d107      	bne.n	8001a3c <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	0e9b      	lsrs	r3, r3, #26
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	2201      	movs	r2, #1
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	e015      	b.n	8001a68 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	60fb      	str	r3, [r7, #12]
  return result;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001a52:	2320      	movs	r3, #32
 8001a54:	e003      	b.n	8001a5e <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	fab3 f383 	clz	r3, r3
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	f003 031f 	and.w	r3, r3, #31
 8001a62:	2201      	movs	r2, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	0e9b      	lsrs	r3, r3, #26
 8001a90:	f003 031f 	and.w	r3, r3, #31
 8001a94:	2101      	movs	r1, #1
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b08b      	sub	sp, #44	@ 0x2c
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4a2d      	ldr	r2, [pc, #180]	@ (8001b74 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d042      	beq.n	8001b4a <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d104      	bne.n	8001ad8 <LL_ADC_SetChannelSamplingTime+0x28>
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	0e9b      	lsrs	r3, r3, #26
 8001ad2:	f003 021f 	and.w	r2, r3, #31
 8001ad6:	e011      	b.n	8001afc <LL_ADC_SetChannelSamplingTime+0x4c>
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	617b      	str	r3, [r7, #20]
  return result;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8001aee:	2320      	movs	r3, #32
 8001af0:	e003      	b.n	8001afa <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fab3 f383 	clz	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	0e5b      	lsrs	r3, r3, #25
 8001b00:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001b04:	460b      	mov	r3, r1
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	1ad2      	subs	r2, r2, r3
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3314      	adds	r3, #20
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	0e5b      	lsrs	r3, r3, #25
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	4413      	add	r3, r2
 8001b28:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	2107      	movs	r1, #7
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	401a      	ands	r2, r3
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	431a      	orrs	r2, r3
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001b48:	e00e      	b.n	8001b68 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	43db      	mvns	r3, r3
 8001b54:	401a      	ands	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	0219      	lsls	r1, r3, #8
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	400b      	ands	r3, r1
 8001b5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b62:	431a      	orrs	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	615a      	str	r2, [r3, #20]
}
 8001b68:	bf00      	nop
 8001b6a:	372c      	adds	r7, #44	@ 0x2c
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	46021000 	.word	0x46021000

08001b78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001b90:	43db      	mvns	r3, r3
 8001b92:	401a      	ands	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0318 	and.w	r3, r3, #24
 8001b9a:	4908      	ldr	r1, [pc, #32]	@ (8001bbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b9c:	40d9      	lsrs	r1, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	400b      	ands	r3, r1
 8001ba2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	000fffff 	.word	0x000fffff

08001bc0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001bd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6093      	str	r3, [r2, #8]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bf8:	d101      	bne.n	8001bfe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c20:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	609a      	str	r2, [r3, #8]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c48:	d101      	bne.n	8001c4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <LL_ADC_IsEnabled+0x18>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <LL_ADC_IsEnabled+0x1a>
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d101      	bne.n	8001c9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d101      	bne.n	8001cc0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b08b      	sub	sp, #44	@ 0x2c
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e2ce      	b.n	800228e <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a95      	ldr	r2, [pc, #596]	@ (8001f54 <HAL_ADC_Init+0x284>)
 8001cfe:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff f8c5 	bl	8000e98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff5f 	bl	8001be4 <LL_ADC_IsDeepPowerDownEnabled>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff45 	bl	8001bc0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff7a 	bl	8001c34 <LL_ADC_IsInternalRegulatorEnabled>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d115      	bne.n	8001d72 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff5e 	bl	8001c0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d50:	4b81      	ldr	r3, [pc, #516]	@ (8001f58 <HAL_ADC_Init+0x288>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	099b      	lsrs	r3, r3, #6
 8001d56:	4a81      	ldr	r2, [pc, #516]	@ (8001f5c <HAL_ADC_Init+0x28c>)
 8001d58:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5c:	099b      	lsrs	r3, r3, #6
 8001d5e:	3301      	adds	r3, #1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d64:	e002      	b.n	8001d6c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f9      	bne.n	8001d66 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff5c 	bl	8001c34 <LL_ADC_IsInternalRegulatorEnabled>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10e      	bne.n	8001da0 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001d86:	f043 0210 	orr.w	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff6c 	bl	8001c82 <LL_ADC_REG_IsConversionOngoing>
 8001daa:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f040 825f 	bne.w	8002278 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f040 825b 	bne.w	8002278 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001dc6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001dca:	f043 0202 	orr.w	r2, r3, #2
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff40 	bl	8001c5c <LL_ADC_IsEnabled>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d14f      	bne.n	8001e82 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a5b      	ldr	r2, [pc, #364]	@ (8001f54 <HAL_ADC_Init+0x284>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d037      	beq.n	8001e5c <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a5b      	ldr	r2, [pc, #364]	@ (8001f60 <HAL_ADC_Init+0x290>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d004      	beq.n	8001e00 <HAL_ADC_Init+0x130>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a5a      	ldr	r2, [pc, #360]	@ (8001f64 <HAL_ADC_Init+0x294>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d10e      	bne.n	8001e1e <HAL_ADC_Init+0x14e>
 8001e00:	4857      	ldr	r0, [pc, #348]	@ (8001f60 <HAL_ADC_Init+0x290>)
 8001e02:	f7ff ff2b 	bl	8001c5c <LL_ADC_IsEnabled>
 8001e06:	4604      	mov	r4, r0
 8001e08:	4856      	ldr	r0, [pc, #344]	@ (8001f64 <HAL_ADC_Init+0x294>)
 8001e0a:	f7ff ff27 	bl	8001c5c <LL_ADC_IsEnabled>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4323      	orrs	r3, r4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bf0c      	ite	eq
 8001e16:	2301      	moveq	r3, #1
 8001e18:	2300      	movne	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	e008      	b.n	8001e30 <HAL_ADC_Init+0x160>
 8001e1e:	484d      	ldr	r0, [pc, #308]	@ (8001f54 <HAL_ADC_Init+0x284>)
 8001e20:	f7ff ff1c 	bl	8001c5c <LL_ADC_IsEnabled>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	bf0c      	ite	eq
 8001e2a:	2301      	moveq	r3, #1
 8001e2c:	2300      	movne	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d026      	beq.n	8001e82 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a49      	ldr	r2, [pc, #292]	@ (8001f60 <HAL_ADC_Init+0x290>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d004      	beq.n	8001e48 <HAL_ADC_Init+0x178>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a48      	ldr	r2, [pc, #288]	@ (8001f64 <HAL_ADC_Init+0x294>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d101      	bne.n	8001e4c <HAL_ADC_Init+0x17c>
 8001e48:	4a47      	ldr	r2, [pc, #284]	@ (8001f68 <HAL_ADC_Init+0x298>)
 8001e4a:	e000      	b.n	8001e4e <HAL_ADC_Init+0x17e>
 8001e4c:	4a47      	ldr	r2, [pc, #284]	@ (8001f6c <HAL_ADC_Init+0x29c>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4619      	mov	r1, r3
 8001e54:	4610      	mov	r0, r2
 8001e56:	f7ff fc61 	bl	800171c <LL_ADC_SetCommonClock>
 8001e5a:	e012      	b.n	8001e82 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4619      	mov	r1, r3
 8001e66:	4610      	mov	r0, r2
 8001e68:	f7ff fc8c 	bl	8001784 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f6c <HAL_ADC_Init+0x29c>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001e7c:	493b      	ldr	r1, [pc, #236]	@ (8001f6c <HAL_ADC_Init+0x29c>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a33      	ldr	r2, [pc, #204]	@ (8001f54 <HAL_ADC_Init+0x284>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d010      	beq.n	8001eae <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e92:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e98:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001e9e:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001ea6:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	623b      	str	r3, [r7, #32]
 8001eac:	e035      	b.n	8001f1a <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7f1b      	ldrb	r3, [r3, #28]
 8001eb2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001eba:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ebc:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ec2:	2a00      	cmp	r2, #0
 8001ec4:	d002      	beq.n	8001ecc <HAL_ADC_Init+0x1fc>
 8001ec6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001eca:	e000      	b.n	8001ece <HAL_ADC_Init+0x1fe>
 8001ecc:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ece:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001ed4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	da04      	bge.n	8001ee8 <HAL_ADC_Init+0x218>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ee6:	e001      	b.n	8001eec <HAL_ADC_Init+0x21c>
 8001ee8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8001eec:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	491b      	ldr	r1, [pc, #108]	@ (8001f60 <HAL_ADC_Init+0x290>)
 8001ef4:	428b      	cmp	r3, r1
 8001ef6:	d004      	beq.n	8001f02 <HAL_ADC_Init+0x232>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4919      	ldr	r1, [pc, #100]	@ (8001f64 <HAL_ADC_Init+0x294>)
 8001efe:	428b      	cmp	r3, r1
 8001f00:	d103      	bne.n	8001f0a <HAL_ADC_Init+0x23a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f08:	e003      	b.n	8001f12 <HAL_ADC_Init+0x242>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f10:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001f12:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f14:	6a3a      	ldr	r2, [r7, #32]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d131      	bne.n	8001f88 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <HAL_ADC_Init+0x284>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	3b01      	subs	r3, #1
 8001f34:	045b      	lsls	r3, r3, #17
 8001f36:	6a3a      	ldr	r2, [r7, #32]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	623b      	str	r3, [r7, #32]
 8001f3c:	e024      	b.n	8001f88 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d113      	bne.n	8001f70 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f4e:	623b      	str	r3, [r7, #32]
 8001f50:	e01a      	b.n	8001f88 <HAL_ADC_Init+0x2b8>
 8001f52:	bf00      	nop
 8001f54:	46021000 	.word	0x46021000
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	053e2d63 	.word	0x053e2d63
 8001f60:	42028000 	.word	0x42028000
 8001f64:	42028100 	.word	0x42028100
 8001f68:	42028300 	.word	0x42028300
 8001f6c:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f74:	f043 0220 	orr.w	r2, r3, #32
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a75      	ldr	r2, [pc, #468]	@ (8002164 <HAL_ADC_Init+0x494>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d018      	beq.n	8001fc4 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f9e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	6a3a      	ldr	r2, [r7, #32]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8002168 <HAL_ADC_Init+0x498>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	6a39      	ldr	r1, [r7, #32]
 8001fbe:	430b      	orrs	r3, r1
 8001fc0:	60d3      	str	r3, [r2, #12]
 8001fc2:	e031      	b.n	8002028 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d009      	beq.n	8001fe0 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	6a3a      	ldr	r2, [r7, #32]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	4b61      	ldr	r3, [pc, #388]	@ (800216c <HAL_ADC_Init+0x49c>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	6a39      	ldr	r1, [r7, #32]
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1a      	ldr	r2, [r3, #32]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002012:	2b00      	cmp	r3, #0
 8002014:	d008      	beq.n	8002028 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a4d      	ldr	r2, [pc, #308]	@ (8002164 <HAL_ADC_Init+0x494>)
 800202e:	4293      	cmp	r3, r2
 8002030:	f000 80a4 	beq.w	800217c <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fe22 	bl	8001c82 <LL_ADC_REG_IsConversionOngoing>
 800203e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fe2f 	bl	8001ca8 <LL_ADC_INJ_IsConversionOngoing>
 800204a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d166      	bne.n	8002120 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d163      	bne.n	8002120 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7f1b      	ldrb	r3, [r3, #28]
 800205c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4943      	ldr	r1, [pc, #268]	@ (8002170 <HAL_ADC_Init+0x4a0>)
 8002064:	428b      	cmp	r3, r1
 8002066:	d004      	beq.n	8002072 <HAL_ADC_Init+0x3a2>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4941      	ldr	r1, [pc, #260]	@ (8002174 <HAL_ADC_Init+0x4a4>)
 800206e:	428b      	cmp	r3, r1
 8002070:	d102      	bne.n	8002078 <HAL_ADC_Init+0x3a8>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002076:	e002      	b.n	800207e <HAL_ADC_Init+0x3ae>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800207c:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800207e:	4313      	orrs	r3, r2
 8002080:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800208c:	f023 0303 	bic.w	r3, r3, #3
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	6a39      	ldr	r1, [r7, #32]
 8002096:	430b      	orrs	r3, r1
 8002098:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	4619      	mov	r1, r3
 80020ac:	4610      	mov	r0, r2
 80020ae:	f7ff fc11 	bl	80018d4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d11e      	bne.n	80020fa <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c0:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002178 <HAL_ADC_Init+0x4a8>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80020d0:	0411      	lsls	r1, r2, #16
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80020d6:	4311      	orrs	r1, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80020dc:	4311      	orrs	r1, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80020e2:	4311      	orrs	r1, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80020e8:	0892      	lsrs	r2, r2, #2
 80020ea:	430a      	orrs	r2, r1
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0201 	orr.w	r2, r2, #1
 80020f6:	611a      	str	r2, [r3, #16]
 80020f8:	e007      	b.n	800210a <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0201 	bic.w	r2, r2, #1
 8002108:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d10c      	bne.n	8002142 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	f023 010f 	bic.w	r1, r3, #15
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002136:	1e5a      	subs	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002140:	e007      	b.n	8002152 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 020f 	bic.w	r2, r2, #15
 8002150:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002156:	f023 0303 	bic.w	r3, r3, #3
 800215a:	f043 0201 	orr.w	r2, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002162:	e092      	b.n	800228a <HAL_ADC_Init+0x5ba>
 8002164:	46021000 	.word	0x46021000
 8002168:	fff0c013 	.word	0xfff0c013
 800216c:	ffde800d 	.word	0xffde800d
 8002170:	42028000 	.word	0x42028000
 8002174:	42028100 	.word	0x42028100
 8002178:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002182:	2b01      	cmp	r3, #1
 8002184:	d111      	bne.n	80021aa <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800218e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002194:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800219a:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	4b39      	ldr	r3, [pc, #228]	@ (8002298 <HAL_ADC_Init+0x5c8>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	69f9      	ldr	r1, [r7, #28]
 80021ba:	430b      	orrs	r3, r1
 80021bc:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c6:	461a      	mov	r2, r3
 80021c8:	2100      	movs	r1, #0
 80021ca:	f7ff fba6 	bl	800191a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d6:	461a      	mov	r2, r3
 80021d8:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80021dc:	f7ff fb9d 	bl	800191a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d108      	bne.n	80021fa <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f062 020f 	orn	r2, r2, #15
 80021f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80021f8:	e018      	b.n	800222c <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002202:	d113      	bne.n	800222c <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220e:	3b01      	subs	r3, #1
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	f003 031c 	and.w	r3, r3, #28
 8002216:	f06f 020f 	mvn.w	r2, #15
 800221a:	fa02 f103 	lsl.w	r1, r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <HAL_ADC_Init+0x5cc>)
 8002234:	4013      	ands	r3, r2
 8002236:	6a3a      	ldr	r2, [r7, #32]
 8002238:	429a      	cmp	r2, r3
 800223a:	d10b      	bne.n	8002254 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002246:	f023 0303 	bic.w	r3, r3, #3
 800224a:	f043 0201 	orr.w	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002252:	e01a      	b.n	800228a <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002258:	f023 0312 	bic.w	r3, r3, #18
 800225c:	f043 0210 	orr.w	r2, r3, #16
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002268:	f043 0201 	orr.w	r2, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002276:	e008      	b.n	800228a <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800227c:	f043 0210 	orr.w	r2, r3, #16
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 800228a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800228e:	4618      	mov	r0, r3
 8002290:	372c      	adds	r7, #44	@ 0x2c
 8002292:	46bd      	mov	sp, r7
 8002294:	bd90      	pop	{r4, r7, pc}
 8002296:	bf00      	nop
 8002298:	f7fffc02 	.word	0xf7fffc02
 800229c:	833ffff3 	.word	0x833ffff3

080022a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b0b7      	sub	sp, #220	@ 0xdc
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4aa8      	ldr	r2, [pc, #672]	@ (800255c <HAL_ADC_ConfigChannel+0x2bc>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d103      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d102      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x36>
 80022d0:	2302      	movs	r3, #2
 80022d2:	f000 bdfe 	b.w	8002ed2 <HAL_ADC_ConfigChannel+0xc32>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fccd 	bl	8001c82 <LL_ADC_REG_IsConversionOngoing>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 85c1 	bne.w	8002e72 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a99      	ldr	r2, [pc, #612]	@ (800255c <HAL_ADC_ConfigChannel+0x2bc>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	f000 8409 	beq.w	8002b0e <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d108      	bne.n	800231a <HAL_ADC_ConfigChannel+0x7a>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0e9b      	lsrs	r3, r3, #26
 800230e:	f003 031f 	and.w	r3, r3, #31
 8002312:	2201      	movs	r2, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	e01d      	b.n	8002356 <HAL_ADC_ConfigChannel+0xb6>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800232e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002332:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002336:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 800233e:	2320      	movs	r3, #32
 8002340:	e004      	b.n	800234c <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8002342:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	2201      	movs	r2, #1
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	69d1      	ldr	r1, [r2, #28]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	430b      	orrs	r3, r1
 8002362:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	f7ff faf1 	bl	8001958 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fc81 	bl	8001c82 <LL_ADC_REG_IsConversionOngoing>
 8002380:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fc8d 	bl	8001ca8 <LL_ADC_INJ_IsConversionOngoing>
 800238e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002392:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002396:	2b00      	cmp	r3, #0
 8002398:	f040 81df 	bne.w	800275a <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800239c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 81da 	bne.w	800275a <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6819      	ldr	r1, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	461a      	mov	r2, r3
 80023b4:	f7ff fb7c 	bl	8001ab0 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d046      	beq.n	8002468 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6919      	ldr	r1, [r3, #16]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023ea:	f7ff f9eb 	bl	80017c4 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6919      	ldr	r1, [r3, #16]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	461a      	mov	r2, r3
 80023fc:	f7ff fa19 	bl	8001832 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	7e9b      	ldrb	r3, [r3, #26]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d11e      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <HAL_ADC_ConfigChannel+0x17e>
 8002418:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800241c:	e000      	b.n	8002420 <HAL_ADC_ConfigChannel+0x180>
 800241e:	2300      	movs	r3, #0
 8002420:	461a      	mov	r2, r3
 8002422:	f7ff fa3c 	bl	800189e <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002432:	2b01      	cmp	r3, #1
 8002434:	d102      	bne.n	800243c <HAL_ADC_ConfigChannel+0x19c>
 8002436:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800243a:	e000      	b.n	800243e <HAL_ADC_ConfigChannel+0x19e>
 800243c:	2300      	movs	r3, #0
 800243e:	461a      	mov	r2, r3
 8002440:	f7ff fa12 	bl	8001868 <LL_ADC_SetOffsetSignedSaturation>
 8002444:	e189      	b.n	800275a <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2200      	movs	r2, #0
 8002450:	4619      	mov	r1, r3
 8002452:	f7ff fa24 	bl	800189e <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2200      	movs	r2, #0
 8002460:	4619      	mov	r1, r3
 8002462:	f7ff fa01 	bl	8001868 <LL_ADC_SetOffsetSignedSaturation>
 8002466:	e178      	b.n	800275a <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff f9c9 	bl	8001806 <LL_ADC_GetOffsetChannel>
 8002474:	4603      	mov	r3, r0
 8002476:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10a      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x1f4>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff f9be 	bl	8001806 <LL_ADC_GetOffsetChannel>
 800248a:	4603      	mov	r3, r0
 800248c:	0e9b      	lsrs	r3, r3, #26
 800248e:	f003 021f 	and.w	r2, r3, #31
 8002492:	e01e      	b.n	80024d2 <HAL_ADC_ConfigChannel+0x232>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff f9b3 	bl	8001806 <LL_ADC_GetOffsetChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80024b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80024ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80024c2:	2320      	movs	r3, #32
 80024c4:	e004      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80024c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d105      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x24a>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	0e9b      	lsrs	r3, r3, #26
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	e018      	b.n	800251c <HAL_ADC_ConfigChannel+0x27c>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80024fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002502:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002506:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 800250e:	2320      	movs	r3, #32
 8002510:	e004      	b.n	800251c <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002512:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800251c:	429a      	cmp	r2, r3
 800251e:	d107      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	2300      	movs	r3, #0
 800252a:	2100      	movs	r1, #0
 800252c:	f7ff f94a 	bl	80017c4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2101      	movs	r1, #1
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff f965 	bl	8001806 <LL_ADC_GetOffsetChannel>
 800253c:	4603      	mov	r3, r0
 800253e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10c      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x2c0>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2101      	movs	r1, #1
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff f95a 	bl	8001806 <LL_ADC_GetOffsetChannel>
 8002552:	4603      	mov	r3, r0
 8002554:	0e9b      	lsrs	r3, r3, #26
 8002556:	f003 021f 	and.w	r2, r3, #31
 800255a:	e020      	b.n	800259e <HAL_ADC_ConfigChannel+0x2fe>
 800255c:	46021000 	.word	0x46021000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2101      	movs	r1, #1
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff f94d 	bl	8001806 <LL_ADC_GetOffsetChannel>
 800256c:	4603      	mov	r3, r0
 800256e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800257e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002582:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002586:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800258e:	2320      	movs	r3, #32
 8002590:	e004      	b.n	800259c <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002592:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d105      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x316>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	e018      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x348>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80025ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80025d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80025da:	2320      	movs	r3, #32
 80025dc:	e004      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80025de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d107      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	2300      	movs	r3, #0
 80025f6:	2101      	movs	r1, #1
 80025f8:	f7ff f8e4 	bl	80017c4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2102      	movs	r1, #2
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff f8ff 	bl	8001806 <LL_ADC_GetOffsetChannel>
 8002608:	4603      	mov	r3, r0
 800260a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10a      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x388>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2102      	movs	r1, #2
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff f8f4 	bl	8001806 <LL_ADC_GetOffsetChannel>
 800261e:	4603      	mov	r3, r0
 8002620:	0e9b      	lsrs	r3, r3, #26
 8002622:	f003 021f 	and.w	r2, r3, #31
 8002626:	e01a      	b.n	800265e <HAL_ADC_ConfigChannel+0x3be>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2102      	movs	r1, #2
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff f8e9 	bl	8001806 <LL_ADC_GetOffsetChannel>
 8002634:	4603      	mov	r3, r0
 8002636:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002640:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002642:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002646:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800264e:	2320      	movs	r3, #32
 8002650:	e004      	b.n	800265c <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8002652:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d105      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x3d6>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	0e9b      	lsrs	r3, r3, #26
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	e011      	b.n	800269a <HAL_ADC_ConfigChannel+0x3fa>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002686:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002688:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002692:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800269a:	429a      	cmp	r2, r3
 800269c:	d107      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	2300      	movs	r3, #0
 80026a8:	2102      	movs	r1, #2
 80026aa:	f7ff f88b 	bl	80017c4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2103      	movs	r1, #3
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff f8a6 	bl	8001806 <LL_ADC_GetOffsetChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <HAL_ADC_ConfigChannel+0x43a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2103      	movs	r1, #3
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff f89b 	bl	8001806 <LL_ADC_GetOffsetChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	0e9b      	lsrs	r3, r3, #26
 80026d4:	f003 021f 	and.w	r2, r3, #31
 80026d8:	e017      	b.n	800270a <HAL_ADC_ConfigChannel+0x46a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2103      	movs	r1, #3
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff f890 	bl	8001806 <LL_ADC_GetOffsetChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80026f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026f4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80026f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 80026fc:	2320      	movs	r3, #32
 80026fe:	e003      	b.n	8002708 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8002700:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d105      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x482>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	0e9b      	lsrs	r3, r3, #26
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	e011      	b.n	8002746 <HAL_ADC_ConfigChannel+0x4a6>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002732:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002734:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 800273a:	2320      	movs	r3, #32
 800273c:	e003      	b.n	8002746 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 800273e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002740:	fab3 f383 	clz	r3, r3
 8002744:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002746:	429a      	cmp	r2, r3
 8002748:	d107      	bne.n	800275a <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	2300      	movs	r3, #0
 8002754:	2103      	movs	r1, #3
 8002756:	f7ff f835 	bl	80017c4 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fa7c 	bl	8001c5c <LL_ADC_IsEnabled>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 83ad 	bne.w	8002ec6 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6819      	ldr	r1, [r3, #0]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	461a      	mov	r2, r3
 800277a:	f7ff f9fd 	bl	8001b78 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002786:	f040 80d6 	bne.w	8002936 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10b      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x50e>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0e9b      	lsrs	r3, r3, #26
 800279c:	3301      	adds	r3, #1
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	2b09      	cmp	r3, #9
 80027a4:	bf94      	ite	ls
 80027a6:	2301      	movls	r3, #1
 80027a8:	2300      	movhi	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	e019      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x542>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80027bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027be:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80027c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80027c6:	2320      	movs	r3, #32
 80027c8:	e003      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80027ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2b09      	cmp	r3, #9
 80027da:	bf94      	ite	ls
 80027dc:	2301      	movls	r3, #1
 80027de:	2300      	movhi	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d04d      	beq.n	8002882 <HAL_ADC_ConfigChannel+0x5e2>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d107      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x562>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	0e9b      	lsrs	r3, r3, #26
 80027f8:	3301      	adds	r3, #1
 80027fa:	069b      	lsls	r3, r3, #26
 80027fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002800:	e015      	b.n	800282e <HAL_ADC_ConfigChannel+0x58e>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002812:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800281a:	2320      	movs	r3, #32
 800281c:	e003      	b.n	8002826 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800281e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	3301      	adds	r3, #1
 8002828:	069b      	lsls	r3, r3, #26
 800282a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HAL_ADC_ConfigChannel+0x5ae>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	0e9b      	lsrs	r3, r3, #26
 8002840:	3301      	adds	r3, #1
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	2101      	movs	r1, #1
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	e017      	b.n	800287e <HAL_ADC_ConfigChannel+0x5de>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800285c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8002866:	2320      	movs	r3, #32
 8002868:	e003      	b.n	8002872 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 800286a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	2101      	movs	r1, #1
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	4313      	orrs	r3, r2
 8002880:	e04e      	b.n	8002920 <HAL_ADC_ConfigChannel+0x680>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d107      	bne.n	800289e <HAL_ADC_ConfigChannel+0x5fe>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	0e9b      	lsrs	r3, r3, #26
 8002894:	3301      	adds	r3, #1
 8002896:	069b      	lsls	r3, r3, #26
 8002898:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800289c:	e015      	b.n	80028ca <HAL_ADC_ConfigChannel+0x62a>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80028b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80028b6:	2320      	movs	r3, #32
 80028b8:	e003      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80028ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028bc:	fab3 f383 	clz	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	3301      	adds	r3, #1
 80028c4:	069b      	lsls	r3, r3, #26
 80028c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x64a>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	0e9b      	lsrs	r3, r3, #26
 80028dc:	3301      	adds	r3, #1
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	2101      	movs	r1, #1
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	e017      	b.n	800291a <HAL_ADC_ConfigChannel+0x67a>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	61bb      	str	r3, [r7, #24]
  return result;
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8002902:	2320      	movs	r3, #32
 8002904:	e003      	b.n	800290e <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	fab3 f383 	clz	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	2101      	movs	r1, #1
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	4313      	orrs	r3, r2
 800291c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	461a      	mov	r2, r3
 800292e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002932:	f7ff f8bd 	bl	8001ab0 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f280 82c3 	bge.w	8002ec6 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a92      	ldr	r2, [pc, #584]	@ (8002b90 <HAL_ADC_ConfigChannel+0x8f0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d004      	beq.n	8002954 <HAL_ADC_ConfigChannel+0x6b4>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a91      	ldr	r2, [pc, #580]	@ (8002b94 <HAL_ADC_ConfigChannel+0x8f4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d101      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x6b8>
 8002954:	4b90      	ldr	r3, [pc, #576]	@ (8002b98 <HAL_ADC_ConfigChannel+0x8f8>)
 8002956:	e000      	b.n	800295a <HAL_ADC_ConfigChannel+0x6ba>
 8002958:	4b90      	ldr	r3, [pc, #576]	@ (8002b9c <HAL_ADC_ConfigChannel+0x8fc>)
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe ff04 	bl	8001768 <LL_ADC_GetCommonPathInternalCh>
 8002960:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a89      	ldr	r2, [pc, #548]	@ (8002b90 <HAL_ADC_ConfigChannel+0x8f0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d004      	beq.n	8002978 <HAL_ADC_ConfigChannel+0x6d8>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a88      	ldr	r2, [pc, #544]	@ (8002b94 <HAL_ADC_ConfigChannel+0x8f4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d10e      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x6f6>
 8002978:	4885      	ldr	r0, [pc, #532]	@ (8002b90 <HAL_ADC_ConfigChannel+0x8f0>)
 800297a:	f7ff f96f 	bl	8001c5c <LL_ADC_IsEnabled>
 800297e:	4604      	mov	r4, r0
 8002980:	4884      	ldr	r0, [pc, #528]	@ (8002b94 <HAL_ADC_ConfigChannel+0x8f4>)
 8002982:	f7ff f96b 	bl	8001c5c <LL_ADC_IsEnabled>
 8002986:	4603      	mov	r3, r0
 8002988:	4323      	orrs	r3, r4
 800298a:	2b00      	cmp	r3, #0
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	e008      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x708>
 8002996:	4882      	ldr	r0, [pc, #520]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x900>)
 8002998:	f7ff f960 	bl	8001c5c <LL_ADC_IsEnabled>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bf0c      	ite	eq
 80029a2:	2301      	moveq	r3, #1
 80029a4:	2300      	movne	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a6 	beq.w	8002afa <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x904>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d13c      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d136      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a71      	ldr	r2, [pc, #452]	@ (8002b90 <HAL_ADC_ConfigChannel+0x8f0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00a      	beq.n	80029e4 <HAL_ADC_ConfigChannel+0x744>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a70      	ldr	r2, [pc, #448]	@ (8002b94 <HAL_ADC_ConfigChannel+0x8f4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d005      	beq.n	80029e4 <HAL_ADC_ConfigChannel+0x744>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a70      	ldr	r2, [pc, #448]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x900>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	f040 826e 	bne.w	8002ec0 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a69      	ldr	r2, [pc, #420]	@ (8002b90 <HAL_ADC_ConfigChannel+0x8f0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d004      	beq.n	80029f8 <HAL_ADC_ConfigChannel+0x758>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a68      	ldr	r2, [pc, #416]	@ (8002b94 <HAL_ADC_ConfigChannel+0x8f4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d101      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x75c>
 80029f8:	4a67      	ldr	r2, [pc, #412]	@ (8002b98 <HAL_ADC_ConfigChannel+0x8f8>)
 80029fa:	e000      	b.n	80029fe <HAL_ADC_ConfigChannel+0x75e>
 80029fc:	4a67      	ldr	r2, [pc, #412]	@ (8002b9c <HAL_ADC_ConfigChannel+0x8fc>)
 80029fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a06:	4619      	mov	r1, r3
 8002a08:	4610      	mov	r0, r2
 8002a0a:	f7fe fe9a 	bl	8001742 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a0e:	4b66      	ldr	r3, [pc, #408]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x908>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	099b      	lsrs	r3, r3, #6
 8002a14:	4a65      	ldr	r2, [pc, #404]	@ (8002bac <HAL_ADC_ConfigChannel+0x90c>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8002a20:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8002a22:	e002      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f9      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a30:	e246      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a5e      	ldr	r2, [pc, #376]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x910>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d12b      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d125      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a50      	ldr	r2, [pc, #320]	@ (8002b90 <HAL_ADC_ConfigChannel+0x8f0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00a      	beq.n	8002a68 <HAL_ADC_ConfigChannel+0x7c8>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a4f      	ldr	r2, [pc, #316]	@ (8002b94 <HAL_ADC_ConfigChannel+0x8f4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d005      	beq.n	8002a68 <HAL_ADC_ConfigChannel+0x7c8>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a4f      	ldr	r2, [pc, #316]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x900>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	f040 822e 	bne.w	8002ec4 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a48      	ldr	r2, [pc, #288]	@ (8002b90 <HAL_ADC_ConfigChannel+0x8f0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d004      	beq.n	8002a7c <HAL_ADC_ConfigChannel+0x7dc>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a47      	ldr	r2, [pc, #284]	@ (8002b94 <HAL_ADC_ConfigChannel+0x8f4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d101      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x7e0>
 8002a7c:	4a46      	ldr	r2, [pc, #280]	@ (8002b98 <HAL_ADC_ConfigChannel+0x8f8>)
 8002a7e:	e000      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x7e2>
 8002a80:	4a46      	ldr	r2, [pc, #280]	@ (8002b9c <HAL_ADC_ConfigChannel+0x8fc>)
 8002a82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	f7fe fe58 	bl	8001742 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a92:	e217      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a46      	ldr	r2, [pc, #280]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x914>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	f040 8213 	bne.w	8002ec6 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002aa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f040 820c 	bne.w	8002ec6 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a37      	ldr	r2, [pc, #220]	@ (8002b90 <HAL_ADC_ConfigChannel+0x8f0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00a      	beq.n	8002ace <HAL_ADC_ConfigChannel+0x82e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a35      	ldr	r2, [pc, #212]	@ (8002b94 <HAL_ADC_ConfigChannel+0x8f4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d005      	beq.n	8002ace <HAL_ADC_ConfigChannel+0x82e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a36      	ldr	r2, [pc, #216]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x900>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	f040 81fc 	bne.w	8002ec6 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a2f      	ldr	r2, [pc, #188]	@ (8002b90 <HAL_ADC_ConfigChannel+0x8f0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_ADC_ConfigChannel+0x842>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a2d      	ldr	r2, [pc, #180]	@ (8002b94 <HAL_ADC_ConfigChannel+0x8f4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x846>
 8002ae2:	4a2d      	ldr	r2, [pc, #180]	@ (8002b98 <HAL_ADC_ConfigChannel+0x8f8>)
 8002ae4:	e000      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x848>
 8002ae6:	4a2d      	ldr	r2, [pc, #180]	@ (8002b9c <HAL_ADC_ConfigChannel+0x8fc>)
 8002ae8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002aec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002af0:	4619      	mov	r1, r3
 8002af2:	4610      	mov	r0, r2
 8002af4:	f7fe fe25 	bl	8001742 <LL_ADC_SetCommonPathInternalCh>
 8002af8:	e1e5      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002afe:	f043 0220 	orr.w	r2, r3, #32
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002b0c:	e1db      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	f000 811b 	beq.w	8002d56 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b28:	d004      	beq.n	8002b34 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002b2e:	4a22      	ldr	r2, [pc, #136]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x918>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d107      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe ff6b 	bl	8001a18 <LL_ADC_REG_SetSequencerChAdd>
 8002b42:	e059      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	210f      	movs	r1, #15
 8002b54:	fa01 f303 	lsl.w	r3, r1, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b60:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d105      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x8d4>
 8002b68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b6c:	0e9b      	lsrs	r3, r3, #26
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	e027      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x924>
 8002b74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b78:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	60fb      	str	r3, [r7, #12]
  return result;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d117      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8002b8c:	2320      	movs	r3, #32
 8002b8e:	e019      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x924>
 8002b90:	42028000 	.word	0x42028000
 8002b94:	42028100 	.word	0x42028100
 8002b98:	42028300 	.word	0x42028300
 8002b9c:	46021300 	.word	0x46021300
 8002ba0:	46021000 	.word	0x46021000
 8002ba4:	ce080000 	.word	0xce080000
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	053e2d63 	.word	0x053e2d63
 8002bb0:	ca040000 	.word	0xca040000
 8002bb4:	80000001 	.word	0x80000001
 8002bb8:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	6839      	ldr	r1, [r7, #0]
 8002bc6:	6849      	ldr	r1, [r1, #4]
 8002bc8:	f001 011f 	and.w	r1, r1, #31
 8002bcc:	408b      	lsls	r3, r1
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d808      	bhi.n	8002bf8 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f7fe feb0 	bl	8001958 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	461a      	mov	r2, r3
 8002c02:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002c06:	f7fe ff53 	bl	8001ab0 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f280 8159 	bge.w	8002ec6 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a9b      	ldr	r2, [pc, #620]	@ (8002e88 <HAL_ADC_ConfigChannel+0xbe8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d004      	beq.n	8002c28 <HAL_ADC_ConfigChannel+0x988>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a9a      	ldr	r2, [pc, #616]	@ (8002e8c <HAL_ADC_ConfigChannel+0xbec>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d101      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x98c>
 8002c28:	4b99      	ldr	r3, [pc, #612]	@ (8002e90 <HAL_ADC_ConfigChannel+0xbf0>)
 8002c2a:	e000      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x98e>
 8002c2c:	4b99      	ldr	r3, [pc, #612]	@ (8002e94 <HAL_ADC_ConfigChannel+0xbf4>)
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fd9a 	bl	8001768 <LL_ADC_GetCommonPathInternalCh>
 8002c34:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a96      	ldr	r2, [pc, #600]	@ (8002e98 <HAL_ADC_ConfigChannel+0xbf8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d12b      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d125      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a8d      	ldr	r2, [pc, #564]	@ (8002e88 <HAL_ADC_ConfigChannel+0xbe8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d004      	beq.n	8002c62 <HAL_ADC_ConfigChannel+0x9c2>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a8b      	ldr	r2, [pc, #556]	@ (8002e8c <HAL_ADC_ConfigChannel+0xbec>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x9c6>
 8002c62:	4a8b      	ldr	r2, [pc, #556]	@ (8002e90 <HAL_ADC_ConfigChannel+0xbf0>)
 8002c64:	e000      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x9c8>
 8002c66:	4a8b      	ldr	r2, [pc, #556]	@ (8002e94 <HAL_ADC_ConfigChannel+0xbf4>)
 8002c68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f7fe fd65 	bl	8001742 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002c78:	4b88      	ldr	r3, [pc, #544]	@ (8002e9c <HAL_ADC_ConfigChannel+0xbfc>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	099b      	lsrs	r3, r3, #6
 8002c7e:	4a88      	ldr	r2, [pc, #544]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xc00>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	099b      	lsrs	r3, r3, #6
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002c8a:	e002      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f9      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002c98:	e045      	b.n	8002d26 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a81      	ldr	r2, [pc, #516]	@ (8002ea4 <HAL_ADC_ConfigChannel+0xc04>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d11b      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ca4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ca8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d115      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a74      	ldr	r2, [pc, #464]	@ (8002e88 <HAL_ADC_ConfigChannel+0xbe8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d004      	beq.n	8002cc4 <HAL_ADC_ConfigChannel+0xa24>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a73      	ldr	r2, [pc, #460]	@ (8002e8c <HAL_ADC_ConfigChannel+0xbec>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d101      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0xa28>
 8002cc4:	4a72      	ldr	r2, [pc, #456]	@ (8002e90 <HAL_ADC_ConfigChannel+0xbf0>)
 8002cc6:	e000      	b.n	8002cca <HAL_ADC_ConfigChannel+0xa2a>
 8002cc8:	4a72      	ldr	r2, [pc, #456]	@ (8002e94 <HAL_ADC_ConfigChannel+0xbf4>)
 8002cca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	f7fe fd34 	bl	8001742 <LL_ADC_SetCommonPathInternalCh>
 8002cda:	e024      	b.n	8002d26 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a71      	ldr	r2, [pc, #452]	@ (8002ea8 <HAL_ADC_ConfigChannel+0xc08>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d11f      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ce6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d115      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a64      	ldr	r2, [pc, #400]	@ (8002e88 <HAL_ADC_ConfigChannel+0xbe8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d004      	beq.n	8002d06 <HAL_ADC_ConfigChannel+0xa66>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a62      	ldr	r2, [pc, #392]	@ (8002e8c <HAL_ADC_ConfigChannel+0xbec>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d101      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0xa6a>
 8002d06:	4a62      	ldr	r2, [pc, #392]	@ (8002e90 <HAL_ADC_ConfigChannel+0xbf0>)
 8002d08:	e000      	b.n	8002d0c <HAL_ADC_ConfigChannel+0xa6c>
 8002d0a:	4a62      	ldr	r2, [pc, #392]	@ (8002e94 <HAL_ADC_ConfigChannel+0xbf4>)
 8002d0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d14:	4619      	mov	r1, r3
 8002d16:	4610      	mov	r0, r2
 8002d18:	f7fe fd13 	bl	8001742 <LL_ADC_SetCommonPathInternalCh>
 8002d1c:	e003      	b.n	8002d26 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a62      	ldr	r2, [pc, #392]	@ (8002eac <HAL_ADC_ConfigChannel+0xc0c>)
 8002d24:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a61      	ldr	r2, [pc, #388]	@ (8002eb0 <HAL_ADC_ConfigChannel+0xc10>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	f040 80ca 	bne.w	8002ec6 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 80c3 	bne.w	8002ec6 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0201 	orr.w	r2, r2, #1
 8002d50:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8002d54:	e0b7      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d5e:	d004      	beq.n	8002d6a <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002d64:	4a53      	ldr	r2, [pc, #332]	@ (8002eb4 <HAL_ADC_ConfigChannel+0xc14>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d106      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe fe83 	bl	8001a7e <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f280 80a2 	bge.w	8002ec6 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a40      	ldr	r2, [pc, #256]	@ (8002e88 <HAL_ADC_ConfigChannel+0xbe8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <HAL_ADC_ConfigChannel+0xaf6>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a3e      	ldr	r2, [pc, #248]	@ (8002e8c <HAL_ADC_ConfigChannel+0xbec>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0xafa>
 8002d96:	4b3e      	ldr	r3, [pc, #248]	@ (8002e90 <HAL_ADC_ConfigChannel+0xbf0>)
 8002d98:	e000      	b.n	8002d9c <HAL_ADC_ConfigChannel+0xafc>
 8002d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e94 <HAL_ADC_ConfigChannel+0xbf4>)
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe fce3 	bl	8001768 <LL_ADC_GetCommonPathInternalCh>
 8002da2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a43      	ldr	r2, [pc, #268]	@ (8002eb8 <HAL_ADC_ConfigChannel+0xc18>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d115      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a34      	ldr	r2, [pc, #208]	@ (8002e88 <HAL_ADC_ConfigChannel+0xbe8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d004      	beq.n	8002dc4 <HAL_ADC_ConfigChannel+0xb24>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a33      	ldr	r2, [pc, #204]	@ (8002e8c <HAL_ADC_ConfigChannel+0xbec>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0xb28>
 8002dc4:	4a32      	ldr	r2, [pc, #200]	@ (8002e90 <HAL_ADC_ConfigChannel+0xbf0>)
 8002dc6:	e000      	b.n	8002dca <HAL_ADC_ConfigChannel+0xb2a>
 8002dc8:	4a32      	ldr	r2, [pc, #200]	@ (8002e94 <HAL_ADC_ConfigChannel+0xbf4>)
 8002dca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dce:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f7fe fcb4 	bl	8001742 <LL_ADC_SetCommonPathInternalCh>
 8002dda:	e034      	b.n	8002e46 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a36      	ldr	r2, [pc, #216]	@ (8002ebc <HAL_ADC_ConfigChannel+0xc1c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d115      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a27      	ldr	r2, [pc, #156]	@ (8002e88 <HAL_ADC_ConfigChannel+0xbe8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d004      	beq.n	8002dfa <HAL_ADC_ConfigChannel+0xb5a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a25      	ldr	r2, [pc, #148]	@ (8002e8c <HAL_ADC_ConfigChannel+0xbec>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0xb5e>
 8002dfa:	4a25      	ldr	r2, [pc, #148]	@ (8002e90 <HAL_ADC_ConfigChannel+0xbf0>)
 8002dfc:	e000      	b.n	8002e00 <HAL_ADC_ConfigChannel+0xb60>
 8002dfe:	4a25      	ldr	r2, [pc, #148]	@ (8002e94 <HAL_ADC_ConfigChannel+0xbf4>)
 8002e00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f7fe fc99 	bl	8001742 <LL_ADC_SetCommonPathInternalCh>
 8002e10:	e019      	b.n	8002e46 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a24      	ldr	r2, [pc, #144]	@ (8002ea8 <HAL_ADC_ConfigChannel+0xc08>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d114      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a19      	ldr	r2, [pc, #100]	@ (8002e88 <HAL_ADC_ConfigChannel+0xbe8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d004      	beq.n	8002e30 <HAL_ADC_ConfigChannel+0xb90>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a18      	ldr	r2, [pc, #96]	@ (8002e8c <HAL_ADC_ConfigChannel+0xbec>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0xb94>
 8002e30:	4a17      	ldr	r2, [pc, #92]	@ (8002e90 <HAL_ADC_ConfigChannel+0xbf0>)
 8002e32:	e000      	b.n	8002e36 <HAL_ADC_ConfigChannel+0xb96>
 8002e34:	4a17      	ldr	r2, [pc, #92]	@ (8002e94 <HAL_ADC_ConfigChannel+0xbf4>)
 8002e36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e3a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4610      	mov	r0, r2
 8002e42:	f7fe fc7e 	bl	8001742 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a19      	ldr	r2, [pc, #100]	@ (8002eb0 <HAL_ADC_ConfigChannel+0xc10>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d13a      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d134      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0201 	orr.w	r2, r2, #1
 8002e6c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8002e70:	e029      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e76:	f043 0220 	orr.w	r2, r3, #32
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002e84:	e01f      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0xc26>
 8002e86:	bf00      	nop
 8002e88:	42028000 	.word	0x42028000
 8002e8c:	42028100 	.word	0x42028100
 8002e90:	42028300 	.word	0x42028300
 8002e94:	46021300 	.word	0x46021300
 8002e98:	b6002000 	.word	0xb6002000
 8002e9c:	20000000 	.word	0x20000000
 8002ea0:	053e2d63 	.word	0x053e2d63
 8002ea4:	ba004000 	.word	0xba004000
 8002ea8:	80000001 	.word	0x80000001
 8002eac:	b2001000 	.word	0xb2001000
 8002eb0:	d7200000 	.word	0xd7200000
 8002eb4:	80000010 	.word	0x80000010
 8002eb8:	ce080000 	.word	0xce080000
 8002ebc:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ec0:	bf00      	nop
 8002ec2:	e000      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ec4:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8002ece:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	37dc      	adds	r7, #220	@ 0xdc
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd90      	pop	{r4, r7, pc}
 8002eda:	bf00      	nop

08002edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eec:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <__NVIC_SetPriorityGrouping+0x44>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f0e:	4a04      	ldr	r2, [pc, #16]	@ (8002f20 <__NVIC_SetPriorityGrouping+0x44>)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	60d3      	str	r3, [r2, #12]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f28:	4b04      	ldr	r3, [pc, #16]	@ (8002f3c <__NVIC_GetPriorityGrouping+0x18>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	0a1b      	lsrs	r3, r3, #8
 8002f2e:	f003 0307 	and.w	r3, r3, #7
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	db0b      	blt.n	8002f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	f003 021f 	and.w	r2, r3, #31
 8002f58:	4907      	ldr	r1, [pc, #28]	@ (8002f78 <__NVIC_EnableIRQ+0x38>)
 8002f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	2001      	movs	r0, #1
 8002f62:	fa00 f202 	lsl.w	r2, r0, r2
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	e000e100 	.word	0xe000e100

08002f7c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	db12      	blt.n	8002fb4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	f003 021f 	and.w	r2, r3, #31
 8002f94:	490a      	ldr	r1, [pc, #40]	@ (8002fc0 <__NVIC_DisableIRQ+0x44>)
 8002f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa2:	3320      	adds	r3, #32
 8002fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002fa8:	f3bf 8f4f 	dsb	sy
}
 8002fac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002fae:	f3bf 8f6f 	isb	sy
}
 8002fb2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000e100 	.word	0xe000e100

08002fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	6039      	str	r1, [r7, #0]
 8002fce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	db0a      	blt.n	8002fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	490c      	ldr	r1, [pc, #48]	@ (8003010 <__NVIC_SetPriority+0x4c>)
 8002fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fe2:	0112      	lsls	r2, r2, #4
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fec:	e00a      	b.n	8003004 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4908      	ldr	r1, [pc, #32]	@ (8003014 <__NVIC_SetPriority+0x50>)
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	3b04      	subs	r3, #4
 8002ffc:	0112      	lsls	r2, r2, #4
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	440b      	add	r3, r1
 8003002:	761a      	strb	r2, [r3, #24]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000e100 	.word	0xe000e100
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003018:	b480      	push	{r7}
 800301a:	b089      	sub	sp, #36	@ 0x24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f1c3 0307 	rsb	r3, r3, #7
 8003032:	2b04      	cmp	r3, #4
 8003034:	bf28      	it	cs
 8003036:	2304      	movcs	r3, #4
 8003038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3304      	adds	r3, #4
 800303e:	2b06      	cmp	r3, #6
 8003040:	d902      	bls.n	8003048 <NVIC_EncodePriority+0x30>
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3b03      	subs	r3, #3
 8003046:	e000      	b.n	800304a <NVIC_EncodePriority+0x32>
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800304c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	401a      	ands	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003060:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	43d9      	mvns	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	4313      	orrs	r3, r2
         );
}
 8003072:	4618      	mov	r0, r3
 8003074:	3724      	adds	r7, #36	@ 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff ff28 	bl	8002edc <__NVIC_SetPriorityGrouping>
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030a2:	f7ff ff3f 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 80030a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	6978      	ldr	r0, [r7, #20]
 80030ae:	f7ff ffb3 	bl	8003018 <NVIC_EncodePriority>
 80030b2:	4602      	mov	r2, r0
 80030b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ff82 	bl	8002fc4 <__NVIC_SetPriority>
}
 80030c0:	bf00      	nop
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ff32 	bl	8002f40 <__NVIC_EnableIRQ>
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80030ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff ff42 	bl	8002f7c <__NVIC_DisableIRQ>
}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3b01      	subs	r3, #1
 800310c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003110:	d301      	bcc.n	8003116 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003112:	2301      	movs	r3, #1
 8003114:	e00d      	b.n	8003132 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003116:	4a0a      	ldr	r2, [pc, #40]	@ (8003140 <HAL_SYSTICK_Config+0x40>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800311e:	4b08      	ldr	r3, [pc, #32]	@ (8003140 <HAL_SYSTICK_Config+0x40>)
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003124:	4b06      	ldr	r3, [pc, #24]	@ (8003140 <HAL_SYSTICK_Config+0x40>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a05      	ldr	r2, [pc, #20]	@ (8003140 <HAL_SYSTICK_Config+0x40>)
 800312a:	f043 0303 	orr.w	r3, r3, #3
 800312e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	e000e010 	.word	0xe000e010

08003144 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b04      	cmp	r3, #4
 8003150:	d844      	bhi.n	80031dc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003152:	a201      	add	r2, pc, #4	@ (adr r2, 8003158 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	0800317b 	.word	0x0800317b
 800315c:	08003199 	.word	0x08003199
 8003160:	080031bb 	.word	0x080031bb
 8003164:	080031dd 	.word	0x080031dd
 8003168:	0800316d 	.word	0x0800316d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800316c:	4b1f      	ldr	r3, [pc, #124]	@ (80031ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1e      	ldr	r2, [pc, #120]	@ (80031ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003172:	f043 0304 	orr.w	r3, r3, #4
 8003176:	6013      	str	r3, [r2, #0]
      break;
 8003178:	e031      	b.n	80031de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800317a:	4b1c      	ldr	r3, [pc, #112]	@ (80031ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1b      	ldr	r2, [pc, #108]	@ (80031ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003180:	f023 0304 	bic.w	r3, r3, #4
 8003184:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8003186:	4b1a      	ldr	r3, [pc, #104]	@ (80031f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800318c:	4a18      	ldr	r2, [pc, #96]	@ (80031f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800318e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003192:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003196:	e022      	b.n	80031de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003198:	4b14      	ldr	r3, [pc, #80]	@ (80031ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a13      	ldr	r2, [pc, #76]	@ (80031ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800319e:	f023 0304 	bic.w	r3, r3, #4
 80031a2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80031a4:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80031a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031aa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80031ae:	4a10      	ldr	r2, [pc, #64]	@ (80031f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80031b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80031b8:	e011      	b.n	80031de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80031ba:	4b0c      	ldr	r3, [pc, #48]	@ (80031ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a0b      	ldr	r2, [pc, #44]	@ (80031ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80031c0:	f023 0304 	bic.w	r3, r3, #4
 80031c4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80031c6:	4b0a      	ldr	r3, [pc, #40]	@ (80031f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80031c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031cc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80031d0:	4a07      	ldr	r2, [pc, #28]	@ (80031f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80031d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80031da:	e000      	b.n	80031de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80031dc:	bf00      	nop
  }
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000e010 	.word	0xe000e010
 80031f0:	46020c00 	.word	0x46020c00

080031f4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80031fa:	4b19      	ldr	r3, [pc, #100]	@ (8003260 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003206:	2304      	movs	r3, #4
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	e021      	b.n	8003250 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800320c:	4b15      	ldr	r3, [pc, #84]	@ (8003264 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800320e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003212:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003216:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800321e:	d011      	beq.n	8003244 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003226:	d810      	bhi.n	800324a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d004      	beq.n	8003238 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003234:	d003      	beq.n	800323e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003236:	e008      	b.n	800324a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003238:	2300      	movs	r3, #0
 800323a:	607b      	str	r3, [r7, #4]
        break;
 800323c:	e008      	b.n	8003250 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800323e:	2301      	movs	r3, #1
 8003240:	607b      	str	r3, [r7, #4]
        break;
 8003242:	e005      	b.n	8003250 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003244:	2302      	movs	r3, #2
 8003246:	607b      	str	r3, [r7, #4]
        break;
 8003248:	e002      	b.n	8003250 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
        break;
 800324e:	bf00      	nop
    }
  }
  return systick_source;
 8003250:	687b      	ldr	r3, [r7, #4]
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000e010 	.word	0xe000e010
 8003264:	46020c00 	.word	0x46020c00

08003268 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
#if defined(SAES)
  uint32_t tickstart;
#endif /* SAES */

  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e0a7      	b.n	80033ca <HAL_CRYP_Init+0x162>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fd fe66 	bl	8000f60 <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  if (hcryp->Instance == AES)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a4e      	ldr	r2, [pc, #312]	@ (80033d4 <HAL_CRYP_Init+0x16c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d116      	bne.n	80032cc <HAL_CRYP_Init+0x64>
  {
    /* Set the key size, data type and Algorithm */
    cr_value = (uint32_t)(hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm | hcryp->Init.KeyMode);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm and mode */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, cr_value);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4b46      	ldr	r3, [pc, #280]	@ (80033d8 <HAL_CRYP_Init+0x170>)
 80032be:	4013      	ands	r3, r2
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	430b      	orrs	r3, r1
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e070      	b.n	80033ae <HAL_CRYP_Init+0x146>
  }
  else
  {
    /* SAES is initializing, fetching random number from the RNG */
    tickstart = HAL_GetTick();
 80032cc:	f7fe f9f6 	bl	80016bc <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 80032d2:	e01e      	b.n	8003312 <HAL_CRYP_Init+0xaa>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 80032d4:	f7fe f9f2 	bl	80016bc <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b52      	cmp	r3, #82	@ 0x52
 80032e0:	d917      	bls.n	8003312 <HAL_CRYP_Init+0xaa>
      {
        __HAL_CRYP_DISABLE(hcryp);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0201 	bic.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f6:	f043 0210 	orr.w	r2, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e05b      	b.n	80033ca <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b08      	cmp	r3, #8
 800331e:	d0d9      	beq.n	80032d4 <HAL_CRYP_Init+0x6c>
      }
    }
    /* SAES is initializing, no random number fetching error flagged */
    tickstart = HAL_GetTick();
 8003320:	f7fe f9cc 	bl	80016bc <HAL_GetTick>
 8003324:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8003326:	e01e      	b.n	8003366 <HAL_CRYP_Init+0xfe>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8003328:	f7fe f9c8 	bl	80016bc <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b52      	cmp	r3, #82	@ 0x52
 8003334:	d917      	bls.n	8003366 <HAL_CRYP_Init+0xfe>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0201 	bic.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_RNG;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e031      	b.n	80033ca <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b08      	cmp	r3, #8
 8003374:	d0d8      	beq.n	8003328 <HAL_CRYP_Init+0xc0>
      }
    }
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 800338a:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8003396:	4313      	orrs	r3, r2
 8003398:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm, Key selection and key protection */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD | AES_CR_KEYSEL |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4b0e      	ldr	r3, [pc, #56]	@ (80033dc <HAL_CRYP_Init+0x174>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	430b      	orrs	r3, r1
 80033ac:	6013      	str	r3, [r2, #0]
               AES_CR_KEYPROT, cr_value);
  }
  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	420c0000 	.word	0x420c0000
 80033d8:	fcfaff99 	.word	0xfcfaff99
 80033dc:	8cf2ff99 	.word	0x8cf2ff99

080033e0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	@ 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80033f2:	e1ba      	b.n	800376a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003400:	4013      	ands	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 81aa 	beq.w	8003764 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a55      	ldr	r2, [pc, #340]	@ (8003568 <HAL_GPIO_Init+0x188>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d15d      	bne.n	80034d4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800341e:	2201      	movs	r2, #1
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	4013      	ands	r3, r2
 800342c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0201 	and.w	r2, r3, #1
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	4313      	orrs	r3, r2
 8003440:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003448:	4a48      	ldr	r2, [pc, #288]	@ (800356c <HAL_GPIO_Init+0x18c>)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003450:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003452:	4a46      	ldr	r2, [pc, #280]	@ (800356c <HAL_GPIO_Init+0x18c>)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	08da      	lsrs	r2, r3, #3
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	3208      	adds	r2, #8
 8003466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800346a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	220f      	movs	r2, #15
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	4013      	ands	r3, r2
 8003480:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	220b      	movs	r2, #11
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	4313      	orrs	r3, r2
 8003494:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	08da      	lsrs	r2, r3, #3
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	3208      	adds	r2, #8
 800349e:	69f9      	ldr	r1, [r7, #28]
 80034a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	2203      	movs	r2, #3
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	2202      	movs	r2, #2
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e067      	b.n	80035a4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x104>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b12      	cmp	r3, #18
 80034e2:	d145      	bne.n	8003570 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	08da      	lsrs	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3208      	adds	r2, #8
 80034ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	220f      	movs	r2, #15
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	4013      	ands	r3, r2
 8003506:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f003 020f 	and.w	r2, r3, #15
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	4313      	orrs	r3, r2
 8003520:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	08da      	lsrs	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3208      	adds	r2, #8
 800352a:	69f9      	ldr	r1, [r7, #28]
 800352c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	2203      	movs	r2, #3
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	4013      	ands	r3, r2
 8003546:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 0203 	and.w	r2, r3, #3
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	4313      	orrs	r3, r2
 800355c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	e01e      	b.n	80035a4 <HAL_GPIO_Init+0x1c4>
 8003566:	bf00      	nop
 8003568:	46020000 	.word	0x46020000
 800356c:	0800e704 	.word	0x0800e704
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	2203      	movs	r2, #3
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	4013      	ands	r3, r2
 8003586:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 0203 	and.w	r2, r3, #3
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	4313      	orrs	r3, r2
 800359c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d00b      	beq.n	80035c4 <HAL_GPIO_Init+0x1e4>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d007      	beq.n	80035c4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035b8:	2b11      	cmp	r3, #17
 80035ba:	d003      	beq.n	80035c4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b12      	cmp	r3, #18
 80035c2:	d130      	bne.n	8003626 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	2203      	movs	r2, #3
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	4013      	ands	r3, r2
 80035da:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80035fa:	2201      	movs	r2, #1
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43db      	mvns	r3, r3
 8003604:	69fa      	ldr	r2, [r7, #28]
 8003606:	4013      	ands	r3, r2
 8003608:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	f003 0201 	and.w	r2, r3, #1
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	69fa      	ldr	r2, [r7, #28]
 800361c:	4313      	orrs	r3, r2
 800361e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b03      	cmp	r3, #3
 800362c:	d017      	beq.n	800365e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	2203      	movs	r2, #3
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	4013      	ands	r3, r2
 8003644:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	4313      	orrs	r3, r2
 8003656:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d07c      	beq.n	8003764 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800366a:	4a47      	ldr	r2, [pc, #284]	@ (8003788 <HAL_GPIO_Init+0x3a8>)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	089b      	lsrs	r3, r3, #2
 8003670:	3318      	adds	r3, #24
 8003672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003676:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	220f      	movs	r2, #15
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	4013      	ands	r3, r2
 800368c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	0a9a      	lsrs	r2, r3, #10
 8003692:	4b3e      	ldr	r3, [pc, #248]	@ (800378c <HAL_GPIO_Init+0x3ac>)
 8003694:	4013      	ands	r3, r2
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	f002 0203 	and.w	r2, r2, #3
 800369c:	00d2      	lsls	r2, r2, #3
 800369e:	4093      	lsls	r3, r2
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80036a6:	4938      	ldr	r1, [pc, #224]	@ (8003788 <HAL_GPIO_Init+0x3a8>)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	3318      	adds	r3, #24
 80036ae:	69fa      	ldr	r2, [r7, #28]
 80036b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80036b4:	4b34      	ldr	r3, [pc, #208]	@ (8003788 <HAL_GPIO_Init+0x3a8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	43db      	mvns	r3, r3
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80036d0:	69fa      	ldr	r2, [r7, #28]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80036d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003788 <HAL_GPIO_Init+0x3a8>)
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80036de:	4b2a      	ldr	r3, [pc, #168]	@ (8003788 <HAL_GPIO_Init+0x3a8>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003702:	4a21      	ldr	r2, [pc, #132]	@ (8003788 <HAL_GPIO_Init+0x3a8>)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003708:	4b1f      	ldr	r3, [pc, #124]	@ (8003788 <HAL_GPIO_Init+0x3a8>)
 800370a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800370e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	43db      	mvns	r3, r3
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	4013      	ands	r3, r2
 8003718:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800372e:	4a16      	ldr	r2, [pc, #88]	@ (8003788 <HAL_GPIO_Init+0x3a8>)
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003736:	4b14      	ldr	r3, [pc, #80]	@ (8003788 <HAL_GPIO_Init+0x3a8>)
 8003738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800373c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	43db      	mvns	r3, r3
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	4013      	ands	r3, r2
 8003746:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4313      	orrs	r3, r2
 800375a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800375c:	4a0a      	ldr	r2, [pc, #40]	@ (8003788 <HAL_GPIO_Init+0x3a8>)
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	3301      	adds	r3, #1
 8003768:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	f47f ae3d 	bne.w	80033f4 <HAL_GPIO_Init+0x14>
  }
}
 800377a:	bf00      	nop
 800377c:	bf00      	nop
 800377e:	3724      	adds	r7, #36	@ 0x24
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	46022000 	.word	0x46022000
 800378c:	002f7f7f 	.word	0x002f7f7f

08003790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	807b      	strh	r3, [r7, #2]
 800379c:	4613      	mov	r3, r2
 800379e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037a0:	787b      	ldrb	r3, [r7, #1]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037a6:	887a      	ldrh	r2, [r7, #2]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80037ac:	e002      	b.n	80037b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80037ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003808 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	88fb      	ldrh	r3, [r7, #6]
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d006      	beq.n	80037e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80037d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003808 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 f814 	bl	800380c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80037e4:	4b08      	ldr	r3, [pc, #32]	@ (8003808 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d006      	beq.n	80037fe <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80037f0:	4a05      	ldr	r2, [pc, #20]	@ (8003808 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 f812 	bl	8003822 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	46022000 	.word	0x46022000

0800380c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	4603      	mov	r3, r0
 800382a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e08d      	b.n	8003966 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd fba0 	bl	8000fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2224      	movs	r2, #36	@ 0x24
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0201 	bic.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003888:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003898:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d107      	bne.n	80038b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	e006      	b.n	80038c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80038be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d108      	bne.n	80038da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038d6:	605a      	str	r2, [r3, #4]
 80038d8:	e007      	b.n	80038ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80038f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800390c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69d9      	ldr	r1, [r3, #28]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1a      	ldr	r2, [r3, #32]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b20      	cmp	r3, #32
 8003982:	d138      	bne.n	80039f6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800398e:	2302      	movs	r3, #2
 8003990:	e032      	b.n	80039f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2224      	movs	r2, #36	@ 0x24
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039c0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6819      	ldr	r1, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0201 	orr.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e000      	b.n	80039f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
  }
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d139      	bne.n	8003a8e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e033      	b.n	8003a90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2224      	movs	r2, #36	@ 0x24
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a56:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	021b      	lsls	r3, r3, #8
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0201 	orr.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e000      	b.n	8003a90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
 8003ab8:	e007      	b.n	8003aca <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003aba:	4b07      	ldr	r3, [pc, #28]	@ (8003ad8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 0204 	bic.w	r2, r3, #4
 8003ac2:	4905      	ldr	r1, [pc, #20]	@ (8003ad8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	40030400 	.word	0x40030400

08003adc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003ae0:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <HAL_ICACHE_Enable+0x1c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a04      	ldr	r2, [pc, #16]	@ (8003af8 <HAL_ICACHE_Enable+0x1c>)
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	40030400 	.word	0x40030400

08003afc <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e059      	b.n	8003bc2 <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 8003b0e:	4b30      	ldr	r3, [pc, #192]	@ (8003bd0 <HAL_PWR_ConfigPVD+0xd4>)
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	492d      	ldr	r1, [pc, #180]	@ (8003bd0 <HAL_PWR_ConfigPVD+0xd4>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003b20:	4b2c      	ldr	r3, [pc, #176]	@ (8003bd4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b26:	4a2b      	ldr	r2, [pc, #172]	@ (8003bd4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b2c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8003b30:	4b28      	ldr	r3, [pc, #160]	@ (8003bd4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b36:	4a27      	ldr	r2, [pc, #156]	@ (8003bd4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8003b40:	4b24      	ldr	r3, [pc, #144]	@ (8003bd4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a23      	ldr	r2, [pc, #140]	@ (8003bd4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b4a:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8003b4c:	4b21      	ldr	r3, [pc, #132]	@ (8003bd4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	4a20      	ldr	r2, [pc, #128]	@ (8003bd4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b56:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8003b64:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003bd4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d007      	beq.n	8003b90 <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8003b80:	4b14      	ldr	r3, [pc, #80]	@ (8003bd4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b86:	4a13      	ldr	r2, [pc, #76]	@ (8003bd4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b8c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8003bd4 <HAL_PWR_ConfigPVD+0xd8>)
 8003ba2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba6:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8003bb4:	4b07      	ldr	r3, [pc, #28]	@ (8003bd4 <HAL_PWR_ConfigPVD+0xd8>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4a06      	ldr	r2, [pc, #24]	@ (8003bd4 <HAL_PWR_ConfigPVD+0xd8>)
 8003bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bbe:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	46020800 	.word	0x46020800
 8003bd4:	46022000 	.word	0x46022000

08003bd8 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 8003bdc:	4b05      	ldr	r3, [pc, #20]	@ (8003bf4 <HAL_PWR_EnablePVD+0x1c>)
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	4a04      	ldr	r2, [pc, #16]	@ (8003bf4 <HAL_PWR_EnablePVD+0x1c>)
 8003be2:	f043 0310 	orr.w	r3, r3, #16
 8003be6:	6113      	str	r3, [r2, #16]
}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	46020800 	.word	0x46020800

08003bf8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003c00:	4b39      	ldr	r3, [pc, #228]	@ (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c08:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d10b      	bne.n	8003c2a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c18:	d905      	bls.n	8003c26 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003c1a:	4b33      	ldr	r3, [pc, #204]	@ (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	4a32      	ldr	r2, [pc, #200]	@ (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c24:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e057      	b.n	8003cda <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c30:	d90a      	bls.n	8003c48 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003c32:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c44:	60d3      	str	r3, [r2, #12]
 8003c46:	e007      	b.n	8003c58 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003c48:	4b27      	ldr	r3, [pc, #156]	@ (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003c50:	4925      	ldr	r1, [pc, #148]	@ (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003c58:	4b24      	ldr	r3, [pc, #144]	@ (8003cec <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a24      	ldr	r2, [pc, #144]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	099b      	lsrs	r3, r3, #6
 8003c64:	2232      	movs	r2, #50	@ 0x32
 8003c66:	fb02 f303 	mul.w	r3, r2, r3
 8003c6a:	4a21      	ldr	r2, [pc, #132]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	099b      	lsrs	r3, r3, #6
 8003c72:	3301      	adds	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003c76:	e002      	b.n	8003c7e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d102      	bne.n	8003c90 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f3      	bne.n	8003c78 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d01b      	beq.n	8003cce <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003c96:	4b15      	ldr	r3, [pc, #84]	@ (8003cec <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a15      	ldr	r2, [pc, #84]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca0:	099b      	lsrs	r3, r3, #6
 8003ca2:	2232      	movs	r2, #50	@ 0x32
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	4a11      	ldr	r2, [pc, #68]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	099b      	lsrs	r3, r3, #6
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003cb4:	e002      	b.n	8003cbc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d102      	bne.n	8003cce <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f3      	bne.n	8003cb6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e000      	b.n	8003cda <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	46020800 	.word	0x46020800
 8003cec:	20000000 	.word	0x20000000
 8003cf0:	10624dd3 	.word	0x10624dd3

08003cf4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003cf8:	4b04      	ldr	r3, [pc, #16]	@ (8003d0c <HAL_PWREx_GetVoltageRange+0x18>)
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	46020800 	.word	0x46020800

08003d10 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003d14:	4b05      	ldr	r3, [pc, #20]	@ (8003d2c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	4a04      	ldr	r2, [pc, #16]	@ (8003d2c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d1e:	6113      	str	r3, [r2, #16]
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	46020800 	.word	0x46020800

08003d30 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003d34:	4b05      	ldr	r3, [pc, #20]	@ (8003d4c <HAL_PWREx_EnableVddA+0x1c>)
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	4a04      	ldr	r2, [pc, #16]	@ (8003d4c <HAL_PWREx_EnableVddA+0x1c>)
 8003d3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d3e:	6113      	str	r3, [r2, #16]
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	46020800 	.word	0x46020800

08003d50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08e      	sub	sp, #56	@ 0x38
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d102      	bne.n	8003d6a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	f000 bec8 	b.w	8004afa <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d6a:	4b99      	ldr	r3, [pc, #612]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d74:	4b96      	ldr	r3, [pc, #600]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 816c 	beq.w	8004064 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <HAL_RCC_OscConfig+0x52>
 8003d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d94:	2b0c      	cmp	r3, #12
 8003d96:	f040 80de 	bne.w	8003f56 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	f040 80da 	bne.w	8003f56 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d102      	bne.n	8003db0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f000 bea5 	b.w	8004afa <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003db4:	4b86      	ldr	r3, [pc, #536]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d004      	beq.n	8003dca <HAL_RCC_OscConfig+0x7a>
 8003dc0:	4b83      	ldr	r3, [pc, #524]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003dc8:	e005      	b.n	8003dd6 <HAL_RCC_OscConfig+0x86>
 8003dca:	4b81      	ldr	r3, [pc, #516]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003dcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d255      	bcs.n	8003e86 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	4618      	mov	r0, r3
 8003de6:	f001 f9d9 	bl	800519c <RCC_SetFlashLatencyFromMSIRange>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	f000 be82 	b.w	8004afa <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003df6:	4b76      	ldr	r3, [pc, #472]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	4a75      	ldr	r2, [pc, #468]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003dfc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e00:	6093      	str	r3, [r2, #8]
 8003e02:	4b73      	ldr	r3, [pc, #460]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0e:	4970      	ldr	r1, [pc, #448]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003e1c:	d309      	bcc.n	8003e32 <HAL_RCC_OscConfig+0xe2>
 8003e1e:	4b6c      	ldr	r3, [pc, #432]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f023 021f 	bic.w	r2, r3, #31
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4969      	ldr	r1, [pc, #420]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60cb      	str	r3, [r1, #12]
 8003e30:	e07e      	b.n	8003f30 <HAL_RCC_OscConfig+0x1e0>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	da0a      	bge.n	8003e50 <HAL_RCC_OscConfig+0x100>
 8003e3a:	4b65      	ldr	r3, [pc, #404]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	015b      	lsls	r3, r3, #5
 8003e48:	4961      	ldr	r1, [pc, #388]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60cb      	str	r3, [r1, #12]
 8003e4e:	e06f      	b.n	8003f30 <HAL_RCC_OscConfig+0x1e0>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e58:	d30a      	bcc.n	8003e70 <HAL_RCC_OscConfig+0x120>
 8003e5a:	4b5d      	ldr	r3, [pc, #372]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	029b      	lsls	r3, r3, #10
 8003e68:	4959      	ldr	r1, [pc, #356]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60cb      	str	r3, [r1, #12]
 8003e6e:	e05f      	b.n	8003f30 <HAL_RCC_OscConfig+0x1e0>
 8003e70:	4b57      	ldr	r3, [pc, #348]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	03db      	lsls	r3, r3, #15
 8003e7e:	4954      	ldr	r1, [pc, #336]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60cb      	str	r3, [r1, #12]
 8003e84:	e054      	b.n	8003f30 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003e86:	4b52      	ldr	r3, [pc, #328]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	4a51      	ldr	r2, [pc, #324]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003e8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e90:	6093      	str	r3, [r2, #8]
 8003e92:	4b4f      	ldr	r3, [pc, #316]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	494c      	ldr	r1, [pc, #304]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003eac:	d309      	bcc.n	8003ec2 <HAL_RCC_OscConfig+0x172>
 8003eae:	4b48      	ldr	r3, [pc, #288]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f023 021f 	bic.w	r2, r3, #31
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	4945      	ldr	r1, [pc, #276]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60cb      	str	r3, [r1, #12]
 8003ec0:	e028      	b.n	8003f14 <HAL_RCC_OscConfig+0x1c4>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	da0a      	bge.n	8003ee0 <HAL_RCC_OscConfig+0x190>
 8003eca:	4b41      	ldr	r3, [pc, #260]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	015b      	lsls	r3, r3, #5
 8003ed8:	493d      	ldr	r1, [pc, #244]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60cb      	str	r3, [r1, #12]
 8003ede:	e019      	b.n	8003f14 <HAL_RCC_OscConfig+0x1c4>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee8:	d30a      	bcc.n	8003f00 <HAL_RCC_OscConfig+0x1b0>
 8003eea:	4b39      	ldr	r3, [pc, #228]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	029b      	lsls	r3, r3, #10
 8003ef8:	4935      	ldr	r1, [pc, #212]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60cb      	str	r3, [r1, #12]
 8003efe:	e009      	b.n	8003f14 <HAL_RCC_OscConfig+0x1c4>
 8003f00:	4b33      	ldr	r3, [pc, #204]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	03db      	lsls	r3, r3, #15
 8003f0e:	4930      	ldr	r1, [pc, #192]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f001 f93c 	bl	800519c <RCC_SetFlashLatencyFromMSIRange>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f000 bde5 	b.w	8004afa <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003f30:	f001 f8de 	bl	80050f0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f34:	4b27      	ldr	r3, [pc, #156]	@ (8003fd4 <HAL_RCC_OscConfig+0x284>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fd fb35 	bl	80015a8 <HAL_InitTick>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003f44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 808a 	beq.w	8004062 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f52:	f000 bdd2 	b.w	8004afa <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d066      	beq.n	800402c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003f64:	f043 0301 	orr.w	r3, r3, #1
 8003f68:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f6a:	f7fd fba7 	bl	80016bc <HAL_GetTick>
 8003f6e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003f70:	e009      	b.n	8003f86 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f72:	f7fd fba3 	bl	80016bc <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d902      	bls.n	8003f86 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	f000 bdba 	b.w	8004afa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003f86:	4b12      	ldr	r3, [pc, #72]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0ef      	beq.n	8003f72 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003f92:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003f98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f9c:	6093      	str	r3, [r2, #8]
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	4909      	ldr	r1, [pc, #36]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003fb8:	d30e      	bcc.n	8003fd8 <HAL_RCC_OscConfig+0x288>
 8003fba:	4b05      	ldr	r3, [pc, #20]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f023 021f 	bic.w	r2, r3, #31
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	4902      	ldr	r1, [pc, #8]	@ (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60cb      	str	r3, [r1, #12]
 8003fcc:	e04a      	b.n	8004064 <HAL_RCC_OscConfig+0x314>
 8003fce:	bf00      	nop
 8003fd0:	46020c00 	.word	0x46020c00
 8003fd4:	20000004 	.word	0x20000004
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	da0a      	bge.n	8003ff6 <HAL_RCC_OscConfig+0x2a6>
 8003fe0:	4b98      	ldr	r3, [pc, #608]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	015b      	lsls	r3, r3, #5
 8003fee:	4995      	ldr	r1, [pc, #596]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60cb      	str	r3, [r1, #12]
 8003ff4:	e036      	b.n	8004064 <HAL_RCC_OscConfig+0x314>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ffe:	d30a      	bcc.n	8004016 <HAL_RCC_OscConfig+0x2c6>
 8004000:	4b90      	ldr	r3, [pc, #576]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	029b      	lsls	r3, r3, #10
 800400e:	498d      	ldr	r1, [pc, #564]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004010:	4313      	orrs	r3, r2
 8004012:	60cb      	str	r3, [r1, #12]
 8004014:	e026      	b.n	8004064 <HAL_RCC_OscConfig+0x314>
 8004016:	4b8b      	ldr	r3, [pc, #556]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	03db      	lsls	r3, r3, #15
 8004024:	4987      	ldr	r1, [pc, #540]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004026:	4313      	orrs	r3, r2
 8004028:	60cb      	str	r3, [r1, #12]
 800402a:	e01b      	b.n	8004064 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800402c:	4b85      	ldr	r3, [pc, #532]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a84      	ldr	r2, [pc, #528]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004038:	f7fd fb40 	bl	80016bc <HAL_GetTick>
 800403c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800403e:	e009      	b.n	8004054 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004040:	f7fd fb3c 	bl	80016bc <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d902      	bls.n	8004054 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	f000 bd53 	b.w	8004afa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004054:	4b7b      	ldr	r3, [pc, #492]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1ef      	bne.n	8004040 <HAL_RCC_OscConfig+0x2f0>
 8004060:	e000      	b.n	8004064 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004062:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 808b 	beq.w	8004188 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004074:	2b08      	cmp	r3, #8
 8004076:	d005      	beq.n	8004084 <HAL_RCC_OscConfig+0x334>
 8004078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407a:	2b0c      	cmp	r3, #12
 800407c:	d109      	bne.n	8004092 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800407e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004080:	2b03      	cmp	r3, #3
 8004082:	d106      	bne.n	8004092 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d17d      	bne.n	8004188 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	f000 bd34 	b.w	8004afa <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800409a:	d106      	bne.n	80040aa <HAL_RCC_OscConfig+0x35a>
 800409c:	4b69      	ldr	r3, [pc, #420]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a68      	ldr	r2, [pc, #416]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80040a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	e041      	b.n	800412e <HAL_RCC_OscConfig+0x3de>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040b2:	d112      	bne.n	80040da <HAL_RCC_OscConfig+0x38a>
 80040b4:	4b63      	ldr	r3, [pc, #396]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a62      	ldr	r2, [pc, #392]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80040ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	4b60      	ldr	r3, [pc, #384]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a5f      	ldr	r2, [pc, #380]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80040c6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	4b5d      	ldr	r3, [pc, #372]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a5c      	ldr	r2, [pc, #368]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80040d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	e029      	b.n	800412e <HAL_RCC_OscConfig+0x3de>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80040e2:	d112      	bne.n	800410a <HAL_RCC_OscConfig+0x3ba>
 80040e4:	4b57      	ldr	r3, [pc, #348]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a56      	ldr	r2, [pc, #344]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80040ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	4b54      	ldr	r3, [pc, #336]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a53      	ldr	r2, [pc, #332]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80040f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	4b51      	ldr	r3, [pc, #324]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a50      	ldr	r2, [pc, #320]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	e011      	b.n	800412e <HAL_RCC_OscConfig+0x3de>
 800410a:	4b4e      	ldr	r3, [pc, #312]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a4d      	ldr	r2, [pc, #308]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004110:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	4b4b      	ldr	r3, [pc, #300]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a4a      	ldr	r2, [pc, #296]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 800411c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	4b48      	ldr	r3, [pc, #288]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a47      	ldr	r2, [pc, #284]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004128:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800412c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d014      	beq.n	8004160 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004136:	f7fd fac1 	bl	80016bc <HAL_GetTick>
 800413a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800413c:	e009      	b.n	8004152 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800413e:	f7fd fabd 	bl	80016bc <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	@ 0x64
 800414a:	d902      	bls.n	8004152 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	f000 bcd4 	b.w	8004afa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004152:	4b3c      	ldr	r3, [pc, #240]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0ef      	beq.n	800413e <HAL_RCC_OscConfig+0x3ee>
 800415e:	e013      	b.n	8004188 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004160:	f7fd faac 	bl	80016bc <HAL_GetTick>
 8004164:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004166:	e009      	b.n	800417c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004168:	f7fd faa8 	bl	80016bc <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	@ 0x64
 8004174:	d902      	bls.n	800417c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	f000 bcbf 	b.w	8004afa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800417c:	4b31      	ldr	r3, [pc, #196]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1ef      	bne.n	8004168 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d05f      	beq.n	8004254 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004196:	2b04      	cmp	r3, #4
 8004198:	d005      	beq.n	80041a6 <HAL_RCC_OscConfig+0x456>
 800419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419c:	2b0c      	cmp	r3, #12
 800419e:	d114      	bne.n	80041ca <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d111      	bne.n	80041ca <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d102      	bne.n	80041b4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	f000 bca3 	b.w	8004afa <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80041b4:	4b23      	ldr	r3, [pc, #140]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	041b      	lsls	r3, r3, #16
 80041c2:	4920      	ldr	r1, [pc, #128]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80041c8:	e044      	b.n	8004254 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d024      	beq.n	800421c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80041d2:	4b1c      	ldr	r3, [pc, #112]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80041d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041dc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041de:	f7fd fa6d 	bl	80016bc <HAL_GetTick>
 80041e2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041e4:	e009      	b.n	80041fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041e6:	f7fd fa69 	bl	80016bc <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d902      	bls.n	80041fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	f000 bc80 	b.w	8004afa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041fa:	4b12      	ldr	r3, [pc, #72]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0ef      	beq.n	80041e6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004206:	4b0f      	ldr	r3, [pc, #60]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	041b      	lsls	r3, r3, #16
 8004214:	490b      	ldr	r1, [pc, #44]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004216:	4313      	orrs	r3, r2
 8004218:	610b      	str	r3, [r1, #16]
 800421a:	e01b      	b.n	8004254 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800421c:	4b09      	ldr	r3, [pc, #36]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a08      	ldr	r2, [pc, #32]	@ (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004222:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004226:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004228:	f7fd fa48 	bl	80016bc <HAL_GetTick>
 800422c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800422e:	e00b      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004230:	f7fd fa44 	bl	80016bc <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d904      	bls.n	8004248 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	f000 bc5b 	b.w	8004afa <HAL_RCC_OscConfig+0xdaa>
 8004244:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004248:	4baf      	ldr	r3, [pc, #700]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1ed      	bne.n	8004230 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80c8 	beq.w	80043f2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004262:	2300      	movs	r3, #0
 8004264:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004268:	4ba7      	ldr	r3, [pc, #668]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 800426a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	d111      	bne.n	800429a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004276:	4ba4      	ldr	r3, [pc, #656]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 8004278:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800427c:	4aa2      	ldr	r2, [pc, #648]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 800427e:	f043 0304 	orr.w	r3, r3, #4
 8004282:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004286:	4ba0      	ldr	r3, [pc, #640]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 8004288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800429a:	4b9c      	ldr	r3, [pc, #624]	@ (800450c <HAL_RCC_OscConfig+0x7bc>)
 800429c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d119      	bne.n	80042da <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80042a6:	4b99      	ldr	r3, [pc, #612]	@ (800450c <HAL_RCC_OscConfig+0x7bc>)
 80042a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042aa:	4a98      	ldr	r2, [pc, #608]	@ (800450c <HAL_RCC_OscConfig+0x7bc>)
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042b2:	f7fd fa03 	bl	80016bc <HAL_GetTick>
 80042b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80042b8:	e009      	b.n	80042ce <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ba:	f7fd f9ff 	bl	80016bc <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d902      	bls.n	80042ce <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	f000 bc16 	b.w	8004afa <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80042ce:	4b8f      	ldr	r3, [pc, #572]	@ (800450c <HAL_RCC_OscConfig+0x7bc>)
 80042d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0ef      	beq.n	80042ba <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d05f      	beq.n	80043a2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80042e2:	4b89      	ldr	r3, [pc, #548]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 80042e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042e8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d037      	beq.n	8004368 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d006      	beq.n	8004310 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e3f4      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d01b      	beq.n	8004352 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800431a:	4b7b      	ldr	r3, [pc, #492]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 800431c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004320:	4a79      	ldr	r2, [pc, #484]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 8004322:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004326:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800432a:	f7fd f9c7 	bl	80016bc <HAL_GetTick>
 800432e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004332:	f7fd f9c3 	bl	80016bc <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b05      	cmp	r3, #5
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e3da      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004344:	4b70      	ldr	r3, [pc, #448]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 8004346:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800434a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1ef      	bne.n	8004332 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004352:	4b6d      	ldr	r3, [pc, #436]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 8004354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004358:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	4969      	ldr	r1, [pc, #420]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004368:	4b67      	ldr	r3, [pc, #412]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 800436a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800436e:	4a66      	ldr	r2, [pc, #408]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 8004370:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004374:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004378:	f7fd f9a0 	bl	80016bc <HAL_GetTick>
 800437c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004380:	f7fd f99c 	bl	80016bc <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b05      	cmp	r3, #5
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e3b3      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004392:	4b5d      	ldr	r3, [pc, #372]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 8004394:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0ef      	beq.n	8004380 <HAL_RCC_OscConfig+0x630>
 80043a0:	e01b      	b.n	80043da <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80043a2:	4b59      	ldr	r3, [pc, #356]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 80043a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043a8:	4a57      	ldr	r2, [pc, #348]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 80043aa:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80043ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80043b2:	f7fd f983 	bl	80016bc <HAL_GetTick>
 80043b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ba:	f7fd f97f 	bl	80016bc <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b05      	cmp	r3, #5
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e396      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80043cc:	4b4e      	ldr	r3, [pc, #312]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 80043ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1ef      	bne.n	80043ba <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043da:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d107      	bne.n	80043f2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e2:	4b49      	ldr	r3, [pc, #292]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 80043e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043e8:	4a47      	ldr	r2, [pc, #284]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 80043ea:	f023 0304 	bic.w	r3, r3, #4
 80043ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 8111 	beq.w	8004622 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004400:	2300      	movs	r3, #0
 8004402:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004406:	4b40      	ldr	r3, [pc, #256]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 8004408:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d111      	bne.n	8004438 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004414:	4b3c      	ldr	r3, [pc, #240]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 8004416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800441a:	4a3b      	ldr	r2, [pc, #236]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 800441c:	f043 0304 	orr.w	r3, r3, #4
 8004420:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004424:	4b38      	ldr	r3, [pc, #224]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 8004426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004432:	2301      	movs	r3, #1
 8004434:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004438:	4b34      	ldr	r3, [pc, #208]	@ (800450c <HAL_RCC_OscConfig+0x7bc>)
 800443a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d118      	bne.n	8004476 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004444:	4b31      	ldr	r3, [pc, #196]	@ (800450c <HAL_RCC_OscConfig+0x7bc>)
 8004446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004448:	4a30      	ldr	r2, [pc, #192]	@ (800450c <HAL_RCC_OscConfig+0x7bc>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004450:	f7fd f934 	bl	80016bc <HAL_GetTick>
 8004454:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004458:	f7fd f930 	bl	80016bc <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e347      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800446a:	4b28      	ldr	r3, [pc, #160]	@ (800450c <HAL_RCC_OscConfig+0x7bc>)
 800446c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01f      	beq.n	80044c2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b00      	cmp	r3, #0
 800448c:	d010      	beq.n	80044b0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800448e:	4b1e      	ldr	r3, [pc, #120]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 8004490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004494:	4a1c      	ldr	r2, [pc, #112]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 8004496:	f043 0304 	orr.w	r3, r3, #4
 800449a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800449e:	4b1a      	ldr	r3, [pc, #104]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 80044a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044a4:	4a18      	ldr	r2, [pc, #96]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044ae:	e018      	b.n	80044e2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044b0:	4b15      	ldr	r3, [pc, #84]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 80044b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044b6:	4a14      	ldr	r2, [pc, #80]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044c0:	e00f      	b.n	80044e2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044c2:	4b11      	ldr	r3, [pc, #68]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 80044c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044c8:	4a0f      	ldr	r2, [pc, #60]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80044d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 80044d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044d8:	4a0b      	ldr	r2, [pc, #44]	@ (8004508 <HAL_RCC_OscConfig+0x7b8>)
 80044da:	f023 0304 	bic.w	r3, r3, #4
 80044de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d057      	beq.n	800459a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80044ea:	f7fd f8e7 	bl	80016bc <HAL_GetTick>
 80044ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044f0:	e00e      	b.n	8004510 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f2:	f7fd f8e3 	bl	80016bc <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004500:	4293      	cmp	r3, r2
 8004502:	d905      	bls.n	8004510 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e2f8      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
 8004508:	46020c00 	.word	0x46020c00
 800450c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004510:	4b9c      	ldr	r3, [pc, #624]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 8004512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0e9      	beq.n	80044f2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004526:	2b00      	cmp	r3, #0
 8004528:	d01b      	beq.n	8004562 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800452a:	4b96      	ldr	r3, [pc, #600]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 800452c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004530:	4a94      	ldr	r2, [pc, #592]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 8004532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004536:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800453a:	e00a      	b.n	8004552 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453c:	f7fd f8be 	bl	80016bc <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e2d3      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004552:	4b8c      	ldr	r3, [pc, #560]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 8004554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004558:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0ed      	beq.n	800453c <HAL_RCC_OscConfig+0x7ec>
 8004560:	e053      	b.n	800460a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004562:	4b88      	ldr	r3, [pc, #544]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 8004564:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004568:	4a86      	ldr	r2, [pc, #536]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 800456a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800456e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004572:	e00a      	b.n	800458a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004574:	f7fd f8a2 	bl	80016bc <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004582:	4293      	cmp	r3, r2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e2b7      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800458a:	4b7e      	ldr	r3, [pc, #504]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 800458c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1ed      	bne.n	8004574 <HAL_RCC_OscConfig+0x824>
 8004598:	e037      	b.n	800460a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800459a:	f7fd f88f 	bl	80016bc <HAL_GetTick>
 800459e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045a0:	e00a      	b.n	80045b8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a2:	f7fd f88b 	bl	80016bc <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e2a0      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045b8:	4b72      	ldr	r3, [pc, #456]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 80045ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1ed      	bne.n	80045a2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80045c6:	4b6f      	ldr	r3, [pc, #444]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 80045c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01a      	beq.n	800460a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80045d4:	4b6b      	ldr	r3, [pc, #428]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 80045d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045da:	4a6a      	ldr	r2, [pc, #424]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 80045dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fd f869 	bl	80016bc <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e27e      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045fc:	4b61      	ldr	r3, [pc, #388]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 80045fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004602:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1ed      	bne.n	80045e6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800460a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800460e:	2b01      	cmp	r3, #1
 8004610:	d107      	bne.n	8004622 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004612:	4b5c      	ldr	r3, [pc, #368]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 8004614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004618:	4a5a      	ldr	r2, [pc, #360]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 800461a:	f023 0304 	bic.w	r3, r3, #4
 800461e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d036      	beq.n	800469c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d019      	beq.n	800466a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004636:	4b53      	ldr	r3, [pc, #332]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a52      	ldr	r2, [pc, #328]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 800463c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004640:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004642:	f7fd f83b 	bl	80016bc <HAL_GetTick>
 8004646:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800464a:	f7fd f837 	bl	80016bc <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e24e      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800465c:	4b49      	ldr	r3, [pc, #292]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x8fa>
 8004668:	e018      	b.n	800469c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800466a:	4b46      	ldr	r3, [pc, #280]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a45      	ldr	r2, [pc, #276]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 8004670:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004674:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004676:	f7fd f821 	bl	80016bc <HAL_GetTick>
 800467a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800467e:	f7fd f81d 	bl	80016bc <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e234      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004690:	4b3c      	ldr	r3, [pc, #240]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1f0      	bne.n	800467e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d036      	beq.n	8004716 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d019      	beq.n	80046e4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80046b0:	4b34      	ldr	r3, [pc, #208]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a33      	ldr	r2, [pc, #204]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 80046b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046ba:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80046bc:	f7fc fffe 	bl	80016bc <HAL_GetTick>
 80046c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80046c4:	f7fc fffa 	bl	80016bc <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e211      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80046d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x974>
 80046e2:	e018      	b.n	8004716 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80046e4:	4b27      	ldr	r3, [pc, #156]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a26      	ldr	r2, [pc, #152]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 80046ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046ee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80046f0:	f7fc ffe4 	bl	80016bc <HAL_GetTick>
 80046f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80046f8:	f7fc ffe0 	bl	80016bc <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e1f7      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800470a:	4b1e      	ldr	r3, [pc, #120]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	d07f      	beq.n	8004822 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004726:	2b00      	cmp	r3, #0
 8004728:	d062      	beq.n	80047f0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800472a:	4b16      	ldr	r3, [pc, #88]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	4a15      	ldr	r2, [pc, #84]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 8004730:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004734:	6093      	str	r3, [r2, #8]
 8004736:	4b13      	ldr	r3, [pc, #76]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004742:	4910      	ldr	r1, [pc, #64]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 8004744:	4313      	orrs	r3, r2
 8004746:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004750:	d309      	bcc.n	8004766 <HAL_RCC_OscConfig+0xa16>
 8004752:	4b0c      	ldr	r3, [pc, #48]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f023 021f 	bic.w	r2, r3, #31
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	4909      	ldr	r1, [pc, #36]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 8004760:	4313      	orrs	r3, r2
 8004762:	60cb      	str	r3, [r1, #12]
 8004764:	e02a      	b.n	80047bc <HAL_RCC_OscConfig+0xa6c>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	2b00      	cmp	r3, #0
 800476c:	da0c      	bge.n	8004788 <HAL_RCC_OscConfig+0xa38>
 800476e:	4b05      	ldr	r3, [pc, #20]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	015b      	lsls	r3, r3, #5
 800477c:	4901      	ldr	r1, [pc, #4]	@ (8004784 <HAL_RCC_OscConfig+0xa34>)
 800477e:	4313      	orrs	r3, r2
 8004780:	60cb      	str	r3, [r1, #12]
 8004782:	e01b      	b.n	80047bc <HAL_RCC_OscConfig+0xa6c>
 8004784:	46020c00 	.word	0x46020c00
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004790:	d30a      	bcc.n	80047a8 <HAL_RCC_OscConfig+0xa58>
 8004792:	4ba1      	ldr	r3, [pc, #644]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	029b      	lsls	r3, r3, #10
 80047a0:	499d      	ldr	r1, [pc, #628]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60cb      	str	r3, [r1, #12]
 80047a6:	e009      	b.n	80047bc <HAL_RCC_OscConfig+0xa6c>
 80047a8:	4b9b      	ldr	r3, [pc, #620]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	03db      	lsls	r3, r3, #15
 80047b6:	4998      	ldr	r1, [pc, #608]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80047bc:	4b96      	ldr	r3, [pc, #600]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a95      	ldr	r2, [pc, #596]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 80047c2:	f043 0310 	orr.w	r3, r3, #16
 80047c6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80047c8:	f7fc ff78 	bl	80016bc <HAL_GetTick>
 80047cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80047d0:	f7fc ff74 	bl	80016bc <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e18b      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80047e2:	4b8d      	ldr	r3, [pc, #564]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCC_OscConfig+0xa80>
 80047ee:	e018      	b.n	8004822 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80047f0:	4b89      	ldr	r3, [pc, #548]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a88      	ldr	r2, [pc, #544]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 80047f6:	f023 0310 	bic.w	r3, r3, #16
 80047fa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80047fc:	f7fc ff5e 	bl	80016bc <HAL_GetTick>
 8004800:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004804:	f7fc ff5a 	bl	80016bc <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e171      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004816:	4b80      	ldr	r3, [pc, #512]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 8166 	beq.w	8004af8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800482c:	2300      	movs	r3, #0
 800482e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004832:	4b79      	ldr	r3, [pc, #484]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f003 030c 	and.w	r3, r3, #12
 800483a:	2b0c      	cmp	r3, #12
 800483c:	f000 80f2 	beq.w	8004a24 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004844:	2b02      	cmp	r3, #2
 8004846:	f040 80c5 	bne.w	80049d4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800484a:	4b73      	ldr	r3, [pc, #460]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a72      	ldr	r2, [pc, #456]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 8004850:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004854:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004856:	f7fc ff31 	bl	80016bc <HAL_GetTick>
 800485a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485e:	f7fc ff2d 	bl	80016bc <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e144      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004870:	4b69      	ldr	r3, [pc, #420]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f0      	bne.n	800485e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800487c:	4b66      	ldr	r3, [pc, #408]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 800487e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b00      	cmp	r3, #0
 8004888:	d111      	bne.n	80048ae <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800488a:	4b63      	ldr	r3, [pc, #396]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 800488c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004890:	4a61      	ldr	r2, [pc, #388]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 8004892:	f043 0304 	orr.w	r3, r3, #4
 8004896:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800489a:	4b5f      	ldr	r3, [pc, #380]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 800489c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80048a8:	2301      	movs	r3, #1
 80048aa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80048ae:	4b5b      	ldr	r3, [pc, #364]	@ (8004a1c <HAL_RCC_OscConfig+0xccc>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048ba:	d102      	bne.n	80048c2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80048bc:	2301      	movs	r3, #1
 80048be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80048c2:	4b56      	ldr	r3, [pc, #344]	@ (8004a1c <HAL_RCC_OscConfig+0xccc>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	4a55      	ldr	r2, [pc, #340]	@ (8004a1c <HAL_RCC_OscConfig+0xccc>)
 80048c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048cc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80048ce:	4b52      	ldr	r3, [pc, #328]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 80048d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048d6:	f023 0303 	bic.w	r3, r3, #3
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80048e2:	3a01      	subs	r2, #1
 80048e4:	0212      	lsls	r2, r2, #8
 80048e6:	4311      	orrs	r1, r2
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80048ec:	430a      	orrs	r2, r1
 80048ee:	494a      	ldr	r1, [pc, #296]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80048f4:	4b48      	ldr	r3, [pc, #288]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 80048f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048f8:	4b49      	ldr	r3, [pc, #292]	@ (8004a20 <HAL_RCC_OscConfig+0xcd0>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004900:	3a01      	subs	r2, #1
 8004902:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800490a:	3a01      	subs	r2, #1
 800490c:	0252      	lsls	r2, r2, #9
 800490e:	b292      	uxth	r2, r2
 8004910:	4311      	orrs	r1, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004916:	3a01      	subs	r2, #1
 8004918:	0412      	lsls	r2, r2, #16
 800491a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800491e:	4311      	orrs	r1, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004924:	3a01      	subs	r2, #1
 8004926:	0612      	lsls	r2, r2, #24
 8004928:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800492c:	430a      	orrs	r2, r1
 800492e:	493a      	ldr	r1, [pc, #232]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 8004930:	4313      	orrs	r3, r2
 8004932:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004934:	4b38      	ldr	r3, [pc, #224]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 8004936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004938:	4a37      	ldr	r2, [pc, #220]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 800493a:	f023 0310 	bic.w	r3, r3, #16
 800493e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004944:	4a34      	ldr	r2, [pc, #208]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800494a:	4b33      	ldr	r3, [pc, #204]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 800494c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494e:	4a32      	ldr	r2, [pc, #200]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 8004950:	f043 0310 	orr.w	r3, r3, #16
 8004954:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004956:	4b30      	ldr	r3, [pc, #192]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 8004958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495a:	f023 020c 	bic.w	r2, r3, #12
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004962:	492d      	ldr	r1, [pc, #180]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 8004964:	4313      	orrs	r3, r2
 8004966:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004968:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800496c:	2b01      	cmp	r3, #1
 800496e:	d105      	bne.n	800497c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004970:	4b2a      	ldr	r3, [pc, #168]	@ (8004a1c <HAL_RCC_OscConfig+0xccc>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4a29      	ldr	r2, [pc, #164]	@ (8004a1c <HAL_RCC_OscConfig+0xccc>)
 8004976:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800497a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800497c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004980:	2b01      	cmp	r3, #1
 8004982:	d107      	bne.n	8004994 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004984:	4b24      	ldr	r3, [pc, #144]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 8004986:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800498a:	4a23      	ldr	r2, [pc, #140]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 800498c:	f023 0304 	bic.w	r3, r3, #4
 8004990:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004994:	4b20      	ldr	r3, [pc, #128]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1f      	ldr	r2, [pc, #124]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 800499a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800499e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80049a0:	f7fc fe8c 	bl	80016bc <HAL_GetTick>
 80049a4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a8:	f7fc fe88 	bl	80016bc <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e09f      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80049ba:	4b17      	ldr	r3, [pc, #92]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80049c6:	4b14      	ldr	r3, [pc, #80]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 80049c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ca:	4a13      	ldr	r2, [pc, #76]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 80049cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049d0:	6293      	str	r3, [r2, #40]	@ 0x28
 80049d2:	e091      	b.n	8004af8 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80049d4:	4b10      	ldr	r3, [pc, #64]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a0f      	ldr	r2, [pc, #60]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 80049da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049de:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80049e0:	f7fc fe6c 	bl	80016bc <HAL_GetTick>
 80049e4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fc fe68 	bl	80016bc <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e07f      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80049fa:	4b07      	ldr	r3, [pc, #28]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004a06:	4b04      	ldr	r3, [pc, #16]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 8004a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0a:	4a03      	ldr	r2, [pc, #12]	@ (8004a18 <HAL_RCC_OscConfig+0xcc8>)
 8004a0c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004a10:	f023 0303 	bic.w	r3, r3, #3
 8004a14:	6293      	str	r3, [r2, #40]	@ 0x28
 8004a16:	e06f      	b.n	8004af8 <HAL_RCC_OscConfig+0xda8>
 8004a18:	46020c00 	.word	0x46020c00
 8004a1c:	46020800 	.word	0x46020800
 8004a20:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004a24:	4b37      	ldr	r3, [pc, #220]	@ (8004b04 <HAL_RCC_OscConfig+0xdb4>)
 8004a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a28:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a2a:	4b36      	ldr	r3, [pc, #216]	@ (8004b04 <HAL_RCC_OscConfig+0xdb4>)
 8004a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a2e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d039      	beq.n	8004aac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f003 0203 	and.w	r2, r3, #3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d132      	bne.n	8004aac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	0a1b      	lsrs	r3, r3, #8
 8004a4a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a52:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d129      	bne.n	8004aac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d122      	bne.n	8004aac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a70:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d11a      	bne.n	8004aac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	0a5b      	lsrs	r3, r3, #9
 8004a7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a82:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d111      	bne.n	8004aac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	0c1b      	lsrs	r3, r3, #16
 8004a8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a94:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d108      	bne.n	8004aac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	0e1b      	lsrs	r3, r3, #24
 8004a9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e024      	b.n	8004afa <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004ab0:	4b14      	ldr	r3, [pc, #80]	@ (8004b04 <HAL_RCC_OscConfig+0xdb4>)
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab4:	08db      	lsrs	r3, r3, #3
 8004ab6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d01a      	beq.n	8004af8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004ac2:	4b10      	ldr	r3, [pc, #64]	@ (8004b04 <HAL_RCC_OscConfig+0xdb4>)
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8004b04 <HAL_RCC_OscConfig+0xdb4>)
 8004ac8:	f023 0310 	bic.w	r3, r3, #16
 8004acc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ace:	f7fc fdf5 	bl	80016bc <HAL_GetTick>
 8004ad2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004ad4:	bf00      	nop
 8004ad6:	f7fc fdf1 	bl	80016bc <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d0f9      	beq.n	8004ad6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae6:	4a07      	ldr	r2, [pc, #28]	@ (8004b04 <HAL_RCC_OscConfig+0xdb4>)
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004aec:	4b05      	ldr	r3, [pc, #20]	@ (8004b04 <HAL_RCC_OscConfig+0xdb4>)
 8004aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af0:	4a04      	ldr	r2, [pc, #16]	@ (8004b04 <HAL_RCC_OscConfig+0xdb4>)
 8004af2:	f043 0310 	orr.w	r3, r3, #16
 8004af6:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3738      	adds	r7, #56	@ 0x38
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	46020c00 	.word	0x46020c00

08004b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e1d9      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b1c:	4b9b      	ldr	r3, [pc, #620]	@ (8004d8c <HAL_RCC_ClockConfig+0x284>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 030f 	and.w	r3, r3, #15
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d910      	bls.n	8004b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2a:	4b98      	ldr	r3, [pc, #608]	@ (8004d8c <HAL_RCC_ClockConfig+0x284>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f023 020f 	bic.w	r2, r3, #15
 8004b32:	4996      	ldr	r1, [pc, #600]	@ (8004d8c <HAL_RCC_ClockConfig+0x284>)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3a:	4b94      	ldr	r3, [pc, #592]	@ (8004d8c <HAL_RCC_ClockConfig+0x284>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e1c1      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d010      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	695a      	ldr	r2, [r3, #20]
 8004b5c:	4b8c      	ldr	r3, [pc, #560]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d908      	bls.n	8004b7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004b68:	4b89      	ldr	r3, [pc, #548]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	4986      	ldr	r1, [pc, #536]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d012      	beq.n	8004bac <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	4b81      	ldr	r3, [pc, #516]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	091b      	lsrs	r3, r3, #4
 8004b90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d909      	bls.n	8004bac <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004b98:	4b7d      	ldr	r3, [pc, #500]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	497a      	ldr	r1, [pc, #488]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d010      	beq.n	8004bda <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	4b74      	ldr	r3, [pc, #464]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d908      	bls.n	8004bda <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004bc8:	4b71      	ldr	r3, [pc, #452]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	496e      	ldr	r1, [pc, #440]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d010      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	4b69      	ldr	r3, [pc, #420]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d908      	bls.n	8004c08 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004bf6:	4b66      	ldr	r3, [pc, #408]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f023 020f 	bic.w	r2, r3, #15
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	4963      	ldr	r1, [pc, #396]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 80d2 	beq.w	8004dba <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004c16:	2300      	movs	r3, #0
 8004c18:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d143      	bne.n	8004caa <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c22:	4b5b      	ldr	r3, [pc, #364]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d110      	bne.n	8004c52 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004c30:	4b57      	ldr	r3, [pc, #348]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c36:	4a56      	ldr	r2, [pc, #344]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004c38:	f043 0304 	orr.w	r3, r3, #4
 8004c3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004c40:	4b53      	ldr	r3, [pc, #332]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004c52:	f7fc fd33 	bl	80016bc <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004c58:	4b4e      	ldr	r3, [pc, #312]	@ (8004d94 <HAL_RCC_ClockConfig+0x28c>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00f      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004c66:	f7fc fd29 	bl	80016bc <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e12b      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004c78:	4b46      	ldr	r3, [pc, #280]	@ (8004d94 <HAL_RCC_ClockConfig+0x28c>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d107      	bne.n	8004c9a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004c8a:	4b41      	ldr	r3, [pc, #260]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c90:	4a3f      	ldr	r2, [pc, #252]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004c92:	f023 0304 	bic.w	r3, r3, #4
 8004c96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004c9a:	4b3d      	ldr	r3, [pc, #244]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d121      	bne.n	8004cea <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e112      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d107      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cb2:	4b37      	ldr	r3, [pc, #220]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d115      	bne.n	8004cea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e106      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004cca:	4b31      	ldr	r3, [pc, #196]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d109      	bne.n	8004cea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e0fa      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cda:	4b2d      	ldr	r3, [pc, #180]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e0f2      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004cea:	4b29      	ldr	r3, [pc, #164]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f023 0203 	bic.w	r2, r3, #3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4926      	ldr	r1, [pc, #152]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004cfc:	f7fc fcde 	bl	80016bc <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d112      	bne.n	8004d30 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d0a:	e00a      	b.n	8004d22 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d0c:	f7fc fcd6 	bl	80016bc <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e0d6      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d22:	4b1b      	ldr	r3, [pc, #108]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f003 030c 	and.w	r3, r3, #12
 8004d2a:	2b0c      	cmp	r3, #12
 8004d2c:	d1ee      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x204>
 8004d2e:	e044      	b.n	8004dba <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d112      	bne.n	8004d5e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d38:	e00a      	b.n	8004d50 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d3a:	f7fc fcbf 	bl	80016bc <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e0bf      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d50:	4b0f      	ldr	r3, [pc, #60]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f003 030c 	and.w	r3, r3, #12
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d1ee      	bne.n	8004d3a <HAL_RCC_ClockConfig+0x232>
 8004d5c:	e02d      	b.n	8004dba <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d123      	bne.n	8004dae <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d66:	e00a      	b.n	8004d7e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d68:	f7fc fca8 	bl	80016bc <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e0a8      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d7e:	4b04      	ldr	r3, [pc, #16]	@ (8004d90 <HAL_RCC_ClockConfig+0x288>)
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	f003 030c 	and.w	r3, r3, #12
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1ee      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x260>
 8004d8a:	e016      	b.n	8004dba <HAL_RCC_ClockConfig+0x2b2>
 8004d8c:	40022000 	.word	0x40022000
 8004d90:	46020c00 	.word	0x46020c00
 8004d94:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d98:	f7fc fc90 	bl	80016bc <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e090      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dae:	4b4a      	ldr	r3, [pc, #296]	@ (8004ed8 <HAL_RCC_ClockConfig+0x3d0>)
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f003 030c 	and.w	r3, r3, #12
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d1ee      	bne.n	8004d98 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d010      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	4b43      	ldr	r3, [pc, #268]	@ (8004ed8 <HAL_RCC_ClockConfig+0x3d0>)
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d208      	bcs.n	8004de8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004dd6:	4b40      	ldr	r3, [pc, #256]	@ (8004ed8 <HAL_RCC_ClockConfig+0x3d0>)
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	f023 020f 	bic.w	r2, r3, #15
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	493d      	ldr	r1, [pc, #244]	@ (8004ed8 <HAL_RCC_ClockConfig+0x3d0>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004de8:	4b3c      	ldr	r3, [pc, #240]	@ (8004edc <HAL_RCC_ClockConfig+0x3d4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d210      	bcs.n	8004e18 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df6:	4b39      	ldr	r3, [pc, #228]	@ (8004edc <HAL_RCC_ClockConfig+0x3d4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 020f 	bic.w	r2, r3, #15
 8004dfe:	4937      	ldr	r1, [pc, #220]	@ (8004edc <HAL_RCC_ClockConfig+0x3d4>)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e06:	4b35      	ldr	r3, [pc, #212]	@ (8004edc <HAL_RCC_ClockConfig+0x3d4>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e05b      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d010      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d208      	bcs.n	8004e46 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004e34:	4b28      	ldr	r3, [pc, #160]	@ (8004ed8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	4925      	ldr	r1, [pc, #148]	@ (8004ed8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d012      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691a      	ldr	r2, [r3, #16]
 8004e56:	4b20      	ldr	r3, [pc, #128]	@ (8004ed8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	091b      	lsrs	r3, r3, #4
 8004e5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d209      	bcs.n	8004e78 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004e64:	4b1c      	ldr	r3, [pc, #112]	@ (8004ed8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	4919      	ldr	r1, [pc, #100]	@ (8004ed8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0310 	and.w	r3, r3, #16
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d010      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695a      	ldr	r2, [r3, #20]
 8004e88:	4b13      	ldr	r3, [pc, #76]	@ (8004ed8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d208      	bcs.n	8004ea6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004e94:	4b10      	ldr	r3, [pc, #64]	@ (8004ed8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	490d      	ldr	r1, [pc, #52]	@ (8004ed8 <HAL_RCC_ClockConfig+0x3d0>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004ea6:	f000 f821 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed8 <HAL_RCC_ClockConfig+0x3d0>)
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	490a      	ldr	r1, [pc, #40]	@ (8004ee0 <HAL_RCC_ClockConfig+0x3d8>)
 8004eb6:	5ccb      	ldrb	r3, [r1, r3]
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ebc:	4a09      	ldr	r2, [pc, #36]	@ (8004ee4 <HAL_RCC_ClockConfig+0x3dc>)
 8004ebe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ec0:	4b09      	ldr	r3, [pc, #36]	@ (8004ee8 <HAL_RCC_ClockConfig+0x3e0>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fc fb6f 	bl	80015a8 <HAL_InitTick>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	73fb      	strb	r3, [r7, #15]

  return status;
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	46020c00 	.word	0x46020c00
 8004edc:	40022000 	.word	0x40022000
 8004ee0:	0800e6ac 	.word	0x0800e6ac
 8004ee4:	20000000 	.word	0x20000000
 8004ee8:	20000004 	.word	0x20000004

08004eec <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b08b      	sub	sp, #44	@ 0x2c
 8004ef0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004efa:	4b78      	ldr	r3, [pc, #480]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f003 030c 	and.w	r3, r3, #12
 8004f02:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f04:	4b75      	ldr	r3, [pc, #468]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <HAL_RCC_GetSysClockFreq+0x34>
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	2b0c      	cmp	r3, #12
 8004f18:	d121      	bne.n	8004f5e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d11e      	bne.n	8004f5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004f20:	4b6e      	ldr	r3, [pc, #440]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d107      	bne.n	8004f3c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004f2c:	4b6b      	ldr	r3, [pc, #428]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f32:	0b1b      	lsrs	r3, r3, #12
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f3a:	e005      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004f3c:	4b67      	ldr	r3, [pc, #412]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	0f1b      	lsrs	r3, r3, #28
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f48:	4a65      	ldr	r2, [pc, #404]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f50:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d110      	bne.n	8004f7a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f5c:	e00d      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f5e:	4b5f      	ldr	r3, [pc, #380]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d102      	bne.n	8004f70 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f6a:	4b5e      	ldr	r3, [pc, #376]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004f6c:	623b      	str	r3, [r7, #32]
 8004f6e:	e004      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d101      	bne.n	8004f7a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f76:	4b5b      	ldr	r3, [pc, #364]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004f78:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	2b0c      	cmp	r3, #12
 8004f7e:	f040 80a5 	bne.w	80050cc <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004f82:	4b56      	ldr	r3, [pc, #344]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004f8c:	4b53      	ldr	r3, [pc, #332]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f90:	0a1b      	lsrs	r3, r3, #8
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	3301      	adds	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004f9a:	4b50      	ldr	r3, [pc, #320]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9e:	091b      	lsrs	r3, r3, #4
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004fa6:	4b4d      	ldr	r3, [pc, #308]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004faa:	08db      	lsrs	r3, r3, #3
 8004fac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	fb02 f303 	mul.w	r3, r2, r3
 8004fb6:	ee07 3a90 	vmov	s15, r3
 8004fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fbe:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d003      	beq.n	8004fd0 <HAL_RCC_GetSysClockFreq+0xe4>
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d022      	beq.n	8005014 <HAL_RCC_GetSysClockFreq+0x128>
 8004fce:	e043      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fda:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80050e8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fea:	ee07 3a90 	vmov	s15, r3
 8004fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004ff2:	ed97 6a01 	vldr	s12, [r7, #4]
 8004ff6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80050ec <HAL_RCC_GetSysClockFreq+0x200>
 8004ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005006:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800500a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005012:	e046      	b.n	80050a2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80050e8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005026:	4b2d      	ldr	r3, [pc, #180]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800502a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005036:	ed97 6a01 	vldr	s12, [r7, #4]
 800503a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80050ec <HAL_RCC_GetSysClockFreq+0x200>
 800503e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005042:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800504a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800504e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005056:	e024      	b.n	80050a2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	ee07 3a90 	vmov	s15, r3
 8005068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005070:	4b1a      	ldr	r3, [pc, #104]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005078:	ee07 3a90 	vmov	s15, r3
 800507c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005080:	ed97 6a01 	vldr	s12, [r7, #4]
 8005084:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80050ec <HAL_RCC_GetSysClockFreq+0x200>
 8005088:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800508c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005090:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005094:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800509c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050a0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80050a2:	4b0e      	ldr	r3, [pc, #56]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80050a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a6:	0e1b      	lsrs	r3, r3, #24
 80050a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050ac:	3301      	adds	r3, #1
 80050ae:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80050be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050c6:	ee17 3a90 	vmov	r3, s15
 80050ca:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80050cc:	6a3b      	ldr	r3, [r7, #32]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	372c      	adds	r7, #44	@ 0x2c
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	46020c00 	.word	0x46020c00
 80050e0:	0800e6c4 	.word	0x0800e6c4
 80050e4:	00f42400 	.word	0x00f42400
 80050e8:	4b742400 	.word	0x4b742400
 80050ec:	46000000 	.word	0x46000000

080050f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80050f4:	f7ff fefa 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 80050f8:	4602      	mov	r2, r0
 80050fa:	4b07      	ldr	r3, [pc, #28]	@ (8005118 <HAL_RCC_GetHCLKFreq+0x28>)
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	4906      	ldr	r1, [pc, #24]	@ (800511c <HAL_RCC_GetHCLKFreq+0x2c>)
 8005104:	5ccb      	ldrb	r3, [r1, r3]
 8005106:	fa22 f303 	lsr.w	r3, r2, r3
 800510a:	4a05      	ldr	r2, [pc, #20]	@ (8005120 <HAL_RCC_GetHCLKFreq+0x30>)
 800510c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800510e:	4b04      	ldr	r3, [pc, #16]	@ (8005120 <HAL_RCC_GetHCLKFreq+0x30>)
 8005110:	681b      	ldr	r3, [r3, #0]
}
 8005112:	4618      	mov	r0, r3
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	46020c00 	.word	0x46020c00
 800511c:	0800e6ac 	.word	0x0800e6ac
 8005120:	20000000 	.word	0x20000000

08005124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005128:	f7ff ffe2 	bl	80050f0 <HAL_RCC_GetHCLKFreq>
 800512c:	4602      	mov	r2, r0
 800512e:	4b05      	ldr	r3, [pc, #20]	@ (8005144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	091b      	lsrs	r3, r3, #4
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	4903      	ldr	r1, [pc, #12]	@ (8005148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800513a:	5ccb      	ldrb	r3, [r1, r3]
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005140:	4618      	mov	r0, r3
 8005142:	bd80      	pop	{r7, pc}
 8005144:	46020c00 	.word	0x46020c00
 8005148:	0800e6bc 	.word	0x0800e6bc

0800514c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005150:	f7ff ffce 	bl	80050f0 <HAL_RCC_GetHCLKFreq>
 8005154:	4602      	mov	r2, r0
 8005156:	4b05      	ldr	r3, [pc, #20]	@ (800516c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	0a1b      	lsrs	r3, r3, #8
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	4903      	ldr	r1, [pc, #12]	@ (8005170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005162:	5ccb      	ldrb	r3, [r1, r3]
 8005164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005168:	4618      	mov	r0, r3
 800516a:	bd80      	pop	{r7, pc}
 800516c:	46020c00 	.word	0x46020c00
 8005170:	0800e6bc 	.word	0x0800e6bc

08005174 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005178:	f7ff ffba 	bl	80050f0 <HAL_RCC_GetHCLKFreq>
 800517c:	4602      	mov	r2, r0
 800517e:	4b05      	ldr	r3, [pc, #20]	@ (8005194 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005182:	091b      	lsrs	r3, r3, #4
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	4903      	ldr	r1, [pc, #12]	@ (8005198 <HAL_RCC_GetPCLK3Freq+0x24>)
 800518a:	5ccb      	ldrb	r3, [r1, r3]
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005190:	4618      	mov	r0, r3
 8005192:	bd80      	pop	{r7, pc}
 8005194:	46020c00 	.word	0x46020c00
 8005198:	0800e6bc 	.word	0x0800e6bc

0800519c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051a4:	4b3e      	ldr	r3, [pc, #248]	@ (80052a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80051a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051b2:	f7fe fd9f 	bl	8003cf4 <HAL_PWREx_GetVoltageRange>
 80051b6:	6178      	str	r0, [r7, #20]
 80051b8:	e019      	b.n	80051ee <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051ba:	4b39      	ldr	r3, [pc, #228]	@ (80052a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80051bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051c0:	4a37      	ldr	r2, [pc, #220]	@ (80052a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80051c2:	f043 0304 	orr.w	r3, r3, #4
 80051c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80051ca:	4b35      	ldr	r3, [pc, #212]	@ (80052a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80051cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051d8:	f7fe fd8c 	bl	8003cf4 <HAL_PWREx_GetVoltageRange>
 80051dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051de:	4b30      	ldr	r3, [pc, #192]	@ (80052a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80051e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051e4:	4a2e      	ldr	r2, [pc, #184]	@ (80052a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80051e6:	f023 0304 	bic.w	r3, r3, #4
 80051ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051f4:	d003      	beq.n	80051fe <RCC_SetFlashLatencyFromMSIRange+0x62>
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051fc:	d109      	bne.n	8005212 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005204:	d202      	bcs.n	800520c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005206:	2301      	movs	r3, #1
 8005208:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800520a:	e033      	b.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800520c:	2300      	movs	r3, #0
 800520e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005210:	e030      	b.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005218:	d208      	bcs.n	800522c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005220:	d102      	bne.n	8005228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005222:	2303      	movs	r3, #3
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	e025      	b.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e035      	b.n	8005298 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005232:	d90f      	bls.n	8005254 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005240:	d902      	bls.n	8005248 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005242:	2300      	movs	r3, #0
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	e015      	b.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005248:	2301      	movs	r3, #1
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	e012      	b.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800524e:	2300      	movs	r3, #0
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	e00f      	b.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800525a:	d109      	bne.n	8005270 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005262:	d102      	bne.n	800526a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005264:	2301      	movs	r3, #1
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	e004      	b.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800526a:	2302      	movs	r3, #2
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	e001      	b.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005270:	2301      	movs	r3, #1
 8005272:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005274:	4b0b      	ldr	r3, [pc, #44]	@ (80052a4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f023 020f 	bic.w	r2, r3, #15
 800527c:	4909      	ldr	r1, [pc, #36]	@ (80052a4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005284:	4b07      	ldr	r3, [pc, #28]	@ (80052a4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 030f 	and.w	r3, r3, #15
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	429a      	cmp	r2, r3
 8005290:	d001      	beq.n	8005296 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	46020c00 	.word	0x46020c00
 80052a4:	40022000 	.word	0x40022000

080052a8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80052a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052ac:	b0c4      	sub	sp, #272	@ 0x110
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052b4:	2300      	movs	r3, #0
 80052b6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052ba:	2300      	movs	r3, #0
 80052bc:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	f002 0401 	and.w	r4, r2, #1
 80052cc:	2500      	movs	r5, #0
 80052ce:	ea54 0305 	orrs.w	r3, r4, r5
 80052d2:	d00b      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80052d4:	4bd5      	ldr	r3, [pc, #852]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80052d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052da:	f023 0103 	bic.w	r1, r3, #3
 80052de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e4:	4ad1      	ldr	r2, [pc, #836]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80052e6:	430b      	orrs	r3, r1
 80052e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f4:	f002 0802 	and.w	r8, r2, #2
 80052f8:	f04f 0900 	mov.w	r9, #0
 80052fc:	ea58 0309 	orrs.w	r3, r8, r9
 8005300:	d00b      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005302:	4bca      	ldr	r3, [pc, #808]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005308:	f023 010c 	bic.w	r1, r3, #12
 800530c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005312:	4ac6      	ldr	r2, [pc, #792]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005314:	430b      	orrs	r3, r1
 8005316:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800531a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	f002 0a04 	and.w	sl, r2, #4
 8005326:	f04f 0b00 	mov.w	fp, #0
 800532a:	ea5a 030b 	orrs.w	r3, sl, fp
 800532e:	d00b      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005330:	4bbe      	ldr	r3, [pc, #760]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005336:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800533a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800533e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005340:	4aba      	ldr	r2, [pc, #744]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005342:	430b      	orrs	r3, r1
 8005344:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f002 0308 	and.w	r3, r2, #8
 8005354:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005358:	2300      	movs	r3, #0
 800535a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800535e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005362:	460b      	mov	r3, r1
 8005364:	4313      	orrs	r3, r2
 8005366:	d00b      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005368:	4bb0      	ldr	r3, [pc, #704]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800536a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800536e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005378:	4aac      	ldr	r2, [pc, #688]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800537a:	430b      	orrs	r3, r1
 800537c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	f002 0310 	and.w	r3, r2, #16
 800538c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005390:	2300      	movs	r3, #0
 8005392:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005396:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800539a:	460b      	mov	r3, r1
 800539c:	4313      	orrs	r3, r2
 800539e:	d00b      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80053a0:	4ba2      	ldr	r3, [pc, #648]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80053a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053b0:	4a9e      	ldr	r2, [pc, #632]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80053b2:	430b      	orrs	r3, r1
 80053b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80053b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80053c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053c8:	2300      	movs	r3, #0
 80053ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80053d2:	460b      	mov	r3, r1
 80053d4:	4313      	orrs	r3, r2
 80053d6:	d00b      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80053d8:	4b94      	ldr	r3, [pc, #592]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80053da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80053e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053e8:	4a90      	ldr	r2, [pc, #576]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80053ea:	430b      	orrs	r3, r1
 80053ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	f002 0320 	and.w	r3, r2, #32
 80053fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005400:	2300      	movs	r3, #0
 8005402:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800540a:	460b      	mov	r3, r1
 800540c:	4313      	orrs	r3, r2
 800540e:	d00b      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005410:	4b86      	ldr	r3, [pc, #536]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005416:	f023 0107 	bic.w	r1, r3, #7
 800541a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800541e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005420:	4a82      	ldr	r2, [pc, #520]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005422:	430b      	orrs	r3, r1
 8005424:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005434:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005438:	2300      	movs	r3, #0
 800543a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800543e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005442:	460b      	mov	r3, r1
 8005444:	4313      	orrs	r3, r2
 8005446:	d00b      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005448:	4b78      	ldr	r3, [pc, #480]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800544a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800544e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005458:	4a74      	ldr	r2, [pc, #464]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800545a:	430b      	orrs	r3, r1
 800545c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800546c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005470:	2300      	movs	r3, #0
 8005472:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005476:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800547a:	460b      	mov	r3, r1
 800547c:	4313      	orrs	r3, r2
 800547e:	d00b      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005480:	4b6a      	ldr	r3, [pc, #424]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005486:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800548a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800548e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005490:	4a66      	ldr	r2, [pc, #408]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005492:	430b      	orrs	r3, r1
 8005494:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80054a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054a8:	2300      	movs	r3, #0
 80054aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80054ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4313      	orrs	r3, r2
 80054b6:	d00b      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80054b8:	4b5c      	ldr	r3, [pc, #368]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80054ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80054c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c8:	4a58      	ldr	r2, [pc, #352]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80054ca:	430b      	orrs	r3, r1
 80054cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80054dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054e0:	2300      	movs	r3, #0
 80054e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80054e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80054ea:	460b      	mov	r3, r1
 80054ec:	4313      	orrs	r3, r2
 80054ee:	d00b      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80054f0:	4b4e      	ldr	r3, [pc, #312]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80054f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054f6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80054fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005500:	4a4a      	ldr	r2, [pc, #296]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005502:	430b      	orrs	r3, r1
 8005504:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8005508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005514:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005518:	2300      	movs	r3, #0
 800551a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800551e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005522:	460b      	mov	r3, r1
 8005524:	4313      	orrs	r3, r2
 8005526:	d00b      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8005528:	4b40      	ldr	r3, [pc, #256]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800552a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800552e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005536:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005538:	4a3c      	ldr	r2, [pc, #240]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800553a:	430b      	orrs	r3, r1
 800553c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8005540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800554c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005550:	2300      	movs	r3, #0
 8005552:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005556:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800555a:	460b      	mov	r3, r1
 800555c:	4313      	orrs	r3, r2
 800555e:	d00c      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8005560:	4b32      	ldr	r3, [pc, #200]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005562:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005566:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800556a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800556e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005572:	4a2e      	ldr	r2, [pc, #184]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005574:	430b      	orrs	r3, r1
 8005576:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800557a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005586:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800558a:	2300      	movs	r3, #0
 800558c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005590:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005594:	460b      	mov	r3, r1
 8005596:	4313      	orrs	r3, r2
 8005598:	d00c      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800559a:	4b24      	ldr	r3, [pc, #144]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800559c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055a0:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80055a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ac:	4a1f      	ldr	r2, [pc, #124]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80055ae:	430b      	orrs	r3, r1
 80055b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80055c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055c4:	2300      	movs	r3, #0
 80055c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055ca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80055ce:	460b      	mov	r3, r1
 80055d0:	4313      	orrs	r3, r2
 80055d2:	d00c      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80055d4:	4b15      	ldr	r3, [pc, #84]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80055d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055da:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80055de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e6:	4a11      	ldr	r2, [pc, #68]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80055e8:	430b      	orrs	r3, r1
 80055ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80055ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80055fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055fe:	2300      	movs	r3, #0
 8005600:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005604:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005608:	460b      	mov	r3, r1
 800560a:	4313      	orrs	r3, r2
 800560c:	d010      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800560e:	4b07      	ldr	r3, [pc, #28]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005614:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800561c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005620:	4a02      	ldr	r2, [pc, #8]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005622:	430b      	orrs	r3, r1
 8005624:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005628:	e002      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800562a:	bf00      	nop
 800562c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800563c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005640:	2300      	movs	r3, #0
 8005642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005646:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800564a:	460b      	mov	r3, r1
 800564c:	4313      	orrs	r3, r2
 800564e:	d04c      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005654:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005658:	2b80      	cmp	r3, #128	@ 0x80
 800565a:	d02d      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800565c:	2b80      	cmp	r3, #128	@ 0x80
 800565e:	d827      	bhi.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005660:	2b60      	cmp	r3, #96	@ 0x60
 8005662:	d02b      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005664:	2b60      	cmp	r3, #96	@ 0x60
 8005666:	d823      	bhi.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005668:	2b40      	cmp	r3, #64	@ 0x40
 800566a:	d006      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800566c:	2b40      	cmp	r3, #64	@ 0x40
 800566e:	d81f      	bhi.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005670:	2b00      	cmp	r3, #0
 8005672:	d009      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005674:	2b20      	cmp	r3, #32
 8005676:	d011      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005678:	e01a      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800567a:	4bbe      	ldr	r3, [pc, #760]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800567c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567e:	4abd      	ldr	r2, [pc, #756]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005684:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005686:	e01a      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800568c:	3308      	adds	r3, #8
 800568e:	4618      	mov	r0, r3
 8005690:	f002 fc32 	bl	8007ef8 <RCCEx_PLL2_Config>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800569a:	e010      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800569c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056a0:	332c      	adds	r3, #44	@ 0x2c
 80056a2:	4618      	mov	r0, r3
 80056a4:	f002 fcc0 	bl	8008028 <RCCEx_PLL3_Config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80056ae:	e006      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80056b6:	e002      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80056b8:	bf00      	nop
 80056ba:	e000      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80056bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056be:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10d      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80056c6:	4bab      	ldr	r3, [pc, #684]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056cc:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80056d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056d8:	4aa6      	ldr	r2, [pc, #664]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056da:	430b      	orrs	r3, r1
 80056dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80056e0:	e003      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80056e6:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80056ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80056f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056fa:	2300      	movs	r3, #0
 80056fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005700:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005704:	460b      	mov	r3, r1
 8005706:	4313      	orrs	r3, r2
 8005708:	d053      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800570a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800570e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005716:	d033      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8005718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800571c:	d82c      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800571e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005722:	d02f      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8005724:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005728:	d826      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800572a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800572e:	d008      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8005730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005734:	d820      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800573a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800573e:	d011      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005740:	e01a      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005742:	4b8c      	ldr	r3, [pc, #560]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005746:	4a8b      	ldr	r2, [pc, #556]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800574c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800574e:	e01a      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005754:	3308      	adds	r3, #8
 8005756:	4618      	mov	r0, r3
 8005758:	f002 fbce 	bl	8007ef8 <RCCEx_PLL2_Config>
 800575c:	4603      	mov	r3, r0
 800575e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005762:	e010      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005768:	332c      	adds	r3, #44	@ 0x2c
 800576a:	4618      	mov	r0, r3
 800576c:	f002 fc5c 	bl	8008028 <RCCEx_PLL3_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005776:	e006      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800577e:	e002      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005780:	bf00      	nop
 8005782:	e000      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005786:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10d      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800578e:	4b79      	ldr	r3, [pc, #484]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005790:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005794:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800579c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80057a0:	4a74      	ldr	r2, [pc, #464]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057a2:	430b      	orrs	r3, r1
 80057a4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80057a8:	e003      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057aa:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80057ae:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80057b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80057be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057c0:	2300      	movs	r3, #0
 80057c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80057c8:	460b      	mov	r3, r1
 80057ca:	4313      	orrs	r3, r2
 80057cc:	d046      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80057ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80057d6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80057da:	d028      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x586>
 80057dc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80057e0:	d821      	bhi.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80057e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057e6:	d022      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x586>
 80057e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057ec:	d81b      	bhi.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80057ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057f2:	d01c      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x586>
 80057f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057f8:	d815      	bhi.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80057fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057fe:	d008      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8005800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005804:	d80f      	bhi.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005806:	2b00      	cmp	r3, #0
 8005808:	d011      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x586>
 800580a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800580e:	d00e      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005810:	e009      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005816:	3308      	adds	r3, #8
 8005818:	4618      	mov	r0, r3
 800581a:	f002 fb6d 	bl	8007ef8 <RCCEx_PLL2_Config>
 800581e:	4603      	mov	r3, r0
 8005820:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005824:	e004      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800582c:	e000      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 800582e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005830:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10d      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005838:	4b4e      	ldr	r3, [pc, #312]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800583a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800583e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005846:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800584a:	4a4a      	ldr	r2, [pc, #296]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800584c:	430b      	orrs	r3, r1
 800584e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005852:	e003      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005854:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005858:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800585c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005864:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005868:	673b      	str	r3, [r7, #112]	@ 0x70
 800586a:	2300      	movs	r3, #0
 800586c:	677b      	str	r3, [r7, #116]	@ 0x74
 800586e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005872:	460b      	mov	r3, r1
 8005874:	4313      	orrs	r3, r2
 8005876:	d03f      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800587c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005880:	2b04      	cmp	r3, #4
 8005882:	d81e      	bhi.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8005884:	a201      	add	r2, pc, #4	@ (adr r2, 800588c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588a:	bf00      	nop
 800588c:	080058cb 	.word	0x080058cb
 8005890:	080058a1 	.word	0x080058a1
 8005894:	080058af 	.word	0x080058af
 8005898:	080058cb 	.word	0x080058cb
 800589c:	080058cb 	.word	0x080058cb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058a0:	4b34      	ldr	r3, [pc, #208]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a4:	4a33      	ldr	r2, [pc, #204]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058aa:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80058ac:	e00e      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058b2:	332c      	adds	r3, #44	@ 0x2c
 80058b4:	4618      	mov	r0, r3
 80058b6:	f002 fbb7 	bl	8008028 <RCCEx_PLL3_Config>
 80058ba:	4603      	mov	r3, r0
 80058bc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80058c0:	e004      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80058c8:	e000      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 80058ca:	bf00      	nop
    }
    if (ret == HAL_OK)
 80058cc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10d      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80058d4:	4b27      	ldr	r3, [pc, #156]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058da:	f023 0107 	bic.w	r1, r3, #7
 80058de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058e6:	4a23      	ldr	r2, [pc, #140]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058e8:	430b      	orrs	r3, r1
 80058ea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80058ee:	e003      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80058f4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80058f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005900:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005904:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005906:	2300      	movs	r3, #0
 8005908:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800590a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800590e:	460b      	mov	r3, r1
 8005910:	4313      	orrs	r3, r2
 8005912:	d04c      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005918:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800591c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005920:	d02a      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8005922:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005926:	d821      	bhi.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005928:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800592c:	d026      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 800592e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005932:	d81b      	bhi.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005938:	d00e      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800593a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800593e:	d815      	bhi.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01d      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8005944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005948:	d110      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800594a:	4b0a      	ldr	r3, [pc, #40]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800594c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594e:	4a09      	ldr	r2, [pc, #36]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005954:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005956:	e014      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800595c:	332c      	adds	r3, #44	@ 0x2c
 800595e:	4618      	mov	r0, r3
 8005960:	f002 fb62 	bl	8008028 <RCCEx_PLL3_Config>
 8005964:	4603      	mov	r3, r0
 8005966:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800596a:	e00a      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005972:	e006      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8005974:	46020c00 	.word	0x46020c00
        break;
 8005978:	bf00      	nop
 800597a:	e002      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 800597c:	bf00      	nop
 800597e:	e000      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8005980:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005982:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10d      	bne.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800598a:	4baf      	ldr	r3, [pc, #700]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800598c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005990:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005998:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800599c:	4aaa      	ldr	r2, [pc, #680]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800599e:	430b      	orrs	r3, r1
 80059a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80059a4:	e003      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80059aa:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80059ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80059bc:	2300      	movs	r3, #0
 80059be:	667b      	str	r3, [r7, #100]	@ 0x64
 80059c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80059c4:	460b      	mov	r3, r1
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f000 80b5 	beq.w	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059cc:	2300      	movs	r3, #0
 80059ce:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059d2:	4b9d      	ldr	r3, [pc, #628]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80059d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d113      	bne.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059e0:	4b99      	ldr	r3, [pc, #612]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80059e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059e6:	4a98      	ldr	r2, [pc, #608]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80059e8:	f043 0304 	orr.w	r3, r3, #4
 80059ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80059f0:	4b95      	ldr	r3, [pc, #596]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80059f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80059fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005a08:	4b90      	ldr	r3, [pc, #576]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0c:	4a8f      	ldr	r2, [pc, #572]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005a0e:	f043 0301 	orr.w	r3, r3, #1
 8005a12:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a14:	f7fb fe52 	bl	80016bc <HAL_GetTick>
 8005a18:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005a1c:	e00b      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a1e:	f7fb fe4d 	bl	80016bc <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d903      	bls.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005a34:	e005      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005a36:	4b85      	ldr	r3, [pc, #532]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0ed      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8005a42:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d165      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a4a:	4b7f      	ldr	r3, [pc, #508]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a54:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d023      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x800>
 8005a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a64:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d01b      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a70:	4b75      	ldr	r3, [pc, #468]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a7a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a7e:	4b72      	ldr	r3, [pc, #456]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005a80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a84:	4a70      	ldr	r2, [pc, #448]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a8e:	4b6e      	ldr	r3, [pc, #440]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a94:	4a6c      	ldr	r2, [pc, #432]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a9e:	4a6a      	ldr	r2, [pc, #424]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aa4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d019      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab4:	f7fb fe02 	bl	80016bc <HAL_GetTick>
 8005ab8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005abc:	e00d      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005abe:	f7fb fdfd 	bl	80016bc <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac8:	1ad2      	subs	r2, r2, r3
 8005aca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d903      	bls.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8005ad8:	e006      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ada:	4b5b      	ldr	r3, [pc, #364]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0ea      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8005ae8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10d      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005af0:	4b55      	ldr	r3, [pc, #340]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005af6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005afe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005b02:	4a51      	ldr	r2, [pc, #324]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005b04:	430b      	orrs	r3, r1
 8005b06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005b0a:	e008      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b0c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005b10:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8005b14:	e003      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b16:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005b1a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b1e:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d107      	bne.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b26:	4b48      	ldr	r3, [pc, #288]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b2c:	4a46      	ldr	r2, [pc, #280]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005b2e:	f023 0304 	bic.w	r3, r3, #4
 8005b32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005b42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b44:	2300      	movs	r3, #0
 8005b46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b48:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	d042      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b5a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005b5e:	d022      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8005b60:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005b64:	d81b      	bhi.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8005b66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b6a:	d011      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8005b6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b70:	d815      	bhi.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d019      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x902>
 8005b76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b7a:	d110      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b80:	3308      	adds	r3, #8
 8005b82:	4618      	mov	r0, r3
 8005b84:	f002 f9b8 	bl	8007ef8 <RCCEx_PLL2_Config>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005b8e:	e00d      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b90:	4b2d      	ldr	r3, [pc, #180]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b94:	4a2c      	ldr	r2, [pc, #176]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b9a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005b9c:	e006      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005ba4:	e002      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005ba6:	bf00      	nop
 8005ba8:	e000      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005baa:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005bac:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10d      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005bb4:	4b24      	ldr	r3, [pc, #144]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005bba:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005bc6:	4a20      	ldr	r2, [pc, #128]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005bce:	e003      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005bd4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005be4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005be6:	2300      	movs	r3, #0
 8005be8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	d031      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c00:	d00b      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005c02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c06:	d804      	bhi.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d008      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c10:	d007      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005c18:	e004      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005c1a:	bf00      	nop
 8005c1c:	e002      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005c1e:	bf00      	nop
 8005c20:	e000      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005c22:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005c24:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d111      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005c2c:	4b06      	ldr	r3, [pc, #24]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005c2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c3e:	4a02      	ldr	r2, [pc, #8]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005c40:	430b      	orrs	r3, r1
 8005c42:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005c46:	e007      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8005c48:	46020c00 	.word	0x46020c00
 8005c4c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c50:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005c54:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005c64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c66:	2300      	movs	r3, #0
 8005c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c6a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4313      	orrs	r3, r2
 8005c72:	d00c      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005c74:	4bb2      	ldr	r3, [pc, #712]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005c76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c7a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c86:	4aae      	ldr	r2, [pc, #696]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005c88:	430b      	orrs	r3, r1
 8005c8a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005c9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ca0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	d019      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005cb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cb6:	d105      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005cb8:	4ba1      	ldr	r3, [pc, #644]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbc:	4aa0      	ldr	r2, [pc, #640]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cc2:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005cc4:	4b9e      	ldr	r3, [pc, #632]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005cc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cca:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005cd6:	4a9a      	ldr	r2, [pc, #616]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005cea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cec:	2300      	movs	r3, #0
 8005cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cf0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	d00c      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005cfa:	4b91      	ldr	r3, [pc, #580]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d00:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005d0c:	4a8c      	ldr	r2, [pc, #560]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005d0e:	430b      	orrs	r3, r1
 8005d10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005d20:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d22:	2300      	movs	r3, #0
 8005d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d26:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	d00c      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005d30:	4b83      	ldr	r3, [pc, #524]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d36:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d3e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005d42:	4a7f      	ldr	r2, [pc, #508]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005d44:	430b      	orrs	r3, r1
 8005d46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d58:	2300      	movs	r3, #0
 8005d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d5c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005d60:	460b      	mov	r3, r1
 8005d62:	4313      	orrs	r3, r2
 8005d64:	d00c      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005d66:	4b76      	ldr	r3, [pc, #472]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d6c:	f023 0218 	bic.w	r2, r3, #24
 8005d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d74:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005d78:	4971      	ldr	r1, [pc, #452]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005d8c:	623b      	str	r3, [r7, #32]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d92:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d96:	460b      	mov	r3, r1
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	d032      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005da0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005da4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005da8:	d105      	bne.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005daa:	4b65      	ldr	r3, [pc, #404]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dae:	4a64      	ldr	r2, [pc, #400]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005db4:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005dbe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005dc2:	d108      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dc8:	3308      	adds	r3, #8
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f002 f894 	bl	8007ef8 <RCCEx_PLL2_Config>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 8005dd6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10d      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005dde:	4b58      	ldr	r3, [pc, #352]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005de0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005de4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005df0:	4953      	ldr	r1, [pc, #332]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005df8:	e003      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfa:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005dfe:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8005e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	61b9      	str	r1, [r7, #24]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	61fb      	str	r3, [r7, #28]
 8005e14:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	d04a      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8005e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e22:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e26:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005e2a:	d01e      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8005e2c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005e30:	d825      	bhi.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8005e32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e36:	d00e      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8005e38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e3c:	d81f      	bhi.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d021      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8005e42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e46:	d11a      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e48:	4b3d      	ldr	r3, [pc, #244]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e52:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005e54:	e018      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f002 f84b 	bl	8007ef8 <RCCEx_PLL2_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005e68:	e00e      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e6e:	332c      	adds	r3, #44	@ 0x2c
 8005e70:	4618      	mov	r0, r3
 8005e72:	f002 f8d9 	bl	8008028 <RCCEx_PLL3_Config>
 8005e76:	4603      	mov	r3, r0
 8005e78:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005e7c:	e004      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005e84:	e000      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 8005e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e88:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10d      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8005e90:	4b2b      	ldr	r3, [pc, #172]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005e92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005ea2:	4927      	ldr	r1, [pc, #156]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005eaa:	e003      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eac:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005eb0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005ec0:	613b      	str	r3, [r7, #16]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	d03d      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005edc:	d00e      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005ede:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ee2:	d815      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d017      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005ee8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005eec:	d110      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eee:	4b14      	ldr	r3, [pc, #80]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef2:	4a13      	ldr	r2, [pc, #76]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ef8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005efa:	e00e      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f00:	3308      	adds	r3, #8
 8005f02:	4618      	mov	r0, r3
 8005f04:	f001 fff8 	bl	8007ef8 <RCCEx_PLL2_Config>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005f0e:	e004      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005f16:	e000      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8005f18:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005f1a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d110      	bne.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005f22:	4b07      	ldr	r3, [pc, #28]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f28:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f34:	4902      	ldr	r1, [pc, #8]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005f3c:	e006      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8005f3e:	bf00      	nop
 8005f40:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f44:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005f48:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005f58:	60bb      	str	r3, [r7, #8]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f62:	460b      	mov	r3, r1
 8005f64:	4313      	orrs	r3, r2
 8005f66:	d00c      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005f68:	4b2c      	ldr	r3, [pc, #176]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005f6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f6e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005f7a:	4928      	ldr	r1, [pc, #160]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8005f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	6039      	str	r1, [r7, #0]
 8005f8e:	f003 0308 	and.w	r3, r3, #8
 8005f92:	607b      	str	r3, [r7, #4]
 8005f94:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	d036      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8005f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fa2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005fa6:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005faa:	d00d      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005fac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005fb0:	d811      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8005fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fb6:	d012      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fbc:	d80b      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00d      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc6:	d106      	bne.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005fc8:	4b14      	ldr	r3, [pc, #80]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fcc:	4a13      	ldr	r2, [pc, #76]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8005fd4:	e004      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005fdc:	e000      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8005fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10d      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8005fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005fea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005fee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005ffa:	4908      	ldr	r1, [pc, #32]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006002:	e003      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006004:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006008:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800600c:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8006010:	4618      	mov	r0, r3
 8006012:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8006016:	46bd      	mov	sp, r7
 8006018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800601c:	46020c00 	.word	0x46020c00

08006020 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006020:	b480      	push	{r7}
 8006022:	b089      	sub	sp, #36	@ 0x24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006028:	4ba6      	ldr	r3, [pc, #664]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800602a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800602c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006030:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006032:	4ba4      	ldr	r3, [pc, #656]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006036:	f003 0303 	and.w	r3, r3, #3
 800603a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800603c:	4ba1      	ldr	r3, [pc, #644]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800603e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006040:	0a1b      	lsrs	r3, r3, #8
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	3301      	adds	r3, #1
 8006048:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800604a:	4b9e      	ldr	r3, [pc, #632]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800604c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604e:	091b      	lsrs	r3, r3, #4
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006056:	4b9b      	ldr	r3, [pc, #620]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605a:	08db      	lsrs	r3, r3, #3
 800605c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	fb02 f303 	mul.w	r3, r2, r3
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b03      	cmp	r3, #3
 8006076:	d062      	beq.n	800613e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2b03      	cmp	r3, #3
 800607c:	f200 8081 	bhi.w	8006182 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d024      	beq.n	80060d0 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b02      	cmp	r3, #2
 800608a:	d17a      	bne.n	8006182 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80062c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800609a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609e:	4b89      	ldr	r3, [pc, #548]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80060ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80060b2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80062cc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80060b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80060be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060ce:	e08f      	b.n	80061f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80060d0:	4b7c      	ldr	r3, [pc, #496]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80060dc:	4b79      	ldr	r3, [pc, #484]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	0f1b      	lsrs	r3, r3, #28
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	e006      	b.n	80060f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80060e8:	4b76      	ldr	r3, [pc, #472]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80060ee:	041b      	lsls	r3, r3, #16
 80060f0:	0f1b      	lsrs	r3, r3, #28
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	4a76      	ldr	r2, [pc, #472]	@ (80062d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80060f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fc:	ee07 3a90 	vmov	s15, r3
 8006100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	ee07 3a90 	vmov	s15, r3
 8006118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006120:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80062cc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800612c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006130:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006138:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800613c:	e058      	b.n	80061f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	ee07 3a90 	vmov	s15, r3
 8006144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006148:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80062c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800614c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006150:	4b5c      	ldr	r3, [pc, #368]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006158:	ee07 3a90 	vmov	s15, r3
 800615c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006160:	ed97 6a02 	vldr	s12, [r7, #8]
 8006164:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80062cc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006168:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800616c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006170:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006174:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800617c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006180:	e036      	b.n	80061f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006182:	4b50      	ldr	r3, [pc, #320]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d005      	beq.n	800619a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800618e:	4b4d      	ldr	r3, [pc, #308]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	0f1b      	lsrs	r3, r3, #28
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	e006      	b.n	80061a8 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800619a:	4b4a      	ldr	r3, [pc, #296]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800619c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061a0:	041b      	lsls	r3, r3, #16
 80061a2:	0f1b      	lsrs	r3, r3, #28
 80061a4:	f003 030f 	and.w	r3, r3, #15
 80061a8:	4a49      	ldr	r2, [pc, #292]	@ (80062d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80061aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	ee07 3a90 	vmov	s15, r3
 80061bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	ee07 3a90 	vmov	s15, r3
 80061ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80061d2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80062cc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80061d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80061e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061ee:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80061f0:	4b34      	ldr	r3, [pc, #208]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d017      	beq.n	800622c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80061fc:	4b31      	ldr	r3, [pc, #196]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006200:	0a5b      	lsrs	r3, r3, #9
 8006202:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006206:	ee07 3a90 	vmov	s15, r3
 800620a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800620e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006212:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006216:	edd7 6a07 	vldr	s13, [r7, #28]
 800621a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800621e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006222:	ee17 2a90 	vmov	r2, s15
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	e002      	b.n	8006232 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006232:	4b24      	ldr	r3, [pc, #144]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d017      	beq.n	800626e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800623e:	4b21      	ldr	r3, [pc, #132]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006242:	0c1b      	lsrs	r3, r3, #16
 8006244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006248:	ee07 3a90 	vmov	s15, r3
 800624c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006250:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006254:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006258:	edd7 6a07 	vldr	s13, [r7, #28]
 800625c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006264:	ee17 2a90 	vmov	r2, s15
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	605a      	str	r2, [r3, #4]
 800626c:	e002      	b.n	8006274 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006274:	4b13      	ldr	r3, [pc, #76]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006278:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d017      	beq.n	80062b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006280:	4b10      	ldr	r3, [pc, #64]	@ (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006284:	0e1b      	lsrs	r3, r3, #24
 8006286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800628a:	ee07 3a90 	vmov	s15, r3
 800628e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006292:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006296:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800629a:	edd7 6a07 	vldr	s13, [r7, #28]
 800629e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062a6:	ee17 2a90 	vmov	r2, s15
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80062ae:	e002      	b.n	80062b6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	609a      	str	r2, [r3, #8]
}
 80062b6:	bf00      	nop
 80062b8:	3724      	adds	r7, #36	@ 0x24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	46020c00 	.word	0x46020c00
 80062c8:	4b742400 	.word	0x4b742400
 80062cc:	46000000 	.word	0x46000000
 80062d0:	0800e6c4 	.word	0x0800e6c4

080062d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b089      	sub	sp, #36	@ 0x24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80062dc:	4ba6      	ldr	r3, [pc, #664]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80062e6:	4ba4      	ldr	r3, [pc, #656]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80062f0:	4ba1      	ldr	r3, [pc, #644]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f4:	0a1b      	lsrs	r3, r3, #8
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	3301      	adds	r3, #1
 80062fc:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80062fe:	4b9e      	ldr	r3, [pc, #632]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006302:	091b      	lsrs	r3, r3, #4
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800630a:	4b9b      	ldr	r3, [pc, #620]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800630c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630e:	08db      	lsrs	r3, r3, #3
 8006310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	fb02 f303 	mul.w	r3, r2, r3
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006322:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b03      	cmp	r3, #3
 800632a:	d062      	beq.n	80063f2 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2b03      	cmp	r3, #3
 8006330:	f200 8081 	bhi.w	8006436 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d024      	beq.n	8006384 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2b02      	cmp	r3, #2
 800633e:	d17a      	bne.n	8006436 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800657c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800634e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006352:	4b89      	ldr	r3, [pc, #548]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006362:	ed97 6a02 	vldr	s12, [r7, #8]
 8006366:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800636a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800636e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006376:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800637a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006382:	e08f      	b.n	80064a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006384:	4b7c      	ldr	r3, [pc, #496]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006390:	4b79      	ldr	r3, [pc, #484]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	0f1b      	lsrs	r3, r3, #28
 8006396:	f003 030f 	and.w	r3, r3, #15
 800639a:	e006      	b.n	80063aa <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800639c:	4b76      	ldr	r3, [pc, #472]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800639e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80063a2:	041b      	lsls	r3, r3, #16
 80063a4:	0f1b      	lsrs	r3, r3, #28
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	4a76      	ldr	r2, [pc, #472]	@ (8006584 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80063ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063b0:	ee07 3a90 	vmov	s15, r3
 80063b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	ee07 3a90 	vmov	s15, r3
 80063be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	ee07 3a90 	vmov	s15, r3
 80063cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80063d4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80063d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80063e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063f0:	e058      	b.n	80064a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	ee07 3a90 	vmov	s15, r3
 80063f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800657c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006400:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006404:	4b5c      	ldr	r3, [pc, #368]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800640c:	ee07 3a90 	vmov	s15, r3
 8006410:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006414:	ed97 6a02 	vldr	s12, [r7, #8]
 8006418:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800641c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006420:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006424:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006428:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800642c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006430:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006434:	e036      	b.n	80064a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006436:	4b50      	ldr	r3, [pc, #320]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d005      	beq.n	800644e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006442:	4b4d      	ldr	r3, [pc, #308]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	0f1b      	lsrs	r3, r3, #28
 8006448:	f003 030f 	and.w	r3, r3, #15
 800644c:	e006      	b.n	800645c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800644e:	4b4a      	ldr	r3, [pc, #296]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006454:	041b      	lsls	r3, r3, #16
 8006456:	0f1b      	lsrs	r3, r3, #28
 8006458:	f003 030f 	and.w	r3, r3, #15
 800645c:	4a49      	ldr	r2, [pc, #292]	@ (8006584 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800645e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	ee07 3a90 	vmov	s15, r3
 8006470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006474:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	ee07 3a90 	vmov	s15, r3
 800647e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006482:	ed97 6a02 	vldr	s12, [r7, #8]
 8006486:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800648a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800648e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006496:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800649a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064a2:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80064a4:	4b34      	ldr	r3, [pc, #208]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d017      	beq.n	80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064b0:	4b31      	ldr	r3, [pc, #196]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b4:	0a5b      	lsrs	r3, r3, #9
 80064b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80064c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064c6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80064ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064d6:	ee17 2a90 	vmov	r2, s15
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e002      	b.n	80064e6 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80064e6:	4b24      	ldr	r3, [pc, #144]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d017      	beq.n	8006522 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064f2:	4b21      	ldr	r3, [pc, #132]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f6:	0c1b      	lsrs	r3, r3, #16
 80064f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064fc:	ee07 3a90 	vmov	s15, r3
 8006500:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006504:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006508:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800650c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006518:	ee17 2a90 	vmov	r2, s15
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	605a      	str	r2, [r3, #4]
 8006520:	e002      	b.n	8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006528:	4b13      	ldr	r3, [pc, #76]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800652a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d017      	beq.n	8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006534:	4b10      	ldr	r3, [pc, #64]	@ (8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006538:	0e1b      	lsrs	r3, r3, #24
 800653a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006546:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800654a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800654e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800655a:	ee17 2a90 	vmov	r2, s15
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006562:	e002      	b.n	800656a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	609a      	str	r2, [r3, #8]
}
 800656a:	bf00      	nop
 800656c:	3724      	adds	r7, #36	@ 0x24
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	46020c00 	.word	0x46020c00
 800657c:	4b742400 	.word	0x4b742400
 8006580:	46000000 	.word	0x46000000
 8006584:	0800e6c4 	.word	0x0800e6c4

08006588 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006588:	b480      	push	{r7}
 800658a:	b089      	sub	sp, #36	@ 0x24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006590:	4ba6      	ldr	r3, [pc, #664]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006598:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800659a:	4ba4      	ldr	r3, [pc, #656]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800659c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80065a4:	4ba1      	ldr	r3, [pc, #644]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a8:	0a1b      	lsrs	r3, r3, #8
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	3301      	adds	r3, #1
 80065b0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80065b2:	4b9e      	ldr	r3, [pc, #632]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b6:	091b      	lsrs	r3, r3, #4
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80065be:	4b9b      	ldr	r3, [pc, #620]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065c2:	08db      	lsrs	r3, r3, #3
 80065c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	fb02 f303 	mul.w	r3, r2, r3
 80065ce:	ee07 3a90 	vmov	s15, r3
 80065d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d062      	beq.n	80066a6 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	f200 8081 	bhi.w	80066ea <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d024      	beq.n	8006638 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d17a      	bne.n	80066ea <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fe:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006830 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006606:	4b89      	ldr	r3, [pc, #548]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006616:	ed97 6a02 	vldr	s12, [r7, #8]
 800661a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006834 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800661e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006622:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800662a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800662e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006632:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8006636:	e08f      	b.n	8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006638:	4b7c      	ldr	r3, [pc, #496]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d005      	beq.n	8006650 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006644:	4b79      	ldr	r3, [pc, #484]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	0f1b      	lsrs	r3, r3, #28
 800664a:	f003 030f 	and.w	r3, r3, #15
 800664e:	e006      	b.n	800665e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8006650:	4b76      	ldr	r3, [pc, #472]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006652:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006656:	041b      	lsls	r3, r3, #16
 8006658:	0f1b      	lsrs	r3, r3, #28
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	4a76      	ldr	r2, [pc, #472]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006664:	ee07 3a90 	vmov	s15, r3
 8006668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	ee07 3a90 	vmov	s15, r3
 8006672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	ee07 3a90 	vmov	s15, r3
 8006680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006684:	ed97 6a02 	vldr	s12, [r7, #8]
 8006688:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006834 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800668c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006690:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006694:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006698:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800669c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066a4:	e058      	b.n	8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	ee07 3a90 	vmov	s15, r3
 80066ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006830 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80066b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066b8:	4b5c      	ldr	r3, [pc, #368]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c0:	ee07 3a90 	vmov	s15, r3
 80066c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80066c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80066cc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006834 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80066d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80066d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80066d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80066e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066e8:	e036      	b.n	8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80066ea:	4b50      	ldr	r3, [pc, #320]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80066f6:	4b4d      	ldr	r3, [pc, #308]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	0f1b      	lsrs	r3, r3, #28
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	e006      	b.n	8006710 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8006702:	4b4a      	ldr	r3, [pc, #296]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006708:	041b      	lsls	r3, r3, #16
 800670a:	0f1b      	lsrs	r3, r3, #28
 800670c:	f003 030f 	and.w	r3, r3, #15
 8006710:	4a49      	ldr	r2, [pc, #292]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006716:	ee07 3a90 	vmov	s15, r3
 800671a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	ee07 3a90 	vmov	s15, r3
 8006724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	ee07 3a90 	vmov	s15, r3
 8006732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006736:	ed97 6a02 	vldr	s12, [r7, #8]
 800673a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006834 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800673e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006746:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800674a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800674e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006752:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006756:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006758:	4b34      	ldr	r3, [pc, #208]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800675a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800675c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d017      	beq.n	8006794 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006764:	4b31      	ldr	r3, [pc, #196]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006768:	0a5b      	lsrs	r3, r3, #9
 800676a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006776:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800677a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800677e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800678a:	ee17 2a90 	vmov	r2, s15
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	e002      	b.n	800679a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800679a:	4b24      	ldr	r3, [pc, #144]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800679c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800679e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d017      	beq.n	80067d6 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067a6:	4b21      	ldr	r3, [pc, #132]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067aa:	0c1b      	lsrs	r3, r3, #16
 80067ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067b0:	ee07 3a90 	vmov	s15, r3
 80067b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80067b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067bc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80067c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067cc:	ee17 2a90 	vmov	r2, s15
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	605a      	str	r2, [r3, #4]
 80067d4:	e002      	b.n	80067dc <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80067dc:	4b13      	ldr	r3, [pc, #76]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d017      	beq.n	8006818 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067e8:	4b10      	ldr	r3, [pc, #64]	@ (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ec:	0e1b      	lsrs	r3, r3, #24
 80067ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067f2:	ee07 3a90 	vmov	s15, r3
 80067f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80067fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067fe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006802:	edd7 6a07 	vldr	s13, [r7, #28]
 8006806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800680a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800680e:	ee17 2a90 	vmov	r2, s15
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006816:	e002      	b.n	800681e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	609a      	str	r2, [r3, #8]
}
 800681e:	bf00      	nop
 8006820:	3724      	adds	r7, #36	@ 0x24
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	46020c00 	.word	0x46020c00
 8006830:	4b742400 	.word	0x4b742400
 8006834:	46000000 	.word	0x46000000
 8006838:	0800e6c4 	.word	0x0800e6c4

0800683c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b08e      	sub	sp, #56	@ 0x38
 8006840:	af00      	add	r7, sp, #0
 8006842:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800684a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800684e:	430b      	orrs	r3, r1
 8006850:	d145      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006852:	4ba7      	ldr	r3, [pc, #668]	@ (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006858:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800685c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800685e:	4ba4      	ldr	r3, [pc, #656]	@ (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b02      	cmp	r3, #2
 800686a:	d108      	bne.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006872:	d104      	bne.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006874:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006878:	637b      	str	r3, [r7, #52]	@ 0x34
 800687a:	f001 bb31 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800687e:	4b9c      	ldr	r3, [pc, #624]	@ (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006884:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006888:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800688c:	d114      	bne.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800688e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006894:	d110      	bne.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006896:	4b96      	ldr	r3, [pc, #600]	@ (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800689c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068a4:	d103      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80068a6:	23fa      	movs	r3, #250	@ 0xfa
 80068a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068aa:	f001 bb19 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80068ae:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80068b2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068b4:	f001 bb14 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80068b8:	4b8d      	ldr	r3, [pc, #564]	@ (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068c4:	d107      	bne.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068cc:	d103      	bne.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80068ce:	4b89      	ldr	r3, [pc, #548]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80068d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068d2:	f001 bb05 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068da:	f001 bb01 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80068de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068e2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80068e6:	430b      	orrs	r3, r1
 80068e8:	d151      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80068ea:	4b81      	ldr	r3, [pc, #516]	@ (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068f0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80068f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80068f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f8:	2b80      	cmp	r3, #128	@ 0x80
 80068fa:	d035      	beq.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80068fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fe:	2b80      	cmp	r3, #128	@ 0x80
 8006900:	d841      	bhi.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006904:	2b60      	cmp	r3, #96	@ 0x60
 8006906:	d02a      	beq.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690a:	2b60      	cmp	r3, #96	@ 0x60
 800690c:	d83b      	bhi.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800690e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006910:	2b40      	cmp	r3, #64	@ 0x40
 8006912:	d009      	beq.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006916:	2b40      	cmp	r3, #64	@ 0x40
 8006918:	d835      	bhi.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00c      	beq.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006922:	2b20      	cmp	r3, #32
 8006924:	d012      	beq.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006926:	e02e      	b.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800692c:	4618      	mov	r0, r3
 800692e:	f7ff fb77 	bl	8006020 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006936:	f001 bad3 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800693a:	f107 0318 	add.w	r3, r7, #24
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff fcc8 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006948:	f001 baca 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800694c:	f107 030c 	add.w	r3, r7, #12
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff fe19 	bl	8006588 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800695a:	f001 bac1 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800695e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006962:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006964:	f001 babc 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006968:	4b61      	ldr	r3, [pc, #388]	@ (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006974:	d103      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006976:	4b60      	ldr	r3, [pc, #384]	@ (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006978:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800697a:	f001 bab1 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006982:	f001 baad 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800698a:	f001 baa9 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800698e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006992:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006996:	430b      	orrs	r3, r1
 8006998:	d158      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800699a:	4b55      	ldr	r3, [pc, #340]	@ (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800699c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80069a4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80069a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ac:	d03b      	beq.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80069ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069b4:	d846      	bhi.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80069b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069bc:	d02e      	beq.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069c4:	d83e      	bhi.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80069c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069cc:	d00b      	beq.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d4:	d836      	bhi.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80069d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00d      	beq.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069e2:	d012      	beq.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80069e4:	e02e      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7ff fb18 	bl	8006020 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069f4:	f001 ba74 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069f8:	f107 0318 	add.w	r3, r7, #24
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7ff fc69 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a06:	f001 ba6b 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a0a:	f107 030c 	add.w	r3, r7, #12
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff fdba 	bl	8006588 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a18:	f001 ba62 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006a1c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006a20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a22:	f001 ba5d 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a26:	4b32      	ldr	r3, [pc, #200]	@ (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a32:	d103      	bne.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006a34:	4b30      	ldr	r3, [pc, #192]	@ (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006a36:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a38:	f001 ba52 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a40:	f001 ba4e 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a48:	f001 ba4a 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a50:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006a54:	430b      	orrs	r3, r1
 8006a56:	d126      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006a58:	4b25      	ldr	r3, [pc, #148]	@ (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a62:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006a64:	4b22      	ldr	r3, [pc, #136]	@ (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a70:	d106      	bne.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d103      	bne.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006a78:	4b1f      	ldr	r3, [pc, #124]	@ (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a7c:	f001 ba30 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006a80:	4b1b      	ldr	r3, [pc, #108]	@ (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a8c:	d107      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a94:	d103      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006a96:	4b19      	ldr	r3, [pc, #100]	@ (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a9a:	f001 ba21 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa2:	f001 ba1d 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aaa:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	d16e      	bne.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ab8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006abc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006ac4:	d03d      	beq.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006acc:	d85c      	bhi.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ad4:	d014      	beq.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006adc:	d854      	bhi.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01f      	beq.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006aea:	d012      	beq.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006aec:	e04c      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006aee:	bf00      	nop
 8006af0:	46020c00 	.word	0x46020c00
 8006af4:	0007a120 	.word	0x0007a120
 8006af8:	00f42400 	.word	0x00f42400
 8006afc:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff fa8b 	bl	8006020 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b0e:	f001 b9e7 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b12:	f107 0318 	add.w	r3, r7, #24
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7ff fbdc 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b20:	f001 b9de 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006b24:	4ba7      	ldr	r3, [pc, #668]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b30:	d103      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006b32:	4ba5      	ldr	r3, [pc, #660]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b34:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b36:	f001 b9d3 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b3e:	f001 b9cf 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b42:	4ba0      	ldr	r3, [pc, #640]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b20      	cmp	r3, #32
 8006b4c:	d118      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b4e:	4b9d      	ldr	r3, [pc, #628]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d005      	beq.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006b5a:	4b9a      	ldr	r3, [pc, #616]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	0e1b      	lsrs	r3, r3, #24
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	e006      	b.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006b66:	4b97      	ldr	r3, [pc, #604]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b6c:	041b      	lsls	r3, r3, #16
 8006b6e:	0e1b      	lsrs	r3, r3, #24
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	4a95      	ldr	r2, [pc, #596]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b7a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b7c:	f001 b9b0 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b84:	f001 b9ac 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b8c:	f001 b9a8 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b94:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	d17f      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006b9c:	4b89      	ldr	r3, [pc, #548]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ba6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d165      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006bae:	4b85      	ldr	r3, [pc, #532]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bb4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006bb8:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006bc0:	d034      	beq.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006bc8:	d853      	bhi.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bd0:	d00b      	beq.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bd8:	d84b      	bhi.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d016      	beq.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8006be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006be6:	d009      	beq.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006be8:	e043      	b.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff fa16 	bl	8006020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006bf8:	f001 b972 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bfc:	f107 0318 	add.w	r3, r7, #24
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7ff fb67 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006c0a:	f001 b969 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006c0e:	4b6d      	ldr	r3, [pc, #436]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c1a:	d103      	bne.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006c1c:	4b6a      	ldr	r3, [pc, #424]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c1e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006c20:	f001 b95e 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006c28:	f001 b95a 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c2c:	4b65      	ldr	r3, [pc, #404]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0320 	and.w	r3, r3, #32
 8006c34:	2b20      	cmp	r3, #32
 8006c36:	d118      	bne.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c38:	4b62      	ldr	r3, [pc, #392]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006c44:	4b5f      	ldr	r3, [pc, #380]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	0e1b      	lsrs	r3, r3, #24
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	e006      	b.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006c50:	4b5c      	ldr	r3, [pc, #368]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c56:	041b      	lsls	r3, r3, #16
 8006c58:	0e1b      	lsrs	r3, r3, #24
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	4a5b      	ldr	r2, [pc, #364]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c64:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006c66:	f001 b93b 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006c6e:	f001 b937 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006c76:	f001 b933 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c80:	d108      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff f9ca 	bl	8006020 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c90:	f001 b926 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c98:	f001 b922 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006c9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ca0:	1e51      	subs	r1, r2, #1
 8006ca2:	430b      	orrs	r3, r1
 8006ca4:	d136      	bne.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006ca6:	4b47      	ldr	r3, [pc, #284]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cac:	f003 0303 	and.w	r3, r3, #3
 8006cb0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d104      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006cb8:	f7fe fa48 	bl	800514c <HAL_RCC_GetPCLK2Freq>
 8006cbc:	6378      	str	r0, [r7, #52]	@ 0x34
 8006cbe:	f001 b90f 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d104      	bne.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006cc8:	f7fe f910 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8006ccc:	6378      	str	r0, [r7, #52]	@ 0x34
 8006cce:	f001 b907 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006cd2:	4b3c      	ldr	r3, [pc, #240]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cde:	d106      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d103      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8006ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cea:	f001 b8f9 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006cee:	4b35      	ldr	r3, [pc, #212]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d107      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d104      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8006d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d08:	f001 b8ea 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d10:	f001 b8e6 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d18:	1e91      	subs	r1, r2, #2
 8006d1a:	430b      	orrs	r3, r1
 8006d1c:	d136      	bne.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006d1e:	4b29      	ldr	r3, [pc, #164]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d24:	f003 030c 	and.w	r3, r3, #12
 8006d28:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d104      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d30:	f7fe f9f8 	bl	8005124 <HAL_RCC_GetPCLK1Freq>
 8006d34:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d36:	f001 b8d3 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d104      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d40:	f7fe f8d4 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8006d44:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d46:	f001 b8cb 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d56:	d106      	bne.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5a:	2b08      	cmp	r3, #8
 8006d5c:	d103      	bne.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006d60:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d62:	f001 b8bd 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006d66:	4b17      	ldr	r3, [pc, #92]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d107      	bne.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d76:	2b0c      	cmp	r3, #12
 8006d78:	d104      	bne.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d80:	f001 b8ae 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d88:	f001 b8aa 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006d8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d90:	1f11      	subs	r1, r2, #4
 8006d92:	430b      	orrs	r3, r1
 8006d94:	d13f      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006d96:	4b0b      	ldr	r3, [pc, #44]	@ (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006da0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d104      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006da8:	f7fe f9bc 	bl	8005124 <HAL_RCC_GetPCLK1Freq>
 8006dac:	6378      	str	r0, [r7, #52]	@ 0x34
 8006dae:	f001 b897 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db4:	2b10      	cmp	r3, #16
 8006db6:	d10d      	bne.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006db8:	f7fe f898 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8006dbc:	6378      	str	r0, [r7, #52]	@ 0x34
 8006dbe:	f001 b88f 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8006dc2:	bf00      	nop
 8006dc4:	46020c00 	.word	0x46020c00
 8006dc8:	02dc6c00 	.word	0x02dc6c00
 8006dcc:	0800e6c4 	.word	0x0800e6c4
 8006dd0:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006dd4:	4ba8      	ldr	r3, [pc, #672]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de0:	d106      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d103      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8006de8:	4ba4      	ldr	r3, [pc, #656]	@ (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dec:	f001 b878 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006df0:	4ba1      	ldr	r3, [pc, #644]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006df2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d107      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e00:	2b30      	cmp	r3, #48	@ 0x30
 8006e02:	d104      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006e04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e0a:	f001 b869 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e12:	f001 b865 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e1a:	f1a2 0108 	sub.w	r1, r2, #8
 8006e1e:	430b      	orrs	r3, r1
 8006e20:	d136      	bne.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006e22:	4b95      	ldr	r3, [pc, #596]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e28:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006e2c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e34:	f7fe f976 	bl	8005124 <HAL_RCC_GetPCLK1Freq>
 8006e38:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e3a:	f001 b851 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	2b40      	cmp	r3, #64	@ 0x40
 8006e42:	d104      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e44:	f7fe f852 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8006e48:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e4a:	f001 b849 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006e4e:	4b8a      	ldr	r3, [pc, #552]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e5a:	d106      	bne.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5e:	2b80      	cmp	r3, #128	@ 0x80
 8006e60:	d103      	bne.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8006e62:	4b86      	ldr	r3, [pc, #536]	@ (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e66:	f001 b83b 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006e6a:	4b83      	ldr	r3, [pc, #524]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d107      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e7c:	d104      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8006e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e84:	f001 b82c 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e8c:	f001 b828 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e94:	f1a2 0110 	sub.w	r1, r2, #16
 8006e98:	430b      	orrs	r3, r1
 8006e9a:	d139      	bne.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006e9c:	4b76      	ldr	r3, [pc, #472]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ea6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d104      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006eae:	f7fe f939 	bl	8005124 <HAL_RCC_GetPCLK1Freq>
 8006eb2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006eb4:	f001 b814 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ebe:	d104      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ec0:	f7fe f814 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8006ec4:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ec6:	f001 b80b 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006eca:	4b6b      	ldr	r3, [pc, #428]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ed6:	d107      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ede:	d103      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8006ee0:	4b66      	ldr	r3, [pc, #408]	@ (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ee4:	f000 bffc 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006ee8:	4b63      	ldr	r3, [pc, #396]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d108      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006efc:	d104      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8006efe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f04:	f000 bfec 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f0c:	f000 bfe8 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8006f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f14:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8006f18:	430b      	orrs	r3, r1
 8006f1a:	d139      	bne.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006f1c:	4b56      	ldr	r3, [pc, #344]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006f1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f26:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d104      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f2e:	f7fe f8f9 	bl	8005124 <HAL_RCC_GetPCLK1Freq>
 8006f32:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f34:	f000 bfd4 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f3e:	d104      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f40:	f7fd ffd4 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8006f44:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f46:	f000 bfcb 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f56:	d107      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f5e:	d103      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8006f60:	4b46      	ldr	r3, [pc, #280]	@ (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f64:	f000 bfbc 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006f68:	4b43      	ldr	r3, [pc, #268]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d108      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f7c:	d104      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8006f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f84:	f000 bfac 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f8c:	f000 bfa8 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f94:	f1a2 0120 	sub.w	r1, r2, #32
 8006f98:	430b      	orrs	r3, r1
 8006f9a:	d158      	bne.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006f9c:	4b36      	ldr	r3, [pc, #216]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006f9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d104      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006fae:	f7fe f8e1 	bl	8005174 <HAL_RCC_GetPCLK3Freq>
 8006fb2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fb4:	f000 bf94 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d104      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006fbe:	f7fd ff95 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8006fc2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fc4:	f000 bf8c 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fd4:	d106      	bne.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d103      	bne.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8006fdc:	4b27      	ldr	r3, [pc, #156]	@ (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fe0:	f000 bf7e 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006fe4:	4b24      	ldr	r3, [pc, #144]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d107      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d104      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8006ff8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ffe:	f000 bf6f 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007002:	4b1d      	ldr	r3, [pc, #116]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0320 	and.w	r3, r3, #32
 800700a:	2b20      	cmp	r3, #32
 800700c:	d11b      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800700e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007010:	2b04      	cmp	r3, #4
 8007012:	d118      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007014:	4b18      	ldr	r3, [pc, #96]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d005      	beq.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8007020:	4b15      	ldr	r3, [pc, #84]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	0e1b      	lsrs	r3, r3, #24
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	e006      	b.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800702c:	4b12      	ldr	r3, [pc, #72]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800702e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007032:	041b      	lsls	r3, r3, #16
 8007034:	0e1b      	lsrs	r3, r3, #24
 8007036:	f003 030f 	and.w	r3, r3, #15
 800703a:	4a11      	ldr	r2, [pc, #68]	@ (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800703c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007040:	637b      	str	r3, [r7, #52]	@ 0x34
 8007042:	f000 bf4d 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	637b      	str	r3, [r7, #52]	@ 0x34
 800704a:	f000 bf49 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800704e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007052:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007056:	430b      	orrs	r3, r1
 8007058:	d172      	bne.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800705a:	4b07      	ldr	r3, [pc, #28]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800705c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007060:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007064:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800706c:	d10a      	bne.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800706e:	f7fd ff3d 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8007072:	6378      	str	r0, [r7, #52]	@ 0x34
 8007074:	f000 bf34 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007078:	46020c00 	.word	0x46020c00
 800707c:	00f42400 	.word	0x00f42400
 8007080:	0800e6c4 	.word	0x0800e6c4
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007086:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800708a:	d108      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800708c:	f107 0318 	add.w	r3, r7, #24
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff f91f 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	637b      	str	r3, [r7, #52]	@ 0x34
 800709a:	f000 bf21 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80070a4:	f7fe f824 	bl	80050f0 <HAL_RCC_GetHCLKFreq>
 80070a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80070aa:	f000 bf19 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80070b4:	d122      	bne.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070b6:	4bb0      	ldr	r3, [pc, #704]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b20      	cmp	r3, #32
 80070c0:	d118      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070c2:	4bad      	ldr	r3, [pc, #692]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 80070ce:	4baa      	ldr	r3, [pc, #680]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	0e1b      	lsrs	r3, r3, #24
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	e006      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 80070da:	4ba7      	ldr	r3, [pc, #668]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80070dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070e0:	041b      	lsls	r3, r3, #16
 80070e2:	0e1b      	lsrs	r3, r3, #24
 80070e4:	f003 030f 	and.w	r3, r3, #15
 80070e8:	4aa4      	ldr	r2, [pc, #656]	@ (800737c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80070ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f0:	f000 bef6 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f8:	f000 bef2 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80070fc:	4b9e      	ldr	r3, [pc, #632]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007104:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007108:	d107      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800710a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007110:	d103      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8007112:	4b9b      	ldr	r3, [pc, #620]	@ (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8007114:	637b      	str	r3, [r7, #52]	@ 0x34
 8007116:	f000 bee3 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800711a:	4b97      	ldr	r3, [pc, #604]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007126:	d107      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8007128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800712e:	d103      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8007130:	4b93      	ldr	r3, [pc, #588]	@ (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8007132:	637b      	str	r3, [r7, #52]	@ 0x34
 8007134:	f000 bed4 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	637b      	str	r3, [r7, #52]	@ 0x34
 800713c:	f000 bed0 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007144:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007148:	430b      	orrs	r3, r1
 800714a:	d158      	bne.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800714c:	4b8a      	ldr	r3, [pc, #552]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800714e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715a:	2b04      	cmp	r3, #4
 800715c:	d84b      	bhi.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800715e:	a201      	add	r2, pc, #4	@ (adr r2, 8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8007160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007164:	0800719d 	.word	0x0800719d
 8007168:	08007179 	.word	0x08007179
 800716c:	0800718b 	.word	0x0800718b
 8007170:	080071a7 	.word	0x080071a7
 8007174:	080071b1 	.word	0x080071b1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007178:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe ff4f 	bl	8006020 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007186:	f000 beab 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800718a:	f107 030c 	add.w	r3, r7, #12
 800718e:	4618      	mov	r0, r3
 8007190:	f7ff f9fa 	bl	8006588 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007198:	f000 bea2 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800719c:	f7fd ffa8 	bl	80050f0 <HAL_RCC_GetHCLKFreq>
 80071a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80071a2:	f000 be9d 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80071a6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80071aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071ac:	f000 be98 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80071b0:	4b71      	ldr	r3, [pc, #452]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	d118      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071bc:	4b6e      	ldr	r3, [pc, #440]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80071c8:	4b6b      	ldr	r3, [pc, #428]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	0e1b      	lsrs	r3, r3, #24
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	e006      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 80071d4:	4b68      	ldr	r3, [pc, #416]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80071d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071da:	041b      	lsls	r3, r3, #16
 80071dc:	0e1b      	lsrs	r3, r3, #24
 80071de:	f003 030f 	and.w	r3, r3, #15
 80071e2:	4a66      	ldr	r2, [pc, #408]	@ (800737c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80071e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071e8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071ea:	f000 be79 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80071ee:	2300      	movs	r3, #0
 80071f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071f2:	f000 be75 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071fa:	f000 be71 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80071fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007202:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007206:	430b      	orrs	r3, r1
 8007208:	d167      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800720a:	4b5b      	ldr	r3, [pc, #364]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800720c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007210:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007214:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800721c:	d036      	beq.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800721e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007220:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007224:	d855      	bhi.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800722c:	d029      	beq.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800722e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007230:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007234:	d84d      	bhi.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800723c:	d013      	beq.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800723e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007244:	d845      	bhi.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007248:	2b00      	cmp	r3, #0
 800724a:	d015      	beq.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800724c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007252:	d13e      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007258:	4618      	mov	r0, r3
 800725a:	f7fe fee1 	bl	8006020 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007262:	f000 be3d 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007266:	f107 030c 	add.w	r3, r7, #12
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff f98c 	bl	8006588 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007274:	f000 be34 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007278:	f7fd ff3a 	bl	80050f0 <HAL_RCC_GetHCLKFreq>
 800727c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800727e:	f000 be2f 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007282:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007286:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007288:	f000 be2a 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800728c:	4b3a      	ldr	r3, [pc, #232]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0320 	and.w	r3, r3, #32
 8007294:	2b20      	cmp	r3, #32
 8007296:	d118      	bne.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007298:	4b37      	ldr	r3, [pc, #220]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80072a4:	4b34      	ldr	r3, [pc, #208]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	0e1b      	lsrs	r3, r3, #24
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	e006      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80072b0:	4b31      	ldr	r3, [pc, #196]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80072b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072b6:	041b      	lsls	r3, r3, #16
 80072b8:	0e1b      	lsrs	r3, r3, #24
 80072ba:	f003 030f 	and.w	r3, r3, #15
 80072be:	4a2f      	ldr	r2, [pc, #188]	@ (800737c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80072c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072c6:	f000 be0b 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072ce:	f000 be07 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072d6:	f000 be03 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80072da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072de:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80072e2:	430b      	orrs	r3, r1
 80072e4:	d152      	bne.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80072e6:	4b24      	ldr	r3, [pc, #144]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80072e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80072f0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80072f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d104      	bne.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80072f8:	f7fd ff14 	bl	8005124 <HAL_RCC_GetPCLK1Freq>
 80072fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80072fe:	f000 bdef 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007304:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007308:	d104      	bne.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800730a:	f7fd fdef 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 800730e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007310:	f000 bde6 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007314:	4b18      	ldr	r3, [pc, #96]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800731c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007320:	d107      	bne.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8007322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007324:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007328:	d103      	bne.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800732a:	4b15      	ldr	r3, [pc, #84]	@ (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800732c:	637b      	str	r3, [r7, #52]	@ 0x34
 800732e:	f000 bdd7 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007332:	4b11      	ldr	r3, [pc, #68]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0320 	and.w	r3, r3, #32
 800733a:	2b20      	cmp	r3, #32
 800733c:	d122      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800733e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007340:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007344:	d11e      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007346:	4b0c      	ldr	r3, [pc, #48]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d005      	beq.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8007352:	4b09      	ldr	r3, [pc, #36]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	0e1b      	lsrs	r3, r3, #24
 8007358:	f003 030f 	and.w	r3, r3, #15
 800735c:	e006      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800735e:	4b06      	ldr	r3, [pc, #24]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007364:	041b      	lsls	r3, r3, #16
 8007366:	0e1b      	lsrs	r3, r3, #24
 8007368:	f003 030f 	and.w	r3, r3, #15
 800736c:	4a03      	ldr	r2, [pc, #12]	@ (800737c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800736e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007372:	637b      	str	r3, [r7, #52]	@ 0x34
 8007374:	f000 bdb4 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007378:	46020c00 	.word	0x46020c00
 800737c:	0800e6c4 	.word	0x0800e6c4
 8007380:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	637b      	str	r3, [r7, #52]	@ 0x34
 8007388:	f000 bdaa 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800738c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007390:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007394:	430b      	orrs	r3, r1
 8007396:	d14c      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007398:	4ba8      	ldr	r3, [pc, #672]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800739a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800739e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80073a2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80073a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d104      	bne.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80073aa:	f7fd febb 	bl	8005124 <HAL_RCC_GetPCLK1Freq>
 80073ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80073b0:	f000 bd96 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80073b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ba:	d104      	bne.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80073bc:	f7fd fd96 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 80073c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80073c2:	f000 bd8d 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80073c6:	4b9d      	ldr	r3, [pc, #628]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073d2:	d107      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80073d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073da:	d103      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 80073dc:	4b98      	ldr	r3, [pc, #608]	@ (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80073de:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e0:	f000 bd7e 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80073e4:	4b95      	ldr	r3, [pc, #596]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	2b20      	cmp	r3, #32
 80073ee:	d11c      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 80073f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073f6:	d118      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073f8:	4b90      	ldr	r3, [pc, #576]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d005      	beq.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8007404:	4b8d      	ldr	r3, [pc, #564]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	0e1b      	lsrs	r3, r3, #24
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	e006      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8007410:	4b8a      	ldr	r3, [pc, #552]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007416:	041b      	lsls	r3, r3, #16
 8007418:	0e1b      	lsrs	r3, r3, #24
 800741a:	f003 030f 	and.w	r3, r3, #15
 800741e:	4a89      	ldr	r2, [pc, #548]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007424:	637b      	str	r3, [r7, #52]	@ 0x34
 8007426:	f000 bd5b 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	637b      	str	r3, [r7, #52]	@ 0x34
 800742e:	f000 bd57 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007432:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007436:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800743a:	430b      	orrs	r3, r1
 800743c:	d158      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800743e:	4b7f      	ldr	r3, [pc, #508]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007444:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007448:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800744a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744c:	2bc0      	cmp	r3, #192	@ 0xc0
 800744e:	d028      	beq.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8007450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007452:	2bc0      	cmp	r3, #192	@ 0xc0
 8007454:	d848      	bhi.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007458:	2b80      	cmp	r3, #128	@ 0x80
 800745a:	d00e      	beq.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800745c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745e:	2b80      	cmp	r3, #128	@ 0x80
 8007460:	d842      	bhi.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007464:	2b00      	cmp	r3, #0
 8007466:	d003      	beq.n	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8007468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746a:	2b40      	cmp	r3, #64	@ 0x40
 800746c:	d014      	beq.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800746e:	e03b      	b.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007470:	f7fd fe80 	bl	8005174 <HAL_RCC_GetPCLK3Freq>
 8007474:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007476:	f000 bd33 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800747a:	4b70      	ldr	r3, [pc, #448]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007486:	d103      	bne.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8007488:	4b6d      	ldr	r3, [pc, #436]	@ (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800748a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800748c:	f000 bd28 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007494:	f000 bd24 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007498:	f7fd fd28 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 800749c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800749e:	f000 bd1f 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80074a2:	4b66      	ldr	r3, [pc, #408]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b20      	cmp	r3, #32
 80074ac:	d118      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074ae:	4b63      	ldr	r3, [pc, #396]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d005      	beq.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 80074ba:	4b60      	ldr	r3, [pc, #384]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	0e1b      	lsrs	r3, r3, #24
 80074c0:	f003 030f 	and.w	r3, r3, #15
 80074c4:	e006      	b.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 80074c6:	4b5d      	ldr	r3, [pc, #372]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80074c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074cc:	041b      	lsls	r3, r3, #16
 80074ce:	0e1b      	lsrs	r3, r3, #24
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	4a5b      	ldr	r2, [pc, #364]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80074d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074da:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074dc:	f000 bd00 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074e4:	f000 bcfc 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074ec:	f000 bcf8 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80074f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074f4:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80074f8:	430b      	orrs	r3, r1
 80074fa:	d14c      	bne.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80074fc:	4b4f      	ldr	r3, [pc, #316]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80074fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007502:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007506:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750a:	2b00      	cmp	r3, #0
 800750c:	d104      	bne.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800750e:	f7fd fe09 	bl	8005124 <HAL_RCC_GetPCLK1Freq>
 8007512:	6378      	str	r0, [r7, #52]	@ 0x34
 8007514:	f000 bce4 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800751e:	d104      	bne.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007520:	f7fd fce4 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8007524:	6378      	str	r0, [r7, #52]	@ 0x34
 8007526:	f000 bcdb 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800752a:	4b44      	ldr	r3, [pc, #272]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007536:	d107      	bne.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8007538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800753e:	d103      	bne.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8007540:	4b3f      	ldr	r3, [pc, #252]	@ (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007542:	637b      	str	r3, [r7, #52]	@ 0x34
 8007544:	f000 bccc 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007548:	4b3c      	ldr	r3, [pc, #240]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0320 	and.w	r3, r3, #32
 8007550:	2b20      	cmp	r3, #32
 8007552:	d11c      	bne.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8007554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007556:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800755a:	d118      	bne.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800755c:	4b37      	ldr	r3, [pc, #220]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d005      	beq.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8007568:	4b34      	ldr	r3, [pc, #208]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	0e1b      	lsrs	r3, r3, #24
 800756e:	f003 030f 	and.w	r3, r3, #15
 8007572:	e006      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8007574:	4b31      	ldr	r3, [pc, #196]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800757a:	041b      	lsls	r3, r3, #16
 800757c:	0e1b      	lsrs	r3, r3, #24
 800757e:	f003 030f 	and.w	r3, r3, #15
 8007582:	4a30      	ldr	r2, [pc, #192]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007588:	637b      	str	r3, [r7, #52]	@ 0x34
 800758a:	f000 bca9 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	637b      	str	r3, [r7, #52]	@ 0x34
 8007592:	f000 bca5 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8007596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800759a:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800759e:	430b      	orrs	r3, r1
 80075a0:	d152      	bne.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 80075a2:	4b26      	ldr	r3, [pc, #152]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80075a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075a8:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80075ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 80075ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d104      	bne.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80075b4:	f7fd fdb6 	bl	8005124 <HAL_RCC_GetPCLK1Freq>
 80075b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80075ba:	f000 bc91 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 80075be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075c4:	d104      	bne.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80075c6:	f7fd fc91 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 80075ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80075cc:	f000 bc88 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 80075d0:	4b1a      	ldr	r3, [pc, #104]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075dc:	d107      	bne.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 80075de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075e4:	d103      	bne.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 80075e6:	4b16      	ldr	r3, [pc, #88]	@ (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80075e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ea:	f000 bc79 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 80075ee:	4b13      	ldr	r3, [pc, #76]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d11c      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80075fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007600:	d118      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007602:	4b0e      	ldr	r3, [pc, #56]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d005      	beq.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800760e:	4b0b      	ldr	r3, [pc, #44]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	0e1b      	lsrs	r3, r3, #24
 8007614:	f003 030f 	and.w	r3, r3, #15
 8007618:	e006      	b.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800761a:	4b08      	ldr	r3, [pc, #32]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800761c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007620:	041b      	lsls	r3, r3, #16
 8007622:	0e1b      	lsrs	r3, r3, #24
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	4a06      	ldr	r2, [pc, #24]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800762a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800762e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007630:	f000 bc56 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	637b      	str	r3, [r7, #52]	@ 0x34
 8007638:	f000 bc52 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800763c:	46020c00 	.word	0x46020c00
 8007640:	00f42400 	.word	0x00f42400
 8007644:	0800e6c4 	.word	0x0800e6c4
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8007648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800764c:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8007650:	430b      	orrs	r3, r1
 8007652:	d14a      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8007654:	4ba5      	ldr	r3, [pc, #660]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007656:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800765a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800765e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8007660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007662:	2b00      	cmp	r3, #0
 8007664:	d104      	bne.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007666:	f7fd fd5d 	bl	8005124 <HAL_RCC_GetPCLK1Freq>
 800766a:	6378      	str	r0, [r7, #52]	@ 0x34
 800766c:	f000 bc38 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8007670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007672:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007676:	d104      	bne.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007678:	f7fd fc38 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 800767c:	6378      	str	r0, [r7, #52]	@ 0x34
 800767e:	f000 bc2f 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8007682:	4b9a      	ldr	r3, [pc, #616]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800768a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800768e:	d107      	bne.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007692:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007696:	d103      	bne.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8007698:	4b95      	ldr	r3, [pc, #596]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800769a:	637b      	str	r3, [r7, #52]	@ 0x34
 800769c:	f000 bc20 	b.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 80076a0:	4b92      	ldr	r3, [pc, #584]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0320 	and.w	r3, r3, #32
 80076a8:	2b20      	cmp	r3, #32
 80076aa:	d11b      	bne.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 80076ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ae:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80076b2:	d117      	bne.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076b4:	4b8d      	ldr	r3, [pc, #564]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d005      	beq.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 80076c0:	4b8a      	ldr	r3, [pc, #552]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	0e1b      	lsrs	r3, r3, #24
 80076c6:	f003 030f 	and.w	r3, r3, #15
 80076ca:	e006      	b.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 80076cc:	4b87      	ldr	r3, [pc, #540]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80076ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076d2:	041b      	lsls	r3, r3, #16
 80076d4:	0e1b      	lsrs	r3, r3, #24
 80076d6:	f003 030f 	and.w	r3, r3, #15
 80076da:	4a86      	ldr	r2, [pc, #536]	@ (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80076dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e2:	e3fd      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e8:	e3fa      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80076ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076ee:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80076f2:	430b      	orrs	r3, r1
 80076f4:	d164      	bne.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80076f6:	4b7d      	ldr	r3, [pc, #500]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80076f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007700:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007704:	2b00      	cmp	r3, #0
 8007706:	d120      	bne.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007708:	4b78      	ldr	r3, [pc, #480]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b20      	cmp	r3, #32
 8007712:	d117      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007714:	4b75      	ldr	r3, [pc, #468]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d005      	beq.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 8007720:	4b72      	ldr	r3, [pc, #456]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	0e1b      	lsrs	r3, r3, #24
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	e006      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 800772c:	4b6f      	ldr	r3, [pc, #444]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800772e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007732:	041b      	lsls	r3, r3, #16
 8007734:	0e1b      	lsrs	r3, r3, #24
 8007736:	f003 030f 	and.w	r3, r3, #15
 800773a:	4a6e      	ldr	r2, [pc, #440]	@ (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800773c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007740:	637b      	str	r3, [r7, #52]	@ 0x34
 8007742:	e3cd      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	637b      	str	r3, [r7, #52]	@ 0x34
 8007748:	e3ca      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800774a:	4b68      	ldr	r3, [pc, #416]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800774c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007758:	d112      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 800775a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007760:	d10e      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007762:	4b62      	ldr	r3, [pc, #392]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800776c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007770:	d102      	bne.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 8007772:	23fa      	movs	r3, #250	@ 0xfa
 8007774:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007776:	e3b3      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8007778:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800777c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800777e:	e3af      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007780:	4b5a      	ldr	r3, [pc, #360]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800778c:	d106      	bne.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800778e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007794:	d102      	bne.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 8007796:	4b56      	ldr	r3, [pc, #344]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007798:	637b      	str	r3, [r7, #52]	@ 0x34
 800779a:	e3a1      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800779c:	4b53      	ldr	r3, [pc, #332]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800779e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077a2:	f003 0302 	and.w	r3, r3, #2
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d107      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 80077aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077b0:	d103      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 80077b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80077b8:	e392      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80077be:	e38f      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80077c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077c4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80077c8:	430b      	orrs	r3, r1
 80077ca:	d164      	bne.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80077cc:	4b47      	ldr	r3, [pc, #284]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80077ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077d2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80077d6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80077d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d120      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80077de:	4b43      	ldr	r3, [pc, #268]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0320 	and.w	r3, r3, #32
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	d117      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80077ea:	4b40      	ldr	r3, [pc, #256]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d005      	beq.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 80077f6:	4b3d      	ldr	r3, [pc, #244]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	0e1b      	lsrs	r3, r3, #24
 80077fc:	f003 030f 	and.w	r3, r3, #15
 8007800:	e006      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8007802:	4b3a      	ldr	r3, [pc, #232]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007804:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007808:	041b      	lsls	r3, r3, #16
 800780a:	0e1b      	lsrs	r3, r3, #24
 800780c:	f003 030f 	and.w	r3, r3, #15
 8007810:	4a38      	ldr	r2, [pc, #224]	@ (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007816:	637b      	str	r3, [r7, #52]	@ 0x34
 8007818:	e362      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	637b      	str	r3, [r7, #52]	@ 0x34
 800781e:	e35f      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007820:	4b32      	ldr	r3, [pc, #200]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007826:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800782a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800782e:	d112      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 8007830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007836:	d10e      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007838:	4b2c      	ldr	r3, [pc, #176]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800783a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800783e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007842:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007846:	d102      	bne.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 8007848:	23fa      	movs	r3, #250	@ 0xfa
 800784a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800784c:	e348      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800784e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007852:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007854:	e344      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007856:	4b25      	ldr	r3, [pc, #148]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800785e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007862:	d106      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 8007864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007866:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800786a:	d102      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 800786c:	4b20      	ldr	r3, [pc, #128]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800786e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007870:	e336      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007872:	4b1e      	ldr	r3, [pc, #120]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b02      	cmp	r3, #2
 800787e:	d107      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 8007880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007882:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007886:	d103      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 8007888:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800788c:	637b      	str	r3, [r7, #52]	@ 0x34
 800788e:	e327      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007890:	2300      	movs	r3, #0
 8007892:	637b      	str	r3, [r7, #52]	@ 0x34
 8007894:	e324      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007896:	e9d7 2300 	ldrd	r2, r3, [r7]
 800789a:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800789e:	430b      	orrs	r3, r1
 80078a0:	d14e      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80078a2:	4b12      	ldr	r3, [pc, #72]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80078a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078a8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80078ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d103      	bne.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80078b4:	f7fd fc36 	bl	8005124 <HAL_RCC_GetPCLK1Freq>
 80078b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80078ba:	e311      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80078bc:	4b0b      	ldr	r3, [pc, #44]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80078be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078ca:	d119      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 80078cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078d2:	d115      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078d4:	4b05      	ldr	r3, [pc, #20]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80078d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078e2:	d109      	bne.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 80078e4:	23fa      	movs	r3, #250	@ 0xfa
 80078e6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078e8:	e2fa      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80078ea:	bf00      	nop
 80078ec:	46020c00 	.word	0x46020c00
 80078f0:	00f42400 	.word	0x00f42400
 80078f4:	0800e6c4 	.word	0x0800e6c4
      }
      else
      {
        frequency = LSI_VALUE;
 80078f8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80078fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078fe:	e2ef      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007900:	4ba8      	ldr	r3, [pc, #672]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007908:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800790c:	d106      	bne.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 800790e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007910:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007914:	d102      	bne.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 8007916:	4ba4      	ldr	r3, [pc, #656]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007918:	637b      	str	r3, [r7, #52]	@ 0x34
 800791a:	e2e1      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800791c:	4ba1      	ldr	r3, [pc, #644]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800791e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007922:	f003 0302 	and.w	r3, r3, #2
 8007926:	2b02      	cmp	r3, #2
 8007928:	d107      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 800792a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007930:	d103      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 8007932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007936:	637b      	str	r3, [r7, #52]	@ 0x34
 8007938:	e2d2      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	637b      	str	r3, [r7, #52]	@ 0x34
 800793e:	e2cf      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007944:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007948:	430b      	orrs	r3, r1
 800794a:	d12d      	bne.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800794c:	4b95      	ldr	r3, [pc, #596]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800794e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007952:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007956:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007958:	4b92      	ldr	r3, [pc, #584]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007960:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007964:	d105      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	2b00      	cmp	r3, #0
 800796a:	d102      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 800796c:	4b8e      	ldr	r3, [pc, #568]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800796e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007970:	e2b6      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007978:	d107      	bne.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800797a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800797e:	4618      	mov	r0, r3
 8007980:	f7fe fb4e 	bl	8006020 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007986:	637b      	str	r3, [r7, #52]	@ 0x34
 8007988:	e2aa      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800798a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007990:	d107      	bne.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007992:	f107 0318 	add.w	r3, r7, #24
 8007996:	4618      	mov	r0, r3
 8007998:	f7fe fc9c 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	637b      	str	r3, [r7, #52]	@ 0x34
 80079a0:	e29e      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079a6:	e29b      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80079a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079ac:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80079b0:	430b      	orrs	r3, r1
 80079b2:	d156      	bne.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80079b4:	4b7b      	ldr	r3, [pc, #492]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80079b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079ba:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80079be:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079c6:	d028      	beq.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 80079c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079ce:	d845      	bhi.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 80079d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079d6:	d013      	beq.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 80079d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079de:	d83d      	bhi.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 80079e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d004      	beq.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079ec:	d004      	beq.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 80079ee:	e035      	b.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80079f0:	f7fd fbac 	bl	800514c <HAL_RCC_GetPCLK2Freq>
 80079f4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80079f6:	e273      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80079f8:	f7fd fa78 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 80079fc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80079fe:	e26f      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a00:	4b68      	ldr	r3, [pc, #416]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a0c:	d102      	bne.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 8007a0e:	4b66      	ldr	r3, [pc, #408]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007a10:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a12:	e265      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a18:	e262      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a1a:	4b62      	ldr	r3, [pc, #392]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0320 	and.w	r3, r3, #32
 8007a22:	2b20      	cmp	r3, #32
 8007a24:	d117      	bne.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a26:	4b5f      	ldr	r3, [pc, #380]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d005      	beq.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 8007a32:	4b5c      	ldr	r3, [pc, #368]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	0e1b      	lsrs	r3, r3, #24
 8007a38:	f003 030f 	and.w	r3, r3, #15
 8007a3c:	e006      	b.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 8007a3e:	4b59      	ldr	r3, [pc, #356]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007a40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a44:	041b      	lsls	r3, r3, #16
 8007a46:	0e1b      	lsrs	r3, r3, #24
 8007a48:	f003 030f 	and.w	r3, r3, #15
 8007a4c:	4a57      	ldr	r2, [pc, #348]	@ (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a52:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a54:	e244      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a5a:	e241      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a60:	e23e      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007a62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a66:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007a6a:	430b      	orrs	r3, r1
 8007a6c:	d156      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007a6e:	4b4d      	ldr	r3, [pc, #308]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a78:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a80:	d028      	beq.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 8007a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a88:	d845      	bhi.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a90:	d013      	beq.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8007a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a98:	d83d      	bhi.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d004      	beq.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aa6:	d004      	beq.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8007aa8:	e035      	b.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007aaa:	f7fd fb3b 	bl	8005124 <HAL_RCC_GetPCLK1Freq>
 8007aae:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007ab0:	e216      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007ab2:	f7fd fa1b 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8007ab6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007ab8:	e212      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007aba:	4b3a      	ldr	r3, [pc, #232]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ac6:	d102      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 8007ac8:	4b37      	ldr	r3, [pc, #220]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007aca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007acc:	e208      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ad2:	e205      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007ad4:	4b33      	ldr	r3, [pc, #204]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0320 	and.w	r3, r3, #32
 8007adc:	2b20      	cmp	r3, #32
 8007ade:	d117      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ae0:	4b30      	ldr	r3, [pc, #192]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8007aec:	4b2d      	ldr	r3, [pc, #180]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	0e1b      	lsrs	r3, r3, #24
 8007af2:	f003 030f 	and.w	r3, r3, #15
 8007af6:	e006      	b.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 8007af8:	4b2a      	ldr	r3, [pc, #168]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007afa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007afe:	041b      	lsls	r3, r3, #16
 8007b00:	0e1b      	lsrs	r3, r3, #24
 8007b02:	f003 030f 	and.w	r3, r3, #15
 8007b06:	4a29      	ldr	r2, [pc, #164]	@ (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b0c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b0e:	e1e7      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b14:	e1e4      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b1a:	e1e1      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b20:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007b24:	430b      	orrs	r3, r1
 8007b26:	d17c      	bne.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007b28:	4b1e      	ldr	r3, [pc, #120]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007b2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b2e:	f003 0318 	and.w	r3, r3, #24
 8007b32:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b36:	2b18      	cmp	r3, #24
 8007b38:	d870      	bhi.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 8007b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007bb1 	.word	0x08007bb1
 8007b44:	08007c1d 	.word	0x08007c1d
 8007b48:	08007c1d 	.word	0x08007c1d
 8007b4c:	08007c1d 	.word	0x08007c1d
 8007b50:	08007c1d 	.word	0x08007c1d
 8007b54:	08007c1d 	.word	0x08007c1d
 8007b58:	08007c1d 	.word	0x08007c1d
 8007b5c:	08007c1d 	.word	0x08007c1d
 8007b60:	08007bb9 	.word	0x08007bb9
 8007b64:	08007c1d 	.word	0x08007c1d
 8007b68:	08007c1d 	.word	0x08007c1d
 8007b6c:	08007c1d 	.word	0x08007c1d
 8007b70:	08007c1d 	.word	0x08007c1d
 8007b74:	08007c1d 	.word	0x08007c1d
 8007b78:	08007c1d 	.word	0x08007c1d
 8007b7c:	08007c1d 	.word	0x08007c1d
 8007b80:	08007bc1 	.word	0x08007bc1
 8007b84:	08007c1d 	.word	0x08007c1d
 8007b88:	08007c1d 	.word	0x08007c1d
 8007b8c:	08007c1d 	.word	0x08007c1d
 8007b90:	08007c1d 	.word	0x08007c1d
 8007b94:	08007c1d 	.word	0x08007c1d
 8007b98:	08007c1d 	.word	0x08007c1d
 8007b9c:	08007c1d 	.word	0x08007c1d
 8007ba0:	08007bdb 	.word	0x08007bdb
 8007ba4:	46020c00 	.word	0x46020c00
 8007ba8:	00f42400 	.word	0x00f42400
 8007bac:	0800e6c4 	.word	0x0800e6c4
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007bb0:	f7fd fae0 	bl	8005174 <HAL_RCC_GetPCLK3Freq>
 8007bb4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007bb6:	e193      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007bb8:	f7fd f998 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8007bbc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007bbe:	e18f      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007bc0:	4b9f      	ldr	r3, [pc, #636]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bcc:	d102      	bne.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 8007bce:	4b9d      	ldr	r3, [pc, #628]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8007bd0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007bd2:	e185      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bd8:	e182      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007bda:	4b99      	ldr	r3, [pc, #612]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0320 	and.w	r3, r3, #32
 8007be2:	2b20      	cmp	r3, #32
 8007be4:	d117      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007be6:	4b96      	ldr	r3, [pc, #600]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d005      	beq.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 8007bf2:	4b93      	ldr	r3, [pc, #588]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	0e1b      	lsrs	r3, r3, #24
 8007bf8:	f003 030f 	and.w	r3, r3, #15
 8007bfc:	e006      	b.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 8007bfe:	4b90      	ldr	r3, [pc, #576]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c04:	041b      	lsls	r3, r3, #16
 8007c06:	0e1b      	lsrs	r3, r3, #24
 8007c08:	f003 030f 	and.w	r3, r3, #15
 8007c0c:	4a8e      	ldr	r2, [pc, #568]	@ (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c12:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c14:	e164      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c1a:	e161      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c20:	e15e      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c26:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007c2a:	430b      	orrs	r3, r1
 8007c2c:	d155      	bne.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007c2e:	4b84      	ldr	r3, [pc, #528]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007c30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c34:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007c38:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c40:	d013      	beq.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 8007c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c48:	d844      	bhi.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c50:	d013      	beq.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 8007c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c58:	d83c      	bhi.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d014      	beq.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 8007c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c66:	d014      	beq.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8007c68:	e034      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c6a:	f107 0318 	add.w	r3, r7, #24
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe fb30 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c78:	e132      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fe f9ce 	bl	8006020 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c88:	e12a      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007c8a:	f7fd f92f 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8007c8e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007c90:	e126      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c92:	4b6b      	ldr	r3, [pc, #428]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0320 	and.w	r3, r3, #32
 8007c9a:	2b20      	cmp	r3, #32
 8007c9c:	d117      	bne.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c9e:	4b68      	ldr	r3, [pc, #416]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d005      	beq.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 8007caa:	4b65      	ldr	r3, [pc, #404]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	0e1b      	lsrs	r3, r3, #24
 8007cb0:	f003 030f 	and.w	r3, r3, #15
 8007cb4:	e006      	b.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 8007cb6:	4b62      	ldr	r3, [pc, #392]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007cbc:	041b      	lsls	r3, r3, #16
 8007cbe:	0e1b      	lsrs	r3, r3, #24
 8007cc0:	f003 030f 	and.w	r3, r3, #15
 8007cc4:	4a60      	ldr	r2, [pc, #384]	@ (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ccc:	e108      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cd2:	e105      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cd8:	e102      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8007cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cde:	1e59      	subs	r1, r3, #1
 8007ce0:	ea52 0301 	orrs.w	r3, r2, r1
 8007ce4:	d13c      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8007ce6:	4b56      	ldr	r3, [pc, #344]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007ce8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007cec:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007cf0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007cf8:	d027      	beq.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007d00:	d82b      	bhi.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8007d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d08:	d017      	beq.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d10:	d823      	bhi.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8007d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d004      	beq.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 8007d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d1e:	d004      	beq.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8007d20:	e01b      	b.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007d22:	f7fd f8e3 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8007d26:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007d28:	e0da      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe f976 	bl	8006020 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d38:	e0d2      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d3a:	f107 0318 	add.w	r3, r7, #24
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fe fac8 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d48:	e0ca      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d4a:	f107 030c 	add.w	r3, r7, #12
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe fc1a 	bl	8006588 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d58:	e0c2      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d5e:	e0bf      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d64:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007d68:	430b      	orrs	r3, r1
 8007d6a:	d131      	bne.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007d6c:	4b34      	ldr	r3, [pc, #208]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007d6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d76:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007d78:	4b31      	ldr	r3, [pc, #196]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007d7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d106      	bne.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 8007d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d103      	bne.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 8007d8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d92:	e0a5      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007d94:	4b2a      	ldr	r3, [pc, #168]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007d96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007da2:	d112      	bne.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 8007da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007daa:	d10e      	bne.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007dac:	4b24      	ldr	r3, [pc, #144]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007dae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007db6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dba:	d102      	bne.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 8007dbc:	23fa      	movs	r3, #250	@ 0xfa
 8007dbe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007dc0:	e08e      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8007dc2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007dc6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007dc8:	e08a      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dce:	e087      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007dd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dd4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	d13b      	bne.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007ddc:	4b18      	ldr	r3, [pc, #96]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007dde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007de2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007de6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007de8:	4b15      	ldr	r3, [pc, #84]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007df4:	d105      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 8007df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d102      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 8007dfc:	4b13      	ldr	r3, [pc, #76]	@ (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8007dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e00:	e06e      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007e02:	4b0f      	ldr	r3, [pc, #60]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e0e:	d106      	bne.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 8007e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e16:	d102      	bne.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007e18:	4b0d      	ldr	r3, [pc, #52]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8007e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e1c:	e060      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007e1e:	4b08      	ldr	r3, [pc, #32]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e2a:	d106      	bne.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e32:	d102      	bne.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 8007e34:	4b03      	ldr	r3, [pc, #12]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8007e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e38:	e052      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e3e:	e04f      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007e40:	46020c00 	.word	0x46020c00
 8007e44:	00f42400 	.word	0x00f42400
 8007e48:	0800e6c4 	.word	0x0800e6c4
 8007e4c:	02dc6c00 	.word	0x02dc6c00
 8007e50:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8007e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e58:	f1a3 0108 	sub.w	r1, r3, #8
 8007e5c:	ea52 0301 	orrs.w	r3, r2, r1
 8007e60:	d13c      	bne.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8007e62:	4b22      	ldr	r3, [pc, #136]	@ (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8007e64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e68:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007e6c:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8007e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e7a:	d105      	bne.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d102      	bne.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 8007e82:	4b1b      	ldr	r3, [pc, #108]	@ (8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 8007e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e86:	e02b      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8007e88:	4b18      	ldr	r3, [pc, #96]	@ (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e94:	d106      	bne.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 8007e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e9c:	d102      	bne.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 8007e9e:	4b15      	ldr	r3, [pc, #84]	@ (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8007ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea2:	e01d      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eaa:	d107      	bne.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fe f8b5 	bl	8006020 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eba:	e011      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebe:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007ec2:	d108      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ec4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fe f8a9 	bl	8006020 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8007ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed0:	085b      	lsrs	r3, r3, #1
 8007ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ed4:	e004      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eda:	e001      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3738      	adds	r7, #56	@ 0x38
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	46020c00 	.word	0x46020c00
 8007ef0:	00f42400 	.word	0x00f42400
 8007ef4:	007a1200 	.word	0x007a1200

08007ef8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007f00:	4b47      	ldr	r3, [pc, #284]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a46      	ldr	r2, [pc, #280]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007f06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f0a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f0c:	f7f9 fbd6 	bl	80016bc <HAL_GetTick>
 8007f10:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f12:	e008      	b.n	8007f26 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f14:	f7f9 fbd2 	bl	80016bc <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d901      	bls.n	8007f26 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e077      	b.n	8008016 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f26:	4b3e      	ldr	r3, [pc, #248]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1f0      	bne.n	8007f14 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007f32:	4b3b      	ldr	r3, [pc, #236]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f36:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007f3a:	f023 0303 	bic.w	r3, r3, #3
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	6811      	ldr	r1, [r2, #0]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	6852      	ldr	r2, [r2, #4]
 8007f46:	3a01      	subs	r2, #1
 8007f48:	0212      	lsls	r2, r2, #8
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	4934      	ldr	r1, [pc, #208]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007f52:	4b33      	ldr	r3, [pc, #204]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007f54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f56:	4b33      	ldr	r3, [pc, #204]	@ (8008024 <RCCEx_PLL2_Config+0x12c>)
 8007f58:	4013      	ands	r3, r2
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	6892      	ldr	r2, [r2, #8]
 8007f5e:	3a01      	subs	r2, #1
 8007f60:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	68d2      	ldr	r2, [r2, #12]
 8007f68:	3a01      	subs	r2, #1
 8007f6a:	0252      	lsls	r2, r2, #9
 8007f6c:	b292      	uxth	r2, r2
 8007f6e:	4311      	orrs	r1, r2
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	6912      	ldr	r2, [r2, #16]
 8007f74:	3a01      	subs	r2, #1
 8007f76:	0412      	lsls	r2, r2, #16
 8007f78:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007f7c:	4311      	orrs	r1, r2
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	6952      	ldr	r2, [r2, #20]
 8007f82:	3a01      	subs	r2, #1
 8007f84:	0612      	lsls	r2, r2, #24
 8007f86:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	4924      	ldr	r1, [pc, #144]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007f92:	4b23      	ldr	r3, [pc, #140]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f96:	f023 020c 	bic.w	r2, r3, #12
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	4920      	ldr	r1, [pc, #128]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	491c      	ldr	r1, [pc, #112]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007fb8:	f023 0310 	bic.w	r3, r3, #16
 8007fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007fbe:	4b18      	ldr	r3, [pc, #96]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fc6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	69d2      	ldr	r2, [r2, #28]
 8007fce:	00d2      	lsls	r2, r2, #3
 8007fd0:	4913      	ldr	r1, [pc, #76]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007fd6:	4b12      	ldr	r3, [pc, #72]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fda:	4a11      	ldr	r2, [pc, #68]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007fdc:	f043 0310 	orr.w	r3, r3, #16
 8007fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 8007fe8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007fec:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007fee:	f7f9 fb65 	bl	80016bc <HAL_GetTick>
 8007ff2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ff4:	e008      	b.n	8008008 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ff6:	f7f9 fb61 	bl	80016bc <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	2b02      	cmp	r3, #2
 8008002:	d901      	bls.n	8008008 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e006      	b.n	8008016 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008008:	4b05      	ldr	r3, [pc, #20]	@ (8008020 <RCCEx_PLL2_Config+0x128>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d0f0      	beq.n	8007ff6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008014:	2300      	movs	r3, #0

}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	46020c00 	.word	0x46020c00
 8008024:	80800000 	.word	0x80800000

08008028 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008030:	4b47      	ldr	r3, [pc, #284]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a46      	ldr	r2, [pc, #280]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 8008036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800803a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800803c:	f7f9 fb3e 	bl	80016bc <HAL_GetTick>
 8008040:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008042:	e008      	b.n	8008056 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008044:	f7f9 fb3a 	bl	80016bc <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	d901      	bls.n	8008056 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e077      	b.n	8008146 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008056:	4b3e      	ldr	r3, [pc, #248]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1f0      	bne.n	8008044 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008062:	4b3b      	ldr	r3, [pc, #236]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 8008064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008066:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800806a:	f023 0303 	bic.w	r3, r3, #3
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	6811      	ldr	r1, [r2, #0]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	6852      	ldr	r2, [r2, #4]
 8008076:	3a01      	subs	r2, #1
 8008078:	0212      	lsls	r2, r2, #8
 800807a:	430a      	orrs	r2, r1
 800807c:	4934      	ldr	r1, [pc, #208]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 800807e:	4313      	orrs	r3, r2
 8008080:	630b      	str	r3, [r1, #48]	@ 0x30
 8008082:	4b33      	ldr	r3, [pc, #204]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 8008084:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008086:	4b33      	ldr	r3, [pc, #204]	@ (8008154 <RCCEx_PLL3_Config+0x12c>)
 8008088:	4013      	ands	r3, r2
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	6892      	ldr	r2, [r2, #8]
 800808e:	3a01      	subs	r2, #1
 8008090:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	68d2      	ldr	r2, [r2, #12]
 8008098:	3a01      	subs	r2, #1
 800809a:	0252      	lsls	r2, r2, #9
 800809c:	b292      	uxth	r2, r2
 800809e:	4311      	orrs	r1, r2
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	6912      	ldr	r2, [r2, #16]
 80080a4:	3a01      	subs	r2, #1
 80080a6:	0412      	lsls	r2, r2, #16
 80080a8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80080ac:	4311      	orrs	r1, r2
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	6952      	ldr	r2, [r2, #20]
 80080b2:	3a01      	subs	r2, #1
 80080b4:	0612      	lsls	r2, r2, #24
 80080b6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80080ba:	430a      	orrs	r2, r1
 80080bc:	4924      	ldr	r1, [pc, #144]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80080c2:	4b23      	ldr	r3, [pc, #140]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 80080c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c6:	f023 020c 	bic.w	r2, r3, #12
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	4920      	ldr	r1, [pc, #128]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80080d4:	4b1e      	ldr	r3, [pc, #120]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 80080d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	491c      	ldr	r1, [pc, #112]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80080e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 80080e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080e6:	4a1a      	ldr	r2, [pc, #104]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 80080e8:	f023 0310 	bic.w	r3, r3, #16
 80080ec:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80080ee:	4b18      	ldr	r3, [pc, #96]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 80080f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080f6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	69d2      	ldr	r2, [r2, #28]
 80080fe:	00d2      	lsls	r2, r2, #3
 8008100:	4913      	ldr	r1, [pc, #76]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 8008102:	4313      	orrs	r3, r2
 8008104:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008106:	4b12      	ldr	r3, [pc, #72]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 8008108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810a:	4a11      	ldr	r2, [pc, #68]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 800810c:	f043 0310 	orr.w	r3, r3, #16
 8008110:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008112:	4b0f      	ldr	r3, [pc, #60]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a0e      	ldr	r2, [pc, #56]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 8008118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800811c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800811e:	f7f9 facd 	bl	80016bc <HAL_GetTick>
 8008122:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008124:	e008      	b.n	8008138 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008126:	f7f9 fac9 	bl	80016bc <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	2b02      	cmp	r3, #2
 8008132:	d901      	bls.n	8008138 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e006      	b.n	8008146 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008138:	4b05      	ldr	r3, [pc, #20]	@ (8008150 <RCCEx_PLL3_Config+0x128>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d0f0      	beq.n	8008126 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	46020c00 	.word	0x46020c00
 8008154:	80800000 	.word	0x80800000

08008158 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e0fb      	b.n	8008362 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a7f      	ldr	r2, [pc, #508]	@ (800836c <HAL_SPI_Init+0x214>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d004      	beq.n	800817e <HAL_SPI_Init+0x26>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a7d      	ldr	r2, [pc, #500]	@ (8008370 <HAL_SPI_Init+0x218>)
 800817a:	4293      	cmp	r3, r2
 800817c:	e000      	b.n	8008180 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800817e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a78      	ldr	r2, [pc, #480]	@ (800836c <HAL_SPI_Init+0x214>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d004      	beq.n	800819a <HAL_SPI_Init+0x42>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a76      	ldr	r2, [pc, #472]	@ (8008370 <HAL_SPI_Init+0x218>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d105      	bne.n	80081a6 <HAL_SPI_Init+0x4e>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	2b0f      	cmp	r3, #15
 80081a0:	d901      	bls.n	80081a6 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e0dd      	b.n	8008362 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fc14 	bl	80089d4 <SPI_GetPacketSize>
 80081ac:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a6e      	ldr	r2, [pc, #440]	@ (800836c <HAL_SPI_Init+0x214>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d004      	beq.n	80081c2 <HAL_SPI_Init+0x6a>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a6c      	ldr	r2, [pc, #432]	@ (8008370 <HAL_SPI_Init+0x218>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d102      	bne.n	80081c8 <HAL_SPI_Init+0x70>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2b08      	cmp	r3, #8
 80081c6:	d816      	bhi.n	80081f6 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80081cc:	4a69      	ldr	r2, [pc, #420]	@ (8008374 <HAL_SPI_Init+0x21c>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d00e      	beq.n	80081f0 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a68      	ldr	r2, [pc, #416]	@ (8008378 <HAL_SPI_Init+0x220>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d009      	beq.n	80081f0 <HAL_SPI_Init+0x98>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a66      	ldr	r2, [pc, #408]	@ (800837c <HAL_SPI_Init+0x224>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d004      	beq.n	80081f0 <HAL_SPI_Init+0x98>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a65      	ldr	r2, [pc, #404]	@ (8008380 <HAL_SPI_Init+0x228>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d104      	bne.n	80081fa <HAL_SPI_Init+0xa2>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b10      	cmp	r3, #16
 80081f4:	d901      	bls.n	80081fa <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e0b3      	b.n	8008362 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d106      	bne.n	8008214 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7f8 ff32 	bl	8001078 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0201 	bic.w	r2, r2, #1
 800822a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008236:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008240:	d119      	bne.n	8008276 <HAL_SPI_Init+0x11e>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800824a:	d103      	bne.n	8008254 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008250:	2b00      	cmp	r3, #0
 8008252:	d008      	beq.n	8008266 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10c      	bne.n	8008276 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008260:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008264:	d107      	bne.n	8008276 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008274:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00f      	beq.n	80082a2 <HAL_SPI_Init+0x14a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	2b06      	cmp	r3, #6
 8008288:	d90b      	bls.n	80082a2 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	430a      	orrs	r2, r1
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	e007      	b.n	80082b2 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80082b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69da      	ldr	r2, [r3, #28]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ba:	431a      	orrs	r2, r3
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	431a      	orrs	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082c4:	ea42 0103 	orr.w	r1, r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	68da      	ldr	r2, [r3, #12]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	430a      	orrs	r2, r1
 80082d2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082dc:	431a      	orrs	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e2:	431a      	orrs	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	431a      	orrs	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	431a      	orrs	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	695b      	ldr	r3, [r3, #20]
 80082f4:	431a      	orrs	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	431a      	orrs	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	431a      	orrs	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008306:	431a      	orrs	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	431a      	orrs	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008312:	431a      	orrs	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008318:	431a      	orrs	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800831e:	ea42 0103 	orr.w	r1, r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	430a      	orrs	r2, r1
 800832c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00a      	beq.n	8008350 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	46002000 	.word	0x46002000
 8008370:	56002000 	.word	0x56002000
 8008374:	40013000 	.word	0x40013000
 8008378:	50013000 	.word	0x50013000
 800837c:	40003800 	.word	0x40003800
 8008380:	50003800 	.word	0x50003800

08008384 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08c      	sub	sp, #48	@ 0x30
 8008388:	af02      	add	r7, sp, #8
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	3320      	adds	r3, #32
 8008398:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3330      	adds	r3, #48	@ 0x30
 80083a0:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083a2:	f7f9 f98b 	bl	80016bc <HAL_GetTick>
 80083a6:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 80083a8:	887b      	ldrh	r3, [r7, #2]
 80083aa:	847b      	strh	r3, [r7, #34]	@ 0x22
  initial_RxXferCount = Size;
 80083ac:	887b      	ldrh	r3, [r7, #2]
 80083ae:	843b      	strh	r3, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d001      	beq.n	80083c0 <HAL_SPI_TransmitReceive+0x3c>
  {
    return HAL_BUSY;
 80083bc:	2302      	movs	r3, #2
 80083be:	e237      	b.n	8008830 <HAL_SPI_TransmitReceive+0x4ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d005      	beq.n	80083d2 <HAL_SPI_TransmitReceive+0x4e>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <HAL_SPI_TransmitReceive+0x4e>
 80083cc:	887b      	ldrh	r3, [r7, #2]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <HAL_SPI_TransmitReceive+0x52>
  {
    return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e22c      	b.n	8008830 <HAL_SPI_TransmitReceive+0x4ac>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d101      	bne.n	80083e4 <HAL_SPI_TransmitReceive+0x60>
 80083e0:	2302      	movs	r3, #2
 80083e2:	e225      	b.n	8008830 <HAL_SPI_TransmitReceive+0x4ac>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2205      	movs	r2, #5
 80083f0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	887a      	ldrh	r2, [r7, #2]
 8008406:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	887a      	ldrh	r2, [r7, #2]
 800840e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	887a      	ldrh	r2, [r7, #2]
 800841c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	887a      	ldrh	r2, [r7, #2]
 8008424:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8008442:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a6c      	ldr	r2, [pc, #432]	@ (80085fc <HAL_SPI_TransmitReceive+0x278>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d00e      	beq.n	800846c <HAL_SPI_TransmitReceive+0xe8>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a6b      	ldr	r2, [pc, #428]	@ (8008600 <HAL_SPI_TransmitReceive+0x27c>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d009      	beq.n	800846c <HAL_SPI_TransmitReceive+0xe8>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a69      	ldr	r2, [pc, #420]	@ (8008604 <HAL_SPI_TransmitReceive+0x280>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d004      	beq.n	800846c <HAL_SPI_TransmitReceive+0xe8>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a68      	ldr	r2, [pc, #416]	@ (8008608 <HAL_SPI_TransmitReceive+0x284>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d102      	bne.n	8008472 <HAL_SPI_TransmitReceive+0xee>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800846c:	2310      	movs	r3, #16
 800846e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008470:	e001      	b.n	8008476 <HAL_SPI_TransmitReceive+0xf2>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8008472:	2308      	movs	r3, #8
 8008474:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	0c1b      	lsrs	r3, r3, #16
 800847e:	041b      	lsls	r3, r3, #16
 8008480:	8879      	ldrh	r1, [r7, #2]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	6812      	ldr	r2, [r2, #0]
 8008486:	430b      	orrs	r3, r1
 8008488:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f042 0201 	orr.w	r2, r2, #1
 8008498:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10c      	bne.n	80084c2 <HAL_SPI_TransmitReceive+0x13e>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084b0:	d107      	bne.n	80084c2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	2b0f      	cmp	r3, #15
 80084c8:	f240 808e 	bls.w	80085e8 <HAL_SPI_TransmitReceive+0x264>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a4a      	ldr	r2, [pc, #296]	@ (80085fc <HAL_SPI_TransmitReceive+0x278>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d00e      	beq.n	80084f4 <HAL_SPI_TransmitReceive+0x170>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a49      	ldr	r2, [pc, #292]	@ (8008600 <HAL_SPI_TransmitReceive+0x27c>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d009      	beq.n	80084f4 <HAL_SPI_TransmitReceive+0x170>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a47      	ldr	r2, [pc, #284]	@ (8008604 <HAL_SPI_TransmitReceive+0x280>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d004      	beq.n	80084f4 <HAL_SPI_TransmitReceive+0x170>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a46      	ldr	r2, [pc, #280]	@ (8008608 <HAL_SPI_TransmitReceive+0x284>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d179      	bne.n	80085e8 <HAL_SPI_TransmitReceive+0x264>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80084f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f6:	089b      	lsrs	r3, r3, #2
 80084f8:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80084fa:	e06e      	b.n	80085da <HAL_SPI_TransmitReceive+0x256>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	f003 0302 	and.w	r3, r3, #2
 8008506:	2b02      	cmp	r3, #2
 8008508:	d120      	bne.n	800854c <HAL_SPI_TransmitReceive+0x1c8>
 800850a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800850c:	2b00      	cmp	r3, #0
 800850e:	d01d      	beq.n	800854c <HAL_SPI_TransmitReceive+0x1c8>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008510:	8c3a      	ldrh	r2, [r7, #32]
 8008512:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8008514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008516:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008518:	429a      	cmp	r2, r3
 800851a:	d217      	bcs.n	800854c <HAL_SPI_TransmitReceive+0x1c8>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6812      	ldr	r2, [r2, #0]
 8008526:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800852c:	1d1a      	adds	r2, r3, #4
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008538:	b29b      	uxth	r3, r3
 800853a:	3b01      	subs	r3, #1
 800853c:	b29a      	uxth	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800854a:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	695a      	ldr	r2, [r3, #20]
 8008552:	f248 0308 	movw	r3, #32776	@ 0x8008
 8008556:	4013      	ands	r3, r2
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01a      	beq.n	8008592 <HAL_SPI_TransmitReceive+0x20e>
 800855c:	8c3b      	ldrh	r3, [r7, #32]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d017      	beq.n	8008592 <HAL_SPI_TransmitReceive+0x20e>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800856a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800856c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008572:	1d1a      	adds	r2, r3, #4
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount --;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800857e:	b29b      	uxth	r3, r3
 8008580:	3b01      	subs	r3, #1
 8008582:	b29a      	uxth	r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008590:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008592:	f7f9 f893 	bl	80016bc <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800859e:	429a      	cmp	r2, r3
 80085a0:	d803      	bhi.n	80085aa <HAL_SPI_TransmitReceive+0x226>
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085a8:	d102      	bne.n	80085b0 <HAL_SPI_TransmitReceive+0x22c>
 80085aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d114      	bne.n	80085da <HAL_SPI_TransmitReceive+0x256>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 f941 	bl	8008838 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e12a      	b.n	8008830 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80085da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d18d      	bne.n	80084fc <HAL_SPI_TransmitReceive+0x178>
 80085e0:	8c3b      	ldrh	r3, [r7, #32]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d18a      	bne.n	80084fc <HAL_SPI_TransmitReceive+0x178>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80085e6:	e0fd      	b.n	80087e4 <HAL_SPI_TransmitReceive+0x460>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	2b07      	cmp	r3, #7
 80085ee:	f240 80f3 	bls.w	80087d8 <HAL_SPI_TransmitReceive+0x454>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80085f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f4:	085b      	lsrs	r3, r3, #1
 80085f6:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80085f8:	e075      	b.n	80086e6 <HAL_SPI_TransmitReceive+0x362>
 80085fa:	bf00      	nop
 80085fc:	40013000 	.word	0x40013000
 8008600:	50013000 	.word	0x50013000
 8008604:	40003800 	.word	0x40003800
 8008608:	50003800 	.word	0x50003800
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b02      	cmp	r3, #2
 8008618:	d11f      	bne.n	800865a <HAL_SPI_TransmitReceive+0x2d6>
 800861a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01c      	beq.n	800865a <HAL_SPI_TransmitReceive+0x2d6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008620:	8c3a      	ldrh	r2, [r7, #32]
 8008622:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8008624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008626:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008628:	429a      	cmp	r2, r3
 800862a:	d216      	bcs.n	800865a <HAL_SPI_TransmitReceive+0x2d6>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008630:	881a      	ldrh	r2, [r3, #0]
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800863a:	1c9a      	adds	r2, r3, #2
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008646:	b29b      	uxth	r3, r3
 8008648:	3b01      	subs	r3, #1
 800864a:	b29a      	uxth	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008658:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	f003 0301 	and.w	r3, r3, #1
 8008664:	2b01      	cmp	r3, #1
 8008666:	d11a      	bne.n	800869e <HAL_SPI_TransmitReceive+0x31a>
 8008668:	8c3b      	ldrh	r3, [r7, #32]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d017      	beq.n	800869e <HAL_SPI_TransmitReceive+0x31a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008672:	69ba      	ldr	r2, [r7, #24]
 8008674:	8812      	ldrh	r2, [r2, #0]
 8008676:	b292      	uxth	r2, r2
 8008678:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800867e:	1c9a      	adds	r2, r3, #2
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800868a:	b29b      	uxth	r3, r3
 800868c:	3b01      	subs	r3, #1
 800868e:	b29a      	uxth	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800869c:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800869e:	f7f9 f80d 	bl	80016bc <HAL_GetTick>
 80086a2:	4602      	mov	r2, r0
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d803      	bhi.n	80086b6 <HAL_SPI_TransmitReceive+0x332>
 80086ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086b4:	d102      	bne.n	80086bc <HAL_SPI_TransmitReceive+0x338>
 80086b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d114      	bne.n	80086e6 <HAL_SPI_TransmitReceive+0x362>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 f8bb 	bl	8008838 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e0a4      	b.n	8008830 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80086e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d18f      	bne.n	800860c <HAL_SPI_TransmitReceive+0x288>
 80086ec:	8c3b      	ldrh	r3, [r7, #32]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d18c      	bne.n	800860c <HAL_SPI_TransmitReceive+0x288>
 80086f2:	e077      	b.n	80087e4 <HAL_SPI_TransmitReceive+0x460>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d121      	bne.n	8008746 <HAL_SPI_TransmitReceive+0x3c2>
 8008702:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008704:	2b00      	cmp	r3, #0
 8008706:	d01e      	beq.n	8008746 <HAL_SPI_TransmitReceive+0x3c2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008708:	8c3a      	ldrh	r2, [r7, #32]
 800870a:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800870c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008710:	429a      	cmp	r2, r3
 8008712:	d218      	bcs.n	8008746 <HAL_SPI_TransmitReceive+0x3c2>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3320      	adds	r3, #32
 800871e:	7812      	ldrb	r2, [r2, #0]
 8008720:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008726:	1c5a      	adds	r2, r3, #1
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008732:	b29b      	uxth	r3, r3
 8008734:	3b01      	subs	r3, #1
 8008736:	b29a      	uxth	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008744:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	695b      	ldr	r3, [r3, #20]
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	2b01      	cmp	r3, #1
 8008752:	d11d      	bne.n	8008790 <HAL_SPI_TransmitReceive+0x40c>
 8008754:	8c3b      	ldrh	r3, [r7, #32]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d01a      	beq.n	8008790 <HAL_SPI_TransmitReceive+0x40c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008766:	7812      	ldrb	r2, [r2, #0]
 8008768:	b2d2      	uxtb	r2, r2
 800876a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008770:	1c5a      	adds	r2, r3, #1
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800877c:	b29b      	uxth	r3, r3
 800877e:	3b01      	subs	r3, #1
 8008780:	b29a      	uxth	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800878e:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008790:	f7f8 ff94 	bl	80016bc <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800879c:	429a      	cmp	r2, r3
 800879e:	d803      	bhi.n	80087a8 <HAL_SPI_TransmitReceive+0x424>
 80087a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087a6:	d102      	bne.n	80087ae <HAL_SPI_TransmitReceive+0x42a>
 80087a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d114      	bne.n	80087d8 <HAL_SPI_TransmitReceive+0x454>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 f842 	bl	8008838 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80087d4:	2303      	movs	r3, #3
 80087d6:	e02b      	b.n	8008830 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80087d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d18a      	bne.n	80086f4 <HAL_SPI_TransmitReceive+0x370>
 80087de:	8c3b      	ldrh	r3, [r7, #32]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d187      	bne.n	80086f4 <HAL_SPI_TransmitReceive+0x370>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ea:	2200      	movs	r2, #0
 80087ec:	2108      	movs	r1, #8
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 f8c2 	bl	8008978 <SPI_WaitOnFlagUntilTimeout>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d007      	beq.n	800880a <HAL_SPI_TransmitReceive+0x486>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008800:	f043 0220 	orr.w	r2, r3, #32
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 f814 	bl	8008838 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <HAL_SPI_TransmitReceive+0x4aa>
  {
    return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e000      	b.n	8008830 <HAL_SPI_TransmitReceive+0x4ac>
  }
  else
  {
    return HAL_OK;
 800882e:	2300      	movs	r3, #0
  }
}
 8008830:	4618      	mov	r0, r3
 8008832:	3728      	adds	r7, #40	@ 0x28
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	699a      	ldr	r2, [r3, #24]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f042 0208 	orr.w	r2, r2, #8
 8008856:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	699a      	ldr	r2, [r3, #24]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f042 0210 	orr.w	r2, r2, #16
 8008866:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f022 0201 	bic.w	r2, r2, #1
 8008876:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6812      	ldr	r2, [r2, #0]
 8008882:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8008886:	f023 0303 	bic.w	r3, r3, #3
 800888a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	689a      	ldr	r2, [r3, #8]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800889a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b04      	cmp	r3, #4
 80088a6:	d014      	beq.n	80088d2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f003 0320 	and.w	r3, r3, #32
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00f      	beq.n	80088d2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	699a      	ldr	r2, [r3, #24]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f042 0220 	orr.w	r2, r2, #32
 80088d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b03      	cmp	r3, #3
 80088dc:	d014      	beq.n	8008908 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00f      	beq.n	8008908 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088ee:	f043 0204 	orr.w	r2, r3, #4
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	699a      	ldr	r2, [r3, #24]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008906:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00f      	beq.n	8008932 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008918:	f043 0201 	orr.w	r2, r3, #1
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	699a      	ldr	r2, [r3, #24]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008930:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00f      	beq.n	800895c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008942:	f043 0208 	orr.w	r2, r3, #8
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699a      	ldr	r2, [r3, #24]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800895a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800896c:	bf00      	nop
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	4613      	mov	r3, r2
 8008986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008988:	e010      	b.n	80089ac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800898a:	f7f8 fe97 	bl	80016bc <HAL_GetTick>
 800898e:	4602      	mov	r2, r0
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	429a      	cmp	r2, r3
 8008998:	d803      	bhi.n	80089a2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089a0:	d102      	bne.n	80089a8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e00f      	b.n	80089cc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	695a      	ldr	r2, [r3, #20]
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	4013      	ands	r3, r2
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	bf0c      	ite	eq
 80089bc:	2301      	moveq	r3, #1
 80089be:	2300      	movne	r3, #0
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	461a      	mov	r2, r3
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d0df      	beq.n	800898a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e0:	095b      	lsrs	r3, r3, #5
 80089e2:	3301      	adds	r3, #1
 80089e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	3301      	adds	r3, #1
 80089ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	3307      	adds	r3, #7
 80089f2:	08db      	lsrs	r3, r3, #3
 80089f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	fb02 f303 	mul.w	r3, r2, r3
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b083      	sub	sp, #12
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d12e      	bne.n	8008a7e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d101      	bne.n	8008a2e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	e028      	b.n	8008a80 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2202      	movs	r2, #2
 8008a3a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f022 0201 	bic.w	r2, r2, #1
 8008a4c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008a5a:	ea42 0103 	orr.w	r1, r2, r3
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	689a      	ldr	r2, [r3, #8]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	430a      	orrs	r2, r1
 8008a68:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e000      	b.n	8008a80 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
  }
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e042      	b.n	8008b24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d106      	bne.n	8008ab6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7f8 fb4b 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2224      	movs	r2, #36	@ 0x24
 8008aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f022 0201 	bic.w	r2, r2, #1
 8008acc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d002      	beq.n	8008adc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f9d6 	bl	8008e88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f825 	bl	8008b2c <UART_SetConfig>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d101      	bne.n	8008aec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e01b      	b.n	8008b24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008afa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689a      	ldr	r2, [r3, #8]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f042 0201 	orr.w	r2, r2, #1
 8008b1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fa55 	bl	8008fcc <UART_CheckIdleState>
 8008b22:	4603      	mov	r3, r0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b30:	b094      	sub	sp, #80	@ 0x50
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	4b83      	ldr	r3, [pc, #524]	@ (8008d50 <UART_SetConfig+0x224>)
 8008b42:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	431a      	orrs	r2, r3
 8008b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	431a      	orrs	r2, r3
 8008b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	497c      	ldr	r1, [pc, #496]	@ (8008d54 <UART_SetConfig+0x228>)
 8008b64:	4019      	ands	r1, r3
 8008b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b6c:	430b      	orrs	r3, r1
 8008b6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7c:	68d9      	ldr	r1, [r3, #12]
 8008b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	ea40 0301 	orr.w	r3, r0, r1
 8008b86:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4b6f      	ldr	r3, [pc, #444]	@ (8008d50 <UART_SetConfig+0x224>)
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d009      	beq.n	8008bac <UART_SetConfig+0x80>
 8008b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	4b6e      	ldr	r3, [pc, #440]	@ (8008d58 <UART_SetConfig+0x22c>)
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d004      	beq.n	8008bac <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba4:	6a1a      	ldr	r2, [r3, #32]
 8008ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008bb6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bc0:	430b      	orrs	r3, r1
 8008bc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bca:	f023 000f 	bic.w	r0, r3, #15
 8008bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	ea40 0301 	orr.w	r3, r0, r1
 8008bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	4b5e      	ldr	r3, [pc, #376]	@ (8008d5c <UART_SetConfig+0x230>)
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d102      	bne.n	8008bec <UART_SetConfig+0xc0>
 8008be6:	2301      	movs	r3, #1
 8008be8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bea:	e032      	b.n	8008c52 <UART_SetConfig+0x126>
 8008bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	4b5b      	ldr	r3, [pc, #364]	@ (8008d60 <UART_SetConfig+0x234>)
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d102      	bne.n	8008bfc <UART_SetConfig+0xd0>
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bfa:	e02a      	b.n	8008c52 <UART_SetConfig+0x126>
 8008bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	4b58      	ldr	r3, [pc, #352]	@ (8008d64 <UART_SetConfig+0x238>)
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d102      	bne.n	8008c0c <UART_SetConfig+0xe0>
 8008c06:	2304      	movs	r3, #4
 8008c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c0a:	e022      	b.n	8008c52 <UART_SetConfig+0x126>
 8008c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	4b55      	ldr	r3, [pc, #340]	@ (8008d68 <UART_SetConfig+0x23c>)
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d102      	bne.n	8008c1c <UART_SetConfig+0xf0>
 8008c16:	2308      	movs	r3, #8
 8008c18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c1a:	e01a      	b.n	8008c52 <UART_SetConfig+0x126>
 8008c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	4b52      	ldr	r3, [pc, #328]	@ (8008d6c <UART_SetConfig+0x240>)
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d102      	bne.n	8008c2c <UART_SetConfig+0x100>
 8008c26:	2310      	movs	r3, #16
 8008c28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c2a:	e012      	b.n	8008c52 <UART_SetConfig+0x126>
 8008c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	4b4f      	ldr	r3, [pc, #316]	@ (8008d70 <UART_SetConfig+0x244>)
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d103      	bne.n	8008c3e <UART_SetConfig+0x112>
 8008c36:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8008c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c3c:	e009      	b.n	8008c52 <UART_SetConfig+0x126>
 8008c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	4b43      	ldr	r3, [pc, #268]	@ (8008d50 <UART_SetConfig+0x224>)
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d102      	bne.n	8008c4e <UART_SetConfig+0x122>
 8008c48:	2320      	movs	r3, #32
 8008c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c4c:	e001      	b.n	8008c52 <UART_SetConfig+0x126>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	4b3e      	ldr	r3, [pc, #248]	@ (8008d50 <UART_SetConfig+0x224>)
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d005      	beq.n	8008c68 <UART_SetConfig+0x13c>
 8008c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	4b3d      	ldr	r3, [pc, #244]	@ (8008d58 <UART_SetConfig+0x22c>)
 8008c62:	429a      	cmp	r2, r3
 8008c64:	f040 8088 	bne.w	8008d78 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008c68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	623b      	str	r3, [r7, #32]
 8008c6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008c70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c74:	f7fd fde2 	bl	800683c <HAL_RCCEx_GetPeriphCLKFreq>
 8008c78:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 80eb 	beq.w	8008e58 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c86:	4a3b      	ldr	r2, [pc, #236]	@ (8008d74 <UART_SetConfig+0x248>)
 8008c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c90:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c94:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c98:	685a      	ldr	r2, [r3, #4]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	005b      	lsls	r3, r3, #1
 8008c9e:	4413      	add	r3, r2
 8008ca0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d305      	bcc.n	8008cb2 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d903      	bls.n	8008cba <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008cb8:	e048      	b.n	8008d4c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	61bb      	str	r3, [r7, #24]
 8008cc0:	61fa      	str	r2, [r7, #28]
 8008cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc6:	4a2b      	ldr	r2, [pc, #172]	@ (8008d74 <UART_SetConfig+0x248>)
 8008cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	2200      	movs	r2, #0
 8008cd0:	613b      	str	r3, [r7, #16]
 8008cd2:	617a      	str	r2, [r7, #20]
 8008cd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008cd8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008cdc:	f7f7 fad8 	bl	8000290 <__aeabi_uldivmod>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	f04f 0200 	mov.w	r2, #0
 8008cec:	f04f 0300 	mov.w	r3, #0
 8008cf0:	020b      	lsls	r3, r1, #8
 8008cf2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cf6:	0202      	lsls	r2, r0, #8
 8008cf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cfa:	6849      	ldr	r1, [r1, #4]
 8008cfc:	0849      	lsrs	r1, r1, #1
 8008cfe:	2000      	movs	r0, #0
 8008d00:	460c      	mov	r4, r1
 8008d02:	4605      	mov	r5, r0
 8008d04:	eb12 0804 	adds.w	r8, r2, r4
 8008d08:	eb43 0905 	adc.w	r9, r3, r5
 8008d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	60bb      	str	r3, [r7, #8]
 8008d14:	60fa      	str	r2, [r7, #12]
 8008d16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d1a:	4640      	mov	r0, r8
 8008d1c:	4649      	mov	r1, r9
 8008d1e:	f7f7 fab7 	bl	8000290 <__aeabi_uldivmod>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	4613      	mov	r3, r2
 8008d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d30:	d308      	bcc.n	8008d44 <UART_SetConfig+0x218>
 8008d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d38:	d204      	bcs.n	8008d44 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8008d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008d40:	60da      	str	r2, [r3, #12]
 8008d42:	e003      	b.n	8008d4c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008d4a:	e085      	b.n	8008e58 <UART_SetConfig+0x32c>
 8008d4c:	e084      	b.n	8008e58 <UART_SetConfig+0x32c>
 8008d4e:	bf00      	nop
 8008d50:	46002400 	.word	0x46002400
 8008d54:	cfff69f3 	.word	0xcfff69f3
 8008d58:	56002400 	.word	0x56002400
 8008d5c:	40013800 	.word	0x40013800
 8008d60:	40004400 	.word	0x40004400
 8008d64:	40004800 	.word	0x40004800
 8008d68:	40004c00 	.word	0x40004c00
 8008d6c:	40005000 	.word	0x40005000
 8008d70:	40006400 	.word	0x40006400
 8008d74:	0800e784 	.word	0x0800e784
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d80:	d13c      	bne.n	8008dfc <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008d82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d84:	2200      	movs	r2, #0
 8008d86:	603b      	str	r3, [r7, #0]
 8008d88:	607a      	str	r2, [r7, #4]
 8008d8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d8e:	f7fd fd55 	bl	800683c <HAL_RCCEx_GetPeriphCLKFreq>
 8008d92:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d05e      	beq.n	8008e58 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d9e:	4a39      	ldr	r2, [pc, #228]	@ (8008e84 <UART_SetConfig+0x358>)
 8008da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008da4:	461a      	mov	r2, r3
 8008da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dac:	005a      	lsls	r2, r3, #1
 8008dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	085b      	lsrs	r3, r3, #1
 8008db4:	441a      	add	r2, r3
 8008db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dc2:	2b0f      	cmp	r3, #15
 8008dc4:	d916      	bls.n	8008df4 <UART_SetConfig+0x2c8>
 8008dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dcc:	d212      	bcs.n	8008df4 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	f023 030f 	bic.w	r3, r3, #15
 8008dd6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dda:	085b      	lsrs	r3, r3, #1
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008de6:	4313      	orrs	r3, r2
 8008de8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008df0:	60da      	str	r2, [r3, #12]
 8008df2:	e031      	b.n	8008e58 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008dfa:	e02d      	b.n	8008e58 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008dfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dfe:	2200      	movs	r2, #0
 8008e00:	469a      	mov	sl, r3
 8008e02:	4693      	mov	fp, r2
 8008e04:	4650      	mov	r0, sl
 8008e06:	4659      	mov	r1, fp
 8008e08:	f7fd fd18 	bl	800683c <HAL_RCCEx_GetPeriphCLKFreq>
 8008e0c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d021      	beq.n	8008e58 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e18:	4a1a      	ldr	r2, [pc, #104]	@ (8008e84 <UART_SetConfig+0x358>)
 8008e1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e22:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	085b      	lsrs	r3, r3, #1
 8008e2c:	441a      	add	r2, r3
 8008e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e3a:	2b0f      	cmp	r3, #15
 8008e3c:	d909      	bls.n	8008e52 <UART_SetConfig+0x326>
 8008e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e44:	d205      	bcs.n	8008e52 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	60da      	str	r2, [r3, #12]
 8008e50:	e002      	b.n	8008e58 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e62:	2201      	movs	r2, #1
 8008e64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e70:	2200      	movs	r2, #0
 8008e72:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008e74:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3750      	adds	r7, #80	@ 0x50
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e82:	bf00      	nop
 8008e84:	0800e784 	.word	0x0800e784

08008e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e94:	f003 0308 	and.w	r3, r3, #8
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00a      	beq.n	8008eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	430a      	orrs	r2, r1
 8008eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00a      	beq.n	8008ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed8:	f003 0302 	and.w	r3, r3, #2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00a      	beq.n	8008ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008efa:	f003 0304 	and.w	r3, r3, #4
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00a      	beq.n	8008f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	430a      	orrs	r2, r1
 8008f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f1c:	f003 0310 	and.w	r3, r3, #16
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00a      	beq.n	8008f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3e:	f003 0320 	and.w	r3, r3, #32
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d01a      	beq.n	8008f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f86:	d10a      	bne.n	8008f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00a      	beq.n	8008fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	605a      	str	r2, [r3, #4]
  }
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b098      	sub	sp, #96	@ 0x60
 8008fd0:	af02      	add	r7, sp, #8
 8008fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fdc:	f7f8 fb6e 	bl	80016bc <HAL_GetTick>
 8008fe0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0308 	and.w	r3, r3, #8
 8008fec:	2b08      	cmp	r3, #8
 8008fee:	d12f      	bne.n	8009050 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ff0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f88e 	bl	8009120 <UART_WaitOnFlagUntilTimeout>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d022      	beq.n	8009050 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009012:	e853 3f00 	ldrex	r3, [r3]
 8009016:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800901a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800901e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	461a      	mov	r2, r3
 8009026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009028:	647b      	str	r3, [r7, #68]	@ 0x44
 800902a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800902e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009030:	e841 2300 	strex	r3, r2, [r1]
 8009034:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1e6      	bne.n	800900a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2220      	movs	r2, #32
 8009040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e063      	b.n	8009118 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0304 	and.w	r3, r3, #4
 800905a:	2b04      	cmp	r3, #4
 800905c:	d149      	bne.n	80090f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800905e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009066:	2200      	movs	r2, #0
 8009068:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f857 	bl	8009120 <UART_WaitOnFlagUntilTimeout>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d03c      	beq.n	80090f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	623b      	str	r3, [r7, #32]
   return(result);
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800908c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009096:	633b      	str	r3, [r7, #48]	@ 0x30
 8009098:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800909c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e6      	bne.n	8009078 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3308      	adds	r3, #8
 80090b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f023 0301 	bic.w	r3, r3, #1
 80090c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3308      	adds	r3, #8
 80090c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090ca:	61fa      	str	r2, [r7, #28]
 80090cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ce:	69b9      	ldr	r1, [r7, #24]
 80090d0:	69fa      	ldr	r2, [r7, #28]
 80090d2:	e841 2300 	strex	r3, r2, [r1]
 80090d6:	617b      	str	r3, [r7, #20]
   return(result);
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1e5      	bne.n	80090aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e012      	b.n	8009118 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2220      	movs	r2, #32
 80090f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2220      	movs	r2, #32
 80090fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3758      	adds	r7, #88	@ 0x58
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	4613      	mov	r3, r2
 800912e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009130:	e04f      	b.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009138:	d04b      	beq.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800913a:	f7f8 fabf 	bl	80016bc <HAL_GetTick>
 800913e:	4602      	mov	r2, r0
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	429a      	cmp	r2, r3
 8009148:	d302      	bcc.n	8009150 <UART_WaitOnFlagUntilTimeout+0x30>
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e04e      	b.n	80091f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0304 	and.w	r3, r3, #4
 800915e:	2b00      	cmp	r3, #0
 8009160:	d037      	beq.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	2b80      	cmp	r3, #128	@ 0x80
 8009166:	d034      	beq.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2b40      	cmp	r3, #64	@ 0x40
 800916c:	d031      	beq.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	69db      	ldr	r3, [r3, #28]
 8009174:	f003 0308 	and.w	r3, r3, #8
 8009178:	2b08      	cmp	r3, #8
 800917a:	d110      	bne.n	800919e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2208      	movs	r2, #8
 8009182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f000 f838 	bl	80091fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2208      	movs	r2, #8
 800918e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e029      	b.n	80091f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80091a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091ac:	d111      	bne.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80091b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 f81e 	bl	80091fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2220      	movs	r2, #32
 80091c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e00f      	b.n	80091f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	69da      	ldr	r2, [r3, #28]
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	4013      	ands	r3, r2
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	429a      	cmp	r2, r3
 80091e0:	bf0c      	ite	eq
 80091e2:	2301      	moveq	r3, #1
 80091e4:	2300      	movne	r3, #0
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	461a      	mov	r2, r3
 80091ea:	79fb      	ldrb	r3, [r7, #7]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d0a0      	beq.n	8009132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091fa:	b480      	push	{r7}
 80091fc:	b095      	sub	sp, #84	@ 0x54
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800920a:	e853 3f00 	ldrex	r3, [r3]
 800920e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009212:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	461a      	mov	r2, r3
 800921e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009220:	643b      	str	r3, [r7, #64]	@ 0x40
 8009222:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009226:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800922e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e6      	bne.n	8009202 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3308      	adds	r3, #8
 800923a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	e853 3f00 	ldrex	r3, [r3]
 8009242:	61fb      	str	r3, [r7, #28]
   return(result);
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800924a:	f023 0301 	bic.w	r3, r3, #1
 800924e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	3308      	adds	r3, #8
 8009256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009258:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800925a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800925e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e3      	bne.n	8009234 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009270:	2b01      	cmp	r3, #1
 8009272:	d118      	bne.n	80092a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	e853 3f00 	ldrex	r3, [r3]
 8009280:	60bb      	str	r3, [r7, #8]
   return(result);
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	f023 0310 	bic.w	r3, r3, #16
 8009288:	647b      	str	r3, [r7, #68]	@ 0x44
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009292:	61bb      	str	r3, [r7, #24]
 8009294:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009296:	6979      	ldr	r1, [r7, #20]
 8009298:	69ba      	ldr	r2, [r7, #24]
 800929a:	e841 2300 	strex	r3, r2, [r1]
 800929e:	613b      	str	r3, [r7, #16]
   return(result);
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1e6      	bne.n	8009274 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2220      	movs	r2, #32
 80092aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80092ba:	bf00      	nop
 80092bc:	3754      	adds	r7, #84	@ 0x54
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092c6:	b480      	push	{r7}
 80092c8:	b085      	sub	sp, #20
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d101      	bne.n	80092dc <HAL_UARTEx_DisableFifoMode+0x16>
 80092d8:	2302      	movs	r3, #2
 80092da:	e027      	b.n	800932c <HAL_UARTEx_DisableFifoMode+0x66>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2224      	movs	r2, #36	@ 0x24
 80092e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f022 0201 	bic.w	r2, r2, #1
 8009302:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800930a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2220      	movs	r2, #32
 800931e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009348:	2b01      	cmp	r3, #1
 800934a:	d101      	bne.n	8009350 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800934c:	2302      	movs	r3, #2
 800934e:	e02d      	b.n	80093ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2224      	movs	r2, #36	@ 0x24
 800935c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f022 0201 	bic.w	r2, r2, #1
 8009376:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	430a      	orrs	r2, r1
 800938a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f84f 	bl	8009430 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2220      	movs	r2, #32
 800939e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d101      	bne.n	80093cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093c8:	2302      	movs	r3, #2
 80093ca:	e02d      	b.n	8009428 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2224      	movs	r2, #36	@ 0x24
 80093d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f022 0201 	bic.w	r2, r2, #1
 80093f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	430a      	orrs	r2, r1
 8009406:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f811 	bl	8009430 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2220      	movs	r2, #32
 800941a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800943c:	2b00      	cmp	r3, #0
 800943e:	d108      	bne.n	8009452 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009450:	e031      	b.n	80094b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009452:	2308      	movs	r3, #8
 8009454:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009456:	2308      	movs	r3, #8
 8009458:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	0e5b      	lsrs	r3, r3, #25
 8009462:	b2db      	uxtb	r3, r3
 8009464:	f003 0307 	and.w	r3, r3, #7
 8009468:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	0f5b      	lsrs	r3, r3, #29
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 0307 	and.w	r3, r3, #7
 8009478:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800947a:	7bbb      	ldrb	r3, [r7, #14]
 800947c:	7b3a      	ldrb	r2, [r7, #12]
 800947e:	4911      	ldr	r1, [pc, #68]	@ (80094c4 <UARTEx_SetNbDataToProcess+0x94>)
 8009480:	5c8a      	ldrb	r2, [r1, r2]
 8009482:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009486:	7b3a      	ldrb	r2, [r7, #12]
 8009488:	490f      	ldr	r1, [pc, #60]	@ (80094c8 <UARTEx_SetNbDataToProcess+0x98>)
 800948a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800948c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009490:	b29a      	uxth	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	7b7a      	ldrb	r2, [r7, #13]
 800949c:	4909      	ldr	r1, [pc, #36]	@ (80094c4 <UARTEx_SetNbDataToProcess+0x94>)
 800949e:	5c8a      	ldrb	r2, [r1, r2]
 80094a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094a4:	7b7a      	ldrb	r2, [r7, #13]
 80094a6:	4908      	ldr	r1, [pc, #32]	@ (80094c8 <UARTEx_SetNbDataToProcess+0x98>)
 80094a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80094b6:	bf00      	nop
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	0800e79c 	.word	0x0800e79c
 80094c8:	0800e7a4 	.word	0x0800e7a4

080094cc <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
    /* Initialize WiFi GPIO pins */
    GPIO_InitTypeDef GPIO_InitStruct;

    /* Configure GPIO pins : PA1 PA2 PA0 - we are using ST GPIO definitions for winc1500 */
    GPIO_InitStruct.Pin   = CONF_WINC_PIN_RESET;
 80094d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80094d6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80094d8:	2301      	movs	r3, #1
 80094da:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;    // GPIO_PULLDOWN;
 80094dc:	2300      	movs	r3, #0
 80094de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80094e0:	2300      	movs	r3, #0
 80094e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = 0;
 80094e4:	2300      	movs	r3, #0
 80094e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CONF_WINC_PORT_RESET, &GPIO_InitStruct);
 80094e8:	1d3b      	adds	r3, r7, #4
 80094ea:	4619      	mov	r1, r3
 80094ec:	481d      	ldr	r0, [pc, #116]	@ (8009564 <init_chip_pins+0x98>)
 80094ee:	f7f9 ff77 	bl	80033e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_CHIP_ENABLE;
 80094f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80094f6:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(CONF_WINC_PORT_CHIP_ENABLE, &GPIO_InitStruct);
 80094f8:	1d3b      	adds	r3, r7, #4
 80094fa:	4619      	mov	r1, r3
 80094fc:	481a      	ldr	r0, [pc, #104]	@ (8009568 <init_chip_pins+0x9c>)
 80094fe:	f7f9 ff6f 	bl	80033e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_WAKE;
 8009502:	2340      	movs	r3, #64	@ 0x40
 8009504:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CONF_WINC_PORT_WAKE, &GPIO_InitStruct);
 8009506:	1d3b      	adds	r3, r7, #4
 8009508:	4619      	mov	r1, r3
 800950a:	4818      	ldr	r0, [pc, #96]	@ (800956c <init_chip_pins+0xa0>)
 800950c:	f7f9 ff68 	bl	80033e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_POWER_ENABLE;
 8009510:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009514:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CONF_WINC_PORT_POWER_ENABLE, &GPIO_InitStruct);
 8009516:	1d3b      	adds	r3, r7, #4
 8009518:	4619      	mov	r1, r3
 800951a:	4815      	ldr	r0, [pc, #84]	@ (8009570 <init_chip_pins+0xa4>)
 800951c:	f7f9 ff60 	bl	80033e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE;
 8009520:	2340      	movs	r3, #64	@ 0x40
 8009522:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE, &GPIO_InitStruct);
 8009524:	1d3b      	adds	r3, r7, #4
 8009526:	4619      	mov	r1, r3
 8009528:	480f      	ldr	r0, [pc, #60]	@ (8009568 <init_chip_pins+0x9c>)
 800952a:	f7f9 ff59 	bl	80033e0 <HAL_GPIO_Init>

    /* Set INIT value */
    HAL_GPIO_WritePin(CONF_WINC_PORT_POWER_ENABLE,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_RESET);
 800952e:	2200      	movs	r2, #0
 8009530:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009534:	480e      	ldr	r0, [pc, #56]	@ (8009570 <init_chip_pins+0xa4>)
 8009536:	f7fa f92b 	bl	8003790 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_SET);
 800953a:	2201      	movs	r2, #1
 800953c:	2140      	movs	r1, #64	@ 0x40
 800953e:	480a      	ldr	r0, [pc, #40]	@ (8009568 <init_chip_pins+0x9c>)
 8009540:	f7fa f926 	bl	8003790 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_CHIP_ENABLE,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_RESET);
 8009544:	2200      	movs	r2, #0
 8009546:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800954a:	4807      	ldr	r0, [pc, #28]	@ (8009568 <init_chip_pins+0x9c>)
 800954c:	f7fa f920 	bl	8003790 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_RESET,CONF_WINC_PIN_RESET,GPIO_PIN_RESET);
 8009550:	2200      	movs	r2, #0
 8009552:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009556:	4803      	ldr	r0, [pc, #12]	@ (8009564 <init_chip_pins+0x98>)
 8009558:	f7fa f91a 	bl	8003790 <HAL_GPIO_WritePin>

}
 800955c:	bf00      	nop
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	42020c00 	.word	0x42020c00
 8009568:	42020400 	.word	0x42020400
 800956c:	42020800 	.word	0x42020800
 8009570:	42020000 	.word	0x42020000

08009574 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	af00      	add	r7, sp, #0
	/* Initialize chip IOs. */
	init_chip_pins();
 8009578:	f7ff ffa8 	bl	80094cc <init_chip_pins>

	/* Perform chip reset. */
	nm_bsp_reset();
 800957c:	f000 f804 	bl	8009588 <nm_bsp_reset>

	return M2M_SUCCESS;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	bd80      	pop	{r7, pc}
	...

08009588 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	af00      	add	r7, sp, #0
    /* Set Power sequence of GPIO lines */
    /* -------------------------------- */

    /* Power enable (3.3V) - 3V3_DC2DC_EN output */
    HAL_GPIO_WritePin(CONF_WINC_PORT_POWER_ENABLE,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_SET);
 800958c:	2201      	movs	r2, #1
 800958e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009592:	4811      	ldr	r0, [pc, #68]	@ (80095d8 <nm_bsp_reset+0x50>)
 8009594:	f7fa f8fc 	bl	8003790 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8009598:	2064      	movs	r0, #100	@ 0x64
 800959a:	f7f8 f89b 	bl	80016d4 <HAL_Delay>

    /* Level Shifter Translate enable - LEVEL_TRNSLT_EN output */
    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_RESET);
 800959e:	2200      	movs	r2, #0
 80095a0:	2140      	movs	r1, #64	@ 0x40
 80095a2:	480e      	ldr	r0, [pc, #56]	@ (80095dc <nm_bsp_reset+0x54>)
 80095a4:	f7fa f8f4 	bl	8003790 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80095a8:	2064      	movs	r0, #100	@ 0x64
 80095aa:	f7f8 f893 	bl	80016d4 <HAL_Delay>

    /* Set CHIP enable */
	HAL_GPIO_WritePin(CONF_WINC_PORT_CHIP_ENABLE,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
 80095ae:	2201      	movs	r2, #1
 80095b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80095b4:	4809      	ldr	r0, [pc, #36]	@ (80095dc <nm_bsp_reset+0x54>)
 80095b6:	f7fa f8eb 	bl	8003790 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80095ba:	2064      	movs	r0, #100	@ 0x64
 80095bc:	f7f8 f88a 	bl	80016d4 <HAL_Delay>

    /* Set RSTN 1.8V */
    HAL_GPIO_WritePin(CONF_WINC_PORT_RESET,CONF_WINC_PIN_RESET,GPIO_PIN_SET);
 80095c0:	2201      	movs	r2, #1
 80095c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80095c6:	4806      	ldr	r0, [pc, #24]	@ (80095e0 <nm_bsp_reset+0x58>)
 80095c8:	f7fa f8e2 	bl	8003790 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80095cc:	2064      	movs	r0, #100	@ 0x64
 80095ce:	f7f8 f881 	bl	80016d4 <HAL_Delay>

}
 80095d2:	bf00      	nop
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	42020000 	.word	0x42020000
 80095dc:	42020400 	.word	0x42020400
 80095e0:	42020c00 	.word	0x42020c00

080095e4 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
    /* use FreeRTOS delay */
    HAL_Delay(u32TimeMsec);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7f8 f871 	bl	80016d4 <HAL_Delay>
}
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
	...

080095fc <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b088      	sub	sp, #32
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    /* EXTI2 init ISR function - called from nm_bsp_register_isr() */

     __GPIOC_CLK_ENABLE();
 8009604:	4b13      	ldr	r3, [pc, #76]	@ (8009654 <nm_bsp_register_isr+0x58>)
 8009606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800960a:	4a12      	ldr	r2, [pc, #72]	@ (8009654 <nm_bsp_register_isr+0x58>)
 800960c:	f043 0304 	orr.w	r3, r3, #4
 8009610:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009614:	4b0f      	ldr	r3, [pc, #60]	@ (8009654 <nm_bsp_register_isr+0x58>)
 8009616:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800961a:	f003 0304 	and.w	r3, r3, #4
 800961e:	60bb      	str	r3, [r7, #8]
 8009620:	68bb      	ldr	r3, [r7, #8]
	 //__GPIOA_CLK_ENABLE();

    /*Configure GPIO pin : PA2 */
    GPIO_InitStruct.Pin   = CONF_WINC_SPI_INT_PIN;
 8009622:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009626:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8009628:	4b0b      	ldr	r3, [pc, #44]	@ (8009658 <nm_bsp_register_isr+0x5c>)
 800962a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800962c:	2300      	movs	r3, #0
 800962e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CONF_WINC_SPI_INT_PORT, &GPIO_InitStruct);
 8009630:	f107 030c 	add.w	r3, r7, #12
 8009634:	4619      	mov	r1, r3
 8009636:	4809      	ldr	r0, [pc, #36]	@ (800965c <nm_bsp_register_isr+0x60>)
 8009638:	f7f9 fed2 	bl	80033e0 <HAL_GPIO_Init>

    /* EXTI 2 (PA2) interrupt init*/
    HAL_NVIC_SetPriority(CONF_WINC_EXTI_IRQN, 0x00, 0);
 800963c:	2200      	movs	r2, #0
 800963e:	2100      	movs	r1, #0
 8009640:	2017      	movs	r0, #23
 8009642:	f7f9 fd27 	bl	8003094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CONF_WINC_EXTI_IRQN);
 8009646:	2017      	movs	r0, #23
 8009648:	f7f9 fd3e 	bl	80030c8 <HAL_NVIC_EnableIRQ>
	/* Enable and set EXTI line 15_10 Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
#endif

}
 800964c:	bf00      	nop
 800964e:	3720      	adds	r7, #32
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	46020c00 	.word	0x46020c00
 8009658:	10210000 	.word	0x10210000
 800965c:	42020c00 	.word	0x42020c00

08009660 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	4603      	mov	r3, r0
 8009668:	71fb      	strb	r3, [r7, #7]
    if (1 == u8Enable)
 800966a:	79fb      	ldrb	r3, [r7, #7]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d108      	bne.n	8009682 <nm_bsp_interrupt_ctrl+0x22>
    {
        HAL_NVIC_SetPriority((IRQn_Type)(CONF_WINC_EXTI_IRQN), 0x01, 0);
 8009670:	2200      	movs	r2, #0
 8009672:	2101      	movs	r1, #1
 8009674:	2017      	movs	r0, #23
 8009676:	f7f9 fd0d 	bl	8003094 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 800967a:	2017      	movs	r0, #23
 800967c:	f7f9 fd24 	bl	80030c8 <HAL_NVIC_EnableIRQ>
    }
    else
    {
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
    }
}
 8009680:	e002      	b.n	8009688 <nm_bsp_interrupt_ctrl+0x28>
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 8009682:	2017      	movs	r0, #23
 8009684:	f7f9 fd2e 	bl	80030e4 <HAL_NVIC_DisableIRQ>
}
 8009688:	bf00      	nop
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <spi_select_slave>:
*	@fn		spi_select_slave
*	@brief	Select slave chip select: true - select, false - deselect
*	@return	None
*/
static void spi_select_slave(const uint8_t select)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	4603      	mov	r3, r0
 8009698:	71fb      	strb	r3, [r7, #7]
    if (select)
 800969a:	79fb      	ldrb	r3, [r7, #7]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d006      	beq.n	80096ae <spi_select_slave+0x1e>
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_RESET);
 80096a0:	2200      	movs	r2, #0
 80096a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80096a6:	4807      	ldr	r0, [pc, #28]	@ (80096c4 <spi_select_slave+0x34>)
 80096a8:	f7fa f872 	bl	8003790 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
    }
}
 80096ac:	e005      	b.n	80096ba <spi_select_slave+0x2a>
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 80096ae:	2201      	movs	r2, #1
 80096b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80096b4:	4803      	ldr	r0, [pc, #12]	@ (80096c4 <spi_select_slave+0x34>)
 80096b6:	f7fa f86b 	bl	8003790 <HAL_GPIO_WritePin>
}
 80096ba:	bf00      	nop
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	42020c00 	.word	0x42020c00

080096c8 <nm_spi_rw>:
	return M2M_SUCCESS;
}
#else

sint8 nm_spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b088      	sub	sp, #32
 80096cc:	af02      	add	r7, sp, #8
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	4613      	mov	r3, r2
 80096d4:	80fb      	strh	r3, [r7, #6]
   HAL_StatusTypeDef status;

    /* Start SPI transaction - polling method */
  	spi_select_slave(true);
 80096d6:	2001      	movs	r0, #1
 80096d8:	f7ff ffda 	bl	8009690 <spi_select_slave>


    /* Transmit/Recieve */
    if (pu8Mosi == NULL)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10b      	bne.n	80096fa <nm_spi_rw+0x32>
	{
		status = HAL_SPI_TransmitReceive(&hspiWifi,spiDummyBuf,pu8Miso,u16Sz,1000);
 80096e2:	88fb      	ldrh	r3, [r7, #6]
 80096e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80096e8:	9200      	str	r2, [sp, #0]
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	4921      	ldr	r1, [pc, #132]	@ (8009774 <nm_spi_rw+0xac>)
 80096ee:	4822      	ldr	r0, [pc, #136]	@ (8009778 <nm_spi_rw+0xb0>)
 80096f0:	f7fe fe48 	bl	8008384 <HAL_SPI_TransmitReceive>
 80096f4:	4603      	mov	r3, r0
 80096f6:	75fb      	strb	r3, [r7, #23]
 80096f8:	e01f      	b.n	800973a <nm_spi_rw+0x72>
    }
    else if(pu8Miso == NULL)
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d111      	bne.n	8009724 <nm_spi_rw+0x5c>
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,spiDummyBuf,u16Sz,1000);
 8009700:	88fb      	ldrh	r3, [r7, #6]
 8009702:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009706:	9200      	str	r2, [sp, #0]
 8009708:	4a1a      	ldr	r2, [pc, #104]	@ (8009774 <nm_spi_rw+0xac>)
 800970a:	68f9      	ldr	r1, [r7, #12]
 800970c:	481a      	ldr	r0, [pc, #104]	@ (8009778 <nm_spi_rw+0xb0>)
 800970e:	f7fe fe39 	bl	8008384 <HAL_SPI_TransmitReceive>
 8009712:	4603      	mov	r3, r0
 8009714:	75fb      	strb	r3, [r7, #23]
        memset(spiDummyBuf,0, u16Sz);
 8009716:	88fb      	ldrh	r3, [r7, #6]
 8009718:	461a      	mov	r2, r3
 800971a:	2100      	movs	r1, #0
 800971c:	4815      	ldr	r0, [pc, #84]	@ (8009774 <nm_spi_rw+0xac>)
 800971e:	f003 fb23 	bl	800cd68 <memset>
 8009722:	e00a      	b.n	800973a <nm_spi_rw+0x72>
    }
    else
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,pu8Miso,u16Sz,1000);
 8009724:	88fb      	ldrh	r3, [r7, #6]
 8009726:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800972a:	9200      	str	r2, [sp, #0]
 800972c:	68ba      	ldr	r2, [r7, #8]
 800972e:	68f9      	ldr	r1, [r7, #12]
 8009730:	4811      	ldr	r0, [pc, #68]	@ (8009778 <nm_spi_rw+0xb0>)
 8009732:	f7fe fe27 	bl	8008384 <HAL_SPI_TransmitReceive>
 8009736:	4603      	mov	r3, r0
 8009738:	75fb      	strb	r3, [r7, #23]
    }

    /* Handle Transmit/Recieve error */
    if (status != HAL_OK)
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d010      	beq.n	8009762 <nm_spi_rw+0x9a>
    {
        M2M_ERR("%s: HAL_SPI_TransmitReceive failed. error (%d)\n",__FUNCTION__,status);
 8009740:	22b2      	movs	r2, #178	@ 0xb2
 8009742:	490e      	ldr	r1, [pc, #56]	@ (800977c <nm_spi_rw+0xb4>)
 8009744:	480e      	ldr	r0, [pc, #56]	@ (8009780 <nm_spi_rw+0xb8>)
 8009746:	f003 f9bf 	bl	800cac8 <iprintf>
 800974a:	7dfb      	ldrb	r3, [r7, #23]
 800974c:	461a      	mov	r2, r3
 800974e:	490b      	ldr	r1, [pc, #44]	@ (800977c <nm_spi_rw+0xb4>)
 8009750:	480c      	ldr	r0, [pc, #48]	@ (8009784 <nm_spi_rw+0xbc>)
 8009752:	f003 f9b9 	bl	800cac8 <iprintf>
 8009756:	200d      	movs	r0, #13
 8009758:	f003 f9c8 	bl	800caec <putchar>
        return status;
 800975c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009760:	e003      	b.n	800976a <nm_spi_rw+0xa2>
    }

  	spi_select_slave(false);
 8009762:	2000      	movs	r0, #0
 8009764:	f7ff ff94 	bl	8009690 <spi_select_slave>

	return M2M_SUCCESS;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3718      	adds	r7, #24
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	200004d4 	.word	0x200004d4
 8009778:	20000444 	.word	0x20000444
 800977c:	0800e7ac 	.word	0x0800e7ac
 8009780:	0800d890 	.word	0x0800d890
 8009784:	0800d8a4 	.word	0x0800d8a4

08009788 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
 8009790:	2300      	movs	r3, #0
 8009792:	73fb      	strb	r3, [r7, #15]

	 /* WiFi SPI init function - called from nm_bus_init() */

	hspiWifi.Instance			   = SPI_WIFI;
 8009794:	4b20      	ldr	r3, [pc, #128]	@ (8009818 <nm_bus_init+0x90>)
 8009796:	4a21      	ldr	r2, [pc, #132]	@ (800981c <nm_bus_init+0x94>)
 8009798:	601a      	str	r2, [r3, #0]
	hspiWifi.Init.Mode			   = SPI_MODE_MASTER;
 800979a:	4b1f      	ldr	r3, [pc, #124]	@ (8009818 <nm_bus_init+0x90>)
 800979c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80097a0:	605a      	str	r2, [r3, #4]
	hspiWifi.Init.Direction 	   = SPI_DIRECTION_2LINES;
 80097a2:	4b1d      	ldr	r3, [pc, #116]	@ (8009818 <nm_bus_init+0x90>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	609a      	str	r2, [r3, #8]
	hspiWifi.Init.DataSize		   = SPI_DATASIZE_8BIT;
 80097a8:	4b1b      	ldr	r3, [pc, #108]	@ (8009818 <nm_bus_init+0x90>)
 80097aa:	2207      	movs	r2, #7
 80097ac:	60da      	str	r2, [r3, #12]
	hspiWifi.Init.CLKPolarity	   = SPI_POLARITY_LOW;
 80097ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009818 <nm_bus_init+0x90>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	611a      	str	r2, [r3, #16]
	hspiWifi.Init.CLKPhase		   = SPI_PHASE_1EDGE;
 80097b4:	4b18      	ldr	r3, [pc, #96]	@ (8009818 <nm_bus_init+0x90>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	615a      	str	r2, [r3, #20]
	hspiWifi.Init.NSS			   = SPI_NSS_SOFT;
 80097ba:	4b17      	ldr	r3, [pc, #92]	@ (8009818 <nm_bus_init+0x90>)
 80097bc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80097c0:	619a      	str	r2, [r3, #24]
	hspiWifi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80097c2:	4b15      	ldr	r3, [pc, #84]	@ (8009818 <nm_bus_init+0x90>)
 80097c4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80097c8:	61da      	str	r2, [r3, #28]
	hspiWifi.Init.FirstBit		   = SPI_FIRSTBIT_MSB;
 80097ca:	4b13      	ldr	r3, [pc, #76]	@ (8009818 <nm_bus_init+0x90>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	621a      	str	r2, [r3, #32]
	hspiWifi.Init.TIMode		   = SPI_TIMODE_DISABLE;
 80097d0:	4b11      	ldr	r3, [pc, #68]	@ (8009818 <nm_bus_init+0x90>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	625a      	str	r2, [r3, #36]	@ 0x24
	hspiWifi.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 80097d6:	4b10      	ldr	r3, [pc, #64]	@ (8009818 <nm_bus_init+0x90>)
 80097d8:	2200      	movs	r2, #0
 80097da:	629a      	str	r2, [r3, #40]	@ 0x28
	hspiWifi.Init.CRCPolynomial    = 10;
 80097dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009818 <nm_bus_init+0x90>)
 80097de:	220a      	movs	r2, #10
 80097e0:	62da      	str	r2, [r3, #44]	@ 0x2c
//	  hspiWifi.Init.CRCLength		 = SPI_CRC_LENGTH_DATASIZE;
//	  hspiWifi.Init.NSSPMode		 = SPI_NSS_PULSE_DISABLE;
	if (HAL_SPI_Init(&hspiWifi) != HAL_OK)
 80097e2:	480d      	ldr	r0, [pc, #52]	@ (8009818 <nm_bus_init+0x90>)
 80097e4:	f7fe fcb8 	bl	8008158 <HAL_SPI_Init>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00a      	beq.n	8009804 <nm_bus_init+0x7c>
	{
		M2M_ERR("SPI bus Initialization error\r\n");
 80097ee:	22f6      	movs	r2, #246	@ 0xf6
 80097f0:	490b      	ldr	r1, [pc, #44]	@ (8009820 <nm_bus_init+0x98>)
 80097f2:	480c      	ldr	r0, [pc, #48]	@ (8009824 <nm_bus_init+0x9c>)
 80097f4:	f003 f968 	bl	800cac8 <iprintf>
 80097f8:	480b      	ldr	r0, [pc, #44]	@ (8009828 <nm_bus_init+0xa0>)
 80097fa:	f003 f9d5 	bl	800cba8 <puts>
 80097fe:	200d      	movs	r0, #13
 8009800:	f003 f974 	bl	800caec <putchar>
	}

	HAL_SPI_MspInit(&hspiWifi);
 8009804:	4804      	ldr	r0, [pc, #16]	@ (8009818 <nm_bus_init+0x90>)
 8009806:	f7f7 fc37 	bl	8001078 <HAL_SPI_MspInit>
	return result;
 800980a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	20000444 	.word	0x20000444
 800981c:	40013000 	.word	0x40013000
 8009820:	0800e7b8 	.word	0x0800e7b8
 8009824:	0800d890 	.word	0x0800d890
 8009828:	0800d8d4 	.word	0x0800d8d4

0800982c <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
 800982c:	b480      	push	{r7}
 800982e:	af00      	add	r7, sp, #0
	return M2M_SUCCESS;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8 *pDst, uint8 *pSrc, uint32 sz)
{
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
    if(sz == 0) return;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d010      	beq.n	8009870 <m2m_memcpy+0x34>
    do
    {
        *pDst = *pSrc;
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	781a      	ldrb	r2, [r3, #0]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	701a      	strb	r2, [r3, #0]
        pDst++;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	3301      	adds	r3, #1
 800985a:	60fb      	str	r3, [r7, #12]
        pSrc++;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	3301      	adds	r3, #1
 8009860:	60bb      	str	r3, [r7, #8]
    } while(--sz);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	3b01      	subs	r3, #1
 8009866:	607b      	str	r3, [r7, #4]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1ef      	bne.n	800984e <m2m_memcpy+0x12>
 800986e:	e000      	b.n	8009872 <m2m_memcpy+0x36>
    if(sz == 0) return;
 8009870:	bf00      	nop
}
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <m2m_memset>:

    return cs;
}

void m2m_memset(uint8 *pBuf, uint8 val, uint32 sz)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	460b      	mov	r3, r1
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	72fb      	strb	r3, [r7, #11]
    if(sz == 0) return;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00c      	beq.n	80098aa <m2m_memset+0x2e>
    do
    {
        *pBuf = val;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	7afa      	ldrb	r2, [r7, #11]
 8009894:	701a      	strb	r2, [r3, #0]
        pBuf++;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	3301      	adds	r3, #1
 800989a:	60fb      	str	r3, [r7, #12]
    } while(--sz);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	3b01      	subs	r3, #1
 80098a0:	607b      	str	r3, [r7, #4]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1f3      	bne.n	8009890 <m2m_memset+0x14>
 80098a8:	e000      	b.n	80098ac <m2m_memset+0x30>
    if(sz == 0) return;
 80098aa:	bf00      	nop
}
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <m2m_strlen>:

uint16 m2m_strlen(uint8 *pcStr)
{
 80098b6:	b480      	push	{r7}
 80098b8:	b085      	sub	sp, #20
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
    uint16  u16StrLen = 0;
 80098be:	2300      	movs	r3, #0
 80098c0:	81fb      	strh	r3, [r7, #14]
    while(*pcStr)
 80098c2:	e005      	b.n	80098d0 <m2m_strlen+0x1a>
    {
        u16StrLen ++;
 80098c4:	89fb      	ldrh	r3, [r7, #14]
 80098c6:	3301      	adds	r3, #1
 80098c8:	81fb      	strh	r3, [r7, #14]
        pcStr++;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	3301      	adds	r3, #1
 80098ce:	607b      	str	r3, [r7, #4]
    while(*pcStr)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1f5      	bne.n	80098c4 <m2m_strlen+0xe>
    }
    return u16StrLen;
 80098d8:	89fb      	ldrh	r3, [r7, #14]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3714      	adds	r7, #20
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
	...

080098e8 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
 80098e8:	b480      	push	{r7}
 80098ea:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
 80098ec:	4b05      	ldr	r3, [pc, #20]	@ (8009904 <isr+0x1c>)
 80098ee:	78db      	ldrb	r3, [r3, #3]
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	3301      	adds	r3, #1
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	4b03      	ldr	r3, [pc, #12]	@ (8009904 <isr+0x1c>)
 80098f8:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
 80098fa:	bf00      	nop
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	20000600 	.word	0x20000600

08009908 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800990e:	2300      	movs	r3, #0
 8009910:	71fb      	strb	r3, [r7, #7]

	gstrHifCxt.u8HifRXDone = 0;
 8009912:	4b14      	ldr	r3, [pc, #80]	@ (8009964 <hif_set_rx_done+0x5c>)
 8009914:	2200      	movs	r2, #0
 8009916:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
 8009918:	2001      	movs	r0, #1
 800991a:	f7ff fea1 	bl	8009660 <nm_bsp_interrupt_ctrl>
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
 800991e:	463b      	mov	r3, r7
 8009920:	4619      	mov	r1, r3
 8009922:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009926:	f001 fca7 	bl	800b278 <nm_read_reg_with_ret>
 800992a:	4603      	mov	r3, r0
 800992c:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800992e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10f      	bne.n	8009956 <hif_set_rx_done+0x4e>
	/* Set RX Done */
	reg |= NBIT1;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	f043 0302 	orr.w	r3, r3, #2
 800993c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	4619      	mov	r1, r3
 8009942:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009946:	f001 fca5 	bl	800b294 <nm_write_reg>
 800994a:	4603      	mov	r3, r0
 800994c:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800994e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009952:	2b00      	cmp	r3, #0
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
 8009954:	e000      	b.n	8009958 <hif_set_rx_done+0x50>
	if(ret != M2M_SUCCESS)goto ERR1;
 8009956:	bf00      	nop
	return ret;
 8009958:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	20000600 	.word	0x20000600

08009968 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	4603      	mov	r3, r0
 8009970:	603a      	str	r2, [r7, #0]
 8009972:	71fb      	strb	r3, [r7, #7]
 8009974:	460b      	mov	r3, r1
 8009976:	80bb      	strh	r3, [r7, #4]


}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800998a:	2300      	movs	r3, #0
 800998c:	71fb      	strb	r3, [r7, #7]
	if(gstrHifCxt.u8HifRXDone)
 800998e:	4b14      	ldr	r3, [pc, #80]	@ (80099e0 <hif_chip_wake+0x5c>)
 8009990:	789b      	ldrb	r3, [r3, #2]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	2b00      	cmp	r3, #0
 8009996:	d002      	beq.n	800999e <hif_chip_wake+0x1a>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
 8009998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800999c:	e01c      	b.n	80099d8 <hif_chip_wake+0x54>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
 800999e:	4b10      	ldr	r3, [pc, #64]	@ (80099e0 <hif_chip_wake+0x5c>)
 80099a0:	785b      	ldrb	r3, [r3, #1]
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10c      	bne.n	80099c2 <hif_chip_wake+0x3e>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 80099a8:	4b0d      	ldr	r3, [pc, #52]	@ (80099e0 <hif_chip_wake+0x5c>)
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d007      	beq.n	80099c2 <hif_chip_wake+0x3e>
		{
			ret = chip_wake();
 80099b2:	f001 fa57 	bl	800ae64 <chip_wake>
 80099b6:	4603      	mov	r3, r0
 80099b8:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 80099ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d107      	bne.n	80099d2 <hif_chip_wake+0x4e>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
 80099c2:	4b07      	ldr	r3, [pc, #28]	@ (80099e0 <hif_chip_wake+0x5c>)
 80099c4:	785b      	ldrb	r3, [r3, #1]
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	3301      	adds	r3, #1
 80099ca:	b2da      	uxtb	r2, r3
 80099cc:	4b04      	ldr	r3, [pc, #16]	@ (80099e0 <hif_chip_wake+0x5c>)
 80099ce:	705a      	strb	r2, [r3, #1]
 80099d0:	e000      	b.n	80099d4 <hif_chip_wake+0x50>
			if(ret != M2M_SUCCESS)goto ERR1;
 80099d2:	bf00      	nop
ERR1:
	return ret;
 80099d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	20000600 	.word	0x20000600

080099e4 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
 80099e4:	b480      	push	{r7}
 80099e6:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
 80099e8:	4b08      	ldr	r3, [pc, #32]	@ (8009a0c <hif_chip_sleep_sc+0x28>)
 80099ea:	785b      	ldrb	r3, [r3, #1]
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d006      	beq.n	8009a00 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
 80099f2:	4b06      	ldr	r3, [pc, #24]	@ (8009a0c <hif_chip_sleep_sc+0x28>)
 80099f4:	785b      	ldrb	r3, [r3, #1]
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	3b01      	subs	r3, #1
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	4b03      	ldr	r3, [pc, #12]	@ (8009a0c <hif_chip_sleep_sc+0x28>)
 80099fe:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	20000600 	.word	0x20000600

08009a10 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 8009a16:	2300      	movs	r3, #0
 8009a18:	71fb      	strb	r3, [r7, #7]

	if(gstrHifCxt.u8ChipSleep >= 1)
 8009a1a:	4b12      	ldr	r3, [pc, #72]	@ (8009a64 <hif_chip_sleep+0x54>)
 8009a1c:	785b      	ldrb	r3, [r3, #1]
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d006      	beq.n	8009a32 <hif_chip_sleep+0x22>
	{
		gstrHifCxt.u8ChipSleep--;
 8009a24:	4b0f      	ldr	r3, [pc, #60]	@ (8009a64 <hif_chip_sleep+0x54>)
 8009a26:	785b      	ldrb	r3, [r3, #1]
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a64 <hif_chip_sleep+0x54>)
 8009a30:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
 8009a32:	4b0c      	ldr	r3, [pc, #48]	@ (8009a64 <hif_chip_sleep+0x54>)
 8009a34:	785b      	ldrb	r3, [r3, #1]
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10c      	bne.n	8009a56 <hif_chip_sleep+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 8009a3c:	4b09      	ldr	r3, [pc, #36]	@ (8009a64 <hif_chip_sleep+0x54>)
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d007      	beq.n	8009a56 <hif_chip_sleep+0x46>
		{
			ret = chip_sleep();
 8009a46:	f001 f9a9 	bl	800ad9c <chip_sleep>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 8009a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	e000      	b.n	8009a58 <hif_chip_sleep+0x48>
		}
		else
		{
		}
	}
ERR1:
 8009a56:	bf00      	nop
	return ret;
 8009a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	20000600 	.word	0x20000600

08009a68 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
 8009a70:	222c      	movs	r2, #44	@ 0x2c
 8009a72:	2100      	movs	r1, #0
 8009a74:	4807      	ldr	r0, [pc, #28]	@ (8009a94 <hif_init+0x2c>)
 8009a76:	f7ff ff01 	bl	800987c <m2m_memset>
	nm_bsp_register_isr(isr);
 8009a7a:	4807      	ldr	r0, [pc, #28]	@ (8009a98 <hif_init+0x30>)
 8009a7c:	f7ff fdbe 	bl	80095fc <nm_bsp_register_isr>
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
 8009a80:	4906      	ldr	r1, [pc, #24]	@ (8009a9c <hif_init+0x34>)
 8009a82:	2003      	movs	r0, #3
 8009a84:	f000 fc46 	bl	800a314 <hif_register_cb>
	return M2M_SUCCESS;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20000600 	.word	0x20000600
 8009a98:	080098e9 	.word	0x080098e9
 8009a9c:	08009969 	.word	0x08009969

08009aa0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	603a      	str	r2, [r7, #0]
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4603      	mov	r3, r0
 8009aac:	71fb      	strb	r3, [r7, #7]
 8009aae:	460b      	mov	r3, r1
 8009ab0:	71bb      	strb	r3, [r7, #6]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	80bb      	strh	r3, [r7, #4]
	sint8		ret = M2M_ERR_SEND;
 8009ab6:	23ff      	movs	r3, #255	@ 0xff
 8009ab8:	77fb      	strb	r3, [r7, #31]
	tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
 8009aba:	79bb      	ldrb	r3, [r7, #6]
 8009abc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	767b      	strb	r3, [r7, #25]
	strHif.u8Gid		= u8Gid;
 8009ac4:	79fb      	ldrb	r3, [r7, #7]
 8009ac6:	763b      	strb	r3, [r7, #24]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 8009ac8:	2308      	movs	r3, #8
 8009aca:	837b      	strh	r3, [r7, #26]
	if(pu8DataBuf != NULL)
 8009acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d008      	beq.n	8009ae4 <hif_send+0x44>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
 8009ad2:	8b7a      	ldrh	r2, [r7, #26]
 8009ad4:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8009ad6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009ad8:	440b      	add	r3, r1
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	4413      	add	r3, r2
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	837b      	strh	r3, [r7, #26]
 8009ae2:	e004      	b.n	8009aee <hif_send+0x4e>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
 8009ae4:	8b7a      	ldrh	r2, [r7, #26]
 8009ae6:	88bb      	ldrh	r3, [r7, #4]
 8009ae8:	4413      	add	r3, r2
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	837b      	strh	r3, [r7, #26]
	}
    if (strHif.u16Length <= M2M_HIF_MAX_PACKET_SIZE)
 8009aee:	8b7b      	ldrh	r3, [r7, #26]
 8009af0:	f240 623c 	movw	r2, #1596	@ 0x63c
 8009af4:	4293      	cmp	r3, r2
 8009af6:	f200 80f3 	bhi.w	8009ce0 <hif_send+0x240>
    {
	ret = hif_chip_wake();
 8009afa:	f7ff ff43 	bl	8009984 <hif_chip_wake>
 8009afe:	4603      	mov	r3, r0
 8009b00:	77fb      	strb	r3, [r7, #31]
	if(ret == M2M_SUCCESS)
 8009b02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f040 80dd 	bne.w	8009cc6 <hif_send+0x226>
	{
		volatile uint32 reg, dma_addr = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
 8009b10:	2300      	movs	r3, #0
 8009b12:	81fb      	strh	r3, [r7, #14]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
 8009b14:	2300      	movs	r3, #0
 8009b16:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
 8009b18:	79fa      	ldrb	r2, [r7, #7]
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
 8009b20:	79bb      	ldrb	r3, [r7, #6]
 8009b22:	021a      	lsls	r2, r3, #8
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
 8009b2a:	8b7b      	ldrh	r3, [r7, #26]
 8009b2c:	041a      	lsls	r2, r3, #16
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	4619      	mov	r1, r3
 8009b38:	f241 008c 	movw	r0, #4236	@ 0x108c
 8009b3c:	f001 fbaa 	bl	800b294 <nm_write_reg>
 8009b40:	4603      	mov	r3, r0
 8009b42:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 8009b44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f040 80e3 	bne.w	8009d14 <hif_send+0x274>

		reg = 0UL;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	f043 0302 	orr.w	r3, r3, #2
 8009b58:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	f241 0078 	movw	r0, #4216	@ 0x1078
 8009b62:	f001 fb97 	bl	800b294 <nm_write_reg>
 8009b66:	4603      	mov	r3, r0
 8009b68:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 8009b6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f040 80d2 	bne.w	8009d18 <hif_send+0x278>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
 8009b74:	2300      	movs	r3, #0
 8009b76:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
 8009b78:	2300      	movs	r3, #0
 8009b7a:	81fb      	strh	r3, [r7, #14]
 8009b7c:	e03b      	b.n	8009bf6 <hif_send+0x156>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
 8009b7e:	f107 0314 	add.w	r3, r7, #20
 8009b82:	4619      	mov	r1, r3
 8009b84:	f241 0078 	movw	r0, #4216	@ 0x1078
 8009b88:	f001 fb76 	bl	800b278 <nm_read_reg_with_ret>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	77fb      	strb	r3, [r7, #31]
			if(ret != M2M_SUCCESS) break;
 8009b90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d134      	bne.n	8009c02 <hif_send+0x162>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
 8009b98:	89fb      	ldrh	r3, [r7, #14]
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009ba0:	d310      	bcc.n	8009bc4 <hif_send+0x124>
				if(cnt < 501) {
 8009ba2:	89fb      	ldrh	r3, [r7, #14]
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009baa:	d808      	bhi.n	8009bbe <hif_send+0x11e>
					M2M_INFO("Slowing down...\n");
 8009bac:	4862      	ldr	r0, [pc, #392]	@ (8009d38 <hif_send+0x298>)
 8009bae:	f002 ff8b 	bl	800cac8 <iprintf>
 8009bb2:	4862      	ldr	r0, [pc, #392]	@ (8009d3c <hif_send+0x29c>)
 8009bb4:	f002 fff8 	bl	800cba8 <puts>
 8009bb8:	200d      	movs	r0, #13
 8009bba:	f002 ff97 	bl	800caec <putchar>
				}
				nm_bsp_sleep(1);
 8009bbe:	2001      	movs	r0, #1
 8009bc0:	f7ff fd10 	bl	80095e4 <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	f003 0302 	and.w	r3, r3, #2
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10e      	bne.n	8009bec <hif_send+0x14c>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
 8009bce:	f107 0310 	add.w	r3, r7, #16
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	485a      	ldr	r0, [pc, #360]	@ (8009d40 <hif_send+0x2a0>)
 8009bd6:	f001 fb4f 	bl	800b278 <nm_read_reg_with_ret>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	77fb      	strb	r3, [r7, #31]
				if(ret != M2M_SUCCESS) {
 8009bde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00f      	beq.n	8009c06 <hif_send+0x166>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
 8009be6:	2300      	movs	r3, #0
 8009be8:	613b      	str	r3, [r7, #16]
					goto ERR1;
 8009bea:	e09c      	b.n	8009d26 <hif_send+0x286>
		for(cnt = 0; cnt < 1000; cnt ++)
 8009bec:	89fb      	ldrh	r3, [r7, #14]
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	81fb      	strh	r3, [r7, #14]
 8009bf6:	89fb      	ldrh	r3, [r7, #14]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009bfe:	d3be      	bcc.n	8009b7e <hif_send+0xde>
 8009c00:	e002      	b.n	8009c08 <hif_send+0x168>
			if(ret != M2M_SUCCESS) break;
 8009c02:	bf00      	nop
 8009c04:	e000      	b.n	8009c08 <hif_send+0x168>
				}
				/*in case of success break */
				break;
 8009c06:	bf00      	nop
			}
		}

		if (dma_addr != 0)
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d054      	beq.n	8009cb8 <hif_send+0x218>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 8009c12:	8b7b      	ldrh	r3, [r7, #26]
 8009c14:	837b      	strh	r3, [r7, #26]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	f107 0118 	add.w	r1, r7, #24
 8009c1c:	2208      	movs	r2, #8
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f001 fbb4 	bl	800b38c <nm_write_block>
 8009c24:	4603      	mov	r3, r0
 8009c26:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 8009c28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d175      	bne.n	8009d1c <hif_send+0x27c>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	3308      	adds	r3, #8
 8009c34:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00f      	beq.n	8009c5c <hif_send+0x1bc>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	88ba      	ldrh	r2, [r7, #4]
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f001 fba2 	bl	800b38c <nm_write_block>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 8009c4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d165      	bne.n	8009d20 <hif_send+0x280>
				u32CurrAddr += u16CtrlBufSize;
 8009c54:	88ba      	ldrh	r2, [r7, #4]
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	4413      	add	r3, r2
 8009c5a:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
 8009c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d016      	beq.n	8009c90 <hif_send+0x1f0>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
 8009c62:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009c64:	88bb      	ldrh	r3, [r7, #4]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	461a      	mov	r2, r3
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009c74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c76:	4618      	mov	r0, r3
 8009c78:	f001 fb88 	bl	800b38c <nm_write_block>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 8009c80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d14d      	bne.n	8009d24 <hif_send+0x284>
				u32CurrAddr += u16DataSize;
 8009c88:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f043 0302 	orr.w	r3, r3, #2
 8009c9c:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	f241 006c 	movw	r0, #4204	@ 0x106c
 8009ca6:	f001 faf5 	bl	800b294 <nm_write_reg>
 8009caa:	4603      	mov	r3, r0
 8009cac:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 8009cae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d027      	beq.n	8009d06 <hif_send+0x266>
 8009cb6:	e036      	b.n	8009d26 <hif_send+0x286>
		}
		else
		{
			ret = hif_chip_sleep();
 8009cb8:	f7ff feaa 	bl	8009a10 <hif_chip_sleep>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	77fb      	strb	r3, [r7, #31]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
 8009cc0:	23fd      	movs	r3, #253	@ 0xfd
 8009cc2:	77fb      	strb	r3, [r7, #31]
			goto ERR2;
 8009cc4:	e031      	b.n	8009d2a <hif_send+0x28a>
		}
	}
	else
	{
            M2M_ERR("(HIF)Failed to wakeup the chip\n");
 8009cc6:	f44f 72cb 	mov.w	r2, #406	@ 0x196
 8009cca:	491e      	ldr	r1, [pc, #120]	@ (8009d44 <hif_send+0x2a4>)
 8009ccc:	481e      	ldr	r0, [pc, #120]	@ (8009d48 <hif_send+0x2a8>)
 8009cce:	f002 fefb 	bl	800cac8 <iprintf>
 8009cd2:	481e      	ldr	r0, [pc, #120]	@ (8009d4c <hif_send+0x2ac>)
 8009cd4:	f002 ff68 	bl	800cba8 <puts>
 8009cd8:	200d      	movs	r0, #13
 8009cda:	f002 ff07 	bl	800caec <putchar>
            goto ERR2;
 8009cde:	e024      	b.n	8009d2a <hif_send+0x28a>
        }
	}
	else
	{
        M2M_ERR("HIF message length (%d) exceeds max length (%d)\n",strHif.u16Length, M2M_HIF_MAX_PACKET_SIZE);
 8009ce0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8009ce4:	4917      	ldr	r1, [pc, #92]	@ (8009d44 <hif_send+0x2a4>)
 8009ce6:	4818      	ldr	r0, [pc, #96]	@ (8009d48 <hif_send+0x2a8>)
 8009ce8:	f002 feee 	bl	800cac8 <iprintf>
 8009cec:	8b7b      	ldrh	r3, [r7, #26]
 8009cee:	f240 623c 	movw	r2, #1596	@ 0x63c
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	4816      	ldr	r0, [pc, #88]	@ (8009d50 <hif_send+0x2b0>)
 8009cf6:	f002 fee7 	bl	800cac8 <iprintf>
 8009cfa:	200d      	movs	r0, #13
 8009cfc:	f002 fef6 	bl	800caec <putchar>
        ret = M2M_ERR_SEND;
 8009d00:	23ff      	movs	r3, #255	@ 0xff
 8009d02:	77fb      	strb	r3, [r7, #31]
		goto ERR2;
 8009d04:	e011      	b.n	8009d2a <hif_send+0x28a>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
 8009d06:	f7ff fe83 	bl	8009a10 <hif_chip_sleep>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	77fb      	strb	r3, [r7, #31]
	return ret;
 8009d0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009d12:	e00c      	b.n	8009d2e <hif_send+0x28e>
		if(M2M_SUCCESS != ret) goto ERR1;
 8009d14:	bf00      	nop
 8009d16:	e006      	b.n	8009d26 <hif_send+0x286>
		if(M2M_SUCCESS != ret) goto ERR1;
 8009d18:	bf00      	nop
 8009d1a:	e004      	b.n	8009d26 <hif_send+0x286>
			if(M2M_SUCCESS != ret) goto ERR1;
 8009d1c:	bf00      	nop
 8009d1e:	e002      	b.n	8009d26 <hif_send+0x286>
				if(M2M_SUCCESS != ret) goto ERR1;
 8009d20:	bf00      	nop
 8009d22:	e000      	b.n	8009d26 <hif_send+0x286>
				if(M2M_SUCCESS != ret) goto ERR1;
 8009d24:	bf00      	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
 8009d26:	f7ff fe5d 	bl	80099e4 <hif_chip_sleep_sc>
ERR2:
	/*logical error*/
	return ret;
 8009d2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3720      	adds	r7, #32
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	0800d908 	.word	0x0800d908
 8009d3c:	0800d914 	.word	0x0800d914
 8009d40:	00150400 	.word	0x00150400
 8009d44:	0800e7c4 	.word	0x0800e7c4
 8009d48:	0800d924 	.word	0x0800d924
 8009d4c:	0800d938 	.word	0x0800d938
 8009d50:	0800d958 	.word	0x0800d958

08009d54 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	73fb      	strb	r3, [r7, #15]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 8009d5e:	f107 0308 	add.w	r3, r7, #8
 8009d62:	4619      	mov	r1, r3
 8009d64:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009d68:	f001 fa86 	bl	800b278 <nm_read_reg_with_ret>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	73fb      	strb	r3, [r7, #15]
	if(M2M_SUCCESS == ret)
 8009d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f040 81b2 	bne.w	800a0de <hif_isr+0x38a>
	{
		if(reg & 0x1)	/* New interrupt has been received */
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	f003 0301 	and.w	r3, r3, #1
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 819d 	beq.w	800a0c0 <hif_isr+0x36c>
		{
			uint16 size;

			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	f023 0301 	bic.w	r3, r3, #1
 8009d8c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	4619      	mov	r1, r3
 8009d92:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009d96:	f001 fa7d 	bl	800b294 <nm_write_reg>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	73fb      	strb	r3, [r7, #15]
			if(ret != M2M_SUCCESS)goto ERR1;
 8009d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f040 81a8 	bne.w	800a0f8 <hif_isr+0x3a4>
			gstrHifCxt.u8HifRXDone = 1;
 8009da8:	4ba1      	ldr	r3, [pc, #644]	@ (800a030 <hif_isr+0x2dc>)
 8009daa:	2201      	movs	r2, #1
 8009dac:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	089b      	lsrs	r3, r3, #2
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009db8:	81bb      	strh	r3, [r7, #12]
			if (size > 0) {
 8009dba:	89bb      	ldrh	r3, [r7, #12]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 8170 	beq.w	800a0a2 <hif_isr+0x34e>
				uint32 address = 0;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
 8009dc6:	463b      	mov	r3, r7
 8009dc8:	4619      	mov	r1, r3
 8009dca:	f241 0084 	movw	r0, #4228	@ 0x1084
 8009dce:	f001 fa53 	bl	800b278 <nm_read_reg_with_ret>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	73fb      	strb	r3, [r7, #15]
				if(M2M_SUCCESS != ret)
 8009dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00c      	beq.n	8009df8 <hif_isr+0xa4>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
 8009dde:	f240 12cd 	movw	r2, #461	@ 0x1cd
 8009de2:	4994      	ldr	r1, [pc, #592]	@ (800a034 <hif_isr+0x2e0>)
 8009de4:	4894      	ldr	r0, [pc, #592]	@ (800a038 <hif_isr+0x2e4>)
 8009de6:	f002 fe6f 	bl	800cac8 <iprintf>
 8009dea:	4894      	ldr	r0, [pc, #592]	@ (800a03c <hif_isr+0x2e8>)
 8009dec:	f002 fedc 	bl	800cba8 <puts>
 8009df0:	200d      	movs	r0, #13
 8009df2:	f002 fe7b 	bl	800caec <putchar>
					goto ERR1;
 8009df6:	e180      	b.n	800a0fa <hif_isr+0x3a6>
				}
				gstrHifCxt.u32RxAddr = address;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	4a8d      	ldr	r2, [pc, #564]	@ (800a030 <hif_isr+0x2dc>)
 8009dfc:	6093      	str	r3, [r2, #8]
				gstrHifCxt.u32RxSize = size;
 8009dfe:	89bb      	ldrh	r3, [r7, #12]
 8009e00:	4a8b      	ldr	r2, [pc, #556]	@ (800a030 <hif_isr+0x2dc>)
 8009e02:	60d3      	str	r3, [r2, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	1d39      	adds	r1, r7, #4
 8009e08:	2204      	movs	r2, #4
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f001 fa62 	bl	800b2d4 <nm_read_block>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
 8009e14:	88fb      	ldrh	r3, [r7, #6]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	80fb      	strh	r3, [r7, #6]
				if(M2M_SUCCESS != ret)
 8009e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00c      	beq.n	8009e3c <hif_isr+0xe8>
				{
					M2M_ERR("(hif) address bus fail\n");
 8009e22:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8009e26:	4983      	ldr	r1, [pc, #524]	@ (800a034 <hif_isr+0x2e0>)
 8009e28:	4883      	ldr	r0, [pc, #524]	@ (800a038 <hif_isr+0x2e4>)
 8009e2a:	f002 fe4d 	bl	800cac8 <iprintf>
 8009e2e:	4884      	ldr	r0, [pc, #528]	@ (800a040 <hif_isr+0x2ec>)
 8009e30:	f002 feba 	bl	800cba8 <puts>
 8009e34:	200d      	movs	r0, #13
 8009e36:	f002 fe59 	bl	800caec <putchar>
					goto ERR1;
 8009e3a:	e15e      	b.n	800a0fa <hif_isr+0x3a6>
				}
				if(strHif.u16Length != size)
 8009e3c:	88fb      	ldrh	r3, [r7, #6]
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	89ba      	ldrh	r2, [r7, #12]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d01f      	beq.n	8009e86 <hif_isr+0x132>
				{
					if((size - strHif.u16Length) > 4)
 8009e46:	89bb      	ldrh	r3, [r7, #12]
 8009e48:	88fa      	ldrh	r2, [r7, #6]
 8009e4a:	b292      	uxth	r2, r2
 8009e4c:	1a9b      	subs	r3, r3, r2
 8009e4e:	2b04      	cmp	r3, #4
 8009e50:	dd19      	ble.n	8009e86 <hif_isr+0x132>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
 8009e52:	f240 12dd 	movw	r2, #477	@ 0x1dd
 8009e56:	4977      	ldr	r1, [pc, #476]	@ (800a034 <hif_isr+0x2e0>)
 8009e58:	4877      	ldr	r0, [pc, #476]	@ (800a038 <hif_isr+0x2e4>)
 8009e5a:	f002 fe35 	bl	800cac8 <iprintf>
 8009e5e:	89b9      	ldrh	r1, [r7, #12]
 8009e60:	88fb      	ldrh	r3, [r7, #6]
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	461a      	mov	r2, r3
 8009e66:	793b      	ldrb	r3, [r7, #4]
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	797b      	ldrb	r3, [r7, #5]
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	4603      	mov	r3, r0
 8009e74:	4873      	ldr	r0, [pc, #460]	@ (800a044 <hif_isr+0x2f0>)
 8009e76:	f002 fe27 	bl	800cac8 <iprintf>
 8009e7a:	200d      	movs	r0, #13
 8009e7c:	f002 fe36 	bl	800caec <putchar>
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						ret = M2M_ERR_BUS_FAIL;
 8009e80:	23fa      	movs	r3, #250	@ 0xfa
 8009e82:	73fb      	strb	r3, [r7, #15]
						goto ERR1;
 8009e84:	e139      	b.n	800a0fa <hif_isr+0x3a6>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
 8009e86:	793b      	ldrb	r3, [r7, #4]
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d11c      	bne.n	8009ec8 <hif_isr+0x174>
				{
					if(gstrHifCxt.pfWifiCb)
 8009e8e:	4b68      	ldr	r3, [pc, #416]	@ (800a030 <hif_isr+0x2dc>)
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00b      	beq.n	8009eae <hif_isr+0x15a>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009e96:	4b66      	ldr	r3, [pc, #408]	@ (800a030 <hif_isr+0x2dc>)
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	797a      	ldrb	r2, [r7, #5]
 8009e9c:	b2d0      	uxtb	r0, r2
 8009e9e:	88fa      	ldrh	r2, [r7, #6]
 8009ea0:	b292      	uxth	r2, r2
 8009ea2:	3a08      	subs	r2, #8
 8009ea4:	b291      	uxth	r1, r2
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	3208      	adds	r2, #8
 8009eaa:	4798      	blx	r3
 8009eac:	e0da      	b.n	800a064 <hif_isr+0x310>
					else
						M2M_ERR("WIFI callback is not registered\n");
 8009eae:	f240 12e9 	movw	r2, #489	@ 0x1e9
 8009eb2:	4960      	ldr	r1, [pc, #384]	@ (800a034 <hif_isr+0x2e0>)
 8009eb4:	4860      	ldr	r0, [pc, #384]	@ (800a038 <hif_isr+0x2e4>)
 8009eb6:	f002 fe07 	bl	800cac8 <iprintf>
 8009eba:	4863      	ldr	r0, [pc, #396]	@ (800a048 <hif_isr+0x2f4>)
 8009ebc:	f002 fe74 	bl	800cba8 <puts>
 8009ec0:	200d      	movs	r0, #13
 8009ec2:	f002 fe13 	bl	800caec <putchar>
 8009ec6:	e0cd      	b.n	800a064 <hif_isr+0x310>
				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
 8009ec8:	793b      	ldrb	r3, [r7, #4]
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d11c      	bne.n	8009f0a <hif_isr+0x1b6>
				{
					if(gstrHifCxt.pfIpCb)
 8009ed0:	4b57      	ldr	r3, [pc, #348]	@ (800a030 <hif_isr+0x2dc>)
 8009ed2:	695b      	ldr	r3, [r3, #20]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00b      	beq.n	8009ef0 <hif_isr+0x19c>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009ed8:	4b55      	ldr	r3, [pc, #340]	@ (800a030 <hif_isr+0x2dc>)
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	797a      	ldrb	r2, [r7, #5]
 8009ede:	b2d0      	uxtb	r0, r2
 8009ee0:	88fa      	ldrh	r2, [r7, #6]
 8009ee2:	b292      	uxth	r2, r2
 8009ee4:	3a08      	subs	r2, #8
 8009ee6:	b291      	uxth	r1, r2
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	3208      	adds	r2, #8
 8009eec:	4798      	blx	r3
 8009eee:	e0b9      	b.n	800a064 <hif_isr+0x310>
					else
						M2M_ERR("Socket callback is not registered\n");
 8009ef0:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 8009ef4:	494f      	ldr	r1, [pc, #316]	@ (800a034 <hif_isr+0x2e0>)
 8009ef6:	4850      	ldr	r0, [pc, #320]	@ (800a038 <hif_isr+0x2e4>)
 8009ef8:	f002 fde6 	bl	800cac8 <iprintf>
 8009efc:	4853      	ldr	r0, [pc, #332]	@ (800a04c <hif_isr+0x2f8>)
 8009efe:	f002 fe53 	bl	800cba8 <puts>
 8009f02:	200d      	movs	r0, #13
 8009f04:	f002 fdf2 	bl	800caec <putchar>
 8009f08:	e0ac      	b.n	800a064 <hif_isr+0x310>
				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
 8009f0a:	793b      	ldrb	r3, [r7, #4]
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	2b04      	cmp	r3, #4
 8009f10:	d11c      	bne.n	8009f4c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfOtaCb)
 8009f12:	4b47      	ldr	r3, [pc, #284]	@ (800a030 <hif_isr+0x2dc>)
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00b      	beq.n	8009f32 <hif_isr+0x1de>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009f1a:	4b45      	ldr	r3, [pc, #276]	@ (800a030 <hif_isr+0x2dc>)
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	797a      	ldrb	r2, [r7, #5]
 8009f20:	b2d0      	uxtb	r0, r2
 8009f22:	88fa      	ldrh	r2, [r7, #6]
 8009f24:	b292      	uxth	r2, r2
 8009f26:	3a08      	subs	r2, #8
 8009f28:	b291      	uxth	r1, r2
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	3208      	adds	r2, #8
 8009f2e:	4798      	blx	r3
 8009f30:	e098      	b.n	800a064 <hif_isr+0x310>
					else
						M2M_ERR("Ota callback is not registered\n");
 8009f32:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8009f36:	493f      	ldr	r1, [pc, #252]	@ (800a034 <hif_isr+0x2e0>)
 8009f38:	483f      	ldr	r0, [pc, #252]	@ (800a038 <hif_isr+0x2e4>)
 8009f3a:	f002 fdc5 	bl	800cac8 <iprintf>
 8009f3e:	4844      	ldr	r0, [pc, #272]	@ (800a050 <hif_isr+0x2fc>)
 8009f40:	f002 fe32 	bl	800cba8 <puts>
 8009f44:	200d      	movs	r0, #13
 8009f46:	f002 fdd1 	bl	800caec <putchar>
 8009f4a:	e08b      	b.n	800a064 <hif_isr+0x310>
				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
 8009f4c:	793b      	ldrb	r3, [r7, #4]
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b06      	cmp	r3, #6
 8009f52:	d11c      	bne.n	8009f8e <hif_isr+0x23a>
				{
					if(gstrHifCxt.pfCryptoCb)
 8009f54:	4b36      	ldr	r3, [pc, #216]	@ (800a030 <hif_isr+0x2dc>)
 8009f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00b      	beq.n	8009f74 <hif_isr+0x220>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009f5c:	4b34      	ldr	r3, [pc, #208]	@ (800a030 <hif_isr+0x2dc>)
 8009f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f60:	797a      	ldrb	r2, [r7, #5]
 8009f62:	b2d0      	uxtb	r0, r2
 8009f64:	88fa      	ldrh	r2, [r7, #6]
 8009f66:	b292      	uxth	r2, r2
 8009f68:	3a08      	subs	r2, #8
 8009f6a:	b291      	uxth	r1, r2
 8009f6c:	683a      	ldr	r2, [r7, #0]
 8009f6e:	3208      	adds	r2, #8
 8009f70:	4798      	blx	r3
 8009f72:	e077      	b.n	800a064 <hif_isr+0x310>
					else
						M2M_ERR("Crypto callback is not registered\n");
 8009f74:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 8009f78:	492e      	ldr	r1, [pc, #184]	@ (800a034 <hif_isr+0x2e0>)
 8009f7a:	482f      	ldr	r0, [pc, #188]	@ (800a038 <hif_isr+0x2e4>)
 8009f7c:	f002 fda4 	bl	800cac8 <iprintf>
 8009f80:	4834      	ldr	r0, [pc, #208]	@ (800a054 <hif_isr+0x300>)
 8009f82:	f002 fe11 	bl	800cba8 <puts>
 8009f86:	200d      	movs	r0, #13
 8009f88:	f002 fdb0 	bl	800caec <putchar>
 8009f8c:	e06a      	b.n	800a064 <hif_isr+0x310>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
 8009f8e:	793b      	ldrb	r3, [r7, #4]
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	2b07      	cmp	r3, #7
 8009f94:	d11c      	bne.n	8009fd0 <hif_isr+0x27c>
				{
					if(gstrHifCxt.pfSigmaCb)
 8009f96:	4b26      	ldr	r3, [pc, #152]	@ (800a030 <hif_isr+0x2dc>)
 8009f98:	69db      	ldr	r3, [r3, #28]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00b      	beq.n	8009fb6 <hif_isr+0x262>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009f9e:	4b24      	ldr	r3, [pc, #144]	@ (800a030 <hif_isr+0x2dc>)
 8009fa0:	69db      	ldr	r3, [r3, #28]
 8009fa2:	797a      	ldrb	r2, [r7, #5]
 8009fa4:	b2d0      	uxtb	r0, r2
 8009fa6:	88fa      	ldrh	r2, [r7, #6]
 8009fa8:	b292      	uxth	r2, r2
 8009faa:	3a08      	subs	r2, #8
 8009fac:	b291      	uxth	r1, r2
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	3208      	adds	r2, #8
 8009fb2:	4798      	blx	r3
 8009fb4:	e056      	b.n	800a064 <hif_isr+0x310>
					else
						M2M_ERR("Sigma callback is not registered\n");
 8009fb6:	f240 2205 	movw	r2, #517	@ 0x205
 8009fba:	491e      	ldr	r1, [pc, #120]	@ (800a034 <hif_isr+0x2e0>)
 8009fbc:	481e      	ldr	r0, [pc, #120]	@ (800a038 <hif_isr+0x2e4>)
 8009fbe:	f002 fd83 	bl	800cac8 <iprintf>
 8009fc2:	4825      	ldr	r0, [pc, #148]	@ (800a058 <hif_isr+0x304>)
 8009fc4:	f002 fdf0 	bl	800cba8 <puts>
 8009fc8:	200d      	movs	r0, #13
 8009fca:	f002 fd8f 	bl	800caec <putchar>
 8009fce:	e049      	b.n	800a064 <hif_isr+0x310>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
 8009fd0:	793b      	ldrb	r3, [r7, #4]
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	2b05      	cmp	r3, #5
 8009fd6:	d11c      	bne.n	800a012 <hif_isr+0x2be>
				{
				    if(gstrHifCxt.pfSslCb)
 8009fd8:	4b15      	ldr	r3, [pc, #84]	@ (800a030 <hif_isr+0x2dc>)
 8009fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00b      	beq.n	8009ff8 <hif_isr+0x2a4>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009fe0:	4b13      	ldr	r3, [pc, #76]	@ (800a030 <hif_isr+0x2dc>)
 8009fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe4:	797a      	ldrb	r2, [r7, #5]
 8009fe6:	b2d0      	uxtb	r0, r2
 8009fe8:	88fa      	ldrh	r2, [r7, #6]
 8009fea:	b292      	uxth	r2, r2
 8009fec:	3a08      	subs	r2, #8
 8009fee:	b291      	uxth	r1, r2
 8009ff0:	683a      	ldr	r2, [r7, #0]
 8009ff2:	3208      	adds	r2, #8
 8009ff4:	4798      	blx	r3
 8009ff6:	e035      	b.n	800a064 <hif_isr+0x310>
                    else
                        M2M_ERR("SSL callback is not registered\n");
 8009ff8:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8009ffc:	490d      	ldr	r1, [pc, #52]	@ (800a034 <hif_isr+0x2e0>)
 8009ffe:	480e      	ldr	r0, [pc, #56]	@ (800a038 <hif_isr+0x2e4>)
 800a000:	f002 fd62 	bl	800cac8 <iprintf>
 800a004:	4815      	ldr	r0, [pc, #84]	@ (800a05c <hif_isr+0x308>)
 800a006:	f002 fdcf 	bl	800cba8 <puts>
 800a00a:	200d      	movs	r0, #13
 800a00c:	f002 fd6e 	bl	800caec <putchar>
 800a010:	e028      	b.n	800a064 <hif_isr+0x310>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
 800a012:	f44f 7204 	mov.w	r2, #528	@ 0x210
 800a016:	4907      	ldr	r1, [pc, #28]	@ (800a034 <hif_isr+0x2e0>)
 800a018:	4807      	ldr	r0, [pc, #28]	@ (800a038 <hif_isr+0x2e4>)
 800a01a:	f002 fd55 	bl	800cac8 <iprintf>
 800a01e:	4810      	ldr	r0, [pc, #64]	@ (800a060 <hif_isr+0x30c>)
 800a020:	f002 fdc2 	bl	800cba8 <puts>
 800a024:	200d      	movs	r0, #13
 800a026:	f002 fd61 	bl	800caec <putchar>
					ret = M2M_ERR_BUS_FAIL;
 800a02a:	23fa      	movs	r3, #250	@ 0xfa
 800a02c:	73fb      	strb	r3, [r7, #15]
					goto ERR1;
 800a02e:	e064      	b.n	800a0fa <hif_isr+0x3a6>
 800a030:	20000600 	.word	0x20000600
 800a034:	0800e7d0 	.word	0x0800e7d0
 800a038:	0800d924 	.word	0x0800d924
 800a03c:	0800d98c 	.word	0x0800d98c
 800a040:	0800d9b0 	.word	0x0800d9b0
 800a044:	0800d9c8 	.word	0x0800d9c8
 800a048:	0800da08 	.word	0x0800da08
 800a04c:	0800da28 	.word	0x0800da28
 800a050:	0800da4c 	.word	0x0800da4c
 800a054:	0800da6c 	.word	0x0800da6c
 800a058:	0800da90 	.word	0x0800da90
 800a05c:	0800dab4 	.word	0x0800dab4
 800a060:	0800dad4 	.word	0x0800dad4
				}
				if(gstrHifCxt.u8HifRXDone)
 800a064:	4b28      	ldr	r3, [pc, #160]	@ (800a108 <hif_isr+0x3b4>)
 800a066:	789b      	ldrb	r3, [r3, #2]
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d045      	beq.n	800a0fa <hif_isr+0x3a6>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
 800a06e:	f240 2216 	movw	r2, #534	@ 0x216
 800a072:	4926      	ldr	r1, [pc, #152]	@ (800a10c <hif_isr+0x3b8>)
 800a074:	4826      	ldr	r0, [pc, #152]	@ (800a110 <hif_isr+0x3bc>)
 800a076:	f002 fd27 	bl	800cac8 <iprintf>
 800a07a:	793b      	ldrb	r3, [r7, #4]
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	4619      	mov	r1, r3
 800a080:	797b      	ldrb	r3, [r7, #5]
 800a082:	b2db      	uxtb	r3, r3
 800a084:	461a      	mov	r2, r3
 800a086:	4823      	ldr	r0, [pc, #140]	@ (800a114 <hif_isr+0x3c0>)
 800a088:	f002 fd1e 	bl	800cac8 <iprintf>
 800a08c:	200d      	movs	r0, #13
 800a08e:	f002 fd2d 	bl	800caec <putchar>
					ret = hif_set_rx_done();
 800a092:	f7ff fc39 	bl	8009908 <hif_set_rx_done>
 800a096:	4603      	mov	r3, r0
 800a098:	73fb      	strb	r3, [r7, #15]
					if(ret != M2M_SUCCESS) goto ERR1;
 800a09a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	e02b      	b.n	800a0fa <hif_isr+0x3a6>
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
 800a0a2:	f240 221d 	movw	r2, #541	@ 0x21d
 800a0a6:	4919      	ldr	r1, [pc, #100]	@ (800a10c <hif_isr+0x3b8>)
 800a0a8:	4819      	ldr	r0, [pc, #100]	@ (800a110 <hif_isr+0x3bc>)
 800a0aa:	f002 fd0d 	bl	800cac8 <iprintf>
 800a0ae:	481a      	ldr	r0, [pc, #104]	@ (800a118 <hif_isr+0x3c4>)
 800a0b0:	f002 fd7a 	bl	800cba8 <puts>
 800a0b4:	200d      	movs	r0, #13
 800a0b6:	f002 fd19 	bl	800caec <putchar>
				ret = M2M_ERR_RCV;
 800a0ba:	23fe      	movs	r3, #254	@ 0xfe
 800a0bc:	73fb      	strb	r3, [r7, #15]
				goto ERR1;
 800a0be:	e01c      	b.n	800a0fa <hif_isr+0x3a6>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
 800a0c0:	f240 2225 	movw	r2, #549	@ 0x225
 800a0c4:	4911      	ldr	r1, [pc, #68]	@ (800a10c <hif_isr+0x3b8>)
 800a0c6:	4812      	ldr	r0, [pc, #72]	@ (800a110 <hif_isr+0x3bc>)
 800a0c8:	f002 fcfe 	bl	800cac8 <iprintf>
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4812      	ldr	r0, [pc, #72]	@ (800a11c <hif_isr+0x3c8>)
 800a0d2:	f002 fcf9 	bl	800cac8 <iprintf>
 800a0d6:	200d      	movs	r0, #13
 800a0d8:	f002 fd08 	bl	800caec <putchar>
			goto ERR1;
 800a0dc:	e00d      	b.n	800a0fa <hif_isr+0x3a6>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Failed to Read interrupt reg\n");
 800a0de:	f240 222d 	movw	r2, #557	@ 0x22d
 800a0e2:	490a      	ldr	r1, [pc, #40]	@ (800a10c <hif_isr+0x3b8>)
 800a0e4:	480a      	ldr	r0, [pc, #40]	@ (800a110 <hif_isr+0x3bc>)
 800a0e6:	f002 fcef 	bl	800cac8 <iprintf>
 800a0ea:	480d      	ldr	r0, [pc, #52]	@ (800a120 <hif_isr+0x3cc>)
 800a0ec:	f002 fd5c 	bl	800cba8 <puts>
 800a0f0:	200d      	movs	r0, #13
 800a0f2:	f002 fcfb 	bl	800caec <putchar>
		goto ERR1;
 800a0f6:	e000      	b.n	800a0fa <hif_isr+0x3a6>
			if(ret != M2M_SUCCESS)goto ERR1;
 800a0f8:	bf00      	nop
	}

ERR1:
	return ret;
 800a0fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	20000600 	.word	0x20000600
 800a10c:	0800e7d0 	.word	0x0800e7d0
 800a110:	0800d924 	.word	0x0800d924
 800a114:	0800daec 	.word	0x0800daec
 800a118:	0800db18 	.word	0x0800db18
 800a11c:	0800db2c 	.word	0x0800db2c
 800a120:	0800db48 	.word	0x0800db48

0800a124 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
 800a12a:	2300      	movs	r3, #0
 800a12c:	71fb      	strb	r3, [r7, #7]
	
	gstrHifCxt.u8Yield = 0;
 800a12e:	4b29      	ldr	r3, [pc, #164]	@ (800a1d4 <hif_handle_isr+0xb0>)
 800a130:	2200      	movs	r2, #0
 800a132:	711a      	strb	r2, [r3, #4]
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
 800a134:	e03e      	b.n	800a1b4 <hif_handle_isr+0x90>
         * during which the ISR could fire again.
         * If LEVEL interrupt is used instead of EDGE then the atomicity isn't needed since the interrupt
         * is turned off in the ISR and back on again only after the interrupt has been serviced in hif_isr(). */

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(0);
 800a136:	2000      	movs	r0, #0
 800a138:	f7ff fa92 	bl	8009660 <nm_bsp_interrupt_ctrl>
#endif

		gstrHifCxt.u8Interrupt--;
 800a13c:	4b25      	ldr	r3, [pc, #148]	@ (800a1d4 <hif_handle_isr+0xb0>)
 800a13e:	78db      	ldrb	r3, [r3, #3]
 800a140:	b2db      	uxtb	r3, r3
 800a142:	3b01      	subs	r3, #1
 800a144:	b2da      	uxtb	r2, r3
 800a146:	4b23      	ldr	r3, [pc, #140]	@ (800a1d4 <hif_handle_isr+0xb0>)
 800a148:	70da      	strb	r2, [r3, #3]

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(1);
 800a14a:	2001      	movs	r0, #1
 800a14c:	f7ff fa88 	bl	8009660 <nm_bsp_interrupt_ctrl>
#endif

		uint8 retries = 5;
 800a150:	2305      	movs	r3, #5
 800a152:	71bb      	strb	r3, [r7, #6]
		while(1)
		{
			ret = hif_isr();
 800a154:	f7ff fdfe 	bl	8009d54 <hif_isr>
 800a158:	4603      	mov	r3, r0
 800a15a:	71fb      	strb	r3, [r7, #7]
			if(ret == M2M_SUCCESS) {
 800a15c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d026      	beq.n	800a1b2 <hif_handle_isr+0x8e>
				/*we will try forever until we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				retries--;
 800a164:	79bb      	ldrb	r3, [r7, #6]
 800a166:	3b01      	subs	r3, #1
 800a168:	71bb      	strb	r3, [r7, #6]
				if(!retries)
 800a16a:	79bb      	ldrb	r3, [r7, #6]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10f      	bne.n	800a190 <hif_handle_isr+0x6c>
				{
					M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
 800a170:	f240 2267 	movw	r2, #615	@ 0x267
 800a174:	4918      	ldr	r1, [pc, #96]	@ (800a1d8 <hif_handle_isr+0xb4>)
 800a176:	4819      	ldr	r0, [pc, #100]	@ (800a1dc <hif_handle_isr+0xb8>)
 800a178:	f002 fca6 	bl	800cac8 <iprintf>
 800a17c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a180:	4619      	mov	r1, r3
 800a182:	4817      	ldr	r0, [pc, #92]	@ (800a1e0 <hif_handle_isr+0xbc>)
 800a184:	f002 fca0 	bl	800cac8 <iprintf>
 800a188:	200d      	movs	r0, #13
 800a18a:	f002 fcaf 	bl	800caec <putchar>
					break;
 800a18e:	e011      	b.n	800a1b4 <hif_handle_isr+0x90>
				}
				else
					M2M_ERR("(HIF) Failed to handle interrupt %d try again... (%u)\n", ret, retries);
 800a190:	f240 226b 	movw	r2, #619	@ 0x26b
 800a194:	4910      	ldr	r1, [pc, #64]	@ (800a1d8 <hif_handle_isr+0xb4>)
 800a196:	4811      	ldr	r0, [pc, #68]	@ (800a1dc <hif_handle_isr+0xb8>)
 800a198:	f002 fc96 	bl	800cac8 <iprintf>
 800a19c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1a0:	79ba      	ldrb	r2, [r7, #6]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	480f      	ldr	r0, [pc, #60]	@ (800a1e4 <hif_handle_isr+0xc0>)
 800a1a6:	f002 fc8f 	bl	800cac8 <iprintf>
 800a1aa:	200d      	movs	r0, #13
 800a1ac:	f002 fc9e 	bl	800caec <putchar>
			ret = hif_isr();
 800a1b0:	e7d0      	b.n	800a154 <hif_handle_isr+0x30>
				break;
 800a1b2:	bf00      	nop
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
 800a1b4:	4b07      	ldr	r3, [pc, #28]	@ (800a1d4 <hif_handle_isr+0xb0>)
 800a1b6:	78db      	ldrb	r3, [r3, #3]
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d004      	beq.n	800a1c8 <hif_handle_isr+0xa4>
 800a1be:	4b05      	ldr	r3, [pc, #20]	@ (800a1d4 <hif_handle_isr+0xb0>)
 800a1c0:	791b      	ldrb	r3, [r3, #4]
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d0b6      	beq.n	800a136 <hif_handle_isr+0x12>
			}
		}
	}

	return ret;
 800a1c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3708      	adds	r7, #8
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	20000600 	.word	0x20000600
 800a1d8:	0800e7d8 	.word	0x0800e7d8
 800a1dc:	0800d924 	.word	0x0800d924
 800a1e0:	0800db6c 	.word	0x0800db6c
 800a1e4:	0800dbb4 	.word	0x0800dbb4

0800a1e8 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	80fb      	strh	r3, [r7, #6]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	717b      	strb	r3, [r7, #5]
	sint8 ret = M2M_SUCCESS;
 800a1fe:	2300      	movs	r3, #0
 800a200:	75fb      	strb	r3, [r7, #23]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d005      	beq.n	800a214 <hif_receive+0x2c>
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d002      	beq.n	800a214 <hif_receive+0x2c>
 800a20e:	88fb      	ldrh	r3, [r7, #6]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d116      	bne.n	800a242 <hif_receive+0x5a>
	{
		if(isDone)
 800a214:	797b      	ldrb	r3, [r7, #5]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d004      	beq.n	800a224 <hif_receive+0x3c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
 800a21a:	f7ff fb75 	bl	8009908 <hif_set_rx_done>
 800a21e:	4603      	mov	r3, r0
 800a220:	75fb      	strb	r3, [r7, #23]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
 800a222:	e065      	b.n	800a2f0 <hif_receive+0x108>
			ret = M2M_ERR_FAIL;
 800a224:	23f4      	movs	r3, #244	@ 0xf4
 800a226:	75fb      	strb	r3, [r7, #23]
			M2M_ERR(" hif_receive: Invalid argument\n");
 800a228:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a22c:	4933      	ldr	r1, [pc, #204]	@ (800a2fc <hif_receive+0x114>)
 800a22e:	4834      	ldr	r0, [pc, #208]	@ (800a300 <hif_receive+0x118>)
 800a230:	f002 fc4a 	bl	800cac8 <iprintf>
 800a234:	4833      	ldr	r0, [pc, #204]	@ (800a304 <hif_receive+0x11c>)
 800a236:	f002 fcb7 	bl	800cba8 <puts>
 800a23a:	200d      	movs	r0, #13
 800a23c:	f002 fc56 	bl	800caec <putchar>
		goto ERR1;
 800a240:	e056      	b.n	800a2f0 <hif_receive+0x108>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
 800a242:	88fa      	ldrh	r2, [r7, #6]
 800a244:	4b30      	ldr	r3, [pc, #192]	@ (800a308 <hif_receive+0x120>)
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d912      	bls.n	800a272 <hif_receive+0x8a>
	{
		ret = M2M_ERR_FAIL;
 800a24c:	23f4      	movs	r3, #244	@ 0xf4
 800a24e:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Size is larger than the received buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
 800a250:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800a254:	4929      	ldr	r1, [pc, #164]	@ (800a2fc <hif_receive+0x114>)
 800a256:	482a      	ldr	r0, [pc, #168]	@ (800a300 <hif_receive+0x118>)
 800a258:	f002 fc36 	bl	800cac8 <iprintf>
 800a25c:	88fb      	ldrh	r3, [r7, #6]
 800a25e:	4a2a      	ldr	r2, [pc, #168]	@ (800a308 <hif_receive+0x120>)
 800a260:	68d2      	ldr	r2, [r2, #12]
 800a262:	4619      	mov	r1, r3
 800a264:	4829      	ldr	r0, [pc, #164]	@ (800a30c <hif_receive+0x124>)
 800a266:	f002 fc2f 	bl	800cac8 <iprintf>
 800a26a:	200d      	movs	r0, #13
 800a26c:	f002 fc3e 	bl	800caec <putchar>
		goto ERR1;
 800a270:	e03e      	b.n	800a2f0 <hif_receive+0x108>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
 800a272:	4b25      	ldr	r3, [pc, #148]	@ (800a308 <hif_receive+0x120>)
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d309      	bcc.n	800a290 <hif_receive+0xa8>
 800a27c:	88fa      	ldrh	r2, [r7, #6]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	441a      	add	r2, r3
 800a282:	4b21      	ldr	r3, [pc, #132]	@ (800a308 <hif_receive+0x120>)
 800a284:	6899      	ldr	r1, [r3, #8]
 800a286:	4b20      	ldr	r3, [pc, #128]	@ (800a308 <hif_receive+0x120>)
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	440b      	add	r3, r1
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d90e      	bls.n	800a2ae <hif_receive+0xc6>
	{
		ret = M2M_ERR_FAIL;
 800a290:	23f4      	movs	r3, #244	@ 0xf4
 800a292:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Address beyond the received buffer address and length\n");
 800a294:	f240 229a 	movw	r2, #666	@ 0x29a
 800a298:	4918      	ldr	r1, [pc, #96]	@ (800a2fc <hif_receive+0x114>)
 800a29a:	4819      	ldr	r0, [pc, #100]	@ (800a300 <hif_receive+0x118>)
 800a29c:	f002 fc14 	bl	800cac8 <iprintf>
 800a2a0:	481b      	ldr	r0, [pc, #108]	@ (800a310 <hif_receive+0x128>)
 800a2a2:	f002 fc81 	bl	800cba8 <puts>
 800a2a6:	200d      	movs	r0, #13
 800a2a8:	f002 fc20 	bl	800caec <putchar>
		goto ERR1;
 800a2ac:	e020      	b.n	800a2f0 <hif_receive+0x108>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
 800a2ae:	88fb      	ldrh	r3, [r7, #6]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	68b9      	ldr	r1, [r7, #8]
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f001 f80d 	bl	800b2d4 <nm_read_block>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	75fb      	strb	r3, [r7, #23]
	if(ret != M2M_SUCCESS)goto ERR1;
 800a2be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d111      	bne.n	800a2ea <hif_receive+0x102>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
 800a2c6:	4b10      	ldr	r3, [pc, #64]	@ (800a308 <hif_receive+0x120>)
 800a2c8:	689a      	ldr	r2, [r3, #8]
 800a2ca:	4b0f      	ldr	r3, [pc, #60]	@ (800a308 <hif_receive+0x120>)
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	441a      	add	r2, r3
 800a2d0:	88f9      	ldrh	r1, [r7, #6]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	440b      	add	r3, r1
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d002      	beq.n	800a2e0 <hif_receive+0xf8>
 800a2da:	797b      	ldrb	r3, [r7, #5]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d006      	beq.n	800a2ee <hif_receive+0x106>
	{
		/* set RX done */
		ret = hif_set_rx_done();
 800a2e0:	f7ff fb12 	bl	8009908 <hif_set_rx_done>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	75fb      	strb	r3, [r7, #23]
 800a2e8:	e002      	b.n	800a2f0 <hif_receive+0x108>
	if(ret != M2M_SUCCESS)goto ERR1;
 800a2ea:	bf00      	nop
 800a2ec:	e000      	b.n	800a2f0 <hif_receive+0x108>
	}

ERR1:
 800a2ee:	bf00      	nop
	return ret;
 800a2f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	0800e7e8 	.word	0x0800e7e8
 800a300:	0800d924 	.word	0x0800d924
 800a304:	0800dbec 	.word	0x0800dbec
 800a308:	20000600 	.word	0x20000600
 800a30c:	0800dc0c 	.word	0x0800dc0c
 800a310:	0800dc54 	.word	0x0800dc54

0800a314 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	4603      	mov	r3, r0
 800a31c:	6039      	str	r1, [r7, #0]
 800a31e:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800a320:	2300      	movs	r3, #0
 800a322:	73fb      	strb	r3, [r7, #15]
	switch(u8Grp)
 800a324:	79fb      	ldrb	r3, [r7, #7]
 800a326:	3b01      	subs	r3, #1
 800a328:	2b06      	cmp	r3, #6
 800a32a:	d82d      	bhi.n	800a388 <hif_register_cb+0x74>
 800a32c:	a201      	add	r2, pc, #4	@ (adr r2, 800a334 <hif_register_cb+0x20>)
 800a32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a332:	bf00      	nop
 800a334:	0800a359 	.word	0x0800a359
 800a338:	0800a351 	.word	0x0800a351
 800a33c:	0800a369 	.word	0x0800a369
 800a340:	0800a361 	.word	0x0800a361
 800a344:	0800a381 	.word	0x0800a381
 800a348:	0800a371 	.word	0x0800a371
 800a34c:	0800a379 	.word	0x0800a379
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
 800a350:	4a19      	ldr	r2, [pc, #100]	@ (800a3b8 <hif_register_cb+0xa4>)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	6153      	str	r3, [r2, #20]
			break;
 800a356:	e028      	b.n	800a3aa <hif_register_cb+0x96>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
 800a358:	4a17      	ldr	r2, [pc, #92]	@ (800a3b8 <hif_register_cb+0xa4>)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	6113      	str	r3, [r2, #16]
			break;
 800a35e:	e024      	b.n	800a3aa <hif_register_cb+0x96>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
 800a360:	4a15      	ldr	r2, [pc, #84]	@ (800a3b8 <hif_register_cb+0xa4>)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	6193      	str	r3, [r2, #24]
			break;
 800a366:	e020      	b.n	800a3aa <hif_register_cb+0x96>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
 800a368:	4a13      	ldr	r2, [pc, #76]	@ (800a3b8 <hif_register_cb+0xa4>)
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	6213      	str	r3, [r2, #32]
			break;
 800a36e:	e01c      	b.n	800a3aa <hif_register_cb+0x96>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
 800a370:	4a11      	ldr	r2, [pc, #68]	@ (800a3b8 <hif_register_cb+0xa4>)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	6253      	str	r3, [r2, #36]	@ 0x24
			break;
 800a376:	e018      	b.n	800a3aa <hif_register_cb+0x96>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
 800a378:	4a0f      	ldr	r2, [pc, #60]	@ (800a3b8 <hif_register_cb+0xa4>)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	61d3      	str	r3, [r2, #28]
			break;
 800a37e:	e014      	b.n	800a3aa <hif_register_cb+0x96>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
 800a380:	4a0d      	ldr	r2, [pc, #52]	@ (800a3b8 <hif_register_cb+0xa4>)
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	6293      	str	r3, [r2, #40]	@ 0x28
			break;
 800a386:	e010      	b.n	800a3aa <hif_register_cb+0x96>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
 800a388:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800a38c:	490b      	ldr	r1, [pc, #44]	@ (800a3bc <hif_register_cb+0xa8>)
 800a38e:	480c      	ldr	r0, [pc, #48]	@ (800a3c0 <hif_register_cb+0xac>)
 800a390:	f002 fb9a 	bl	800cac8 <iprintf>
 800a394:	79fb      	ldrb	r3, [r7, #7]
 800a396:	4619      	mov	r1, r3
 800a398:	480a      	ldr	r0, [pc, #40]	@ (800a3c4 <hif_register_cb+0xb0>)
 800a39a:	f002 fb95 	bl	800cac8 <iprintf>
 800a39e:	200d      	movs	r0, #13
 800a3a0:	f002 fba4 	bl	800caec <putchar>
			ret = M2M_ERR_FAIL;
 800a3a4:	23f4      	movs	r3, #244	@ 0xf4
 800a3a6:	73fb      	strb	r3, [r7, #15]
			break;
 800a3a8:	bf00      	nop
	}
	return ret;
 800a3aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	20000600 	.word	0x20000600
 800a3bc:	0800e7f4 	.word	0x0800e7f4
 800a3c0:	0800d924 	.word	0x0800d924
 800a3c4:	0800dc98 	.word	0x0800dc98

0800a3c8 <m2m_wifi_cb>:
                HIF address.
@param[in]  grp
                HIF group type.
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b0ae      	sub	sp, #184	@ 0xb8
 800a3cc:	af02      	add	r7, sp, #8
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	603a      	str	r2, [r7, #0]
 800a3d2:	71fb      	strb	r3, [r7, #7]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	80bb      	strh	r3, [r7, #4]
    uint8 rx_buf[8];
    if(u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 800a3d8:	79fb      	ldrb	r3, [r7, #7]
 800a3da:	2b2c      	cmp	r3, #44	@ 0x2c
 800a3dc:	d117      	bne.n	800a40e <m2m_wifi_cb+0x46>
    {
        tstrM2mWifiStateChanged strState;
        if(hif_receive(u32Addr, (uint8 *) &strState, sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
 800a3de:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	2204      	movs	r2, #4
 800a3e6:	6838      	ldr	r0, [r7, #0]
 800a3e8:	f7ff fefe 	bl	800a1e8 <hif_receive>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f040 81cd 	bne.w	800a78e <m2m_wifi_cb+0x3c6>
        {
            if(gpfAppWifiCb)
 800a3f4:	4bae      	ldr	r3, [pc, #696]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 81c8 	beq.w	800a78e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
 800a3fe:	4bac      	ldr	r3, [pc, #688]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800a406:	4611      	mov	r1, r2
 800a408:	202c      	movs	r0, #44	@ 0x2c
 800a40a:	4798      	blx	r3
#endif  /* ETH_MODE */
    else
    {
        M2M_ERR("REQ Not defined %d\n", u8OpCode);
    }
}
 800a40c:	e1bf      	b.n	800a78e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
 800a40e:	79fb      	ldrb	r3, [r7, #7]
 800a410:	2b1b      	cmp	r3, #27
 800a412:	d117      	bne.n	800a444 <m2m_wifi_cb+0x7c>
        if(hif_receive(u32Addr, (uint8 *) &strSysTime, sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
 800a414:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 800a418:	2300      	movs	r3, #0
 800a41a:	2208      	movs	r2, #8
 800a41c:	6838      	ldr	r0, [r7, #0]
 800a41e:	f7ff fee3 	bl	800a1e8 <hif_receive>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	f040 81b2 	bne.w	800a78e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a42a:	4ba1      	ldr	r3, [pc, #644]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 81ad 	beq.w	800a78e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
 800a434:	4b9e      	ldr	r3, [pc, #632]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800a43c:	4611      	mov	r1, r2
 800a43e:	201b      	movs	r0, #27
 800a440:	4798      	blx	r3
}
 800a442:	e1a4      	b.n	800a78e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
 800a444:	79fb      	ldrb	r3, [r7, #7]
 800a446:	2b06      	cmp	r3, #6
 800a448:	d117      	bne.n	800a47a <m2m_wifi_cb+0xb2>
        if(hif_receive(u32Addr, (uint8 *)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
 800a44a:	f107 0108 	add.w	r1, r7, #8
 800a44e:	2301      	movs	r3, #1
 800a450:	2230      	movs	r2, #48	@ 0x30
 800a452:	6838      	ldr	r0, [r7, #0]
 800a454:	f7ff fec8 	bl	800a1e8 <hif_receive>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f040 8197 	bne.w	800a78e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a460:	4b93      	ldr	r3, [pc, #588]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	f000 8192 	beq.w	800a78e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
 800a46a:	4b91      	ldr	r3, [pc, #580]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f107 0208 	add.w	r2, r7, #8
 800a472:	4611      	mov	r1, r2
 800a474:	2006      	movs	r0, #6
 800a476:	4798      	blx	r3
}
 800a478:	e189      	b.n	800a78e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	2b0e      	cmp	r3, #14
 800a47e:	f000 8186 	beq.w	800a78e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
 800a482:	79fb      	ldrb	r3, [r7, #7]
 800a484:	2b32      	cmp	r3, #50	@ 0x32
 800a486:	d117      	bne.n	800a4b8 <m2m_wifi_cb+0xf0>
        if(hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
 800a488:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 800a48c:	2300      	movs	r3, #0
 800a48e:	2218      	movs	r2, #24
 800a490:	6838      	ldr	r0, [r7, #0]
 800a492:	f7ff fea9 	bl	800a1e8 <hif_receive>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f040 8178 	bne.w	800a78e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a49e:	4b84      	ldr	r3, [pc, #528]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 8173 	beq.w	800a78e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
 800a4a8:	4b81      	ldr	r3, [pc, #516]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 800a4b0:	4611      	mov	r1, r2
 800a4b2:	2032      	movs	r0, #50	@ 0x32
 800a4b4:	4798      	blx	r3
}
 800a4b6:	e16a      	b.n	800a78e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_REQ_DHCP_FAILURE)
 800a4b8:	79fb      	ldrb	r3, [r7, #7]
 800a4ba:	2b3d      	cmp	r3, #61	@ 0x3d
 800a4bc:	d114      	bne.n	800a4e8 <m2m_wifi_cb+0x120>
        if(hif_receive(u32Addr, NULL, 0, 1) == M2M_SUCCESS)
 800a4be:	2301      	movs	r3, #1
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	6838      	ldr	r0, [r7, #0]
 800a4c6:	f7ff fe8f 	bl	800a1e8 <hif_receive>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f040 815e 	bne.w	800a78e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a4d2:	4b77      	ldr	r3, [pc, #476]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f000 8159 	beq.w	800a78e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_REQ_DHCP_FAILURE, NULL);
 800a4dc:	4b74      	ldr	r3, [pc, #464]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	203d      	movs	r0, #61	@ 0x3d
 800a4e4:	4798      	blx	r3
}
 800a4e6:	e152      	b.n	800a78e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_REQ_WPS)
 800a4e8:	79fb      	ldrb	r3, [r7, #7]
 800a4ea:	2b2f      	cmp	r3, #47	@ 0x2f
 800a4ec:	d11e      	bne.n	800a52c <m2m_wifi_cb+0x164>
        m2m_memset((uint8 *)&strWps, 0, sizeof(tstrM2MWPSInfo));
 800a4ee:	f107 0308 	add.w	r3, r7, #8
 800a4f2:	2264      	movs	r2, #100	@ 0x64
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7ff f9c0 	bl	800987c <m2m_memset>
        if(hif_receive(u32Addr, (uint8 *)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
 800a4fc:	f107 0108 	add.w	r1, r7, #8
 800a500:	2300      	movs	r3, #0
 800a502:	2264      	movs	r2, #100	@ 0x64
 800a504:	6838      	ldr	r0, [r7, #0]
 800a506:	f7ff fe6f 	bl	800a1e8 <hif_receive>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f040 813e 	bne.w	800a78e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a512:	4b67      	ldr	r3, [pc, #412]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	f000 8139 	beq.w	800a78e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
 800a51c:	4b64      	ldr	r3, [pc, #400]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f107 0208 	add.w	r2, r7, #8
 800a524:	4611      	mov	r1, r2
 800a526:	202f      	movs	r0, #47	@ 0x2f
 800a528:	4798      	blx	r3
}
 800a52a:	e130      	b.n	800a78e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	2b34      	cmp	r3, #52	@ 0x34
 800a530:	d132      	bne.n	800a598 <m2m_wifi_cb+0x1d0>
        if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
 800a532:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800a536:	2300      	movs	r3, #0
 800a538:	2204      	movs	r2, #4
 800a53a:	6838      	ldr	r0, [r7, #0]
 800a53c:	f7ff fe54 	bl	800a1e8 <hif_receive>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	f040 8123 	bne.w	800a78e <m2m_wifi_cb+0x3c6>
            M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n",
 800a548:	485a      	ldr	r0, [pc, #360]	@ (800a6b4 <m2m_wifi_cb+0x2ec>)
 800a54a:	f002 fabd 	bl	800cac8 <iprintf>
 800a54e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a552:	b2db      	uxtb	r3, r3
 800a554:	4619      	mov	r1, r3
 800a556:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a55a:	0a1b      	lsrs	r3, r3, #8
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	461a      	mov	r2, r3
 800a560:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a564:	0c1b      	lsrs	r3, r3, #16
 800a566:	b2db      	uxtb	r3, r3
 800a568:	4618      	mov	r0, r3
 800a56a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a56e:	0e1b      	lsrs	r3, r3, #24
 800a570:	b2db      	uxtb	r3, r3
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	4603      	mov	r3, r0
 800a576:	4850      	ldr	r0, [pc, #320]	@ (800a6b8 <m2m_wifi_cb+0x2f0>)
 800a578:	f002 faa6 	bl	800cac8 <iprintf>
 800a57c:	200d      	movs	r0, #13
 800a57e:	f002 fab5 	bl	800caec <putchar>
            if(gpfAppWifiCb)
 800a582:	4b4b      	ldr	r3, [pc, #300]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	f000 8101 	beq.w	800a78e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
 800a58c:	4b48      	ldr	r3, [pc, #288]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2100      	movs	r1, #0
 800a592:	2034      	movs	r0, #52	@ 0x34
 800a594:	4798      	blx	r3
}
 800a596:	e0fa      	b.n	800a78e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
 800a598:	79fb      	ldrb	r3, [r7, #7]
 800a59a:	2b11      	cmp	r3, #17
 800a59c:	d11e      	bne.n	800a5dc <m2m_wifi_cb+0x214>
        gu8scanInProgress = 0;
 800a59e:	4b47      	ldr	r3, [pc, #284]	@ (800a6bc <m2m_wifi_cb+0x2f4>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	701a      	strb	r2, [r3, #0]
        if(hif_receive(u32Addr, (uint8 *)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 800a5a4:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	2204      	movs	r2, #4
 800a5ac:	6838      	ldr	r0, [r7, #0]
 800a5ae:	f7ff fe1b 	bl	800a1e8 <hif_receive>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f040 80ea 	bne.w	800a78e <m2m_wifi_cb+0x3c6>
            gu8ChNum = strState.u8NumofCh;
 800a5ba:	f897 207c 	ldrb.w	r2, [r7, #124]	@ 0x7c
 800a5be:	4b40      	ldr	r3, [pc, #256]	@ (800a6c0 <m2m_wifi_cb+0x2f8>)
 800a5c0:	701a      	strb	r2, [r3, #0]
            if(gpfAppWifiCb)
 800a5c2:	4b3b      	ldr	r3, [pc, #236]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f000 80e1 	beq.w	800a78e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
 800a5cc:	4b38      	ldr	r3, [pc, #224]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	2011      	movs	r0, #17
 800a5d8:	4798      	blx	r3
}
 800a5da:	e0d8      	b.n	800a78e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
 800a5dc:	79fb      	ldrb	r3, [r7, #7]
 800a5de:	2b13      	cmp	r3, #19
 800a5e0:	d117      	bne.n	800a612 <m2m_wifi_cb+0x24a>
        if(hif_receive(u32Addr, (uint8 *)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
 800a5e2:	f107 0108 	add.w	r1, r7, #8
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	222c      	movs	r2, #44	@ 0x2c
 800a5ea:	6838      	ldr	r0, [r7, #0]
 800a5ec:	f7ff fdfc 	bl	800a1e8 <hif_receive>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f040 80cb 	bne.w	800a78e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a5f8:	4b2d      	ldr	r3, [pc, #180]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 80c6 	beq.w	800a78e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
 800a602:	4b2b      	ldr	r3, [pc, #172]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f107 0208 	add.w	r2, r7, #8
 800a60a:	4611      	mov	r1, r2
 800a60c:	2013      	movs	r0, #19
 800a60e:	4798      	blx	r3
}
 800a610:	e0bd      	b.n	800a78e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
 800a612:	79fb      	ldrb	r3, [r7, #7]
 800a614:	2b04      	cmp	r3, #4
 800a616:	d117      	bne.n	800a648 <m2m_wifi_cb+0x280>
        if(hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800a618:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800a61c:	2300      	movs	r3, #0
 800a61e:	2204      	movs	r2, #4
 800a620:	6838      	ldr	r0, [r7, #0]
 800a622:	f7ff fde1 	bl	800a1e8 <hif_receive>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f040 80b0 	bne.w	800a78e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a62e:	4b20      	ldr	r3, [pc, #128]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	f000 80ab 	beq.w	800a78e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
 800a638:	4b1d      	ldr	r3, [pc, #116]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800a640:	4611      	mov	r1, r2
 800a642:	2004      	movs	r0, #4
 800a644:	4798      	blx	r3
}
 800a646:	e0a2      	b.n	800a78e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
 800a648:	79fb      	ldrb	r3, [r7, #7]
 800a64a:	2b65      	cmp	r3, #101	@ 0x65
 800a64c:	d117      	bne.n	800a67e <m2m_wifi_cb+0x2b6>
        if(hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800a64e:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800a652:	2300      	movs	r3, #0
 800a654:	2204      	movs	r2, #4
 800a656:	6838      	ldr	r0, [r7, #0]
 800a658:	f7ff fdc6 	bl	800a1e8 <hif_receive>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f040 8095 	bne.w	800a78e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a664:	4b12      	ldr	r3, [pc, #72]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f000 8090 	beq.w	800a78e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
 800a66e:	4b10      	ldr	r3, [pc, #64]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800a676:	4611      	mov	r1, r2
 800a678:	2065      	movs	r0, #101	@ 0x65
 800a67a:	4798      	blx	r3
}
 800a67c:	e087      	b.n	800a78e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
 800a67e:	79fb      	ldrb	r3, [r7, #7]
 800a680:	2b09      	cmp	r3, #9
 800a682:	d11f      	bne.n	800a6c4 <m2m_wifi_cb+0x2fc>
        if(hif_receive(u32Addr, (uint8 *)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
 800a684:	f107 0108 	add.w	r1, r7, #8
 800a688:	2301      	movs	r3, #1
 800a68a:	2264      	movs	r2, #100	@ 0x64
 800a68c:	6838      	ldr	r0, [r7, #0]
 800a68e:	f7ff fdab 	bl	800a1e8 <hif_receive>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d17a      	bne.n	800a78e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a698:	4b05      	ldr	r3, [pc, #20]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d076      	beq.n	800a78e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
 800a6a0:	4b03      	ldr	r3, [pc, #12]	@ (800a6b0 <m2m_wifi_cb+0x2e8>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f107 0208 	add.w	r2, r7, #8
 800a6a8:	4611      	mov	r1, r2
 800a6aa:	2009      	movs	r0, #9
 800a6ac:	4798      	blx	r3
}
 800a6ae:	e06e      	b.n	800a78e <m2m_wifi_cb+0x3c6>
 800a6b0:	20000630 	.word	0x20000630
 800a6b4:	0800dca4 	.word	0x0800dca4
 800a6b8:	0800dcb0 	.word	0x0800dcb0
 800a6bc:	20000634 	.word	0x20000634
 800a6c0:	2000062c 	.word	0x2000062c
    else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
 800a6c4:	79fb      	ldrb	r3, [r7, #7]
 800a6c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6c8:	d115      	bne.n	800a6f6 <m2m_wifi_cb+0x32e>
        if(hif_receive(u32Addr, (uint8 *)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
 800a6ca:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	2204      	movs	r2, #4
 800a6d2:	6838      	ldr	r0, [r7, #0]
 800a6d4:	f7ff fd88 	bl	800a1e8 <hif_receive>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d157      	bne.n	800a78e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a6de:	4b2e      	ldr	r3, [pc, #184]	@ (800a798 <m2m_wifi_cb+0x3d0>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d053      	beq.n	800a78e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
 800a6e6:	4b2c      	ldr	r3, [pc, #176]	@ (800a798 <m2m_wifi_cb+0x3d0>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	202a      	movs	r0, #42	@ 0x2a
 800a6f2:	4798      	blx	r3
}
 800a6f4:	e04b      	b.n	800a78e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_REQRSP_DELETE_APID)
 800a6f6:	79fb      	ldrb	r3, [r7, #7]
 800a6f8:	2b27      	cmp	r3, #39	@ 0x27
 800a6fa:	d115      	bne.n	800a728 <m2m_wifi_cb+0x360>
        if(hif_receive(u32Addr, (uint8 *)&strResp, sizeof(tstrM2MGenericResp), 0) == M2M_SUCCESS)
 800a6fc:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800a700:	2300      	movs	r3, #0
 800a702:	2204      	movs	r2, #4
 800a704:	6838      	ldr	r0, [r7, #0]
 800a706:	f7ff fd6f 	bl	800a1e8 <hif_receive>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d13e      	bne.n	800a78e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a710:	4b21      	ldr	r3, [pc, #132]	@ (800a798 <m2m_wifi_cb+0x3d0>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d03a      	beq.n	800a78e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_REQRSP_DELETE_APID, &strResp);
 800a718:	4b1f      	ldr	r3, [pc, #124]	@ (800a798 <m2m_wifi_cb+0x3d0>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800a720:	4611      	mov	r1, r2
 800a722:	2027      	movs	r0, #39	@ 0x27
 800a724:	4798      	blx	r3
}
 800a726:	e032      	b.n	800a78e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
 800a728:	79fb      	ldrb	r3, [r7, #7]
 800a72a:	2b20      	cmp	r3, #32
 800a72c:	d121      	bne.n	800a772 <m2m_wifi_cb+0x3aa>
        if(hif_receive(u32Addr, (uint8 *)&strPrng, sizeof(tstrPrng), 0) == M2M_SUCCESS)
 800a72e:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800a732:	2300      	movs	r3, #0
 800a734:	2208      	movs	r2, #8
 800a736:	6838      	ldr	r0, [r7, #0]
 800a738:	f7ff fd56 	bl	800a1e8 <hif_receive>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d125      	bne.n	800a78e <m2m_wifi_cb+0x3c6>
            if(hif_receive(u32Addr + sizeof(tstrPrng), strPrng.pu8RngBuff, strPrng.u16PrngSize, 1) == M2M_SUCCESS)
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	f103 0008 	add.w	r0, r3, #8
 800a748:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a74a:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 800a74e:	2301      	movs	r3, #1
 800a750:	f7ff fd4a 	bl	800a1e8 <hif_receive>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d119      	bne.n	800a78e <m2m_wifi_cb+0x3c6>
                if(gpfAppWifiCb)
 800a75a:	4b0f      	ldr	r3, [pc, #60]	@ (800a798 <m2m_wifi_cb+0x3d0>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d015      	beq.n	800a78e <m2m_wifi_cb+0x3c6>
                    gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG, &strPrng);
 800a762:	4b0d      	ldr	r3, [pc, #52]	@ (800a798 <m2m_wifi_cb+0x3d0>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800a76a:	4611      	mov	r1, r2
 800a76c:	2020      	movs	r0, #32
 800a76e:	4798      	blx	r3
}
 800a770:	e00d      	b.n	800a78e <m2m_wifi_cb+0x3c6>
        M2M_ERR("REQ Not defined %d\n", u8OpCode);
 800a772:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 800a776:	4909      	ldr	r1, [pc, #36]	@ (800a79c <m2m_wifi_cb+0x3d4>)
 800a778:	4809      	ldr	r0, [pc, #36]	@ (800a7a0 <m2m_wifi_cb+0x3d8>)
 800a77a:	f002 f9a5 	bl	800cac8 <iprintf>
 800a77e:	79fb      	ldrb	r3, [r7, #7]
 800a780:	4619      	mov	r1, r3
 800a782:	4808      	ldr	r0, [pc, #32]	@ (800a7a4 <m2m_wifi_cb+0x3dc>)
 800a784:	f002 f9a0 	bl	800cac8 <iprintf>
 800a788:	200d      	movs	r0, #13
 800a78a:	f002 f9af 	bl	800caec <putchar>
}
 800a78e:	bf00      	nop
 800a790:	37b0      	adds	r7, #176	@ 0xb0
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	20000630 	.word	0x20000630
 800a79c:	0800e804 	.word	0x0800e804
 800a7a0:	0800dcd0 	.word	0x0800dcd0
 800a7a4:	0800dce4 	.word	0x0800dce4

0800a7a8 <m2m_validate_ap_parameters>:
_EXIT0:
    return ret;
}

static sint8 m2m_validate_ap_parameters(CONST tstrM2MAPModeConfig *pstrM2MAPModeConfig)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
    sint8 s8Ret = M2M_SUCCESS;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	73fb      	strb	r3, [r7, #15]
    /* Check for incoming pointer */
    if(pstrM2MAPModeConfig == NULL)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10e      	bne.n	800a7d8 <m2m_validate_ap_parameters+0x30>
    {
        M2M_ERR("INVALID POINTER\n");
 800a7ba:	f44f 729b 	mov.w	r2, #310	@ 0x136
 800a7be:	4951      	ldr	r1, [pc, #324]	@ (800a904 <m2m_validate_ap_parameters+0x15c>)
 800a7c0:	4851      	ldr	r0, [pc, #324]	@ (800a908 <m2m_validate_ap_parameters+0x160>)
 800a7c2:	f002 f981 	bl	800cac8 <iprintf>
 800a7c6:	4851      	ldr	r0, [pc, #324]	@ (800a90c <m2m_validate_ap_parameters+0x164>)
 800a7c8:	f002 f9ee 	bl	800cba8 <puts>
 800a7cc:	200d      	movs	r0, #13
 800a7ce:	f002 f98d 	bl	800caec <putchar>
        s8Ret = M2M_ERR_FAIL;
 800a7d2:	23f4      	movs	r3, #244	@ 0xf4
 800a7d4:	73fb      	strb	r3, [r7, #15]
        goto ERR1;
 800a7d6:	e08e      	b.n	800a8f6 <m2m_validate_ap_parameters+0x14e>
    }
    /* Check for SSID */
    if((m2m_strlen((uint8 *)pstrM2MAPModeConfig->strApConfig.au8SSID) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPModeConfig->strApConfig.au8SSID) >= M2M_MAX_SSID_LEN))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7ff f86b 	bl	80098b6 <m2m_strlen>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d006      	beq.n	800a7f4 <m2m_validate_ap_parameters+0x4c>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7ff f864 	bl	80098b6 <m2m_strlen>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b20      	cmp	r3, #32
 800a7f2:	d90e      	bls.n	800a812 <m2m_validate_ap_parameters+0x6a>
    {
        M2M_ERR("INVALID SSID\n");
 800a7f4:	f240 123d 	movw	r2, #317	@ 0x13d
 800a7f8:	4942      	ldr	r1, [pc, #264]	@ (800a904 <m2m_validate_ap_parameters+0x15c>)
 800a7fa:	4843      	ldr	r0, [pc, #268]	@ (800a908 <m2m_validate_ap_parameters+0x160>)
 800a7fc:	f002 f964 	bl	800cac8 <iprintf>
 800a800:	4843      	ldr	r0, [pc, #268]	@ (800a910 <m2m_validate_ap_parameters+0x168>)
 800a802:	f002 f9d1 	bl	800cba8 <puts>
 800a806:	200d      	movs	r0, #13
 800a808:	f002 f970 	bl	800caec <putchar>
        s8Ret = M2M_ERR_FAIL;
 800a80c:	23f4      	movs	r3, #244	@ 0xf4
 800a80e:	73fb      	strb	r3, [r7, #15]
        goto ERR1;
 800a810:	e071      	b.n	800a8f6 <m2m_validate_ap_parameters+0x14e>
    }
    /* Check for Channel */
    if(pstrM2MAPModeConfig->strApConfig.u8ListenChannel > M2M_WIFI_CH_14 || pstrM2MAPModeConfig->strApConfig.u8ListenChannel < M2M_WIFI_CH_1)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a818:	2b0e      	cmp	r3, #14
 800a81a:	d804      	bhi.n	800a826 <m2m_validate_ap_parameters+0x7e>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10e      	bne.n	800a844 <m2m_validate_ap_parameters+0x9c>
    {
        M2M_ERR("INVALID CH\n");
 800a826:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800a82a:	4936      	ldr	r1, [pc, #216]	@ (800a904 <m2m_validate_ap_parameters+0x15c>)
 800a82c:	4836      	ldr	r0, [pc, #216]	@ (800a908 <m2m_validate_ap_parameters+0x160>)
 800a82e:	f002 f94b 	bl	800cac8 <iprintf>
 800a832:	4838      	ldr	r0, [pc, #224]	@ (800a914 <m2m_validate_ap_parameters+0x16c>)
 800a834:	f002 f9b8 	bl	800cba8 <puts>
 800a838:	200d      	movs	r0, #13
 800a83a:	f002 f957 	bl	800caec <putchar>
        s8Ret = M2M_ERR_FAIL;
 800a83e:	23f4      	movs	r3, #244	@ 0xf4
 800a840:	73fb      	strb	r3, [r7, #15]
        goto ERR1;
 800a842:	e058      	b.n	800a8f6 <m2m_validate_ap_parameters+0x14e>
    }
    /* Check for DHCP Server IP address */
    if(!(pstrM2MAPModeConfig->strApConfig.au8DHCPServerIP[0] || pstrM2MAPModeConfig->strApConfig.au8DHCPServerIP[1]))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d118      	bne.n	800a880 <m2m_validate_ap_parameters+0xd8>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a854:	2b00      	cmp	r3, #0
 800a856:	d113      	bne.n	800a880 <m2m_validate_ap_parameters+0xd8>
    {
        if(!(pstrM2MAPModeConfig->strApConfig.au8DHCPServerIP[2]))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d10e      	bne.n	800a880 <m2m_validate_ap_parameters+0xd8>
        {
            M2M_ERR("INVALID DHCP SERVER IP\n");
 800a862:	f240 124d 	movw	r2, #333	@ 0x14d
 800a866:	4927      	ldr	r1, [pc, #156]	@ (800a904 <m2m_validate_ap_parameters+0x15c>)
 800a868:	4827      	ldr	r0, [pc, #156]	@ (800a908 <m2m_validate_ap_parameters+0x160>)
 800a86a:	f002 f92d 	bl	800cac8 <iprintf>
 800a86e:	482a      	ldr	r0, [pc, #168]	@ (800a918 <m2m_validate_ap_parameters+0x170>)
 800a870:	f002 f99a 	bl	800cba8 <puts>
 800a874:	200d      	movs	r0, #13
 800a876:	f002 f939 	bl	800caec <putchar>
            s8Ret = M2M_ERR_FAIL;
 800a87a:	23f4      	movs	r3, #244	@ 0xf4
 800a87c:	73fb      	strb	r3, [r7, #15]
            goto ERR1;
 800a87e:	e03a      	b.n	800a8f6 <m2m_validate_ap_parameters+0x14e>
        }
    }
    /* Check for Security */
    if(pstrM2MAPModeConfig->strApConfig.u8SecType == M2M_WIFI_SEC_OPEN)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a886:	2b01      	cmp	r3, #1
 800a888:	d034      	beq.n	800a8f4 <m2m_validate_ap_parameters+0x14c>
    {
        goto ERR1;
    }
    else if(pstrM2MAPModeConfig->strApConfig.u8SecType == M2M_WIFI_SEC_WEP)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a890:	2b03      	cmp	r3, #3
 800a892:	d102      	bne.n	800a89a <m2m_validate_ap_parameters+0xf2>
    {
        /* As of 19.7.5 the WEP protocol is deprecated */
        s8Ret = M2M_ERR_FAIL;
 800a894:	23f4      	movs	r3, #244	@ 0xf4
 800a896:	73fb      	strb	r3, [r7, #15]
        goto ERR1;
 800a898:	e02d      	b.n	800a8f6 <m2m_validate_ap_parameters+0x14e>
    }
    else if(pstrM2MAPModeConfig->strApConfig.u8SecType == M2M_WIFI_SEC_WPA_PSK)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d118      	bne.n	800a8d6 <m2m_validate_ap_parameters+0x12e>
    {
        /* Check for WPA Key size */
        if(((pstrM2MAPModeConfig->strApConfig.u8KeySz + 1) < M2M_MIN_PSK_LEN) || ((pstrM2MAPModeConfig->strApConfig.u8KeySz + 1) > M2M_MAX_PSK_LEN))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a8aa:	2b07      	cmp	r3, #7
 800a8ac:	d904      	bls.n	800a8b8 <m2m_validate_ap_parameters+0x110>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a8b4:	2b40      	cmp	r3, #64	@ 0x40
 800a8b6:	d91e      	bls.n	800a8f6 <m2m_validate_ap_parameters+0x14e>
        {
            M2M_ERR("INVALID WPA KEY SIZE\n");
 800a8b8:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 800a8bc:	4911      	ldr	r1, [pc, #68]	@ (800a904 <m2m_validate_ap_parameters+0x15c>)
 800a8be:	4812      	ldr	r0, [pc, #72]	@ (800a908 <m2m_validate_ap_parameters+0x160>)
 800a8c0:	f002 f902 	bl	800cac8 <iprintf>
 800a8c4:	4815      	ldr	r0, [pc, #84]	@ (800a91c <m2m_validate_ap_parameters+0x174>)
 800a8c6:	f002 f96f 	bl	800cba8 <puts>
 800a8ca:	200d      	movs	r0, #13
 800a8cc:	f002 f90e 	bl	800caec <putchar>
            s8Ret = M2M_ERR_FAIL;
 800a8d0:	23f4      	movs	r3, #244	@ 0xf4
 800a8d2:	73fb      	strb	r3, [r7, #15]
            goto ERR1;
 800a8d4:	e00f      	b.n	800a8f6 <m2m_validate_ap_parameters+0x14e>
        }
    }
    else
    {
        M2M_ERR("INVALID AUTHENTICATION MODE\n");
 800a8d6:	f240 1269 	movw	r2, #361	@ 0x169
 800a8da:	490a      	ldr	r1, [pc, #40]	@ (800a904 <m2m_validate_ap_parameters+0x15c>)
 800a8dc:	480a      	ldr	r0, [pc, #40]	@ (800a908 <m2m_validate_ap_parameters+0x160>)
 800a8de:	f002 f8f3 	bl	800cac8 <iprintf>
 800a8e2:	480f      	ldr	r0, [pc, #60]	@ (800a920 <m2m_validate_ap_parameters+0x178>)
 800a8e4:	f002 f960 	bl	800cba8 <puts>
 800a8e8:	200d      	movs	r0, #13
 800a8ea:	f002 f8ff 	bl	800caec <putchar>
        s8Ret = M2M_ERR_FAIL;
 800a8ee:	23f4      	movs	r3, #244	@ 0xf4
 800a8f0:	73fb      	strb	r3, [r7, #15]
        goto ERR1;
 800a8f2:	e000      	b.n	800a8f6 <m2m_validate_ap_parameters+0x14e>
        goto ERR1;
 800a8f4:	bf00      	nop
    }

ERR1:
    return s8Ret;
 800a8f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	0800e810 	.word	0x0800e810
 800a908:	0800dcd0 	.word	0x0800dcd0
 800a90c:	0800dcf8 	.word	0x0800dcf8
 800a910:	0800dd08 	.word	0x0800dd08
 800a914:	0800dd18 	.word	0x0800dd18
 800a918:	0800dd24 	.word	0x0800dd24
 800a91c:	0800dd3c 	.word	0x0800dd3c
 800a920:	0800dd54 	.word	0x0800dd54

0800a924 <m2m_wifi_init_hold>:
    s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8 *)pCRL, sizeof(tstrTlsCrlInfo), 0);
    return s8Ret;
}

sint8 m2m_wifi_init_hold(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
    sint8 ret = M2M_ERR_FAIL;
 800a92a:	23f4      	movs	r3, #244	@ 0xf4
 800a92c:	71fb      	strb	r3, [r7, #7]

    /* Apply device specific initialization. */
    ret = nm_drv_init_hold();
 800a92e:	f000 fe0f 	bl	800b550 <nm_drv_init_hold>
 800a932:	4603      	mov	r3, r0
 800a934:	71fb      	strb	r3, [r7, #7]

    if(M2M_SUCCESS == ret)
 800a936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d102      	bne.n	800a944 <m2m_wifi_init_hold+0x20>
        gu8WifiState = WIFI_STATE_INIT;
 800a93e:	4b04      	ldr	r3, [pc, #16]	@ (800a950 <m2m_wifi_init_hold+0x2c>)
 800a940:	2201      	movs	r2, #1
 800a942:	701a      	strb	r2, [r3, #0]

    return ret;
 800a944:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	2000062d 	.word	0x2000062d

0800a954 <m2m_wifi_init_start>:

sint8 m2m_wifi_init_start(tstrWifiInitParam *pWifiInitParam)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b090      	sub	sp, #64	@ 0x40
 800a958:	af02      	add	r7, sp, #8
 800a95a:	6078      	str	r0, [r7, #4]
    tstrM2mRev strtmp;
    sint8 ret = M2M_SUCCESS;
 800a95c:	2300      	movs	r3, #0
 800a95e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
 800a962:	2301      	movs	r3, #1
 800a964:	72fb      	strb	r3, [r7, #11]

    if(pWifiInitParam == NULL) {
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d103      	bne.n	800a974 <m2m_wifi_init_start+0x20>
        ret = M2M_ERR_FAIL;
 800a96c:	23f4      	movs	r3, #244	@ 0xf4
 800a96e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        goto _EXIT0;
 800a972:	e090      	b.n	800aa96 <m2m_wifi_init_start+0x142>
    }

    gpfAppWifiCb = pWifiInitParam->pfAppWifiCb;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a4a      	ldr	r2, [pc, #296]	@ (800aaa4 <m2m_wifi_init_start+0x150>)
 800a97a:	6013      	str	r3, [r2, #0]
    gu16ethRcvBufSize = pWifiInitParam->strEthInitParam.u16ethRcvBufSize;
	if (pWifiInitParam->strEthInitParam.u8EthernetEnable)		
		u8WifiMode = M2M_WIFI_MODE_ETHERNET;
#endif /* ETH_MODE */

    gu8scanInProgress = 0;
 800a97c:	4b4a      	ldr	r3, [pc, #296]	@ (800aaa8 <m2m_wifi_init_start+0x154>)
 800a97e:	2200      	movs	r2, #0
 800a980:	701a      	strb	r2, [r3, #0]
    /* Apply device specific initialization. */
    ret = nm_drv_init_start(&u8WifiMode);
 800a982:	f107 030b 	add.w	r3, r7, #11
 800a986:	4618      	mov	r0, r3
 800a988:	f000 fe20 	bl	800b5cc <nm_drv_init_start>
 800a98c:	4603      	mov	r3, r0
 800a98e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if(ret != M2M_SUCCESS) goto _EXIT0;
 800a992:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a996:	2b00      	cmp	r3, #0
 800a998:	d17a      	bne.n	800aa90 <m2m_wifi_init_start+0x13c>

    gu8WifiState = WIFI_STATE_START;
 800a99a:	4b44      	ldr	r3, [pc, #272]	@ (800aaac <m2m_wifi_init_start+0x158>)
 800a99c:	2202      	movs	r2, #2
 800a99e:	701a      	strb	r2, [r3, #0]

    /* Initialize host interface module */
    ret = hif_init(NULL);
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	f7ff f861 	bl	8009a68 <hif_init>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if(ret != M2M_SUCCESS) goto _EXIT1;
 800a9ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d165      	bne.n	800aa80 <m2m_wifi_init_start+0x12c>

    hif_register_cb(M2M_REQ_GROUP_WIFI, m2m_wifi_cb);
 800a9b4:	493e      	ldr	r1, [pc, #248]	@ (800aab0 <m2m_wifi_init_start+0x15c>)
 800a9b6:	2001      	movs	r0, #1
 800a9b8:	f7ff fcac 	bl	800a314 <hif_register_cb>

    ret = nm_get_firmware_full_info(&strtmp);
 800a9bc:	f107 030c 	add.w	r3, r7, #12
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f000 fd2d 	bl	800b420 <nm_get_firmware_full_info>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
 800a9cc:	4839      	ldr	r0, [pc, #228]	@ (800aab4 <m2m_wifi_init_start+0x160>)
 800a9ce:	f002 f87b 	bl	800cac8 <iprintf>
 800a9d2:	7c3b      	ldrb	r3, [r7, #16]
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	7c7b      	ldrb	r3, [r7, #17]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	7cbb      	ldrb	r3, [r7, #18]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	4834      	ldr	r0, [pc, #208]	@ (800aab8 <m2m_wifi_init_start+0x164>)
 800a9e6:	f002 f86f 	bl	800cac8 <iprintf>
 800a9ea:	200d      	movs	r0, #13
 800a9ec:	f002 f87e 	bl	800caec <putchar>
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
 800a9f0:	4830      	ldr	r0, [pc, #192]	@ (800aab4 <m2m_wifi_init_start+0x160>)
 800a9f2:	f002 f869 	bl	800cac8 <iprintf>
 800a9f6:	f107 030c 	add.w	r3, r7, #12
 800a9fa:	f103 0216 	add.w	r2, r3, #22
 800a9fe:	f107 030c 	add.w	r3, r7, #12
 800aa02:	330a      	adds	r3, #10
 800aa04:	4619      	mov	r1, r3
 800aa06:	482d      	ldr	r0, [pc, #180]	@ (800aabc <m2m_wifi_init_start+0x168>)
 800aa08:	f002 f85e 	bl	800cac8 <iprintf>
 800aa0c:	200d      	movs	r0, #13
 800aa0e:	f002 f86d 	bl	800caec <putchar>
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
 800aa12:	4828      	ldr	r0, [pc, #160]	@ (800aab4 <m2m_wifi_init_start+0x160>)
 800aa14:	f002 f858 	bl	800cac8 <iprintf>
 800aa18:	7cfb      	ldrb	r3, [r7, #19]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	7d3b      	ldrb	r3, [r7, #20]
 800aa1e:	461a      	mov	r2, r3
 800aa20:	7d7b      	ldrb	r3, [r7, #21]
 800aa22:	4827      	ldr	r0, [pc, #156]	@ (800aac0 <m2m_wifi_init_start+0x16c>)
 800aa24:	f002 f850 	bl	800cac8 <iprintf>
 800aa28:	200d      	movs	r0, #13
 800aa2a:	f002 f85f 	bl	800caec <putchar>
	M2M_INFO("Driver ver: %u.%u.%u \n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 800aa2e:	4821      	ldr	r0, [pc, #132]	@ (800aab4 <m2m_wifi_init_start+0x160>)
 800aa30:	f002 f84a 	bl	800cac8 <iprintf>
 800aa34:	2307      	movs	r3, #7
 800aa36:	2207      	movs	r2, #7
 800aa38:	2113      	movs	r1, #19
 800aa3a:	4822      	ldr	r0, [pc, #136]	@ (800aac4 <m2m_wifi_init_start+0x170>)
 800aa3c:	f002 f844 	bl	800cac8 <iprintf>
 800aa40:	200d      	movs	r0, #13
 800aa42:	f002 f853 	bl	800caec <putchar>
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
 800aa46:	481b      	ldr	r0, [pc, #108]	@ (800aab4 <m2m_wifi_init_start+0x160>)
 800aa48:	f002 f83e 	bl	800cac8 <iprintf>
 800aa4c:	4a1e      	ldr	r2, [pc, #120]	@ (800aac8 <m2m_wifi_init_start+0x174>)
 800aa4e:	491f      	ldr	r1, [pc, #124]	@ (800aacc <m2m_wifi_init_start+0x178>)
 800aa50:	481f      	ldr	r0, [pc, #124]	@ (800aad0 <m2m_wifi_init_start+0x17c>)
 800aa52:	f002 f839 	bl	800cac8 <iprintf>
 800aa56:	200d      	movs	r0, #13
 800aa58:	f002 f848 	bl	800caec <putchar>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
 800aa5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800aa60:	f113 0f0d 	cmn.w	r3, #13
 800aa64:	d116      	bne.n	800aa94 <m2m_wifi_init_start+0x140>
	{
		M2M_ERR("Mismatch Firmware Version\n");
 800aa66:	f240 12db 	movw	r2, #475	@ 0x1db
 800aa6a:	491a      	ldr	r1, [pc, #104]	@ (800aad4 <m2m_wifi_init_start+0x180>)
 800aa6c:	481a      	ldr	r0, [pc, #104]	@ (800aad8 <m2m_wifi_init_start+0x184>)
 800aa6e:	f002 f82b 	bl	800cac8 <iprintf>
 800aa72:	481a      	ldr	r0, [pc, #104]	@ (800aadc <m2m_wifi_init_start+0x188>)
 800aa74:	f002 f898 	bl	800cba8 <puts>
 800aa78:	200d      	movs	r0, #13
 800aa7a:	f002 f837 	bl	800caec <putchar>
	}

    goto _EXIT0;
 800aa7e:	e009      	b.n	800aa94 <m2m_wifi_init_start+0x140>
    if(ret != M2M_SUCCESS) goto _EXIT1;
 800aa80:	bf00      	nop

_EXIT1:
    gu8WifiState = WIFI_STATE_DEINIT;
 800aa82:	4b0a      	ldr	r3, [pc, #40]	@ (800aaac <m2m_wifi_init_start+0x158>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	701a      	strb	r2, [r3, #0]
    nm_drv_deinit(NULL);
 800aa88:	2000      	movs	r0, #0
 800aa8a:	f000 fdfd 	bl	800b688 <nm_drv_deinit>
 800aa8e:	e002      	b.n	800aa96 <m2m_wifi_init_start+0x142>
    if(ret != M2M_SUCCESS) goto _EXIT0;
 800aa90:	bf00      	nop
 800aa92:	e000      	b.n	800aa96 <m2m_wifi_init_start+0x142>
    goto _EXIT0;
 800aa94:	bf00      	nop
_EXIT0:

    return ret;
 800aa96:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3738      	adds	r7, #56	@ 0x38
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	20000630 	.word	0x20000630
 800aaa8:	20000634 	.word	0x20000634
 800aaac:	2000062d 	.word	0x2000062d
 800aab0:	0800a3c9 	.word	0x0800a3c9
 800aab4:	0800dca4 	.word	0x0800dca4
 800aab8:	0800ddf8 	.word	0x0800ddf8
 800aabc:	0800de20 	.word	0x0800de20
 800aac0:	0800de3c 	.word	0x0800de3c
 800aac4:	0800de60 	.word	0x0800de60
 800aac8:	0800de78 	.word	0x0800de78
 800aacc:	0800de84 	.word	0x0800de84
 800aad0:	0800de90 	.word	0x0800de90
 800aad4:	0800e82c 	.word	0x0800e82c
 800aad8:	0800dcd0 	.word	0x0800dcd0
 800aadc:	0800dea8 	.word	0x0800dea8

0800aae0 <m2m_wifi_init>:

sint8 m2m_wifi_init(tstrWifiInitParam *pWifiInitParam)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 800aae8:	2300      	movs	r3, #0
 800aaea:	73fb      	strb	r3, [r7, #15]

    ret = m2m_wifi_init_hold();
 800aaec:	f7ff ff1a 	bl	800a924 <m2m_wifi_init_hold>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 800aaf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d104      	bne.n	800ab06 <m2m_wifi_init+0x26>
    {
        ret = m2m_wifi_init_start(pWifiInitParam);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7ff ff29 	bl	800a954 <m2m_wifi_init_start>
 800ab02:	4603      	mov	r3, r0
 800ab04:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 800ab06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <m2m_wifi_handle_events>:
{
    hif_yield();
}

sint8 m2m_wifi_handle_events(void *arg)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b082      	sub	sp, #8
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
    return hif_handle_isr();
 800ab1a:	f7ff fb03 	bl	800a124 <hif_handle_isr>
 800ab1e:	4603      	mov	r3, r0
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <m2m_wifi_enable_ap>:
    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISABLE_P2P, NULL, 0, NULL, 0, 0);
    return ret;
}

sint8 m2m_wifi_enable_ap(CONST tstrM2MAPConfig *pstrM2MAPConfig)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b0a8      	sub	sp, #160	@ 0xa0
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
    tstrM2MAPModeConfig strM2MAPModeConfig;

    m2m_memcpy((uint8 *)&strM2MAPModeConfig.strApConfig, (uint8 *)pstrM2MAPConfig, sizeof(tstrM2MAPConfig));
 800ab30:	f107 030c 	add.w	r3, r7, #12
 800ab34:	2288      	movs	r2, #136	@ 0x88
 800ab36:	6879      	ldr	r1, [r7, #4]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7fe fe7f 	bl	800983c <m2m_memcpy>
    m2m_memcpy(strM2MAPModeConfig.strApConfigExt.au8DefRouterIP, pstrM2MAPConfig->au8DHCPServerIP, 4);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f103 0141 	add.w	r1, r3, #65	@ 0x41
 800ab44:	f107 030c 	add.w	r3, r7, #12
 800ab48:	3388      	adds	r3, #136	@ 0x88
 800ab4a:	2204      	movs	r2, #4
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7fe fe75 	bl	800983c <m2m_memcpy>
    m2m_memcpy(strM2MAPModeConfig.strApConfigExt.au8DNSServerIP, pstrM2MAPConfig->au8DHCPServerIP, 4);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f103 0141 	add.w	r1, r3, #65	@ 0x41
 800ab58:	f107 030c 	add.w	r3, r7, #12
 800ab5c:	338c      	adds	r3, #140	@ 0x8c
 800ab5e:	2204      	movs	r2, #4
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fe fe6b 	bl	800983c <m2m_memcpy>

    strM2MAPModeConfig.strApConfigExt.au8SubnetMask[0] = 0;
 800ab66:	2300      	movs	r3, #0
 800ab68:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c

    return m2m_wifi_enable_ap_ext(&strM2MAPModeConfig);
 800ab6c:	f107 030c 	add.w	r3, r7, #12
 800ab70:	4618      	mov	r0, r3
 800ab72:	f000 f805 	bl	800ab80 <m2m_wifi_enable_ap_ext>
 800ab76:	4603      	mov	r3, r0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	37a0      	adds	r7, #160	@ 0xa0
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <m2m_wifi_enable_ap_ext>:

sint8 m2m_wifi_enable_ap_ext(CONST tstrM2MAPModeConfig *pstrM2MAPModeConfig)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b088      	sub	sp, #32
 800ab84:	af04      	add	r7, sp, #16
 800ab86:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_ERR_FAIL;
 800ab88:	23f4      	movs	r3, #244	@ 0xf4
 800ab8a:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS == m2m_validate_ap_parameters(pstrM2MAPModeConfig))
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f7ff fe0b 	bl	800a7a8 <m2m_validate_ap_parameters>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10d      	bne.n	800abb4 <m2m_wifi_enable_ap_ext+0x34>
    {
        ret = hif_send(M2M_REQ_GROUP_WIFI, (M2M_REQ_DATA_PKT|M2M_WIFI_REQ_ENABLE_AP), NULL, 0, (uint8 *)pstrM2MAPModeConfig, sizeof(tstrM2MAPModeConfig), 0);
 800ab98:	2300      	movs	r3, #0
 800ab9a:	9302      	str	r3, [sp, #8]
 800ab9c:	2394      	movs	r3, #148	@ 0x94
 800ab9e:	9301      	str	r3, [sp, #4]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	2300      	movs	r3, #0
 800aba6:	2200      	movs	r2, #0
 800aba8:	21c6      	movs	r1, #198	@ 0xc6
 800abaa:	2001      	movs	r0, #1
 800abac:	f7fe ff78 	bl	8009aa0 <hif_send>
 800abb0:	4603      	mov	r3, r0
 800abb2:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 800abb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3710      	adds	r7, #16
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <chip_apply_conf>:

#define TIMEOUT						(20000) // ITCO: replace (0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800abc8:	2300      	movs	r3, #0
 800abca:	75fb      	strb	r3, [r7, #23]
	uint32 val32 = u32Conf;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800abd6:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
 800abd8:	6939      	ldr	r1, [r7, #16]
 800abda:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 800abde:	f000 fb59 	bl	800b294 <nm_write_reg>
		if(val32 != 0) {
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d013      	beq.n	800ac10 <chip_apply_conf+0x50>
			uint32 reg = 0;
 800abe8:	2300      	movs	r3, #0
 800abea:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
 800abec:	f107 030c 	add.w	r3, r7, #12
 800abf0:	4619      	mov	r1, r3
 800abf2:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 800abf6:	f000 fb3f 	bl	800b278 <nm_read_reg_with_ret>
 800abfa:	4603      	mov	r3, r0
 800abfc:	75fb      	strb	r3, [r7, #23]
			if(ret == M2M_SUCCESS) {
 800abfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d1e8      	bne.n	800abd8 <chip_apply_conf+0x18>
				if(reg == val32)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d002      	beq.n	800ac14 <chip_apply_conf+0x54>
		nm_write_reg(rNMI_GP_REG_1, val32);
 800ac0e:	e7e3      	b.n	800abd8 <chip_apply_conf+0x18>
					break;
			}
		} else {
			break;
 800ac10:	bf00      	nop
 800ac12:	e000      	b.n	800ac16 <chip_apply_conf+0x56>
					break;
 800ac14:	bf00      	nop
		}
	} while(1);

	return M2M_SUCCESS;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3718      	adds	r7, #24
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800ac26:	2300      	movs	r3, #0
 800ac28:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	71fb      	strb	r3, [r7, #7]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
 800ac2e:	463b      	mov	r3, r7
 800ac30:	4619      	mov	r1, r3
 800ac32:	f241 4008 	movw	r0, #5128	@ 0x1408
 800ac36:	f000 fb1f 	bl	800b278 <nm_read_reg_with_ret>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800ac3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d12b      	bne.n	800ac9e <enable_interrupts+0x7e>

	reg |= ((uint32) 1 << 8);
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac4c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	4619      	mov	r1, r3
 800ac52:	f241 4008 	movw	r0, #5128	@ 0x1408
 800ac56:	f000 fb1d 	bl	800b294 <nm_write_reg>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800ac5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d11d      	bne.n	800aca2 <enable_interrupts+0x82>

	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
 800ac66:	463b      	mov	r3, r7
 800ac68:	4619      	mov	r1, r3
 800ac6a:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800ac6e:	f000 fb03 	bl	800b278 <nm_read_reg_with_ret>
 800ac72:	4603      	mov	r3, r0
 800ac74:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800ac76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d113      	bne.n	800aca6 <enable_interrupts+0x86>

	reg |= ((uint32) 1 << 16);
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac84:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	4619      	mov	r1, r3
 800ac8a:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800ac8e:	f000 fb01 	bl	800b294 <nm_write_reg>
 800ac92:	4603      	mov	r3, r0
 800ac94:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800ac96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac9a:	2b00      	cmp	r3, #0
ERR1:
 800ac9c:	e004      	b.n	800aca8 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800ac9e:	bf00      	nop
 800aca0:	e002      	b.n	800aca8 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800aca2:	bf00      	nop
 800aca4:	e000      	b.n	800aca8 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800aca6:	bf00      	nop
	return ret;
 800aca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
 800acba:	4b31      	ldr	r3, [pc, #196]	@ (800ad80 <nmi_get_chipid+0xcc>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d157      	bne.n	800ad72 <nmi_get_chipid+0xbe>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
 800acc2:	492f      	ldr	r1, [pc, #188]	@ (800ad80 <nmi_get_chipid+0xcc>)
 800acc4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800acc8:	f000 fad6 	bl	800b278 <nm_read_reg_with_ret>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d004      	beq.n	800acdc <nmi_get_chipid+0x28>
			chipid = 0;
 800acd2:	4b2b      	ldr	r3, [pc, #172]	@ (800ad80 <nmi_get_chipid+0xcc>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	601a      	str	r2, [r3, #0]
			return 0;
 800acd8:	2300      	movs	r3, #0
 800acda:	e04c      	b.n	800ad76 <nmi_get_chipid+0xc2>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 800acdc:	1d3b      	adds	r3, r7, #4
 800acde:	4619      	mov	r1, r3
 800ace0:	f241 30f4 	movw	r0, #5108	@ 0x13f4
 800ace4:	f000 fac8 	bl	800b278 <nm_read_reg_with_ret>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d004      	beq.n	800acf8 <nmi_get_chipid+0x44>
			chipid = 0;
 800acee:	4b24      	ldr	r3, [pc, #144]	@ (800ad80 <nmi_get_chipid+0xcc>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	601a      	str	r2, [r3, #0]
			return 0;
 800acf4:	2300      	movs	r3, #0
 800acf6:	e03e      	b.n	800ad76 <nmi_get_chipid+0xc2>
		}

		if (chipid == 0x1002a0)  {
 800acf8:	4b21      	ldr	r3, [pc, #132]	@ (800ad80 <nmi_get_chipid+0xcc>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a21      	ldr	r2, [pc, #132]	@ (800ad84 <nmi_get_chipid+0xd0>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d106      	bne.n	800ad10 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d028      	beq.n	800ad5a <nmi_get_chipid+0xa6>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
 800ad08:	4b1d      	ldr	r3, [pc, #116]	@ (800ad80 <nmi_get_chipid+0xcc>)
 800ad0a:	4a1f      	ldr	r2, [pc, #124]	@ (800ad88 <nmi_get_chipid+0xd4>)
 800ad0c:	601a      	str	r2, [r3, #0]
 800ad0e:	e024      	b.n	800ad5a <nmi_get_chipid+0xa6>
			}
		} else if(chipid == 0x1002b0) {
 800ad10:	4b1b      	ldr	r3, [pc, #108]	@ (800ad80 <nmi_get_chipid+0xcc>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a1d      	ldr	r2, [pc, #116]	@ (800ad8c <nmi_get_chipid+0xd8>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d10d      	bne.n	800ad36 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2b03      	cmp	r3, #3
 800ad1e:	d01c      	beq.n	800ad5a <nmi_get_chipid+0xa6>
			} else if(rfrevid == 4) { /* 1002B1 */
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b04      	cmp	r3, #4
 800ad24:	d103      	bne.n	800ad2e <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
 800ad26:	4b16      	ldr	r3, [pc, #88]	@ (800ad80 <nmi_get_chipid+0xcc>)
 800ad28:	4a19      	ldr	r2, [pc, #100]	@ (800ad90 <nmi_get_chipid+0xdc>)
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	e015      	b.n	800ad5a <nmi_get_chipid+0xa6>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
 800ad2e:	4b14      	ldr	r3, [pc, #80]	@ (800ad80 <nmi_get_chipid+0xcc>)
 800ad30:	4a18      	ldr	r2, [pc, #96]	@ (800ad94 <nmi_get_chipid+0xe0>)
 800ad32:	601a      	str	r2, [r3, #0]
 800ad34:	e011      	b.n	800ad5a <nmi_get_chipid+0xa6>
			}
		}else if(chipid == 0x1000F0) {
 800ad36:	4b12      	ldr	r3, [pc, #72]	@ (800ad80 <nmi_get_chipid+0xcc>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a17      	ldr	r2, [pc, #92]	@ (800ad98 <nmi_get_chipid+0xe4>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d10c      	bne.n	800ad5a <nmi_get_chipid+0xa6>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
 800ad40:	490f      	ldr	r1, [pc, #60]	@ (800ad80 <nmi_get_chipid+0xcc>)
 800ad42:	f44f 106c 	mov.w	r0, #3866624	@ 0x3b0000
 800ad46:	f000 fa97 	bl	800b278 <nm_read_reg_with_ret>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d004      	beq.n	800ad5a <nmi_get_chipid+0xa6>
			chipid = 0;
 800ad50:	4b0b      	ldr	r3, [pc, #44]	@ (800ad80 <nmi_get_chipid+0xcc>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	601a      	str	r2, [r3, #0]
			return 0;
 800ad56:	2300      	movs	r3, #0
 800ad58:	e00d      	b.n	800ad76 <nmi_get_chipid+0xc2>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
 800ad5a:	4b09      	ldr	r3, [pc, #36]	@ (800ad80 <nmi_get_chipid+0xcc>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800ad62:	4a07      	ldr	r2, [pc, #28]	@ (800ad80 <nmi_get_chipid+0xcc>)
 800ad64:	6013      	str	r3, [r2, #0]
		chipid |= 0x050000;
 800ad66:	4b06      	ldr	r3, [pc, #24]	@ (800ad80 <nmi_get_chipid+0xcc>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800ad6e:	4a04      	ldr	r2, [pc, #16]	@ (800ad80 <nmi_get_chipid+0xcc>)
 800ad70:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
 800ad72:	4b03      	ldr	r3, [pc, #12]	@ (800ad80 <nmi_get_chipid+0xcc>)
 800ad74:	681b      	ldr	r3, [r3, #0]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	20000638 	.word	0x20000638
 800ad84:	001002a0 	.word	0x001002a0
 800ad88:	001002a1 	.word	0x001002a1
 800ad8c:	001002b0 	.word	0x001002b0
 800ad90:	001002b1 	.word	0x001002b1
 800ad94:	001002b2 	.word	0x001002b2
 800ad98:	001000f0 	.word	0x001000f0

0800ad9c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800ada2:	2300      	movs	r3, #0
 800ada4:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800ada6:	463b      	mov	r3, r7
 800ada8:	4619      	mov	r1, r3
 800adaa:	2010      	movs	r0, #16
 800adac:	f000 fa64 	bl	800b278 <nm_read_reg_with_ret>
 800adb0:	4603      	mov	r3, r0
 800adb2:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS) goto ERR1;
 800adb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d144      	bne.n	800ae46 <chip_sleep+0xaa>
		if((reg & NBIT0) == 0) break;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	f003 0301 	and.w	r3, r3, #1
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d000      	beq.n	800adc8 <chip_sleep+0x2c>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800adc6:	e7ee      	b.n	800ada6 <chip_sleep+0xa>
		if((reg & NBIT0) == 0) break;
 800adc8:	bf00      	nop
	}

	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800adca:	463b      	mov	r3, r7
 800adcc:	4619      	mov	r1, r3
 800adce:	2001      	movs	r0, #1
 800add0:	f000 fa52 	bl	800b278 <nm_read_reg_with_ret>
 800add4:	4603      	mov	r3, r0
 800add6:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800add8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d134      	bne.n	800ae4a <chip_sleep+0xae>
	if(reg & NBIT1)
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	f003 0302 	and.w	r3, r3, #2
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00e      	beq.n	800ae08 <chip_sleep+0x6c>
	{
		reg &=~NBIT1;
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	f023 0302 	bic.w	r3, r3, #2
 800adf0:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	4619      	mov	r1, r3
 800adf6:	2001      	movs	r0, #1
 800adf8:	f000 fa4c 	bl	800b294 <nm_write_reg>
 800adfc:	4603      	mov	r3, r0
 800adfe:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800ae00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d122      	bne.n	800ae4e <chip_sleep+0xb2>
	}

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800ae08:	463b      	mov	r3, r7
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	200b      	movs	r0, #11
 800ae0e:	f000 fa33 	bl	800b278 <nm_read_reg_with_ret>
 800ae12:	4603      	mov	r3, r0
 800ae14:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800ae16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d119      	bne.n	800ae52 <chip_sleep+0xb6>
	if(reg & NBIT0)
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	f003 0301 	and.w	r3, r3, #1
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d016      	beq.n	800ae56 <chip_sleep+0xba>
	{
		reg &= ~NBIT0;
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	f023 0301 	bic.w	r3, r3, #1
 800ae2e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	4619      	mov	r1, r3
 800ae34:	200b      	movs	r0, #11
 800ae36:	f000 fa2d 	bl	800b294 <nm_write_reg>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800ae3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae42:	2b00      	cmp	r3, #0
	}

ERR1:
 800ae44:	e007      	b.n	800ae56 <chip_sleep+0xba>
		if(ret != M2M_SUCCESS) goto ERR1;
 800ae46:	bf00      	nop
 800ae48:	e006      	b.n	800ae58 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800ae4a:	bf00      	nop
 800ae4c:	e004      	b.n	800ae58 <chip_sleep+0xbc>
		if(ret != M2M_SUCCESS)goto ERR1;
 800ae4e:	bf00      	nop
 800ae50:	e002      	b.n	800ae58 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800ae52:	bf00      	nop
 800ae54:	e000      	b.n	800ae58 <chip_sleep+0xbc>
ERR1:
 800ae56:	bf00      	nop
	return ret;
 800ae58:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <chip_wake>:
sint8 chip_wake(void)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	73fb      	strb	r3, [r7, #15]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	607b      	str	r3, [r7, #4]
 800ae72:	2300      	movs	r3, #0
 800ae74:	603b      	str	r3, [r7, #0]
 800ae76:	2300      	movs	r3, #0
 800ae78:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800ae7a:	1d3b      	adds	r3, r7, #4
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	200b      	movs	r0, #11
 800ae80:	f000 f9fa 	bl	800b278 <nm_read_reg_with_ret>
 800ae84:	4603      	mov	r3, r0
 800ae86:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800ae88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d16d      	bne.n	800af6c <chip_wake+0x108>

	if(!(reg & NBIT0))
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f003 0301 	and.w	r3, r3, #1
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10c      	bne.n	800aeb4 <chip_wake+0x50>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f043 0301 	orr.w	r3, r3, #1
 800aea0:	4619      	mov	r1, r3
 800aea2:	200b      	movs	r0, #11
 800aea4:	f000 f9f6 	bl	800b294 <nm_write_reg>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800aeac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d15d      	bne.n	800af70 <chip_wake+0x10c>
	}

	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800aeb4:	1d3b      	adds	r3, r7, #4
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	2001      	movs	r0, #1
 800aeba:	f000 f9dd 	bl	800b278 <nm_read_reg_with_ret>
 800aebe:	4603      	mov	r3, r0
 800aec0:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800aec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d154      	bne.n	800af74 <chip_wake+0x110>
	/* Set bit 1 */
	if(!(reg & NBIT1))
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f003 0302 	and.w	r3, r3, #2
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d000      	beq.n	800aed6 <chip_wake+0x72>
 800aed4:	e00d      	b.n	800aef2 <chip_wake+0x8e>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f043 0302 	orr.w	r3, r3, #2
 800aedc:	4619      	mov	r1, r3
 800aede:	2001      	movs	r0, #1
 800aee0:	f000 f9d8 	bl	800b294 <nm_write_reg>
 800aee4:	4603      	mov	r3, r0
 800aee6:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 800aee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d000      	beq.n	800aef2 <chip_wake+0x8e>
 800aef0:	e041      	b.n	800af76 <chip_wake+0x112>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 800aef2:	463b      	mov	r3, r7
 800aef4:	4619      	mov	r1, r3
 800aef6:	200f      	movs	r0, #15
 800aef8:	f000 f9be 	bl	800b278 <nm_read_reg_with_ret>
 800aefc:	4603      	mov	r3, r0
 800aefe:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) {
 800af00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d010      	beq.n	800af2a <chip_wake+0xc6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
 800af08:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 800af0c:	491d      	ldr	r1, [pc, #116]	@ (800af84 <chip_wake+0x120>)
 800af0e:	481e      	ldr	r0, [pc, #120]	@ (800af88 <chip_wake+0x124>)
 800af10:	f001 fdda 	bl	800cac8 <iprintf>
 800af14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	4619      	mov	r1, r3
 800af1c:	481b      	ldr	r0, [pc, #108]	@ (800af8c <chip_wake+0x128>)
 800af1e:	f001 fdd3 	bl	800cac8 <iprintf>
 800af22:	200d      	movs	r0, #13
 800af24:	f001 fde2 	bl	800caec <putchar>
			goto _WAKE_EXIT;
 800af28:	e025      	b.n	800af76 <chip_wake+0x112>
		}
		if(clk_status_reg & NBIT2) {
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	f003 0304 	and.w	r3, r3, #4
 800af30:	2b00      	cmp	r3, #0
 800af32:	d117      	bne.n	800af64 <chip_wake+0x100>
			break;
		}
		nm_bsp_sleep(2);
 800af34:	2002      	movs	r0, #2
 800af36:	f7fe fb55 	bl	80095e4 <nm_bsp_sleep>
		trials++;
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	3301      	adds	r3, #1
 800af3e:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	2b04      	cmp	r3, #4
 800af44:	d9d5      	bls.n	800aef2 <chip_wake+0x8e>
		{
			M2M_ERR("Failed to wakup the chip\n");
 800af46:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800af4a:	490e      	ldr	r1, [pc, #56]	@ (800af84 <chip_wake+0x120>)
 800af4c:	480e      	ldr	r0, [pc, #56]	@ (800af88 <chip_wake+0x124>)
 800af4e:	f001 fdbb 	bl	800cac8 <iprintf>
 800af52:	480f      	ldr	r0, [pc, #60]	@ (800af90 <chip_wake+0x12c>)
 800af54:	f001 fe28 	bl	800cba8 <puts>
 800af58:	200d      	movs	r0, #13
 800af5a:	f001 fdc7 	bl	800caec <putchar>
			ret = M2M_ERR_TIME_OUT;
 800af5e:	23fc      	movs	r3, #252	@ 0xfc
 800af60:	73fb      	strb	r3, [r7, #15]
			goto _WAKE_EXIT;
 800af62:	e008      	b.n	800af76 <chip_wake+0x112>
			break;
 800af64:	bf00      	nop
		}
	}while(1);

	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
 800af66:	f000 f96f 	bl	800b248 <nm_bus_reset>
 800af6a:	e004      	b.n	800af76 <chip_wake+0x112>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800af6c:	bf00      	nop
 800af6e:	e002      	b.n	800af76 <chip_wake+0x112>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800af70:	bf00      	nop
 800af72:	e000      	b.n	800af76 <chip_wake+0x112>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800af74:	bf00      	nop

_WAKE_EXIT:
	return ret;
 800af76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	0800e840 	.word	0x0800e840
 800af88:	0800df9c 	.word	0x0800df9c
 800af8c:	0800dfb0 	.word	0x0800dfb0
 800af90:	0800dfc8 	.word	0x0800dfc8

0800af94 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b088      	sub	sp, #32
 800af98:	af00      	add	r7, sp, #0
 800af9a:	4603      	mov	r3, r0
 800af9c:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800af9e:	2300      	movs	r3, #0
 800afa0:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800afa2:	2300      	movs	r3, #0
 800afa4:	61bb      	str	r3, [r7, #24]
 800afa6:	2300      	movs	r3, #0
 800afa8:	617b      	str	r3, [r7, #20]
	uint32 u32GpReg1 = 0;
 800afaa:	2300      	movs	r3, #0
 800afac:	613b      	str	r3, [r7, #16]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
 800afae:	4b44      	ldr	r3, [pc, #272]	@ (800b0c0 <wait_for_bootrom+0x12c>)
 800afb0:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
 800afb2:	2300      	movs	r3, #0
 800afb4:	61bb      	str	r3, [r7, #24]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800afb6:	f241 0014 	movw	r0, #4116	@ 0x1014
 800afba:	f000 f951 	bl	800b260 <nm_read_reg>
 800afbe:	61b8      	str	r0, [r7, #24]
		if (reg & 0x80000000) {
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	db03      	blt.n	800afce <wait_for_bootrom+0x3a>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
 800afc6:	2001      	movs	r0, #1
 800afc8:	f7fe fb0c 	bl	80095e4 <nm_bsp_sleep>
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800afcc:	e7f3      	b.n	800afb6 <wait_for_bootrom+0x22>
			break;
 800afce:	bf00      	nop
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
 800afd0:	483c      	ldr	r0, [pc, #240]	@ (800b0c4 <wait_for_bootrom+0x130>)
 800afd2:	f000 f945 	bl	800b260 <nm_read_reg>
 800afd6:	61b8      	str	r0, [r7, #24]
	reg &= 0x1;
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	f003 0301 	and.w	r3, r3, #1
 800afde:	61bb      	str	r3, [r7, #24]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d119      	bne.n	800b01a <wait_for_bootrom+0x86>
	{
		reg = 0;
 800afe6:	2300      	movs	r3, #0
 800afe8:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
 800afea:	e012      	b.n	800b012 <wait_for_bootrom+0x7e>
		{
			nm_bsp_sleep(1);
 800afec:	2001      	movs	r0, #1
 800afee:	f7fe faf9 	bl	80095e4 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
 800aff2:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 800aff6:	f000 f933 	bl	800b260 <nm_read_reg>
 800affa:	61b8      	str	r0, [r7, #24]

			if(++cnt > (uint32)TIMEOUT)
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	3301      	adds	r3, #1
 800b000:	617b      	str	r3, [r7, #20]
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800b008:	4293      	cmp	r3, r2
 800b00a:	d902      	bls.n	800b012 <wait_for_bootrom+0x7e>
			{
				M2M_DBG("failed to load firmware from flash.\n");
				ret = M2M_ERR_INIT;
 800b00c:	23fb      	movs	r3, #251	@ 0xfb
 800b00e:	77fb      	strb	r3, [r7, #31]
				goto ERR2;
 800b010:	e04f      	b.n	800b0b2 <wait_for_bootrom+0x11e>
		while(reg != M2M_FINISH_BOOT_ROM)
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	4a2c      	ldr	r2, [pc, #176]	@ (800b0c8 <wait_for_bootrom+0x134>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d1e8      	bne.n	800afec <wait_for_bootrom+0x58>
			}
		}
	}

	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
 800b01a:	79fb      	ldrb	r3, [r7, #7]
 800b01c:	2b02      	cmp	r3, #2
 800b01e:	d10a      	bne.n	800b036 <wait_for_bootrom+0xa2>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800b020:	492a      	ldr	r1, [pc, #168]	@ (800b0cc <wait_for_bootrom+0x138>)
 800b022:	482b      	ldr	r0, [pc, #172]	@ (800b0d0 <wait_for_bootrom+0x13c>)
 800b024:	f000 f936 	bl	800b294 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
 800b028:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 800b02c:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b030:	f000 f930 	bl	800b294 <nm_write_reg>
 800b034:	e01c      	b.n	800b070 <wait_for_bootrom+0xdc>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
 800b036:	79fb      	ldrb	r3, [r7, #7]
 800b038:	2b03      	cmp	r3, #3
 800b03a:	d109      	bne.n	800b050 <wait_for_bootrom+0xbc>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800b03c:	4923      	ldr	r1, [pc, #140]	@ (800b0cc <wait_for_bootrom+0x138>)
 800b03e:	4824      	ldr	r0, [pc, #144]	@ (800b0d0 <wait_for_bootrom+0x13c>)
 800b040:	f000 f928 	bl	800b294 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
 800b044:	2100      	movs	r1, #0
 800b046:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b04a:	f000 f923 	bl	800b294 <nm_write_reg>
 800b04e:	e00f      	b.n	800b070 <wait_for_bootrom+0xdc>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
 800b050:	79fb      	ldrb	r3, [r7, #7]
 800b052:	2b04      	cmp	r3, #4
 800b054:	d107      	bne.n	800b066 <wait_for_bootrom+0xd2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
 800b056:	2380      	movs	r3, #128	@ 0x80
 800b058:	613b      	str	r3, [r7, #16]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800b05a:	68f9      	ldr	r1, [r7, #12]
 800b05c:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b060:	f000 f918 	bl	800b294 <nm_write_reg>
 800b064:	e004      	b.n	800b070 <wait_for_bootrom+0xdc>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800b066:	68f9      	ldr	r1, [r7, #12]
 800b068:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b06c:	f000 f912 	bl	800b294 <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
 800b070:	f7ff fe20 	bl	800acb4 <nmi_get_chipid>
 800b074:	4603      	mov	r3, r0
 800b076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b07a:	f5b3 7f68 	cmp.w	r3, #928	@ 0x3a0
 800b07e:	d306      	bcc.n	800b08e <wait_for_bootrom+0xfa>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	f043 0302 	orr.w	r3, r3, #2
 800b086:	4618      	mov	r0, r3
 800b088:	f7ff fd9a 	bl	800abc0 <chip_apply_conf>
 800b08c:	e002      	b.n	800b094 <wait_for_bootrom+0x100>
	} else {
		chip_apply_conf(u32GpReg1);
 800b08e:	6938      	ldr	r0, [r7, #16]
 800b090:	f7ff fd96 	bl	800abc0 <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
 800b094:	480f      	ldr	r0, [pc, #60]	@ (800b0d4 <wait_for_bootrom+0x140>)
 800b096:	f001 fd17 	bl	800cac8 <iprintf>
 800b09a:	68f9      	ldr	r1, [r7, #12]
 800b09c:	480e      	ldr	r0, [pc, #56]	@ (800b0d8 <wait_for_bootrom+0x144>)
 800b09e:	f001 fd13 	bl	800cac8 <iprintf>
 800b0a2:	200d      	movs	r0, #13
 800b0a4:	f001 fd22 	bl	800caec <putchar>

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
 800b0a8:	490c      	ldr	r1, [pc, #48]	@ (800b0dc <wait_for_bootrom+0x148>)
 800b0aa:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 800b0ae:	f000 f8f1 	bl	800b294 <nm_write_reg>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
 800b0b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3720      	adds	r7, #32
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	13771377 	.word	0x13771377
 800b0c4:	000207bc 	.word	0x000207bc
 800b0c8:	10add09e 	.word	0x10add09e
 800b0cc:	3c1cd57d 	.word	0x3c1cd57d
 800b0d0:	000207ac 	.word	0x000207ac
 800b0d4:	0800dfe4 	.word	0x0800dfe4
 800b0d8:	0800dff0 	.word	0x0800dff0
 800b0dc:	ef522f61 	.word	0xef522f61

0800b0e0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b088      	sub	sp, #32
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	61bb      	str	r3, [r7, #24]
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
 800b0f6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800b0fa:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
 800b0fc:	f241 038c 	movw	r3, #4236	@ 0x108c
 800b100:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 800b102:	4b1a      	ldr	r3, [pc, #104]	@ (800b16c <wait_for_firmware_start+0x8c>)
 800b104:	60bb      	str	r3, [r7, #8]

	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
 800b106:	79fb      	ldrb	r3, [r7, #7]
 800b108:	2b02      	cmp	r3, #2
 800b10a:	d002      	beq.n	800b112 <wait_for_firmware_start+0x32>
 800b10c:	79fb      	ldrb	r3, [r7, #7]
 800b10e:	2b03      	cmp	r3, #3
 800b110:	d116      	bne.n	800b140 <wait_for_firmware_start+0x60>
		regAddress = NMI_REV_REG;
 800b112:	4b17      	ldr	r3, [pc, #92]	@ (800b170 <wait_for_firmware_start+0x90>)
 800b114:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
 800b116:	4b17      	ldr	r3, [pc, #92]	@ (800b174 <wait_for_firmware_start+0x94>)
 800b118:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}


	while (checkValue != reg)
 800b11a:	e011      	b.n	800b140 <wait_for_firmware_start+0x60>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
 800b11c:	2002      	movs	r0, #2
 800b11e:	f7fe fa61 	bl	80095e4 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	4618      	mov	r0, r3
 800b126:	f000 f89b 	bl	800b260 <nm_read_reg>
 800b12a:	61b8      	str	r0, [r7, #24]
		if(++cnt >= u32Timeout)
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	3301      	adds	r3, #1
 800b130:	617b      	str	r3, [r7, #20]
 800b132:	697a      	ldr	r2, [r7, #20]
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	429a      	cmp	r2, r3
 800b138:	d302      	bcc.n	800b140 <wait_for_firmware_start+0x60>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
 800b13a:	23fb      	movs	r3, #251	@ 0xfb
 800b13c:	77fb      	strb	r3, [r7, #31]
			goto ERR;
 800b13e:	e00e      	b.n	800b15e <wait_for_firmware_start+0x7e>
	while (checkValue != reg)
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	69ba      	ldr	r2, [r7, #24]
 800b144:	429a      	cmp	r2, r3
 800b146:	d1e9      	bne.n	800b11c <wait_for_firmware_start+0x3c>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	4a08      	ldr	r2, [pc, #32]	@ (800b16c <wait_for_firmware_start+0x8c>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d105      	bne.n	800b15c <wait_for_firmware_start+0x7c>
	{
		nm_write_reg(NMI_STATE_REG, 0);
 800b150:	2100      	movs	r1, #0
 800b152:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b156:	f000 f89d 	bl	800b294 <nm_write_reg>
 800b15a:	e000      	b.n	800b15e <wait_for_firmware_start+0x7e>
	}
ERR:
 800b15c:	bf00      	nop
	return ret;
 800b15e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3720      	adds	r7, #32
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	02532636 	.word	0x02532636
 800b170:	000207ac 	.word	0x000207ac
 800b174:	d75dc1c3 	.word	0xd75dc1c3

0800b178 <chip_deinit>:

sint8 chip_deinit(void)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800b17e:	2300      	movs	r3, #0
 800b180:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 800b182:	463b      	mov	r3, r7
 800b184:	4619      	mov	r1, r3
 800b186:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800b18a:	f000 f875 	bl	800b278 <nm_read_reg_with_ret>
 800b18e:	4603      	mov	r3, r0
 800b190:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800b192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00c      	beq.n	800b1b4 <chip_deinit+0x3c>
		M2M_ERR("failed to de-initialize\n");
 800b19a:	f240 2205 	movw	r2, #517	@ 0x205
 800b19e:	4917      	ldr	r1, [pc, #92]	@ (800b1fc <chip_deinit+0x84>)
 800b1a0:	4817      	ldr	r0, [pc, #92]	@ (800b200 <chip_deinit+0x88>)
 800b1a2:	f001 fc91 	bl	800cac8 <iprintf>
 800b1a6:	4817      	ldr	r0, [pc, #92]	@ (800b204 <chip_deinit+0x8c>)
 800b1a8:	f001 fcfe 	bl	800cba8 <puts>
 800b1ac:	200d      	movs	r0, #13
 800b1ae:	f001 fc9d 	bl	800caec <putchar>
		goto ERR1;
 800b1b2:	e01d      	b.n	800b1f0 <chip_deinit+0x78>
	}
	reg &= ~(1 << 10);
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b1ba:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	4619      	mov	r1, r3
 800b1c0:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800b1c4:	f000 f866 	bl	800b294 <nm_write_reg>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800b1cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00c      	beq.n	800b1ee <chip_deinit+0x76>
		M2M_ERR("failed to de-initialize\n");
 800b1d4:	f240 220b 	movw	r2, #523	@ 0x20b
 800b1d8:	4908      	ldr	r1, [pc, #32]	@ (800b1fc <chip_deinit+0x84>)
 800b1da:	4809      	ldr	r0, [pc, #36]	@ (800b200 <chip_deinit+0x88>)
 800b1dc:	f001 fc74 	bl	800cac8 <iprintf>
 800b1e0:	4808      	ldr	r0, [pc, #32]	@ (800b204 <chip_deinit+0x8c>)
 800b1e2:	f001 fce1 	bl	800cba8 <puts>
 800b1e6:	200d      	movs	r0, #13
 800b1e8:	f001 fc80 	bl	800caec <putchar>
		goto ERR1;
 800b1ec:	e000      	b.n	800b1f0 <chip_deinit+0x78>
	}

ERR1:
 800b1ee:	bf00      	nop
	return ret;
 800b1f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	0800e84c 	.word	0x0800e84c
 800b200:	0800df9c 	.word	0x0800df9c
 800b204:	0800e008 	.word	0x0800e008

0800b208 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800b210:	2300      	movs	r3, #0
 800b212:	73fb      	strb	r3, [r7, #15]
	ret = nm_bus_init(pvInitVal);
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f7fe fab7 	bl	8009788 <nm_bus_init>
 800b21a:	4603      	mov	r3, r0
 800b21c:	73fb      	strb	r3, [r7, #15]
	return ret;
 800b21e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b082      	sub	sp, #8
 800b22e:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800b230:	2300      	movs	r3, #0
 800b232:	71fb      	strb	r3, [r7, #7]
	ret = nm_bus_deinit();
 800b234:	f7fe fafa 	bl	800982c <nm_bus_deinit>
 800b238:	4603      	mov	r3, r0
 800b23a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800b23c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b240:	4618      	mov	r0, r3
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800b24e:	2300      	movs	r3, #0
 800b250:	71fb      	strb	r3, [r7, #7]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
 800b252:	f000 fcdd 	bl	800bc10 <nm_spi_reset>
 800b256:	4603      	mov	r3, r0
#else
#error "Please define bus usage"
#endif

	return ret;
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f001 f9bb 	bl	800c5e4 <nm_spi_read_reg>
 800b26e:	4603      	mov	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Please define bus usage"
#endif

}
 800b270:	4618      	mov	r0, r3
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 ff99 	bl	800c1bc <nm_spi_read_reg_with_ret>
 800b28a:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Please define bus usage"
#endif
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
 800b29e:	6839      	ldr	r1, [r7, #0]
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 fe55 	bl	800bf50 <nm_spi_write_reg>
 800b2a6:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Please define bus usage"
#endif
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
 800b2be:	88fb      	ldrh	r3, [r7, #6]
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	68b9      	ldr	r1, [r7, #8]
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f001 f99c 	bl	800c602 <nm_spi_read_block>
 800b2ca:	4603      	mov	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Please define bus usage"
#endif

}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3710      	adds	r7, #16
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b086      	sub	sp, #24
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800b2e0:	4b20      	ldr	r3, [pc, #128]	@ (800b364 <nm_read_block+0x90>)
 800b2e2:	881b      	ldrh	r3, [r3, #0]
 800b2e4:	3b08      	subs	r3, #8
 800b2e6:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800b2f0:	8a3b      	ldrh	r3, [r7, #16]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d80f      	bhi.n	800b318 <nm_read_block+0x44>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
 800b2f8:	68ba      	ldr	r2, [r7, #8]
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	b292      	uxth	r2, r2
 800b302:	4619      	mov	r1, r3
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f7ff ffd3 	bl	800b2b0 <p_nm_read_block>
 800b30a:	4603      	mov	r3, r0
 800b30c:	b2da      	uxtb	r2, r3
 800b30e:	7cfb      	ldrb	r3, [r7, #19]
 800b310:	4413      	add	r3, r2
 800b312:	b2db      	uxtb	r3, r3
 800b314:	74fb      	strb	r3, [r7, #19]
			break;
 800b316:	e01f      	b.n	800b358 <nm_read_block+0x84>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	4413      	add	r3, r2
 800b31e:	8a3a      	ldrh	r2, [r7, #16]
 800b320:	4619      	mov	r1, r3
 800b322:	68f8      	ldr	r0, [r7, #12]
 800b324:	f7ff ffc4 	bl	800b2b0 <p_nm_read_block>
 800b328:	4603      	mov	r3, r0
 800b32a:	b2da      	uxtb	r2, r3
 800b32c:	7cfb      	ldrb	r3, [r7, #19]
 800b32e:	4413      	add	r3, r2
 800b330:	b2db      	uxtb	r3, r3
 800b332:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800b334:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d10c      	bne.n	800b356 <nm_read_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800b33c:	8a3b      	ldrh	r3, [r7, #16]
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800b344:	8a3b      	ldrh	r3, [r7, #16]
 800b346:	697a      	ldr	r2, [r7, #20]
 800b348:	4413      	add	r3, r2
 800b34a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800b34c:	8a3b      	ldrh	r3, [r7, #16]
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	4413      	add	r3, r2
 800b352:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800b354:	e7cc      	b.n	800b2f0 <nm_read_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800b356:	bf00      	nop
		}
	}

	return s8Ret;
 800b358:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3718      	adds	r7, #24
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	2000000c 	.word	0x2000000c

0800b368 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	4613      	mov	r3, r2
 800b374:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
 800b376:	88fb      	ldrh	r3, [r7, #6]
 800b378:	461a      	mov	r2, r3
 800b37a:	68b9      	ldr	r1, [r7, #8]
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f001 f95e 	bl	800c63e <nm_spi_write_block>
 800b382:	4603      	mov	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Please define bus usage"
#endif

}
 800b384:	4618      	mov	r0, r3
 800b386:	3710      	adds	r7, #16
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800b398:	4b20      	ldr	r3, [pc, #128]	@ (800b41c <nm_write_block+0x90>)
 800b39a:	881b      	ldrh	r3, [r3, #0]
 800b39c:	3b08      	subs	r3, #8
 800b39e:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800b3a8:	8a3b      	ldrh	r3, [r7, #16]
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d80f      	bhi.n	800b3d0 <nm_write_block+0x44>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	b292      	uxth	r2, r2
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f7ff ffd3 	bl	800b368 <p_nm_write_block>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	b2da      	uxtb	r2, r3
 800b3c6:	7cfb      	ldrb	r3, [r7, #19]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	74fb      	strb	r3, [r7, #19]
			break;
 800b3ce:	e01f      	b.n	800b410 <nm_write_block+0x84>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800b3d0:	68ba      	ldr	r2, [r7, #8]
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	8a3a      	ldrh	r2, [r7, #16]
 800b3d8:	4619      	mov	r1, r3
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f7ff ffc4 	bl	800b368 <p_nm_write_block>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	b2da      	uxtb	r2, r3
 800b3e4:	7cfb      	ldrb	r3, [r7, #19]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800b3ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10c      	bne.n	800b40e <nm_write_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800b3f4:	8a3b      	ldrh	r3, [r7, #16]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	1ad3      	subs	r3, r2, r3
 800b3fa:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800b3fc:	8a3b      	ldrh	r3, [r7, #16]
 800b3fe:	697a      	ldr	r2, [r7, #20]
 800b400:	4413      	add	r3, r2
 800b402:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800b404:	8a3b      	ldrh	r3, [r7, #16]
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	4413      	add	r3, r2
 800b40a:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800b40c:	e7cc      	b.n	800b3a8 <nm_write_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800b40e:	bf00      	nop
		}
	}

	return s8Ret;
 800b410:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3718      	adds	r7, #24
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	2000000c 	.word	0x2000000c

0800b420 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b088      	sub	sp, #32
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
 800b428:	2300      	movs	r3, #0
 800b42a:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
 800b42c:	2300      	movs	r3, #0
 800b42e:	77fb      	strb	r3, [r7, #31]
	tstrGpRegs strgp = {0};
 800b430:	f107 030c 	add.w	r3, r7, #12
 800b434:	2200      	movs	r2, #0
 800b436:	601a      	str	r2, [r3, #0]
 800b438:	605a      	str	r2, [r3, #4]
	if (pstrRev != NULL)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d07e      	beq.n	800b53e <nm_get_firmware_full_info+0x11e>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
 800b440:	2228      	movs	r2, #40	@ 0x28
 800b442:	2100      	movs	r1, #0
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f7fe fa19 	bl	800987c <m2m_memset>
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
 800b44a:	f107 0314 	add.w	r3, r7, #20
 800b44e:	4619      	mov	r1, r3
 800b450:	483e      	ldr	r0, [pc, #248]	@ (800b54c <nm_get_firmware_full_info+0x12c>)
 800b452:	f7ff ff11 	bl	800b278 <nm_read_reg_with_ret>
 800b456:	4603      	mov	r3, r0
 800b458:	77fb      	strb	r3, [r7, #31]
		if(ret == M2M_SUCCESS)
 800b45a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d16d      	bne.n	800b53e <nm_get_firmware_full_info+0x11e>
		{
			if(reg != 0)
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d067      	beq.n	800b538 <nm_get_firmware_full_info+0x118>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800b46e:	f107 010c 	add.w	r1, r7, #12
 800b472:	2208      	movs	r2, #8
 800b474:	4618      	mov	r0, r3
 800b476:	f7ff ff2d 	bl	800b2d4 <nm_read_block>
 800b47a:	4603      	mov	r3, r0
 800b47c:	77fb      	strb	r3, [r7, #31]
				if(ret == M2M_SUCCESS)
 800b47e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d15c      	bne.n	800b540 <nm_get_firmware_full_info+0x120>
				{
					reg = strgp.u32Firmware_Ota_rev;
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	617b      	str	r3, [r7, #20]
					if(reg != 0)
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d04d      	beq.n	800b532 <nm_get_firmware_full_info+0x112>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800b49c:	2228      	movs	r2, #40	@ 0x28
 800b49e:	6879      	ldr	r1, [r7, #4]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7ff ff17 	bl	800b2d4 <nm_read_block>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	77fb      	strb	r3, [r7, #31]
						if(ret == M2M_SUCCESS)
 800b4aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d146      	bne.n	800b540 <nm_get_firmware_full_info+0x120>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	791b      	ldrb	r3, [r3, #4]
 800b4b6:	021b      	lsls	r3, r3, #8
 800b4b8:	b21a      	sxth	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	795b      	ldrb	r3, [r3, #5]
 800b4be:	011b      	lsls	r3, r3, #4
 800b4c0:	b21b      	sxth	r3, r3
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	b21b      	sxth	r3, r3
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	b21a      	sxth	r2, r3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	799b      	ldrb	r3, [r3, #6]
 800b4ce:	b21b      	sxth	r3, r3
 800b4d0:	f003 030f 	and.w	r3, r3, #15
 800b4d4:	b21b      	sxth	r3, r3
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	b21b      	sxth	r3, r3
 800b4da:	83bb      	strh	r3, [r7, #28]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 800b4dc:	f241 3377 	movw	r3, #4983	@ 0x1377
 800b4e0:	837b      	strh	r3, [r7, #26]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	79db      	ldrb	r3, [r3, #7]
 800b4e6:	021b      	lsls	r3, r3, #8
 800b4e8:	b21a      	sxth	r2, r3
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	7a1b      	ldrb	r3, [r3, #8]
 800b4ee:	011b      	lsls	r3, r3, #4
 800b4f0:	b21b      	sxth	r3, r3
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	b21b      	sxth	r3, r3
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	b21a      	sxth	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	7a5b      	ldrb	r3, [r3, #9]
 800b4fe:	b21b      	sxth	r3, r3
 800b500:	f003 030f 	and.w	r3, r3, #15
 800b504:	b21b      	sxth	r3, r3
 800b506:	4313      	orrs	r3, r2
 800b508:	b21b      	sxth	r3, r3
 800b50a:	833b      	strh	r3, [r7, #24]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
 800b50c:	8bbb      	ldrh	r3, [r7, #28]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d005      	beq.n	800b51e <nm_get_firmware_full_info+0xfe>
 800b512:	8b3b      	ldrh	r3, [r7, #24]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d002      	beq.n	800b51e <nm_get_firmware_full_info+0xfe>
 800b518:	8b3b      	ldrh	r3, [r7, #24]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d102      	bne.n	800b524 <nm_get_firmware_full_info+0x104>
								ret = M2M_ERR_FAIL;
 800b51e:	23f4      	movs	r3, #244	@ 0xf4
 800b520:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800b522:	e00d      	b.n	800b540 <nm_get_firmware_full_info+0x120>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
 800b524:	8b7a      	ldrh	r2, [r7, #26]
 800b526:	8b3b      	ldrh	r3, [r7, #24]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d209      	bcs.n	800b540 <nm_get_firmware_full_info+0x120>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
 800b52c:	23f3      	movs	r3, #243	@ 0xf3
 800b52e:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800b530:	e006      	b.n	800b540 <nm_get_firmware_full_info+0x120>
								//ret = M2M_ERR_FW_VER_MISMATCH;
								//goto EXIT;
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
 800b532:	23f4      	movs	r3, #244	@ 0xf4
 800b534:	77fb      	strb	r3, [r7, #31]
 800b536:	e003      	b.n	800b540 <nm_get_firmware_full_info+0x120>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
 800b538:	23f4      	movs	r3, #244	@ 0xf4
 800b53a:	77fb      	strb	r3, [r7, #31]
 800b53c:	e000      	b.n	800b540 <nm_get_firmware_full_info+0x120>
			}
		}
	}
EXIT:
 800b53e:	bf00      	nop
	return ret;
 800b540:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b544:	4618      	mov	r0, r3
 800b546:	3720      	adds	r7, #32
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	000c0008 	.word	0x000c0008

0800b550 <nm_drv_init_hold>:
ERR1:
	return ret;
}

sint8 nm_drv_init_hold(void)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800b556:	2300      	movs	r3, #0
 800b558:	71fb      	strb	r3, [r7, #7]

	ret = nm_bus_iface_init(NULL);
 800b55a:	2000      	movs	r0, #0
 800b55c:	f7ff fe54 	bl	800b208 <nm_bus_iface_init>
 800b560:	4603      	mov	r3, r0
 800b562:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) {
 800b564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d00f      	beq.n	800b58c <nm_drv_init_hold+0x3c>
		M2M_ERR("[nmi start]: fail init bus\n");
 800b56c:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 800b570:	4911      	ldr	r1, [pc, #68]	@ (800b5b8 <nm_drv_init_hold+0x68>)
 800b572:	4812      	ldr	r0, [pc, #72]	@ (800b5bc <nm_drv_init_hold+0x6c>)
 800b574:	f001 faa8 	bl	800cac8 <iprintf>
 800b578:	4811      	ldr	r0, [pc, #68]	@ (800b5c0 <nm_drv_init_hold+0x70>)
 800b57a:	f001 fb15 	bl	800cba8 <puts>
 800b57e:	200d      	movs	r0, #13
 800b580:	f001 fab4 	bl	800caec <putchar>
		goto ERR1;
 800b584:	bf00      	nop

	return ret;
ERR2:
	nm_bus_iface_deinit();
ERR1:
	return ret;
 800b586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b58a:	e010      	b.n	800b5ae <nm_drv_init_hold+0x5e>
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
 800b58c:	480d      	ldr	r0, [pc, #52]	@ (800b5c4 <nm_drv_init_hold+0x74>)
 800b58e:	f001 fa9b 	bl	800cac8 <iprintf>
 800b592:	f7ff fb8f 	bl	800acb4 <nmi_get_chipid>
 800b596:	4603      	mov	r3, r0
 800b598:	4619      	mov	r1, r3
 800b59a:	480b      	ldr	r0, [pc, #44]	@ (800b5c8 <nm_drv_init_hold+0x78>)
 800b59c:	f001 fa94 	bl	800cac8 <iprintf>
 800b5a0:	200d      	movs	r0, #13
 800b5a2:	f001 faa3 	bl	800caec <putchar>
	nm_spi_init();
 800b5a6:	f000 ff7f 	bl	800c4a8 <nm_spi_init>
	return ret;
 800b5aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	0800e858 	.word	0x0800e858
 800b5bc:	0800e020 	.word	0x0800e020
 800b5c0:	0800e034 	.word	0x0800e034
 800b5c4:	0800e050 	.word	0x0800e050
 800b5c8:	0800e05c 	.word	0x0800e05c

0800b5cc <nm_drv_init_start>:

sint8 nm_drv_init_start(void * arg)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	73fb      	strb	r3, [r7, #15]
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	73bb      	strb	r3, [r7, #14]

	if(NULL != arg) {
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00a      	beq.n	800b5f8 <nm_drv_init_start+0x2c>
		u8Mode = *((uint8 *)arg);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	73bb      	strb	r3, [r7, #14]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
 800b5e8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d002      	beq.n	800b5f4 <nm_drv_init_start+0x28>
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
 800b5f0:	2b04      	cmp	r3, #4
 800b5f2:	d901      	bls.n	800b5f8 <nm_drv_init_start+0x2c>
			u8Mode = M2M_WIFI_MODE_NORMAL;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	73bb      	strb	r3, [r7, #14]
		}
	}

	ret = wait_for_bootrom(u8Mode);
 800b5f8:	7bbb      	ldrb	r3, [r7, #14]
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7ff fcca 	bl	800af94 <wait_for_bootrom>
 800b600:	4603      	mov	r3, r0
 800b602:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d127      	bne.n	800b65c <nm_drv_init_start+0x90>
		goto ERR2;
	}

	ret = wait_for_firmware_start(u8Mode);
 800b60c:	7bbb      	ldrb	r3, [r7, #14]
 800b60e:	4618      	mov	r0, r3
 800b610:	f7ff fd66 	bl	800b0e0 <wait_for_firmware_start>
 800b614:	4603      	mov	r3, r0
 800b616:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d11f      	bne.n	800b660 <nm_drv_init_start+0x94>
		goto ERR2;
	}

	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
 800b620:	7bbb      	ldrb	r3, [r7, #14]
 800b622:	2b02      	cmp	r3, #2
 800b624:	d022      	beq.n	800b66c <nm_drv_init_start+0xa0>
 800b626:	7bbb      	ldrb	r3, [r7, #14]
 800b628:	2b03      	cmp	r3, #3
 800b62a:	d01f      	beq.n	800b66c <nm_drv_init_start+0xa0>
		goto ERR1;
	} else {
		/*continue running*/
	}

	ret = enable_interrupts();
 800b62c:	f7ff faf8 	bl	800ac20 <enable_interrupts>
 800b630:	4603      	mov	r3, r0
 800b632:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00c      	beq.n	800b656 <nm_drv_init_start+0x8a>
		M2M_ERR("failed to enable interrupts..\n");
 800b63c:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 800b640:	490e      	ldr	r1, [pc, #56]	@ (800b67c <nm_drv_init_start+0xb0>)
 800b642:	480f      	ldr	r0, [pc, #60]	@ (800b680 <nm_drv_init_start+0xb4>)
 800b644:	f001 fa40 	bl	800cac8 <iprintf>
 800b648:	480e      	ldr	r0, [pc, #56]	@ (800b684 <nm_drv_init_start+0xb8>)
 800b64a:	f001 faad 	bl	800cba8 <puts>
 800b64e:	200d      	movs	r0, #13
 800b650:	f001 fa4c 	bl	800caec <putchar>
		goto ERR2;
 800b654:	e005      	b.n	800b662 <nm_drv_init_start+0x96>
	}

	return ret;
 800b656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b65a:	e00a      	b.n	800b672 <nm_drv_init_start+0xa6>
		goto ERR2;
 800b65c:	bf00      	nop
 800b65e:	e000      	b.n	800b662 <nm_drv_init_start+0x96>
		goto ERR2;
 800b660:	bf00      	nop
ERR2:
	nm_bus_iface_deinit();
 800b662:	f7ff fde2 	bl	800b22a <nm_bus_iface_deinit>
#ifdef CONF_WINC_USE_SPI
	nm_spi_deinit();
 800b666:	f000 ffaf 	bl	800c5c8 <nm_spi_deinit>
 800b66a:	e000      	b.n	800b66e <nm_drv_init_start+0xa2>
		goto ERR1;
 800b66c:	bf00      	nop
#endif
ERR1:
	return ret;
 800b66e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	0800e86c 	.word	0x0800e86c
 800b680:	0800e020 	.word	0x0800e020
 800b684:	0800e06c 	.word	0x0800e06c

0800b688 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
 800b690:	f7ff fd72 	bl	800b178 <chip_deinit>
 800b694:	4603      	mov	r3, r0
 800b696:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00c      	beq.n	800b6ba <nm_drv_deinit+0x32>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
 800b6a0:	f240 1281 	movw	r2, #385	@ 0x181
 800b6a4:	491e      	ldr	r1, [pc, #120]	@ (800b720 <nm_drv_deinit+0x98>)
 800b6a6:	481f      	ldr	r0, [pc, #124]	@ (800b724 <nm_drv_deinit+0x9c>)
 800b6a8:	f001 fa0e 	bl	800cac8 <iprintf>
 800b6ac:	481e      	ldr	r0, [pc, #120]	@ (800b728 <nm_drv_deinit+0xa0>)
 800b6ae:	f001 fa7b 	bl	800cba8 <puts>
 800b6b2:	200d      	movs	r0, #13
 800b6b4:	f001 fa1a 	bl	800caec <putchar>
		goto ERR1;
 800b6b8:	e02c      	b.n	800b714 <nm_drv_deinit+0x8c>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	f001 f84a 	bl	800c754 <spi_flash_enable>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b6c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00c      	beq.n	800b6e6 <nm_drv_deinit+0x5e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
 800b6cc:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 800b6d0:	4913      	ldr	r1, [pc, #76]	@ (800b720 <nm_drv_deinit+0x98>)
 800b6d2:	4814      	ldr	r0, [pc, #80]	@ (800b724 <nm_drv_deinit+0x9c>)
 800b6d4:	f001 f9f8 	bl	800cac8 <iprintf>
 800b6d8:	4814      	ldr	r0, [pc, #80]	@ (800b72c <nm_drv_deinit+0xa4>)
 800b6da:	f001 fa65 	bl	800cba8 <puts>
 800b6de:	200d      	movs	r0, #13
 800b6e0:	f001 fa04 	bl	800caec <putchar>
		goto ERR1;
 800b6e4:	e016      	b.n	800b714 <nm_drv_deinit+0x8c>
	}

	ret = nm_bus_iface_deinit();
 800b6e6:	f7ff fda0 	bl	800b22a <nm_bus_iface_deinit>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b6ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00c      	beq.n	800b710 <nm_drv_deinit+0x88>
		M2M_ERR("[nmi stop]: fail init bus\n");
 800b6f6:	f44f 72c7 	mov.w	r2, #398	@ 0x18e
 800b6fa:	4909      	ldr	r1, [pc, #36]	@ (800b720 <nm_drv_deinit+0x98>)
 800b6fc:	4809      	ldr	r0, [pc, #36]	@ (800b724 <nm_drv_deinit+0x9c>)
 800b6fe:	f001 f9e3 	bl	800cac8 <iprintf>
 800b702:	480b      	ldr	r0, [pc, #44]	@ (800b730 <nm_drv_deinit+0xa8>)
 800b704:	f001 fa50 	bl	800cba8 <puts>
 800b708:	200d      	movs	r0, #13
 800b70a:	f001 f9ef 	bl	800caec <putchar>
		goto ERR1;
 800b70e:	e001      	b.n	800b714 <nm_drv_deinit+0x8c>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
 800b710:	f000 ff5a 	bl	800c5c8 <nm_spi_deinit>
#endif

ERR1:
	return ret;
 800b714:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	0800e880 	.word	0x0800e880
 800b724:	0800e020 	.word	0x0800e020
 800b728:	0800e08c 	.word	0x0800e08c
 800b72c:	0800e0ac 	.word	0x0800e0ac
 800b730:	0800e0d0 	.word	0x0800e0d0

0800b734 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static inline sint8 nmi_spi_read(uint8 *b, uint16 sz)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	460b      	mov	r3, r1
 800b73e:	807b      	strh	r3, [r7, #2]
    return nm_spi_rw(NULL, b, sz);
 800b740:	887b      	ldrh	r3, [r7, #2]
 800b742:	461a      	mov	r2, r3
 800b744:	6879      	ldr	r1, [r7, #4]
 800b746:	2000      	movs	r0, #0
 800b748:	f7fd ffbe 	bl	80096c8 <nm_spi_rw>
 800b74c:	4603      	mov	r3, r0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <nmi_spi_write>:
static inline sint8 nmi_spi_write(uint8 *b, uint16 sz)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b082      	sub	sp, #8
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	460b      	mov	r3, r1
 800b760:	807b      	strh	r3, [r7, #2]
    return nm_spi_rw(b, NULL, sz);
 800b762:	887b      	ldrh	r3, [r7, #2]
 800b764:	461a      	mov	r2, r3
 800b766:	2100      	movs	r1, #0
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f7fd ffad 	bl	80096c8 <nm_spi_rw>
 800b76e:	4603      	mov	r3, r0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <nmi_spi_writeread>:
static sint8 nmi_spi_writeread(uint8 *bw, uint8 *br, uint16 sz)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	4613      	mov	r3, r2
 800b784:	80fb      	strh	r3, [r7, #6]
    return nm_spi_rw(bw, br, sz);
 800b786:	88fb      	ldrh	r3, [r7, #6]
 800b788:	461a      	mov	r2, r3
 800b78a:	68b9      	ldr	r1, [r7, #8]
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f7fd ff9b 	bl	80096c8 <nm_spi_rw>
 800b792:	4603      	mov	r3, r0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static inline uint8 crc7_byte(uint8 crc, uint8 data)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	460a      	mov	r2, r1
 800b7a6:	71fb      	strb	r3, [r7, #7]
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	71bb      	strb	r3, [r7, #6]
	return crc7_syndrome_table[(crc << 1) ^ data];
 800b7ac:	79fb      	ldrb	r3, [r7, #7]
 800b7ae:	005a      	lsls	r2, r3, #1
 800b7b0:	79bb      	ldrb	r3, [r7, #6]
 800b7b2:	4053      	eors	r3, r2
 800b7b4:	4a03      	ldr	r2, [pc, #12]	@ (800b7c4 <crc7_byte+0x28>)
 800b7b6:	5cd3      	ldrb	r3, [r2, r3]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr
 800b7c4:	0800e890 	.word	0x0800e890

0800b7c8 <crc7>:

static inline uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
 800b7d4:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800b7d6:	e00a      	b.n	800b7ee <crc7+0x26>
		crc = crc7_byte(crc, *buffer++);
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	1c5a      	adds	r2, r3, #1
 800b7dc:	60ba      	str	r2, [r7, #8]
 800b7de:	781a      	ldrb	r2, [r3, #0]
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7ff ffd9 	bl	800b79c <crc7_byte>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	1e5a      	subs	r2, r3, #1
 800b7f2:	607a      	str	r2, [r7, #4]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d1ef      	bne.n	800b7d8 <crc7+0x10>
	return crc;
 800b7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
	...

0800b804 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b088      	sub	sp, #32
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60b9      	str	r1, [r7, #8]
 800b80c:	607a      	str	r2, [r7, #4]
 800b80e:	603b      	str	r3, [r7, #0]
 800b810:	4603      	mov	r3, r0
 800b812:	73fb      	strb	r3, [r7, #15]
	uint8 bc[9];
	uint8 len = 5;
 800b814:	2305      	movs	r3, #5
 800b816:	77fb      	strb	r3, [r7, #31]
	sint8 result = N_OK;
 800b818:	2300      	movs	r3, #0
 800b81a:	77bb      	strb	r3, [r7, #30]

	bc[0] = cmd;
 800b81c:	7bfb      	ldrb	r3, [r7, #15]
 800b81e:	753b      	strb	r3, [r7, #20]
	switch (cmd) {
 800b820:	7bfb      	ldrb	r3, [r7, #15]
 800b822:	3bc1      	subs	r3, #193	@ 0xc1
 800b824:	2b0e      	cmp	r3, #14
 800b826:	f200 80cc 	bhi.w	800b9c2 <spi_cmd+0x1be>
 800b82a:	a201      	add	r2, pc, #4	@ (adr r2, 800b830 <spi_cmd+0x2c>)
 800b82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b830:	0800b8e9 	.word	0x0800b8e9
 800b834:	0800b8e9 	.word	0x0800b8e9
 800b838:	0800b945 	.word	0x0800b945
 800b83c:	0800b889 	.word	0x0800b889
 800b840:	0800b8b3 	.word	0x0800b8b3
 800b844:	0800b8c5 	.word	0x0800b8c5
 800b848:	0800b913 	.word	0x0800b913
 800b84c:	0800b913 	.word	0x0800b913
 800b850:	0800b989 	.word	0x0800b989
 800b854:	0800b86d 	.word	0x0800b86d
 800b858:	0800b9c3 	.word	0x0800b9c3
 800b85c:	0800b9c3 	.word	0x0800b9c3
 800b860:	0800b9c3 	.word	0x0800b9c3
 800b864:	0800b9c3 	.word	0x0800b9c3
 800b868:	0800b8d7 	.word	0x0800b8d7
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	0c1b      	lsrs	r3, r3, #16
 800b870:	b2db      	uxtb	r3, r3
 800b872:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	0a1b      	lsrs	r3, r3, #8
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b882:	2305      	movs	r3, #5
 800b884:	77fb      	strb	r3, [r7, #31]
		break;
 800b886:	e09f      	b.n	800b9c8 <spi_cmd+0x1c4>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	0a1b      	lsrs	r3, r3, #8
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800b890:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b894:	2b00      	cmp	r3, #0
 800b896:	d004      	beq.n	800b8a2 <spi_cmd+0x9e>
 800b898:	7d7b      	ldrb	r3, [r7, #21]
 800b89a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)adr;
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b8ac:	2305      	movs	r3, #5
 800b8ae:	77fb      	strb	r3, [r7, #31]
		break;
 800b8b0:	e08a      	b.n	800b9c8 <spi_cmd+0x1c4>
#if defined(CMD_TERMINATE)
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b8be:	2305      	movs	r3, #5
 800b8c0:	77fb      	strb	r3, [r7, #31]
		break;
 800b8c2:	e081      	b.n	800b9c8 <spi_cmd+0x1c4>
#endif
#if defined(CMD_REPEAT)
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b8d0:	2305      	movs	r3, #5
 800b8d2:	77fb      	strb	r3, [r7, #31]
		break;
 800b8d4:	e078      	b.n	800b9c8 <spi_cmd+0x1c4>
#endif
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
 800b8d6:	23ff      	movs	r3, #255	@ 0xff
 800b8d8:	757b      	strb	r3, [r7, #21]
		bc[2] = 0xff;
 800b8da:	23ff      	movs	r3, #255	@ 0xff
 800b8dc:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0xff;
 800b8de:	23ff      	movs	r3, #255	@ 0xff
 800b8e0:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b8e2:	2305      	movs	r3, #5
 800b8e4:	77fb      	strb	r3, [r7, #31]
		break;
 800b8e6:	e06f      	b.n	800b9c8 <spi_cmd+0x1c4>
#if defined(CMD_DMA_WRITE) || defined(CMD_DMA_READ)
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	0c1b      	lsrs	r3, r3, #16
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	0a1b      	lsrs	r3, r3, #8
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 8);
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	0a1b      	lsrs	r3, r3, #8
 800b902:	b2db      	uxtb	r3, r3
 800b904:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz);
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	767b      	strb	r3, [r7, #25]
		len = 7;
 800b90c:	2307      	movs	r3, #7
 800b90e:	77fb      	strb	r3, [r7, #31]
		break;
 800b910:	e05a      	b.n	800b9c8 <spi_cmd+0x1c4>
#endif
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	0c1b      	lsrs	r3, r3, #16
 800b916:	b2db      	uxtb	r3, r3
 800b918:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	0a1b      	lsrs	r3, r3, #8
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	b2db      	uxtb	r3, r3
 800b926:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 16);
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	0c1b      	lsrs	r3, r3, #16
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz >> 8);
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	0a1b      	lsrs	r3, r3, #8
 800b934:	b2db      	uxtb	r3, r3
 800b936:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(sz);
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800b93e:	2308      	movs	r3, #8
 800b940:	77fb      	strb	r3, [r7, #31]
		break;
 800b942:	e041      	b.n	800b9c8 <spi_cmd+0x1c4>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	0a1b      	lsrs	r3, r3, #8
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800b94c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b950:	2b00      	cmp	r3, #0
 800b952:	d004      	beq.n	800b95e <spi_cmd+0x15a>
 800b954:	7d7b      	ldrb	r3, [r7, #21]
 800b956:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr);
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	b2db      	uxtb	r3, r3
 800b962:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(u32data >> 24);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	0e1b      	lsrs	r3, r3, #24
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 16);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	0c1b      	lsrs	r3, r3, #16
 800b970:	b2db      	uxtb	r3, r3
 800b972:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 8);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	0a1b      	lsrs	r3, r3, #8
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800b982:	2308      	movs	r3, #8
 800b984:	77fb      	strb	r3, [r7, #31]
		break;
 800b986:	e01f      	b.n	800b9c8 <spi_cmd+0x1c4>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	0c1b      	lsrs	r3, r3, #16
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	0a1b      	lsrs	r3, r3, #8
 800b994:	b2db      	uxtb	r3, r3
 800b996:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(adr);
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 24);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	0e1b      	lsrs	r3, r3, #24
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 16);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	0c1b      	lsrs	r3, r3, #16
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data >> 8);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	0a1b      	lsrs	r3, r3, #8
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	76bb      	strb	r3, [r7, #26]
		bc[7] = (uint8)(u32data);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	76fb      	strb	r3, [r7, #27]
		len = 9;
 800b9bc:	2309      	movs	r3, #9
 800b9be:	77fb      	strb	r3, [r7, #31]
		break;
 800b9c0:	e002      	b.n	800b9c8 <spi_cmd+0x1c4>
	default:
		result = N_FAIL;
 800b9c2:	23ff      	movs	r3, #255	@ 0xff
 800b9c4:	77bb      	strb	r3, [r7, #30]
		break;
 800b9c6:	bf00      	nop
	}

    if(result == N_OK) {
 800b9c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d133      	bne.n	800ba38 <spi_cmd+0x234>
		if (!gu8Crc_off)
 800b9d0:	4b1c      	ldr	r3, [pc, #112]	@ (800ba44 <spi_cmd+0x240>)
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d113      	bne.n	800ba00 <spi_cmd+0x1fc>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 800b9d8:	7ffb      	ldrb	r3, [r7, #31]
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	461a      	mov	r2, r3
 800b9de:	f107 0314 	add.w	r3, r7, #20
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	207f      	movs	r0, #127	@ 0x7f
 800b9e6:	f7ff feef 	bl	800b7c8 <crc7>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	7ffb      	ldrb	r3, [r7, #31]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	0052      	lsls	r2, r2, #1
 800b9f4:	b2d2      	uxtb	r2, r2
 800b9f6:	3320      	adds	r3, #32
 800b9f8:	443b      	add	r3, r7
 800b9fa:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800b9fe:	e002      	b.n	800ba06 <spi_cmd+0x202>
		else
			len-=1;
 800ba00:	7ffb      	ldrb	r3, [r7, #31]
 800ba02:	3b01      	subs	r3, #1
 800ba04:	77fb      	strb	r3, [r7, #31]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 800ba06:	7ffb      	ldrb	r3, [r7, #31]
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	f107 0314 	add.w	r3, r7, #20
 800ba0e:	4611      	mov	r1, r2
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7ff fea0 	bl	800b756 <nmi_spi_write>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00d      	beq.n	800ba38 <spi_cmd+0x234>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
 800ba1c:	f240 1203 	movw	r2, #259	@ 0x103
 800ba20:	4909      	ldr	r1, [pc, #36]	@ (800ba48 <spi_cmd+0x244>)
 800ba22:	480a      	ldr	r0, [pc, #40]	@ (800ba4c <spi_cmd+0x248>)
 800ba24:	f001 f850 	bl	800cac8 <iprintf>
 800ba28:	4809      	ldr	r0, [pc, #36]	@ (800ba50 <spi_cmd+0x24c>)
 800ba2a:	f001 f8bd 	bl	800cba8 <puts>
 800ba2e:	200d      	movs	r0, #13
 800ba30:	f001 f85c 	bl	800caec <putchar>
			result = N_FAIL;
 800ba34:	23ff      	movs	r3, #255	@ 0xff
 800ba36:	77bb      	strb	r3, [r7, #30]
		}
	}

	return result;
 800ba38:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3720      	adds	r7, #32
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	2000063c 	.word	0x2000063c
 800ba48:	0800e990 	.word	0x0800e990
 800ba4c:	0800e0ec 	.word	0x0800e0ec
 800ba50:	0800e100 	.word	0x0800e100

0800ba54 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	71fb      	strb	r3, [r7, #7]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	73bb      	strb	r3, [r7, #14]

    if (!gu8Crc_off)
 800ba62:	4b27      	ldr	r3, [pc, #156]	@ (800bb00 <spi_data_rsp+0xac>)
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d102      	bne.n	800ba70 <spi_data_rsp+0x1c>
		len = 2;
 800ba6a:	2302      	movs	r3, #2
 800ba6c:	73fb      	strb	r3, [r7, #15]
 800ba6e:	e001      	b.n	800ba74 <spi_data_rsp+0x20>
	else
		len = 3;
 800ba70:	2303      	movs	r3, #3
 800ba72:	73fb      	strb	r3, [r7, #15]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
 800ba76:	b29a      	uxth	r2, r3
 800ba78:	f107 0308 	add.w	r3, r7, #8
 800ba7c:	4611      	mov	r1, r2
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7ff fe58 	bl	800b734 <nmi_spi_read>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d00e      	beq.n	800baa8 <spi_data_rsp+0x54>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
 800ba8a:	f240 1217 	movw	r2, #279	@ 0x117
 800ba8e:	491d      	ldr	r1, [pc, #116]	@ (800bb04 <spi_data_rsp+0xb0>)
 800ba90:	481d      	ldr	r0, [pc, #116]	@ (800bb08 <spi_data_rsp+0xb4>)
 800ba92:	f001 f819 	bl	800cac8 <iprintf>
 800ba96:	481d      	ldr	r0, [pc, #116]	@ (800bb0c <spi_data_rsp+0xb8>)
 800ba98:	f001 f886 	bl	800cba8 <puts>
 800ba9c:	200d      	movs	r0, #13
 800ba9e:	f001 f825 	bl	800caec <putchar>
		result = N_FAIL;
 800baa2:	23ff      	movs	r3, #255	@ 0xff
 800baa4:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800baa6:	e024      	b.n	800baf2 <spi_data_rsp+0x9e>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
 800baa8:	7bfb      	ldrb	r3, [r7, #15]
 800baaa:	3b01      	subs	r3, #1
 800baac:	3310      	adds	r3, #16
 800baae:	443b      	add	r3, r7
 800bab0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d107      	bne.n	800bac8 <spi_data_rsp+0x74>
 800bab8:	7bfb      	ldrb	r3, [r7, #15]
 800baba:	3b02      	subs	r3, #2
 800babc:	3310      	adds	r3, #16
 800babe:	443b      	add	r3, r7
 800bac0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800bac4:	2bc3      	cmp	r3, #195	@ 0xc3
 800bac6:	d013      	beq.n	800baf0 <spi_data_rsp+0x9c>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
 800bac8:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 800bacc:	490d      	ldr	r1, [pc, #52]	@ (800bb04 <spi_data_rsp+0xb0>)
 800bace:	480e      	ldr	r0, [pc, #56]	@ (800bb08 <spi_data_rsp+0xb4>)
 800bad0:	f000 fffa 	bl	800cac8 <iprintf>
 800bad4:	7a3b      	ldrb	r3, [r7, #8]
 800bad6:	4619      	mov	r1, r3
 800bad8:	7a7b      	ldrb	r3, [r7, #9]
 800bada:	461a      	mov	r2, r3
 800badc:	7abb      	ldrb	r3, [r7, #10]
 800bade:	480c      	ldr	r0, [pc, #48]	@ (800bb10 <spi_data_rsp+0xbc>)
 800bae0:	f000 fff2 	bl	800cac8 <iprintf>
 800bae4:	200d      	movs	r0, #13
 800bae6:	f001 f801 	bl	800caec <putchar>
		result = N_FAIL;
 800baea:	23ff      	movs	r3, #255	@ 0xff
 800baec:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800baee:	e000      	b.n	800baf2 <spi_data_rsp+0x9e>
	}
_fail_:
 800baf0:	bf00      	nop

	return result;
 800baf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	2000063c 	.word	0x2000063c
 800bb04:	0800e998 	.word	0x0800e998
 800bb08:	0800e0ec 	.word	0x0800e0ec
 800bb0c:	0800e12c 	.word	0x0800e12c
 800bb10:	0800e14c 	.word	0x0800e14c

0800bb14 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	71fb      	strb	r3, [r7, #7]
	uint8 rsp;
	sint8 result = N_OK;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	73fb      	strb	r3, [r7, #15]

	/**
		Command/Control response
	**/
#if defined(CMD_TERMINATE)
    if(cmd == CMD_TERMINATE) {
 800bb22:	79fb      	ldrb	r3, [r7, #7]
 800bb24:	2bc5      	cmp	r3, #197	@ 0xc5
 800bb26:	d10b      	bne.n	800bb40 <spi_cmd_rsp+0x2c>
        if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800bb28:	f107 030d 	add.w	r3, r7, #13
 800bb2c:	2101      	movs	r1, #1
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7ff fe00 	bl	800b734 <nmi_spi_read>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d002      	beq.n	800bb40 <spi_cmd_rsp+0x2c>
            result = N_FAIL;
 800bb3a:	23ff      	movs	r3, #255	@ 0xff
 800bb3c:	73fb      	strb	r3, [r7, #15]
            goto _fail_;
 800bb3e:	e05a      	b.n	800bbf6 <spi_cmd_rsp+0xe2>
        }
    }
#endif
#if defined(CMD_REPEAT)
    if(cmd == CMD_REPEAT) {
 800bb40:	79fb      	ldrb	r3, [r7, #7]
 800bb42:	2bc6      	cmp	r3, #198	@ 0xc6
 800bb44:	d10b      	bne.n	800bb5e <spi_cmd_rsp+0x4a>
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800bb46:	f107 030d 	add.w	r3, r7, #13
 800bb4a:	2101      	movs	r1, #1
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7ff fdf1 	bl	800b734 <nmi_spi_read>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <spi_cmd_rsp+0x4a>
			result = N_FAIL;
 800bb58:	23ff      	movs	r3, #255	@ 0xff
 800bb5a:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800bb5c:	e04b      	b.n	800bbf6 <spi_cmd_rsp+0xe2>
		}
	}
#endif

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800bb5e:	230a      	movs	r3, #10
 800bb60:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800bb62:	f107 030d 	add.w	r3, r7, #13
 800bb66:	2101      	movs	r1, #1
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7ff fde3 	bl	800b734 <nmi_spi_read>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00e      	beq.n	800bb92 <spi_cmd_rsp+0x7e>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
 800bb74:	f44f 72a3 	mov.w	r2, #326	@ 0x146
 800bb78:	4922      	ldr	r1, [pc, #136]	@ (800bc04 <spi_cmd_rsp+0xf0>)
 800bb7a:	4823      	ldr	r0, [pc, #140]	@ (800bc08 <spi_cmd_rsp+0xf4>)
 800bb7c:	f000 ffa4 	bl	800cac8 <iprintf>
 800bb80:	4822      	ldr	r0, [pc, #136]	@ (800bc0c <spi_cmd_rsp+0xf8>)
 800bb82:	f001 f811 	bl	800cba8 <puts>
 800bb86:	200d      	movs	r0, #13
 800bb88:	f000 ffb0 	bl	800caec <putchar>
			result = N_FAIL;
 800bb8c:	23ff      	movs	r3, #255	@ 0xff
 800bb8e:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800bb90:	e031      	b.n	800bbf6 <spi_cmd_rsp+0xe2>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 800bb92:	7b7b      	ldrb	r3, [r7, #13]
 800bb94:	79fa      	ldrb	r2, [r7, #7]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d007      	beq.n	800bbaa <spi_cmd_rsp+0x96>
 800bb9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb9e:	b2da      	uxtb	r2, r3
 800bba0:	3a01      	subs	r2, #1
 800bba2:	b2d2      	uxtb	r2, r2
 800bba4:	73ba      	strb	r2, [r7, #14]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	dcdb      	bgt.n	800bb62 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800bbaa:	230a      	movs	r3, #10
 800bbac:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800bbae:	f107 030d 	add.w	r3, r7, #13
 800bbb2:	2101      	movs	r1, #1
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7ff fdbd 	bl	800b734 <nmi_spi_read>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00e      	beq.n	800bbde <spi_cmd_rsp+0xca>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
 800bbc0:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 800bbc4:	490f      	ldr	r1, [pc, #60]	@ (800bc04 <spi_cmd_rsp+0xf0>)
 800bbc6:	4810      	ldr	r0, [pc, #64]	@ (800bc08 <spi_cmd_rsp+0xf4>)
 800bbc8:	f000 ff7e 	bl	800cac8 <iprintf>
 800bbcc:	480f      	ldr	r0, [pc, #60]	@ (800bc0c <spi_cmd_rsp+0xf8>)
 800bbce:	f000 ffeb 	bl	800cba8 <puts>
 800bbd2:	200d      	movs	r0, #13
 800bbd4:	f000 ff8a 	bl	800caec <putchar>
			result = N_FAIL;
 800bbd8:	23ff      	movs	r3, #255	@ 0xff
 800bbda:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800bbdc:	e00b      	b.n	800bbf6 <spi_cmd_rsp+0xe2>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 800bbde:	7b7b      	ldrb	r3, [r7, #13]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d007      	beq.n	800bbf4 <spi_cmd_rsp+0xe0>
 800bbe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbe8:	b2da      	uxtb	r2, r3
 800bbea:	3a01      	subs	r2, #1
 800bbec:	b2d2      	uxtb	r2, r2
 800bbee:	73ba      	strb	r2, [r7, #14]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	dcdc      	bgt.n	800bbae <spi_cmd_rsp+0x9a>

_fail_:
 800bbf4:	bf00      	nop

	return result;
 800bbf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	0800e9a8 	.word	0x0800e9a8
 800bc08:	0800e0ec 	.word	0x0800e0ec
 800bc0c:	0800e17c 	.word	0x0800e17c

0800bc10 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b086      	sub	sp, #24
 800bc14:	af02      	add	r7, sp, #8
	//M2M_INFO("Reset Spi\n");
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800bc16:	2300      	movs	r3, #0
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	2100      	movs	r1, #0
 800bc20:	20cf      	movs	r0, #207	@ 0xcf
 800bc22:	f7ff fdef 	bl	800b804 <spi_cmd>

	if(spi_cmd_rsp(CMD_RESET) != N_OK) {
 800bc26:	20cf      	movs	r0, #207	@ 0xcf
 800bc28:	f7ff ff74 	bl	800bb14 <spi_cmd_rsp>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d028      	beq.n	800bc84 <nm_spi_reset+0x74>
		// Reset command failed, need to send repeated 1's until reset occurs
		uint8 w_buf[8] = {0xFF};
 800bc32:	23ff      	movs	r3, #255	@ 0xff
 800bc34:	60bb      	str	r3, [r7, #8]
 800bc36:	2300      	movs	r3, #0
 800bc38:	60fb      	str	r3, [r7, #12]
		uint8 r_buf[8];
		M2M_ERR("[nmi spi]: Failed rst cmd response\n");
 800bc3a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800bc3e:	4914      	ldr	r1, [pc, #80]	@ (800bc90 <nm_spi_reset+0x80>)
 800bc40:	4814      	ldr	r0, [pc, #80]	@ (800bc94 <nm_spi_reset+0x84>)
 800bc42:	f000 ff41 	bl	800cac8 <iprintf>
 800bc46:	4814      	ldr	r0, [pc, #80]	@ (800bc98 <nm_spi_reset+0x88>)
 800bc48:	f000 ffae 	bl	800cba8 <puts>
 800bc4c:	200d      	movs	r0, #13
 800bc4e:	f000 ff4d 	bl	800caec <putchar>
		nmi_spi_writeread(w_buf, r_buf, 8);
 800bc52:	4639      	mov	r1, r7
 800bc54:	f107 0308 	add.w	r3, r7, #8
 800bc58:	2208      	movs	r2, #8
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7ff fd8c 	bl	800b778 <nmi_spi_writeread>
		if(r_buf[7] != 0xFF)
 800bc60:	79fb      	ldrb	r3, [r7, #7]
 800bc62:	2bff      	cmp	r3, #255	@ 0xff
 800bc64:	d00e      	beq.n	800bc84 <nm_spi_reset+0x74>
		{
			M2M_ERR("[nmi spi]: Failed repeated reset\n");
 800bc66:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800bc6a:	4909      	ldr	r1, [pc, #36]	@ (800bc90 <nm_spi_reset+0x80>)
 800bc6c:	4809      	ldr	r0, [pc, #36]	@ (800bc94 <nm_spi_reset+0x84>)
 800bc6e:	f000 ff2b 	bl	800cac8 <iprintf>
 800bc72:	480a      	ldr	r0, [pc, #40]	@ (800bc9c <nm_spi_reset+0x8c>)
 800bc74:	f000 ff98 	bl	800cba8 <puts>
 800bc78:	200d      	movs	r0, #13
 800bc7a:	f000 ff37 	bl	800caec <putchar>
			return N_FAIL;
 800bc7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc82:	e000      	b.n	800bc86 <nm_spi_reset+0x76>
		}
	}
	return N_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	0800e9b4 	.word	0x0800e9b4
 800bc94:	0800e0ec 	.word	0x0800e0ec
 800bc98:	0800e1b0 	.word	0x0800e1b0
 800bc9c:	0800e1d4 	.word	0x0800e1d4

0800bca0 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	807b      	strh	r3, [r7, #2]
 800bcac:	4613      	mov	r3, r2
 800bcae:	707b      	strb	r3, [r7, #1]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	747b      	strb	r3, [r7, #17]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	82bb      	strh	r3, [r7, #20]
	do {
		if (sz <= DATA_PKT_SZ)
 800bcb8:	887b      	ldrh	r3, [r7, #2]
 800bcba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcbe:	d802      	bhi.n	800bcc6 <spi_data_read+0x26>
			nbytes = sz;
 800bcc0:	887b      	ldrh	r3, [r7, #2]
 800bcc2:	827b      	strh	r3, [r7, #18]
 800bcc4:	e002      	b.n	800bccc <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800bcc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bcca:	827b      	strh	r3, [r7, #18]

		/**
			Data Response header
		**/
		retry = SPI_RESP_RETRY_COUNT;
 800bccc:	230a      	movs	r3, #10
 800bcce:	82fb      	strh	r3, [r7, #22]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800bcd0:	f107 030b 	add.w	r3, r7, #11
 800bcd4:	2101      	movs	r1, #1
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7ff fd2c 	bl	800b734 <nmi_spi_read>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00e      	beq.n	800bd00 <spi_data_read+0x60>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
 800bce2:	f44f 72c5 	mov.w	r2, #394	@ 0x18a
 800bce6:	4942      	ldr	r1, [pc, #264]	@ (800bdf0 <spi_data_read+0x150>)
 800bce8:	4842      	ldr	r0, [pc, #264]	@ (800bdf4 <spi_data_read+0x154>)
 800bcea:	f000 feed 	bl	800cac8 <iprintf>
 800bcee:	4842      	ldr	r0, [pc, #264]	@ (800bdf8 <spi_data_read+0x158>)
 800bcf0:	f000 ff5a 	bl	800cba8 <puts>
 800bcf4:	200d      	movs	r0, #13
 800bcf6:	f000 fef9 	bl	800caec <putchar>
				result = N_FAIL;
 800bcfa:	23ff      	movs	r3, #255	@ 0xff
 800bcfc:	747b      	strb	r3, [r7, #17]
				break;
 800bcfe:	e00e      	b.n	800bd1e <spi_data_read+0x7e>
			}
            if((rsp & 0xf0) == 0xf0)
 800bd00:	7afb      	ldrb	r3, [r7, #11]
 800bd02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bd06:	2bf0      	cmp	r3, #240	@ 0xf0
 800bd08:	d008      	beq.n	800bd1c <spi_data_read+0x7c>
				break;
		} while (retry--);
 800bd0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	3a01      	subs	r2, #1
 800bd12:	b292      	uxth	r2, r2
 800bd14:	82fa      	strh	r2, [r7, #22]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1da      	bne.n	800bcd0 <spi_data_read+0x30>
 800bd1a:	e000      	b.n	800bd1e <spi_data_read+0x7e>
				break;
 800bd1c:	bf00      	nop

		if (result == N_FAIL)
 800bd1e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800bd22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd26:	d05c      	beq.n	800bde2 <spi_data_read+0x142>
			break;

		if (retry <= 0) {
 800bd28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	dc10      	bgt.n	800bd52 <spi_data_read+0xb2>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
 800bd30:	f44f 72cb 	mov.w	r2, #406	@ 0x196
 800bd34:	492e      	ldr	r1, [pc, #184]	@ (800bdf0 <spi_data_read+0x150>)
 800bd36:	482f      	ldr	r0, [pc, #188]	@ (800bdf4 <spi_data_read+0x154>)
 800bd38:	f000 fec6 	bl	800cac8 <iprintf>
 800bd3c:	7afb      	ldrb	r3, [r7, #11]
 800bd3e:	4619      	mov	r1, r3
 800bd40:	482e      	ldr	r0, [pc, #184]	@ (800bdfc <spi_data_read+0x15c>)
 800bd42:	f000 fec1 	bl	800cac8 <iprintf>
 800bd46:	200d      	movs	r0, #13
 800bd48:	f000 fed0 	bl	800caec <putchar>
			result = N_FAIL;
 800bd4c:	23ff      	movs	r3, #255	@ 0xff
 800bd4e:	747b      	strb	r3, [r7, #17]
			break;
 800bd50:	e048      	b.n	800bde4 <spi_data_read+0x144>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 800bd52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	4413      	add	r3, r2
 800bd5a:	8a7a      	ldrh	r2, [r7, #18]
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7ff fce8 	bl	800b734 <nmi_spi_read>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00e      	beq.n	800bd88 <spi_data_read+0xe8>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
 800bd6a:	f240 129f 	movw	r2, #415	@ 0x19f
 800bd6e:	4920      	ldr	r1, [pc, #128]	@ (800bdf0 <spi_data_read+0x150>)
 800bd70:	4820      	ldr	r0, [pc, #128]	@ (800bdf4 <spi_data_read+0x154>)
 800bd72:	f000 fea9 	bl	800cac8 <iprintf>
 800bd76:	4822      	ldr	r0, [pc, #136]	@ (800be00 <spi_data_read+0x160>)
 800bd78:	f000 ff16 	bl	800cba8 <puts>
 800bd7c:	200d      	movs	r0, #13
 800bd7e:	f000 feb5 	bl	800caec <putchar>
			result = N_FAIL;
 800bd82:	23ff      	movs	r3, #255	@ 0xff
 800bd84:	747b      	strb	r3, [r7, #17]
			break;
 800bd86:	e02d      	b.n	800bde4 <spi_data_read+0x144>
		}
		if(!clockless)
 800bd88:	787b      	ldrb	r3, [r7, #1]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d11b      	bne.n	800bdc6 <spi_data_read+0x126>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
 800bd8e:	4b1d      	ldr	r3, [pc, #116]	@ (800be04 <spi_data_read+0x164>)
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d117      	bne.n	800bdc6 <spi_data_read+0x126>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 800bd96:	f107 030c 	add.w	r3, r7, #12
 800bd9a:	2102      	movs	r1, #2
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7ff fcc9 	bl	800b734 <nmi_spi_read>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00e      	beq.n	800bdc6 <spi_data_read+0x126>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
 800bda8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800bdac:	4910      	ldr	r1, [pc, #64]	@ (800bdf0 <spi_data_read+0x150>)
 800bdae:	4811      	ldr	r0, [pc, #68]	@ (800bdf4 <spi_data_read+0x154>)
 800bdb0:	f000 fe8a 	bl	800cac8 <iprintf>
 800bdb4:	4814      	ldr	r0, [pc, #80]	@ (800be08 <spi_data_read+0x168>)
 800bdb6:	f000 fef7 	bl	800cba8 <puts>
 800bdba:	200d      	movs	r0, #13
 800bdbc:	f000 fe96 	bl	800caec <putchar>
					result = N_FAIL;
 800bdc0:	23ff      	movs	r3, #255	@ 0xff
 800bdc2:	747b      	strb	r3, [r7, #17]
					break;
 800bdc4:	e00e      	b.n	800bde4 <spi_data_read+0x144>
				}
			}
		}
		ix += nbytes;
 800bdc6:	8aba      	ldrh	r2, [r7, #20]
 800bdc8:	8a7b      	ldrh	r3, [r7, #18]
 800bdca:	4413      	add	r3, r2
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	82bb      	strh	r3, [r7, #20]
		sz -= nbytes;
 800bdd0:	8a7b      	ldrh	r3, [r7, #18]
 800bdd2:	887a      	ldrh	r2, [r7, #2]
 800bdd4:	1ad3      	subs	r3, r2, r3
 800bdd6:	807b      	strh	r3, [r7, #2]

	} while (sz);
 800bdd8:	887b      	ldrh	r3, [r7, #2]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f47f af6c 	bne.w	800bcb8 <spi_data_read+0x18>
 800bde0:	e000      	b.n	800bde4 <spi_data_read+0x144>
			break;
 800bde2:	bf00      	nop

	return result;
 800bde4:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	0800e9c4 	.word	0x0800e9c4
 800bdf4:	0800e0ec 	.word	0x0800e0ec
 800bdf8:	0800e1f8 	.word	0x0800e1f8
 800bdfc:	0800e22c 	.word	0x0800e22c
 800be00:	0800e25c 	.word	0x0800e25c
 800be04:	2000063c 	.word	0x2000063c
 800be08:	0800e28c 	.word	0x0800e28c

0800be0c <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b086      	sub	sp, #24
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	460b      	mov	r3, r1
 800be16:	807b      	strh	r3, [r7, #2]
    sint16 ix = 0;
 800be18:	2300      	movs	r3, #0
 800be1a:	82fb      	strh	r3, [r7, #22]
	uint16 nbytes;
    sint8 result = N_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	74fb      	strb	r3, [r7, #19]
	uint8 cmd, order, crc[2] = {0};
 800be20:	2300      	movs	r3, #0
 800be22:	81bb      	strh	r3, [r7, #12]

	/**
		Data
	**/
	do {
		if (sz <= DATA_PKT_SZ)
 800be24:	887b      	ldrh	r3, [r7, #2]
 800be26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be2a:	d802      	bhi.n	800be32 <spi_data_write+0x26>
			nbytes = sz;
 800be2c:	887b      	ldrh	r3, [r7, #2]
 800be2e:	82bb      	strh	r3, [r7, #20]
 800be30:	e002      	b.n	800be38 <spi_data_write+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800be32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800be36:	82bb      	strh	r3, [r7, #20]

		/**
			Write command
		**/
		cmd = 0xf0;
 800be38:	23f0      	movs	r3, #240	@ 0xf0
 800be3a:	747b      	strb	r3, [r7, #17]
		if (ix == 0)  {
 800be3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d109      	bne.n	800be58 <spi_data_write+0x4c>
			if (sz <= DATA_PKT_SZ)
 800be44:	887b      	ldrh	r3, [r7, #2]
 800be46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be4a:	d802      	bhi.n	800be52 <spi_data_write+0x46>
				order = 0x3;
 800be4c:	2303      	movs	r3, #3
 800be4e:	74bb      	strb	r3, [r7, #18]
 800be50:	e00b      	b.n	800be6a <spi_data_write+0x5e>
			else
				order = 0x1;
 800be52:	2301      	movs	r3, #1
 800be54:	74bb      	strb	r3, [r7, #18]
 800be56:	e008      	b.n	800be6a <spi_data_write+0x5e>
		} else {
			if (sz <= DATA_PKT_SZ)
 800be58:	887b      	ldrh	r3, [r7, #2]
 800be5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be5e:	d802      	bhi.n	800be66 <spi_data_write+0x5a>
				order = 0x3;
 800be60:	2303      	movs	r3, #3
 800be62:	74bb      	strb	r3, [r7, #18]
 800be64:	e001      	b.n	800be6a <spi_data_write+0x5e>
			else
				order = 0x2;
 800be66:	2302      	movs	r3, #2
 800be68:	74bb      	strb	r3, [r7, #18]
		}
		cmd |= order;
 800be6a:	7c7a      	ldrb	r2, [r7, #17]
 800be6c:	7cbb      	ldrb	r3, [r7, #18]
 800be6e:	4313      	orrs	r3, r2
 800be70:	b2db      	uxtb	r3, r3
 800be72:	747b      	strb	r3, [r7, #17]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 800be74:	f107 0311 	add.w	r3, r7, #17
 800be78:	2101      	movs	r1, #1
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7ff fc6b 	bl	800b756 <nmi_spi_write>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00e      	beq.n	800bea4 <spi_data_write+0x98>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
 800be86:	f44f 72ed 	mov.w	r2, #474	@ 0x1da
 800be8a:	492b      	ldr	r1, [pc, #172]	@ (800bf38 <spi_data_write+0x12c>)
 800be8c:	482b      	ldr	r0, [pc, #172]	@ (800bf3c <spi_data_write+0x130>)
 800be8e:	f000 fe1b 	bl	800cac8 <iprintf>
 800be92:	482b      	ldr	r0, [pc, #172]	@ (800bf40 <spi_data_write+0x134>)
 800be94:	f000 fe88 	bl	800cba8 <puts>
 800be98:	200d      	movs	r0, #13
 800be9a:	f000 fe27 	bl	800caec <putchar>
			result = N_FAIL;
 800be9e:	23ff      	movs	r3, #255	@ 0xff
 800bea0:	74fb      	strb	r3, [r7, #19]
			break;
 800bea2:	e043      	b.n	800bf2c <spi_data_write+0x120>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 800bea4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	4413      	add	r3, r2
 800beac:	8aba      	ldrh	r2, [r7, #20]
 800beae:	4611      	mov	r1, r2
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7ff fc50 	bl	800b756 <nmi_spi_write>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00e      	beq.n	800beda <spi_data_write+0xce>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
 800bebc:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800bec0:	491d      	ldr	r1, [pc, #116]	@ (800bf38 <spi_data_write+0x12c>)
 800bec2:	481e      	ldr	r0, [pc, #120]	@ (800bf3c <spi_data_write+0x130>)
 800bec4:	f000 fe00 	bl	800cac8 <iprintf>
 800bec8:	481e      	ldr	r0, [pc, #120]	@ (800bf44 <spi_data_write+0x138>)
 800beca:	f000 fe6d 	bl	800cba8 <puts>
 800bece:	200d      	movs	r0, #13
 800bed0:	f000 fe0c 	bl	800caec <putchar>
			result = N_FAIL;
 800bed4:	23ff      	movs	r3, #255	@ 0xff
 800bed6:	74fb      	strb	r3, [r7, #19]
			break;
 800bed8:	e028      	b.n	800bf2c <spi_data_write+0x120>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
 800beda:	4b1b      	ldr	r3, [pc, #108]	@ (800bf48 <spi_data_write+0x13c>)
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d117      	bne.n	800bf12 <spi_data_write+0x106>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 800bee2:	f107 030c 	add.w	r3, r7, #12
 800bee6:	2102      	movs	r1, #2
 800bee8:	4618      	mov	r0, r3
 800beea:	f7ff fc34 	bl	800b756 <nmi_spi_write>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00e      	beq.n	800bf12 <spi_data_write+0x106>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
 800bef4:	f240 12ed 	movw	r2, #493	@ 0x1ed
 800bef8:	490f      	ldr	r1, [pc, #60]	@ (800bf38 <spi_data_write+0x12c>)
 800befa:	4810      	ldr	r0, [pc, #64]	@ (800bf3c <spi_data_write+0x130>)
 800befc:	f000 fde4 	bl	800cac8 <iprintf>
 800bf00:	4812      	ldr	r0, [pc, #72]	@ (800bf4c <spi_data_write+0x140>)
 800bf02:	f000 fe51 	bl	800cba8 <puts>
 800bf06:	200d      	movs	r0, #13
 800bf08:	f000 fdf0 	bl	800caec <putchar>
				result = N_FAIL;
 800bf0c:	23ff      	movs	r3, #255	@ 0xff
 800bf0e:	74fb      	strb	r3, [r7, #19]
				break;
 800bf10:	e00c      	b.n	800bf2c <spi_data_write+0x120>
			}
		}

		ix += nbytes;
 800bf12:	8afa      	ldrh	r2, [r7, #22]
 800bf14:	8abb      	ldrh	r3, [r7, #20]
 800bf16:	4413      	add	r3, r2
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	82fb      	strh	r3, [r7, #22]
		sz -= nbytes;
 800bf1c:	887a      	ldrh	r2, [r7, #2]
 800bf1e:	8abb      	ldrh	r3, [r7, #20]
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	807b      	strh	r3, [r7, #2]
	} while (sz);
 800bf24:	887b      	ldrh	r3, [r7, #2]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f47f af7c 	bne.w	800be24 <spi_data_write+0x18>


	return result;
 800bf2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3718      	adds	r7, #24
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	0800e9d4 	.word	0x0800e9d4
 800bf3c:	0800e0ec 	.word	0x0800e0ec
 800bf40:	0800e2c0 	.word	0x0800e2c0
 800bf44:	0800e2f8 	.word	0x0800e2f8
 800bf48:	2000063c 	.word	0x2000063c
 800bf4c:	0800e32c 	.word	0x0800e32c

0800bf50 <nm_spi_write_reg>:
 *  @param[in]  u32Val
 *                  Value to be written to the register
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_write_reg(uint32 addr, uint32 u32data)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b086      	sub	sp, #24
 800bf54:	af02      	add	r7, sp, #8
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800bf5a:	230a      	movs	r3, #10
 800bf5c:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_WRITE;
 800bf62:	23c9      	movs	r3, #201	@ 0xc9
 800bf64:	737b      	strb	r3, [r7, #13]
	uint8 clockless = 0;
 800bf66:	2300      	movs	r3, #0
 800bf68:	733b      	strb	r3, [r7, #12]
	
_RETRY_:	
	if (addr <= 0x30)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2b30      	cmp	r3, #48	@ 0x30
 800bf6e:	d803      	bhi.n	800bf78 <nm_spi_write_reg+0x28>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
 800bf70:	23c3      	movs	r3, #195	@ 0xc3
 800bf72:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 800bf74:	2301      	movs	r3, #1
 800bf76:	733b      	strb	r3, [r7, #12]
	}

	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 800bf78:	7b78      	ldrb	r0, [r7, #13]
 800bf7a:	7b3b      	ldrb	r3, [r7, #12]
 800bf7c:	9300      	str	r3, [sp, #0]
 800bf7e:	2304      	movs	r3, #4
 800bf80:	683a      	ldr	r2, [r7, #0]
 800bf82:	6879      	ldr	r1, [r7, #4]
 800bf84:	f7ff fc3e 	bl	800b804 <spi_cmd>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800bf8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00d      	beq.n	800bfb0 <nm_spi_write_reg+0x60>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
 800bf94:	f240 2223 	movw	r2, #547	@ 0x223
 800bf98:	492a      	ldr	r1, [pc, #168]	@ (800c044 <nm_spi_write_reg+0xf4>)
 800bf9a:	482b      	ldr	r0, [pc, #172]	@ (800c048 <nm_spi_write_reg+0xf8>)
 800bf9c:	f000 fd94 	bl	800cac8 <iprintf>
 800bfa0:	6879      	ldr	r1, [r7, #4]
 800bfa2:	482a      	ldr	r0, [pc, #168]	@ (800c04c <nm_spi_write_reg+0xfc>)
 800bfa4:	f000 fd90 	bl	800cac8 <iprintf>
 800bfa8:	200d      	movs	r0, #13
 800bfaa:	f000 fd9f 	bl	800caec <putchar>
		goto _FAIL_;
 800bfae:	e018      	b.n	800bfe2 <nm_spi_write_reg+0x92>
	}

	result = spi_cmd_rsp(cmd);
 800bfb0:	7b7b      	ldrb	r3, [r7, #13]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff fdae 	bl	800bb14 <spi_cmd_rsp>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800bfbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d00d      	beq.n	800bfe0 <nm_spi_write_reg+0x90>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
 800bfc4:	f240 2229 	movw	r2, #553	@ 0x229
 800bfc8:	491e      	ldr	r1, [pc, #120]	@ (800c044 <nm_spi_write_reg+0xf4>)
 800bfca:	481f      	ldr	r0, [pc, #124]	@ (800c048 <nm_spi_write_reg+0xf8>)
 800bfcc:	f000 fd7c 	bl	800cac8 <iprintf>
 800bfd0:	6879      	ldr	r1, [r7, #4]
 800bfd2:	481f      	ldr	r0, [pc, #124]	@ (800c050 <nm_spi_write_reg+0x100>)
 800bfd4:	f000 fd78 	bl	800cac8 <iprintf>
 800bfd8:	200d      	movs	r0, #13
 800bfda:	f000 fd87 	bl	800caec <putchar>
		goto _FAIL_;
 800bfde:	e000      	b.n	800bfe2 <nm_spi_write_reg+0x92>
	}
_FAIL_:
 800bfe0:	bf00      	nop
	if(result != N_OK)
 800bfe2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d026      	beq.n	800c038 <nm_spi_write_reg+0xe8>
	{
		nm_bsp_sleep(1);
 800bfea:	2001      	movs	r0, #1
 800bfec:	f7fd fafa 	bl	80095e4 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800bff0:	2300      	movs	r3, #0
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	2300      	movs	r3, #0
 800bff6:	2200      	movs	r2, #0
 800bff8:	2100      	movs	r1, #0
 800bffa:	20cf      	movs	r0, #207	@ 0xcf
 800bffc:	f7ff fc02 	bl	800b804 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800c000:	20cf      	movs	r0, #207	@ 0xcf
 800c002:	f7ff fd87 	bl	800bb14 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %x %x\n",retry,addr,u32data);
 800c006:	f240 2232 	movw	r2, #562	@ 0x232
 800c00a:	490e      	ldr	r1, [pc, #56]	@ (800c044 <nm_spi_write_reg+0xf4>)
 800c00c:	480e      	ldr	r0, [pc, #56]	@ (800c048 <nm_spi_write_reg+0xf8>)
 800c00e:	f000 fd5b 	bl	800cac8 <iprintf>
 800c012:	7bf9      	ldrb	r1, [r7, #15]
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	480e      	ldr	r0, [pc, #56]	@ (800c054 <nm_spi_write_reg+0x104>)
 800c01a:	f000 fd55 	bl	800cac8 <iprintf>
 800c01e:	200d      	movs	r0, #13
 800c020:	f000 fd64 	bl	800caec <putchar>
		nm_bsp_sleep(1);
 800c024:	2001      	movs	r0, #1
 800c026:	f7fd fadd 	bl	80095e4 <nm_bsp_sleep>
		retry--;
 800c02a:	7bfb      	ldrb	r3, [r7, #15]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800c030:	7bfb      	ldrb	r3, [r7, #15]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d000      	beq.n	800c038 <nm_spi_write_reg+0xe8>
 800c036:	e798      	b.n	800bf6a <nm_spi_write_reg+0x1a>
	}

	return result;
 800c038:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	0800e9e4 	.word	0x0800e9e4
 800c048:	0800e0ec 	.word	0x0800e0ec
 800c04c:	0800e364 	.word	0x0800e364
 800c050:	0800e390 	.word	0x0800e390
 800c054:	0800e3c8 	.word	0x0800e3c8

0800c058 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b088      	sub	sp, #32
 800c05c:	af02      	add	r7, sp, #8
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	4613      	mov	r3, r2
 800c064:	80fb      	strh	r3, [r7, #6]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800c066:	230a      	movs	r3, #10
 800c068:	75bb      	strb	r3, [r7, #22]
	uint8 cmd = CMD_DMA_EXT_WRITE;
 800c06a:	23c7      	movs	r3, #199	@ 0xc7
 800c06c:	757b      	strb	r3, [r7, #21]
_RETRY_:
	/**
		Command
	**/
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
 800c06e:	88fb      	ldrh	r3, [r7, #6]
 800c070:	2b01      	cmp	r3, #1
 800c072:	d101      	bne.n	800c078 <nm_spi_write+0x20>
		size = 2;
 800c074:	2302      	movs	r3, #2
 800c076:	80fb      	strh	r3, [r7, #6]

	result = spi_cmd(cmd, addr, 0, size,0);
 800c078:	88fb      	ldrh	r3, [r7, #6]
 800c07a:	7d78      	ldrb	r0, [r7, #21]
 800c07c:	2200      	movs	r2, #0
 800c07e:	9200      	str	r2, [sp, #0]
 800c080:	2200      	movs	r2, #0
 800c082:	68f9      	ldr	r1, [r7, #12]
 800c084:	f7ff fbbe 	bl	800b804 <spi_cmd>
 800c088:	4603      	mov	r3, r0
 800c08a:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800c08c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00d      	beq.n	800c0b0 <nm_spi_write+0x58>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
 800c094:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 800c098:	4942      	ldr	r1, [pc, #264]	@ (800c1a4 <nm_spi_write+0x14c>)
 800c09a:	4843      	ldr	r0, [pc, #268]	@ (800c1a8 <nm_spi_write+0x150>)
 800c09c:	f000 fd14 	bl	800cac8 <iprintf>
 800c0a0:	68f9      	ldr	r1, [r7, #12]
 800c0a2:	4842      	ldr	r0, [pc, #264]	@ (800c1ac <nm_spi_write+0x154>)
 800c0a4:	f000 fd10 	bl	800cac8 <iprintf>
 800c0a8:	200d      	movs	r0, #13
 800c0aa:	f000 fd1f 	bl	800caec <putchar>
		goto _FAIL_;
 800c0ae:	e047      	b.n	800c140 <nm_spi_write+0xe8>
	}

	result = spi_cmd_rsp(cmd);
 800c0b0:	7d7b      	ldrb	r3, [r7, #21]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7ff fd2e 	bl	800bb14 <spi_cmd_rsp>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800c0bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00d      	beq.n	800c0e0 <nm_spi_write+0x88>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
 800c0c4:	f240 2252 	movw	r2, #594	@ 0x252
 800c0c8:	4936      	ldr	r1, [pc, #216]	@ (800c1a4 <nm_spi_write+0x14c>)
 800c0ca:	4837      	ldr	r0, [pc, #220]	@ (800c1a8 <nm_spi_write+0x150>)
 800c0cc:	f000 fcfc 	bl	800cac8 <iprintf>
 800c0d0:	68f9      	ldr	r1, [r7, #12]
 800c0d2:	4837      	ldr	r0, [pc, #220]	@ (800c1b0 <nm_spi_write+0x158>)
 800c0d4:	f000 fcf8 	bl	800cac8 <iprintf>
 800c0d8:	200d      	movs	r0, #13
 800c0da:	f000 fd07 	bl	800caec <putchar>
		goto _FAIL_;
 800c0de:	e02f      	b.n	800c140 <nm_spi_write+0xe8>
	}

	/**
		Data
	**/
	result = spi_data_write(buf, size);
 800c0e0:	88fb      	ldrh	r3, [r7, #6]
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	68b8      	ldr	r0, [r7, #8]
 800c0e6:	f7ff fe91 	bl	800be0c <spi_data_write>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800c0ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00c      	beq.n	800c110 <nm_spi_write+0xb8>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
 800c0f6:	f240 225b 	movw	r2, #603	@ 0x25b
 800c0fa:	492a      	ldr	r1, [pc, #168]	@ (800c1a4 <nm_spi_write+0x14c>)
 800c0fc:	482a      	ldr	r0, [pc, #168]	@ (800c1a8 <nm_spi_write+0x150>)
 800c0fe:	f000 fce3 	bl	800cac8 <iprintf>
 800c102:	482c      	ldr	r0, [pc, #176]	@ (800c1b4 <nm_spi_write+0x15c>)
 800c104:	f000 fd50 	bl	800cba8 <puts>
 800c108:	200d      	movs	r0, #13
 800c10a:	f000 fcef 	bl	800caec <putchar>
		goto _FAIL_;
 800c10e:	e017      	b.n	800c140 <nm_spi_write+0xe8>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
 800c110:	7d7b      	ldrb	r3, [r7, #21]
 800c112:	4618      	mov	r0, r3
 800c114:	f7ff fc9e 	bl	800ba54 <spi_data_rsp>
 800c118:	4603      	mov	r3, r0
 800c11a:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800c11c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d00c      	beq.n	800c13e <nm_spi_write+0xe6>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
 800c124:	f240 2263 	movw	r2, #611	@ 0x263
 800c128:	491e      	ldr	r1, [pc, #120]	@ (800c1a4 <nm_spi_write+0x14c>)
 800c12a:	481f      	ldr	r0, [pc, #124]	@ (800c1a8 <nm_spi_write+0x150>)
 800c12c:	f000 fccc 	bl	800cac8 <iprintf>
 800c130:	4820      	ldr	r0, [pc, #128]	@ (800c1b4 <nm_spi_write+0x15c>)
 800c132:	f000 fd39 	bl	800cba8 <puts>
 800c136:	200d      	movs	r0, #13
 800c138:	f000 fcd8 	bl	800caec <putchar>
		goto _FAIL_;
 800c13c:	e000      	b.n	800c140 <nm_spi_write+0xe8>
	}
	
_FAIL_:
 800c13e:	bf00      	nop
	if(result != N_OK)
 800c140:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d026      	beq.n	800c196 <nm_spi_write+0x13e>
	{
		nm_bsp_sleep(1);
 800c148:	2001      	movs	r0, #1
 800c14a:	f7fd fa4b 	bl	80095e4 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800c14e:	2300      	movs	r3, #0
 800c150:	9300      	str	r3, [sp, #0]
 800c152:	2300      	movs	r3, #0
 800c154:	2200      	movs	r2, #0
 800c156:	2100      	movs	r1, #0
 800c158:	20cf      	movs	r0, #207	@ 0xcf
 800c15a:	f7ff fb53 	bl	800b804 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800c15e:	20cf      	movs	r0, #207	@ 0xcf
 800c160:	f7ff fcd8 	bl	800bb14 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %x %d\n",retry,addr,size);
 800c164:	f240 226d 	movw	r2, #621	@ 0x26d
 800c168:	490e      	ldr	r1, [pc, #56]	@ (800c1a4 <nm_spi_write+0x14c>)
 800c16a:	480f      	ldr	r0, [pc, #60]	@ (800c1a8 <nm_spi_write+0x150>)
 800c16c:	f000 fcac 	bl	800cac8 <iprintf>
 800c170:	7db9      	ldrb	r1, [r7, #22]
 800c172:	88fb      	ldrh	r3, [r7, #6]
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	4810      	ldr	r0, [pc, #64]	@ (800c1b8 <nm_spi_write+0x160>)
 800c178:	f000 fca6 	bl	800cac8 <iprintf>
 800c17c:	200d      	movs	r0, #13
 800c17e:	f000 fcb5 	bl	800caec <putchar>
		nm_bsp_sleep(1);
 800c182:	2001      	movs	r0, #1
 800c184:	f7fd fa2e 	bl	80095e4 <nm_bsp_sleep>
		retry--;
 800c188:	7dbb      	ldrb	r3, [r7, #22]
 800c18a:	3b01      	subs	r3, #1
 800c18c:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800c18e:	7dbb      	ldrb	r3, [r7, #22]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d000      	beq.n	800c196 <nm_spi_write+0x13e>
 800c194:	e76b      	b.n	800c06e <nm_spi_write+0x16>
	}


	return result;
 800c196:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3718      	adds	r7, #24
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	0800e9f8 	.word	0x0800e9f8
 800c1a8:	0800e0ec 	.word	0x0800e0ec
 800c1ac:	0800e3e4 	.word	0x0800e3e4
 800c1b0:	0800e414 	.word	0x0800e414
 800c1b4:	0800e44c 	.word	0x0800e44c
 800c1b8:	0800e474 	.word	0x0800e474

0800c1bc <nm_spi_read_reg_with_ret>:
 *  @param[out] pu32RetVal
 *                  Pointer to u32 variable used to return the read value
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_read_reg_with_ret(uint32 addr, uint32 *u32data)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b086      	sub	sp, #24
 800c1c0:	af02      	add	r7, sp, #8
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800c1c6:	230a      	movs	r3, #10
 800c1c8:	73fb      	strb	r3, [r7, #15]
	volatile sint8 result = N_OK;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	733b      	strb	r3, [r7, #12]
	uint8 cmd = CMD_SINGLE_READ;
 800c1ce:	23ca      	movs	r3, #202	@ 0xca
 800c1d0:	73bb      	strb	r3, [r7, #14]
	uint8 tmp[4];
	uint8 clockless = 0;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	737b      	strb	r3, [r7, #13]

_RETRY_:

	if (addr <= 0xff)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2bff      	cmp	r3, #255	@ 0xff
 800c1da:	d803      	bhi.n	800c1e4 <nm_spi_read_reg_with_ret+0x28>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
 800c1dc:	23c4      	movs	r3, #196	@ 0xc4
 800c1de:	73bb      	strb	r3, [r7, #14]
		clockless = 1;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	737b      	strb	r3, [r7, #13]
	}

	result = spi_cmd(cmd, addr, 0, 4, clockless);
 800c1e4:	7bb8      	ldrb	r0, [r7, #14]
 800c1e6:	7b7b      	ldrb	r3, [r7, #13]
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	2304      	movs	r3, #4
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	6879      	ldr	r1, [r7, #4]
 800c1f0:	f7ff fb08 	bl	800b804 <spi_cmd>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800c1f8:	7b3b      	ldrb	r3, [r7, #12]
 800c1fa:	b25b      	sxtb	r3, r3
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00d      	beq.n	800c21c <nm_spi_read_reg_with_ret+0x60>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
 800c200:	f240 2295 	movw	r2, #661	@ 0x295
 800c204:	493d      	ldr	r1, [pc, #244]	@ (800c2fc <nm_spi_read_reg_with_ret+0x140>)
 800c206:	483e      	ldr	r0, [pc, #248]	@ (800c300 <nm_spi_read_reg_with_ret+0x144>)
 800c208:	f000 fc5e 	bl	800cac8 <iprintf>
 800c20c:	6879      	ldr	r1, [r7, #4]
 800c20e:	483d      	ldr	r0, [pc, #244]	@ (800c304 <nm_spi_read_reg_with_ret+0x148>)
 800c210:	f000 fc5a 	bl	800cac8 <iprintf>
 800c214:	200d      	movs	r0, #13
 800c216:	f000 fc69 	bl	800caec <putchar>
		goto _FAIL_;
 800c21a:	e03e      	b.n	800c29a <nm_spi_read_reg_with_ret+0xde>
	}

	result = spi_cmd_rsp(cmd);
 800c21c:	7bbb      	ldrb	r3, [r7, #14]
 800c21e:	4618      	mov	r0, r3
 800c220:	f7ff fc78 	bl	800bb14 <spi_cmd_rsp>
 800c224:	4603      	mov	r3, r0
 800c226:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800c228:	7b3b      	ldrb	r3, [r7, #12]
 800c22a:	b25b      	sxtb	r3, r3
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00d      	beq.n	800c24c <nm_spi_read_reg_with_ret+0x90>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
 800c230:	f240 229b 	movw	r2, #667	@ 0x29b
 800c234:	4931      	ldr	r1, [pc, #196]	@ (800c2fc <nm_spi_read_reg_with_ret+0x140>)
 800c236:	4832      	ldr	r0, [pc, #200]	@ (800c300 <nm_spi_read_reg_with_ret+0x144>)
 800c238:	f000 fc46 	bl	800cac8 <iprintf>
 800c23c:	6879      	ldr	r1, [r7, #4]
 800c23e:	4832      	ldr	r0, [pc, #200]	@ (800c308 <nm_spi_read_reg_with_ret+0x14c>)
 800c240:	f000 fc42 	bl	800cac8 <iprintf>
 800c244:	200d      	movs	r0, #13
 800c246:	f000 fc51 	bl	800caec <putchar>
		goto _FAIL_;
 800c24a:	e026      	b.n	800c29a <nm_spi_read_reg_with_ret+0xde>
	}

	/* to avoid endianness issues */
	result = spi_data_read(&tmp[0], 4, clockless);
 800c24c:	7b7a      	ldrb	r2, [r7, #13]
 800c24e:	f107 0308 	add.w	r3, r7, #8
 800c252:	2104      	movs	r1, #4
 800c254:	4618      	mov	r0, r3
 800c256:	f7ff fd23 	bl	800bca0 <spi_data_read>
 800c25a:	4603      	mov	r3, r0
 800c25c:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800c25e:	7b3b      	ldrb	r3, [r7, #12]
 800c260:	b25b      	sxtb	r3, r3
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00c      	beq.n	800c280 <nm_spi_read_reg_with_ret+0xc4>
		M2M_ERR("[nmi spi]: Failed data read...\n");
 800c266:	f240 22a2 	movw	r2, #674	@ 0x2a2
 800c26a:	4924      	ldr	r1, [pc, #144]	@ (800c2fc <nm_spi_read_reg_with_ret+0x140>)
 800c26c:	4824      	ldr	r0, [pc, #144]	@ (800c300 <nm_spi_read_reg_with_ret+0x144>)
 800c26e:	f000 fc2b 	bl	800cac8 <iprintf>
 800c272:	4826      	ldr	r0, [pc, #152]	@ (800c30c <nm_spi_read_reg_with_ret+0x150>)
 800c274:	f000 fc98 	bl	800cba8 <puts>
 800c278:	200d      	movs	r0, #13
 800c27a:	f000 fc37 	bl	800caec <putchar>
		goto _FAIL_;
 800c27e:	e00c      	b.n	800c29a <nm_spi_read_reg_with_ret+0xde>
	}

	*u32data = tmp[0] |
 800c280:	7a3b      	ldrb	r3, [r7, #8]
 800c282:	461a      	mov	r2, r3
		((uint32)tmp[1] << 8) |
 800c284:	7a7b      	ldrb	r3, [r7, #9]
 800c286:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
 800c288:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
 800c28a:	7abb      	ldrb	r3, [r7, #10]
 800c28c:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
 800c28e:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
 800c290:	7afb      	ldrb	r3, [r7, #11]
 800c292:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
 800c294:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
 800c29a:	7b3b      	ldrb	r3, [r7, #12]
 800c29c:	b25b      	sxtb	r3, r3
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d026      	beq.n	800c2f0 <nm_spi_read_reg_with_ret+0x134>
	{
		nm_bsp_sleep(1);
 800c2a2:	2001      	movs	r0, #1
 800c2a4:	f7fd f99e 	bl	80095e4 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	2100      	movs	r1, #0
 800c2b2:	20cf      	movs	r0, #207	@ 0xcf
 800c2b4:	f7ff faa6 	bl	800b804 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800c2b8:	20cf      	movs	r0, #207	@ 0xcf
 800c2ba:	f7ff fc2b 	bl	800bb14 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
 800c2be:	f240 22b1 	movw	r2, #689	@ 0x2b1
 800c2c2:	490e      	ldr	r1, [pc, #56]	@ (800c2fc <nm_spi_read_reg_with_ret+0x140>)
 800c2c4:	480e      	ldr	r0, [pc, #56]	@ (800c300 <nm_spi_read_reg_with_ret+0x144>)
 800c2c6:	f000 fbff 	bl	800cac8 <iprintf>
 800c2ca:	7bfb      	ldrb	r3, [r7, #15]
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	480f      	ldr	r0, [pc, #60]	@ (800c310 <nm_spi_read_reg_with_ret+0x154>)
 800c2d2:	f000 fbf9 	bl	800cac8 <iprintf>
 800c2d6:	200d      	movs	r0, #13
 800c2d8:	f000 fc08 	bl	800caec <putchar>
		nm_bsp_sleep(1);
 800c2dc:	2001      	movs	r0, #1
 800c2de:	f7fd f981 	bl	80095e4 <nm_bsp_sleep>
		retry--;
 800c2e2:	7bfb      	ldrb	r3, [r7, #15]
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800c2e8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d000      	beq.n	800c2f0 <nm_spi_read_reg_with_ret+0x134>
 800c2ee:	e772      	b.n	800c1d6 <nm_spi_read_reg_with_ret+0x1a>
	}
		
	return result;
 800c2f0:	7b3b      	ldrb	r3, [r7, #12]
 800c2f2:	b25b      	sxtb	r3, r3
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3710      	adds	r7, #16
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	0800ea08 	.word	0x0800ea08
 800c300:	0800e0ec 	.word	0x0800e0ec
 800c304:	0800e490 	.word	0x0800e490
 800c308:	0800e4bc 	.word	0x0800e4bc
 800c30c:	0800e4f0 	.word	0x0800e4f0
 800c310:	0800e510 	.word	0x0800e510

0800c314 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b088      	sub	sp, #32
 800c318:	af02      	add	r7, sp, #8
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	4613      	mov	r3, r2
 800c320:	80fb      	strh	r3, [r7, #6]
	uint8 cmd = CMD_DMA_EXT_READ;
 800c322:	23c8      	movs	r3, #200	@ 0xc8
 800c324:	753b      	strb	r3, [r7, #20]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800c326:	230a      	movs	r3, #10
 800c328:	75bb      	strb	r3, [r7, #22]
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
 800c32a:	2300      	movs	r3, #0
 800c32c:	757b      	strb	r3, [r7, #21]
_RETRY_:

	/**
		Command
	**/
	if (size == 1)
 800c32e:	88fb      	ldrh	r3, [r7, #6]
 800c330:	2b01      	cmp	r3, #1
 800c332:	d103      	bne.n	800c33c <nm_spi_read+0x28>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
 800c334:	2302      	movs	r3, #2
 800c336:	80fb      	strh	r3, [r7, #6]
		single_byte_workaround = 1;
 800c338:	2301      	movs	r3, #1
 800c33a:	757b      	strb	r3, [r7, #21]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
 800c33c:	88fb      	ldrh	r3, [r7, #6]
 800c33e:	7d38      	ldrb	r0, [r7, #20]
 800c340:	2200      	movs	r2, #0
 800c342:	9200      	str	r2, [sp, #0]
 800c344:	2200      	movs	r2, #0
 800c346:	68f9      	ldr	r1, [r7, #12]
 800c348:	f7ff fa5c 	bl	800b804 <spi_cmd>
 800c34c:	4603      	mov	r3, r0
 800c34e:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800c350:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00d      	beq.n	800c374 <nm_spi_read+0x60>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
 800c358:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800c35c:	493f      	ldr	r1, [pc, #252]	@ (800c45c <nm_spi_read+0x148>)
 800c35e:	4840      	ldr	r0, [pc, #256]	@ (800c460 <nm_spi_read+0x14c>)
 800c360:	f000 fbb2 	bl	800cac8 <iprintf>
 800c364:	68f9      	ldr	r1, [r7, #12]
 800c366:	483f      	ldr	r0, [pc, #252]	@ (800c464 <nm_spi_read+0x150>)
 800c368:	f000 fbae 	bl	800cac8 <iprintf>
 800c36c:	200d      	movs	r0, #13
 800c36e:	f000 fbbd 	bl	800caec <putchar>
		goto _FAIL_;
 800c372:	e041      	b.n	800c3f8 <nm_spi_read+0xe4>
	}

	result = spi_cmd_rsp(cmd);
 800c374:	7d3b      	ldrb	r3, [r7, #20]
 800c376:	4618      	mov	r0, r3
 800c378:	f7ff fbcc 	bl	800bb14 <spi_cmd_rsp>
 800c37c:	4603      	mov	r3, r0
 800c37e:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800c380:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00d      	beq.n	800c3a4 <nm_spi_read+0x90>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
 800c388:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800c38c:	4933      	ldr	r1, [pc, #204]	@ (800c45c <nm_spi_read+0x148>)
 800c38e:	4834      	ldr	r0, [pc, #208]	@ (800c460 <nm_spi_read+0x14c>)
 800c390:	f000 fb9a 	bl	800cac8 <iprintf>
 800c394:	68f9      	ldr	r1, [r7, #12]
 800c396:	4834      	ldr	r0, [pc, #208]	@ (800c468 <nm_spi_read+0x154>)
 800c398:	f000 fb96 	bl	800cac8 <iprintf>
 800c39c:	200d      	movs	r0, #13
 800c39e:	f000 fba5 	bl	800caec <putchar>
		goto _FAIL_;
 800c3a2:	e029      	b.n	800c3f8 <nm_spi_read+0xe4>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
 800c3a4:	7d7b      	ldrb	r3, [r7, #21]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00c      	beq.n	800c3c4 <nm_spi_read+0xb0>
	{
		result = spi_data_read(tmp, size,0);
 800c3aa:	88f9      	ldrh	r1, [r7, #6]
 800c3ac:	f107 0310 	add.w	r3, r7, #16
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7ff fc74 	bl	800bca0 <spi_data_read>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	75fb      	strb	r3, [r7, #23]
		buf[0] = tmp[0];
 800c3bc:	7c3a      	ldrb	r2, [r7, #16]
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	701a      	strb	r2, [r3, #0]
 800c3c2:	e007      	b.n	800c3d4 <nm_spi_read+0xc0>
	}
	else
		result = spi_data_read(buf, size,0);
 800c3c4:	88fb      	ldrh	r3, [r7, #6]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	68b8      	ldr	r0, [r7, #8]
 800c3cc:	f7ff fc68 	bl	800bca0 <spi_data_read>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	75fb      	strb	r3, [r7, #23]

	if (result != N_OK) {
 800c3d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00c      	beq.n	800c3f6 <nm_spi_read+0xe2>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
 800c3dc:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800c3e0:	491e      	ldr	r1, [pc, #120]	@ (800c45c <nm_spi_read+0x148>)
 800c3e2:	481f      	ldr	r0, [pc, #124]	@ (800c460 <nm_spi_read+0x14c>)
 800c3e4:	f000 fb70 	bl	800cac8 <iprintf>
 800c3e8:	4820      	ldr	r0, [pc, #128]	@ (800c46c <nm_spi_read+0x158>)
 800c3ea:	f000 fbdd 	bl	800cba8 <puts>
 800c3ee:	200d      	movs	r0, #13
 800c3f0:	f000 fb7c 	bl	800caec <putchar>
		goto _FAIL_;
 800c3f4:	e000      	b.n	800c3f8 <nm_spi_read+0xe4>
	}

_FAIL_:
 800c3f6:	bf00      	nop
	if(result != N_OK)
 800c3f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d026      	beq.n	800c44e <nm_spi_read+0x13a>
	{
		nm_bsp_sleep(1);
 800c400:	2001      	movs	r0, #1
 800c402:	f7fd f8ef 	bl	80095e4 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800c406:	2300      	movs	r3, #0
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	2300      	movs	r3, #0
 800c40c:	2200      	movs	r2, #0
 800c40e:	2100      	movs	r1, #0
 800c410:	20cf      	movs	r0, #207	@ 0xcf
 800c412:	f7ff f9f7 	bl	800b804 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800c416:	20cf      	movs	r0, #207	@ 0xcf
 800c418:	f7ff fb7c 	bl	800bb14 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
 800c41c:	f240 22ef 	movw	r2, #751	@ 0x2ef
 800c420:	490e      	ldr	r1, [pc, #56]	@ (800c45c <nm_spi_read+0x148>)
 800c422:	480f      	ldr	r0, [pc, #60]	@ (800c460 <nm_spi_read+0x14c>)
 800c424:	f000 fb50 	bl	800cac8 <iprintf>
 800c428:	7db9      	ldrb	r1, [r7, #22]
 800c42a:	88fb      	ldrh	r3, [r7, #6]
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	4810      	ldr	r0, [pc, #64]	@ (800c470 <nm_spi_read+0x15c>)
 800c430:	f000 fb4a 	bl	800cac8 <iprintf>
 800c434:	200d      	movs	r0, #13
 800c436:	f000 fb59 	bl	800caec <putchar>
		nm_bsp_sleep(1);
 800c43a:	2001      	movs	r0, #1
 800c43c:	f7fd f8d2 	bl	80095e4 <nm_bsp_sleep>
		retry--;
 800c440:	7dbb      	ldrb	r3, [r7, #22]
 800c442:	3b01      	subs	r3, #1
 800c444:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800c446:	7dbb      	ldrb	r3, [r7, #22]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d000      	beq.n	800c44e <nm_spi_read+0x13a>
 800c44c:	e76f      	b.n	800c32e <nm_spi_read+0x1a>
	}

	return result;
 800c44e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c452:	4618      	mov	r0, r3
 800c454:	3718      	adds	r7, #24
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	0800ea24 	.word	0x0800ea24
 800c460:	0800e0ec 	.word	0x0800e0ec
 800c464:	0800e528 	.word	0x0800e528
 800c468:	0800e558 	.word	0x0800e558
 800c46c:	0800e590 	.word	0x0800e590
 800c470:	0800e5b8 	.word	0x0800e5b8

0800c474 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
 800c47a:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800c47e:	f000 f8b1 	bl	800c5e4 <nm_spi_read_reg>
 800c482:	6078      	str	r0, [r7, #4]
	val32 &= ~(0x7 << 4);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c48a:	607b      	str	r3, [r7, #4]
            break;
        case 4096:
            val32 |= (4 << 4);
            break;
        case 8192:
            val32 |= (5 << 4);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800c492:	607b      	str	r3, [r7, #4]
            break;
 800c494:	bf00      	nop
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
 800c496:	6879      	ldr	r1, [r7, #4]
 800c498:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800c49c:	f7ff fd58 	bl	800bf50 <nm_spi_write_reg>
}
 800c4a0:	bf00      	nop
 800c4a2:	3708      	adds	r7, #8
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <nm_spi_init>:
*	@fn		nm_spi_init
*	@brief	Initialize the SPI
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_spi_init(void)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
 800c4b2:	4b3e      	ldr	r3, [pc, #248]	@ (800c5ac <nm_spi_init+0x104>)
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	701a      	strb	r2, [r3, #0]

    if(nm_spi_read_reg_with_ret(NMI_SPI_PROTOCOL_CONFIG, &reg) != M2M_SUCCESS) {
 800c4b8:	463b      	mov	r3, r7
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800c4c0:	f7ff fe7c 	bl	800c1bc <nm_spi_read_reg_with_ret>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d026      	beq.n	800c518 <nm_spi_init+0x70>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
 800c4ca:	4b38      	ldr	r3, [pc, #224]	@ (800c5ac <nm_spi_init+0x104>)
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retrying with CRC off...\n");
 800c4d0:	f240 3231 	movw	r2, #817	@ 0x331
 800c4d4:	4936      	ldr	r1, [pc, #216]	@ (800c5b0 <nm_spi_init+0x108>)
 800c4d6:	4837      	ldr	r0, [pc, #220]	@ (800c5b4 <nm_spi_init+0x10c>)
 800c4d8:	f000 faf6 	bl	800cac8 <iprintf>
 800c4dc:	4836      	ldr	r0, [pc, #216]	@ (800c5b8 <nm_spi_init+0x110>)
 800c4de:	f000 fb63 	bl	800cba8 <puts>
 800c4e2:	200d      	movs	r0, #13
 800c4e4:	f000 fb02 	bl	800caec <putchar>
        if(nm_spi_read_reg_with_ret(NMI_SPI_PROTOCOL_CONFIG, &reg) != M2M_SUCCESS) {
 800c4e8:	463b      	mov	r3, r7
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800c4f0:	f7ff fe64 	bl	800c1bc <nm_spi_read_reg_with_ret>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00e      	beq.n	800c518 <nm_spi_init+0x70>
			// Read failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
 800c4fa:	f44f 724d 	mov.w	r2, #820	@ 0x334
 800c4fe:	492c      	ldr	r1, [pc, #176]	@ (800c5b0 <nm_spi_init+0x108>)
 800c500:	482c      	ldr	r0, [pc, #176]	@ (800c5b4 <nm_spi_init+0x10c>)
 800c502:	f000 fae1 	bl	800cac8 <iprintf>
 800c506:	482d      	ldr	r0, [pc, #180]	@ (800c5bc <nm_spi_init+0x114>)
 800c508:	f000 fb4e 	bl	800cba8 <puts>
 800c50c:	200d      	movs	r0, #13
 800c50e:	f000 faed 	bl	800caec <putchar>
            return M2M_ERR_BUS_FAIL;
 800c512:	f06f 0305 	mvn.w	r3, #5
 800c516:	e045      	b.n	800c5a4 <nm_spi_init+0xfc>
		}
	}
	if(gu8Crc_off == 0)
 800c518:	4b24      	ldr	r3, [pc, #144]	@ (800c5ac <nm_spi_init+0x104>)
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d126      	bne.n	800c56e <nm_spi_init+0xc6>
	{
		reg &= ~0xc;	/* disable crc checking */
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	f023 030c 	bic.w	r3, r3, #12
 800c526:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c52e:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800c536:	603b      	str	r3, [r7, #0]
        if(nm_spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg) != M2M_SUCCESS) {
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	4619      	mov	r1, r3
 800c53c:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800c540:	f7ff fd06 	bl	800bf50 <nm_spi_write_reg>
 800c544:	4603      	mov	r3, r0
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00e      	beq.n	800c568 <nm_spi_init+0xc0>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
 800c54a:	f240 323e 	movw	r2, #830	@ 0x33e
 800c54e:	4918      	ldr	r1, [pc, #96]	@ (800c5b0 <nm_spi_init+0x108>)
 800c550:	4818      	ldr	r0, [pc, #96]	@ (800c5b4 <nm_spi_init+0x10c>)
 800c552:	f000 fab9 	bl	800cac8 <iprintf>
 800c556:	481a      	ldr	r0, [pc, #104]	@ (800c5c0 <nm_spi_init+0x118>)
 800c558:	f000 fb26 	bl	800cba8 <puts>
 800c55c:	200d      	movs	r0, #13
 800c55e:	f000 fac5 	bl	800caec <putchar>
            return M2M_ERR_BUS_FAIL;
 800c562:	f06f 0305 	mvn.w	r3, #5
 800c566:	e01d      	b.n	800c5a4 <nm_spi_init+0xfc>
		}
		gu8Crc_off = 1;
 800c568:	4b10      	ldr	r3, [pc, #64]	@ (800c5ac <nm_spi_init+0x104>)
 800c56a:	2201      	movs	r2, #1
 800c56c:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
    if(nm_spi_read_reg_with_ret(0x1000, &chipid) != M2M_SUCCESS) {
 800c56e:	1d3b      	adds	r3, r7, #4
 800c570:	4619      	mov	r1, r3
 800c572:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800c576:	f7ff fe21 	bl	800c1bc <nm_spi_read_reg_with_ret>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00e      	beq.n	800c59e <nm_spi_init+0xf6>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
 800c580:	f44f 7252 	mov.w	r2, #840	@ 0x348
 800c584:	490a      	ldr	r1, [pc, #40]	@ (800c5b0 <nm_spi_init+0x108>)
 800c586:	480b      	ldr	r0, [pc, #44]	@ (800c5b4 <nm_spi_init+0x10c>)
 800c588:	f000 fa9e 	bl	800cac8 <iprintf>
 800c58c:	480d      	ldr	r0, [pc, #52]	@ (800c5c4 <nm_spi_init+0x11c>)
 800c58e:	f000 fb0b 	bl	800cba8 <puts>
 800c592:	200d      	movs	r0, #13
 800c594:	f000 faaa 	bl	800caec <putchar>
		return M2M_ERR_BUS_FAIL;
 800c598:	f06f 0305 	mvn.w	r3, #5
 800c59c:	e002      	b.n	800c5a4 <nm_spi_init+0xfc>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
 800c59e:	f7ff ff69 	bl	800c474 <spi_init_pkt_sz>


	return M2M_SUCCESS;
 800c5a2:	2300      	movs	r3, #0
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	2000063c 	.word	0x2000063c
 800c5b0:	0800ea30 	.word	0x0800ea30
 800c5b4:	0800e0ec 	.word	0x0800e0ec
 800c5b8:	0800e5d4 	.word	0x0800e5d4
 800c5bc:	0800e624 	.word	0x0800e624
 800c5c0:	0800e650 	.word	0x0800e650
 800c5c4:	0800e684 	.word	0x0800e684

0800c5c8 <nm_spi_deinit>:
*	@fn		nm_spi_init
*	@brief	DeInitialize the SPI 
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
*/ 
sint8 nm_spi_deinit(void)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
 800c5cc:	4b04      	ldr	r3, [pc, #16]	@ (800c5e0 <nm_spi_deinit+0x18>)
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	2000063c 	.word	0x2000063c

0800c5e4 <nm_spi_read_reg>:
*	@param [in]	u32Addr
*				Register address
*	@return	Register value
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

    nm_spi_read_reg_with_ret(u32Addr, &u32Val);
 800c5ec:	f107 030c 	add.w	r3, r7, #12
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7ff fde2 	bl	800c1bc <nm_spi_read_reg_with_ret>

	return u32Val;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b086      	sub	sp, #24
 800c606:	af00      	add	r7, sp, #0
 800c608:	60f8      	str	r0, [r7, #12]
 800c60a:	60b9      	str	r1, [r7, #8]
 800c60c:	4613      	mov	r3, r2
 800c60e:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 800c610:	88fb      	ldrh	r3, [r7, #6]
 800c612:	461a      	mov	r2, r3
 800c614:	68b9      	ldr	r1, [r7, #8]
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f7ff fe7c 	bl	800c314 <nm_spi_read>
 800c61c:	4603      	mov	r3, r0
 800c61e:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800c620:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d102      	bne.n	800c62e <nm_spi_read_block+0x2c>
 800c628:	2300      	movs	r3, #0
 800c62a:	75fb      	strb	r3, [r7, #23]
 800c62c:	e001      	b.n	800c632 <nm_spi_read_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800c62e:	23fa      	movs	r3, #250	@ 0xfa
 800c630:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800c632:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3718      	adds	r7, #24
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b086      	sub	sp, #24
 800c642:	af00      	add	r7, sp, #0
 800c644:	60f8      	str	r0, [r7, #12]
 800c646:	60b9      	str	r1, [r7, #8]
 800c648:	4613      	mov	r3, r2
 800c64a:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 800c64c:	88fb      	ldrh	r3, [r7, #6]
 800c64e:	461a      	mov	r2, r3
 800c650:	68b9      	ldr	r1, [r7, #8]
 800c652:	68f8      	ldr	r0, [r7, #12]
 800c654:	f7ff fd00 	bl	800c058 <nm_spi_write>
 800c658:	4603      	mov	r3, r0
 800c65a:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800c65c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d102      	bne.n	800c66a <nm_spi_write_block+0x2c>
 800c664:	2300      	movs	r3, #0
 800c666:	75fb      	strb	r3, [r7, #23]
 800c668:	e001      	b.n	800c66e <nm_spi_write_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800c66a:	23fa      	movs	r3, #250	@ 0xfa
 800c66c:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800c66e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c672:	4618      	mov	r0, r3
 800c674:	3718      	adds	r7, #24
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
	...

0800c67c <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800c682:	463b      	mov	r3, r7
 800c684:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	22b9      	movs	r2, #185	@ 0xb9
 800c68a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800c68c:	2100      	movs	r1, #0
 800c68e:	4810      	ldr	r0, [pc, #64]	@ (800c6d0 <spi_flash_enter_low_power_mode+0x54>)
 800c690:	f7fe fe00 	bl	800b294 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	4619      	mov	r1, r3
 800c69a:	480e      	ldr	r0, [pc, #56]	@ (800c6d4 <spi_flash_enter_low_power_mode+0x58>)
 800c69c:	f7fe fdfa 	bl	800b294 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800c6a0:	2101      	movs	r1, #1
 800c6a2:	480d      	ldr	r0, [pc, #52]	@ (800c6d8 <spi_flash_enter_low_power_mode+0x5c>)
 800c6a4:	f7fe fdf6 	bl	800b294 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	480c      	ldr	r0, [pc, #48]	@ (800c6dc <spi_flash_enter_low_power_mode+0x60>)
 800c6ac:	f7fe fdf2 	bl	800b294 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
 800c6b0:	2181      	movs	r1, #129	@ 0x81
 800c6b2:	480b      	ldr	r0, [pc, #44]	@ (800c6e0 <spi_flash_enter_low_power_mode+0x64>)
 800c6b4:	f7fe fdee 	bl	800b294 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800c6b8:	bf00      	nop
 800c6ba:	480a      	ldr	r0, [pc, #40]	@ (800c6e4 <spi_flash_enter_low_power_mode+0x68>)
 800c6bc:	f7fe fdd0 	bl	800b260 <nm_read_reg>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d1f9      	bne.n	800c6ba <spi_flash_enter_low_power_mode+0x3e>
}
 800c6c6:	bf00      	nop
 800c6c8:	bf00      	nop
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	00010208 	.word	0x00010208
 800c6d4:	0001020c 	.word	0x0001020c
 800c6d8:	00010214 	.word	0x00010214
 800c6dc:	0001021c 	.word	0x0001021c
 800c6e0:	00010204 	.word	0x00010204
 800c6e4:	00010218 	.word	0x00010218

0800c6e8 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800c6ee:	463b      	mov	r3, r7
 800c6f0:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	22ab      	movs	r2, #171	@ 0xab
 800c6f6:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	4810      	ldr	r0, [pc, #64]	@ (800c73c <spi_flash_leave_low_power_mode+0x54>)
 800c6fc:	f7fe fdca 	bl	800b294 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	4619      	mov	r1, r3
 800c706:	480e      	ldr	r0, [pc, #56]	@ (800c740 <spi_flash_leave_low_power_mode+0x58>)
 800c708:	f7fe fdc4 	bl	800b294 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800c70c:	2101      	movs	r1, #1
 800c70e:	480d      	ldr	r0, [pc, #52]	@ (800c744 <spi_flash_leave_low_power_mode+0x5c>)
 800c710:	f7fe fdc0 	bl	800b294 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800c714:	2100      	movs	r1, #0
 800c716:	480c      	ldr	r0, [pc, #48]	@ (800c748 <spi_flash_leave_low_power_mode+0x60>)
 800c718:	f7fe fdbc 	bl	800b294 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
 800c71c:	2181      	movs	r1, #129	@ 0x81
 800c71e:	480b      	ldr	r0, [pc, #44]	@ (800c74c <spi_flash_leave_low_power_mode+0x64>)
 800c720:	f7fe fdb8 	bl	800b294 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800c724:	bf00      	nop
 800c726:	480a      	ldr	r0, [pc, #40]	@ (800c750 <spi_flash_leave_low_power_mode+0x68>)
 800c728:	f7fe fd9a 	bl	800b260 <nm_read_reg>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d1f9      	bne.n	800c726 <spi_flash_leave_low_power_mode+0x3e>
}
 800c732:	bf00      	nop
 800c734:	bf00      	nop
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	00010208 	.word	0x00010208
 800c740:	0001020c 	.word	0x0001020c
 800c744:	00010214 	.word	0x00010214
 800c748:	0001021c 	.word	0x0001021c
 800c74c:	00010204 	.word	0x00010204
 800c750:	00010218 	.word	0x00010218

0800c754 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	4603      	mov	r3, r0
 800c75c:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = M2M_SUCCESS;
 800c75e:	2300      	movs	r3, #0
 800c760:	73fb      	strb	r3, [r7, #15]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
 800c762:	f7fe faa7 	bl	800acb4 <nmi_get_chipid>
 800c766:	4603      	mov	r3, r0
 800c768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c76c:	f5b3 7f68 	cmp.w	r3, #928	@ 0x3a0
 800c770:	d331      	bcc.n	800c7d6 <spi_flash_enable+0x82>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
 800c772:	f107 0308 	add.w	r3, r7, #8
 800c776:	4619      	mov	r1, r3
 800c778:	f241 4010 	movw	r0, #5136	@ 0x1410
 800c77c:	f7fe fd7c 	bl	800b278 <nm_read_reg_with_ret>
 800c780:	4603      	mov	r3, r0
 800c782:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != M2M_SUCCESS) {
 800c784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d126      	bne.n	800c7da <spi_flash_enable+0x86>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	f023 63ee 	bic.w	r3, r3, #124780544	@ 0x7700000
 800c792:	f423 23ee 	bic.w	r3, r3, #487424	@ 0x77000
 800c796:	60bb      	str	r3, [r7, #8]
		if(enable) {
 800c798:	79fb      	ldrb	r3, [r7, #7]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d00e      	beq.n	800c7bc <spi_flash_enable+0x68>
			u32Val |= ((0x1111ul) << 12);
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	f043 7388 	orr.w	r3, r3, #17825792	@ 0x1100000
 800c7a4:	f443 3388 	orr.w	r3, r3, #69632	@ 0x11000
 800c7a8:	60bb      	str	r3, [r7, #8]
			nm_write_reg(0x1410, u32Val);
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	f241 4010 	movw	r0, #5136	@ 0x1410
 800c7b2:	f7fe fd6f 	bl	800b294 <nm_write_reg>
			spi_flash_leave_low_power_mode();
 800c7b6:	f7ff ff97 	bl	800c6e8 <spi_flash_leave_low_power_mode>
 800c7ba:	e00f      	b.n	800c7dc <spi_flash_enable+0x88>
		} else {
			spi_flash_enter_low_power_mode();
 800c7bc:	f7ff ff5e 	bl	800c67c <spi_flash_enter_low_power_mode>
			/* Disable pinmux to SPI flash to minimize leakage. */
			u32Val |= ((0x0010ul) << 12);
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c7c6:	60bb      	str	r3, [r7, #8]
			nm_write_reg(0x1410, u32Val);
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	f241 4010 	movw	r0, #5136	@ 0x1410
 800c7d0:	f7fe fd60 	bl	800b294 <nm_write_reg>
 800c7d4:	e002      	b.n	800c7dc <spi_flash_enable+0x88>
		}
	}
ERR1:
 800c7d6:	bf00      	nop
 800c7d8:	e000      	b.n	800c7dc <spi_flash_enable+0x88>
			goto ERR1;
 800c7da:	bf00      	nop
	return s8Ret;
 800c7dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3710      	adds	r7, #16
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <sbrk_aligned>:
 800c7e8:	b570      	push	{r4, r5, r6, lr}
 800c7ea:	4e0f      	ldr	r6, [pc, #60]	@ (800c828 <sbrk_aligned+0x40>)
 800c7ec:	460c      	mov	r4, r1
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	6831      	ldr	r1, [r6, #0]
 800c7f2:	b911      	cbnz	r1, 800c7fa <sbrk_aligned+0x12>
 800c7f4:	f000 faf4 	bl	800cde0 <_sbrk_r>
 800c7f8:	6030      	str	r0, [r6, #0]
 800c7fa:	4621      	mov	r1, r4
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	f000 faef 	bl	800cde0 <_sbrk_r>
 800c802:	1c43      	adds	r3, r0, #1
 800c804:	d103      	bne.n	800c80e <sbrk_aligned+0x26>
 800c806:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c80a:	4620      	mov	r0, r4
 800c80c:	bd70      	pop	{r4, r5, r6, pc}
 800c80e:	1cc4      	adds	r4, r0, #3
 800c810:	f024 0403 	bic.w	r4, r4, #3
 800c814:	42a0      	cmp	r0, r4
 800c816:	d0f8      	beq.n	800c80a <sbrk_aligned+0x22>
 800c818:	1a21      	subs	r1, r4, r0
 800c81a:	4628      	mov	r0, r5
 800c81c:	f000 fae0 	bl	800cde0 <_sbrk_r>
 800c820:	3001      	adds	r0, #1
 800c822:	d1f2      	bne.n	800c80a <sbrk_aligned+0x22>
 800c824:	e7ef      	b.n	800c806 <sbrk_aligned+0x1e>
 800c826:	bf00      	nop
 800c828:	20000640 	.word	0x20000640

0800c82c <_malloc_r>:
 800c82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c830:	1ccd      	adds	r5, r1, #3
 800c832:	4606      	mov	r6, r0
 800c834:	f025 0503 	bic.w	r5, r5, #3
 800c838:	3508      	adds	r5, #8
 800c83a:	2d0c      	cmp	r5, #12
 800c83c:	bf38      	it	cc
 800c83e:	250c      	movcc	r5, #12
 800c840:	2d00      	cmp	r5, #0
 800c842:	db01      	blt.n	800c848 <_malloc_r+0x1c>
 800c844:	42a9      	cmp	r1, r5
 800c846:	d904      	bls.n	800c852 <_malloc_r+0x26>
 800c848:	230c      	movs	r3, #12
 800c84a:	6033      	str	r3, [r6, #0]
 800c84c:	2000      	movs	r0, #0
 800c84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c852:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c928 <_malloc_r+0xfc>
 800c856:	f000 f869 	bl	800c92c <__malloc_lock>
 800c85a:	f8d8 3000 	ldr.w	r3, [r8]
 800c85e:	461c      	mov	r4, r3
 800c860:	bb44      	cbnz	r4, 800c8b4 <_malloc_r+0x88>
 800c862:	4629      	mov	r1, r5
 800c864:	4630      	mov	r0, r6
 800c866:	f7ff ffbf 	bl	800c7e8 <sbrk_aligned>
 800c86a:	1c43      	adds	r3, r0, #1
 800c86c:	4604      	mov	r4, r0
 800c86e:	d158      	bne.n	800c922 <_malloc_r+0xf6>
 800c870:	f8d8 4000 	ldr.w	r4, [r8]
 800c874:	4627      	mov	r7, r4
 800c876:	2f00      	cmp	r7, #0
 800c878:	d143      	bne.n	800c902 <_malloc_r+0xd6>
 800c87a:	2c00      	cmp	r4, #0
 800c87c:	d04b      	beq.n	800c916 <_malloc_r+0xea>
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	4639      	mov	r1, r7
 800c882:	4630      	mov	r0, r6
 800c884:	eb04 0903 	add.w	r9, r4, r3
 800c888:	f000 faaa 	bl	800cde0 <_sbrk_r>
 800c88c:	4581      	cmp	r9, r0
 800c88e:	d142      	bne.n	800c916 <_malloc_r+0xea>
 800c890:	6821      	ldr	r1, [r4, #0]
 800c892:	4630      	mov	r0, r6
 800c894:	1a6d      	subs	r5, r5, r1
 800c896:	4629      	mov	r1, r5
 800c898:	f7ff ffa6 	bl	800c7e8 <sbrk_aligned>
 800c89c:	3001      	adds	r0, #1
 800c89e:	d03a      	beq.n	800c916 <_malloc_r+0xea>
 800c8a0:	6823      	ldr	r3, [r4, #0]
 800c8a2:	442b      	add	r3, r5
 800c8a4:	6023      	str	r3, [r4, #0]
 800c8a6:	f8d8 3000 	ldr.w	r3, [r8]
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	bb62      	cbnz	r2, 800c908 <_malloc_r+0xdc>
 800c8ae:	f8c8 7000 	str.w	r7, [r8]
 800c8b2:	e00f      	b.n	800c8d4 <_malloc_r+0xa8>
 800c8b4:	6822      	ldr	r2, [r4, #0]
 800c8b6:	1b52      	subs	r2, r2, r5
 800c8b8:	d420      	bmi.n	800c8fc <_malloc_r+0xd0>
 800c8ba:	2a0b      	cmp	r2, #11
 800c8bc:	d917      	bls.n	800c8ee <_malloc_r+0xc2>
 800c8be:	1961      	adds	r1, r4, r5
 800c8c0:	42a3      	cmp	r3, r4
 800c8c2:	6025      	str	r5, [r4, #0]
 800c8c4:	bf18      	it	ne
 800c8c6:	6059      	strne	r1, [r3, #4]
 800c8c8:	6863      	ldr	r3, [r4, #4]
 800c8ca:	bf08      	it	eq
 800c8cc:	f8c8 1000 	streq.w	r1, [r8]
 800c8d0:	5162      	str	r2, [r4, r5]
 800c8d2:	604b      	str	r3, [r1, #4]
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	f000 f82f 	bl	800c938 <__malloc_unlock>
 800c8da:	f104 000b 	add.w	r0, r4, #11
 800c8de:	1d23      	adds	r3, r4, #4
 800c8e0:	f020 0007 	bic.w	r0, r0, #7
 800c8e4:	1ac2      	subs	r2, r0, r3
 800c8e6:	bf1c      	itt	ne
 800c8e8:	1a1b      	subne	r3, r3, r0
 800c8ea:	50a3      	strne	r3, [r4, r2]
 800c8ec:	e7af      	b.n	800c84e <_malloc_r+0x22>
 800c8ee:	6862      	ldr	r2, [r4, #4]
 800c8f0:	42a3      	cmp	r3, r4
 800c8f2:	bf0c      	ite	eq
 800c8f4:	f8c8 2000 	streq.w	r2, [r8]
 800c8f8:	605a      	strne	r2, [r3, #4]
 800c8fa:	e7eb      	b.n	800c8d4 <_malloc_r+0xa8>
 800c8fc:	4623      	mov	r3, r4
 800c8fe:	6864      	ldr	r4, [r4, #4]
 800c900:	e7ae      	b.n	800c860 <_malloc_r+0x34>
 800c902:	463c      	mov	r4, r7
 800c904:	687f      	ldr	r7, [r7, #4]
 800c906:	e7b6      	b.n	800c876 <_malloc_r+0x4a>
 800c908:	461a      	mov	r2, r3
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	42a3      	cmp	r3, r4
 800c90e:	d1fb      	bne.n	800c908 <_malloc_r+0xdc>
 800c910:	2300      	movs	r3, #0
 800c912:	6053      	str	r3, [r2, #4]
 800c914:	e7de      	b.n	800c8d4 <_malloc_r+0xa8>
 800c916:	230c      	movs	r3, #12
 800c918:	4630      	mov	r0, r6
 800c91a:	6033      	str	r3, [r6, #0]
 800c91c:	f000 f80c 	bl	800c938 <__malloc_unlock>
 800c920:	e794      	b.n	800c84c <_malloc_r+0x20>
 800c922:	6005      	str	r5, [r0, #0]
 800c924:	e7d6      	b.n	800c8d4 <_malloc_r+0xa8>
 800c926:	bf00      	nop
 800c928:	20000644 	.word	0x20000644

0800c92c <__malloc_lock>:
 800c92c:	4801      	ldr	r0, [pc, #4]	@ (800c934 <__malloc_lock+0x8>)
 800c92e:	f000 baa4 	b.w	800ce7a <__retarget_lock_acquire_recursive>
 800c932:	bf00      	nop
 800c934:	20000788 	.word	0x20000788

0800c938 <__malloc_unlock>:
 800c938:	4801      	ldr	r0, [pc, #4]	@ (800c940 <__malloc_unlock+0x8>)
 800c93a:	f000 ba9f 	b.w	800ce7c <__retarget_lock_release_recursive>
 800c93e:	bf00      	nop
 800c940:	20000788 	.word	0x20000788

0800c944 <std>:
 800c944:	2300      	movs	r3, #0
 800c946:	b510      	push	{r4, lr}
 800c948:	4604      	mov	r4, r0
 800c94a:	6083      	str	r3, [r0, #8]
 800c94c:	8181      	strh	r1, [r0, #12]
 800c94e:	4619      	mov	r1, r3
 800c950:	6643      	str	r3, [r0, #100]	@ 0x64
 800c952:	81c2      	strh	r2, [r0, #14]
 800c954:	2208      	movs	r2, #8
 800c956:	6183      	str	r3, [r0, #24]
 800c958:	e9c0 3300 	strd	r3, r3, [r0]
 800c95c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c960:	305c      	adds	r0, #92	@ 0x5c
 800c962:	f000 fa01 	bl	800cd68 <memset>
 800c966:	4b0d      	ldr	r3, [pc, #52]	@ (800c99c <std+0x58>)
 800c968:	6224      	str	r4, [r4, #32]
 800c96a:	6263      	str	r3, [r4, #36]	@ 0x24
 800c96c:	4b0c      	ldr	r3, [pc, #48]	@ (800c9a0 <std+0x5c>)
 800c96e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c970:	4b0c      	ldr	r3, [pc, #48]	@ (800c9a4 <std+0x60>)
 800c972:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c974:	4b0c      	ldr	r3, [pc, #48]	@ (800c9a8 <std+0x64>)
 800c976:	6323      	str	r3, [r4, #48]	@ 0x30
 800c978:	4b0c      	ldr	r3, [pc, #48]	@ (800c9ac <std+0x68>)
 800c97a:	429c      	cmp	r4, r3
 800c97c:	d006      	beq.n	800c98c <std+0x48>
 800c97e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c982:	4294      	cmp	r4, r2
 800c984:	d002      	beq.n	800c98c <std+0x48>
 800c986:	33d0      	adds	r3, #208	@ 0xd0
 800c988:	429c      	cmp	r4, r3
 800c98a:	d105      	bne.n	800c998 <std+0x54>
 800c98c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c994:	f000 ba70 	b.w	800ce78 <__retarget_lock_init_recursive>
 800c998:	bd10      	pop	{r4, pc}
 800c99a:	bf00      	nop
 800c99c:	0800cbb9 	.word	0x0800cbb9
 800c9a0:	0800cbdb 	.word	0x0800cbdb
 800c9a4:	0800cc13 	.word	0x0800cc13
 800c9a8:	0800cc37 	.word	0x0800cc37
 800c9ac:	20000648 	.word	0x20000648

0800c9b0 <stdio_exit_handler>:
 800c9b0:	4a02      	ldr	r2, [pc, #8]	@ (800c9bc <stdio_exit_handler+0xc>)
 800c9b2:	4903      	ldr	r1, [pc, #12]	@ (800c9c0 <stdio_exit_handler+0x10>)
 800c9b4:	4803      	ldr	r0, [pc, #12]	@ (800c9c4 <stdio_exit_handler+0x14>)
 800c9b6:	f000 b869 	b.w	800ca8c <_fwalk_sglue>
 800c9ba:	bf00      	nop
 800c9bc:	20000010 	.word	0x20000010
 800c9c0:	0800d5c5 	.word	0x0800d5c5
 800c9c4:	20000020 	.word	0x20000020

0800c9c8 <cleanup_stdio>:
 800c9c8:	6841      	ldr	r1, [r0, #4]
 800c9ca:	4b0c      	ldr	r3, [pc, #48]	@ (800c9fc <cleanup_stdio+0x34>)
 800c9cc:	4299      	cmp	r1, r3
 800c9ce:	b510      	push	{r4, lr}
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	d001      	beq.n	800c9d8 <cleanup_stdio+0x10>
 800c9d4:	f000 fdf6 	bl	800d5c4 <_fflush_r>
 800c9d8:	68a1      	ldr	r1, [r4, #8]
 800c9da:	4b09      	ldr	r3, [pc, #36]	@ (800ca00 <cleanup_stdio+0x38>)
 800c9dc:	4299      	cmp	r1, r3
 800c9de:	d002      	beq.n	800c9e6 <cleanup_stdio+0x1e>
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f000 fdef 	bl	800d5c4 <_fflush_r>
 800c9e6:	68e1      	ldr	r1, [r4, #12]
 800c9e8:	4b06      	ldr	r3, [pc, #24]	@ (800ca04 <cleanup_stdio+0x3c>)
 800c9ea:	4299      	cmp	r1, r3
 800c9ec:	d004      	beq.n	800c9f8 <cleanup_stdio+0x30>
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9f4:	f000 bde6 	b.w	800d5c4 <_fflush_r>
 800c9f8:	bd10      	pop	{r4, pc}
 800c9fa:	bf00      	nop
 800c9fc:	20000648 	.word	0x20000648
 800ca00:	200006b0 	.word	0x200006b0
 800ca04:	20000718 	.word	0x20000718

0800ca08 <global_stdio_init.part.0>:
 800ca08:	b510      	push	{r4, lr}
 800ca0a:	4b0b      	ldr	r3, [pc, #44]	@ (800ca38 <global_stdio_init.part.0+0x30>)
 800ca0c:	2104      	movs	r1, #4
 800ca0e:	4c0b      	ldr	r4, [pc, #44]	@ (800ca3c <global_stdio_init.part.0+0x34>)
 800ca10:	4a0b      	ldr	r2, [pc, #44]	@ (800ca40 <global_stdio_init.part.0+0x38>)
 800ca12:	4620      	mov	r0, r4
 800ca14:	601a      	str	r2, [r3, #0]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f7ff ff94 	bl	800c944 <std>
 800ca1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ca20:	2201      	movs	r2, #1
 800ca22:	2109      	movs	r1, #9
 800ca24:	f7ff ff8e 	bl	800c944 <std>
 800ca28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ca2c:	2202      	movs	r2, #2
 800ca2e:	2112      	movs	r1, #18
 800ca30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca34:	f7ff bf86 	b.w	800c944 <std>
 800ca38:	20000780 	.word	0x20000780
 800ca3c:	20000648 	.word	0x20000648
 800ca40:	0800c9b1 	.word	0x0800c9b1

0800ca44 <__sfp_lock_acquire>:
 800ca44:	4801      	ldr	r0, [pc, #4]	@ (800ca4c <__sfp_lock_acquire+0x8>)
 800ca46:	f000 ba18 	b.w	800ce7a <__retarget_lock_acquire_recursive>
 800ca4a:	bf00      	nop
 800ca4c:	20000789 	.word	0x20000789

0800ca50 <__sfp_lock_release>:
 800ca50:	4801      	ldr	r0, [pc, #4]	@ (800ca58 <__sfp_lock_release+0x8>)
 800ca52:	f000 ba13 	b.w	800ce7c <__retarget_lock_release_recursive>
 800ca56:	bf00      	nop
 800ca58:	20000789 	.word	0x20000789

0800ca5c <__sinit>:
 800ca5c:	b510      	push	{r4, lr}
 800ca5e:	4604      	mov	r4, r0
 800ca60:	f7ff fff0 	bl	800ca44 <__sfp_lock_acquire>
 800ca64:	6a23      	ldr	r3, [r4, #32]
 800ca66:	b11b      	cbz	r3, 800ca70 <__sinit+0x14>
 800ca68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca6c:	f7ff bff0 	b.w	800ca50 <__sfp_lock_release>
 800ca70:	4b04      	ldr	r3, [pc, #16]	@ (800ca84 <__sinit+0x28>)
 800ca72:	6223      	str	r3, [r4, #32]
 800ca74:	4b04      	ldr	r3, [pc, #16]	@ (800ca88 <__sinit+0x2c>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1f5      	bne.n	800ca68 <__sinit+0xc>
 800ca7c:	f7ff ffc4 	bl	800ca08 <global_stdio_init.part.0>
 800ca80:	e7f2      	b.n	800ca68 <__sinit+0xc>
 800ca82:	bf00      	nop
 800ca84:	0800c9c9 	.word	0x0800c9c9
 800ca88:	20000780 	.word	0x20000780

0800ca8c <_fwalk_sglue>:
 800ca8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca90:	4607      	mov	r7, r0
 800ca92:	4688      	mov	r8, r1
 800ca94:	4614      	mov	r4, r2
 800ca96:	2600      	movs	r6, #0
 800ca98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca9c:	f1b9 0901 	subs.w	r9, r9, #1
 800caa0:	d505      	bpl.n	800caae <_fwalk_sglue+0x22>
 800caa2:	6824      	ldr	r4, [r4, #0]
 800caa4:	2c00      	cmp	r4, #0
 800caa6:	d1f7      	bne.n	800ca98 <_fwalk_sglue+0xc>
 800caa8:	4630      	mov	r0, r6
 800caaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caae:	89ab      	ldrh	r3, [r5, #12]
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d907      	bls.n	800cac4 <_fwalk_sglue+0x38>
 800cab4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cab8:	3301      	adds	r3, #1
 800caba:	d003      	beq.n	800cac4 <_fwalk_sglue+0x38>
 800cabc:	4629      	mov	r1, r5
 800cabe:	4638      	mov	r0, r7
 800cac0:	47c0      	blx	r8
 800cac2:	4306      	orrs	r6, r0
 800cac4:	3568      	adds	r5, #104	@ 0x68
 800cac6:	e7e9      	b.n	800ca9c <_fwalk_sglue+0x10>

0800cac8 <iprintf>:
 800cac8:	b40f      	push	{r0, r1, r2, r3}
 800caca:	b507      	push	{r0, r1, r2, lr}
 800cacc:	4906      	ldr	r1, [pc, #24]	@ (800cae8 <iprintf+0x20>)
 800cace:	ab04      	add	r3, sp, #16
 800cad0:	6808      	ldr	r0, [r1, #0]
 800cad2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cad6:	6881      	ldr	r1, [r0, #8]
 800cad8:	9301      	str	r3, [sp, #4]
 800cada:	f000 fa45 	bl	800cf68 <_vfiprintf_r>
 800cade:	b003      	add	sp, #12
 800cae0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cae4:	b004      	add	sp, #16
 800cae6:	4770      	bx	lr
 800cae8:	2000001c 	.word	0x2000001c

0800caec <putchar>:
 800caec:	4b02      	ldr	r3, [pc, #8]	@ (800caf8 <putchar+0xc>)
 800caee:	4601      	mov	r1, r0
 800caf0:	6818      	ldr	r0, [r3, #0]
 800caf2:	6882      	ldr	r2, [r0, #8]
 800caf4:	f000 bdef 	b.w	800d6d6 <_putc_r>
 800caf8:	2000001c 	.word	0x2000001c

0800cafc <_puts_r>:
 800cafc:	6a03      	ldr	r3, [r0, #32]
 800cafe:	b570      	push	{r4, r5, r6, lr}
 800cb00:	4605      	mov	r5, r0
 800cb02:	460e      	mov	r6, r1
 800cb04:	6884      	ldr	r4, [r0, #8]
 800cb06:	b90b      	cbnz	r3, 800cb0c <_puts_r+0x10>
 800cb08:	f7ff ffa8 	bl	800ca5c <__sinit>
 800cb0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb0e:	07db      	lsls	r3, r3, #31
 800cb10:	d405      	bmi.n	800cb1e <_puts_r+0x22>
 800cb12:	89a3      	ldrh	r3, [r4, #12]
 800cb14:	0598      	lsls	r0, r3, #22
 800cb16:	d402      	bmi.n	800cb1e <_puts_r+0x22>
 800cb18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb1a:	f000 f9ae 	bl	800ce7a <__retarget_lock_acquire_recursive>
 800cb1e:	89a3      	ldrh	r3, [r4, #12]
 800cb20:	0719      	lsls	r1, r3, #28
 800cb22:	d502      	bpl.n	800cb2a <_puts_r+0x2e>
 800cb24:	6923      	ldr	r3, [r4, #16]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d135      	bne.n	800cb96 <_puts_r+0x9a>
 800cb2a:	4621      	mov	r1, r4
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	f000 f8c5 	bl	800ccbc <__swsetup_r>
 800cb32:	b380      	cbz	r0, 800cb96 <_puts_r+0x9a>
 800cb34:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800cb38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb3a:	07da      	lsls	r2, r3, #31
 800cb3c:	d405      	bmi.n	800cb4a <_puts_r+0x4e>
 800cb3e:	89a3      	ldrh	r3, [r4, #12]
 800cb40:	059b      	lsls	r3, r3, #22
 800cb42:	d402      	bmi.n	800cb4a <_puts_r+0x4e>
 800cb44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb46:	f000 f999 	bl	800ce7c <__retarget_lock_release_recursive>
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	bd70      	pop	{r4, r5, r6, pc}
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	da04      	bge.n	800cb5c <_puts_r+0x60>
 800cb52:	69a2      	ldr	r2, [r4, #24]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	dc17      	bgt.n	800cb88 <_puts_r+0x8c>
 800cb58:	290a      	cmp	r1, #10
 800cb5a:	d015      	beq.n	800cb88 <_puts_r+0x8c>
 800cb5c:	6823      	ldr	r3, [r4, #0]
 800cb5e:	1c5a      	adds	r2, r3, #1
 800cb60:	6022      	str	r2, [r4, #0]
 800cb62:	7019      	strb	r1, [r3, #0]
 800cb64:	68a3      	ldr	r3, [r4, #8]
 800cb66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cb6a:	3b01      	subs	r3, #1
 800cb6c:	60a3      	str	r3, [r4, #8]
 800cb6e:	2900      	cmp	r1, #0
 800cb70:	d1ed      	bne.n	800cb4e <_puts_r+0x52>
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	da11      	bge.n	800cb9a <_puts_r+0x9e>
 800cb76:	4622      	mov	r2, r4
 800cb78:	210a      	movs	r1, #10
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	f000 f85f 	bl	800cc3e <__swbuf_r>
 800cb80:	3001      	adds	r0, #1
 800cb82:	d0d7      	beq.n	800cb34 <_puts_r+0x38>
 800cb84:	250a      	movs	r5, #10
 800cb86:	e7d7      	b.n	800cb38 <_puts_r+0x3c>
 800cb88:	4622      	mov	r2, r4
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	f000 f857 	bl	800cc3e <__swbuf_r>
 800cb90:	3001      	adds	r0, #1
 800cb92:	d1e7      	bne.n	800cb64 <_puts_r+0x68>
 800cb94:	e7ce      	b.n	800cb34 <_puts_r+0x38>
 800cb96:	3e01      	subs	r6, #1
 800cb98:	e7e4      	b.n	800cb64 <_puts_r+0x68>
 800cb9a:	6823      	ldr	r3, [r4, #0]
 800cb9c:	1c5a      	adds	r2, r3, #1
 800cb9e:	6022      	str	r2, [r4, #0]
 800cba0:	220a      	movs	r2, #10
 800cba2:	701a      	strb	r2, [r3, #0]
 800cba4:	e7ee      	b.n	800cb84 <_puts_r+0x88>
	...

0800cba8 <puts>:
 800cba8:	4b02      	ldr	r3, [pc, #8]	@ (800cbb4 <puts+0xc>)
 800cbaa:	4601      	mov	r1, r0
 800cbac:	6818      	ldr	r0, [r3, #0]
 800cbae:	f7ff bfa5 	b.w	800cafc <_puts_r>
 800cbb2:	bf00      	nop
 800cbb4:	2000001c 	.word	0x2000001c

0800cbb8 <__sread>:
 800cbb8:	b510      	push	{r4, lr}
 800cbba:	460c      	mov	r4, r1
 800cbbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc0:	f000 f8fc 	bl	800cdbc <_read_r>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	bfab      	itete	ge
 800cbc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cbca:	89a3      	ldrhlt	r3, [r4, #12]
 800cbcc:	181b      	addge	r3, r3, r0
 800cbce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cbd2:	bfac      	ite	ge
 800cbd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cbd6:	81a3      	strhlt	r3, [r4, #12]
 800cbd8:	bd10      	pop	{r4, pc}

0800cbda <__swrite>:
 800cbda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbde:	461f      	mov	r7, r3
 800cbe0:	898b      	ldrh	r3, [r1, #12]
 800cbe2:	4605      	mov	r5, r0
 800cbe4:	460c      	mov	r4, r1
 800cbe6:	05db      	lsls	r3, r3, #23
 800cbe8:	4616      	mov	r6, r2
 800cbea:	d505      	bpl.n	800cbf8 <__swrite+0x1e>
 800cbec:	2302      	movs	r3, #2
 800cbee:	2200      	movs	r2, #0
 800cbf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf4:	f000 f8d0 	bl	800cd98 <_lseek_r>
 800cbf8:	89a3      	ldrh	r3, [r4, #12]
 800cbfa:	4632      	mov	r2, r6
 800cbfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc00:	4628      	mov	r0, r5
 800cc02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc06:	81a3      	strh	r3, [r4, #12]
 800cc08:	463b      	mov	r3, r7
 800cc0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc0e:	f000 b8f7 	b.w	800ce00 <_write_r>

0800cc12 <__sseek>:
 800cc12:	b510      	push	{r4, lr}
 800cc14:	460c      	mov	r4, r1
 800cc16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc1a:	f000 f8bd 	bl	800cd98 <_lseek_r>
 800cc1e:	1c43      	adds	r3, r0, #1
 800cc20:	89a3      	ldrh	r3, [r4, #12]
 800cc22:	bf15      	itete	ne
 800cc24:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cc26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cc2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc2e:	81a3      	strheq	r3, [r4, #12]
 800cc30:	bf18      	it	ne
 800cc32:	81a3      	strhne	r3, [r4, #12]
 800cc34:	bd10      	pop	{r4, pc}

0800cc36 <__sclose>:
 800cc36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc3a:	f000 b89d 	b.w	800cd78 <_close_r>

0800cc3e <__swbuf_r>:
 800cc3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc40:	460e      	mov	r6, r1
 800cc42:	4614      	mov	r4, r2
 800cc44:	4605      	mov	r5, r0
 800cc46:	b118      	cbz	r0, 800cc50 <__swbuf_r+0x12>
 800cc48:	6a03      	ldr	r3, [r0, #32]
 800cc4a:	b90b      	cbnz	r3, 800cc50 <__swbuf_r+0x12>
 800cc4c:	f7ff ff06 	bl	800ca5c <__sinit>
 800cc50:	69a3      	ldr	r3, [r4, #24]
 800cc52:	60a3      	str	r3, [r4, #8]
 800cc54:	89a3      	ldrh	r3, [r4, #12]
 800cc56:	071a      	lsls	r2, r3, #28
 800cc58:	d501      	bpl.n	800cc5e <__swbuf_r+0x20>
 800cc5a:	6923      	ldr	r3, [r4, #16]
 800cc5c:	b943      	cbnz	r3, 800cc70 <__swbuf_r+0x32>
 800cc5e:	4621      	mov	r1, r4
 800cc60:	4628      	mov	r0, r5
 800cc62:	f000 f82b 	bl	800ccbc <__swsetup_r>
 800cc66:	b118      	cbz	r0, 800cc70 <__swbuf_r+0x32>
 800cc68:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cc6c:	4638      	mov	r0, r7
 800cc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc70:	6823      	ldr	r3, [r4, #0]
 800cc72:	b2f6      	uxtb	r6, r6
 800cc74:	6922      	ldr	r2, [r4, #16]
 800cc76:	4637      	mov	r7, r6
 800cc78:	1a98      	subs	r0, r3, r2
 800cc7a:	6963      	ldr	r3, [r4, #20]
 800cc7c:	4283      	cmp	r3, r0
 800cc7e:	dc05      	bgt.n	800cc8c <__swbuf_r+0x4e>
 800cc80:	4621      	mov	r1, r4
 800cc82:	4628      	mov	r0, r5
 800cc84:	f000 fc9e 	bl	800d5c4 <_fflush_r>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	d1ed      	bne.n	800cc68 <__swbuf_r+0x2a>
 800cc8c:	68a3      	ldr	r3, [r4, #8]
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	60a3      	str	r3, [r4, #8]
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	1c5a      	adds	r2, r3, #1
 800cc96:	6022      	str	r2, [r4, #0]
 800cc98:	701e      	strb	r6, [r3, #0]
 800cc9a:	1c43      	adds	r3, r0, #1
 800cc9c:	6962      	ldr	r2, [r4, #20]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d004      	beq.n	800ccac <__swbuf_r+0x6e>
 800cca2:	89a3      	ldrh	r3, [r4, #12]
 800cca4:	07db      	lsls	r3, r3, #31
 800cca6:	d5e1      	bpl.n	800cc6c <__swbuf_r+0x2e>
 800cca8:	2e0a      	cmp	r6, #10
 800ccaa:	d1df      	bne.n	800cc6c <__swbuf_r+0x2e>
 800ccac:	4621      	mov	r1, r4
 800ccae:	4628      	mov	r0, r5
 800ccb0:	f000 fc88 	bl	800d5c4 <_fflush_r>
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d0d9      	beq.n	800cc6c <__swbuf_r+0x2e>
 800ccb8:	e7d6      	b.n	800cc68 <__swbuf_r+0x2a>
	...

0800ccbc <__swsetup_r>:
 800ccbc:	b538      	push	{r3, r4, r5, lr}
 800ccbe:	4b29      	ldr	r3, [pc, #164]	@ (800cd64 <__swsetup_r+0xa8>)
 800ccc0:	4605      	mov	r5, r0
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	6818      	ldr	r0, [r3, #0]
 800ccc6:	b118      	cbz	r0, 800ccd0 <__swsetup_r+0x14>
 800ccc8:	6a03      	ldr	r3, [r0, #32]
 800ccca:	b90b      	cbnz	r3, 800ccd0 <__swsetup_r+0x14>
 800cccc:	f7ff fec6 	bl	800ca5c <__sinit>
 800ccd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccd4:	0719      	lsls	r1, r3, #28
 800ccd6:	d422      	bmi.n	800cd1e <__swsetup_r+0x62>
 800ccd8:	06da      	lsls	r2, r3, #27
 800ccda:	d407      	bmi.n	800ccec <__swsetup_r+0x30>
 800ccdc:	2209      	movs	r2, #9
 800ccde:	602a      	str	r2, [r5, #0]
 800cce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cce4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cce8:	81a3      	strh	r3, [r4, #12]
 800ccea:	e033      	b.n	800cd54 <__swsetup_r+0x98>
 800ccec:	0758      	lsls	r0, r3, #29
 800ccee:	d512      	bpl.n	800cd16 <__swsetup_r+0x5a>
 800ccf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccf2:	b141      	cbz	r1, 800cd06 <__swsetup_r+0x4a>
 800ccf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccf8:	4299      	cmp	r1, r3
 800ccfa:	d002      	beq.n	800cd02 <__swsetup_r+0x46>
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	f000 f8bf 	bl	800ce80 <_free_r>
 800cd02:	2300      	movs	r3, #0
 800cd04:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd06:	89a3      	ldrh	r3, [r4, #12]
 800cd08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cd0c:	81a3      	strh	r3, [r4, #12]
 800cd0e:	2300      	movs	r3, #0
 800cd10:	6063      	str	r3, [r4, #4]
 800cd12:	6923      	ldr	r3, [r4, #16]
 800cd14:	6023      	str	r3, [r4, #0]
 800cd16:	89a3      	ldrh	r3, [r4, #12]
 800cd18:	f043 0308 	orr.w	r3, r3, #8
 800cd1c:	81a3      	strh	r3, [r4, #12]
 800cd1e:	6923      	ldr	r3, [r4, #16]
 800cd20:	b94b      	cbnz	r3, 800cd36 <__swsetup_r+0x7a>
 800cd22:	89a3      	ldrh	r3, [r4, #12]
 800cd24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd2c:	d003      	beq.n	800cd36 <__swsetup_r+0x7a>
 800cd2e:	4621      	mov	r1, r4
 800cd30:	4628      	mov	r0, r5
 800cd32:	f000 fc94 	bl	800d65e <__smakebuf_r>
 800cd36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd3a:	f013 0201 	ands.w	r2, r3, #1
 800cd3e:	d00a      	beq.n	800cd56 <__swsetup_r+0x9a>
 800cd40:	2200      	movs	r2, #0
 800cd42:	60a2      	str	r2, [r4, #8]
 800cd44:	6962      	ldr	r2, [r4, #20]
 800cd46:	4252      	negs	r2, r2
 800cd48:	61a2      	str	r2, [r4, #24]
 800cd4a:	6922      	ldr	r2, [r4, #16]
 800cd4c:	b942      	cbnz	r2, 800cd60 <__swsetup_r+0xa4>
 800cd4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd52:	d1c5      	bne.n	800cce0 <__swsetup_r+0x24>
 800cd54:	bd38      	pop	{r3, r4, r5, pc}
 800cd56:	0799      	lsls	r1, r3, #30
 800cd58:	bf58      	it	pl
 800cd5a:	6962      	ldrpl	r2, [r4, #20]
 800cd5c:	60a2      	str	r2, [r4, #8]
 800cd5e:	e7f4      	b.n	800cd4a <__swsetup_r+0x8e>
 800cd60:	2000      	movs	r0, #0
 800cd62:	e7f7      	b.n	800cd54 <__swsetup_r+0x98>
 800cd64:	2000001c 	.word	0x2000001c

0800cd68 <memset>:
 800cd68:	4402      	add	r2, r0
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d100      	bne.n	800cd72 <memset+0xa>
 800cd70:	4770      	bx	lr
 800cd72:	f803 1b01 	strb.w	r1, [r3], #1
 800cd76:	e7f9      	b.n	800cd6c <memset+0x4>

0800cd78 <_close_r>:
 800cd78:	b538      	push	{r3, r4, r5, lr}
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	4d05      	ldr	r5, [pc, #20]	@ (800cd94 <_close_r+0x1c>)
 800cd7e:	4604      	mov	r4, r0
 800cd80:	4608      	mov	r0, r1
 800cd82:	602b      	str	r3, [r5, #0]
 800cd84:	f7f4 fb14 	bl	80013b0 <_close>
 800cd88:	1c43      	adds	r3, r0, #1
 800cd8a:	d102      	bne.n	800cd92 <_close_r+0x1a>
 800cd8c:	682b      	ldr	r3, [r5, #0]
 800cd8e:	b103      	cbz	r3, 800cd92 <_close_r+0x1a>
 800cd90:	6023      	str	r3, [r4, #0]
 800cd92:	bd38      	pop	{r3, r4, r5, pc}
 800cd94:	20000784 	.word	0x20000784

0800cd98 <_lseek_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	4604      	mov	r4, r0
 800cd9c:	4d06      	ldr	r5, [pc, #24]	@ (800cdb8 <_lseek_r+0x20>)
 800cd9e:	4608      	mov	r0, r1
 800cda0:	4611      	mov	r1, r2
 800cda2:	2200      	movs	r2, #0
 800cda4:	602a      	str	r2, [r5, #0]
 800cda6:	461a      	mov	r2, r3
 800cda8:	f7f4 fb29 	bl	80013fe <_lseek>
 800cdac:	1c43      	adds	r3, r0, #1
 800cdae:	d102      	bne.n	800cdb6 <_lseek_r+0x1e>
 800cdb0:	682b      	ldr	r3, [r5, #0]
 800cdb2:	b103      	cbz	r3, 800cdb6 <_lseek_r+0x1e>
 800cdb4:	6023      	str	r3, [r4, #0]
 800cdb6:	bd38      	pop	{r3, r4, r5, pc}
 800cdb8:	20000784 	.word	0x20000784

0800cdbc <_read_r>:
 800cdbc:	b538      	push	{r3, r4, r5, lr}
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	4d06      	ldr	r5, [pc, #24]	@ (800cddc <_read_r+0x20>)
 800cdc2:	4608      	mov	r0, r1
 800cdc4:	4611      	mov	r1, r2
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	602a      	str	r2, [r5, #0]
 800cdca:	461a      	mov	r2, r3
 800cdcc:	f7f4 fab7 	bl	800133e <_read>
 800cdd0:	1c43      	adds	r3, r0, #1
 800cdd2:	d102      	bne.n	800cdda <_read_r+0x1e>
 800cdd4:	682b      	ldr	r3, [r5, #0]
 800cdd6:	b103      	cbz	r3, 800cdda <_read_r+0x1e>
 800cdd8:	6023      	str	r3, [r4, #0]
 800cdda:	bd38      	pop	{r3, r4, r5, pc}
 800cddc:	20000784 	.word	0x20000784

0800cde0 <_sbrk_r>:
 800cde0:	b538      	push	{r3, r4, r5, lr}
 800cde2:	2300      	movs	r3, #0
 800cde4:	4d05      	ldr	r5, [pc, #20]	@ (800cdfc <_sbrk_r+0x1c>)
 800cde6:	4604      	mov	r4, r0
 800cde8:	4608      	mov	r0, r1
 800cdea:	602b      	str	r3, [r5, #0]
 800cdec:	f7f4 fb14 	bl	8001418 <_sbrk>
 800cdf0:	1c43      	adds	r3, r0, #1
 800cdf2:	d102      	bne.n	800cdfa <_sbrk_r+0x1a>
 800cdf4:	682b      	ldr	r3, [r5, #0]
 800cdf6:	b103      	cbz	r3, 800cdfa <_sbrk_r+0x1a>
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	bd38      	pop	{r3, r4, r5, pc}
 800cdfc:	20000784 	.word	0x20000784

0800ce00 <_write_r>:
 800ce00:	b538      	push	{r3, r4, r5, lr}
 800ce02:	4604      	mov	r4, r0
 800ce04:	4d06      	ldr	r5, [pc, #24]	@ (800ce20 <_write_r+0x20>)
 800ce06:	4608      	mov	r0, r1
 800ce08:	4611      	mov	r1, r2
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	602a      	str	r2, [r5, #0]
 800ce0e:	461a      	mov	r2, r3
 800ce10:	f7f4 fab2 	bl	8001378 <_write>
 800ce14:	1c43      	adds	r3, r0, #1
 800ce16:	d102      	bne.n	800ce1e <_write_r+0x1e>
 800ce18:	682b      	ldr	r3, [r5, #0]
 800ce1a:	b103      	cbz	r3, 800ce1e <_write_r+0x1e>
 800ce1c:	6023      	str	r3, [r4, #0]
 800ce1e:	bd38      	pop	{r3, r4, r5, pc}
 800ce20:	20000784 	.word	0x20000784

0800ce24 <__errno>:
 800ce24:	4b01      	ldr	r3, [pc, #4]	@ (800ce2c <__errno+0x8>)
 800ce26:	6818      	ldr	r0, [r3, #0]
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	2000001c 	.word	0x2000001c

0800ce30 <__libc_init_array>:
 800ce30:	b570      	push	{r4, r5, r6, lr}
 800ce32:	4d0d      	ldr	r5, [pc, #52]	@ (800ce68 <__libc_init_array+0x38>)
 800ce34:	2600      	movs	r6, #0
 800ce36:	4c0d      	ldr	r4, [pc, #52]	@ (800ce6c <__libc_init_array+0x3c>)
 800ce38:	1b64      	subs	r4, r4, r5
 800ce3a:	10a4      	asrs	r4, r4, #2
 800ce3c:	42a6      	cmp	r6, r4
 800ce3e:	d109      	bne.n	800ce54 <__libc_init_array+0x24>
 800ce40:	4d0b      	ldr	r5, [pc, #44]	@ (800ce70 <__libc_init_array+0x40>)
 800ce42:	2600      	movs	r6, #0
 800ce44:	4c0b      	ldr	r4, [pc, #44]	@ (800ce74 <__libc_init_array+0x44>)
 800ce46:	f000 fcab 	bl	800d7a0 <_init>
 800ce4a:	1b64      	subs	r4, r4, r5
 800ce4c:	10a4      	asrs	r4, r4, #2
 800ce4e:	42a6      	cmp	r6, r4
 800ce50:	d105      	bne.n	800ce5e <__libc_init_array+0x2e>
 800ce52:	bd70      	pop	{r4, r5, r6, pc}
 800ce54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce58:	3601      	adds	r6, #1
 800ce5a:	4798      	blx	r3
 800ce5c:	e7ee      	b.n	800ce3c <__libc_init_array+0xc>
 800ce5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce62:	3601      	adds	r6, #1
 800ce64:	4798      	blx	r3
 800ce66:	e7f2      	b.n	800ce4e <__libc_init_array+0x1e>
 800ce68:	0800ea78 	.word	0x0800ea78
 800ce6c:	0800ea78 	.word	0x0800ea78
 800ce70:	0800ea78 	.word	0x0800ea78
 800ce74:	0800ea7c 	.word	0x0800ea7c

0800ce78 <__retarget_lock_init_recursive>:
 800ce78:	4770      	bx	lr

0800ce7a <__retarget_lock_acquire_recursive>:
 800ce7a:	4770      	bx	lr

0800ce7c <__retarget_lock_release_recursive>:
 800ce7c:	4770      	bx	lr
	...

0800ce80 <_free_r>:
 800ce80:	b538      	push	{r3, r4, r5, lr}
 800ce82:	4605      	mov	r5, r0
 800ce84:	2900      	cmp	r1, #0
 800ce86:	d041      	beq.n	800cf0c <_free_r+0x8c>
 800ce88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce8c:	1f0c      	subs	r4, r1, #4
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	bfb8      	it	lt
 800ce92:	18e4      	addlt	r4, r4, r3
 800ce94:	f7ff fd4a 	bl	800c92c <__malloc_lock>
 800ce98:	4a1d      	ldr	r2, [pc, #116]	@ (800cf10 <_free_r+0x90>)
 800ce9a:	6813      	ldr	r3, [r2, #0]
 800ce9c:	b933      	cbnz	r3, 800ceac <_free_r+0x2c>
 800ce9e:	6063      	str	r3, [r4, #4]
 800cea0:	6014      	str	r4, [r2, #0]
 800cea2:	4628      	mov	r0, r5
 800cea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cea8:	f7ff bd46 	b.w	800c938 <__malloc_unlock>
 800ceac:	42a3      	cmp	r3, r4
 800ceae:	d908      	bls.n	800cec2 <_free_r+0x42>
 800ceb0:	6820      	ldr	r0, [r4, #0]
 800ceb2:	1821      	adds	r1, r4, r0
 800ceb4:	428b      	cmp	r3, r1
 800ceb6:	bf01      	itttt	eq
 800ceb8:	6819      	ldreq	r1, [r3, #0]
 800ceba:	685b      	ldreq	r3, [r3, #4]
 800cebc:	1809      	addeq	r1, r1, r0
 800cebe:	6021      	streq	r1, [r4, #0]
 800cec0:	e7ed      	b.n	800ce9e <_free_r+0x1e>
 800cec2:	461a      	mov	r2, r3
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	b10b      	cbz	r3, 800cecc <_free_r+0x4c>
 800cec8:	42a3      	cmp	r3, r4
 800ceca:	d9fa      	bls.n	800cec2 <_free_r+0x42>
 800cecc:	6811      	ldr	r1, [r2, #0]
 800cece:	1850      	adds	r0, r2, r1
 800ced0:	42a0      	cmp	r0, r4
 800ced2:	d10b      	bne.n	800ceec <_free_r+0x6c>
 800ced4:	6820      	ldr	r0, [r4, #0]
 800ced6:	4401      	add	r1, r0
 800ced8:	1850      	adds	r0, r2, r1
 800ceda:	6011      	str	r1, [r2, #0]
 800cedc:	4283      	cmp	r3, r0
 800cede:	d1e0      	bne.n	800cea2 <_free_r+0x22>
 800cee0:	6818      	ldr	r0, [r3, #0]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	4408      	add	r0, r1
 800cee6:	6053      	str	r3, [r2, #4]
 800cee8:	6010      	str	r0, [r2, #0]
 800ceea:	e7da      	b.n	800cea2 <_free_r+0x22>
 800ceec:	d902      	bls.n	800cef4 <_free_r+0x74>
 800ceee:	230c      	movs	r3, #12
 800cef0:	602b      	str	r3, [r5, #0]
 800cef2:	e7d6      	b.n	800cea2 <_free_r+0x22>
 800cef4:	6820      	ldr	r0, [r4, #0]
 800cef6:	1821      	adds	r1, r4, r0
 800cef8:	428b      	cmp	r3, r1
 800cefa:	bf02      	ittt	eq
 800cefc:	6819      	ldreq	r1, [r3, #0]
 800cefe:	685b      	ldreq	r3, [r3, #4]
 800cf00:	1809      	addeq	r1, r1, r0
 800cf02:	6063      	str	r3, [r4, #4]
 800cf04:	bf08      	it	eq
 800cf06:	6021      	streq	r1, [r4, #0]
 800cf08:	6054      	str	r4, [r2, #4]
 800cf0a:	e7ca      	b.n	800cea2 <_free_r+0x22>
 800cf0c:	bd38      	pop	{r3, r4, r5, pc}
 800cf0e:	bf00      	nop
 800cf10:	20000644 	.word	0x20000644

0800cf14 <__sfputc_r>:
 800cf14:	6893      	ldr	r3, [r2, #8]
 800cf16:	3b01      	subs	r3, #1
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	6093      	str	r3, [r2, #8]
 800cf1c:	b410      	push	{r4}
 800cf1e:	da08      	bge.n	800cf32 <__sfputc_r+0x1e>
 800cf20:	6994      	ldr	r4, [r2, #24]
 800cf22:	42a3      	cmp	r3, r4
 800cf24:	db01      	blt.n	800cf2a <__sfputc_r+0x16>
 800cf26:	290a      	cmp	r1, #10
 800cf28:	d103      	bne.n	800cf32 <__sfputc_r+0x1e>
 800cf2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf2e:	f7ff be86 	b.w	800cc3e <__swbuf_r>
 800cf32:	6813      	ldr	r3, [r2, #0]
 800cf34:	1c58      	adds	r0, r3, #1
 800cf36:	6010      	str	r0, [r2, #0]
 800cf38:	4608      	mov	r0, r1
 800cf3a:	7019      	strb	r1, [r3, #0]
 800cf3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf40:	4770      	bx	lr

0800cf42 <__sfputs_r>:
 800cf42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf44:	4606      	mov	r6, r0
 800cf46:	460f      	mov	r7, r1
 800cf48:	4614      	mov	r4, r2
 800cf4a:	18d5      	adds	r5, r2, r3
 800cf4c:	42ac      	cmp	r4, r5
 800cf4e:	d101      	bne.n	800cf54 <__sfputs_r+0x12>
 800cf50:	2000      	movs	r0, #0
 800cf52:	e007      	b.n	800cf64 <__sfputs_r+0x22>
 800cf54:	463a      	mov	r2, r7
 800cf56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	f7ff ffda 	bl	800cf14 <__sfputc_r>
 800cf60:	1c43      	adds	r3, r0, #1
 800cf62:	d1f3      	bne.n	800cf4c <__sfputs_r+0xa>
 800cf64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf68 <_vfiprintf_r>:
 800cf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6c:	460d      	mov	r5, r1
 800cf6e:	b09d      	sub	sp, #116	@ 0x74
 800cf70:	4614      	mov	r4, r2
 800cf72:	4698      	mov	r8, r3
 800cf74:	4606      	mov	r6, r0
 800cf76:	b118      	cbz	r0, 800cf80 <_vfiprintf_r+0x18>
 800cf78:	6a03      	ldr	r3, [r0, #32]
 800cf7a:	b90b      	cbnz	r3, 800cf80 <_vfiprintf_r+0x18>
 800cf7c:	f7ff fd6e 	bl	800ca5c <__sinit>
 800cf80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf82:	07d9      	lsls	r1, r3, #31
 800cf84:	d405      	bmi.n	800cf92 <_vfiprintf_r+0x2a>
 800cf86:	89ab      	ldrh	r3, [r5, #12]
 800cf88:	059a      	lsls	r2, r3, #22
 800cf8a:	d402      	bmi.n	800cf92 <_vfiprintf_r+0x2a>
 800cf8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf8e:	f7ff ff74 	bl	800ce7a <__retarget_lock_acquire_recursive>
 800cf92:	89ab      	ldrh	r3, [r5, #12]
 800cf94:	071b      	lsls	r3, r3, #28
 800cf96:	d501      	bpl.n	800cf9c <_vfiprintf_r+0x34>
 800cf98:	692b      	ldr	r3, [r5, #16]
 800cf9a:	b99b      	cbnz	r3, 800cfc4 <_vfiprintf_r+0x5c>
 800cf9c:	4629      	mov	r1, r5
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	f7ff fe8c 	bl	800ccbc <__swsetup_r>
 800cfa4:	b170      	cbz	r0, 800cfc4 <_vfiprintf_r+0x5c>
 800cfa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfa8:	07dc      	lsls	r4, r3, #31
 800cfaa:	d504      	bpl.n	800cfb6 <_vfiprintf_r+0x4e>
 800cfac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cfb0:	b01d      	add	sp, #116	@ 0x74
 800cfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb6:	89ab      	ldrh	r3, [r5, #12]
 800cfb8:	0598      	lsls	r0, r3, #22
 800cfba:	d4f7      	bmi.n	800cfac <_vfiprintf_r+0x44>
 800cfbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfbe:	f7ff ff5d 	bl	800ce7c <__retarget_lock_release_recursive>
 800cfc2:	e7f3      	b.n	800cfac <_vfiprintf_r+0x44>
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfca:	f04f 0901 	mov.w	r9, #1
 800cfce:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d184 <_vfiprintf_r+0x21c>
 800cfd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfd4:	2320      	movs	r3, #32
 800cfd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cfda:	2330      	movs	r3, #48	@ 0x30
 800cfdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cfe0:	4623      	mov	r3, r4
 800cfe2:	469a      	mov	sl, r3
 800cfe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfe8:	b10a      	cbz	r2, 800cfee <_vfiprintf_r+0x86>
 800cfea:	2a25      	cmp	r2, #37	@ 0x25
 800cfec:	d1f9      	bne.n	800cfe2 <_vfiprintf_r+0x7a>
 800cfee:	ebba 0b04 	subs.w	fp, sl, r4
 800cff2:	d00b      	beq.n	800d00c <_vfiprintf_r+0xa4>
 800cff4:	465b      	mov	r3, fp
 800cff6:	4622      	mov	r2, r4
 800cff8:	4629      	mov	r1, r5
 800cffa:	4630      	mov	r0, r6
 800cffc:	f7ff ffa1 	bl	800cf42 <__sfputs_r>
 800d000:	3001      	adds	r0, #1
 800d002:	f000 80a7 	beq.w	800d154 <_vfiprintf_r+0x1ec>
 800d006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d008:	445a      	add	r2, fp
 800d00a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d00c:	f89a 3000 	ldrb.w	r3, [sl]
 800d010:	2b00      	cmp	r3, #0
 800d012:	f000 809f 	beq.w	800d154 <_vfiprintf_r+0x1ec>
 800d016:	2300      	movs	r3, #0
 800d018:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d01c:	f10a 0a01 	add.w	sl, sl, #1
 800d020:	9304      	str	r3, [sp, #16]
 800d022:	9307      	str	r3, [sp, #28]
 800d024:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d028:	931a      	str	r3, [sp, #104]	@ 0x68
 800d02a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d02e:	4654      	mov	r4, sl
 800d030:	2205      	movs	r2, #5
 800d032:	4854      	ldr	r0, [pc, #336]	@ (800d184 <_vfiprintf_r+0x21c>)
 800d034:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d038:	f000 fba4 	bl	800d784 <memchr>
 800d03c:	9a04      	ldr	r2, [sp, #16]
 800d03e:	b9d8      	cbnz	r0, 800d078 <_vfiprintf_r+0x110>
 800d040:	06d1      	lsls	r1, r2, #27
 800d042:	bf44      	itt	mi
 800d044:	2320      	movmi	r3, #32
 800d046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d04a:	0713      	lsls	r3, r2, #28
 800d04c:	bf44      	itt	mi
 800d04e:	232b      	movmi	r3, #43	@ 0x2b
 800d050:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d054:	f89a 3000 	ldrb.w	r3, [sl]
 800d058:	2b2a      	cmp	r3, #42	@ 0x2a
 800d05a:	d015      	beq.n	800d088 <_vfiprintf_r+0x120>
 800d05c:	9a07      	ldr	r2, [sp, #28]
 800d05e:	4654      	mov	r4, sl
 800d060:	2000      	movs	r0, #0
 800d062:	f04f 0c0a 	mov.w	ip, #10
 800d066:	4621      	mov	r1, r4
 800d068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d06c:	3b30      	subs	r3, #48	@ 0x30
 800d06e:	2b09      	cmp	r3, #9
 800d070:	d94b      	bls.n	800d10a <_vfiprintf_r+0x1a2>
 800d072:	b1b0      	cbz	r0, 800d0a2 <_vfiprintf_r+0x13a>
 800d074:	9207      	str	r2, [sp, #28]
 800d076:	e014      	b.n	800d0a2 <_vfiprintf_r+0x13a>
 800d078:	eba0 0308 	sub.w	r3, r0, r8
 800d07c:	46a2      	mov	sl, r4
 800d07e:	fa09 f303 	lsl.w	r3, r9, r3
 800d082:	4313      	orrs	r3, r2
 800d084:	9304      	str	r3, [sp, #16]
 800d086:	e7d2      	b.n	800d02e <_vfiprintf_r+0xc6>
 800d088:	9b03      	ldr	r3, [sp, #12]
 800d08a:	1d19      	adds	r1, r3, #4
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	9103      	str	r1, [sp, #12]
 800d092:	bfbb      	ittet	lt
 800d094:	425b      	neglt	r3, r3
 800d096:	f042 0202 	orrlt.w	r2, r2, #2
 800d09a:	9307      	strge	r3, [sp, #28]
 800d09c:	9307      	strlt	r3, [sp, #28]
 800d09e:	bfb8      	it	lt
 800d0a0:	9204      	strlt	r2, [sp, #16]
 800d0a2:	7823      	ldrb	r3, [r4, #0]
 800d0a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0a6:	d10a      	bne.n	800d0be <_vfiprintf_r+0x156>
 800d0a8:	7863      	ldrb	r3, [r4, #1]
 800d0aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0ac:	d132      	bne.n	800d114 <_vfiprintf_r+0x1ac>
 800d0ae:	9b03      	ldr	r3, [sp, #12]
 800d0b0:	3402      	adds	r4, #2
 800d0b2:	1d1a      	adds	r2, r3, #4
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0ba:	9203      	str	r2, [sp, #12]
 800d0bc:	9305      	str	r3, [sp, #20]
 800d0be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d194 <_vfiprintf_r+0x22c>
 800d0c2:	2203      	movs	r2, #3
 800d0c4:	7821      	ldrb	r1, [r4, #0]
 800d0c6:	4650      	mov	r0, sl
 800d0c8:	f000 fb5c 	bl	800d784 <memchr>
 800d0cc:	b138      	cbz	r0, 800d0de <_vfiprintf_r+0x176>
 800d0ce:	eba0 000a 	sub.w	r0, r0, sl
 800d0d2:	2240      	movs	r2, #64	@ 0x40
 800d0d4:	9b04      	ldr	r3, [sp, #16]
 800d0d6:	3401      	adds	r4, #1
 800d0d8:	4082      	lsls	r2, r0
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	9304      	str	r3, [sp, #16]
 800d0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0e2:	2206      	movs	r2, #6
 800d0e4:	4828      	ldr	r0, [pc, #160]	@ (800d188 <_vfiprintf_r+0x220>)
 800d0e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0ea:	f000 fb4b 	bl	800d784 <memchr>
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	d03f      	beq.n	800d172 <_vfiprintf_r+0x20a>
 800d0f2:	4b26      	ldr	r3, [pc, #152]	@ (800d18c <_vfiprintf_r+0x224>)
 800d0f4:	bb1b      	cbnz	r3, 800d13e <_vfiprintf_r+0x1d6>
 800d0f6:	9b03      	ldr	r3, [sp, #12]
 800d0f8:	3307      	adds	r3, #7
 800d0fa:	f023 0307 	bic.w	r3, r3, #7
 800d0fe:	3308      	adds	r3, #8
 800d100:	9303      	str	r3, [sp, #12]
 800d102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d104:	443b      	add	r3, r7
 800d106:	9309      	str	r3, [sp, #36]	@ 0x24
 800d108:	e76a      	b.n	800cfe0 <_vfiprintf_r+0x78>
 800d10a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d10e:	460c      	mov	r4, r1
 800d110:	2001      	movs	r0, #1
 800d112:	e7a8      	b.n	800d066 <_vfiprintf_r+0xfe>
 800d114:	2300      	movs	r3, #0
 800d116:	3401      	adds	r4, #1
 800d118:	f04f 0c0a 	mov.w	ip, #10
 800d11c:	4619      	mov	r1, r3
 800d11e:	9305      	str	r3, [sp, #20]
 800d120:	4620      	mov	r0, r4
 800d122:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d126:	3a30      	subs	r2, #48	@ 0x30
 800d128:	2a09      	cmp	r2, #9
 800d12a:	d903      	bls.n	800d134 <_vfiprintf_r+0x1cc>
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d0c6      	beq.n	800d0be <_vfiprintf_r+0x156>
 800d130:	9105      	str	r1, [sp, #20]
 800d132:	e7c4      	b.n	800d0be <_vfiprintf_r+0x156>
 800d134:	fb0c 2101 	mla	r1, ip, r1, r2
 800d138:	4604      	mov	r4, r0
 800d13a:	2301      	movs	r3, #1
 800d13c:	e7f0      	b.n	800d120 <_vfiprintf_r+0x1b8>
 800d13e:	ab03      	add	r3, sp, #12
 800d140:	462a      	mov	r2, r5
 800d142:	a904      	add	r1, sp, #16
 800d144:	4630      	mov	r0, r6
 800d146:	9300      	str	r3, [sp, #0]
 800d148:	4b11      	ldr	r3, [pc, #68]	@ (800d190 <_vfiprintf_r+0x228>)
 800d14a:	f3af 8000 	nop.w
 800d14e:	4607      	mov	r7, r0
 800d150:	1c78      	adds	r0, r7, #1
 800d152:	d1d6      	bne.n	800d102 <_vfiprintf_r+0x19a>
 800d154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d156:	07d9      	lsls	r1, r3, #31
 800d158:	d405      	bmi.n	800d166 <_vfiprintf_r+0x1fe>
 800d15a:	89ab      	ldrh	r3, [r5, #12]
 800d15c:	059a      	lsls	r2, r3, #22
 800d15e:	d402      	bmi.n	800d166 <_vfiprintf_r+0x1fe>
 800d160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d162:	f7ff fe8b 	bl	800ce7c <__retarget_lock_release_recursive>
 800d166:	89ab      	ldrh	r3, [r5, #12]
 800d168:	065b      	lsls	r3, r3, #25
 800d16a:	f53f af1f 	bmi.w	800cfac <_vfiprintf_r+0x44>
 800d16e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d170:	e71e      	b.n	800cfb0 <_vfiprintf_r+0x48>
 800d172:	ab03      	add	r3, sp, #12
 800d174:	462a      	mov	r2, r5
 800d176:	a904      	add	r1, sp, #16
 800d178:	4630      	mov	r0, r6
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	4b04      	ldr	r3, [pc, #16]	@ (800d190 <_vfiprintf_r+0x228>)
 800d17e:	f000 f87d 	bl	800d27c <_printf_i>
 800d182:	e7e4      	b.n	800d14e <_vfiprintf_r+0x1e6>
 800d184:	0800ea3c 	.word	0x0800ea3c
 800d188:	0800ea46 	.word	0x0800ea46
 800d18c:	00000000 	.word	0x00000000
 800d190:	0800cf43 	.word	0x0800cf43
 800d194:	0800ea42 	.word	0x0800ea42

0800d198 <_printf_common>:
 800d198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d19c:	4616      	mov	r6, r2
 800d19e:	4698      	mov	r8, r3
 800d1a0:	688a      	ldr	r2, [r1, #8]
 800d1a2:	4607      	mov	r7, r0
 800d1a4:	690b      	ldr	r3, [r1, #16]
 800d1a6:	460c      	mov	r4, r1
 800d1a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	bfb8      	it	lt
 800d1b0:	4613      	movlt	r3, r2
 800d1b2:	6033      	str	r3, [r6, #0]
 800d1b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d1b8:	b10a      	cbz	r2, 800d1be <_printf_common+0x26>
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	6033      	str	r3, [r6, #0]
 800d1be:	6823      	ldr	r3, [r4, #0]
 800d1c0:	0699      	lsls	r1, r3, #26
 800d1c2:	bf42      	ittt	mi
 800d1c4:	6833      	ldrmi	r3, [r6, #0]
 800d1c6:	3302      	addmi	r3, #2
 800d1c8:	6033      	strmi	r3, [r6, #0]
 800d1ca:	6825      	ldr	r5, [r4, #0]
 800d1cc:	f015 0506 	ands.w	r5, r5, #6
 800d1d0:	d106      	bne.n	800d1e0 <_printf_common+0x48>
 800d1d2:	f104 0a19 	add.w	sl, r4, #25
 800d1d6:	68e3      	ldr	r3, [r4, #12]
 800d1d8:	6832      	ldr	r2, [r6, #0]
 800d1da:	1a9b      	subs	r3, r3, r2
 800d1dc:	42ab      	cmp	r3, r5
 800d1de:	dc2b      	bgt.n	800d238 <_printf_common+0xa0>
 800d1e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d1e4:	6822      	ldr	r2, [r4, #0]
 800d1e6:	3b00      	subs	r3, #0
 800d1e8:	bf18      	it	ne
 800d1ea:	2301      	movne	r3, #1
 800d1ec:	0692      	lsls	r2, r2, #26
 800d1ee:	d430      	bmi.n	800d252 <_printf_common+0xba>
 800d1f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d1f4:	4641      	mov	r1, r8
 800d1f6:	4638      	mov	r0, r7
 800d1f8:	47c8      	blx	r9
 800d1fa:	3001      	adds	r0, #1
 800d1fc:	d023      	beq.n	800d246 <_printf_common+0xae>
 800d1fe:	6823      	ldr	r3, [r4, #0]
 800d200:	341a      	adds	r4, #26
 800d202:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d206:	f003 0306 	and.w	r3, r3, #6
 800d20a:	2b04      	cmp	r3, #4
 800d20c:	bf0a      	itet	eq
 800d20e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800d212:	2500      	movne	r5, #0
 800d214:	6833      	ldreq	r3, [r6, #0]
 800d216:	f04f 0600 	mov.w	r6, #0
 800d21a:	bf08      	it	eq
 800d21c:	1aed      	subeq	r5, r5, r3
 800d21e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d222:	bf08      	it	eq
 800d224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d228:	4293      	cmp	r3, r2
 800d22a:	bfc4      	itt	gt
 800d22c:	1a9b      	subgt	r3, r3, r2
 800d22e:	18ed      	addgt	r5, r5, r3
 800d230:	42b5      	cmp	r5, r6
 800d232:	d11a      	bne.n	800d26a <_printf_common+0xd2>
 800d234:	2000      	movs	r0, #0
 800d236:	e008      	b.n	800d24a <_printf_common+0xb2>
 800d238:	2301      	movs	r3, #1
 800d23a:	4652      	mov	r2, sl
 800d23c:	4641      	mov	r1, r8
 800d23e:	4638      	mov	r0, r7
 800d240:	47c8      	blx	r9
 800d242:	3001      	adds	r0, #1
 800d244:	d103      	bne.n	800d24e <_printf_common+0xb6>
 800d246:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d24e:	3501      	adds	r5, #1
 800d250:	e7c1      	b.n	800d1d6 <_printf_common+0x3e>
 800d252:	18e1      	adds	r1, r4, r3
 800d254:	1c5a      	adds	r2, r3, #1
 800d256:	2030      	movs	r0, #48	@ 0x30
 800d258:	3302      	adds	r3, #2
 800d25a:	4422      	add	r2, r4
 800d25c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d264:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d268:	e7c2      	b.n	800d1f0 <_printf_common+0x58>
 800d26a:	2301      	movs	r3, #1
 800d26c:	4622      	mov	r2, r4
 800d26e:	4641      	mov	r1, r8
 800d270:	4638      	mov	r0, r7
 800d272:	47c8      	blx	r9
 800d274:	3001      	adds	r0, #1
 800d276:	d0e6      	beq.n	800d246 <_printf_common+0xae>
 800d278:	3601      	adds	r6, #1
 800d27a:	e7d9      	b.n	800d230 <_printf_common+0x98>

0800d27c <_printf_i>:
 800d27c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d280:	7e0f      	ldrb	r7, [r1, #24]
 800d282:	4691      	mov	r9, r2
 800d284:	4680      	mov	r8, r0
 800d286:	460c      	mov	r4, r1
 800d288:	2f78      	cmp	r7, #120	@ 0x78
 800d28a:	469a      	mov	sl, r3
 800d28c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d28e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d292:	d807      	bhi.n	800d2a4 <_printf_i+0x28>
 800d294:	2f62      	cmp	r7, #98	@ 0x62
 800d296:	d80a      	bhi.n	800d2ae <_printf_i+0x32>
 800d298:	2f00      	cmp	r7, #0
 800d29a:	f000 80d2 	beq.w	800d442 <_printf_i+0x1c6>
 800d29e:	2f58      	cmp	r7, #88	@ 0x58
 800d2a0:	f000 80b9 	beq.w	800d416 <_printf_i+0x19a>
 800d2a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d2ac:	e03a      	b.n	800d324 <_printf_i+0xa8>
 800d2ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d2b2:	2b15      	cmp	r3, #21
 800d2b4:	d8f6      	bhi.n	800d2a4 <_printf_i+0x28>
 800d2b6:	a101      	add	r1, pc, #4	@ (adr r1, 800d2bc <_printf_i+0x40>)
 800d2b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2bc:	0800d315 	.word	0x0800d315
 800d2c0:	0800d329 	.word	0x0800d329
 800d2c4:	0800d2a5 	.word	0x0800d2a5
 800d2c8:	0800d2a5 	.word	0x0800d2a5
 800d2cc:	0800d2a5 	.word	0x0800d2a5
 800d2d0:	0800d2a5 	.word	0x0800d2a5
 800d2d4:	0800d329 	.word	0x0800d329
 800d2d8:	0800d2a5 	.word	0x0800d2a5
 800d2dc:	0800d2a5 	.word	0x0800d2a5
 800d2e0:	0800d2a5 	.word	0x0800d2a5
 800d2e4:	0800d2a5 	.word	0x0800d2a5
 800d2e8:	0800d429 	.word	0x0800d429
 800d2ec:	0800d353 	.word	0x0800d353
 800d2f0:	0800d3e3 	.word	0x0800d3e3
 800d2f4:	0800d2a5 	.word	0x0800d2a5
 800d2f8:	0800d2a5 	.word	0x0800d2a5
 800d2fc:	0800d44b 	.word	0x0800d44b
 800d300:	0800d2a5 	.word	0x0800d2a5
 800d304:	0800d353 	.word	0x0800d353
 800d308:	0800d2a5 	.word	0x0800d2a5
 800d30c:	0800d2a5 	.word	0x0800d2a5
 800d310:	0800d3eb 	.word	0x0800d3eb
 800d314:	6833      	ldr	r3, [r6, #0]
 800d316:	1d1a      	adds	r2, r3, #4
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	6032      	str	r2, [r6, #0]
 800d31c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d320:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d324:	2301      	movs	r3, #1
 800d326:	e09d      	b.n	800d464 <_printf_i+0x1e8>
 800d328:	6833      	ldr	r3, [r6, #0]
 800d32a:	6820      	ldr	r0, [r4, #0]
 800d32c:	1d19      	adds	r1, r3, #4
 800d32e:	6031      	str	r1, [r6, #0]
 800d330:	0606      	lsls	r6, r0, #24
 800d332:	d501      	bpl.n	800d338 <_printf_i+0xbc>
 800d334:	681d      	ldr	r5, [r3, #0]
 800d336:	e003      	b.n	800d340 <_printf_i+0xc4>
 800d338:	0645      	lsls	r5, r0, #25
 800d33a:	d5fb      	bpl.n	800d334 <_printf_i+0xb8>
 800d33c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d340:	2d00      	cmp	r5, #0
 800d342:	da03      	bge.n	800d34c <_printf_i+0xd0>
 800d344:	232d      	movs	r3, #45	@ 0x2d
 800d346:	426d      	negs	r5, r5
 800d348:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d34c:	4859      	ldr	r0, [pc, #356]	@ (800d4b4 <_printf_i+0x238>)
 800d34e:	230a      	movs	r3, #10
 800d350:	e011      	b.n	800d376 <_printf_i+0xfa>
 800d352:	6821      	ldr	r1, [r4, #0]
 800d354:	6833      	ldr	r3, [r6, #0]
 800d356:	0608      	lsls	r0, r1, #24
 800d358:	f853 5b04 	ldr.w	r5, [r3], #4
 800d35c:	d402      	bmi.n	800d364 <_printf_i+0xe8>
 800d35e:	0649      	lsls	r1, r1, #25
 800d360:	bf48      	it	mi
 800d362:	b2ad      	uxthmi	r5, r5
 800d364:	2f6f      	cmp	r7, #111	@ 0x6f
 800d366:	6033      	str	r3, [r6, #0]
 800d368:	4852      	ldr	r0, [pc, #328]	@ (800d4b4 <_printf_i+0x238>)
 800d36a:	bf14      	ite	ne
 800d36c:	230a      	movne	r3, #10
 800d36e:	2308      	moveq	r3, #8
 800d370:	2100      	movs	r1, #0
 800d372:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d376:	6866      	ldr	r6, [r4, #4]
 800d378:	2e00      	cmp	r6, #0
 800d37a:	60a6      	str	r6, [r4, #8]
 800d37c:	bfa2      	ittt	ge
 800d37e:	6821      	ldrge	r1, [r4, #0]
 800d380:	f021 0104 	bicge.w	r1, r1, #4
 800d384:	6021      	strge	r1, [r4, #0]
 800d386:	b90d      	cbnz	r5, 800d38c <_printf_i+0x110>
 800d388:	2e00      	cmp	r6, #0
 800d38a:	d04b      	beq.n	800d424 <_printf_i+0x1a8>
 800d38c:	4616      	mov	r6, r2
 800d38e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d392:	fb03 5711 	mls	r7, r3, r1, r5
 800d396:	5dc7      	ldrb	r7, [r0, r7]
 800d398:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d39c:	462f      	mov	r7, r5
 800d39e:	460d      	mov	r5, r1
 800d3a0:	42bb      	cmp	r3, r7
 800d3a2:	d9f4      	bls.n	800d38e <_printf_i+0x112>
 800d3a4:	2b08      	cmp	r3, #8
 800d3a6:	d10b      	bne.n	800d3c0 <_printf_i+0x144>
 800d3a8:	6823      	ldr	r3, [r4, #0]
 800d3aa:	07df      	lsls	r7, r3, #31
 800d3ac:	d508      	bpl.n	800d3c0 <_printf_i+0x144>
 800d3ae:	6923      	ldr	r3, [r4, #16]
 800d3b0:	6861      	ldr	r1, [r4, #4]
 800d3b2:	4299      	cmp	r1, r3
 800d3b4:	bfde      	ittt	le
 800d3b6:	2330      	movle	r3, #48	@ 0x30
 800d3b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3bc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d3c0:	1b92      	subs	r2, r2, r6
 800d3c2:	6122      	str	r2, [r4, #16]
 800d3c4:	464b      	mov	r3, r9
 800d3c6:	aa03      	add	r2, sp, #12
 800d3c8:	4621      	mov	r1, r4
 800d3ca:	4640      	mov	r0, r8
 800d3cc:	f8cd a000 	str.w	sl, [sp]
 800d3d0:	f7ff fee2 	bl	800d198 <_printf_common>
 800d3d4:	3001      	adds	r0, #1
 800d3d6:	d14a      	bne.n	800d46e <_printf_i+0x1f2>
 800d3d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3dc:	b004      	add	sp, #16
 800d3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3e2:	6823      	ldr	r3, [r4, #0]
 800d3e4:	f043 0320 	orr.w	r3, r3, #32
 800d3e8:	6023      	str	r3, [r4, #0]
 800d3ea:	2778      	movs	r7, #120	@ 0x78
 800d3ec:	4832      	ldr	r0, [pc, #200]	@ (800d4b8 <_printf_i+0x23c>)
 800d3ee:	6823      	ldr	r3, [r4, #0]
 800d3f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d3f4:	061f      	lsls	r7, r3, #24
 800d3f6:	6831      	ldr	r1, [r6, #0]
 800d3f8:	f851 5b04 	ldr.w	r5, [r1], #4
 800d3fc:	d402      	bmi.n	800d404 <_printf_i+0x188>
 800d3fe:	065f      	lsls	r7, r3, #25
 800d400:	bf48      	it	mi
 800d402:	b2ad      	uxthmi	r5, r5
 800d404:	6031      	str	r1, [r6, #0]
 800d406:	07d9      	lsls	r1, r3, #31
 800d408:	bf44      	itt	mi
 800d40a:	f043 0320 	orrmi.w	r3, r3, #32
 800d40e:	6023      	strmi	r3, [r4, #0]
 800d410:	b11d      	cbz	r5, 800d41a <_printf_i+0x19e>
 800d412:	2310      	movs	r3, #16
 800d414:	e7ac      	b.n	800d370 <_printf_i+0xf4>
 800d416:	4827      	ldr	r0, [pc, #156]	@ (800d4b4 <_printf_i+0x238>)
 800d418:	e7e9      	b.n	800d3ee <_printf_i+0x172>
 800d41a:	6823      	ldr	r3, [r4, #0]
 800d41c:	f023 0320 	bic.w	r3, r3, #32
 800d420:	6023      	str	r3, [r4, #0]
 800d422:	e7f6      	b.n	800d412 <_printf_i+0x196>
 800d424:	4616      	mov	r6, r2
 800d426:	e7bd      	b.n	800d3a4 <_printf_i+0x128>
 800d428:	6833      	ldr	r3, [r6, #0]
 800d42a:	6825      	ldr	r5, [r4, #0]
 800d42c:	1d18      	adds	r0, r3, #4
 800d42e:	6961      	ldr	r1, [r4, #20]
 800d430:	6030      	str	r0, [r6, #0]
 800d432:	062e      	lsls	r6, r5, #24
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	d501      	bpl.n	800d43c <_printf_i+0x1c0>
 800d438:	6019      	str	r1, [r3, #0]
 800d43a:	e002      	b.n	800d442 <_printf_i+0x1c6>
 800d43c:	0668      	lsls	r0, r5, #25
 800d43e:	d5fb      	bpl.n	800d438 <_printf_i+0x1bc>
 800d440:	8019      	strh	r1, [r3, #0]
 800d442:	2300      	movs	r3, #0
 800d444:	4616      	mov	r6, r2
 800d446:	6123      	str	r3, [r4, #16]
 800d448:	e7bc      	b.n	800d3c4 <_printf_i+0x148>
 800d44a:	6833      	ldr	r3, [r6, #0]
 800d44c:	2100      	movs	r1, #0
 800d44e:	1d1a      	adds	r2, r3, #4
 800d450:	6032      	str	r2, [r6, #0]
 800d452:	681e      	ldr	r6, [r3, #0]
 800d454:	6862      	ldr	r2, [r4, #4]
 800d456:	4630      	mov	r0, r6
 800d458:	f000 f994 	bl	800d784 <memchr>
 800d45c:	b108      	cbz	r0, 800d462 <_printf_i+0x1e6>
 800d45e:	1b80      	subs	r0, r0, r6
 800d460:	6060      	str	r0, [r4, #4]
 800d462:	6863      	ldr	r3, [r4, #4]
 800d464:	6123      	str	r3, [r4, #16]
 800d466:	2300      	movs	r3, #0
 800d468:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d46c:	e7aa      	b.n	800d3c4 <_printf_i+0x148>
 800d46e:	6923      	ldr	r3, [r4, #16]
 800d470:	4632      	mov	r2, r6
 800d472:	4649      	mov	r1, r9
 800d474:	4640      	mov	r0, r8
 800d476:	47d0      	blx	sl
 800d478:	3001      	adds	r0, #1
 800d47a:	d0ad      	beq.n	800d3d8 <_printf_i+0x15c>
 800d47c:	6823      	ldr	r3, [r4, #0]
 800d47e:	079b      	lsls	r3, r3, #30
 800d480:	d413      	bmi.n	800d4aa <_printf_i+0x22e>
 800d482:	68e0      	ldr	r0, [r4, #12]
 800d484:	9b03      	ldr	r3, [sp, #12]
 800d486:	4298      	cmp	r0, r3
 800d488:	bfb8      	it	lt
 800d48a:	4618      	movlt	r0, r3
 800d48c:	e7a6      	b.n	800d3dc <_printf_i+0x160>
 800d48e:	2301      	movs	r3, #1
 800d490:	4632      	mov	r2, r6
 800d492:	4649      	mov	r1, r9
 800d494:	4640      	mov	r0, r8
 800d496:	47d0      	blx	sl
 800d498:	3001      	adds	r0, #1
 800d49a:	d09d      	beq.n	800d3d8 <_printf_i+0x15c>
 800d49c:	3501      	adds	r5, #1
 800d49e:	68e3      	ldr	r3, [r4, #12]
 800d4a0:	9903      	ldr	r1, [sp, #12]
 800d4a2:	1a5b      	subs	r3, r3, r1
 800d4a4:	42ab      	cmp	r3, r5
 800d4a6:	dcf2      	bgt.n	800d48e <_printf_i+0x212>
 800d4a8:	e7eb      	b.n	800d482 <_printf_i+0x206>
 800d4aa:	2500      	movs	r5, #0
 800d4ac:	f104 0619 	add.w	r6, r4, #25
 800d4b0:	e7f5      	b.n	800d49e <_printf_i+0x222>
 800d4b2:	bf00      	nop
 800d4b4:	0800ea4d 	.word	0x0800ea4d
 800d4b8:	0800ea5e 	.word	0x0800ea5e

0800d4bc <__sflush_r>:
 800d4bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4c4:	0716      	lsls	r6, r2, #28
 800d4c6:	4605      	mov	r5, r0
 800d4c8:	460c      	mov	r4, r1
 800d4ca:	d454      	bmi.n	800d576 <__sflush_r+0xba>
 800d4cc:	684b      	ldr	r3, [r1, #4]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	dc02      	bgt.n	800d4d8 <__sflush_r+0x1c>
 800d4d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	dd48      	ble.n	800d56a <__sflush_r+0xae>
 800d4d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4da:	2e00      	cmp	r6, #0
 800d4dc:	d045      	beq.n	800d56a <__sflush_r+0xae>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d4e4:	682f      	ldr	r7, [r5, #0]
 800d4e6:	6a21      	ldr	r1, [r4, #32]
 800d4e8:	602b      	str	r3, [r5, #0]
 800d4ea:	d030      	beq.n	800d54e <__sflush_r+0x92>
 800d4ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d4ee:	89a3      	ldrh	r3, [r4, #12]
 800d4f0:	0759      	lsls	r1, r3, #29
 800d4f2:	d505      	bpl.n	800d500 <__sflush_r+0x44>
 800d4f4:	6863      	ldr	r3, [r4, #4]
 800d4f6:	1ad2      	subs	r2, r2, r3
 800d4f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d4fa:	b10b      	cbz	r3, 800d500 <__sflush_r+0x44>
 800d4fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d4fe:	1ad2      	subs	r2, r2, r3
 800d500:	2300      	movs	r3, #0
 800d502:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d504:	6a21      	ldr	r1, [r4, #32]
 800d506:	4628      	mov	r0, r5
 800d508:	47b0      	blx	r6
 800d50a:	1c43      	adds	r3, r0, #1
 800d50c:	89a3      	ldrh	r3, [r4, #12]
 800d50e:	d106      	bne.n	800d51e <__sflush_r+0x62>
 800d510:	6829      	ldr	r1, [r5, #0]
 800d512:	291d      	cmp	r1, #29
 800d514:	d82b      	bhi.n	800d56e <__sflush_r+0xb2>
 800d516:	4a2a      	ldr	r2, [pc, #168]	@ (800d5c0 <__sflush_r+0x104>)
 800d518:	410a      	asrs	r2, r1
 800d51a:	07d6      	lsls	r6, r2, #31
 800d51c:	d427      	bmi.n	800d56e <__sflush_r+0xb2>
 800d51e:	2200      	movs	r2, #0
 800d520:	04d9      	lsls	r1, r3, #19
 800d522:	6062      	str	r2, [r4, #4]
 800d524:	6922      	ldr	r2, [r4, #16]
 800d526:	6022      	str	r2, [r4, #0]
 800d528:	d504      	bpl.n	800d534 <__sflush_r+0x78>
 800d52a:	1c42      	adds	r2, r0, #1
 800d52c:	d101      	bne.n	800d532 <__sflush_r+0x76>
 800d52e:	682b      	ldr	r3, [r5, #0]
 800d530:	b903      	cbnz	r3, 800d534 <__sflush_r+0x78>
 800d532:	6560      	str	r0, [r4, #84]	@ 0x54
 800d534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d536:	602f      	str	r7, [r5, #0]
 800d538:	b1b9      	cbz	r1, 800d56a <__sflush_r+0xae>
 800d53a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d53e:	4299      	cmp	r1, r3
 800d540:	d002      	beq.n	800d548 <__sflush_r+0x8c>
 800d542:	4628      	mov	r0, r5
 800d544:	f7ff fc9c 	bl	800ce80 <_free_r>
 800d548:	2300      	movs	r3, #0
 800d54a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d54c:	e00d      	b.n	800d56a <__sflush_r+0xae>
 800d54e:	2301      	movs	r3, #1
 800d550:	4628      	mov	r0, r5
 800d552:	47b0      	blx	r6
 800d554:	4602      	mov	r2, r0
 800d556:	1c50      	adds	r0, r2, #1
 800d558:	d1c9      	bne.n	800d4ee <__sflush_r+0x32>
 800d55a:	682b      	ldr	r3, [r5, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d0c6      	beq.n	800d4ee <__sflush_r+0x32>
 800d560:	2b1d      	cmp	r3, #29
 800d562:	d001      	beq.n	800d568 <__sflush_r+0xac>
 800d564:	2b16      	cmp	r3, #22
 800d566:	d11d      	bne.n	800d5a4 <__sflush_r+0xe8>
 800d568:	602f      	str	r7, [r5, #0]
 800d56a:	2000      	movs	r0, #0
 800d56c:	e021      	b.n	800d5b2 <__sflush_r+0xf6>
 800d56e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d572:	b21b      	sxth	r3, r3
 800d574:	e01a      	b.n	800d5ac <__sflush_r+0xf0>
 800d576:	690f      	ldr	r7, [r1, #16]
 800d578:	2f00      	cmp	r7, #0
 800d57a:	d0f6      	beq.n	800d56a <__sflush_r+0xae>
 800d57c:	0793      	lsls	r3, r2, #30
 800d57e:	680e      	ldr	r6, [r1, #0]
 800d580:	600f      	str	r7, [r1, #0]
 800d582:	bf0c      	ite	eq
 800d584:	694b      	ldreq	r3, [r1, #20]
 800d586:	2300      	movne	r3, #0
 800d588:	eba6 0807 	sub.w	r8, r6, r7
 800d58c:	608b      	str	r3, [r1, #8]
 800d58e:	f1b8 0f00 	cmp.w	r8, #0
 800d592:	ddea      	ble.n	800d56a <__sflush_r+0xae>
 800d594:	4643      	mov	r3, r8
 800d596:	463a      	mov	r2, r7
 800d598:	6a21      	ldr	r1, [r4, #32]
 800d59a:	4628      	mov	r0, r5
 800d59c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d59e:	47b0      	blx	r6
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	dc08      	bgt.n	800d5b6 <__sflush_r+0xfa>
 800d5a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d5b0:	81a3      	strh	r3, [r4, #12]
 800d5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b6:	4407      	add	r7, r0
 800d5b8:	eba8 0800 	sub.w	r8, r8, r0
 800d5bc:	e7e7      	b.n	800d58e <__sflush_r+0xd2>
 800d5be:	bf00      	nop
 800d5c0:	dfbffffe 	.word	0xdfbffffe

0800d5c4 <_fflush_r>:
 800d5c4:	b538      	push	{r3, r4, r5, lr}
 800d5c6:	690b      	ldr	r3, [r1, #16]
 800d5c8:	4605      	mov	r5, r0
 800d5ca:	460c      	mov	r4, r1
 800d5cc:	b913      	cbnz	r3, 800d5d4 <_fflush_r+0x10>
 800d5ce:	2500      	movs	r5, #0
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	bd38      	pop	{r3, r4, r5, pc}
 800d5d4:	b118      	cbz	r0, 800d5de <_fflush_r+0x1a>
 800d5d6:	6a03      	ldr	r3, [r0, #32]
 800d5d8:	b90b      	cbnz	r3, 800d5de <_fflush_r+0x1a>
 800d5da:	f7ff fa3f 	bl	800ca5c <__sinit>
 800d5de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d0f3      	beq.n	800d5ce <_fflush_r+0xa>
 800d5e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d5e8:	07d0      	lsls	r0, r2, #31
 800d5ea:	d404      	bmi.n	800d5f6 <_fflush_r+0x32>
 800d5ec:	0599      	lsls	r1, r3, #22
 800d5ee:	d402      	bmi.n	800d5f6 <_fflush_r+0x32>
 800d5f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5f2:	f7ff fc42 	bl	800ce7a <__retarget_lock_acquire_recursive>
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	4621      	mov	r1, r4
 800d5fa:	f7ff ff5f 	bl	800d4bc <__sflush_r>
 800d5fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d600:	4605      	mov	r5, r0
 800d602:	07da      	lsls	r2, r3, #31
 800d604:	d4e4      	bmi.n	800d5d0 <_fflush_r+0xc>
 800d606:	89a3      	ldrh	r3, [r4, #12]
 800d608:	059b      	lsls	r3, r3, #22
 800d60a:	d4e1      	bmi.n	800d5d0 <_fflush_r+0xc>
 800d60c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d60e:	f7ff fc35 	bl	800ce7c <__retarget_lock_release_recursive>
 800d612:	e7dd      	b.n	800d5d0 <_fflush_r+0xc>

0800d614 <__swhatbuf_r>:
 800d614:	b570      	push	{r4, r5, r6, lr}
 800d616:	460c      	mov	r4, r1
 800d618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d61c:	b096      	sub	sp, #88	@ 0x58
 800d61e:	4615      	mov	r5, r2
 800d620:	2900      	cmp	r1, #0
 800d622:	461e      	mov	r6, r3
 800d624:	da0c      	bge.n	800d640 <__swhatbuf_r+0x2c>
 800d626:	89a3      	ldrh	r3, [r4, #12]
 800d628:	2100      	movs	r1, #0
 800d62a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d62e:	bf14      	ite	ne
 800d630:	2340      	movne	r3, #64	@ 0x40
 800d632:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d636:	2000      	movs	r0, #0
 800d638:	6031      	str	r1, [r6, #0]
 800d63a:	602b      	str	r3, [r5, #0]
 800d63c:	b016      	add	sp, #88	@ 0x58
 800d63e:	bd70      	pop	{r4, r5, r6, pc}
 800d640:	466a      	mov	r2, sp
 800d642:	f000 f87d 	bl	800d740 <_fstat_r>
 800d646:	2800      	cmp	r0, #0
 800d648:	dbed      	blt.n	800d626 <__swhatbuf_r+0x12>
 800d64a:	9901      	ldr	r1, [sp, #4]
 800d64c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d650:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d654:	4259      	negs	r1, r3
 800d656:	4159      	adcs	r1, r3
 800d658:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d65c:	e7eb      	b.n	800d636 <__swhatbuf_r+0x22>

0800d65e <__smakebuf_r>:
 800d65e:	898b      	ldrh	r3, [r1, #12]
 800d660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d662:	079d      	lsls	r5, r3, #30
 800d664:	4606      	mov	r6, r0
 800d666:	460c      	mov	r4, r1
 800d668:	d507      	bpl.n	800d67a <__smakebuf_r+0x1c>
 800d66a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d66e:	6023      	str	r3, [r4, #0]
 800d670:	6123      	str	r3, [r4, #16]
 800d672:	2301      	movs	r3, #1
 800d674:	6163      	str	r3, [r4, #20]
 800d676:	b003      	add	sp, #12
 800d678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d67a:	ab01      	add	r3, sp, #4
 800d67c:	466a      	mov	r2, sp
 800d67e:	f7ff ffc9 	bl	800d614 <__swhatbuf_r>
 800d682:	9f00      	ldr	r7, [sp, #0]
 800d684:	4605      	mov	r5, r0
 800d686:	4630      	mov	r0, r6
 800d688:	4639      	mov	r1, r7
 800d68a:	f7ff f8cf 	bl	800c82c <_malloc_r>
 800d68e:	b948      	cbnz	r0, 800d6a4 <__smakebuf_r+0x46>
 800d690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d694:	059a      	lsls	r2, r3, #22
 800d696:	d4ee      	bmi.n	800d676 <__smakebuf_r+0x18>
 800d698:	f023 0303 	bic.w	r3, r3, #3
 800d69c:	f043 0302 	orr.w	r3, r3, #2
 800d6a0:	81a3      	strh	r3, [r4, #12]
 800d6a2:	e7e2      	b.n	800d66a <__smakebuf_r+0xc>
 800d6a4:	89a3      	ldrh	r3, [r4, #12]
 800d6a6:	6020      	str	r0, [r4, #0]
 800d6a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6ac:	81a3      	strh	r3, [r4, #12]
 800d6ae:	9b01      	ldr	r3, [sp, #4]
 800d6b0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d6b4:	b15b      	cbz	r3, 800d6ce <__smakebuf_r+0x70>
 800d6b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f000 f852 	bl	800d764 <_isatty_r>
 800d6c0:	b128      	cbz	r0, 800d6ce <__smakebuf_r+0x70>
 800d6c2:	89a3      	ldrh	r3, [r4, #12]
 800d6c4:	f023 0303 	bic.w	r3, r3, #3
 800d6c8:	f043 0301 	orr.w	r3, r3, #1
 800d6cc:	81a3      	strh	r3, [r4, #12]
 800d6ce:	89a3      	ldrh	r3, [r4, #12]
 800d6d0:	431d      	orrs	r5, r3
 800d6d2:	81a5      	strh	r5, [r4, #12]
 800d6d4:	e7cf      	b.n	800d676 <__smakebuf_r+0x18>

0800d6d6 <_putc_r>:
 800d6d6:	b570      	push	{r4, r5, r6, lr}
 800d6d8:	460d      	mov	r5, r1
 800d6da:	4614      	mov	r4, r2
 800d6dc:	4606      	mov	r6, r0
 800d6de:	b118      	cbz	r0, 800d6e8 <_putc_r+0x12>
 800d6e0:	6a03      	ldr	r3, [r0, #32]
 800d6e2:	b90b      	cbnz	r3, 800d6e8 <_putc_r+0x12>
 800d6e4:	f7ff f9ba 	bl	800ca5c <__sinit>
 800d6e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6ea:	07d8      	lsls	r0, r3, #31
 800d6ec:	d405      	bmi.n	800d6fa <_putc_r+0x24>
 800d6ee:	89a3      	ldrh	r3, [r4, #12]
 800d6f0:	0599      	lsls	r1, r3, #22
 800d6f2:	d402      	bmi.n	800d6fa <_putc_r+0x24>
 800d6f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6f6:	f7ff fbc0 	bl	800ce7a <__retarget_lock_acquire_recursive>
 800d6fa:	68a3      	ldr	r3, [r4, #8]
 800d6fc:	3b01      	subs	r3, #1
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	60a3      	str	r3, [r4, #8]
 800d702:	da05      	bge.n	800d710 <_putc_r+0x3a>
 800d704:	69a2      	ldr	r2, [r4, #24]
 800d706:	4293      	cmp	r3, r2
 800d708:	db12      	blt.n	800d730 <_putc_r+0x5a>
 800d70a:	b2eb      	uxtb	r3, r5
 800d70c:	2b0a      	cmp	r3, #10
 800d70e:	d00f      	beq.n	800d730 <_putc_r+0x5a>
 800d710:	6823      	ldr	r3, [r4, #0]
 800d712:	1c5a      	adds	r2, r3, #1
 800d714:	6022      	str	r2, [r4, #0]
 800d716:	701d      	strb	r5, [r3, #0]
 800d718:	b2ed      	uxtb	r5, r5
 800d71a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d71c:	07da      	lsls	r2, r3, #31
 800d71e:	d405      	bmi.n	800d72c <_putc_r+0x56>
 800d720:	89a3      	ldrh	r3, [r4, #12]
 800d722:	059b      	lsls	r3, r3, #22
 800d724:	d402      	bmi.n	800d72c <_putc_r+0x56>
 800d726:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d728:	f7ff fba8 	bl	800ce7c <__retarget_lock_release_recursive>
 800d72c:	4628      	mov	r0, r5
 800d72e:	bd70      	pop	{r4, r5, r6, pc}
 800d730:	4629      	mov	r1, r5
 800d732:	4622      	mov	r2, r4
 800d734:	4630      	mov	r0, r6
 800d736:	f7ff fa82 	bl	800cc3e <__swbuf_r>
 800d73a:	4605      	mov	r5, r0
 800d73c:	e7ed      	b.n	800d71a <_putc_r+0x44>
	...

0800d740 <_fstat_r>:
 800d740:	b538      	push	{r3, r4, r5, lr}
 800d742:	2300      	movs	r3, #0
 800d744:	4d06      	ldr	r5, [pc, #24]	@ (800d760 <_fstat_r+0x20>)
 800d746:	4604      	mov	r4, r0
 800d748:	4608      	mov	r0, r1
 800d74a:	4611      	mov	r1, r2
 800d74c:	602b      	str	r3, [r5, #0]
 800d74e:	f7f3 fe3b 	bl	80013c8 <_fstat>
 800d752:	1c43      	adds	r3, r0, #1
 800d754:	d102      	bne.n	800d75c <_fstat_r+0x1c>
 800d756:	682b      	ldr	r3, [r5, #0]
 800d758:	b103      	cbz	r3, 800d75c <_fstat_r+0x1c>
 800d75a:	6023      	str	r3, [r4, #0]
 800d75c:	bd38      	pop	{r3, r4, r5, pc}
 800d75e:	bf00      	nop
 800d760:	20000784 	.word	0x20000784

0800d764 <_isatty_r>:
 800d764:	b538      	push	{r3, r4, r5, lr}
 800d766:	2300      	movs	r3, #0
 800d768:	4d05      	ldr	r5, [pc, #20]	@ (800d780 <_isatty_r+0x1c>)
 800d76a:	4604      	mov	r4, r0
 800d76c:	4608      	mov	r0, r1
 800d76e:	602b      	str	r3, [r5, #0]
 800d770:	f7f3 fe3a 	bl	80013e8 <_isatty>
 800d774:	1c43      	adds	r3, r0, #1
 800d776:	d102      	bne.n	800d77e <_isatty_r+0x1a>
 800d778:	682b      	ldr	r3, [r5, #0]
 800d77a:	b103      	cbz	r3, 800d77e <_isatty_r+0x1a>
 800d77c:	6023      	str	r3, [r4, #0]
 800d77e:	bd38      	pop	{r3, r4, r5, pc}
 800d780:	20000784 	.word	0x20000784

0800d784 <memchr>:
 800d784:	b2c9      	uxtb	r1, r1
 800d786:	4603      	mov	r3, r0
 800d788:	4402      	add	r2, r0
 800d78a:	b510      	push	{r4, lr}
 800d78c:	4293      	cmp	r3, r2
 800d78e:	4618      	mov	r0, r3
 800d790:	d101      	bne.n	800d796 <memchr+0x12>
 800d792:	2000      	movs	r0, #0
 800d794:	e003      	b.n	800d79e <memchr+0x1a>
 800d796:	7804      	ldrb	r4, [r0, #0]
 800d798:	3301      	adds	r3, #1
 800d79a:	428c      	cmp	r4, r1
 800d79c:	d1f6      	bne.n	800d78c <memchr+0x8>
 800d79e:	bd10      	pop	{r4, pc}

0800d7a0 <_init>:
 800d7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7a2:	bf00      	nop
 800d7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7a6:	bc08      	pop	{r3}
 800d7a8:	469e      	mov	lr, r3
 800d7aa:	4770      	bx	lr

0800d7ac <_fini>:
 800d7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ae:	bf00      	nop
 800d7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7b2:	bc08      	pop	{r3}
 800d7b4:	469e      	mov	lr, r3
 800d7b6:	4770      	bx	lr
