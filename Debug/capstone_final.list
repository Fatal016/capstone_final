
capstone_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb1c  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001661  0800ed6c  0800ed6c  0000fd6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080103d0  080103d0  000113d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080103d8  080103d8  000113d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080103dc  080103dc  000113dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000074  20000000  080103e0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dba  20000074  08010454  00012074  2**2
                  ALLOC
  8 ._user_heap_stack 00000602  20000e2e  08010454  00012e2e  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00012074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000266eb  00000000  00000000  000120aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004ba3  00000000  00000000  00038795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f58  00000000  00000000  0003d338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001931  00000000  00000000  0003f290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003df6c  00000000  00000000  00040bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ab80  00000000  00000000  0007eb2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00177fdf  00000000  00000000  000a96ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022168c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008d24  00000000  00000000  002216d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000053  00000000  00000000  0022a3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000074 	.word	0x20000074
 800026c:	00000000 	.word	0x00000000
 8000270:	0800ed54 	.word	0x0800ed54

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000078 	.word	0x20000078
 800028c:	0800ed54 	.word	0x0800ed54

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b97e 	b.w	80005a4 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14d      	bne.n	8000368 <__udivmoddi4+0xa8>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	460f      	mov	r7, r1
 80002d0:	4684      	mov	ip, r0
 80002d2:	4696      	mov	lr, r2
 80002d4:	fab2 f382 	clz	r3, r2
 80002d8:	d960      	bls.n	800039c <__udivmoddi4+0xdc>
 80002da:	b14b      	cbz	r3, 80002f0 <__udivmoddi4+0x30>
 80002dc:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80002ea:	fa20 f202 	lsr.w	r2, r0, r2
 80002ee:	4317      	orrs	r7, r2
 80002f0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f4:	fa1f f48e 	uxth.w	r4, lr
 80002f8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002fc:	fbb7 f1f6 	udiv	r1, r7, r6
 8000300:	fb06 7711 	mls	r7, r6, r1, r7
 8000304:	fb01 f004 	mul.w	r0, r1, r4
 8000308:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800030c:	4290      	cmp	r0, r2
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x62>
 8000310:	eb1e 0202 	adds.w	r2, lr, r2
 8000314:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x60>
 800031a:	4290      	cmp	r0, r2
 800031c:	f200 812d 	bhi.w	800057a <__udivmoddi4+0x2ba>
 8000320:	4639      	mov	r1, r7
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	fa1f fc8c 	uxth.w	ip, ip
 8000328:	fbb2 f0f6 	udiv	r0, r2, r6
 800032c:	fb06 2210 	mls	r2, r6, r0, r2
 8000330:	fb00 f404 	mul.w	r4, r0, r4
 8000334:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000338:	4564      	cmp	r4, ip
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x8e>
 800033c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x8c>
 8000346:	4564      	cmp	r4, ip
 8000348:	f200 811a 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 800034c:	4610      	mov	r0, r2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	ebac 0c04 	sub.w	ip, ip, r4
 8000356:	2100      	movs	r1, #0
 8000358:	b125      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035a:	fa2c f303 	lsr.w	r3, ip, r3
 800035e:	2200      	movs	r2, #0
 8000360:	e9c5 3200 	strd	r3, r2, [r5]
 8000364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000368:	428b      	cmp	r3, r1
 800036a:	d905      	bls.n	8000378 <__udivmoddi4+0xb8>
 800036c:	b10d      	cbz	r5, 8000372 <__udivmoddi4+0xb2>
 800036e:	e9c5 0100 	strd	r0, r1, [r5]
 8000372:	2100      	movs	r1, #0
 8000374:	4608      	mov	r0, r1
 8000376:	e7f5      	b.n	8000364 <__udivmoddi4+0xa4>
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	d14d      	bne.n	800041c <__udivmoddi4+0x15c>
 8000380:	42a3      	cmp	r3, r4
 8000382:	f0c0 80f2 	bcc.w	800056a <__udivmoddi4+0x2aa>
 8000386:	4290      	cmp	r0, r2
 8000388:	f080 80ef 	bcs.w	800056a <__udivmoddi4+0x2aa>
 800038c:	4606      	mov	r6, r0
 800038e:	4623      	mov	r3, r4
 8000390:	4608      	mov	r0, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e6      	beq.n	8000364 <__udivmoddi4+0xa4>
 8000396:	e9c5 6300 	strd	r6, r3, [r5]
 800039a:	e7e3      	b.n	8000364 <__udivmoddi4+0xa4>
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 80a2 	bne.w	80004e6 <__udivmoddi4+0x226>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a8:	fa1f f68e 	uxth.w	r6, lr
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f4f7 	udiv	r4, r2, r7
 80003b2:	fb07 2014 	mls	r0, r7, r4, r2
 80003b6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb06 f004 	mul.w	r0, r6, r4
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d90f      	bls.n	80003e6 <__udivmoddi4+0x126>
 80003c6:	eb1e 0202 	adds.w	r2, lr, r2
 80003ca:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 80003ce:	bf2c      	ite	cs
 80003d0:	f04f 0901 	movcs.w	r9, #1
 80003d4:	f04f 0900 	movcc.w	r9, #0
 80003d8:	4290      	cmp	r0, r2
 80003da:	d903      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003dc:	f1b9 0f00 	cmp.w	r9, #0
 80003e0:	f000 80c8 	beq.w	8000574 <__udivmoddi4+0x2b4>
 80003e4:	4644      	mov	r4, r8
 80003e6:	1a12      	subs	r2, r2, r0
 80003e8:	fa1f fc8c 	uxth.w	ip, ip
 80003ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f0:	fb07 2210 	mls	r2, r7, r0, r2
 80003f4:	fb00 f606 	mul.w	r6, r0, r6
 80003f8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003fc:	4566      	cmp	r6, ip
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x152>
 8000400:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000404:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000408:	d202      	bcs.n	8000410 <__udivmoddi4+0x150>
 800040a:	4566      	cmp	r6, ip
 800040c:	f200 80bb 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000410:	4610      	mov	r0, r2
 8000412:	ebac 0c06 	sub.w	ip, ip, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	e79d      	b.n	8000358 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa04 fe01 	lsl.w	lr, r4, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	fa20 fc06 	lsr.w	ip, r0, r6
 800042e:	40f4      	lsrs	r4, r6
 8000430:	408a      	lsls	r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	ea4e 030c 	orr.w	r3, lr, ip
 8000438:	fa00 fe01 	lsl.w	lr, r0, r1
 800043c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb4 f0f8 	udiv	r0, r4, r8
 800044c:	fb08 4410 	mls	r4, r8, r0, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb00 f90c 	mul.w	r9, r0, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1ba>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a1      	cmp	r9, r4
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 8093 	beq.w	800059e <__udivmoddi4+0x2de>
 8000478:	4650      	mov	r0, sl
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f8 	udiv	r3, r4, r8
 8000486:	fb08 4413 	mls	r4, r8, r3, r4
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000492:	45a4      	cmp	ip, r4
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1e4>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1e2>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d87a      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a8:	eba4 040c 	sub.w	r4, r4, ip
 80004ac:	fba0 9802 	umull	r9, r8, r0, r2
 80004b0:	4544      	cmp	r4, r8
 80004b2:	46cc      	mov	ip, r9
 80004b4:	4643      	mov	r3, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1fe>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x208>
 80004ba:	45ce      	cmp	lr, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x208>
 80004be:	3801      	subs	r0, #1
 80004c0:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c4:	eb68 0307 	sbc.w	r3, r8, r7
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x222>
 80004ca:	ebbe 020c 	subs.w	r2, lr, ip
 80004ce:	eb64 0403 	sbc.w	r4, r4, r3
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	fa22 f301 	lsr.w	r3, r2, r1
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	431e      	orrs	r6, r3
 80004de:	e9c5 6400 	strd	r6, r4, [r5]
 80004e2:	2100      	movs	r1, #0
 80004e4:	e73e      	b.n	8000364 <__udivmoddi4+0xa4>
 80004e6:	fa02 fe03 	lsl.w	lr, r2, r3
 80004ea:	f1c3 0120 	rsb	r1, r3, #32
 80004ee:	fa04 f203 	lsl.w	r2, r4, r3
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	40cc      	lsrs	r4, r1
 80004f8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004fc:	fa20 f101 	lsr.w	r1, r0, r1
 8000500:	fa1f f68e 	uxth.w	r6, lr
 8000504:	fbb4 f0f7 	udiv	r0, r4, r7
 8000508:	430a      	orrs	r2, r1
 800050a:	fb07 4410 	mls	r4, r7, r0, r4
 800050e:	0c11      	lsrs	r1, r2, #16
 8000510:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000514:	fb00 f406 	mul.w	r4, r0, r6
 8000518:	428c      	cmp	r4, r1
 800051a:	d90e      	bls.n	800053a <__udivmoddi4+0x27a>
 800051c:	eb1e 0101 	adds.w	r1, lr, r1
 8000520:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8000524:	bf2c      	ite	cs
 8000526:	f04f 0901 	movcs.w	r9, #1
 800052a:	f04f 0900 	movcc.w	r9, #0
 800052e:	428c      	cmp	r4, r1
 8000530:	d902      	bls.n	8000538 <__udivmoddi4+0x278>
 8000532:	f1b9 0f00 	cmp.w	r9, #0
 8000536:	d02c      	beq.n	8000592 <__udivmoddi4+0x2d2>
 8000538:	4640      	mov	r0, r8
 800053a:	1b09      	subs	r1, r1, r4
 800053c:	b292      	uxth	r2, r2
 800053e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000542:	fb07 1114 	mls	r1, r7, r4, r1
 8000546:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054a:	fb04 f106 	mul.w	r1, r4, r6
 800054e:	4291      	cmp	r1, r2
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x2a2>
 8000552:	eb1e 0202 	adds.w	r2, lr, r2
 8000556:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 800055a:	d201      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 800055c:	4291      	cmp	r1, r2
 800055e:	d815      	bhi.n	800058c <__udivmoddi4+0x2cc>
 8000560:	4644      	mov	r4, r8
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000568:	e721      	b.n	80003ae <__udivmoddi4+0xee>
 800056a:	1a86      	subs	r6, r0, r2
 800056c:	eb64 0303 	sbc.w	r3, r4, r3
 8000570:	2001      	movs	r0, #1
 8000572:	e70e      	b.n	8000392 <__udivmoddi4+0xd2>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e735      	b.n	80003e6 <__udivmoddi4+0x126>
 800057a:	3902      	subs	r1, #2
 800057c:	4472      	add	r2, lr
 800057e:	e6d0      	b.n	8000322 <__udivmoddi4+0x62>
 8000580:	44f4      	add	ip, lr
 8000582:	3802      	subs	r0, #2
 8000584:	e6e3      	b.n	800034e <__udivmoddi4+0x8e>
 8000586:	44f4      	add	ip, lr
 8000588:	3802      	subs	r0, #2
 800058a:	e742      	b.n	8000412 <__udivmoddi4+0x152>
 800058c:	3c02      	subs	r4, #2
 800058e:	4472      	add	r2, lr
 8000590:	e7e7      	b.n	8000562 <__udivmoddi4+0x2a2>
 8000592:	3802      	subs	r0, #2
 8000594:	4471      	add	r1, lr
 8000596:	e7d0      	b.n	800053a <__udivmoddi4+0x27a>
 8000598:	3b02      	subs	r3, #2
 800059a:	443c      	add	r4, r7
 800059c:	e782      	b.n	80004a4 <__udivmoddi4+0x1e4>
 800059e:	3802      	subs	r0, #2
 80005a0:	443c      	add	r4, r7
 80005a2:	e76a      	b.n	800047a <__udivmoddi4+0x1ba>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005b4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d013      	beq.n	80005e8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005c4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005c8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00b      	beq.n	80005e8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d0:	e000      	b.n	80005d4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005d2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0f9      	beq.n	80005d2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005de:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <EXTI12_IRQHandler>:
#endif /* __GNUC__ */
static void SystemClock_Config(void);
extern void isr(void);

void EXTI12_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
    uint16_t GPIO_Pin;

    /* Get GPIO_Pin */
    if (__HAL_GPIO_EXTI_GET_IT(CONF_WINC_SPI_INT_PIN))
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <EXTI12_IRQHandler+0x34>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000606:	2b00      	cmp	r3, #0
 8000608:	d105      	bne.n	8000616 <EXTI12_IRQHandler+0x1e>
 800060a:	4b08      	ldr	r3, [pc, #32]	@ (800062c <EXTI12_IRQHandler+0x34>)
 800060c:	691b      	ldr	r3, [r3, #16]
 800060e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <EXTI12_IRQHandler+0x24>
    {
        GPIO_Pin = CONF_WINC_SPI_INT_PIN;
 8000616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061a:	80fb      	strh	r3, [r7, #6]
    }

    HAL_GPIO_EXTI_IRQHandler(GPIO_Pin);
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	4618      	mov	r0, r3
 8000620:	f003 f9ec 	bl	80039fc <HAL_GPIO_EXTI_IRQHandler>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	46022000 	.word	0x46022000

08000630 <socket_cb>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	603a      	str	r2, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	460b      	mov	r3, r1
 800063e:	71bb      	strb	r3, [r7, #6]
    switch (u8Msg)
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	2b07      	cmp	r3, #7
 8000644:	d029      	beq.n	800069a <socket_cb+0x6a>
 8000646:	2b07      	cmp	r3, #7
 8000648:	dc52      	bgt.n	80006f0 <socket_cb+0xc0>
 800064a:	2b05      	cmp	r3, #5
 800064c:	d002      	beq.n	8000654 <socket_cb+0x24>
 800064e:	2b06      	cmp	r3, #6
 8000650:	d030      	beq.n	80006b4 <socket_cb+0x84>
                controller_socket = -1 ;
            }
        }
        break;
        default:
        break;
 8000652:	e04d      	b.n	80006f0 <socket_cb+0xc0>
            tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg ;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	60bb      	str	r3, [r7, #8]
            if (pstrConnect && pstrConnect->s8Error >= 0)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d010      	beq.n	8000680 <socket_cb+0x50>
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000664:	2b00      	cmp	r3, #0
 8000666:	db0b      	blt.n	8000680 <socket_cb+0x50>
                printf("socket_cb: connect success!\r\n");
 8000668:	4824      	ldr	r0, [pc, #144]	@ (80006fc <socket_cb+0xcc>)
 800066a:	f00d fd77 	bl	800e15c <puts>
                send(controller_socket, &sensor_payload, sizeof(payload_t), 0) ;
 800066e:	4b24      	ldr	r3, [pc, #144]	@ (8000700 <socket_cb+0xd0>)
 8000670:	f993 0000 	ldrsb.w	r0, [r3]
 8000674:	2300      	movs	r3, #0
 8000676:	2203      	movs	r2, #3
 8000678:	4922      	ldr	r1, [pc, #136]	@ (8000704 <socket_cb+0xd4>)
 800067a:	f00d f943 	bl	800d904 <send>
        break ;
 800067e:	e038      	b.n	80006f2 <socket_cb+0xc2>
                printf("socket_cb: connect error!\r\n") ;
 8000680:	4821      	ldr	r0, [pc, #132]	@ (8000708 <socket_cb+0xd8>)
 8000682:	f00d fd6b 	bl	800e15c <puts>
                close(controller_socket) ;
 8000686:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <socket_cb+0xd0>)
 8000688:	f993 3000 	ldrsb.w	r3, [r3]
 800068c:	4618      	mov	r0, r3
 800068e:	f00d fa53 	bl	800db38 <close>
                controller_socket = -1 ;
 8000692:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <socket_cb+0xd0>)
 8000694:	22ff      	movs	r2, #255	@ 0xff
 8000696:	701a      	strb	r2, [r3, #0]
        break ;
 8000698:	e02b      	b.n	80006f2 <socket_cb+0xc2>
            printf("socket_cb: send success!\r\n") ;
 800069a:	481c      	ldr	r0, [pc, #112]	@ (800070c <socket_cb+0xdc>)
 800069c:	f00d fd5e 	bl	800e15c <puts>
            recv(controller_socket, socketBuffer, sizeof(socketBuffer), 0) ;
 80006a0:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <socket_cb+0xd0>)
 80006a2:	f993 0000 	ldrsb.w	r0, [r3]
 80006a6:	2300      	movs	r3, #0
 80006a8:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80006ac:	4918      	ldr	r1, [pc, #96]	@ (8000710 <socket_cb+0xe0>)
 80006ae:	f00d f9ad 	bl	800da0c <recv>
        break;
 80006b2:	e01e      	b.n	80006f2 <socket_cb+0xc2>
            tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg ;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	60fb      	str	r3, [r7, #12]
            if (pstrRecv && pstrRecv->s16BufferSize > 0)
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d00b      	beq.n	80006d6 <socket_cb+0xa6>
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	dd06      	ble.n	80006d6 <socket_cb+0xa6>
                printf("socket_cb: recv success!\r\n") ;
 80006c8:	4812      	ldr	r0, [pc, #72]	@ (8000714 <socket_cb+0xe4>)
 80006ca:	f00d fd47 	bl	800e15c <puts>
                printf("TCP Client Test Complete!\r\n") ;
 80006ce:	4812      	ldr	r0, [pc, #72]	@ (8000718 <socket_cb+0xe8>)
 80006d0:	f00d fd44 	bl	800e15c <puts>
        break;
 80006d4:	e00d      	b.n	80006f2 <socket_cb+0xc2>
                printf("socket_cb: recv error!\r\n") ;
 80006d6:	4811      	ldr	r0, [pc, #68]	@ (800071c <socket_cb+0xec>)
 80006d8:	f00d fd40 	bl	800e15c <puts>
                close(controller_socket) ;
 80006dc:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <socket_cb+0xd0>)
 80006de:	f993 3000 	ldrsb.w	r3, [r3]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f00d fa28 	bl	800db38 <close>
                controller_socket = -1 ;
 80006e8:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <socket_cb+0xd0>)
 80006ea:	22ff      	movs	r2, #255	@ 0xff
 80006ec:	701a      	strb	r2, [r3, #0]
        break;
 80006ee:	e000      	b.n	80006f2 <socket_cb+0xc2>
        break;
 80006f0:	bf00      	nop
    }
}
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	0800ed6c 	.word	0x0800ed6c
 8000700:	20000000 	.word	0x20000000
 8000704:	20000444 	.word	0x20000444
 8000708:	0800ed8c 	.word	0x0800ed8c
 800070c:	0800eda8 	.word	0x0800eda8
 8000710:	20000448 	.word	0x20000448
 8000714:	0800edc4 	.word	0x0800edc4
 8000718:	0800ede0 	.word	0x0800ede0
 800071c:	0800edfc 	.word	0x0800edfc

08000720 <wifi_cb>:

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af02      	add	r7, sp, #8
 8000726:	4603      	mov	r3, r0
 8000728:	6039      	str	r1, [r7, #0]
 800072a:	71fb      	strb	r3, [r7, #7]
    switch (u8MsgType)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b2c      	cmp	r3, #44	@ 0x2c
 8000730:	d002      	beq.n	8000738 <wifi_cb+0x18>
 8000732:	2b32      	cmp	r3, #50	@ 0x32
 8000734:	d01f      	beq.n	8000776 <wifi_cb+0x56>
            wifi_connected = M2M_WIFI_CONNECTED;
            printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF : IP is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
        }
        break;
        default:
        break;
 8000736:	e038      	b.n	80007aa <wifi_cb+0x8a>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	60bb      	str	r3, [r7, #8]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED)
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d105      	bne.n	8000750 <wifi_cb+0x30>
                printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
 8000744:	481b      	ldr	r0, [pc, #108]	@ (80007b4 <wifi_cb+0x94>)
 8000746:	f00d fd09 	bl	800e15c <puts>
                m2m_wifi_request_dhcp_client();
 800074a:	f00a fdfd 	bl	800b348 <m2m_wifi_request_dhcp_client>
        break;
 800074e:	e02b      	b.n	80007a8 <wifi_cb+0x88>
            else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d127      	bne.n	80007a8 <wifi_cb+0x88>
                printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
 8000758:	4817      	ldr	r0, [pc, #92]	@ (80007b8 <wifi_cb+0x98>)
 800075a:	f00d fcff 	bl	800e15c <puts>
                wifi_connected = M2M_WIFI_DISCONNECTED;
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <wifi_cb+0x9c>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_WPA_PSK_KEY, M2M_WIFI_CH_ALL);
 8000764:	23ff      	movs	r3, #255	@ 0xff
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <wifi_cb+0xa0>)
 800076a:	2202      	movs	r2, #2
 800076c:	2107      	movs	r1, #7
 800076e:	4815      	ldr	r0, [pc, #84]	@ (80007c4 <wifi_cb+0xa4>)
 8000770:	f00a fcfe 	bl	800b170 <m2m_wifi_connect>
        break;
 8000774:	e018      	b.n	80007a8 <wifi_cb+0x88>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	60fb      	str	r3, [r7, #12]
            wifi_connected = M2M_WIFI_CONNECTED;
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <wifi_cb+0x9c>)
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
            printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF : IP is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	3301      	adds	r3, #1
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3302      	adds	r3, #2
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3303      	adds	r3, #3
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	4603      	mov	r3, r0
 80007a0:	4809      	ldr	r0, [pc, #36]	@ (80007c8 <wifi_cb+0xa8>)
 80007a2:	f00d fc6b 	bl	800e07c <iprintf>
        break;
 80007a6:	e000      	b.n	80007aa <wifi_cb+0x8a>
        break;
 80007a8:	bf00      	nop
    }
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	0800ee14 	.word	0x0800ee14
 80007b8:	0800ee4c 	.word	0x0800ee4c
 80007bc:	200009fc 	.word	0x200009fc
 80007c0:	0800ee84 	.word	0x0800ee84
 80007c4:	0800ee90 	.word	0x0800ee90
 80007c8:	0800ee98 	.word	0x0800ee98

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b090      	sub	sp, #64	@ 0x40
 80007d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d2:	f000 ffbd 	bl	8001750 <HAL_Init>

  /* USER CODE BEGIN Init */
  printf("Initializing...\n");
 80007d6:	4873      	ldr	r0, [pc, #460]	@ (80009a4 <main+0x1d8>)
 80007d8:	f00d fcc0 	bl	800e15c <puts>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007dc:	f000 f902 	bl	80009e4 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80007e0:	f000 f94e 	bl	8000a80 <SystemPower_Config>

  /* USER CODE BEGIN SysInit */
  UartHandle.Instance        = USARTx;
 80007e4:	4b70      	ldr	r3, [pc, #448]	@ (80009a8 <main+0x1dc>)
 80007e6:	4a71      	ldr	r2, [pc, #452]	@ (80009ac <main+0x1e0>)
 80007e8:	601a      	str	r2, [r3, #0]

  UartHandle.Init.BaudRate   = 115200 ; //9600
 80007ea:	4b6f      	ldr	r3, [pc, #444]	@ (80009a8 <main+0x1dc>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b6d      	ldr	r3, [pc, #436]	@ (80009a8 <main+0x1dc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80007f8:	4b6b      	ldr	r3, [pc, #428]	@ (80009a8 <main+0x1dc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE; //UART_PARITY_ODD
 80007fe:	4b6a      	ldr	r3, [pc, #424]	@ (80009a8 <main+0x1dc>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000804:	4b68      	ldr	r3, [pc, #416]	@ (80009a8 <main+0x1dc>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800080a:	4b67      	ldr	r3, [pc, #412]	@ (80009a8 <main+0x1dc>)
 800080c:	220c      	movs	r2, #12
 800080e:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b65      	ldr	r3, [pc, #404]	@ (80009a8 <main+0x1dc>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000816:	4864      	ldr	r0, [pc, #400]	@ (80009a8 <main+0x1dc>)
 8000818:	f008 fa56 	bl	8008cc8 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <main+0x5a>
  {
    /* Initialization Error */
    Error_Handler();
 8000822:	f000 fc33 	bl	800108c <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 fb45 	bl	8000eb4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800082a:	f000 f941 	bl	8000ab0 <MX_ADC1_Init>
  MX_AES_Init();
 800082e:	f000 f9af 	bl	8000b90 <MX_AES_Init>
  MX_I2C1_Init();
 8000832:	f000 f9e7 	bl	8000c04 <MX_I2C1_Init>
  MX_ICACHE_Init();
 8000836:	f000 fa23 	bl	8000c80 <MX_ICACHE_Init>
  MX_SPI1_Init();
 800083a:	f000 fa35 	bl	8000ca8 <MX_SPI1_Init>
  MX_UART4_Init();
 800083e:	f000 faa1 	bl	8000d84 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000842:	f000 faeb 	bl	8000e1c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8000846:	4b5a      	ldr	r3, [pc, #360]	@ (80009b0 <main+0x1e4>)
 8000848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800084c:	4a58      	ldr	r2, [pc, #352]	@ (80009b0 <main+0x1e4>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000856:	4b56      	ldr	r3, [pc, #344]	@ (80009b0 <main+0x1e4>)
 8000858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800085c:	f003 0304 	and.w	r3, r3, #4
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
  __GPIOA_CLK_ENABLE();
 8000864:	4b52      	ldr	r3, [pc, #328]	@ (80009b0 <main+0x1e4>)
 8000866:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800086a:	4a51      	ldr	r2, [pc, #324]	@ (80009b0 <main+0x1e4>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000874:	4b4e      	ldr	r3, [pc, #312]	@ (80009b0 <main+0x1e4>)
 8000876:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __GPIOB_CLK_ENABLE();
 8000882:	4b4b      	ldr	r3, [pc, #300]	@ (80009b0 <main+0x1e4>)
 8000884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000888:	4a49      	ldr	r2, [pc, #292]	@ (80009b0 <main+0x1e4>)
 800088a:	f043 0302 	orr.w	r3, r3, #2
 800088e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000892:	4b47      	ldr	r3, [pc, #284]	@ (80009b0 <main+0x1e4>)
 8000894:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000898:	f003 0302 	and.w	r3, r3, #2
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	683b      	ldr	r3, [r7, #0]

  /* Initialize the BSP. */
  printf("BSP Initialization Started\n");
 80008a0:	4844      	ldr	r0, [pc, #272]	@ (80009b4 <main+0x1e8>)
 80008a2:	f00d fc5b 	bl	800e15c <puts>
  nm_bsp_init();
 80008a6:	f008 ff83 	bl	80097b0 <nm_bsp_init>
  printf("BSP Initialization Completed!\n");
 80008aa:	4843      	ldr	r0, [pc, #268]	@ (80009b8 <main+0x1ec>)
 80008ac:	f00d fc56 	bl	800e15c <puts>

  /* Initialize socket structure */
  addr.sin_family = AF_INET;
 80008b0:	2302      	movs	r3, #2
 80008b2:	81bb      	strh	r3, [r7, #12]
  addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
 80008b4:	f645 4311 	movw	r3, #23569	@ 0x5c11
 80008b8:	81fb      	strh	r3, [r7, #14]
  addr.sin_addr.s_addr = _htonl(MAIN_WIFI_M2M_SERVER_IP);
 80008ba:	4b40      	ldr	r3, [pc, #256]	@ (80009bc <main+0x1f0>)
 80008bc:	613b      	str	r3, [r7, #16]
//  };




  memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2218      	movs	r2, #24
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f00d fd28 	bl	800e31c <memset>

  /* Initialize Wi-Fi driver with data and status callbacks. */
  param.pfAppWifiCb = wifi_cb;
 80008cc:	4b3c      	ldr	r3, [pc, #240]	@ (80009c0 <main+0x1f4>)
 80008ce:	61fb      	str	r3, [r7, #28]
  ret = m2m_wifi_init(&param);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4618      	mov	r0, r3
 80008d6:	f00a f9d7 	bl	800ac88 <m2m_wifi_init>
 80008da:	4603      	mov	r3, r0
 80008dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (M2M_SUCCESS != ret) {
 80008e0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d007      	beq.n	80008f8 <main+0x12c>
      printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
 80008e8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80008ec:	4619      	mov	r1, r3
 80008ee:	4835      	ldr	r0, [pc, #212]	@ (80009c4 <main+0x1f8>)
 80008f0:	f00d fbc4 	bl	800e07c <iprintf>
    	while (1) {}
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <main+0x128>
  }

  socketInit();
 80008f8:	f00c fe88 	bl	800d60c <socketInit>
  registerSocketCallback(socket_cb, NULL);
 80008fc:	2100      	movs	r1, #0
 80008fe:	4832      	ldr	r0, [pc, #200]	@ (80009c8 <main+0x1fc>)
 8000900:	f00c fea4 	bl	800d64c <registerSocketCallback>

  ret = m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_WPA_PSK_KEY, M2M_WIFI_CH_ALL);
 8000904:	23ff      	movs	r3, #255	@ 0xff
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	4b30      	ldr	r3, [pc, #192]	@ (80009cc <main+0x200>)
 800090a:	2202      	movs	r2, #2
 800090c:	2107      	movs	r1, #7
 800090e:	4830      	ldr	r0, [pc, #192]	@ (80009d0 <main+0x204>)
 8000910:	f00a fc2e 	bl	800b170 <m2m_wifi_connect>
 8000914:	4603      	mov	r3, r0
 8000916:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (M2M_SUCCESS != ret) {
 800091a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800091e:	2b00      	cmp	r3, #0
 8000920:	d005      	beq.n	800092e <main+0x162>
	  printf("main: m2m_wifi_connect call error!(%d)\r\n", ret);
 8000922:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000926:	4619      	mov	r1, r3
 8000928:	482a      	ldr	r0, [pc, #168]	@ (80009d4 <main+0x208>)
 800092a:	f00d fba7 	bl	800e07c <iprintf>
  }

  wifi_connected = M2M_WIFI_CONNECTED;
 800092e:	4b2a      	ldr	r3, [pc, #168]	@ (80009d8 <main+0x20c>)
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
  //uint8 mac[6] = {0};
  //ret = m2m_wifi_get_mac_address(mac);


  while(1) {
	  m2m_wifi_handle_events(NULL);
 8000934:	2000      	movs	r0, #0
 8000936:	f00a f9c0 	bl	800acba <m2m_wifi_handle_events>

	  if (wifi_connected == M2M_WIFI_CONNECTED) {
 800093a:	4b27      	ldr	r3, [pc, #156]	@ (80009d8 <main+0x20c>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d1f8      	bne.n	8000934 <main+0x168>
		  if (controller_socket < 0) {
 8000942:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <main+0x210>)
 8000944:	f993 3000 	ldrsb.w	r3, [r3]
 8000948:	2b00      	cmp	r3, #0
 800094a:	daf3      	bge.n	8000934 <main+0x168>
			  if ((controller_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
 800094c:	2200      	movs	r2, #0
 800094e:	2101      	movs	r1, #1
 8000950:	2002      	movs	r0, #2
 8000952:	f00c fe91 	bl	800d678 <socket>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	4b20      	ldr	r3, [pc, #128]	@ (80009dc <main+0x210>)
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	4b1f      	ldr	r3, [pc, #124]	@ (80009dc <main+0x210>)
 8000960:	f993 3000 	ldrsb.w	r3, [r3]
 8000964:	2b00      	cmp	r3, #0
 8000966:	da03      	bge.n	8000970 <main+0x1a4>
				  printf("main : failed to create TCP client socket error!\r\n");
 8000968:	481d      	ldr	r0, [pc, #116]	@ (80009e0 <main+0x214>)
 800096a:	f00d fbf7 	bl	800e15c <puts>
				  continue;
 800096e:	e018      	b.n	80009a2 <main+0x1d6>
			  }

			  // Connect server
			  ret = connect(controller_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in)) ;
 8000970:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <main+0x210>)
 8000972:	f993 3000 	ldrsb.w	r3, [r3]
 8000976:	f107 010c 	add.w	r1, r7, #12
 800097a:	2210      	movs	r2, #16
 800097c:	4618      	mov	r0, r3
 800097e:	f00c ff57 	bl	800d830 <connect>
 8000982:	4603      	mov	r3, r0
 8000984:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			  if (ret < 0)
 8000988:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800098c:	2b00      	cmp	r3, #0
 800098e:	dad1      	bge.n	8000934 <main+0x168>
			  {
				  close(controller_socket) ;
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <main+0x210>)
 8000992:	f993 3000 	ldrsb.w	r3, [r3]
 8000996:	4618      	mov	r0, r3
 8000998:	f00d f8ce 	bl	800db38 <close>
				  controller_socket = -1 ;
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <main+0x210>)
 800099e:	22ff      	movs	r2, #255	@ 0xff
 80009a0:	701a      	strb	r2, [r3, #0]
	  m2m_wifi_handle_events(NULL);
 80009a2:	e7c7      	b.n	8000934 <main+0x168>
 80009a4:	0800eed0 	.word	0x0800eed0
 80009a8:	200003b0 	.word	0x200003b0
 80009ac:	40013800 	.word	0x40013800
 80009b0:	46020c00 	.word	0x46020c00
 80009b4:	0800eee0 	.word	0x0800eee0
 80009b8:	0800eefc 	.word	0x0800eefc
 80009bc:	1301a8c0 	.word	0x1301a8c0
 80009c0:	08000721 	.word	0x08000721
 80009c4:	0800ef1c 	.word	0x0800ef1c
 80009c8:	08000631 	.word	0x08000631
 80009cc:	0800ee84 	.word	0x0800ee84
 80009d0:	0800ee90 	.word	0x0800ee90
 80009d4:	0800ef44 	.word	0x0800ef44
 80009d8:	200009fc 	.word	0x200009fc
 80009dc:	20000000 	.word	0x20000000
 80009e0:	0800ef70 	.word	0x0800ef70

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b09e      	sub	sp, #120	@ 0x78
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 0318 	add.w	r3, r7, #24
 80009ee:	2260      	movs	r2, #96	@ 0x60
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f00d fc92 	bl	800e31c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	463b      	mov	r3, r7
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
 8000a06:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f003 fa13 	bl	8003e34 <HAL_PWREx_ControlVoltageScaling>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a14:	f000 fb3a 	bl	800108c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000a18:	2312      	movs	r3, #18
 8000a1a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a22:	2310      	movs	r3, #16
 8000a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a26:	2301      	movs	r3, #1
 8000a28:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000a2a:	2310      	movs	r3, #16
 8000a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000a2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a38:	f107 0318 	add.w	r3, r7, #24
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f003 faa5 	bl	8003f8c <HAL_RCC_OscConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a48:	f000 fb20 	bl	800108c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4c:	231f      	movs	r3, #31
 8000a4e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f004 f96b 	bl	8004d44 <HAL_RCC_ClockConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a74:	f000 fb0a 	bl	800108c <Error_Handler>
  }
}
 8000a78:	bf00      	nop
 8000a7a:	3778      	adds	r7, #120	@ 0x78
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000a86:	f003 fa61 	bl	8003f4c <HAL_PWREx_EnableVddIO2>

  PWR_PVDTypeDef sConfigPVD = {0};
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_7;
 8000a92:	23e0      	movs	r3, #224	@ 0xe0
 8000a94:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f003 f94b 	bl	8003d38 <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 8000aa2:	f003 f9b7 	bl	8003e14 <HAL_PWR_EnablePVD>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2220      	movs	r2, #32
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f00d fc2d 	bl	800e31c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ac2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8000b84 <MX_ADC1_Init+0xd4>)
 8000ac6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000ace:	4b2c      	ldr	r3, [pc, #176]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ada:	4b29      	ldr	r3, [pc, #164]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ae0:	4b27      	ldr	r3, [pc, #156]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae6:	4b26      	ldr	r3, [pc, #152]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000ae8:	2204      	movs	r2, #4
 8000aea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aec:	4b24      	ldr	r3, [pc, #144]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000af2:	4b23      	ldr	r3, [pc, #140]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b00:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b22:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b28:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000b34:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b3c:	4810      	ldr	r0, [pc, #64]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000b3e:	f001 f9cb 	bl	8001ed8 <HAL_ADC_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000b48:	f000 faa0 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_ADC1_Init+0xd8>)
 8000b4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b50:	2306      	movs	r3, #6
 8000b52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <MX_ADC1_Init+0xdc>)
 8000b5a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b64:	463b      	mov	r3, r7
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <MX_ADC1_Init+0xd0>)
 8000b6a:	f001 fc9d 	bl	80024a8 <HAL_ADC_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000b74:	f000 fa8a 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	3720      	adds	r7, #32
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000090 	.word	0x20000090
 8000b84:	42028000 	.word	0x42028000
 8000b88:	04000002 	.word	0x04000002
 8000b8c:	ffff0000 	.word	0xffff0000

08000b90 <MX_AES_Init>:
  * @brief AES Initialization Function
  * @param None
  * @retval None
  */
static void MX_AES_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 8000b94:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <MX_AES_Init+0x60>)
 8000b96:	4a17      	ldr	r2, [pc, #92]	@ (8000bf4 <MX_AES_Init+0x64>)
 8000b98:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_NO_SWAP;
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <MX_AES_Init+0x60>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 8000ba0:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <MX_AES_Init+0x60>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 8000ba6:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <MX_AES_Init+0x60>)
 8000ba8:	4a13      	ldr	r2, [pc, #76]	@ (8000bf8 <MX_AES_Init+0x68>)
 8000baa:	60da      	str	r2, [r3, #12]
  hcryp.Init.pInitVect = (uint32_t *)pInitVectAES;
 8000bac:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <MX_AES_Init+0x60>)
 8000bae:	4a13      	ldr	r2, [pc, #76]	@ (8000bfc <MX_AES_Init+0x6c>)
 8000bb0:	611a      	str	r2, [r3, #16]
  hcryp.Init.Algorithm = CRYP_AES_GCM_GMAC;
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <MX_AES_Init+0x60>)
 8000bb4:	2260      	movs	r2, #96	@ 0x60
 8000bb6:	615a      	str	r2, [r3, #20]
  hcryp.Init.Header = (uint32_t *)HeaderAES;
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <MX_AES_Init+0x60>)
 8000bba:	4a11      	ldr	r2, [pc, #68]	@ (8000c00 <MX_AES_Init+0x70>)
 8000bbc:	619a      	str	r2, [r3, #24]
  hcryp.Init.HeaderSize = 1;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <MX_AES_Init+0x60>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	61da      	str	r2, [r3, #28]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <MX_AES_Init+0x60>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	@ 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_WORD;
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <MX_AES_Init+0x60>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	@ 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <MX_AES_Init+0x60>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hcryp.Init.KeyMode = CRYP_KEYMODE_NORMAL;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <MX_AES_Init+0x60>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	@ (8000bf0 <MX_AES_Init+0x60>)
 8000bde:	f002 fc47 	bl	8003470 <HAL_CRYP_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_AES_Init+0x5c>
  {
    Error_Handler();
 8000be8:	f000 fa50 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2000011c 	.word	0x2000011c
 8000bf4:	420c0000 	.word	0x420c0000
 8000bf8:	20000184 	.word	0x20000184
 8000bfc:	20000194 	.word	0x20000194
 8000c00:	0800ffd4 	.word	0x0800ffd4

08000c04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <MX_I2C1_Init+0x74>)
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c7c <MX_I2C1_Init+0x78>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <MX_I2C1_Init+0x74>)
 8000c10:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000c14:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c16:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <MX_I2C1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <MX_I2C1_Init+0x74>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <MX_I2C1_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c28:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <MX_I2C1_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c2e:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <MX_I2C1_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c34:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <MX_I2C1_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <MX_I2C1_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c40:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <MX_I2C1_Init+0x74>)
 8000c42:	f002 ff17 	bl	8003a74 <HAL_I2C_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c4c:	f000 fa1e 	bl	800108c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c50:	2100      	movs	r1, #0
 8000c52:	4809      	ldr	r0, [pc, #36]	@ (8000c78 <MX_I2C1_Init+0x74>)
 8000c54:	f002 ffa9 	bl	8003baa <HAL_I2CEx_ConfigAnalogFilter>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000c5e:	f000 fa15 	bl	800108c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c62:	2100      	movs	r1, #0
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <MX_I2C1_Init+0x74>)
 8000c66:	f002 ffeb 	bl	8003c40 <HAL_I2CEx_ConfigDigitalFilter>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000c70:	f000 fa0c 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200001a4 	.word	0x200001a4
 8000c7c:	40005400 	.word	0x40005400

08000c80 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000c84:	2000      	movs	r0, #0
 8000c86:	f003 f827 	bl	8003cd8 <HAL_ICACHE_ConfigAssociativityMode>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000c90:	f000 f9fc 	bl	800108c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000c94:	f003 f840 	bl	8003d18 <HAL_ICACHE_Enable>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000c9e:	f000 f9f5 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cb8:	4b30      	ldr	r3, [pc, #192]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000cba:	4a31      	ldr	r2, [pc, #196]	@ (8000d80 <MX_SPI1_Init+0xd8>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000cc0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000cce:	2203      	movs	r2, #3
 8000cd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd8:	4b28      	ldr	r3, [pc, #160]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cde:	4b27      	ldr	r3, [pc, #156]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000ce0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ce4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ce6:	4b25      	ldr	r3, [pc, #148]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cec:	4b23      	ldr	r3, [pc, #140]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf2:	4b22      	ldr	r3, [pc, #136]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf8:	4b20      	ldr	r3, [pc, #128]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000d00:	2207      	movs	r2, #7
 8000d02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000d06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d0a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d18:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d24:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d2a:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d42:	480e      	ldr	r0, [pc, #56]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000d44:	f007 fb26 	bl	8008394 <HAL_SPI_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8000d4e:	f000 f99d 	bl	800108c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000d56:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d5a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <MX_SPI1_Init+0xd4>)
 8000d66:	f007 ff6e 	bl	8008c46 <HAL_SPIEx_SetConfigAutonomousMode>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8000d70:	f000 f98c 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	200001f8 	.word	0x200001f8
 8000d80:	40013000 	.word	0x40013000

08000d84 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d88:	4b22      	ldr	r3, [pc, #136]	@ (8000e14 <MX_UART4_Init+0x90>)
 8000d8a:	4a23      	ldr	r2, [pc, #140]	@ (8000e18 <MX_UART4_Init+0x94>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <MX_UART4_Init+0x90>)
 8000d90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d94:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_UART4_Init+0x90>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <MX_UART4_Init+0x90>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <MX_UART4_Init+0x90>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_UART4_Init+0x90>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <MX_UART4_Init+0x90>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <MX_UART4_Init+0x90>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dba:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <MX_UART4_Init+0x90>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_UART4_Init+0x90>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <MX_UART4_Init+0x90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000dcc:	4811      	ldr	r0, [pc, #68]	@ (8000e14 <MX_UART4_Init+0x90>)
 8000dce:	f007 ff7b 	bl	8008cc8 <HAL_UART_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000dd8:	f000 f958 	bl	800108c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <MX_UART4_Init+0x90>)
 8000de0:	f008 fbc8 	bl	8009574 <HAL_UARTEx_SetTxFifoThreshold>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000dea:	f000 f94f 	bl	800108c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dee:	2100      	movs	r1, #0
 8000df0:	4808      	ldr	r0, [pc, #32]	@ (8000e14 <MX_UART4_Init+0x90>)
 8000df2:	f008 fbfd 	bl	80095f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000dfc:	f000 f946 	bl	800108c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000e00:	4804      	ldr	r0, [pc, #16]	@ (8000e14 <MX_UART4_Init+0x90>)
 8000e02:	f008 fb7e 	bl	8009502 <HAL_UARTEx_DisableFifoMode>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000e0c:	f000 f93e 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000288 	.word	0x20000288
 8000e18:	40004c00 	.word	0x40004c00

08000e1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e20:	4b22      	ldr	r3, [pc, #136]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e22:	4a23      	ldr	r2, [pc, #140]	@ (8000eb0 <MX_USART1_UART_Init+0x94>)
 8000e24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e26:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e46:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4c:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e52:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e58:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e64:	4811      	ldr	r0, [pc, #68]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e66:	f007 ff2f 	bl	8008cc8 <HAL_UART_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e70:	f000 f90c 	bl	800108c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e74:	2100      	movs	r1, #0
 8000e76:	480d      	ldr	r0, [pc, #52]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e78:	f008 fb7c 	bl	8009574 <HAL_UARTEx_SetTxFifoThreshold>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e82:	f000 f903 	bl	800108c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e86:	2100      	movs	r1, #0
 8000e88:	4808      	ldr	r0, [pc, #32]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e8a:	f008 fbb1 	bl	80095f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e94:	f000 f8fa 	bl	800108c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e98:	4804      	ldr	r0, [pc, #16]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e9a:	f008 fb32 	bl	8009502 <HAL_UARTEx_DisableFifoMode>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ea4:	f000 f8f2 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	2000031c 	.word	0x2000031c
 8000eb0:	40013800 	.word	0x40013800

08000eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	@ 0x28
 8000eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	4b5c      	ldr	r3, [pc, #368]	@ (800103c <MX_GPIO_Init+0x188>)
 8000ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ed0:	4a5a      	ldr	r2, [pc, #360]	@ (800103c <MX_GPIO_Init+0x188>)
 8000ed2:	f043 0304 	orr.w	r3, r3, #4
 8000ed6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000eda:	4b58      	ldr	r3, [pc, #352]	@ (800103c <MX_GPIO_Init+0x188>)
 8000edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b54      	ldr	r3, [pc, #336]	@ (800103c <MX_GPIO_Init+0x188>)
 8000eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eee:	4a53      	ldr	r2, [pc, #332]	@ (800103c <MX_GPIO_Init+0x188>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ef8:	4b50      	ldr	r3, [pc, #320]	@ (800103c <MX_GPIO_Init+0x188>)
 8000efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	4b4d      	ldr	r3, [pc, #308]	@ (800103c <MX_GPIO_Init+0x188>)
 8000f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f0c:	4a4b      	ldr	r2, [pc, #300]	@ (800103c <MX_GPIO_Init+0x188>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f16:	4b49      	ldr	r3, [pc, #292]	@ (800103c <MX_GPIO_Init+0x188>)
 8000f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f24:	4b45      	ldr	r3, [pc, #276]	@ (800103c <MX_GPIO_Init+0x188>)
 8000f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f2a:	4a44      	ldr	r2, [pc, #272]	@ (800103c <MX_GPIO_Init+0x188>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f34:	4b41      	ldr	r3, [pc, #260]	@ (800103c <MX_GPIO_Init+0x188>)
 8000f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f42:	4b3e      	ldr	r3, [pc, #248]	@ (800103c <MX_GPIO_Init+0x188>)
 8000f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f48:	4a3c      	ldr	r2, [pc, #240]	@ (800103c <MX_GPIO_Init+0x188>)
 8000f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f52:	4b3a      	ldr	r3, [pc, #232]	@ (800103c <MX_GPIO_Init+0x188>)
 8000f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_CHIP_ENABLE_GPIO_Port, WIFI_CHIP_ENABLE_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f66:	4836      	ldr	r0, [pc, #216]	@ (8001040 <MX_GPIO_Init+0x18c>)
 8000f68:	f002 fd16 	bl	8003998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WIFI_RESET_Pin|WIFI_CS_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8000f72:	4834      	ldr	r0, [pc, #208]	@ (8001044 <MX_GPIO_Init+0x190>)
 8000f74:	f002 fd10 	bl	8003998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	4832      	ldr	r0, [pc, #200]	@ (8001048 <MX_GPIO_Init+0x194>)
 8000f7e:	f002 fd0b 	bl	8003998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_WAKE_GPIO_Port, WIFI_WAKE_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2140      	movs	r1, #64	@ 0x40
 8000f86:	4831      	ldr	r0, [pc, #196]	@ (800104c <MX_GPIO_Init+0x198>)
 8000f88:	f002 fd06 	bl	8003998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WIFI_CHIP_ENABLE_Pin */
  GPIO_InitStruct.Pin = WIFI_CHIP_ENABLE_Pin;
 8000f8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_CHIP_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4826      	ldr	r0, [pc, #152]	@ (8001040 <MX_GPIO_Init+0x18c>)
 8000fa6:	f002 fb1f 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_RESET_Pin WIFI_CS_Pin */
  GPIO_InitStruct.Pin = WIFI_RESET_Pin|WIFI_CS_Pin;
 8000faa:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4820      	ldr	r0, [pc, #128]	@ (8001044 <MX_GPIO_Init+0x190>)
 8000fc4:	f002 fb10 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = WIFI_INTERRUPT_Pin;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fce:	4b20      	ldr	r3, [pc, #128]	@ (8001050 <MX_GPIO_Init+0x19c>)
 8000fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WIFI_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4819      	ldr	r0, [pc, #100]	@ (8001044 <MX_GPIO_Init+0x190>)
 8000fde:	f002 fb03 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4813      	ldr	r0, [pc, #76]	@ (8001048 <MX_GPIO_Init+0x194>)
 8000ffa:	f002 faf5 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_WAKE_Pin */
  GPIO_InitStruct.Pin = WIFI_WAKE_Pin;
 8000ffe:	2340      	movs	r3, #64	@ 0x40
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_WAKE_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	480d      	ldr	r0, [pc, #52]	@ (800104c <MX_GPIO_Init+0x198>)
 8001016:	f002 fae7 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800101a:	2380      	movs	r3, #128	@ 0x80
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	2303      	movs	r3, #3
 8001020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4804      	ldr	r0, [pc, #16]	@ (8001040 <MX_GPIO_Init+0x18c>)
 800102e:	f002 fadb 	bl	80035e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001032:	bf00      	nop
 8001034:	3728      	adds	r7, #40	@ 0x28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	46020c00 	.word	0x46020c00
 8001040:	42020400 	.word	0x42020400
 8001044:	42020c00 	.word	0x42020c00
 8001048:	42021800 	.word	0x42021800
 800104c:	42020800 	.word	0x42020800
 8001050:	10110000 	.word	0x10110000

08001054 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	e009      	b.n	800107a <_write+0x26>
		ITM_SendChar(*ptr++);
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	60ba      	str	r2, [r7, #8]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa9a 	bl	80005a8 <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3301      	adds	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	dbf1      	blt.n	8001066 <_write+0x12>
	}
	return len;
 8001082:	687b      	ldr	r3, [r7, #4]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <Error_Handler+0x8>

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_MspInit+0x30>)
 80010a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010a4:	4a08      	ldr	r2, [pc, #32]	@ (80010c8 <HAL_MspInit+0x30>)
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <HAL_MspInit+0x30>)
 80010b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80010bc:	f002 ff56 	bl	8003f6c <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	46020c00 	.word	0x46020c00

080010cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0c0      	sub	sp, #256	@ 0x100
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	22d8      	movs	r2, #216	@ 0xd8
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00d f915 	bl	800e31c <memset>
  if(hadc->Instance==ADC1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a24      	ldr	r2, [pc, #144]	@ (8001188 <HAL_ADC_MspInit+0xbc>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d140      	bne.n	800117e <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80010fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001108:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800110c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f004 f9e5 	bl	80054e4 <HAL_RCCEx_PeriphCLKConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001120:	f7ff ffb4 	bl	800108c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001124:	4b19      	ldr	r3, [pc, #100]	@ (800118c <HAL_ADC_MspInit+0xc0>)
 8001126:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800112a:	4a18      	ldr	r2, [pc, #96]	@ (800118c <HAL_ADC_MspInit+0xc0>)
 800112c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001130:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HAL_ADC_MspInit+0xc0>)
 8001136:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800113a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_ADC_MspInit+0xc0>)
 8001144:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001148:	4a10      	ldr	r2, [pc, #64]	@ (800118c <HAL_ADC_MspInit+0xc0>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001152:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <HAL_ADC_MspInit+0xc0>)
 8001154:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001160:	2303      	movs	r3, #3
 8001162:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001166:	2303      	movs	r3, #3
 8001168:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001172:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <HAL_ADC_MspInit+0xc4>)
 800117a:	f002 fa35 	bl	80035e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	42028000 	.word	0x42028000
 800118c:	46020c00 	.word	0x46020c00
 8001190:	42020800 	.word	0x42020800

08001194 <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0b      	ldr	r2, [pc, #44]	@ (80011d0 <HAL_CRYP_MspInit+0x3c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d10e      	bne.n	80011c4 <HAL_CRYP_MspInit+0x30>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_CRYP_MspInit+0x40>)
 80011a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ac:	4a09      	ldr	r2, [pc, #36]	@ (80011d4 <HAL_CRYP_MspInit+0x40>)
 80011ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011b6:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <HAL_CRYP_MspInit+0x40>)
 80011b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }

}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	420c0000 	.word	0x420c0000
 80011d4:	46020c00 	.word	0x46020c00

080011d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b0c0      	sub	sp, #256	@ 0x100
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	22d8      	movs	r2, #216	@ 0xd8
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f00d f88f 	bl	800e31c <memset>
  if(hi2c->Instance==I2C1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a27      	ldr	r2, [pc, #156]	@ (80012a0 <HAL_I2C_MspInit+0xc8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d145      	bne.n	8001294 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001208:	f04f 0240 	mov.w	r2, #64	@ 0x40
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001214:	2300      	movs	r3, #0
 8001216:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4618      	mov	r0, r3
 800121e:	f004 f961 	bl	80054e4 <HAL_RCCEx_PeriphCLKConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8001228:	f7ff ff30 	bl	800108c <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800122c:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <HAL_I2C_MspInit+0xcc>)
 800122e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001232:	4a1c      	ldr	r2, [pc, #112]	@ (80012a4 <HAL_I2C_MspInit+0xcc>)
 8001234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001238:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_I2C_MspInit+0xcc>)
 800123e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800124a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800124e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001252:	2312      	movs	r3, #18
 8001254:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001264:	2304      	movs	r3, #4
 8001266:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800126a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800126e:	4619      	mov	r1, r3
 8001270:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <HAL_I2C_MspInit+0xd0>)
 8001272:	f002 f9b9 	bl	80035e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <HAL_I2C_MspInit+0xcc>)
 8001278:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800127c:	4a09      	ldr	r2, [pc, #36]	@ (80012a4 <HAL_I2C_MspInit+0xcc>)
 800127e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001282:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001286:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <HAL_I2C_MspInit+0xcc>)
 8001288:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800128c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40005400 	.word	0x40005400
 80012a4:	46020c00 	.word	0x46020c00
 80012a8:	42021800 	.word	0x42021800

080012ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0c0      	sub	sp, #256	@ 0x100
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	22d8      	movs	r2, #216	@ 0xd8
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f00d f825 	bl	800e31c <memset>
  if(hspi->Instance==SPI1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a27      	ldr	r2, [pc, #156]	@ (8001374 <HAL_SPI_MspInit+0xc8>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d146      	bne.n	800136a <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80012e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	4618      	mov	r0, r3
 80012f6:	f004 f8f5 	bl	80054e4 <HAL_RCCEx_PeriphCLKConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001300:	f7ff fec4 	bl	800108c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001304:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <HAL_SPI_MspInit+0xcc>)
 8001306:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800130a:	4a1b      	ldr	r2, [pc, #108]	@ (8001378 <HAL_SPI_MspInit+0xcc>)
 800130c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001310:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001314:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <HAL_SPI_MspInit+0xcc>)
 8001316:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800131a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <HAL_SPI_MspInit+0xcc>)
 8001324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001328:	4a13      	ldr	r2, [pc, #76]	@ (8001378 <HAL_SPI_MspInit+0xcc>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001332:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <HAL_SPI_MspInit+0xcc>)
 8001334:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = WIFI_SCK_Pin|WIFI_MISO_Pin|WIFI_MOSI_Pin;
 8001340:	23e0      	movs	r3, #224	@ 0xe0
 8001342:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001358:	2305      	movs	r3, #5
 800135a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	@ (800137c <HAL_SPI_MspInit+0xd0>)
 8001366:	f002 f93f 	bl	80035e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800136a:	bf00      	nop
 800136c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40013000 	.word	0x40013000
 8001378:	46020c00 	.word	0x46020c00
 800137c:	42020000 	.word	0x42020000

08001380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0c2      	sub	sp, #264	@ 0x108
 8001384:	af00      	add	r7, sp, #0
 8001386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800138a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800138e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	22d8      	movs	r2, #216	@ 0xd8
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00c ffb7 	bl	800e31c <memset>
  if(huart->Instance==UART4)
 80013ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80013b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a52      	ldr	r2, [pc, #328]	@ (8001504 <HAL_UART_MspInit+0x184>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d145      	bne.n	800144c <HAL_UART_MspInit+0xcc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80013c0:	f04f 0208 	mov.w	r2, #8
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d0:	f107 0318 	add.w	r3, r7, #24
 80013d4:	4618      	mov	r0, r3
 80013d6:	f004 f885 	bl	80054e4 <HAL_RCCEx_PeriphCLKConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 80013e0:	f7ff fe54 	bl	800108c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013e4:	4b48      	ldr	r3, [pc, #288]	@ (8001508 <HAL_UART_MspInit+0x188>)
 80013e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013ea:	4a47      	ldr	r2, [pc, #284]	@ (8001508 <HAL_UART_MspInit+0x188>)
 80013ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013f0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80013f4:	4b44      	ldr	r3, [pc, #272]	@ (8001508 <HAL_UART_MspInit+0x188>)
 80013f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b41      	ldr	r3, [pc, #260]	@ (8001508 <HAL_UART_MspInit+0x188>)
 8001404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001408:	4a3f      	ldr	r2, [pc, #252]	@ (8001508 <HAL_UART_MspInit+0x188>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001412:	4b3d      	ldr	r3, [pc, #244]	@ (8001508 <HAL_UART_MspInit+0x188>)
 8001414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001420:	2303      	movs	r3, #3
 8001422:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001438:	2308      	movs	r3, #8
 800143a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001442:	4619      	mov	r1, r3
 8001444:	4831      	ldr	r0, [pc, #196]	@ (800150c <HAL_UART_MspInit+0x18c>)
 8001446:	f002 f8cf 	bl	80035e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800144a:	e056      	b.n	80014fa <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==USART1)
 800144c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001450:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a2d      	ldr	r2, [pc, #180]	@ (8001510 <HAL_UART_MspInit+0x190>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d14d      	bne.n	80014fa <HAL_UART_MspInit+0x17a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800145e:	f04f 0201 	mov.w	r2, #1
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800146a:	2300      	movs	r3, #0
 800146c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146e:	f107 0318 	add.w	r3, r7, #24
 8001472:	4618      	mov	r0, r3
 8001474:	f004 f836 	bl	80054e4 <HAL_RCCEx_PeriphCLKConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_UART_MspInit+0x102>
      Error_Handler();
 800147e:	f7ff fe05 	bl	800108c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001482:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <HAL_UART_MspInit+0x188>)
 8001484:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001488:	4a1f      	ldr	r2, [pc, #124]	@ (8001508 <HAL_UART_MspInit+0x188>)
 800148a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800148e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001492:	4b1d      	ldr	r3, [pc, #116]	@ (8001508 <HAL_UART_MspInit+0x188>)
 8001494:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001498:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <HAL_UART_MspInit+0x188>)
 80014a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a6:	4a18      	ldr	r2, [pc, #96]	@ (8001508 <HAL_UART_MspInit+0x188>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014b0:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <HAL_UART_MspInit+0x188>)
 80014b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80014be:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80014c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014cc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014ce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014e8:	2307      	movs	r3, #7
 80014ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	@ (800150c <HAL_UART_MspInit+0x18c>)
 80014f6:	f002 f877 	bl	80035e8 <HAL_GPIO_Init>
}
 80014fa:	bf00      	nop
 80014fc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40004c00 	.word	0x40004c00
 8001508:	46020c00 	.word	0x46020c00
 800150c:	42020000 	.word	0x42020000
 8001510:	40013800 	.word	0x40013800

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <NMI_Handler+0x4>

0800151c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001520:	2104      	movs	r1, #4
 8001522:	4802      	ldr	r0, [pc, #8]	@ (800152c <HardFault_Handler+0x10>)
 8001524:	f002 fa50 	bl	80039c8 <HAL_GPIO_TogglePin>
 8001528:	e7fa      	b.n	8001520 <HardFault_Handler+0x4>
 800152a:	bf00      	nop
 800152c:	42021800 	.word	0x42021800

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <MemManage_Handler+0x4>

08001538 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <BusFault_Handler+0x4>

08001540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <UsageFault_Handler+0x4>

08001548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001576:	f000 f991 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}

0800157e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	e00a      	b.n	80015a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001590:	f3af 8000 	nop.w
 8001594:	4601      	mov	r1, r0
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	60ba      	str	r2, [r7, #8]
 800159c:	b2ca      	uxtb	r2, r1
 800159e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	3301      	adds	r3, #1
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	dbf0      	blt.n	8001590 <_read+0x12>
  }

  return len;
 80015ae:	687b      	ldr	r3, [r7, #4]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015e0:	605a      	str	r2, [r3, #4]
  return 0;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_isatty>:

int _isatty(int file)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015f8:	2301      	movs	r3, #1
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001606:	b480      	push	{r7}
 8001608:	b085      	sub	sp, #20
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001628:	4a14      	ldr	r2, [pc, #80]	@ (800167c <_sbrk+0x5c>)
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <_sbrk+0x60>)
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001634:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <_sbrk+0x64>)
 800163e:	4a12      	ldr	r2, [pc, #72]	@ (8001688 <_sbrk+0x68>)
 8001640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	429a      	cmp	r2, r3
 800164e:	d207      	bcs.n	8001660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001650:	f00c fec2 	bl	800e3d8 <__errno>
 8001654:	4603      	mov	r3, r0
 8001656:	220c      	movs	r2, #12
 8001658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800165e:	e009      	b.n	8001674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001666:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	4a05      	ldr	r2, [pc, #20]	@ (8001684 <_sbrk+0x64>)
 8001670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20270000 	.word	0x20270000
 8001680:	00000400 	.word	0x00000400
 8001684:	20000a00 	.word	0x20000a00
 8001688:	20000e30 	.word	0x20000e30

0800168c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001690:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <SystemInit+0x68>)
 8001692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001696:	4a17      	ldr	r2, [pc, #92]	@ (80016f4 <SystemInit+0x68>)
 8001698:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800169c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80016a0:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <SystemInit+0x6c>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <SystemInit+0x6c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <SystemInit+0x6c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80016b2:	4b11      	ldr	r3, [pc, #68]	@ (80016f8 <SystemInit+0x6c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80016b8:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <SystemInit+0x6c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0e      	ldr	r2, [pc, #56]	@ (80016f8 <SystemInit+0x6c>)
 80016be:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80016c2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80016c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80016c8:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <SystemInit+0x6c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80016ce:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <SystemInit+0x6c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a09      	ldr	r2, [pc, #36]	@ (80016f8 <SystemInit+0x6c>)
 80016d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80016da:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <SystemInit+0x6c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016e0:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <SystemInit+0x68>)
 80016e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016e6:	609a      	str	r2, [r3, #8]
  #endif
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00
 80016f8:	46020c00 	.word	0x46020c00

080016fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80016fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001734 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001700:	f7ff ffc4 	bl	800168c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001704:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001706:	e003      	b.n	8001710 <LoopCopyDataInit>

08001708 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001708:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800170a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800170c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800170e:	3104      	adds	r1, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001710:	480a      	ldr	r0, [pc, #40]	@ (800173c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001714:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001716:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001718:	d3f6      	bcc.n	8001708 <CopyDataInit>
	ldr	r2, =_sbss
 800171a:	4a0a      	ldr	r2, [pc, #40]	@ (8001744 <LoopForever+0x12>)
	b	LoopFillZerobss
 800171c:	e002      	b.n	8001724 <LoopFillZerobss>

0800171e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800171e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001720:	f842 3b04 	str.w	r3, [r2], #4

08001724 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001724:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <LoopForever+0x16>)
	cmp	r2, r3
 8001726:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001728:	d3f9      	bcc.n	800171e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800172a:	f00c fe5b 	bl	800e3e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800172e:	f7ff f84d 	bl	80007cc <main>

08001732 <LoopForever>:

LoopForever:
    b LoopForever
 8001732:	e7fe      	b.n	8001732 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001734:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8001738:	080103e0 	.word	0x080103e0
	ldr	r0, =_sdata
 800173c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001740:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001744:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001748:	20000e2e 	.word	0x20000e2e

0800174c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC1_2_IRQHandler>
	...

08001750 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001754:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <HAL_Init+0x50>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a11      	ldr	r2, [pc, #68]	@ (80017a0 <HAL_Init+0x50>)
 800175a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800175e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001760:	2003      	movs	r0, #3
 8001762:	f001 fd90 	bl	8003286 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001766:	f003 fcdf 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 800176a:	4602      	mov	r2, r0
 800176c:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <HAL_Init+0x54>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	f003 030f 	and.w	r3, r3, #15
 8001774:	490c      	ldr	r1, [pc, #48]	@ (80017a8 <HAL_Init+0x58>)
 8001776:	5ccb      	ldrb	r3, [r1, r3]
 8001778:	fa22 f303 	lsr.w	r3, r2, r3
 800177c:	4a0b      	ldr	r2, [pc, #44]	@ (80017ac <HAL_Init+0x5c>)
 800177e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001780:	2004      	movs	r0, #4
 8001782:	f001 fde3 	bl	800334c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001786:	200f      	movs	r0, #15
 8001788:	f000 f812 	bl	80017b0 <HAL_InitTick>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e002      	b.n	800179c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001796:	f7ff fc7f 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40022000 	.word	0x40022000
 80017a4:	46020c00 	.word	0x46020c00
 80017a8:	0800ffd8 	.word	0x0800ffd8
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80017bc:	4b33      	ldr	r3, [pc, #204]	@ (800188c <HAL_InitTick+0xdc>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e05c      	b.n	8001882 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80017c8:	4b31      	ldr	r3, [pc, #196]	@ (8001890 <HAL_InitTick+0xe0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d10c      	bne.n	80017ee <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80017d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001894 <HAL_InitTick+0xe4>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b2c      	ldr	r3, [pc, #176]	@ (800188c <HAL_InitTick+0xdc>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	e037      	b.n	800185e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80017ee:	f001 fe05 	bl	80033fc <HAL_SYSTICK_GetCLKSourceConfig>
 80017f2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d023      	beq.n	8001842 <HAL_InitTick+0x92>
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d82d      	bhi.n	800185c <HAL_InitTick+0xac>
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_InitTick+0x5e>
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d00d      	beq.n	8001828 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800180c:	e026      	b.n	800185c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800180e:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <HAL_InitTick+0xe4>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <HAL_InitTick+0xdc>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800181c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001820:	fbb2 f3f3 	udiv	r3, r2, r3
 8001824:	60fb      	str	r3, [r7, #12]
        break;
 8001826:	e01a      	b.n	800185e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001828:	4b18      	ldr	r3, [pc, #96]	@ (800188c <HAL_InitTick+0xdc>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001832:	fbb3 f3f2 	udiv	r3, r3, r2
 8001836:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	60fb      	str	r3, [r7, #12]
        break;
 8001840:	e00d      	b.n	800185e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001842:	4b12      	ldr	r3, [pc, #72]	@ (800188c <HAL_InitTick+0xdc>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800184c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001850:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001854:	fbb2 f3f3 	udiv	r3, r2, r3
 8001858:	60fb      	str	r3, [r7, #12]
        break;
 800185a:	e000      	b.n	800185e <HAL_InitTick+0xae>
        break;
 800185c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f001 fd52 	bl	8003308 <HAL_SYSTICK_Config>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e009      	b.n	8001882 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186e:	2200      	movs	r2, #0
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001876:	f001 fd11 	bl	800329c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800187a:	4a07      	ldr	r2, [pc, #28]	@ (8001898 <HAL_InitTick+0xe8>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	2000000c 	.word	0x2000000c
 8001890:	e000e010 	.word	0xe000e010
 8001894:	20000004 	.word	0x20000004
 8001898:	20000008 	.word	0x20000008

0800189c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	2000000c 	.word	0x2000000c
 80018c0:	20000a04 	.word	0x20000a04

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000a04 	.word	0x20000a04

080018dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff ffee 	bl	80018c4 <HAL_GetTick>
 80018e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018f4:	d005      	beq.n	8001902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <HAL_Delay+0x44>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001902:	bf00      	nop
 8001904:	f7ff ffde 	bl	80018c4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	d8f7      	bhi.n	8001904 <HAL_Delay+0x28>
  {
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2000000c 	.word	0x2000000c

08001924 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	609a      	str	r2, [r3, #8]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	609a      	str	r2, [r3, #8]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <LL_ADC_SetResolution+0x3c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d104      	bne.n	80019ac <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f023 020c 	bic.w	r2, r3, #12
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	60da      	str	r2, [r3, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	46021000 	.word	0x46021000

080019cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3360      	adds	r3, #96	@ 0x60
 80019de:	461a      	mov	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	430b      	orrs	r3, r1
 80019fc:	431a      	orrs	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8001a02:	bf00      	nop
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b085      	sub	sp, #20
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3360      	adds	r3, #96	@ 0x60
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b087      	sub	sp, #28
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	3360      	adds	r3, #96	@ 0x60
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	601a      	str	r2, [r3, #0]
}
 8001a64:	bf00      	nop
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3360      	adds	r3, #96	@ 0x60
 8001a80:	461a      	mov	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	601a      	str	r2, [r3, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b087      	sub	sp, #28
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3360      	adds	r3, #96	@ 0x60
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	601a      	str	r2, [r3, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aea:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001aee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	2a00      	cmp	r2, #0
 8001b06:	d002      	beq.n	8001b0e <LL_ADC_SetGainCompensation+0x32>
 8001b08:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001b0c:	e000      	b.n	8001b10 <LL_ADC_SetGainCompensation+0x34>
 8001b0e:	2200      	movs	r2, #0
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	695a      	ldr	r2, [r3, #20]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2107      	movs	r1, #7
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	401a      	ands	r2, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	@ 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8001c1c <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d020      	beq.n	8001bb6 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	3330      	adds	r3, #48	@ 0x30
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	4413      	add	r3, r2
 8001b86:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	211f      	movs	r1, #31
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	0e9b      	lsrs	r3, r3, #26
 8001ba0:	f003 011f 	and.w	r1, r3, #31
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8001bb4:	e02b      	b.n	8001c0e <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	210f      	movs	r1, #15
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	401a      	ands	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d104      	bne.n	8001bde <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	0e9b      	lsrs	r3, r3, #26
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	e010      	b.n	8001c00 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	613b      	str	r3, [r7, #16]
  return result;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	e003      	b.n	8001c00 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	f001 011f 	and.w	r1, r1, #31
 8001c06:	408b      	lsls	r3, r1
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c0e:	bf00      	nop
 8001c10:	3724      	adds	r7, #36	@ 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	46021000 	.word	0x46021000

08001c20 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d107      	bne.n	8001c44 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	0e9b      	lsrs	r3, r3, #26
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	e015      	b.n	8001c70 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	60fb      	str	r3, [r7, #12]
  return result;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	e003      	b.n	8001c66 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c7a:	bf00      	nop
 8001c7c:	371c      	adds	r7, #28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	0e9b      	lsrs	r3, r3, #26
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b08b      	sub	sp, #44	@ 0x2c
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4a2d      	ldr	r2, [pc, #180]	@ (8001d7c <LL_ADC_SetChannelSamplingTime+0xc4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d042      	beq.n	8001d52 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d104      	bne.n	8001ce0 <LL_ADC_SetChannelSamplingTime+0x28>
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	0e9b      	lsrs	r3, r3, #26
 8001cda:	f003 021f 	and.w	r2, r3, #31
 8001cde:	e011      	b.n	8001d04 <LL_ADC_SetChannelSamplingTime+0x4c>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	617b      	str	r3, [r7, #20]
  return result;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8001cf6:	2320      	movs	r3, #32
 8001cf8:	e003      	b.n	8001d02 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	0e5b      	lsrs	r3, r3, #25
 8001d08:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	1ad2      	subs	r2, r2, r3
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3314      	adds	r3, #20
 8001d22:	461a      	mov	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	0e5b      	lsrs	r3, r3, #25
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	4413      	add	r3, r2
 8001d30:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	2107      	movs	r1, #7
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	401a      	ands	r2, r3
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001d50:	e00e      	b.n	8001d70 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	0219      	lsls	r1, r3, #8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	400b      	ands	r3, r1
 8001d66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	615a      	str	r2, [r3, #20]
}
 8001d70:	bf00      	nop
 8001d72:	372c      	adds	r7, #44	@ 0x2c
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	46021000 	.word	0x46021000

08001d80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0318 	and.w	r3, r3, #24
 8001da2:	4908      	ldr	r1, [pc, #32]	@ (8001dc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001da4:	40d9      	lsrs	r1, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	400b      	ands	r3, r1
 8001daa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001dae:	431a      	orrs	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	000fffff 	.word	0x000fffff

08001dc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001dd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6093      	str	r3, [r2, #8]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001dfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e00:	d101      	bne.n	8001e06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e50:	d101      	bne.n	8001e56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <LL_ADC_IsEnabled+0x18>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <LL_ADC_IsEnabled+0x1a>
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d101      	bne.n	8001ea2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d101      	bne.n	8001ec8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b08b      	sub	sp, #44	@ 0x2c
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e2ce      	b.n	8002496 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a95      	ldr	r2, [pc, #596]	@ (800215c <HAL_ADC_Init+0x284>)
 8001f06:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff f8db 	bl	80010cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff5f 	bl	8001dec <LL_ADC_IsDeepPowerDownEnabled>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d004      	beq.n	8001f3e <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff45 	bl	8001dc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ff7a 	bl	8001e3c <LL_ADC_IsInternalRegulatorEnabled>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d115      	bne.n	8001f7a <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ff5e 	bl	8001e14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f58:	4b81      	ldr	r3, [pc, #516]	@ (8002160 <HAL_ADC_Init+0x288>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	4a81      	ldr	r2, [pc, #516]	@ (8002164 <HAL_ADC_Init+0x28c>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	3301      	adds	r3, #1
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f6c:	e002      	b.n	8001f74 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f9      	bne.n	8001f6e <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff5c 	bl	8001e3c <LL_ADC_IsInternalRegulatorEnabled>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10e      	bne.n	8001fa8 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f8e:	f043 0210 	orr.w	r2, r3, #16
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff6c 	bl	8001e8a <LL_ADC_REG_IsConversionOngoing>
 8001fb2:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f040 825f 	bne.w	8002480 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f040 825b 	bne.w	8002480 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001fce:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001fd2:	f043 0202 	orr.w	r2, r3, #2
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff40 	bl	8001e64 <LL_ADC_IsEnabled>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d14f      	bne.n	800208a <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a5b      	ldr	r2, [pc, #364]	@ (800215c <HAL_ADC_Init+0x284>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d037      	beq.n	8002064 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a5b      	ldr	r2, [pc, #364]	@ (8002168 <HAL_ADC_Init+0x290>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d004      	beq.n	8002008 <HAL_ADC_Init+0x130>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a5a      	ldr	r2, [pc, #360]	@ (800216c <HAL_ADC_Init+0x294>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d10e      	bne.n	8002026 <HAL_ADC_Init+0x14e>
 8002008:	4857      	ldr	r0, [pc, #348]	@ (8002168 <HAL_ADC_Init+0x290>)
 800200a:	f7ff ff2b 	bl	8001e64 <LL_ADC_IsEnabled>
 800200e:	4604      	mov	r4, r0
 8002010:	4856      	ldr	r0, [pc, #344]	@ (800216c <HAL_ADC_Init+0x294>)
 8002012:	f7ff ff27 	bl	8001e64 <LL_ADC_IsEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	4323      	orrs	r3, r4
 800201a:	2b00      	cmp	r3, #0
 800201c:	bf0c      	ite	eq
 800201e:	2301      	moveq	r3, #1
 8002020:	2300      	movne	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	e008      	b.n	8002038 <HAL_ADC_Init+0x160>
 8002026:	484d      	ldr	r0, [pc, #308]	@ (800215c <HAL_ADC_Init+0x284>)
 8002028:	f7ff ff1c 	bl	8001e64 <LL_ADC_IsEnabled>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	bf0c      	ite	eq
 8002032:	2301      	moveq	r3, #1
 8002034:	2300      	movne	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d026      	beq.n	800208a <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a49      	ldr	r2, [pc, #292]	@ (8002168 <HAL_ADC_Init+0x290>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d004      	beq.n	8002050 <HAL_ADC_Init+0x178>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a48      	ldr	r2, [pc, #288]	@ (800216c <HAL_ADC_Init+0x294>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d101      	bne.n	8002054 <HAL_ADC_Init+0x17c>
 8002050:	4a47      	ldr	r2, [pc, #284]	@ (8002170 <HAL_ADC_Init+0x298>)
 8002052:	e000      	b.n	8002056 <HAL_ADC_Init+0x17e>
 8002054:	4a47      	ldr	r2, [pc, #284]	@ (8002174 <HAL_ADC_Init+0x29c>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4619      	mov	r1, r3
 800205c:	4610      	mov	r0, r2
 800205e:	f7ff fc61 	bl	8001924 <LL_ADC_SetCommonClock>
 8002062:	e012      	b.n	800208a <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4619      	mov	r1, r3
 800206e:	4610      	mov	r0, r2
 8002070:	f7ff fc8c 	bl	800198c <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8002074:	4b3f      	ldr	r3, [pc, #252]	@ (8002174 <HAL_ADC_Init+0x29c>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002084:	493b      	ldr	r1, [pc, #236]	@ (8002174 <HAL_ADC_Init+0x29c>)
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a33      	ldr	r2, [pc, #204]	@ (800215c <HAL_ADC_Init+0x284>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d010      	beq.n	80020b6 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800209a:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80020a0:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80020a6:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80020ae:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80020b0:	4313      	orrs	r3, r2
 80020b2:	623b      	str	r3, [r7, #32]
 80020b4:	e035      	b.n	8002122 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7f1b      	ldrb	r3, [r3, #28]
 80020ba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020c2:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020c4:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80020ca:	2a00      	cmp	r2, #0
 80020cc:	d002      	beq.n	80020d4 <HAL_ADC_Init+0x1fc>
 80020ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020d2:	e000      	b.n	80020d6 <HAL_ADC_Init+0x1fe>
 80020d4:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80020d6:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80020dc:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	da04      	bge.n	80020f0 <HAL_ADC_Init+0x218>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020ee:	e001      	b.n	80020f4 <HAL_ADC_Init+0x21c>
 80020f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80020f4:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	491b      	ldr	r1, [pc, #108]	@ (8002168 <HAL_ADC_Init+0x290>)
 80020fc:	428b      	cmp	r3, r1
 80020fe:	d004      	beq.n	800210a <HAL_ADC_Init+0x232>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4919      	ldr	r1, [pc, #100]	@ (800216c <HAL_ADC_Init+0x294>)
 8002106:	428b      	cmp	r3, r1
 8002108:	d103      	bne.n	8002112 <HAL_ADC_Init+0x23a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002110:	e003      	b.n	800211a <HAL_ADC_Init+0x242>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002118:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800211a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800211c:	6a3a      	ldr	r2, [r7, #32]
 800211e:	4313      	orrs	r3, r2
 8002120:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002128:	2b01      	cmp	r3, #1
 800212a:	d131      	bne.n	8002190 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <HAL_ADC_Init+0x284>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d007      	beq.n	8002146 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	3b01      	subs	r3, #1
 800213c:	045b      	lsls	r3, r3, #17
 800213e:	6a3a      	ldr	r2, [r7, #32]
 8002140:	4313      	orrs	r3, r2
 8002142:	623b      	str	r3, [r7, #32]
 8002144:	e024      	b.n	8002190 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800214c:	2b00      	cmp	r3, #0
 800214e:	d113      	bne.n	8002178 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002156:	623b      	str	r3, [r7, #32]
 8002158:	e01a      	b.n	8002190 <HAL_ADC_Init+0x2b8>
 800215a:	bf00      	nop
 800215c:	46021000 	.word	0x46021000
 8002160:	20000004 	.word	0x20000004
 8002164:	053e2d63 	.word	0x053e2d63
 8002168:	42028000 	.word	0x42028000
 800216c:	42028100 	.word	0x42028100
 8002170:	42028300 	.word	0x42028300
 8002174:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800217c:	f043 0220 	orr.w	r2, r3, #32
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002188:	f043 0201 	orr.w	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a75      	ldr	r2, [pc, #468]	@ (800236c <HAL_ADC_Init+0x494>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d018      	beq.n	80021cc <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ae:	4313      	orrs	r3, r2
 80021b0:	6a3a      	ldr	r2, [r7, #32]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002370 <HAL_ADC_Init+0x498>)
 80021be:	4013      	ands	r3, r2
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	6a39      	ldr	r1, [r7, #32]
 80021c6:	430b      	orrs	r3, r1
 80021c8:	60d3      	str	r3, [r2, #12]
 80021ca:	e031      	b.n	8002230 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d009      	beq.n	80021e8 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d8:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e0:	4313      	orrs	r3, r2
 80021e2:	6a3a      	ldr	r2, [r7, #32]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	4b61      	ldr	r3, [pc, #388]	@ (8002374 <HAL_ADC_Init+0x49c>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	6a39      	ldr	r1, [r7, #32]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1a      	ldr	r2, [r3, #32]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a4d      	ldr	r2, [pc, #308]	@ (800236c <HAL_ADC_Init+0x494>)
 8002236:	4293      	cmp	r3, r2
 8002238:	f000 80a4 	beq.w	8002384 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fe22 	bl	8001e8a <LL_ADC_REG_IsConversionOngoing>
 8002246:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fe2f 	bl	8001eb0 <LL_ADC_INJ_IsConversionOngoing>
 8002252:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d166      	bne.n	8002328 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d163      	bne.n	8002328 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7f1b      	ldrb	r3, [r3, #28]
 8002264:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4943      	ldr	r1, [pc, #268]	@ (8002378 <HAL_ADC_Init+0x4a0>)
 800226c:	428b      	cmp	r3, r1
 800226e:	d004      	beq.n	800227a <HAL_ADC_Init+0x3a2>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4941      	ldr	r1, [pc, #260]	@ (800237c <HAL_ADC_Init+0x4a4>)
 8002276:	428b      	cmp	r3, r1
 8002278:	d102      	bne.n	8002280 <HAL_ADC_Init+0x3a8>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227e:	e002      	b.n	8002286 <HAL_ADC_Init+0x3ae>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002284:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002286:	4313      	orrs	r3, r2
 8002288:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002294:	f023 0303 	bic.w	r3, r3, #3
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	6a39      	ldr	r1, [r7, #32]
 800229e:	430b      	orrs	r3, r1
 80022a0:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d007      	beq.n	80022ba <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	4619      	mov	r1, r3
 80022b4:	4610      	mov	r0, r2
 80022b6:	f7ff fc11 	bl	8001adc <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d11e      	bne.n	8002302 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c8:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002380 <HAL_ADC_Init+0x4a8>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80022d8:	0411      	lsls	r1, r2, #16
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80022de:	4311      	orrs	r1, r2
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80022e4:	4311      	orrs	r1, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80022ea:	4311      	orrs	r1, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80022f0:	0892      	lsrs	r2, r2, #2
 80022f2:	430a      	orrs	r2, r1
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	611a      	str	r2, [r3, #16]
 8002300:	e007      	b.n	8002312 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0201 	bic.w	r2, r2, #1
 8002310:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d10c      	bne.n	800234a <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	f023 010f 	bic.w	r1, r3, #15
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233e:	1e5a      	subs	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	631a      	str	r2, [r3, #48]	@ 0x30
 8002348:	e007      	b.n	800235a <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 020f 	bic.w	r2, r2, #15
 8002358:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800235e:	f023 0303 	bic.w	r3, r3, #3
 8002362:	f043 0201 	orr.w	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800236a:	e092      	b.n	8002492 <HAL_ADC_Init+0x5ba>
 800236c:	46021000 	.word	0x46021000
 8002370:	fff0c013 	.word	0xfff0c013
 8002374:	ffde800d 	.word	0xffde800d
 8002378:	42028000 	.word	0x42028000
 800237c:	42028100 	.word	0x42028100
 8002380:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800238a:	2b01      	cmp	r3, #1
 800238c:	d111      	bne.n	80023b2 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002396:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 800239c:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80023a2:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	4b39      	ldr	r3, [pc, #228]	@ (80024a0 <HAL_ADC_Init+0x5c8>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	69f9      	ldr	r1, [r7, #28]
 80023c2:	430b      	orrs	r3, r1
 80023c4:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ce:	461a      	mov	r2, r3
 80023d0:	2100      	movs	r1, #0
 80023d2:	f7ff fba6 	bl	8001b22 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023de:	461a      	mov	r2, r3
 80023e0:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80023e4:	f7ff fb9d 	bl	8001b22 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d108      	bne.n	8002402 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f062 020f 	orn	r2, r2, #15
 80023fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8002400:	e018      	b.n	8002434 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800240a:	d113      	bne.n	8002434 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	3b01      	subs	r3, #1
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	f003 031c 	and.w	r3, r3, #28
 800241e:	f06f 020f 	mvn.w	r2, #15
 8002422:	fa02 f103 	lsl.w	r1, r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	4b1a      	ldr	r3, [pc, #104]	@ (80024a4 <HAL_ADC_Init+0x5cc>)
 800243c:	4013      	ands	r3, r2
 800243e:	6a3a      	ldr	r2, [r7, #32]
 8002440:	429a      	cmp	r2, r3
 8002442:	d10b      	bne.n	800245c <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800244e:	f023 0303 	bic.w	r3, r3, #3
 8002452:	f043 0201 	orr.w	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800245a:	e01a      	b.n	8002492 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002460:	f023 0312 	bic.w	r3, r3, #18
 8002464:	f043 0210 	orr.w	r2, r3, #16
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002470:	f043 0201 	orr.w	r2, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800247e:	e008      	b.n	8002492 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002484:	f043 0210 	orr.w	r2, r3, #16
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002492:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002496:	4618      	mov	r0, r3
 8002498:	372c      	adds	r7, #44	@ 0x2c
 800249a:	46bd      	mov	sp, r7
 800249c:	bd90      	pop	{r4, r7, pc}
 800249e:	bf00      	nop
 80024a0:	f7fffc02 	.word	0xf7fffc02
 80024a4:	833ffff3 	.word	0x833ffff3

080024a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b0b7      	sub	sp, #220	@ 0xdc
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4aa8      	ldr	r2, [pc, #672]	@ (8002764 <HAL_ADC_ConfigChannel+0x2bc>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d103      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d102      	bne.n	80024de <HAL_ADC_ConfigChannel+0x36>
 80024d8:	2302      	movs	r3, #2
 80024da:	f000 bdfe 	b.w	80030da <HAL_ADC_ConfigChannel+0xc32>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fccd 	bl	8001e8a <LL_ADC_REG_IsConversionOngoing>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 85c1 	bne.w	800307a <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a99      	ldr	r2, [pc, #612]	@ (8002764 <HAL_ADC_ConfigChannel+0x2bc>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	f000 8409 	beq.w	8002d16 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d108      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x7a>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0e9b      	lsrs	r3, r3, #26
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	2201      	movs	r2, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	e01d      	b.n	800255e <HAL_ADC_ConfigChannel+0xb6>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002536:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800253a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800253e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002546:	2320      	movs	r3, #32
 8002548:	e004      	b.n	8002554 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 800254a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	2201      	movs	r2, #1
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	69d1      	ldr	r1, [r2, #28]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	430b      	orrs	r3, r1
 800256a:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	f7ff faf1 	bl	8001b60 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fc81 	bl	8001e8a <LL_ADC_REG_IsConversionOngoing>
 8002588:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fc8d 	bl	8001eb0 <LL_ADC_INJ_IsConversionOngoing>
 8002596:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800259a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f040 81df 	bne.w	8002962 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f040 81da 	bne.w	8002962 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	461a      	mov	r2, r3
 80025bc:	f7ff fb7c 	bl	8001cb8 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d046      	beq.n	8002670 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6919      	ldr	r1, [r3, #16]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025f2:	f7ff f9eb 	bl	80019cc <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6919      	ldr	r1, [r3, #16]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	461a      	mov	r2, r3
 8002604:	f7ff fa19 	bl	8001a3a <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	7e9b      	ldrb	r3, [r3, #26]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d11e      	bne.n	800264e <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x17e>
 8002620:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002624:	e000      	b.n	8002628 <HAL_ADC_ConfigChannel+0x180>
 8002626:	2300      	movs	r3, #0
 8002628:	461a      	mov	r2, r3
 800262a:	f7ff fa3c 	bl	8001aa6 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800263a:	2b01      	cmp	r3, #1
 800263c:	d102      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x19c>
 800263e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002642:	e000      	b.n	8002646 <HAL_ADC_ConfigChannel+0x19e>
 8002644:	2300      	movs	r3, #0
 8002646:	461a      	mov	r2, r3
 8002648:	f7ff fa12 	bl	8001a70 <LL_ADC_SetOffsetSignedSaturation>
 800264c:	e189      	b.n	8002962 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2200      	movs	r2, #0
 8002658:	4619      	mov	r1, r3
 800265a:	f7ff fa24 	bl	8001aa6 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2200      	movs	r2, #0
 8002668:	4619      	mov	r1, r3
 800266a:	f7ff fa01 	bl	8001a70 <LL_ADC_SetOffsetSignedSaturation>
 800266e:	e178      	b.n	8002962 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff f9c9 	bl	8001a0e <LL_ADC_GetOffsetChannel>
 800267c:	4603      	mov	r3, r0
 800267e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10a      	bne.n	800269c <HAL_ADC_ConfigChannel+0x1f4>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff f9be 	bl	8001a0e <LL_ADC_GetOffsetChannel>
 8002692:	4603      	mov	r3, r0
 8002694:	0e9b      	lsrs	r3, r3, #26
 8002696:	f003 021f 	and.w	r2, r3, #31
 800269a:	e01e      	b.n	80026da <HAL_ADC_ConfigChannel+0x232>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff f9b3 	bl	8001a0e <LL_ADC_GetOffsetChannel>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80026ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80026c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80026ca:	2320      	movs	r3, #32
 80026cc:	e004      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80026ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d105      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x24a>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	0e9b      	lsrs	r3, r3, #26
 80026ec:	f003 031f 	and.w	r3, r3, #31
 80026f0:	e018      	b.n	8002724 <HAL_ADC_ConfigChannel+0x27c>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002706:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800270a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800270e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8002716:	2320      	movs	r3, #32
 8002718:	e004      	b.n	8002724 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 800271a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002724:	429a      	cmp	r2, r3
 8002726:	d107      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	2300      	movs	r3, #0
 8002732:	2100      	movs	r1, #0
 8002734:	f7ff f94a 	bl	80019cc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2101      	movs	r1, #1
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff f965 	bl	8001a0e <LL_ADC_GetOffsetChannel>
 8002744:	4603      	mov	r3, r0
 8002746:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10c      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x2c0>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2101      	movs	r1, #1
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff f95a 	bl	8001a0e <LL_ADC_GetOffsetChannel>
 800275a:	4603      	mov	r3, r0
 800275c:	0e9b      	lsrs	r3, r3, #26
 800275e:	f003 021f 	and.w	r2, r3, #31
 8002762:	e020      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x2fe>
 8002764:	46021000 	.word	0x46021000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2101      	movs	r1, #1
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff f94d 	bl	8001a0e <LL_ADC_GetOffsetChannel>
 8002774:	4603      	mov	r3, r0
 8002776:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002786:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800278a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800278e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002796:	2320      	movs	r3, #32
 8002798:	e004      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 800279a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800279e:	fab3 f383 	clz	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d105      	bne.n	80027be <HAL_ADC_ConfigChannel+0x316>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	0e9b      	lsrs	r3, r3, #26
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	e018      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x348>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80027d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80027da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80027e2:	2320      	movs	r3, #32
 80027e4:	e004      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80027e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2300      	movs	r3, #0
 80027fe:	2101      	movs	r1, #1
 8002800:	f7ff f8e4 	bl	80019cc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2102      	movs	r1, #2
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff f8ff 	bl	8001a0e <LL_ADC_GetOffsetChannel>
 8002810:	4603      	mov	r3, r0
 8002812:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10a      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x388>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2102      	movs	r1, #2
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff f8f4 	bl	8001a0e <LL_ADC_GetOffsetChannel>
 8002826:	4603      	mov	r3, r0
 8002828:	0e9b      	lsrs	r3, r3, #26
 800282a:	f003 021f 	and.w	r2, r3, #31
 800282e:	e01a      	b.n	8002866 <HAL_ADC_ConfigChannel+0x3be>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2102      	movs	r1, #2
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff f8e9 	bl	8001a0e <LL_ADC_GetOffsetChannel>
 800283c:	4603      	mov	r3, r0
 800283e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002848:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800284a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800284e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002856:	2320      	movs	r3, #32
 8002858:	e004      	b.n	8002864 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 800285a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d105      	bne.n	800287e <HAL_ADC_ConfigChannel+0x3d6>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	0e9b      	lsrs	r3, r3, #26
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	e011      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x3fa>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800288c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800288e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002890:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002896:	2320      	movs	r3, #32
 8002898:	e003      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800289a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800289c:	fab3 f383 	clz	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d107      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	2300      	movs	r3, #0
 80028b0:	2102      	movs	r1, #2
 80028b2:	f7ff f88b 	bl	80019cc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2103      	movs	r1, #3
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff f8a6 	bl	8001a0e <LL_ADC_GetOffsetChannel>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10a      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x43a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2103      	movs	r1, #3
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff f89b 	bl	8001a0e <LL_ADC_GetOffsetChannel>
 80028d8:	4603      	mov	r3, r0
 80028da:	0e9b      	lsrs	r3, r3, #26
 80028dc:	f003 021f 	and.w	r2, r3, #31
 80028e0:	e017      	b.n	8002912 <HAL_ADC_ConfigChannel+0x46a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2103      	movs	r1, #3
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff f890 	bl	8001a0e <LL_ADC_GetOffsetChannel>
 80028ee:	4603      	mov	r3, r0
 80028f0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80028fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80028fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8002904:	2320      	movs	r3, #32
 8002906:	e003      	b.n	8002910 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8002908:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d105      	bne.n	800292a <HAL_ADC_ConfigChannel+0x482>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	0e9b      	lsrs	r3, r3, #26
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	e011      	b.n	800294e <HAL_ADC_ConfigChannel+0x4a6>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800293a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800293c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8002942:	2320      	movs	r3, #32
 8002944:	e003      	b.n	800294e <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8002946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800294e:	429a      	cmp	r2, r3
 8002950:	d107      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	2300      	movs	r3, #0
 800295c:	2103      	movs	r1, #3
 800295e:	f7ff f835 	bl	80019cc <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fa7c 	bl	8001e64 <LL_ADC_IsEnabled>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	f040 83ad 	bne.w	80030ce <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	6819      	ldr	r1, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	461a      	mov	r2, r3
 8002982:	f7ff f9fd 	bl	8001d80 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800298e:	f040 80d6 	bne.w	8002b3e <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10b      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x50e>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	0e9b      	lsrs	r3, r3, #26
 80029a4:	3301      	adds	r3, #1
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	2b09      	cmp	r3, #9
 80029ac:	bf94      	ite	ls
 80029ae:	2301      	movls	r3, #1
 80029b0:	2300      	movhi	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	e019      	b.n	80029ea <HAL_ADC_ConfigChannel+0x542>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80029c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029c6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80029c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80029ce:	2320      	movs	r3, #32
 80029d0:	e003      	b.n	80029da <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80029d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	3301      	adds	r3, #1
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2b09      	cmp	r3, #9
 80029e2:	bf94      	ite	ls
 80029e4:	2301      	movls	r3, #1
 80029e6:	2300      	movhi	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d04d      	beq.n	8002a8a <HAL_ADC_ConfigChannel+0x5e2>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d107      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x562>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	0e9b      	lsrs	r3, r3, #26
 8002a00:	3301      	adds	r3, #1
 8002a02:	069b      	lsls	r3, r3, #26
 8002a04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a08:	e015      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x58e>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a1a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002a22:	2320      	movs	r3, #32
 8002a24:	e003      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002a26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	069b      	lsls	r3, r3, #26
 8002a32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x5ae>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	0e9b      	lsrs	r3, r3, #26
 8002a48:	3301      	adds	r3, #1
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	2101      	movs	r1, #1
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	e017      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x5de>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8002a6e:	2320      	movs	r3, #32
 8002a70:	e003      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 8002a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	2101      	movs	r1, #1
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	4313      	orrs	r3, r2
 8002a88:	e04e      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x680>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d107      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x5fe>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	0e9b      	lsrs	r3, r3, #26
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	069b      	lsls	r3, r3, #26
 8002aa0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002aa4:	e015      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x62a>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	e003      	b.n	8002aca <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8002ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	3301      	adds	r3, #1
 8002acc:	069b      	lsls	r3, r3, #26
 8002ace:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x64a>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	0e9b      	lsrs	r3, r3, #26
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	2101      	movs	r1, #1
 8002aec:	fa01 f303 	lsl.w	r3, r1, r3
 8002af0:	e017      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x67a>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	fa93 f3a3 	rbit	r3, r3
 8002afe:	61bb      	str	r3, [r7, #24]
  return result;
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	e003      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	3301      	adds	r3, #1
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	461a      	mov	r2, r3
 8002b36:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002b3a:	f7ff f8bd 	bl	8001cb8 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f280 82c3 	bge.w	80030ce <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a92      	ldr	r2, [pc, #584]	@ (8002d98 <HAL_ADC_ConfigChannel+0x8f0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d004      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x6b4>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a91      	ldr	r2, [pc, #580]	@ (8002d9c <HAL_ADC_ConfigChannel+0x8f4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x6b8>
 8002b5c:	4b90      	ldr	r3, [pc, #576]	@ (8002da0 <HAL_ADC_ConfigChannel+0x8f8>)
 8002b5e:	e000      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x6ba>
 8002b60:	4b90      	ldr	r3, [pc, #576]	@ (8002da4 <HAL_ADC_ConfigChannel+0x8fc>)
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe ff04 	bl	8001970 <LL_ADC_GetCommonPathInternalCh>
 8002b68:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a89      	ldr	r2, [pc, #548]	@ (8002d98 <HAL_ADC_ConfigChannel+0x8f0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d004      	beq.n	8002b80 <HAL_ADC_ConfigChannel+0x6d8>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a88      	ldr	r2, [pc, #544]	@ (8002d9c <HAL_ADC_ConfigChannel+0x8f4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d10e      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x6f6>
 8002b80:	4885      	ldr	r0, [pc, #532]	@ (8002d98 <HAL_ADC_ConfigChannel+0x8f0>)
 8002b82:	f7ff f96f 	bl	8001e64 <LL_ADC_IsEnabled>
 8002b86:	4604      	mov	r4, r0
 8002b88:	4884      	ldr	r0, [pc, #528]	@ (8002d9c <HAL_ADC_ConfigChannel+0x8f4>)
 8002b8a:	f7ff f96b 	bl	8001e64 <LL_ADC_IsEnabled>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4323      	orrs	r3, r4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2300      	movne	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	e008      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x708>
 8002b9e:	4882      	ldr	r0, [pc, #520]	@ (8002da8 <HAL_ADC_ConfigChannel+0x900>)
 8002ba0:	f7ff f960 	bl	8001e64 <LL_ADC_IsEnabled>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bf0c      	ite	eq
 8002baa:	2301      	moveq	r3, #1
 8002bac:	2300      	movne	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80a6 	beq.w	8002d02 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7c      	ldr	r2, [pc, #496]	@ (8002dac <HAL_ADC_ConfigChannel+0x904>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d13c      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002bc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d136      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a71      	ldr	r2, [pc, #452]	@ (8002d98 <HAL_ADC_ConfigChannel+0x8f0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00a      	beq.n	8002bec <HAL_ADC_ConfigChannel+0x744>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a70      	ldr	r2, [pc, #448]	@ (8002d9c <HAL_ADC_ConfigChannel+0x8f4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d005      	beq.n	8002bec <HAL_ADC_ConfigChannel+0x744>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a70      	ldr	r2, [pc, #448]	@ (8002da8 <HAL_ADC_ConfigChannel+0x900>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	f040 826e 	bne.w	80030c8 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a69      	ldr	r2, [pc, #420]	@ (8002d98 <HAL_ADC_ConfigChannel+0x8f0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d004      	beq.n	8002c00 <HAL_ADC_ConfigChannel+0x758>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a68      	ldr	r2, [pc, #416]	@ (8002d9c <HAL_ADC_ConfigChannel+0x8f4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x75c>
 8002c00:	4a67      	ldr	r2, [pc, #412]	@ (8002da0 <HAL_ADC_ConfigChannel+0x8f8>)
 8002c02:	e000      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x75e>
 8002c04:	4a67      	ldr	r2, [pc, #412]	@ (8002da4 <HAL_ADC_ConfigChannel+0x8fc>)
 8002c06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4610      	mov	r0, r2
 8002c12:	f7fe fe9a 	bl	800194a <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c16:	4b66      	ldr	r3, [pc, #408]	@ (8002db0 <HAL_ADC_ConfigChannel+0x908>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	099b      	lsrs	r3, r3, #6
 8002c1c:	4a65      	ldr	r2, [pc, #404]	@ (8002db4 <HAL_ADC_ConfigChannel+0x90c>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	099b      	lsrs	r3, r3, #6
 8002c24:	3301      	adds	r3, #1
 8002c26:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8002c28:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8002c2a:	e002      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f9      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c38:	e246      	b.n	80030c8 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a5e      	ldr	r2, [pc, #376]	@ (8002db8 <HAL_ADC_ConfigChannel+0x910>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d12b      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d125      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a50      	ldr	r2, [pc, #320]	@ (8002d98 <HAL_ADC_ConfigChannel+0x8f0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00a      	beq.n	8002c70 <HAL_ADC_ConfigChannel+0x7c8>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a4f      	ldr	r2, [pc, #316]	@ (8002d9c <HAL_ADC_ConfigChannel+0x8f4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d005      	beq.n	8002c70 <HAL_ADC_ConfigChannel+0x7c8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a4f      	ldr	r2, [pc, #316]	@ (8002da8 <HAL_ADC_ConfigChannel+0x900>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	f040 822e 	bne.w	80030cc <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a48      	ldr	r2, [pc, #288]	@ (8002d98 <HAL_ADC_ConfigChannel+0x8f0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d004      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x7dc>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a47      	ldr	r2, [pc, #284]	@ (8002d9c <HAL_ADC_ConfigChannel+0x8f4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d101      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x7e0>
 8002c84:	4a46      	ldr	r2, [pc, #280]	@ (8002da0 <HAL_ADC_ConfigChannel+0x8f8>)
 8002c86:	e000      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x7e2>
 8002c88:	4a46      	ldr	r2, [pc, #280]	@ (8002da4 <HAL_ADC_ConfigChannel+0x8fc>)
 8002c8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c92:	4619      	mov	r1, r3
 8002c94:	4610      	mov	r0, r2
 8002c96:	f7fe fe58 	bl	800194a <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c9a:	e217      	b.n	80030cc <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a46      	ldr	r2, [pc, #280]	@ (8002dbc <HAL_ADC_ConfigChannel+0x914>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	f040 8213 	bne.w	80030ce <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ca8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002cac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f040 820c 	bne.w	80030ce <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a37      	ldr	r2, [pc, #220]	@ (8002d98 <HAL_ADC_ConfigChannel+0x8f0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_ADC_ConfigChannel+0x82e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a35      	ldr	r2, [pc, #212]	@ (8002d9c <HAL_ADC_ConfigChannel+0x8f4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d005      	beq.n	8002cd6 <HAL_ADC_ConfigChannel+0x82e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a36      	ldr	r2, [pc, #216]	@ (8002da8 <HAL_ADC_ConfigChannel+0x900>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	f040 81fc 	bne.w	80030ce <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a2f      	ldr	r2, [pc, #188]	@ (8002d98 <HAL_ADC_ConfigChannel+0x8f0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d004      	beq.n	8002cea <HAL_ADC_ConfigChannel+0x842>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d9c <HAL_ADC_ConfigChannel+0x8f4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x846>
 8002cea:	4a2d      	ldr	r2, [pc, #180]	@ (8002da0 <HAL_ADC_ConfigChannel+0x8f8>)
 8002cec:	e000      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x848>
 8002cee:	4a2d      	ldr	r2, [pc, #180]	@ (8002da4 <HAL_ADC_ConfigChannel+0x8fc>)
 8002cf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002cf4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f7fe fe25 	bl	800194a <LL_ADC_SetCommonPathInternalCh>
 8002d00:	e1e5      	b.n	80030ce <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d06:	f043 0220 	orr.w	r2, r3, #32
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002d14:	e1db      	b.n	80030ce <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	f000 811b 	beq.w	8002f5e <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d30:	d004      	beq.n	8002d3c <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002d36:	4a22      	ldr	r2, [pc, #136]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x918>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d107      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fe ff6b 	bl	8001c20 <LL_ADC_REG_SetSequencerChAdd>
 8002d4a:	e059      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	210f      	movs	r1, #15
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	401a      	ands	r2, r3
 8002d64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d68:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x8d4>
 8002d70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	e027      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x924>
 8002d7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d80:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	60fb      	str	r3, [r7, #12]
  return result;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d117      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8002d94:	2320      	movs	r3, #32
 8002d96:	e019      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x924>
 8002d98:	42028000 	.word	0x42028000
 8002d9c:	42028100 	.word	0x42028100
 8002da0:	42028300 	.word	0x42028300
 8002da4:	46021300 	.word	0x46021300
 8002da8:	46021000 	.word	0x46021000
 8002dac:	ce080000 	.word	0xce080000
 8002db0:	20000004 	.word	0x20000004
 8002db4:	053e2d63 	.word	0x053e2d63
 8002db8:	ca040000 	.word	0xca040000
 8002dbc:	80000001 	.word	0x80000001
 8002dc0:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	6839      	ldr	r1, [r7, #0]
 8002dce:	6849      	ldr	r1, [r1, #4]
 8002dd0:	f001 011f 	and.w	r1, r1, #31
 8002dd4:	408b      	lsls	r3, r1
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d808      	bhi.n	8002e00 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f7fe feb0 	bl	8001b60 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002e0e:	f7fe ff53 	bl	8001cb8 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f280 8159 	bge.w	80030ce <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a9b      	ldr	r2, [pc, #620]	@ (8003090 <HAL_ADC_ConfigChannel+0xbe8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d004      	beq.n	8002e30 <HAL_ADC_ConfigChannel+0x988>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a9a      	ldr	r2, [pc, #616]	@ (8003094 <HAL_ADC_ConfigChannel+0xbec>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x98c>
 8002e30:	4b99      	ldr	r3, [pc, #612]	@ (8003098 <HAL_ADC_ConfigChannel+0xbf0>)
 8002e32:	e000      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x98e>
 8002e34:	4b99      	ldr	r3, [pc, #612]	@ (800309c <HAL_ADC_ConfigChannel+0xbf4>)
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe fd9a 	bl	8001970 <LL_ADC_GetCommonPathInternalCh>
 8002e3c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a96      	ldr	r2, [pc, #600]	@ (80030a0 <HAL_ADC_ConfigChannel+0xbf8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d12b      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d125      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a8d      	ldr	r2, [pc, #564]	@ (8003090 <HAL_ADC_ConfigChannel+0xbe8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d004      	beq.n	8002e6a <HAL_ADC_ConfigChannel+0x9c2>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a8b      	ldr	r2, [pc, #556]	@ (8003094 <HAL_ADC_ConfigChannel+0xbec>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x9c6>
 8002e6a:	4a8b      	ldr	r2, [pc, #556]	@ (8003098 <HAL_ADC_ConfigChannel+0xbf0>)
 8002e6c:	e000      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x9c8>
 8002e6e:	4a8b      	ldr	r2, [pc, #556]	@ (800309c <HAL_ADC_ConfigChannel+0xbf4>)
 8002e70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f7fe fd65 	bl	800194a <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002e80:	4b88      	ldr	r3, [pc, #544]	@ (80030a4 <HAL_ADC_ConfigChannel+0xbfc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	4a88      	ldr	r2, [pc, #544]	@ (80030a8 <HAL_ADC_ConfigChannel+0xc00>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	099b      	lsrs	r3, r3, #6
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002e92:	e002      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f9      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002ea0:	e045      	b.n	8002f2e <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a81      	ldr	r2, [pc, #516]	@ (80030ac <HAL_ADC_ConfigChannel+0xc04>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d11b      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002eac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002eb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d115      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a74      	ldr	r2, [pc, #464]	@ (8003090 <HAL_ADC_ConfigChannel+0xbe8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_ADC_ConfigChannel+0xa24>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a73      	ldr	r2, [pc, #460]	@ (8003094 <HAL_ADC_ConfigChannel+0xbec>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d101      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0xa28>
 8002ecc:	4a72      	ldr	r2, [pc, #456]	@ (8003098 <HAL_ADC_ConfigChannel+0xbf0>)
 8002ece:	e000      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0xa2a>
 8002ed0:	4a72      	ldr	r2, [pc, #456]	@ (800309c <HAL_ADC_ConfigChannel+0xbf4>)
 8002ed2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ed6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eda:	4619      	mov	r1, r3
 8002edc:	4610      	mov	r0, r2
 8002ede:	f7fe fd34 	bl	800194a <LL_ADC_SetCommonPathInternalCh>
 8002ee2:	e024      	b.n	8002f2e <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a71      	ldr	r2, [pc, #452]	@ (80030b0 <HAL_ADC_ConfigChannel+0xc08>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d11f      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002eee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d115      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a64      	ldr	r2, [pc, #400]	@ (8003090 <HAL_ADC_ConfigChannel+0xbe8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d004      	beq.n	8002f0e <HAL_ADC_ConfigChannel+0xa66>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a62      	ldr	r2, [pc, #392]	@ (8003094 <HAL_ADC_ConfigChannel+0xbec>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0xa6a>
 8002f0e:	4a62      	ldr	r2, [pc, #392]	@ (8003098 <HAL_ADC_ConfigChannel+0xbf0>)
 8002f10:	e000      	b.n	8002f14 <HAL_ADC_ConfigChannel+0xa6c>
 8002f12:	4a62      	ldr	r2, [pc, #392]	@ (800309c <HAL_ADC_ConfigChannel+0xbf4>)
 8002f14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f7fe fd13 	bl	800194a <LL_ADC_SetCommonPathInternalCh>
 8002f24:	e003      	b.n	8002f2e <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a62      	ldr	r2, [pc, #392]	@ (80030b4 <HAL_ADC_ConfigChannel+0xc0c>)
 8002f2c:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a61      	ldr	r2, [pc, #388]	@ (80030b8 <HAL_ADC_ConfigChannel+0xc10>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	f040 80ca 	bne.w	80030ce <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f040 80c3 	bne.w	80030ce <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8002f5c:	e0b7      	b.n	80030ce <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f66:	d004      	beq.n	8002f72 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002f6c:	4a53      	ldr	r2, [pc, #332]	@ (80030bc <HAL_ADC_ConfigChannel+0xc14>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d106      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe fe83 	bl	8001c86 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f280 80a2 	bge.w	80030ce <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a40      	ldr	r2, [pc, #256]	@ (8003090 <HAL_ADC_ConfigChannel+0xbe8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d004      	beq.n	8002f9e <HAL_ADC_ConfigChannel+0xaf6>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a3e      	ldr	r2, [pc, #248]	@ (8003094 <HAL_ADC_ConfigChannel+0xbec>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0xafa>
 8002f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003098 <HAL_ADC_ConfigChannel+0xbf0>)
 8002fa0:	e000      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0xafc>
 8002fa2:	4b3e      	ldr	r3, [pc, #248]	@ (800309c <HAL_ADC_ConfigChannel+0xbf4>)
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe fce3 	bl	8001970 <LL_ADC_GetCommonPathInternalCh>
 8002faa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a43      	ldr	r2, [pc, #268]	@ (80030c0 <HAL_ADC_ConfigChannel+0xc18>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d115      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a34      	ldr	r2, [pc, #208]	@ (8003090 <HAL_ADC_ConfigChannel+0xbe8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_ADC_ConfigChannel+0xb24>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a33      	ldr	r2, [pc, #204]	@ (8003094 <HAL_ADC_ConfigChannel+0xbec>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d101      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0xb28>
 8002fcc:	4a32      	ldr	r2, [pc, #200]	@ (8003098 <HAL_ADC_ConfigChannel+0xbf0>)
 8002fce:	e000      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0xb2a>
 8002fd0:	4a32      	ldr	r2, [pc, #200]	@ (800309c <HAL_ADC_ConfigChannel+0xbf4>)
 8002fd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002fd6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f7fe fcb4 	bl	800194a <LL_ADC_SetCommonPathInternalCh>
 8002fe2:	e034      	b.n	800304e <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a36      	ldr	r2, [pc, #216]	@ (80030c4 <HAL_ADC_ConfigChannel+0xc1c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d115      	bne.n	800301a <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a27      	ldr	r2, [pc, #156]	@ (8003090 <HAL_ADC_ConfigChannel+0xbe8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_ADC_ConfigChannel+0xb5a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a25      	ldr	r2, [pc, #148]	@ (8003094 <HAL_ADC_ConfigChannel+0xbec>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d101      	bne.n	8003006 <HAL_ADC_ConfigChannel+0xb5e>
 8003002:	4a25      	ldr	r2, [pc, #148]	@ (8003098 <HAL_ADC_ConfigChannel+0xbf0>)
 8003004:	e000      	b.n	8003008 <HAL_ADC_ConfigChannel+0xb60>
 8003006:	4a25      	ldr	r2, [pc, #148]	@ (800309c <HAL_ADC_ConfigChannel+0xbf4>)
 8003008:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800300c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003010:	4619      	mov	r1, r3
 8003012:	4610      	mov	r0, r2
 8003014:	f7fe fc99 	bl	800194a <LL_ADC_SetCommonPathInternalCh>
 8003018:	e019      	b.n	800304e <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a24      	ldr	r2, [pc, #144]	@ (80030b0 <HAL_ADC_ConfigChannel+0xc08>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d114      	bne.n	800304e <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a19      	ldr	r2, [pc, #100]	@ (8003090 <HAL_ADC_ConfigChannel+0xbe8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d004      	beq.n	8003038 <HAL_ADC_ConfigChannel+0xb90>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a18      	ldr	r2, [pc, #96]	@ (8003094 <HAL_ADC_ConfigChannel+0xbec>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d101      	bne.n	800303c <HAL_ADC_ConfigChannel+0xb94>
 8003038:	4a17      	ldr	r2, [pc, #92]	@ (8003098 <HAL_ADC_ConfigChannel+0xbf0>)
 800303a:	e000      	b.n	800303e <HAL_ADC_ConfigChannel+0xb96>
 800303c:	4a17      	ldr	r2, [pc, #92]	@ (800309c <HAL_ADC_ConfigChannel+0xbf4>)
 800303e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003042:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003046:	4619      	mov	r1, r3
 8003048:	4610      	mov	r0, r2
 800304a:	f7fe fc7e 	bl	800194a <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a19      	ldr	r2, [pc, #100]	@ (80030b8 <HAL_ADC_ConfigChannel+0xc10>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d13a      	bne.n	80030ce <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003058:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800305c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d134      	bne.n	80030ce <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0201 	orr.w	r2, r2, #1
 8003074:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8003078:	e029      	b.n	80030ce <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800307e:	f043 0220 	orr.w	r2, r3, #32
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800308c:	e01f      	b.n	80030ce <HAL_ADC_ConfigChannel+0xc26>
 800308e:	bf00      	nop
 8003090:	42028000 	.word	0x42028000
 8003094:	42028100 	.word	0x42028100
 8003098:	42028300 	.word	0x42028300
 800309c:	46021300 	.word	0x46021300
 80030a0:	b6002000 	.word	0xb6002000
 80030a4:	20000004 	.word	0x20000004
 80030a8:	053e2d63 	.word	0x053e2d63
 80030ac:	ba004000 	.word	0xba004000
 80030b0:	80000001 	.word	0x80000001
 80030b4:	b2001000 	.word	0xb2001000
 80030b8:	d7200000 	.word	0xd7200000
 80030bc:	80000010 	.word	0x80000010
 80030c0:	ce080000 	.word	0xce080000
 80030c4:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030c8:	bf00      	nop
 80030ca:	e000      	b.n	80030ce <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030cc:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 80030d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80030da:	4618      	mov	r0, r3
 80030dc:	37dc      	adds	r7, #220	@ 0xdc
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd90      	pop	{r4, r7, pc}
 80030e2:	bf00      	nop

080030e4 <__NVIC_SetPriorityGrouping>:
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003100:	4013      	ands	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800310c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003116:	4a04      	ldr	r2, [pc, #16]	@ (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	60d3      	str	r3, [r2, #12]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <__NVIC_GetPriorityGrouping>:
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003130:	4b04      	ldr	r3, [pc, #16]	@ (8003144 <__NVIC_GetPriorityGrouping+0x18>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	0a1b      	lsrs	r3, r3, #8
 8003136:	f003 0307 	and.w	r3, r3, #7
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <__NVIC_EnableIRQ>:
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003156:	2b00      	cmp	r3, #0
 8003158:	db0b      	blt.n	8003172 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	f003 021f 	and.w	r2, r3, #31
 8003160:	4907      	ldr	r1, [pc, #28]	@ (8003180 <__NVIC_EnableIRQ+0x38>)
 8003162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	2001      	movs	r0, #1
 800316a:	fa00 f202 	lsl.w	r2, r0, r2
 800316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000e100 	.word	0xe000e100

08003184 <__NVIC_DisableIRQ>:
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800318e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003192:	2b00      	cmp	r3, #0
 8003194:	db12      	blt.n	80031bc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	f003 021f 	and.w	r2, r3, #31
 800319c:	490a      	ldr	r1, [pc, #40]	@ (80031c8 <__NVIC_DisableIRQ+0x44>)
 800319e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	2001      	movs	r0, #1
 80031a6:	fa00 f202 	lsl.w	r2, r0, r2
 80031aa:	3320      	adds	r3, #32
 80031ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80031b0:	f3bf 8f4f 	dsb	sy
}
 80031b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031b6:	f3bf 8f6f 	isb	sy
}
 80031ba:	bf00      	nop
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000e100 	.word	0xe000e100

080031cc <__NVIC_SetPriority>:
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	6039      	str	r1, [r7, #0]
 80031d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	db0a      	blt.n	80031f6 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	490c      	ldr	r1, [pc, #48]	@ (8003218 <__NVIC_SetPriority+0x4c>)
 80031e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031ea:	0112      	lsls	r2, r2, #4
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	440b      	add	r3, r1
 80031f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80031f4:	e00a      	b.n	800320c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	4908      	ldr	r1, [pc, #32]	@ (800321c <__NVIC_SetPriority+0x50>)
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	3b04      	subs	r3, #4
 8003204:	0112      	lsls	r2, r2, #4
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	440b      	add	r3, r1
 800320a:	761a      	strb	r2, [r3, #24]
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000e100 	.word	0xe000e100
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <NVIC_EncodePriority>:
{
 8003220:	b480      	push	{r7}
 8003222:	b089      	sub	sp, #36	@ 0x24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f1c3 0307 	rsb	r3, r3, #7
 800323a:	2b04      	cmp	r3, #4
 800323c:	bf28      	it	cs
 800323e:	2304      	movcs	r3, #4
 8003240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3304      	adds	r3, #4
 8003246:	2b06      	cmp	r3, #6
 8003248:	d902      	bls.n	8003250 <NVIC_EncodePriority+0x30>
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3b03      	subs	r3, #3
 800324e:	e000      	b.n	8003252 <NVIC_EncodePriority+0x32>
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43da      	mvns	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	401a      	ands	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003268:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	43d9      	mvns	r1, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003278:	4313      	orrs	r3, r2
}
 800327a:	4618      	mov	r0, r3
 800327c:	3724      	adds	r7, #36	@ 0x24
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ff28 	bl	80030e4 <__NVIC_SetPriorityGrouping>
}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032aa:	f7ff ff3f 	bl	800312c <__NVIC_GetPriorityGrouping>
 80032ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	6978      	ldr	r0, [r7, #20]
 80032b6:	f7ff ffb3 	bl	8003220 <NVIC_EncodePriority>
 80032ba:	4602      	mov	r2, r0
 80032bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff ff82 	bl	80031cc <__NVIC_SetPriority>
}
 80032c8:	bf00      	nop
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff ff32 	bl	8003148 <__NVIC_EnableIRQ>
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80032f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ff42 	bl	8003184 <__NVIC_DisableIRQ>
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003318:	d301      	bcc.n	800331e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800331a:	2301      	movs	r3, #1
 800331c:	e00d      	b.n	800333a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800331e:	4a0a      	ldr	r2, [pc, #40]	@ (8003348 <HAL_SYSTICK_Config+0x40>)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3b01      	subs	r3, #1
 8003324:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003326:	4b08      	ldr	r3, [pc, #32]	@ (8003348 <HAL_SYSTICK_Config+0x40>)
 8003328:	2200      	movs	r2, #0
 800332a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_SYSTICK_Config+0x40>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a05      	ldr	r2, [pc, #20]	@ (8003348 <HAL_SYSTICK_Config+0x40>)
 8003332:	f043 0303 	orr.w	r3, r3, #3
 8003336:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000e010 	.word	0xe000e010

0800334c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b04      	cmp	r3, #4
 8003358:	d844      	bhi.n	80033e4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800335a:	a201      	add	r2, pc, #4	@ (adr r2, 8003360 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003360:	08003383 	.word	0x08003383
 8003364:	080033a1 	.word	0x080033a1
 8003368:	080033c3 	.word	0x080033c3
 800336c:	080033e5 	.word	0x080033e5
 8003370:	08003375 	.word	0x08003375
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003374:	4b1f      	ldr	r3, [pc, #124]	@ (80033f4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1e      	ldr	r2, [pc, #120]	@ (80033f4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800337a:	f043 0304 	orr.w	r3, r3, #4
 800337e:	6013      	str	r3, [r2, #0]
      break;
 8003380:	e031      	b.n	80033e6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003382:	4b1c      	ldr	r3, [pc, #112]	@ (80033f4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1b      	ldr	r2, [pc, #108]	@ (80033f4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003388:	f023 0304 	bic.w	r3, r3, #4
 800338c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800338e:	4b1a      	ldr	r3, [pc, #104]	@ (80033f8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003394:	4a18      	ldr	r2, [pc, #96]	@ (80033f8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003396:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800339a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800339e:	e022      	b.n	80033e6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80033a0:	4b14      	ldr	r3, [pc, #80]	@ (80033f4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a13      	ldr	r2, [pc, #76]	@ (80033f4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80033a6:	f023 0304 	bic.w	r3, r3, #4
 80033aa:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80033ac:	4b12      	ldr	r3, [pc, #72]	@ (80033f8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80033ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033b2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80033b6:	4a10      	ldr	r2, [pc, #64]	@ (80033f8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80033b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80033bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80033c0:	e011      	b.n	80033e6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80033c2:	4b0c      	ldr	r3, [pc, #48]	@ (80033f4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a0b      	ldr	r2, [pc, #44]	@ (80033f4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80033ce:	4b0a      	ldr	r3, [pc, #40]	@ (80033f8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80033d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033d4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80033d8:	4a07      	ldr	r2, [pc, #28]	@ (80033f8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80033da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80033e2:	e000      	b.n	80033e6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80033e4:	bf00      	nop
  }
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	e000e010 	.word	0xe000e010
 80033f8:	46020c00 	.word	0x46020c00

080033fc <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003402:	4b19      	ldr	r3, [pc, #100]	@ (8003468 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800340e:	2304      	movs	r3, #4
 8003410:	607b      	str	r3, [r7, #4]
 8003412:	e021      	b.n	8003458 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8003414:	4b15      	ldr	r3, [pc, #84]	@ (800346c <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8003416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800341a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800341e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003426:	d011      	beq.n	800344c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800342e:	d810      	bhi.n	8003452 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d004      	beq.n	8003440 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800343c:	d003      	beq.n	8003446 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800343e:	e008      	b.n	8003452 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003440:	2300      	movs	r3, #0
 8003442:	607b      	str	r3, [r7, #4]
        break;
 8003444:	e008      	b.n	8003458 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003446:	2301      	movs	r3, #1
 8003448:	607b      	str	r3, [r7, #4]
        break;
 800344a:	e005      	b.n	8003458 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800344c:	2302      	movs	r3, #2
 800344e:	607b      	str	r3, [r7, #4]
        break;
 8003450:	e002      	b.n	8003458 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003452:	2300      	movs	r3, #0
 8003454:	607b      	str	r3, [r7, #4]
        break;
 8003456:	bf00      	nop
    }
  }
  return systick_source;
 8003458:	687b      	ldr	r3, [r7, #4]
}
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	e000e010 	.word	0xe000e010
 800346c:	46020c00 	.word	0x46020c00

08003470 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
#if defined(SAES)
  uint32_t tickstart;
#endif /* SAES */

  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e0a7      	b.n	80035d2 <HAL_CRYP_Init+0x162>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fd fe7c 	bl	8001194 <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  if (hcryp->Instance == AES)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a4e      	ldr	r2, [pc, #312]	@ (80035dc <HAL_CRYP_Init+0x16c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d116      	bne.n	80034d4 <HAL_CRYP_Init+0x64>
  {
    /* Set the key size, data type and Algorithm */
    cr_value = (uint32_t)(hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm | hcryp->Init.KeyMode);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm and mode */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, cr_value);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4b46      	ldr	r3, [pc, #280]	@ (80035e0 <HAL_CRYP_Init+0x170>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	430b      	orrs	r3, r1
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e070      	b.n	80035b6 <HAL_CRYP_Init+0x146>
  }
  else
  {
    /* SAES is initializing, fetching random number from the RNG */
    tickstart = HAL_GetTick();
 80034d4:	f7fe f9f6 	bl	80018c4 <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 80034da:	e01e      	b.n	800351a <HAL_CRYP_Init+0xaa>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 80034dc:	f7fe f9f2 	bl	80018c4 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b52      	cmp	r3, #82	@ 0x52
 80034e8:	d917      	bls.n	800351a <HAL_CRYP_Init+0xaa>
      {
        __HAL_CRYP_DISABLE(hcryp);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fe:	f043 0210 	orr.w	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e05b      	b.n	80035d2 <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b08      	cmp	r3, #8
 8003526:	d0d9      	beq.n	80034dc <HAL_CRYP_Init+0x6c>
      }
    }
    /* SAES is initializing, no random number fetching error flagged */
    tickstart = HAL_GetTick();
 8003528:	f7fe f9cc 	bl	80018c4 <HAL_GetTick>
 800352c:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 800352e:	e01e      	b.n	800356e <HAL_CRYP_Init+0xfe>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8003530:	f7fe f9c8 	bl	80018c4 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b52      	cmp	r3, #82	@ 0x52
 800353c:	d917      	bls.n	800356e <HAL_CRYP_Init+0xfe>
      {
        __HAL_CRYP_DISABLE(hcryp);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0201 	bic.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_RNG;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003552:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e031      	b.n	80035d2 <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b08      	cmp	r3, #8
 800357c:	d0d8      	beq.n	8003530 <HAL_CRYP_Init+0xc0>
      }
    }
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8003592:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 800359e:	4313      	orrs	r3, r2
 80035a0:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm, Key selection and key protection */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD | AES_CR_KEYSEL |
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4b0e      	ldr	r3, [pc, #56]	@ (80035e4 <HAL_CRYP_Init+0x174>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	430b      	orrs	r3, r1
 80035b4:	6013      	str	r3, [r2, #0]
               AES_CR_KEYPROT, cr_value);
  }
  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	420c0000 	.word	0x420c0000
 80035e0:	fcfaff99 	.word	0xfcfaff99
 80035e4:	8cf2ff99 	.word	0x8cf2ff99

080035e8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b089      	sub	sp, #36	@ 0x24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80035fa:	e1ba      	b.n	8003972 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	2101      	movs	r1, #1
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	fa01 f303 	lsl.w	r3, r1, r3
 8003608:	4013      	ands	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 81aa 	beq.w	800396c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a55      	ldr	r2, [pc, #340]	@ (8003770 <HAL_GPIO_Init+0x188>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d15d      	bne.n	80036dc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003626:	2201      	movs	r2, #1
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	4013      	ands	r3, r2
 8003634:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 0201 	and.w	r2, r3, #1
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	4313      	orrs	r3, r2
 8003648:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003650:	4a48      	ldr	r2, [pc, #288]	@ (8003774 <HAL_GPIO_Init+0x18c>)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003658:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800365a:	4a46      	ldr	r2, [pc, #280]	@ (8003774 <HAL_GPIO_Init+0x18c>)
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	08da      	lsrs	r2, r3, #3
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	3208      	adds	r2, #8
 800366e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003672:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	220f      	movs	r2, #15
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	4013      	ands	r3, r2
 8003688:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	220b      	movs	r2, #11
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	4313      	orrs	r3, r2
 800369c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	08da      	lsrs	r2, r3, #3
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	3208      	adds	r2, #8
 80036a6:	69f9      	ldr	r1, [r7, #28]
 80036a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	2203      	movs	r2, #3
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	2202      	movs	r2, #2
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	69fa      	ldr	r2, [r7, #28]
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	e067      	b.n	80037ac <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d003      	beq.n	80036ec <HAL_GPIO_Init+0x104>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b12      	cmp	r3, #18
 80036ea:	d145      	bne.n	8003778 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	08da      	lsrs	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3208      	adds	r2, #8
 80036f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	220f      	movs	r2, #15
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	4013      	ands	r3, r2
 800370e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f003 020f 	and.w	r2, r3, #15
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	4313      	orrs	r3, r2
 8003728:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	08da      	lsrs	r2, r3, #3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3208      	adds	r2, #8
 8003732:	69f9      	ldr	r1, [r7, #28]
 8003734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	2203      	movs	r2, #3
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	4013      	ands	r3, r2
 800374e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0203 	and.w	r2, r3, #3
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	4313      	orrs	r3, r2
 8003764:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	e01e      	b.n	80037ac <HAL_GPIO_Init+0x1c4>
 800376e:	bf00      	nop
 8003770:	46020000 	.word	0x46020000
 8003774:	08010030 	.word	0x08010030
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	2203      	movs	r2, #3
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	69fa      	ldr	r2, [r7, #28]
 800378c:	4013      	ands	r3, r2
 800378e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0203 	and.w	r2, r3, #3
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d00b      	beq.n	80037cc <HAL_GPIO_Init+0x1e4>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d007      	beq.n	80037cc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037c0:	2b11      	cmp	r3, #17
 80037c2:	d003      	beq.n	80037cc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b12      	cmp	r3, #18
 80037ca:	d130      	bne.n	800382e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	2203      	movs	r2, #3
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	69fa      	ldr	r2, [r7, #28]
 80037fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003802:	2201      	movs	r2, #1
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	4013      	ands	r3, r2
 8003810:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	091b      	lsrs	r3, r3, #4
 8003818:	f003 0201 	and.w	r2, r3, #1
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	4313      	orrs	r3, r2
 8003826:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b03      	cmp	r3, #3
 8003834:	d017      	beq.n	8003866 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	2203      	movs	r2, #3
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	4013      	ands	r3, r2
 800384c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	4313      	orrs	r3, r2
 800385e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d07c      	beq.n	800396c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003872:	4a47      	ldr	r2, [pc, #284]	@ (8003990 <HAL_GPIO_Init+0x3a8>)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	089b      	lsrs	r3, r3, #2
 8003878:	3318      	adds	r3, #24
 800387a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	220f      	movs	r2, #15
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	69fa      	ldr	r2, [r7, #28]
 8003892:	4013      	ands	r3, r2
 8003894:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0a9a      	lsrs	r2, r3, #10
 800389a:	4b3e      	ldr	r3, [pc, #248]	@ (8003994 <HAL_GPIO_Init+0x3ac>)
 800389c:	4013      	ands	r3, r2
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	f002 0203 	and.w	r2, r2, #3
 80038a4:	00d2      	lsls	r2, r2, #3
 80038a6:	4093      	lsls	r3, r2
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80038ae:	4938      	ldr	r1, [pc, #224]	@ (8003990 <HAL_GPIO_Init+0x3a8>)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	3318      	adds	r3, #24
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80038bc:	4b34      	ldr	r3, [pc, #208]	@ (8003990 <HAL_GPIO_Init+0x3a8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	43db      	mvns	r3, r3
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	4013      	ands	r3, r2
 80038ca:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80038e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003990 <HAL_GPIO_Init+0x3a8>)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80038e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003990 <HAL_GPIO_Init+0x3a8>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69fa      	ldr	r2, [r7, #28]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800390a:	4a21      	ldr	r2, [pc, #132]	@ (8003990 <HAL_GPIO_Init+0x3a8>)
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003910:	4b1f      	ldr	r3, [pc, #124]	@ (8003990 <HAL_GPIO_Init+0x3a8>)
 8003912:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003916:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	43db      	mvns	r3, r3
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	4013      	ands	r3, r2
 8003920:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800392e:	69fa      	ldr	r2, [r7, #28]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003936:	4a16      	ldr	r2, [pc, #88]	@ (8003990 <HAL_GPIO_Init+0x3a8>)
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800393e:	4b14      	ldr	r3, [pc, #80]	@ (8003990 <HAL_GPIO_Init+0x3a8>)
 8003940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003944:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	43db      	mvns	r3, r3
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	4013      	ands	r3, r2
 800394e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800395c:	69fa      	ldr	r2, [r7, #28]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4313      	orrs	r3, r2
 8003962:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003964:	4a0a      	ldr	r2, [pc, #40]	@ (8003990 <HAL_GPIO_Init+0x3a8>)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3301      	adds	r3, #1
 8003970:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	f47f ae3d 	bne.w	80035fc <HAL_GPIO_Init+0x14>
  }
}
 8003982:	bf00      	nop
 8003984:	bf00      	nop
 8003986:	3724      	adds	r7, #36	@ 0x24
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	46022000 	.word	0x46022000
 8003994:	002f7f7f 	.word	0x002f7f7f

08003998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	807b      	strh	r3, [r7, #2]
 80039a4:	4613      	mov	r3, r2
 80039a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039a8:	787b      	ldrb	r3, [r7, #1]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039ae:	887a      	ldrh	r2, [r7, #2]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80039b4:	e002      	b.n	80039bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80039b6:	887a      	ldrh	r2, [r7, #2]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039da:	887a      	ldrh	r2, [r7, #2]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4013      	ands	r3, r2
 80039e0:	041a      	lsls	r2, r3, #16
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	43d9      	mvns	r1, r3
 80039e6:	887b      	ldrh	r3, [r7, #2]
 80039e8:	400b      	ands	r3, r1
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	619a      	str	r2, [r3, #24]
}
 80039f0:	bf00      	nop
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003a06:	4b0f      	ldr	r3, [pc, #60]	@ (8003a44 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d006      	beq.n	8003a20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003a12:	4a0c      	ldr	r2, [pc, #48]	@ (8003a44 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 f814 	bl	8003a48 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003a20:	4b08      	ldr	r3, [pc, #32]	@ (8003a44 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	88fb      	ldrh	r3, [r7, #6]
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d006      	beq.n	8003a3a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003a2c:	4a05      	ldr	r2, [pc, #20]	@ (8003a44 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f812 	bl	8003a5e <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	46022000 	.word	0x46022000

08003a48 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	4603      	mov	r3, r0
 8003a66:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e08d      	b.n	8003ba2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7fd fb9c 	bl	80011d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2224      	movs	r2, #36	@ 0x24
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0201 	bic.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ac4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ad4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d107      	bne.n	8003aee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	e006      	b.n	8003afc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003afa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d108      	bne.n	8003b16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b12:	605a      	str	r2, [r3, #4]
 8003b14:	e007      	b.n	8003b26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69d9      	ldr	r1, [r3, #28]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1a      	ldr	r2, [r3, #32]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d138      	bne.n	8003c32 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e032      	b.n	8003c34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2224      	movs	r2, #36	@ 0x24
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0201 	bic.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bfc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6819      	ldr	r1, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0201 	orr.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e000      	b.n	8003c34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c32:	2302      	movs	r3, #2
  }
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	d139      	bne.n	8003cca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e033      	b.n	8003ccc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2224      	movs	r2, #36	@ 0x24
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0201 	orr.w	r2, r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e000      	b.n	8003ccc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cca:	2302      	movs	r3, #2
  }
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
 8003cf4:	e007      	b.n	8003d06 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003cf6:	4b07      	ldr	r3, [pc, #28]	@ (8003d14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 0204 	bic.w	r2, r3, #4
 8003cfe:	4905      	ldr	r1, [pc, #20]	@ (8003d14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	40030400 	.word	0x40030400

08003d18 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003d1c:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <HAL_ICACHE_Enable+0x1c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a04      	ldr	r2, [pc, #16]	@ (8003d34 <HAL_ICACHE_Enable+0x1c>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	40030400 	.word	0x40030400

08003d38 <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e059      	b.n	8003dfe <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 8003d4a:	4b30      	ldr	r3, [pc, #192]	@ (8003e0c <HAL_PWR_ConfigPVD+0xd4>)
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	492d      	ldr	r1, [pc, #180]	@ (8003e0c <HAL_PWR_ConfigPVD+0xd4>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8003e10 <HAL_PWR_ConfigPVD+0xd8>)
 8003d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d62:	4a2b      	ldr	r2, [pc, #172]	@ (8003e10 <HAL_PWR_ConfigPVD+0xd8>)
 8003d64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d68:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8003d6c:	4b28      	ldr	r3, [pc, #160]	@ (8003e10 <HAL_PWR_ConfigPVD+0xd8>)
 8003d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d72:	4a27      	ldr	r2, [pc, #156]	@ (8003e10 <HAL_PWR_ConfigPVD+0xd8>)
 8003d74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8003d7c:	4b24      	ldr	r3, [pc, #144]	@ (8003e10 <HAL_PWR_ConfigPVD+0xd8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a23      	ldr	r2, [pc, #140]	@ (8003e10 <HAL_PWR_ConfigPVD+0xd8>)
 8003d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d86:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8003d88:	4b21      	ldr	r3, [pc, #132]	@ (8003e10 <HAL_PWR_ConfigPVD+0xd8>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a20      	ldr	r2, [pc, #128]	@ (8003e10 <HAL_PWR_ConfigPVD+0xd8>)
 8003d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d92:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d007      	beq.n	8003db0 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8003da0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e10 <HAL_PWR_ConfigPVD+0xd8>)
 8003da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003da6:	4a1a      	ldr	r2, [pc, #104]	@ (8003e10 <HAL_PWR_ConfigPVD+0xd8>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8003dbc:	4b14      	ldr	r3, [pc, #80]	@ (8003e10 <HAL_PWR_ConfigPVD+0xd8>)
 8003dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dc2:	4a13      	ldr	r2, [pc, #76]	@ (8003e10 <HAL_PWR_ConfigPVD+0xd8>)
 8003dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e10 <HAL_PWR_ConfigPVD+0xd8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8003e10 <HAL_PWR_ConfigPVD+0xd8>)
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de2:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8003df0:	4b07      	ldr	r3, [pc, #28]	@ (8003e10 <HAL_PWR_ConfigPVD+0xd8>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4a06      	ldr	r2, [pc, #24]	@ (8003e10 <HAL_PWR_ConfigPVD+0xd8>)
 8003df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dfa:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	46020800 	.word	0x46020800
 8003e10:	46022000 	.word	0x46022000

08003e14 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 8003e18:	4b05      	ldr	r3, [pc, #20]	@ (8003e30 <HAL_PWR_EnablePVD+0x1c>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	4a04      	ldr	r2, [pc, #16]	@ (8003e30 <HAL_PWR_EnablePVD+0x1c>)
 8003e1e:	f043 0310 	orr.w	r3, r3, #16
 8003e22:	6113      	str	r3, [r2, #16]
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	46020800 	.word	0x46020800

08003e34 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003e3c:	4b39      	ldr	r3, [pc, #228]	@ (8003f24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e44:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d10b      	bne.n	8003e66 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e54:	d905      	bls.n	8003e62 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003e56:	4b33      	ldr	r3, [pc, #204]	@ (8003f24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	4a32      	ldr	r2, [pc, #200]	@ (8003f24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e60:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e057      	b.n	8003f16 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e6c:	d90a      	bls.n	8003e84 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8003f24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e80:	60d3      	str	r3, [r2, #12]
 8003e82:	e007      	b.n	8003e94 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003e84:	4b27      	ldr	r3, [pc, #156]	@ (8003f24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003e8c:	4925      	ldr	r1, [pc, #148]	@ (8003f24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003e94:	4b24      	ldr	r3, [pc, #144]	@ (8003f28 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a24      	ldr	r2, [pc, #144]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	099b      	lsrs	r3, r3, #6
 8003ea0:	2232      	movs	r2, #50	@ 0x32
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	4a21      	ldr	r2, [pc, #132]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eac:	099b      	lsrs	r3, r3, #6
 8003eae:	3301      	adds	r3, #1
 8003eb0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003eb2:	e002      	b.n	8003eba <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003eba:	4b1a      	ldr	r3, [pc, #104]	@ (8003f24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d102      	bne.n	8003ecc <HAL_PWREx_ControlVoltageScaling+0x98>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f3      	bne.n	8003eb4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d01b      	beq.n	8003f0a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003ed2:	4b15      	ldr	r3, [pc, #84]	@ (8003f28 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a15      	ldr	r2, [pc, #84]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	099b      	lsrs	r3, r3, #6
 8003ede:	2232      	movs	r2, #50	@ 0x32
 8003ee0:	fb02 f303 	mul.w	r3, r2, r3
 8003ee4:	4a11      	ldr	r2, [pc, #68]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	099b      	lsrs	r3, r3, #6
 8003eec:	3301      	adds	r3, #1
 8003eee:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003ef0:	e002      	b.n	8003ef8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8003f24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d102      	bne.n	8003f0a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f3      	bne.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e000      	b.n	8003f16 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	46020800 	.word	0x46020800
 8003f28:	20000004 	.word	0x20000004
 8003f2c:	10624dd3 	.word	0x10624dd3

08003f30 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003f34:	4b04      	ldr	r3, [pc, #16]	@ (8003f48 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	46020800 	.word	0x46020800

08003f4c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003f50:	4b05      	ldr	r3, [pc, #20]	@ (8003f68 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	4a04      	ldr	r2, [pc, #16]	@ (8003f68 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003f56:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003f5a:	6113      	str	r3, [r2, #16]
}
 8003f5c:	bf00      	nop
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	46020800 	.word	0x46020800

08003f6c <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003f70:	4b05      	ldr	r3, [pc, #20]	@ (8003f88 <HAL_PWREx_EnableVddA+0x1c>)
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	4a04      	ldr	r2, [pc, #16]	@ (8003f88 <HAL_PWREx_EnableVddA+0x1c>)
 8003f76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f7a:	6113      	str	r3, [r2, #16]
}
 8003f7c:	bf00      	nop
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	46020800 	.word	0x46020800

08003f8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08e      	sub	sp, #56	@ 0x38
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003f94:	2300      	movs	r3, #0
 8003f96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f000 bec8 	b.w	8004d36 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fa6:	4b99      	ldr	r3, [pc, #612]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fb0:	4b96      	ldr	r3, [pc, #600]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 816c 	beq.w	80042a0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <HAL_RCC_OscConfig+0x52>
 8003fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd0:	2b0c      	cmp	r3, #12
 8003fd2:	f040 80de 	bne.w	8004192 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	f040 80da 	bne.w	8004192 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d102      	bne.n	8003fec <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f000 bea5 	b.w	8004d36 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ff0:	4b86      	ldr	r3, [pc, #536]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d004      	beq.n	8004006 <HAL_RCC_OscConfig+0x7a>
 8003ffc:	4b83      	ldr	r3, [pc, #524]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004004:	e005      	b.n	8004012 <HAL_RCC_OscConfig+0x86>
 8004006:	4b81      	ldr	r3, [pc, #516]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004008:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800400c:	041b      	lsls	r3, r3, #16
 800400e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004012:	4293      	cmp	r3, r2
 8004014:	d255      	bcs.n	80040c2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10a      	bne.n	8004032 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004020:	4618      	mov	r0, r3
 8004022:	f001 f9d9 	bl	80053d8 <RCC_SetFlashLatencyFromMSIRange>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f000 be82 	b.w	8004d36 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004032:	4b76      	ldr	r3, [pc, #472]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	4a75      	ldr	r2, [pc, #468]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004038:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800403c:	6093      	str	r3, [r2, #8]
 800403e:	4b73      	ldr	r3, [pc, #460]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	4970      	ldr	r1, [pc, #448]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 800404c:	4313      	orrs	r3, r2
 800404e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004058:	d309      	bcc.n	800406e <HAL_RCC_OscConfig+0xe2>
 800405a:	4b6c      	ldr	r3, [pc, #432]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f023 021f 	bic.w	r2, r3, #31
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	4969      	ldr	r1, [pc, #420]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004068:	4313      	orrs	r3, r2
 800406a:	60cb      	str	r3, [r1, #12]
 800406c:	e07e      	b.n	800416c <HAL_RCC_OscConfig+0x1e0>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	2b00      	cmp	r3, #0
 8004074:	da0a      	bge.n	800408c <HAL_RCC_OscConfig+0x100>
 8004076:	4b65      	ldr	r3, [pc, #404]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	015b      	lsls	r3, r3, #5
 8004084:	4961      	ldr	r1, [pc, #388]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004086:	4313      	orrs	r3, r2
 8004088:	60cb      	str	r3, [r1, #12]
 800408a:	e06f      	b.n	800416c <HAL_RCC_OscConfig+0x1e0>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004094:	d30a      	bcc.n	80040ac <HAL_RCC_OscConfig+0x120>
 8004096:	4b5d      	ldr	r3, [pc, #372]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	029b      	lsls	r3, r3, #10
 80040a4:	4959      	ldr	r1, [pc, #356]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60cb      	str	r3, [r1, #12]
 80040aa:	e05f      	b.n	800416c <HAL_RCC_OscConfig+0x1e0>
 80040ac:	4b57      	ldr	r3, [pc, #348]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	03db      	lsls	r3, r3, #15
 80040ba:	4954      	ldr	r1, [pc, #336]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	60cb      	str	r3, [r1, #12]
 80040c0:	e054      	b.n	800416c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80040c2:	4b52      	ldr	r3, [pc, #328]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	4a51      	ldr	r2, [pc, #324]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80040c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040cc:	6093      	str	r3, [r2, #8]
 80040ce:	4b4f      	ldr	r3, [pc, #316]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040da:	494c      	ldr	r1, [pc, #304]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80040e8:	d309      	bcc.n	80040fe <HAL_RCC_OscConfig+0x172>
 80040ea:	4b48      	ldr	r3, [pc, #288]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f023 021f 	bic.w	r2, r3, #31
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	4945      	ldr	r1, [pc, #276]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60cb      	str	r3, [r1, #12]
 80040fc:	e028      	b.n	8004150 <HAL_RCC_OscConfig+0x1c4>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	2b00      	cmp	r3, #0
 8004104:	da0a      	bge.n	800411c <HAL_RCC_OscConfig+0x190>
 8004106:	4b41      	ldr	r3, [pc, #260]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	015b      	lsls	r3, r3, #5
 8004114:	493d      	ldr	r1, [pc, #244]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004116:	4313      	orrs	r3, r2
 8004118:	60cb      	str	r3, [r1, #12]
 800411a:	e019      	b.n	8004150 <HAL_RCC_OscConfig+0x1c4>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004124:	d30a      	bcc.n	800413c <HAL_RCC_OscConfig+0x1b0>
 8004126:	4b39      	ldr	r3, [pc, #228]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	029b      	lsls	r3, r3, #10
 8004134:	4935      	ldr	r1, [pc, #212]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004136:	4313      	orrs	r3, r2
 8004138:	60cb      	str	r3, [r1, #12]
 800413a:	e009      	b.n	8004150 <HAL_RCC_OscConfig+0x1c4>
 800413c:	4b33      	ldr	r3, [pc, #204]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	03db      	lsls	r3, r3, #15
 800414a:	4930      	ldr	r1, [pc, #192]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 800414c:	4313      	orrs	r3, r2
 800414e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10a      	bne.n	800416c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415a:	4618      	mov	r0, r3
 800415c:	f001 f93c 	bl	80053d8 <RCC_SetFlashLatencyFromMSIRange>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	f000 bde5 	b.w	8004d36 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800416c:	f001 f8de 	bl	800532c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004170:	4b27      	ldr	r3, [pc, #156]	@ (8004210 <HAL_RCC_OscConfig+0x284>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f7fd fb1b 	bl	80017b0 <HAL_InitTick>
 800417a:	4603      	mov	r3, r0
 800417c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 808a 	beq.w	800429e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800418a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800418e:	f000 bdd2 	b.w	8004d36 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d066      	beq.n	8004268 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800419a:	4b1c      	ldr	r3, [pc, #112]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a1b      	ldr	r2, [pc, #108]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041a6:	f7fd fb8d 	bl	80018c4 <HAL_GetTick>
 80041aa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80041ac:	e009      	b.n	80041c2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041ae:	f7fd fb89 	bl	80018c4 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d902      	bls.n	80041c2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	f000 bdba 	b.w	8004d36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80041c2:	4b12      	ldr	r3, [pc, #72]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0ef      	beq.n	80041ae <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80041ce:	4b0f      	ldr	r3, [pc, #60]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	4a0e      	ldr	r2, [pc, #56]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80041d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041d8:	6093      	str	r3, [r2, #8]
 80041da:	4b0c      	ldr	r3, [pc, #48]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e6:	4909      	ldr	r1, [pc, #36]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80041f4:	d30e      	bcc.n	8004214 <HAL_RCC_OscConfig+0x288>
 80041f6:	4b05      	ldr	r3, [pc, #20]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f023 021f 	bic.w	r2, r3, #31
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	4902      	ldr	r1, [pc, #8]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004204:	4313      	orrs	r3, r2
 8004206:	60cb      	str	r3, [r1, #12]
 8004208:	e04a      	b.n	80042a0 <HAL_RCC_OscConfig+0x314>
 800420a:	bf00      	nop
 800420c:	46020c00 	.word	0x46020c00
 8004210:	20000008 	.word	0x20000008
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	da0a      	bge.n	8004232 <HAL_RCC_OscConfig+0x2a6>
 800421c:	4b98      	ldr	r3, [pc, #608]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	015b      	lsls	r3, r3, #5
 800422a:	4995      	ldr	r1, [pc, #596]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 800422c:	4313      	orrs	r3, r2
 800422e:	60cb      	str	r3, [r1, #12]
 8004230:	e036      	b.n	80042a0 <HAL_RCC_OscConfig+0x314>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423a:	d30a      	bcc.n	8004252 <HAL_RCC_OscConfig+0x2c6>
 800423c:	4b90      	ldr	r3, [pc, #576]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	029b      	lsls	r3, r3, #10
 800424a:	498d      	ldr	r1, [pc, #564]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 800424c:	4313      	orrs	r3, r2
 800424e:	60cb      	str	r3, [r1, #12]
 8004250:	e026      	b.n	80042a0 <HAL_RCC_OscConfig+0x314>
 8004252:	4b8b      	ldr	r3, [pc, #556]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	03db      	lsls	r3, r3, #15
 8004260:	4987      	ldr	r1, [pc, #540]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004262:	4313      	orrs	r3, r2
 8004264:	60cb      	str	r3, [r1, #12]
 8004266:	e01b      	b.n	80042a0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004268:	4b85      	ldr	r3, [pc, #532]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a84      	ldr	r2, [pc, #528]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 800426e:	f023 0301 	bic.w	r3, r3, #1
 8004272:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004274:	f7fd fb26 	bl	80018c4 <HAL_GetTick>
 8004278:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800427a:	e009      	b.n	8004290 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800427c:	f7fd fb22 	bl	80018c4 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d902      	bls.n	8004290 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	f000 bd53 	b.w	8004d36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004290:	4b7b      	ldr	r3, [pc, #492]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1ef      	bne.n	800427c <HAL_RCC_OscConfig+0x2f0>
 800429c:	e000      	b.n	80042a0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800429e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 808b 	beq.w	80043c4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80042ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_OscConfig+0x334>
 80042b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b6:	2b0c      	cmp	r3, #12
 80042b8:	d109      	bne.n	80042ce <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042bc:	2b03      	cmp	r3, #3
 80042be:	d106      	bne.n	80042ce <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d17d      	bne.n	80043c4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f000 bd34 	b.w	8004d36 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d6:	d106      	bne.n	80042e6 <HAL_RCC_OscConfig+0x35a>
 80042d8:	4b69      	ldr	r3, [pc, #420]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a68      	ldr	r2, [pc, #416]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 80042de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	e041      	b.n	800436a <HAL_RCC_OscConfig+0x3de>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042ee:	d112      	bne.n	8004316 <HAL_RCC_OscConfig+0x38a>
 80042f0:	4b63      	ldr	r3, [pc, #396]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a62      	ldr	r2, [pc, #392]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 80042f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	4b60      	ldr	r3, [pc, #384]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a5f      	ldr	r2, [pc, #380]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004302:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	4b5d      	ldr	r3, [pc, #372]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a5c      	ldr	r2, [pc, #368]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 800430e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	e029      	b.n	800436a <HAL_RCC_OscConfig+0x3de>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800431e:	d112      	bne.n	8004346 <HAL_RCC_OscConfig+0x3ba>
 8004320:	4b57      	ldr	r3, [pc, #348]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a56      	ldr	r2, [pc, #344]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004326:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b54      	ldr	r3, [pc, #336]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a53      	ldr	r2, [pc, #332]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	4b51      	ldr	r3, [pc, #324]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a50      	ldr	r2, [pc, #320]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 800433e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	e011      	b.n	800436a <HAL_RCC_OscConfig+0x3de>
 8004346:	4b4e      	ldr	r3, [pc, #312]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a4d      	ldr	r2, [pc, #308]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 800434c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	4b4b      	ldr	r3, [pc, #300]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a4a      	ldr	r2, [pc, #296]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004358:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	4b48      	ldr	r3, [pc, #288]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a47      	ldr	r2, [pc, #284]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004364:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004368:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d014      	beq.n	800439c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004372:	f7fd faa7 	bl	80018c4 <HAL_GetTick>
 8004376:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004378:	e009      	b.n	800438e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800437a:	f7fd faa3 	bl	80018c4 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b64      	cmp	r3, #100	@ 0x64
 8004386:	d902      	bls.n	800438e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	f000 bcd4 	b.w	8004d36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800438e:	4b3c      	ldr	r3, [pc, #240]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0ef      	beq.n	800437a <HAL_RCC_OscConfig+0x3ee>
 800439a:	e013      	b.n	80043c4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800439c:	f7fd fa92 	bl	80018c4 <HAL_GetTick>
 80043a0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043a2:	e009      	b.n	80043b8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fd fa8e 	bl	80018c4 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	@ 0x64
 80043b0:	d902      	bls.n	80043b8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	f000 bcbf 	b.w	8004d36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043b8:	4b31      	ldr	r3, [pc, #196]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1ef      	bne.n	80043a4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d05f      	beq.n	8004490 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80043d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d005      	beq.n	80043e2 <HAL_RCC_OscConfig+0x456>
 80043d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d8:	2b0c      	cmp	r3, #12
 80043da:	d114      	bne.n	8004406 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d111      	bne.n	8004406 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f000 bca3 	b.w	8004d36 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80043f0:	4b23      	ldr	r3, [pc, #140]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	041b      	lsls	r3, r3, #16
 80043fe:	4920      	ldr	r1, [pc, #128]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004400:	4313      	orrs	r3, r2
 8004402:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004404:	e044      	b.n	8004490 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d024      	beq.n	8004458 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800440e:	4b1c      	ldr	r3, [pc, #112]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a1b      	ldr	r2, [pc, #108]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004418:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800441a:	f7fd fa53 	bl	80018c4 <HAL_GetTick>
 800441e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004420:	e009      	b.n	8004436 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004422:	f7fd fa4f 	bl	80018c4 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d902      	bls.n	8004436 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	f000 bc80 	b.w	8004d36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004436:	4b12      	ldr	r3, [pc, #72]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0ef      	beq.n	8004422 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004442:	4b0f      	ldr	r3, [pc, #60]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	041b      	lsls	r3, r3, #16
 8004450:	490b      	ldr	r1, [pc, #44]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 8004452:	4313      	orrs	r3, r2
 8004454:	610b      	str	r3, [r1, #16]
 8004456:	e01b      	b.n	8004490 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004458:	4b09      	ldr	r3, [pc, #36]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a08      	ldr	r2, [pc, #32]	@ (8004480 <HAL_RCC_OscConfig+0x4f4>)
 800445e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004462:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004464:	f7fd fa2e 	bl	80018c4 <HAL_GetTick>
 8004468:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800446a:	e00b      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800446c:	f7fd fa2a 	bl	80018c4 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d904      	bls.n	8004484 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	f000 bc5b 	b.w	8004d36 <HAL_RCC_OscConfig+0xdaa>
 8004480:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004484:	4baf      	ldr	r3, [pc, #700]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1ed      	bne.n	800446c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80c8 	beq.w	800462e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800449e:	2300      	movs	r3, #0
 80044a0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a4:	4ba7      	ldr	r3, [pc, #668]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 80044a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d111      	bne.n	80044d6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b2:	4ba4      	ldr	r3, [pc, #656]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 80044b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044b8:	4aa2      	ldr	r2, [pc, #648]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 80044ba:	f043 0304 	orr.w	r3, r3, #4
 80044be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80044c2:	4ba0      	ldr	r3, [pc, #640]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 80044c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80044d0:	2301      	movs	r3, #1
 80044d2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80044d6:	4b9c      	ldr	r3, [pc, #624]	@ (8004748 <HAL_RCC_OscConfig+0x7bc>)
 80044d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d119      	bne.n	8004516 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80044e2:	4b99      	ldr	r3, [pc, #612]	@ (8004748 <HAL_RCC_OscConfig+0x7bc>)
 80044e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e6:	4a98      	ldr	r2, [pc, #608]	@ (8004748 <HAL_RCC_OscConfig+0x7bc>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ee:	f7fd f9e9 	bl	80018c4 <HAL_GetTick>
 80044f2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80044f4:	e009      	b.n	800450a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f6:	f7fd f9e5 	bl	80018c4 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d902      	bls.n	800450a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	f000 bc16 	b.w	8004d36 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800450a:	4b8f      	ldr	r3, [pc, #572]	@ (8004748 <HAL_RCC_OscConfig+0x7bc>)
 800450c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0ef      	beq.n	80044f6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d05f      	beq.n	80045de <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800451e:	4b89      	ldr	r3, [pc, #548]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 8004520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004524:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004530:	429a      	cmp	r2, r3
 8004532:	d037      	beq.n	80045a4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d006      	beq.n	800454c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e3f4      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01b      	beq.n	800458e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004556:	4b7b      	ldr	r3, [pc, #492]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 8004558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800455c:	4a79      	ldr	r2, [pc, #484]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 800455e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004562:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004566:	f7fd f9ad 	bl	80018c4 <HAL_GetTick>
 800456a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800456e:	f7fd f9a9 	bl	80018c4 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b05      	cmp	r3, #5
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e3da      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004580:	4b70      	ldr	r3, [pc, #448]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 8004582:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004586:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1ef      	bne.n	800456e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800458e:	4b6d      	ldr	r3, [pc, #436]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 8004590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004594:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	4969      	ldr	r1, [pc, #420]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80045a4:	4b67      	ldr	r3, [pc, #412]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 80045a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045aa:	4a66      	ldr	r2, [pc, #408]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 80045ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80045b4:	f7fd f986 	bl	80018c4 <HAL_GetTick>
 80045b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045bc:	f7fd f982 	bl	80018c4 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b05      	cmp	r3, #5
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e3b3      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80045ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 80045d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ef      	beq.n	80045bc <HAL_RCC_OscConfig+0x630>
 80045dc:	e01b      	b.n	8004616 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80045de:	4b59      	ldr	r3, [pc, #356]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 80045e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045e4:	4a57      	ldr	r2, [pc, #348]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 80045e6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80045ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80045ee:	f7fd f969 	bl	80018c4 <HAL_GetTick>
 80045f2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f6:	f7fd f965 	bl	80018c4 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b05      	cmp	r3, #5
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e396      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004608:	4b4e      	ldr	r3, [pc, #312]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 800460a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800460e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1ef      	bne.n	80045f6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004616:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800461a:	2b01      	cmp	r3, #1
 800461c:	d107      	bne.n	800462e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800461e:	4b49      	ldr	r3, [pc, #292]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 8004620:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004624:	4a47      	ldr	r2, [pc, #284]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 8004626:	f023 0304 	bic.w	r3, r3, #4
 800462a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 8111 	beq.w	800485e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800463c:	2300      	movs	r3, #0
 800463e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004642:	4b40      	ldr	r3, [pc, #256]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 8004644:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d111      	bne.n	8004674 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004650:	4b3c      	ldr	r3, [pc, #240]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 8004652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004656:	4a3b      	ldr	r2, [pc, #236]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004660:	4b38      	ldr	r3, [pc, #224]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 8004662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004674:	4b34      	ldr	r3, [pc, #208]	@ (8004748 <HAL_RCC_OscConfig+0x7bc>)
 8004676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d118      	bne.n	80046b2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004680:	4b31      	ldr	r3, [pc, #196]	@ (8004748 <HAL_RCC_OscConfig+0x7bc>)
 8004682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004684:	4a30      	ldr	r2, [pc, #192]	@ (8004748 <HAL_RCC_OscConfig+0x7bc>)
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468c:	f7fd f91a 	bl	80018c4 <HAL_GetTick>
 8004690:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004694:	f7fd f916 	bl	80018c4 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e347      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80046a6:	4b28      	ldr	r3, [pc, #160]	@ (8004748 <HAL_RCC_OscConfig+0x7bc>)
 80046a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d01f      	beq.n	80046fe <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d010      	beq.n	80046ec <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 80046cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 80046d2:	f043 0304 	orr.w	r3, r3, #4
 80046d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046da:	4b1a      	ldr	r3, [pc, #104]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 80046dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046e0:	4a18      	ldr	r2, [pc, #96]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046ea:	e018      	b.n	800471e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046ec:	4b15      	ldr	r3, [pc, #84]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 80046ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046f2:	4a14      	ldr	r2, [pc, #80]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046fc:	e00f      	b.n	800471e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046fe:	4b11      	ldr	r3, [pc, #68]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 8004700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004704:	4a0f      	ldr	r2, [pc, #60]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800470e:	4b0d      	ldr	r3, [pc, #52]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 8004710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004714:	4a0b      	ldr	r2, [pc, #44]	@ (8004744 <HAL_RCC_OscConfig+0x7b8>)
 8004716:	f023 0304 	bic.w	r3, r3, #4
 800471a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d057      	beq.n	80047d6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004726:	f7fd f8cd 	bl	80018c4 <HAL_GetTick>
 800472a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800472c:	e00e      	b.n	800474c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472e:	f7fd f8c9 	bl	80018c4 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800473c:	4293      	cmp	r3, r2
 800473e:	d905      	bls.n	800474c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e2f8      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
 8004744:	46020c00 	.word	0x46020c00
 8004748:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800474c:	4b9c      	ldr	r3, [pc, #624]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 800474e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0e9      	beq.n	800472e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004762:	2b00      	cmp	r3, #0
 8004764:	d01b      	beq.n	800479e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004766:	4b96      	ldr	r3, [pc, #600]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 8004768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800476c:	4a94      	ldr	r2, [pc, #592]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 800476e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004772:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004776:	e00a      	b.n	800478e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004778:	f7fd f8a4 	bl	80018c4 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004786:	4293      	cmp	r3, r2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e2d3      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800478e:	4b8c      	ldr	r3, [pc, #560]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 8004790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0ed      	beq.n	8004778 <HAL_RCC_OscConfig+0x7ec>
 800479c:	e053      	b.n	8004846 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800479e:	4b88      	ldr	r3, [pc, #544]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 80047a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047a4:	4a86      	ldr	r2, [pc, #536]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 80047a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80047ae:	e00a      	b.n	80047c6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b0:	f7fd f888 	bl	80018c4 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e2b7      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80047c6:	4b7e      	ldr	r3, [pc, #504]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 80047c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1ed      	bne.n	80047b0 <HAL_RCC_OscConfig+0x824>
 80047d4:	e037      	b.n	8004846 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80047d6:	f7fd f875 	bl	80018c4 <HAL_GetTick>
 80047da:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047dc:	e00a      	b.n	80047f4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047de:	f7fd f871 	bl	80018c4 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e2a0      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047f4:	4b72      	ldr	r3, [pc, #456]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 80047f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1ed      	bne.n	80047de <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004802:	4b6f      	ldr	r3, [pc, #444]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 8004804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01a      	beq.n	8004846 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004810:	4b6b      	ldr	r3, [pc, #428]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 8004812:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004816:	4a6a      	ldr	r2, [pc, #424]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 8004818:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800481c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004820:	e00a      	b.n	8004838 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f7fd f84f 	bl	80018c4 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004830:	4293      	cmp	r3, r2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e27e      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004838:	4b61      	ldr	r3, [pc, #388]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 800483a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800483e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1ed      	bne.n	8004822 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004846:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800484a:	2b01      	cmp	r3, #1
 800484c:	d107      	bne.n	800485e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484e:	4b5c      	ldr	r3, [pc, #368]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 8004850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004854:	4a5a      	ldr	r2, [pc, #360]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 8004856:	f023 0304 	bic.w	r3, r3, #4
 800485a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d036      	beq.n	80048d8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486e:	2b00      	cmp	r3, #0
 8004870:	d019      	beq.n	80048a6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004872:	4b53      	ldr	r3, [pc, #332]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a52      	ldr	r2, [pc, #328]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 8004878:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800487c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800487e:	f7fd f821 	bl	80018c4 <HAL_GetTick>
 8004882:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004886:	f7fd f81d 	bl	80018c4 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e24e      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004898:	4b49      	ldr	r3, [pc, #292]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0f0      	beq.n	8004886 <HAL_RCC_OscConfig+0x8fa>
 80048a4:	e018      	b.n	80048d8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80048a6:	4b46      	ldr	r3, [pc, #280]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a45      	ldr	r2, [pc, #276]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 80048ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048b0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80048b2:	f7fd f807 	bl	80018c4 <HAL_GetTick>
 80048b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ba:	f7fd f803 	bl	80018c4 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e234      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80048cc:	4b3c      	ldr	r3, [pc, #240]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f0      	bne.n	80048ba <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d036      	beq.n	8004952 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d019      	beq.n	8004920 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80048ec:	4b34      	ldr	r3, [pc, #208]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a33      	ldr	r2, [pc, #204]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 80048f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80048f8:	f7fc ffe4 	bl	80018c4 <HAL_GetTick>
 80048fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004900:	f7fc ffe0 	bl	80018c4 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e211      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004912:	4b2b      	ldr	r3, [pc, #172]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0x974>
 800491e:	e018      	b.n	8004952 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004920:	4b27      	ldr	r3, [pc, #156]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a26      	ldr	r2, [pc, #152]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 8004926:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800492a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800492c:	f7fc ffca 	bl	80018c4 <HAL_GetTick>
 8004930:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004934:	f7fc ffc6 	bl	80018c4 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e1f7      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004946:	4b1e      	ldr	r3, [pc, #120]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d07f      	beq.n	8004a5e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004962:	2b00      	cmp	r3, #0
 8004964:	d062      	beq.n	8004a2c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004966:	4b16      	ldr	r3, [pc, #88]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	4a15      	ldr	r2, [pc, #84]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 800496c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004970:	6093      	str	r3, [r2, #8]
 8004972:	4b13      	ldr	r3, [pc, #76]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497e:	4910      	ldr	r1, [pc, #64]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 8004980:	4313      	orrs	r3, r2
 8004982:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004988:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800498c:	d309      	bcc.n	80049a2 <HAL_RCC_OscConfig+0xa16>
 800498e:	4b0c      	ldr	r3, [pc, #48]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f023 021f 	bic.w	r2, r3, #31
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	4909      	ldr	r1, [pc, #36]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 800499c:	4313      	orrs	r3, r2
 800499e:	60cb      	str	r3, [r1, #12]
 80049a0:	e02a      	b.n	80049f8 <HAL_RCC_OscConfig+0xa6c>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	da0c      	bge.n	80049c4 <HAL_RCC_OscConfig+0xa38>
 80049aa:	4b05      	ldr	r3, [pc, #20]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	015b      	lsls	r3, r3, #5
 80049b8:	4901      	ldr	r1, [pc, #4]	@ (80049c0 <HAL_RCC_OscConfig+0xa34>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60cb      	str	r3, [r1, #12]
 80049be:	e01b      	b.n	80049f8 <HAL_RCC_OscConfig+0xa6c>
 80049c0:	46020c00 	.word	0x46020c00
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049cc:	d30a      	bcc.n	80049e4 <HAL_RCC_OscConfig+0xa58>
 80049ce:	4ba1      	ldr	r3, [pc, #644]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	029b      	lsls	r3, r3, #10
 80049dc:	499d      	ldr	r1, [pc, #628]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	60cb      	str	r3, [r1, #12]
 80049e2:	e009      	b.n	80049f8 <HAL_RCC_OscConfig+0xa6c>
 80049e4:	4b9b      	ldr	r3, [pc, #620]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	03db      	lsls	r3, r3, #15
 80049f2:	4998      	ldr	r1, [pc, #608]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80049f8:	4b96      	ldr	r3, [pc, #600]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a95      	ldr	r2, [pc, #596]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 80049fe:	f043 0310 	orr.w	r3, r3, #16
 8004a02:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a04:	f7fc ff5e 	bl	80018c4 <HAL_GetTick>
 8004a08:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004a0c:	f7fc ff5a 	bl	80018c4 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e18b      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004a1e:	4b8d      	ldr	r3, [pc, #564]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0xa80>
 8004a2a:	e018      	b.n	8004a5e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004a2c:	4b89      	ldr	r3, [pc, #548]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a88      	ldr	r2, [pc, #544]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004a32:	f023 0310 	bic.w	r3, r3, #16
 8004a36:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a38:	f7fc ff44 	bl	80018c4 <HAL_GetTick>
 8004a3c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004a40:	f7fc ff40 	bl	80018c4 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e171      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004a52:	4b80      	ldr	r3, [pc, #512]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 8166 	beq.w	8004d34 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a6e:	4b79      	ldr	r3, [pc, #484]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b0c      	cmp	r3, #12
 8004a78:	f000 80f2 	beq.w	8004c60 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	f040 80c5 	bne.w	8004c10 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004a86:	4b73      	ldr	r3, [pc, #460]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a72      	ldr	r2, [pc, #456]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004a8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a90:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a92:	f7fc ff17 	bl	80018c4 <HAL_GetTick>
 8004a96:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9a:	f7fc ff13 	bl	80018c4 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e144      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004aac:	4b69      	ldr	r3, [pc, #420]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1f0      	bne.n	8004a9a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ab8:	4b66      	ldr	r3, [pc, #408]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d111      	bne.n	8004aea <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004ac6:	4b63      	ldr	r3, [pc, #396]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004acc:	4a61      	ldr	r2, [pc, #388]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004ace:	f043 0304 	orr.w	r3, r3, #4
 8004ad2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004aea:	4b5b      	ldr	r3, [pc, #364]	@ (8004c58 <HAL_RCC_OscConfig+0xccc>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004af2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004af6:	d102      	bne.n	8004afe <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004afe:	4b56      	ldr	r3, [pc, #344]	@ (8004c58 <HAL_RCC_OscConfig+0xccc>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	4a55      	ldr	r2, [pc, #340]	@ (8004c58 <HAL_RCC_OscConfig+0xccc>)
 8004b04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b08:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004b0a:	4b52      	ldr	r3, [pc, #328]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b12:	f023 0303 	bic.w	r3, r3, #3
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b1e:	3a01      	subs	r2, #1
 8004b20:	0212      	lsls	r2, r2, #8
 8004b22:	4311      	orrs	r1, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	494a      	ldr	r1, [pc, #296]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b30:	4b48      	ldr	r3, [pc, #288]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004b32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b34:	4b49      	ldr	r3, [pc, #292]	@ (8004c5c <HAL_RCC_OscConfig+0xcd0>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b3c:	3a01      	subs	r2, #1
 8004b3e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004b46:	3a01      	subs	r2, #1
 8004b48:	0252      	lsls	r2, r2, #9
 8004b4a:	b292      	uxth	r2, r2
 8004b4c:	4311      	orrs	r1, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b52:	3a01      	subs	r2, #1
 8004b54:	0412      	lsls	r2, r2, #16
 8004b56:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004b5a:	4311      	orrs	r1, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004b60:	3a01      	subs	r2, #1
 8004b62:	0612      	lsls	r2, r2, #24
 8004b64:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	493a      	ldr	r1, [pc, #232]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004b70:	4b38      	ldr	r3, [pc, #224]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b74:	4a37      	ldr	r2, [pc, #220]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004b76:	f023 0310 	bic.w	r3, r3, #16
 8004b7a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b80:	4a34      	ldr	r2, [pc, #208]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004b86:	4b33      	ldr	r3, [pc, #204]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8a:	4a32      	ldr	r2, [pc, #200]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004b8c:	f043 0310 	orr.w	r3, r3, #16
 8004b90:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004b92:	4b30      	ldr	r3, [pc, #192]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b96:	f023 020c 	bic.w	r2, r3, #12
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9e:	492d      	ldr	r1, [pc, #180]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004ba4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d105      	bne.n	8004bb8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004bac:	4b2a      	ldr	r3, [pc, #168]	@ (8004c58 <HAL_RCC_OscConfig+0xccc>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4a29      	ldr	r2, [pc, #164]	@ (8004c58 <HAL_RCC_OscConfig+0xccc>)
 8004bb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bb6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004bb8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d107      	bne.n	8004bd0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004bc0:	4b24      	ldr	r3, [pc, #144]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bc6:	4a23      	ldr	r2, [pc, #140]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004bc8:	f023 0304 	bic.w	r3, r3, #4
 8004bcc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004bd0:	4b20      	ldr	r3, [pc, #128]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004bd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bda:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004bdc:	f7fc fe72 	bl	80018c4 <HAL_GetTick>
 8004be0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be4:	f7fc fe6e 	bl	80018c4 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e09f      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004bf6:	4b17      	ldr	r3, [pc, #92]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c02:	4b14      	ldr	r3, [pc, #80]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c06:	4a13      	ldr	r2, [pc, #76]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c0c:	6293      	str	r3, [r2, #40]	@ 0x28
 8004c0e:	e091      	b.n	8004d34 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004c10:	4b10      	ldr	r3, [pc, #64]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a0f      	ldr	r2, [pc, #60]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004c16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c1a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c1c:	f7fc fe52 	bl	80018c4 <HAL_GetTick>
 8004c20:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c24:	f7fc fe4e 	bl	80018c4 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e07f      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c36:	4b07      	ldr	r3, [pc, #28]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f0      	bne.n	8004c24 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004c42:	4b04      	ldr	r3, [pc, #16]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c46:	4a03      	ldr	r2, [pc, #12]	@ (8004c54 <HAL_RCC_OscConfig+0xcc8>)
 8004c48:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004c4c:	f023 0303 	bic.w	r3, r3, #3
 8004c50:	6293      	str	r3, [r2, #40]	@ 0x28
 8004c52:	e06f      	b.n	8004d34 <HAL_RCC_OscConfig+0xda8>
 8004c54:	46020c00 	.word	0x46020c00
 8004c58:	46020800 	.word	0x46020800
 8004c5c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004c60:	4b37      	ldr	r3, [pc, #220]	@ (8004d40 <HAL_RCC_OscConfig+0xdb4>)
 8004c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c64:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004c66:	4b36      	ldr	r3, [pc, #216]	@ (8004d40 <HAL_RCC_OscConfig+0xdb4>)
 8004c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c6a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d039      	beq.n	8004ce8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f003 0203 	and.w	r2, r3, #3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d132      	bne.n	8004ce8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	0a1b      	lsrs	r3, r3, #8
 8004c86:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d129      	bne.n	8004ce8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d122      	bne.n	8004ce8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cac:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d11a      	bne.n	8004ce8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	0a5b      	lsrs	r3, r3, #9
 8004cb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cbe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d111      	bne.n	8004ce8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	0c1b      	lsrs	r3, r3, #16
 8004cc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d108      	bne.n	8004ce8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	0e1b      	lsrs	r3, r3, #24
 8004cda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e024      	b.n	8004d36 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004cec:	4b14      	ldr	r3, [pc, #80]	@ (8004d40 <HAL_RCC_OscConfig+0xdb4>)
 8004cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf0:	08db      	lsrs	r3, r3, #3
 8004cf2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d01a      	beq.n	8004d34 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004cfe:	4b10      	ldr	r3, [pc, #64]	@ (8004d40 <HAL_RCC_OscConfig+0xdb4>)
 8004d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d02:	4a0f      	ldr	r2, [pc, #60]	@ (8004d40 <HAL_RCC_OscConfig+0xdb4>)
 8004d04:	f023 0310 	bic.w	r3, r3, #16
 8004d08:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0a:	f7fc fddb 	bl	80018c4 <HAL_GetTick>
 8004d0e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004d10:	bf00      	nop
 8004d12:	f7fc fdd7 	bl	80018c4 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d0f9      	beq.n	8004d12 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d22:	4a07      	ldr	r2, [pc, #28]	@ (8004d40 <HAL_RCC_OscConfig+0xdb4>)
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004d28:	4b05      	ldr	r3, [pc, #20]	@ (8004d40 <HAL_RCC_OscConfig+0xdb4>)
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2c:	4a04      	ldr	r2, [pc, #16]	@ (8004d40 <HAL_RCC_OscConfig+0xdb4>)
 8004d2e:	f043 0310 	orr.w	r3, r3, #16
 8004d32:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3738      	adds	r7, #56	@ 0x38
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	46020c00 	.word	0x46020c00

08004d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e1d9      	b.n	800510c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d58:	4b9b      	ldr	r3, [pc, #620]	@ (8004fc8 <HAL_RCC_ClockConfig+0x284>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d910      	bls.n	8004d88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d66:	4b98      	ldr	r3, [pc, #608]	@ (8004fc8 <HAL_RCC_ClockConfig+0x284>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f023 020f 	bic.w	r2, r3, #15
 8004d6e:	4996      	ldr	r1, [pc, #600]	@ (8004fc8 <HAL_RCC_ClockConfig+0x284>)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d76:	4b94      	ldr	r3, [pc, #592]	@ (8004fc8 <HAL_RCC_ClockConfig+0x284>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d001      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e1c1      	b.n	800510c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d010      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	695a      	ldr	r2, [r3, #20]
 8004d98:	4b8c      	ldr	r3, [pc, #560]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d908      	bls.n	8004db6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004da4:	4b89      	ldr	r3, [pc, #548]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	4986      	ldr	r1, [pc, #536]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d012      	beq.n	8004de8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691a      	ldr	r2, [r3, #16]
 8004dc6:	4b81      	ldr	r3, [pc, #516]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	091b      	lsrs	r3, r3, #4
 8004dcc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d909      	bls.n	8004de8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004dd4:	4b7d      	ldr	r3, [pc, #500]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	497a      	ldr	r1, [pc, #488]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d010      	beq.n	8004e16 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	4b74      	ldr	r3, [pc, #464]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d908      	bls.n	8004e16 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004e04:	4b71      	ldr	r3, [pc, #452]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	496e      	ldr	r1, [pc, #440]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d010      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	4b69      	ldr	r3, [pc, #420]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d908      	bls.n	8004e44 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004e32:	4b66      	ldr	r3, [pc, #408]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f023 020f 	bic.w	r2, r3, #15
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	4963      	ldr	r1, [pc, #396]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80d2 	beq.w	8004ff6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004e52:	2300      	movs	r3, #0
 8004e54:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d143      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e5e:	4b5b      	ldr	r3, [pc, #364]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d110      	bne.n	8004e8e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004e6c:	4b57      	ldr	r3, [pc, #348]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e72:	4a56      	ldr	r2, [pc, #344]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004e74:	f043 0304 	orr.w	r3, r3, #4
 8004e78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004e7c:	4b53      	ldr	r3, [pc, #332]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	60bb      	str	r3, [r7, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004e8e:	f7fc fd19 	bl	80018c4 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004e94:	4b4e      	ldr	r3, [pc, #312]	@ (8004fd0 <HAL_RCC_ClockConfig+0x28c>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00f      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004ea2:	f7fc fd0f 	bl	80018c4 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e12b      	b.n	800510c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004eb4:	4b46      	ldr	r3, [pc, #280]	@ (8004fd0 <HAL_RCC_ClockConfig+0x28c>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0f0      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d107      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004ec6:	4b41      	ldr	r3, [pc, #260]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ecc:	4a3f      	ldr	r2, [pc, #252]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004ece:	f023 0304 	bic.w	r3, r3, #4
 8004ed2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d121      	bne.n	8004f26 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e112      	b.n	800510c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d107      	bne.n	8004efe <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eee:	4b37      	ldr	r3, [pc, #220]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d115      	bne.n	8004f26 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e106      	b.n	800510c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d107      	bne.n	8004f16 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004f06:	4b31      	ldr	r3, [pc, #196]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d109      	bne.n	8004f26 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e0fa      	b.n	800510c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f16:	4b2d      	ldr	r3, [pc, #180]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e0f2      	b.n	800510c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004f26:	4b29      	ldr	r3, [pc, #164]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f023 0203 	bic.w	r2, r3, #3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	4926      	ldr	r1, [pc, #152]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004f38:	f7fc fcc4 	bl	80018c4 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d112      	bne.n	8004f6c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f46:	e00a      	b.n	8004f5e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f48:	f7fc fcbc 	bl	80018c4 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e0d6      	b.n	800510c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b0c      	cmp	r3, #12
 8004f68:	d1ee      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x204>
 8004f6a:	e044      	b.n	8004ff6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d112      	bne.n	8004f9a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f74:	e00a      	b.n	8004f8c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f76:	f7fc fca5 	bl	80018c4 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e0bf      	b.n	800510c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	f003 030c 	and.w	r3, r3, #12
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d1ee      	bne.n	8004f76 <HAL_RCC_ClockConfig+0x232>
 8004f98:	e02d      	b.n	8004ff6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d123      	bne.n	8004fea <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004fa2:	e00a      	b.n	8004fba <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa4:	f7fc fc8e 	bl	80018c4 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e0a8      	b.n	800510c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004fba:	4b04      	ldr	r3, [pc, #16]	@ (8004fcc <HAL_RCC_ClockConfig+0x288>)
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1ee      	bne.n	8004fa4 <HAL_RCC_ClockConfig+0x260>
 8004fc6:	e016      	b.n	8004ff6 <HAL_RCC_ClockConfig+0x2b2>
 8004fc8:	40022000 	.word	0x40022000
 8004fcc:	46020c00 	.word	0x46020c00
 8004fd0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd4:	f7fc fc76 	bl	80018c4 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e090      	b.n	800510c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fea:	4b4a      	ldr	r3, [pc, #296]	@ (8005114 <HAL_RCC_ClockConfig+0x3d0>)
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	f003 030c 	and.w	r3, r3, #12
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d1ee      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d010      	beq.n	8005024 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	4b43      	ldr	r3, [pc, #268]	@ (8005114 <HAL_RCC_ClockConfig+0x3d0>)
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	429a      	cmp	r2, r3
 8005010:	d208      	bcs.n	8005024 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005012:	4b40      	ldr	r3, [pc, #256]	@ (8005114 <HAL_RCC_ClockConfig+0x3d0>)
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	f023 020f 	bic.w	r2, r3, #15
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	493d      	ldr	r1, [pc, #244]	@ (8005114 <HAL_RCC_ClockConfig+0x3d0>)
 8005020:	4313      	orrs	r3, r2
 8005022:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005024:	4b3c      	ldr	r3, [pc, #240]	@ (8005118 <HAL_RCC_ClockConfig+0x3d4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d210      	bcs.n	8005054 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	4b39      	ldr	r3, [pc, #228]	@ (8005118 <HAL_RCC_ClockConfig+0x3d4>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 020f 	bic.w	r2, r3, #15
 800503a:	4937      	ldr	r1, [pc, #220]	@ (8005118 <HAL_RCC_ClockConfig+0x3d4>)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	4313      	orrs	r3, r2
 8005040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005042:	4b35      	ldr	r3, [pc, #212]	@ (8005118 <HAL_RCC_ClockConfig+0x3d4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d001      	beq.n	8005054 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e05b      	b.n	800510c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d010      	beq.n	8005082 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	4b2b      	ldr	r3, [pc, #172]	@ (8005114 <HAL_RCC_ClockConfig+0x3d0>)
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800506c:	429a      	cmp	r2, r3
 800506e:	d208      	bcs.n	8005082 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005070:	4b28      	ldr	r3, [pc, #160]	@ (8005114 <HAL_RCC_ClockConfig+0x3d0>)
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	4925      	ldr	r1, [pc, #148]	@ (8005114 <HAL_RCC_ClockConfig+0x3d0>)
 800507e:	4313      	orrs	r3, r2
 8005080:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d012      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	4b20      	ldr	r3, [pc, #128]	@ (8005114 <HAL_RCC_ClockConfig+0x3d0>)
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	091b      	lsrs	r3, r3, #4
 8005098:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800509c:	429a      	cmp	r2, r3
 800509e:	d209      	bcs.n	80050b4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80050a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005114 <HAL_RCC_ClockConfig+0x3d0>)
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	4919      	ldr	r1, [pc, #100]	@ (8005114 <HAL_RCC_ClockConfig+0x3d0>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0310 	and.w	r3, r3, #16
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d010      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	695a      	ldr	r2, [r3, #20]
 80050c4:	4b13      	ldr	r3, [pc, #76]	@ (8005114 <HAL_RCC_ClockConfig+0x3d0>)
 80050c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d208      	bcs.n	80050e2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80050d0:	4b10      	ldr	r3, [pc, #64]	@ (8005114 <HAL_RCC_ClockConfig+0x3d0>)
 80050d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	490d      	ldr	r1, [pc, #52]	@ (8005114 <HAL_RCC_ClockConfig+0x3d0>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80050e2:	f000 f821 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 80050e6:	4602      	mov	r2, r0
 80050e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005114 <HAL_RCC_ClockConfig+0x3d0>)
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	490a      	ldr	r1, [pc, #40]	@ (800511c <HAL_RCC_ClockConfig+0x3d8>)
 80050f2:	5ccb      	ldrb	r3, [r1, r3]
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
 80050f8:	4a09      	ldr	r2, [pc, #36]	@ (8005120 <HAL_RCC_ClockConfig+0x3dc>)
 80050fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050fc:	4b09      	ldr	r3, [pc, #36]	@ (8005124 <HAL_RCC_ClockConfig+0x3e0>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f7fc fb55 	bl	80017b0 <HAL_InitTick>
 8005106:	4603      	mov	r3, r0
 8005108:	73fb      	strb	r3, [r7, #15]

  return status;
 800510a:	7bfb      	ldrb	r3, [r7, #15]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	46020c00 	.word	0x46020c00
 8005118:	40022000 	.word	0x40022000
 800511c:	0800ffd8 	.word	0x0800ffd8
 8005120:	20000004 	.word	0x20000004
 8005124:	20000008 	.word	0x20000008

08005128 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005128:	b480      	push	{r7}
 800512a:	b08b      	sub	sp, #44	@ 0x2c
 800512c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005136:	4b78      	ldr	r3, [pc, #480]	@ (8005318 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	f003 030c 	and.w	r3, r3, #12
 800513e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005140:	4b75      	ldr	r3, [pc, #468]	@ (8005318 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005144:	f003 0303 	and.w	r3, r3, #3
 8005148:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <HAL_RCC_GetSysClockFreq+0x34>
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	2b0c      	cmp	r3, #12
 8005154:	d121      	bne.n	800519a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d11e      	bne.n	800519a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800515c:	4b6e      	ldr	r3, [pc, #440]	@ (8005318 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d107      	bne.n	8005178 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005168:	4b6b      	ldr	r3, [pc, #428]	@ (8005318 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800516a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800516e:	0b1b      	lsrs	r3, r3, #12
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
 8005176:	e005      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005178:	4b67      	ldr	r3, [pc, #412]	@ (8005318 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	0f1b      	lsrs	r3, r3, #28
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005184:	4a65      	ldr	r2, [pc, #404]	@ (800531c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800518c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d110      	bne.n	80051b6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005196:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005198:	e00d      	b.n	80051b6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800519a:	4b5f      	ldr	r3, [pc, #380]	@ (8005318 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f003 030c 	and.w	r3, r3, #12
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d102      	bne.n	80051ac <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051a6:	4b5e      	ldr	r3, [pc, #376]	@ (8005320 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80051a8:	623b      	str	r3, [r7, #32]
 80051aa:	e004      	b.n	80051b6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	2b08      	cmp	r3, #8
 80051b0:	d101      	bne.n	80051b6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051b2:	4b5b      	ldr	r3, [pc, #364]	@ (8005320 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80051b4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	f040 80a5 	bne.w	8005308 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80051be:	4b56      	ldr	r3, [pc, #344]	@ (8005318 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80051c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80051c8:	4b53      	ldr	r3, [pc, #332]	@ (8005318 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80051ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051cc:	0a1b      	lsrs	r3, r3, #8
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	3301      	adds	r3, #1
 80051d4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80051d6:	4b50      	ldr	r3, [pc, #320]	@ (8005318 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80051d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051da:	091b      	lsrs	r3, r3, #4
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80051e2:	4b4d      	ldr	r3, [pc, #308]	@ (8005318 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80051e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e6:	08db      	lsrs	r3, r3, #3
 80051e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	fb02 f303 	mul.w	r3, r2, r3
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fa:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b02      	cmp	r3, #2
 8005202:	d003      	beq.n	800520c <HAL_RCC_GetSysClockFreq+0xe4>
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	2b03      	cmp	r3, #3
 8005208:	d022      	beq.n	8005250 <HAL_RCC_GetSysClockFreq+0x128>
 800520a:	e043      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005216:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005324 <HAL_RCC_GetSysClockFreq+0x1fc>
 800521a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800521e:	4b3e      	ldr	r3, [pc, #248]	@ (8005318 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800522e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005232:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005328 <HAL_RCC_GetSysClockFreq+0x200>
 8005236:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800523a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800523e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005242:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800524e:	e046      	b.n	80052de <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005324 <HAL_RCC_GetSysClockFreq+0x1fc>
 800525e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005262:	4b2d      	ldr	r3, [pc, #180]	@ (8005318 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005272:	ed97 6a01 	vldr	s12, [r7, #4]
 8005276:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005328 <HAL_RCC_GetSysClockFreq+0x200>
 800527a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800527e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005286:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800528a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005292:	e024      	b.n	80052de <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	ee07 3a90 	vmov	s15, r3
 80052a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005318 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b4:	ee07 3a90 	vmov	s15, r3
 80052b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80052bc:	ed97 6a01 	vldr	s12, [r7, #4]
 80052c0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005328 <HAL_RCC_GetSysClockFreq+0x200>
 80052c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80052cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052dc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80052de:	4b0e      	ldr	r3, [pc, #56]	@ (8005318 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e2:	0e1b      	lsrs	r3, r3, #24
 80052e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052e8:	3301      	adds	r3, #1
 80052ea:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80052fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005302:	ee17 3a90 	vmov	r3, s15
 8005306:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005308:	6a3b      	ldr	r3, [r7, #32]
}
 800530a:	4618      	mov	r0, r3
 800530c:	372c      	adds	r7, #44	@ 0x2c
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	46020c00 	.word	0x46020c00
 800531c:	0800fff0 	.word	0x0800fff0
 8005320:	00f42400 	.word	0x00f42400
 8005324:	4b742400 	.word	0x4b742400
 8005328:	46000000 	.word	0x46000000

0800532c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005330:	f7ff fefa 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 8005334:	4602      	mov	r2, r0
 8005336:	4b07      	ldr	r3, [pc, #28]	@ (8005354 <HAL_RCC_GetHCLKFreq+0x28>)
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	4906      	ldr	r1, [pc, #24]	@ (8005358 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005340:	5ccb      	ldrb	r3, [r1, r3]
 8005342:	fa22 f303 	lsr.w	r3, r2, r3
 8005346:	4a05      	ldr	r2, [pc, #20]	@ (800535c <HAL_RCC_GetHCLKFreq+0x30>)
 8005348:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800534a:	4b04      	ldr	r3, [pc, #16]	@ (800535c <HAL_RCC_GetHCLKFreq+0x30>)
 800534c:	681b      	ldr	r3, [r3, #0]
}
 800534e:	4618      	mov	r0, r3
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	46020c00 	.word	0x46020c00
 8005358:	0800ffd8 	.word	0x0800ffd8
 800535c:	20000004 	.word	0x20000004

08005360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005364:	f7ff ffe2 	bl	800532c <HAL_RCC_GetHCLKFreq>
 8005368:	4602      	mov	r2, r0
 800536a:	4b05      	ldr	r3, [pc, #20]	@ (8005380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	091b      	lsrs	r3, r3, #4
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	4903      	ldr	r1, [pc, #12]	@ (8005384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005376:	5ccb      	ldrb	r3, [r1, r3]
 8005378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}
 8005380:	46020c00 	.word	0x46020c00
 8005384:	0800ffe8 	.word	0x0800ffe8

08005388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800538c:	f7ff ffce 	bl	800532c <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b05      	ldr	r3, [pc, #20]	@ (80053a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	0a1b      	lsrs	r3, r3, #8
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4903      	ldr	r1, [pc, #12]	@ (80053ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	46020c00 	.word	0x46020c00
 80053ac:	0800ffe8 	.word	0x0800ffe8

080053b0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80053b4:	f7ff ffba 	bl	800532c <HAL_RCC_GetHCLKFreq>
 80053b8:	4602      	mov	r2, r0
 80053ba:	4b05      	ldr	r3, [pc, #20]	@ (80053d0 <HAL_RCC_GetPCLK3Freq+0x20>)
 80053bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053be:	091b      	lsrs	r3, r3, #4
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	4903      	ldr	r1, [pc, #12]	@ (80053d4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80053c6:	5ccb      	ldrb	r3, [r1, r3]
 80053c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	46020c00 	.word	0x46020c00
 80053d4:	0800ffe8 	.word	0x0800ffe8

080053d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053e0:	4b3e      	ldr	r3, [pc, #248]	@ (80054dc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80053e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053e6:	f003 0304 	and.w	r3, r3, #4
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053ee:	f7fe fd9f 	bl	8003f30 <HAL_PWREx_GetVoltageRange>
 80053f2:	6178      	str	r0, [r7, #20]
 80053f4:	e019      	b.n	800542a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053f6:	4b39      	ldr	r3, [pc, #228]	@ (80054dc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80053f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053fc:	4a37      	ldr	r2, [pc, #220]	@ (80054dc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80053fe:	f043 0304 	orr.w	r3, r3, #4
 8005402:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005406:	4b35      	ldr	r3, [pc, #212]	@ (80054dc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005408:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005414:	f7fe fd8c 	bl	8003f30 <HAL_PWREx_GetVoltageRange>
 8005418:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800541a:	4b30      	ldr	r3, [pc, #192]	@ (80054dc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800541c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005420:	4a2e      	ldr	r2, [pc, #184]	@ (80054dc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005422:	f023 0304 	bic.w	r3, r3, #4
 8005426:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005430:	d003      	beq.n	800543a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005438:	d109      	bne.n	800544e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005440:	d202      	bcs.n	8005448 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005442:	2301      	movs	r3, #1
 8005444:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005446:	e033      	b.n	80054b0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005448:	2300      	movs	r3, #0
 800544a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800544c:	e030      	b.n	80054b0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005454:	d208      	bcs.n	8005468 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800545c:	d102      	bne.n	8005464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800545e:	2303      	movs	r3, #3
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	e025      	b.n	80054b0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e035      	b.n	80054d4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800546e:	d90f      	bls.n	8005490 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d109      	bne.n	800548a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800547c:	d902      	bls.n	8005484 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800547e:	2300      	movs	r3, #0
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	e015      	b.n	80054b0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005484:	2301      	movs	r3, #1
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	e012      	b.n	80054b0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800548a:	2300      	movs	r3, #0
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	e00f      	b.n	80054b0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005496:	d109      	bne.n	80054ac <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800549e:	d102      	bne.n	80054a6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80054a0:	2301      	movs	r3, #1
 80054a2:	613b      	str	r3, [r7, #16]
 80054a4:	e004      	b.n	80054b0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80054a6:	2302      	movs	r3, #2
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	e001      	b.n	80054b0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80054ac:	2301      	movs	r3, #1
 80054ae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054b0:	4b0b      	ldr	r3, [pc, #44]	@ (80054e0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f023 020f 	bic.w	r2, r3, #15
 80054b8:	4909      	ldr	r1, [pc, #36]	@ (80054e0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80054c0:	4b07      	ldr	r3, [pc, #28]	@ (80054e0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 030f 	and.w	r3, r3, #15
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d001      	beq.n	80054d2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	46020c00 	.word	0x46020c00
 80054e0:	40022000 	.word	0x40022000

080054e4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80054e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054e8:	b0c4      	sub	sp, #272	@ 0x110
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054f6:	2300      	movs	r3, #0
 80054f8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	f002 0401 	and.w	r4, r2, #1
 8005508:	2500      	movs	r5, #0
 800550a:	ea54 0305 	orrs.w	r3, r4, r5
 800550e:	d00b      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005510:	4bd5      	ldr	r3, [pc, #852]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005516:	f023 0103 	bic.w	r1, r3, #3
 800551a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800551e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005520:	4ad1      	ldr	r2, [pc, #836]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005522:	430b      	orrs	r3, r1
 8005524:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005530:	f002 0802 	and.w	r8, r2, #2
 8005534:	f04f 0900 	mov.w	r9, #0
 8005538:	ea58 0309 	orrs.w	r3, r8, r9
 800553c:	d00b      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800553e:	4bca      	ldr	r3, [pc, #808]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005544:	f023 010c 	bic.w	r1, r3, #12
 8005548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800554c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554e:	4ac6      	ldr	r2, [pc, #792]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005550:	430b      	orrs	r3, r1
 8005552:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	f002 0a04 	and.w	sl, r2, #4
 8005562:	f04f 0b00 	mov.w	fp, #0
 8005566:	ea5a 030b 	orrs.w	r3, sl, fp
 800556a:	d00b      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800556c:	4bbe      	ldr	r3, [pc, #760]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800556e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005572:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800557a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800557c:	4aba      	ldr	r2, [pc, #744]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800557e:	430b      	orrs	r3, r1
 8005580:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	f002 0308 	and.w	r3, r2, #8
 8005590:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005594:	2300      	movs	r3, #0
 8005596:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800559a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800559e:	460b      	mov	r3, r1
 80055a0:	4313      	orrs	r3, r2
 80055a2:	d00b      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80055a4:	4bb0      	ldr	r3, [pc, #704]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80055a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80055ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b4:	4aac      	ldr	r2, [pc, #688]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80055b6:	430b      	orrs	r3, r1
 80055b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	f002 0310 	and.w	r3, r2, #16
 80055c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055cc:	2300      	movs	r3, #0
 80055ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80055d2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80055d6:	460b      	mov	r3, r1
 80055d8:	4313      	orrs	r3, r2
 80055da:	d00b      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80055dc:	4ba2      	ldr	r3, [pc, #648]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80055de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ec:	4a9e      	ldr	r2, [pc, #632]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80055ee:	430b      	orrs	r3, r1
 80055f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80055f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005600:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005604:	2300      	movs	r3, #0
 8005606:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800560a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800560e:	460b      	mov	r3, r1
 8005610:	4313      	orrs	r3, r2
 8005612:	d00b      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005614:	4b94      	ldr	r3, [pc, #592]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005616:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800561a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800561e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005624:	4a90      	ldr	r2, [pc, #576]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005626:	430b      	orrs	r3, r1
 8005628:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800562c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	f002 0320 	and.w	r3, r2, #32
 8005638:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800563c:	2300      	movs	r3, #0
 800563e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005642:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005646:	460b      	mov	r3, r1
 8005648:	4313      	orrs	r3, r2
 800564a:	d00b      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800564c:	4b86      	ldr	r3, [pc, #536]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800564e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005652:	f023 0107 	bic.w	r1, r3, #7
 8005656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800565a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800565c:	4a82      	ldr	r2, [pc, #520]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800565e:	430b      	orrs	r3, r1
 8005660:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005670:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005674:	2300      	movs	r3, #0
 8005676:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800567a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800567e:	460b      	mov	r3, r1
 8005680:	4313      	orrs	r3, r2
 8005682:	d00b      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005684:	4b78      	ldr	r3, [pc, #480]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800568a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800568e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005694:	4a74      	ldr	r2, [pc, #464]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005696:	430b      	orrs	r3, r1
 8005698:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800569c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80056a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056ac:	2300      	movs	r3, #0
 80056ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80056b6:	460b      	mov	r3, r1
 80056b8:	4313      	orrs	r3, r2
 80056ba:	d00b      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80056bc:	4b6a      	ldr	r3, [pc, #424]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80056be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056cc:	4a66      	ldr	r2, [pc, #408]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80056ce:	430b      	orrs	r3, r1
 80056d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056dc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80056e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4313      	orrs	r3, r2
 80056f2:	d00b      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80056f4:	4b5c      	ldr	r3, [pc, #368]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80056f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005704:	4a58      	ldr	r2, [pc, #352]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005706:	430b      	orrs	r3, r1
 8005708:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800570c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005718:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800571c:	2300      	movs	r3, #0
 800571e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005722:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005726:	460b      	mov	r3, r1
 8005728:	4313      	orrs	r3, r2
 800572a:	d00b      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800572c:	4b4e      	ldr	r3, [pc, #312]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800572e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005732:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800573a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800573c:	4a4a      	ldr	r2, [pc, #296]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800573e:	430b      	orrs	r3, r1
 8005740:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8005744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005750:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005754:	2300      	movs	r3, #0
 8005756:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800575a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800575e:	460b      	mov	r3, r1
 8005760:	4313      	orrs	r3, r2
 8005762:	d00b      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8005764:	4b40      	ldr	r3, [pc, #256]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005766:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800576a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800576e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005772:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005774:	4a3c      	ldr	r2, [pc, #240]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005776:	430b      	orrs	r3, r1
 8005778:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800577c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005788:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800578c:	2300      	movs	r3, #0
 800578e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005792:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005796:	460b      	mov	r3, r1
 8005798:	4313      	orrs	r3, r2
 800579a:	d00c      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800579c:	4b32      	ldr	r3, [pc, #200]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800579e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057a2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80057a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80057b0:	430b      	orrs	r3, r1
 80057b2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057be:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80057c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057c6:	2300      	movs	r3, #0
 80057c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80057cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4313      	orrs	r3, r2
 80057d4:	d00c      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80057d6:	4b24      	ldr	r3, [pc, #144]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80057d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057dc:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80057e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80057ea:	430b      	orrs	r3, r1
 80057ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80057fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005800:	2300      	movs	r3, #0
 8005802:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005806:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800580a:	460b      	mov	r3, r1
 800580c:	4313      	orrs	r3, r2
 800580e:	d00c      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005810:	4b15      	ldr	r3, [pc, #84]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005816:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800581a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005822:	4a11      	ldr	r2, [pc, #68]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005824:	430b      	orrs	r3, r1
 8005826:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800582a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005836:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800583a:	2300      	movs	r3, #0
 800583c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005840:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005844:	460b      	mov	r3, r1
 8005846:	4313      	orrs	r3, r2
 8005848:	d010      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800584a:	4b07      	ldr	r3, [pc, #28]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800584c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005850:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800585c:	4a02      	ldr	r2, [pc, #8]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800585e:	430b      	orrs	r3, r1
 8005860:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005864:	e002      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8005866:	bf00      	nop
 8005868:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800586c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005878:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800587c:	2300      	movs	r3, #0
 800587e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005882:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005886:	460b      	mov	r3, r1
 8005888:	4313      	orrs	r3, r2
 800588a:	d04c      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800588c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005890:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005894:	2b80      	cmp	r3, #128	@ 0x80
 8005896:	d02d      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005898:	2b80      	cmp	r3, #128	@ 0x80
 800589a:	d827      	bhi.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x408>
 800589c:	2b60      	cmp	r3, #96	@ 0x60
 800589e:	d02b      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80058a0:	2b60      	cmp	r3, #96	@ 0x60
 80058a2:	d823      	bhi.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x408>
 80058a4:	2b40      	cmp	r3, #64	@ 0x40
 80058a6:	d006      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80058a8:	2b40      	cmp	r3, #64	@ 0x40
 80058aa:	d81f      	bhi.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x408>
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d009      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d011      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80058b4:	e01a      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058b6:	4bbe      	ldr	r3, [pc, #760]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ba:	4abd      	ldr	r2, [pc, #756]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058c0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80058c2:	e01a      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058c8:	3308      	adds	r3, #8
 80058ca:	4618      	mov	r0, r3
 80058cc:	f002 fc32 	bl	8008134 <RCCEx_PLL2_Config>
 80058d0:	4603      	mov	r3, r0
 80058d2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80058d6:	e010      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058dc:	332c      	adds	r3, #44	@ 0x2c
 80058de:	4618      	mov	r0, r3
 80058e0:	f002 fcc0 	bl	8008264 <RCCEx_PLL3_Config>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80058ea:	e006      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80058f2:	e002      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80058f4:	bf00      	nop
 80058f6:	e000      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80058f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fa:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10d      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005902:	4bab      	ldr	r3, [pc, #684]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005904:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005908:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800590c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005910:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005914:	4aa6      	ldr	r2, [pc, #664]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005916:	430b      	orrs	r3, r1
 8005918:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800591c:	e003      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005922:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005932:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005936:	2300      	movs	r3, #0
 8005938:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800593c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005940:	460b      	mov	r3, r1
 8005942:	4313      	orrs	r3, r2
 8005944:	d053      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800594a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800594e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005952:	d033      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8005954:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005958:	d82c      	bhi.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800595a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800595e:	d02f      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8005960:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005964:	d826      	bhi.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005966:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800596a:	d008      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800596c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005970:	d820      	bhi.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800597a:	d011      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800597c:	e01a      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800597e:	4b8c      	ldr	r3, [pc, #560]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005982:	4a8b      	ldr	r2, [pc, #556]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005988:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800598a:	e01a      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800598c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005990:	3308      	adds	r3, #8
 8005992:	4618      	mov	r0, r3
 8005994:	f002 fbce 	bl	8008134 <RCCEx_PLL2_Config>
 8005998:	4603      	mov	r3, r0
 800599a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800599e:	e010      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059a4:	332c      	adds	r3, #44	@ 0x2c
 80059a6:	4618      	mov	r0, r3
 80059a8:	f002 fc5c 	bl	8008264 <RCCEx_PLL3_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80059b2:	e006      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80059ba:	e002      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80059bc:	bf00      	nop
 80059be:	e000      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80059c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059c2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10d      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80059ca:	4b79      	ldr	r3, [pc, #484]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059d0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80059d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80059dc:	4a74      	ldr	r2, [pc, #464]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059de:	430b      	orrs	r3, r1
 80059e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80059e4:	e003      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80059ea:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80059ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80059fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059fc:	2300      	movs	r3, #0
 80059fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a00:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005a04:	460b      	mov	r3, r1
 8005a06:	4313      	orrs	r3, r2
 8005a08:	d046      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a12:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005a16:	d028      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005a18:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005a1c:	d821      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005a1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a22:	d022      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005a24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a28:	d81b      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005a2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a2e:	d01c      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005a30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a34:	d815      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a3a:	d008      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8005a3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a40:	d80f      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d011      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005a46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a4a:	d00e      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005a4c:	e009      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a52:	3308      	adds	r3, #8
 8005a54:	4618      	mov	r0, r3
 8005a56:	f002 fb6d 	bl	8008134 <RCCEx_PLL2_Config>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005a60:	e004      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005a68:	e000      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8005a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a6c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10d      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005a74:	4b4e      	ldr	r3, [pc, #312]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a7a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a86:	4a4a      	ldr	r2, [pc, #296]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005a8e:	e003      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a90:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005a94:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005aa4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	677b      	str	r3, [r7, #116]	@ 0x74
 8005aaa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	d03f      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d81e      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8005ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac6:	bf00      	nop
 8005ac8:	08005b07 	.word	0x08005b07
 8005acc:	08005add 	.word	0x08005add
 8005ad0:	08005aeb 	.word	0x08005aeb
 8005ad4:	08005b07 	.word	0x08005b07
 8005ad8:	08005b07 	.word	0x08005b07
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005adc:	4b34      	ldr	r3, [pc, #208]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae0:	4a33      	ldr	r2, [pc, #204]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ae2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ae6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005ae8:	e00e      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aee:	332c      	adds	r3, #44	@ 0x2c
 8005af0:	4618      	mov	r0, r3
 8005af2:	f002 fbb7 	bl	8008264 <RCCEx_PLL3_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005afc:	e004      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005b04:	e000      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8005b06:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005b08:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10d      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005b10:	4b27      	ldr	r3, [pc, #156]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b16:	f023 0107 	bic.w	r1, r3, #7
 8005b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b22:	4a23      	ldr	r2, [pc, #140]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b24:	430b      	orrs	r3, r1
 8005b26:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005b2a:	e003      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005b30:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005b40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b42:	2300      	movs	r3, #0
 8005b44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b46:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	d04c      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b5c:	d02a      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8005b5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b62:	d821      	bhi.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005b64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b68:	d026      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8005b6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b6e:	d81b      	bhi.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005b70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b74:	d00e      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8005b76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b7a:	d815      	bhi.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01d      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8005b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b84:	d110      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b86:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8a:	4a09      	ldr	r2, [pc, #36]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b90:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005b92:	e014      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b98:	332c      	adds	r3, #44	@ 0x2c
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f002 fb62 	bl	8008264 <RCCEx_PLL3_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005ba6:	e00a      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005bae:	e006      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8005bb0:	46020c00 	.word	0x46020c00
        break;
 8005bb4:	bf00      	nop
 8005bb6:	e002      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8005bb8:	bf00      	nop
 8005bba:	e000      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8005bbc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005bbe:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10d      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005bc6:	4baf      	ldr	r3, [pc, #700]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bcc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bd8:	4aaa      	ldr	r2, [pc, #680]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005bda:	430b      	orrs	r3, r1
 8005bdc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005be0:	e003      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005be6:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005bf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bfc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005c00:	460b      	mov	r3, r1
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f000 80b5 	beq.w	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c0e:	4b9d      	ldr	r3, [pc, #628]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d113      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c1c:	4b99      	ldr	r3, [pc, #612]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c22:	4a98      	ldr	r2, [pc, #608]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005c24:	f043 0304 	orr.w	r3, r3, #4
 8005c28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005c2c:	4b95      	ldr	r3, [pc, #596]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005c44:	4b90      	ldr	r3, [pc, #576]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c48:	4a8f      	ldr	r2, [pc, #572]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005c4a:	f043 0301 	orr.w	r3, r3, #1
 8005c4e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c50:	f7fb fe38 	bl	80018c4 <HAL_GetTick>
 8005c54:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005c58:	e00b      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c5a:	f7fb fe33 	bl	80018c4 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d903      	bls.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005c70:	e005      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005c72:	4b85      	ldr	r3, [pc, #532]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d0ed      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8005c7e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d165      	bne.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c86:	4b7f      	ldr	r3, [pc, #508]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c90:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d023      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x800>
 8005c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ca0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d01b      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005cac:	4b75      	ldr	r3, [pc, #468]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cba:	4b72      	ldr	r3, [pc, #456]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cc0:	4a70      	ldr	r2, [pc, #448]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005cc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cca:	4b6e      	ldr	r3, [pc, #440]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cd0:	4a6c      	ldr	r2, [pc, #432]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cda:	4a6a      	ldr	r2, [pc, #424]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ce0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d019      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf0:	f7fb fde8 	bl	80018c4 <HAL_GetTick>
 8005cf4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cf8:	e00d      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cfa:	f7fb fde3 	bl	80018c4 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d04:	1ad2      	subs	r2, r2, r3
 8005d06:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d903      	bls.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8005d14:	e006      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d16:	4b5b      	ldr	r3, [pc, #364]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0ea      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8005d24:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10d      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005d2c:	4b55      	ldr	r3, [pc, #340]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005d2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d3a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005d3e:	4a51      	ldr	r2, [pc, #324]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005d40:	430b      	orrs	r3, r1
 8005d42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005d46:	e008      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d48:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005d4c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8005d50:	e003      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d52:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005d56:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d5a:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d107      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d62:	4b48      	ldr	r3, [pc, #288]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d68:	4a46      	ldr	r2, [pc, #280]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005d6a:	f023 0304 	bic.w	r3, r3, #4
 8005d6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005d7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d80:	2300      	movs	r3, #0
 8005d82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d84:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	d042      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d96:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005d9a:	d022      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8005d9c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005da0:	d81b      	bhi.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8005da2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005da6:	d011      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8005da8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dac:	d815      	bhi.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d019      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x902>
 8005db2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005db6:	d110      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f002 f9b8 	bl	8008134 <RCCEx_PLL2_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005dca:	e00d      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dd6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005dd8:	e006      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005de0:	e002      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005de2:	bf00      	nop
 8005de4:	e000      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005de6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005de8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10d      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005df0:	4b24      	ldr	r3, [pc, #144]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005df6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005e02:	4a20      	ldr	r2, [pc, #128]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005e04:	430b      	orrs	r3, r1
 8005e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005e0a:	e003      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e0c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005e10:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005e20:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e22:	2300      	movs	r3, #0
 8005e24:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e26:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	d031      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e3c:	d00b      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e42:	d804      	bhi.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d008      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e4c:	d007      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005e54:	e004      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005e56:	bf00      	nop
 8005e58:	e002      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005e5a:	bf00      	nop
 8005e5c:	e000      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005e5e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005e60:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d111      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005e68:	4b06      	ldr	r3, [pc, #24]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005e6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e7a:	4a02      	ldr	r2, [pc, #8]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005e82:	e007      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8005e84:	46020c00 	.word	0x46020c00
 8005e88:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005e90:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ea6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4313      	orrs	r3, r2
 8005eae:	d00c      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005eb0:	4bb2      	ldr	r3, [pc, #712]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005eb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005eb6:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ebe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ec2:	4aae      	ldr	r2, [pc, #696]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005ed6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ed8:	2300      	movs	r3, #0
 8005eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8005edc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	d019      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005eee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ef2:	d105      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ef4:	4ba1      	ldr	r3, [pc, #644]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef8:	4aa0      	ldr	r2, [pc, #640]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005efe:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005f00:	4b9e      	ldr	r3, [pc, #632]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005f02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f06:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f12:	4a9a      	ldr	r2, [pc, #616]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005f14:	430b      	orrs	r3, r1
 8005f16:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005f26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f28:	2300      	movs	r3, #0
 8005f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f2c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005f30:	460b      	mov	r3, r1
 8005f32:	4313      	orrs	r3, r2
 8005f34:	d00c      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005f36:	4b91      	ldr	r3, [pc, #580]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f3c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f44:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005f48:	4a8c      	ldr	r2, [pc, #560]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005f4a:	430b      	orrs	r3, r1
 8005f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005f5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f5e:	2300      	movs	r3, #0
 8005f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f62:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005f66:	460b      	mov	r3, r1
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	d00c      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005f6c:	4b83      	ldr	r3, [pc, #524]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f7a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005f7e:	4a7f      	ldr	r2, [pc, #508]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005f80:	430b      	orrs	r3, r1
 8005f82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005f92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f94:	2300      	movs	r3, #0
 8005f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f98:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	d00c      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005fa2:	4b76      	ldr	r3, [pc, #472]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005fa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005fa8:	f023 0218 	bic.w	r2, r3, #24
 8005fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fb0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005fb4:	4971      	ldr	r1, [pc, #452]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005fc8:	623b      	str	r3, [r7, #32]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	d032      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fdc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005fe0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fe4:	d105      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fe6:	4b65      	ldr	r3, [pc, #404]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fea:	4a64      	ldr	r2, [pc, #400]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ff0:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005ffa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ffe:	d108      	bne.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006004:	3308      	adds	r3, #8
 8006006:	4618      	mov	r0, r3
 8006008:	f002 f894 	bl	8008134 <RCCEx_PLL2_Config>
 800600c:	4603      	mov	r3, r0
 800600e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 8006012:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10d      	bne.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800601a:	4b58      	ldr	r3, [pc, #352]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800601c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006020:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006028:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800602c:	4953      	ldr	r1, [pc, #332]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006034:	e003      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006036:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800603a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800603e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006046:	2100      	movs	r1, #0
 8006048:	61b9      	str	r1, [r7, #24]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006054:	460b      	mov	r3, r1
 8006056:	4313      	orrs	r3, r2
 8006058:	d04a      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800605a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800605e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006062:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006066:	d01e      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8006068:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800606c:	d825      	bhi.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800606e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006072:	d00e      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8006074:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006078:	d81f      	bhi.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800607a:	2b00      	cmp	r3, #0
 800607c:	d021      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800607e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006082:	d11a      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006084:	4b3d      	ldr	r3, [pc, #244]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006088:	4a3c      	ldr	r2, [pc, #240]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800608a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800608e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8006090:	e018      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006096:	3308      	adds	r3, #8
 8006098:	4618      	mov	r0, r3
 800609a:	f002 f84b 	bl	8008134 <RCCEx_PLL2_Config>
 800609e:	4603      	mov	r3, r0
 80060a0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80060a4:	e00e      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060aa:	332c      	adds	r3, #44	@ 0x2c
 80060ac:	4618      	mov	r0, r3
 80060ae:	f002 f8d9 	bl	8008264 <RCCEx_PLL3_Config>
 80060b2:	4603      	mov	r3, r0
 80060b4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80060b8:	e004      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80060c0:	e000      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 80060c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10d      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80060cc:	4b2b      	ldr	r3, [pc, #172]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80060ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80060d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80060de:	4927      	ldr	r1, [pc, #156]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80060e6:	e003      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80060ec:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80060f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80060fc:	613b      	str	r3, [r7, #16]
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006106:	460b      	mov	r3, r1
 8006108:	4313      	orrs	r3, r2
 800610a:	d03d      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800610c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006114:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006118:	d00e      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800611a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800611e:	d815      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006120:	2b00      	cmp	r3, #0
 8006122:	d017      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006124:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006128:	d110      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800612a:	4b14      	ldr	r3, [pc, #80]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800612c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612e:	4a13      	ldr	r2, [pc, #76]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006134:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006136:	e00e      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800613c:	3308      	adds	r3, #8
 800613e:	4618      	mov	r0, r3
 8006140:	f001 fff8 	bl	8008134 <RCCEx_PLL2_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800614a:	e004      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006152:	e000      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8006154:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006156:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800615a:	2b00      	cmp	r3, #0
 800615c:	d110      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800615e:	4b07      	ldr	r3, [pc, #28]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006164:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800616c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006170:	4902      	ldr	r1, [pc, #8]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006172:	4313      	orrs	r3, r2
 8006174:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006178:	e006      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 800617a:	bf00      	nop
 800617c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006180:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006184:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006190:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006194:	60bb      	str	r3, [r7, #8]
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800619e:	460b      	mov	r3, r1
 80061a0:	4313      	orrs	r3, r2
 80061a2:	d00c      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80061a4:	4b2c      	ldr	r3, [pc, #176]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80061a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061aa:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80061ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80061b6:	4928      	ldr	r1, [pc, #160]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 80061be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c6:	2100      	movs	r1, #0
 80061c8:	6039      	str	r1, [r7, #0]
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	607b      	str	r3, [r7, #4]
 80061d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80061d4:	460b      	mov	r3, r1
 80061d6:	4313      	orrs	r3, r2
 80061d8:	d036      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80061da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80061e2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80061e6:	d00d      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80061e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80061ec:	d811      	bhi.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80061ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061f2:	d012      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80061f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061f8:	d80b      	bhi.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00d      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80061fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006202:	d106      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006204:	4b14      	ldr	r3, [pc, #80]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006208:	4a13      	ldr	r2, [pc, #76]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800620a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800620e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8006210:	e004      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006218:	e000      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 800621a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800621c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10d      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8006224:	4b0c      	ldr	r3, [pc, #48]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006226:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800622a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800622e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006232:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006236:	4908      	ldr	r1, [pc, #32]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800623e:	e003      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006240:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006244:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006248:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 800624c:	4618      	mov	r0, r3
 800624e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8006252:	46bd      	mov	sp, r7
 8006254:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006258:	46020c00 	.word	0x46020c00

0800625c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800625c:	b480      	push	{r7}
 800625e:	b089      	sub	sp, #36	@ 0x24
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006264:	4ba6      	ldr	r3, [pc, #664]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800626e:	4ba4      	ldr	r3, [pc, #656]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006278:	4ba1      	ldr	r3, [pc, #644]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800627a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627c:	0a1b      	lsrs	r3, r3, #8
 800627e:	f003 030f 	and.w	r3, r3, #15
 8006282:	3301      	adds	r3, #1
 8006284:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006286:	4b9e      	ldr	r3, [pc, #632]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628a:	091b      	lsrs	r3, r3, #4
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006292:	4b9b      	ldr	r3, [pc, #620]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006296:	08db      	lsrs	r3, r3, #3
 8006298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	fb02 f303 	mul.w	r3, r2, r3
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062aa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d062      	beq.n	800637a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	f200 8081 	bhi.w	80063be <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d024      	beq.n	800630c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d17a      	bne.n	80063be <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	ee07 3a90 	vmov	s15, r3
 80062ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006504 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80062d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062da:	4b89      	ldr	r3, [pc, #548]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80062dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e2:	ee07 3a90 	vmov	s15, r3
 80062e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80062ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80062ee:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006508 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80062f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80062fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006306:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800630a:	e08f      	b.n	800642c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800630c:	4b7c      	ldr	r3, [pc, #496]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d005      	beq.n	8006324 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006318:	4b79      	ldr	r3, [pc, #484]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	0f1b      	lsrs	r3, r3, #28
 800631e:	f003 030f 	and.w	r3, r3, #15
 8006322:	e006      	b.n	8006332 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006324:	4b76      	ldr	r3, [pc, #472]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006326:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800632a:	041b      	lsls	r3, r3, #16
 800632c:	0f1b      	lsrs	r3, r3, #28
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	4a76      	ldr	r2, [pc, #472]	@ (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006338:	ee07 3a90 	vmov	s15, r3
 800633c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	ee07 3a90 	vmov	s15, r3
 8006354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006358:	ed97 6a02 	vldr	s12, [r7, #8]
 800635c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006508 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006360:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006364:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006368:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800636c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006374:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006378:	e058      	b.n	800642c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	ee07 3a90 	vmov	s15, r3
 8006380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006384:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006504 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800638c:	4b5c      	ldr	r3, [pc, #368]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800638e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006394:	ee07 3a90 	vmov	s15, r3
 8006398:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800639c:	ed97 6a02 	vldr	s12, [r7, #8]
 80063a0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006508 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80063a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80063a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80063ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80063b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063bc:	e036      	b.n	800642c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80063be:	4b50      	ldr	r3, [pc, #320]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d005      	beq.n	80063d6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80063ca:	4b4d      	ldr	r3, [pc, #308]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	0f1b      	lsrs	r3, r3, #28
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	e006      	b.n	80063e4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80063d6:	4b4a      	ldr	r3, [pc, #296]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80063dc:	041b      	lsls	r3, r3, #16
 80063de:	0f1b      	lsrs	r3, r3, #28
 80063e0:	f003 030f 	and.w	r3, r3, #15
 80063e4:	4a49      	ldr	r2, [pc, #292]	@ (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80063e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ea:	ee07 3a90 	vmov	s15, r3
 80063ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	ee07 3a90 	vmov	s15, r3
 80063f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	ee07 3a90 	vmov	s15, r3
 8006406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800640a:	ed97 6a02 	vldr	s12, [r7, #8]
 800640e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006508 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800641a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800641e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006426:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800642a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800642c:	4b34      	ldr	r3, [pc, #208]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800642e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d017      	beq.n	8006468 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006438:	4b31      	ldr	r3, [pc, #196]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800643a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800643c:	0a5b      	lsrs	r3, r3, #9
 800643e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800644a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800644e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006452:	edd7 6a07 	vldr	s13, [r7, #28]
 8006456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800645a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800645e:	ee17 2a90 	vmov	r2, s15
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	e002      	b.n	800646e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800646e:	4b24      	ldr	r3, [pc, #144]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d017      	beq.n	80064aa <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800647a:	4b21      	ldr	r3, [pc, #132]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800647c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800647e:	0c1b      	lsrs	r3, r3, #16
 8006480:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006484:	ee07 3a90 	vmov	s15, r3
 8006488:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800648c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006490:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006494:	edd7 6a07 	vldr	s13, [r7, #28]
 8006498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800649c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064a0:	ee17 2a90 	vmov	r2, s15
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	605a      	str	r2, [r3, #4]
 80064a8:	e002      	b.n	80064b0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80064b0:	4b13      	ldr	r3, [pc, #76]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80064b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d017      	beq.n	80064ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80064bc:	4b10      	ldr	r3, [pc, #64]	@ (8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80064be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c0:	0e1b      	lsrs	r3, r3, #24
 80064c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064c6:	ee07 3a90 	vmov	s15, r3
 80064ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80064ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064d2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80064d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80064da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064e2:	ee17 2a90 	vmov	r2, s15
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80064ea:	e002      	b.n	80064f2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	609a      	str	r2, [r3, #8]
}
 80064f2:	bf00      	nop
 80064f4:	3724      	adds	r7, #36	@ 0x24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	46020c00 	.word	0x46020c00
 8006504:	4b742400 	.word	0x4b742400
 8006508:	46000000 	.word	0x46000000
 800650c:	0800fff0 	.word	0x0800fff0

08006510 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006510:	b480      	push	{r7}
 8006512:	b089      	sub	sp, #36	@ 0x24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006518:	4ba6      	ldr	r3, [pc, #664]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800651a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800651c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006520:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006522:	4ba4      	ldr	r3, [pc, #656]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006526:	f003 0303 	and.w	r3, r3, #3
 800652a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800652c:	4ba1      	ldr	r3, [pc, #644]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800652e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006530:	0a1b      	lsrs	r3, r3, #8
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	3301      	adds	r3, #1
 8006538:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800653a:	4b9e      	ldr	r3, [pc, #632]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800653c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653e:	091b      	lsrs	r3, r3, #4
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006546:	4b9b      	ldr	r3, [pc, #620]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654a:	08db      	lsrs	r3, r3, #3
 800654c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	fb02 f303 	mul.w	r3, r2, r3
 8006556:	ee07 3a90 	vmov	s15, r3
 800655a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b03      	cmp	r3, #3
 8006566:	d062      	beq.n	800662e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2b03      	cmp	r3, #3
 800656c:	f200 8081 	bhi.w	8006672 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d024      	beq.n	80065c0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2b02      	cmp	r3, #2
 800657a:	d17a      	bne.n	8006672 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006586:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800658a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800658e:	4b89      	ldr	r3, [pc, #548]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800659e:	ed97 6a02 	vldr	s12, [r7, #8]
 80065a2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80067bc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80065a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80065aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80065ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80065b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065be:	e08f      	b.n	80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80065c0:	4b7c      	ldr	r3, [pc, #496]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d005      	beq.n	80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80065cc:	4b79      	ldr	r3, [pc, #484]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	0f1b      	lsrs	r3, r3, #28
 80065d2:	f003 030f 	and.w	r3, r3, #15
 80065d6:	e006      	b.n	80065e6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80065d8:	4b76      	ldr	r3, [pc, #472]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065de:	041b      	lsls	r3, r3, #16
 80065e0:	0f1b      	lsrs	r3, r3, #28
 80065e2:	f003 030f 	and.w	r3, r3, #15
 80065e6:	4a76      	ldr	r2, [pc, #472]	@ (80067c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80065e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ec:	ee07 3a90 	vmov	s15, r3
 80065f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	ee07 3a90 	vmov	s15, r3
 8006608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800660c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006610:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80067bc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006614:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006618:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800661c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006620:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006628:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800662c:	e058      	b.n	80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	ee07 3a90 	vmov	s15, r3
 8006634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006638:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800663c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006640:	4b5c      	ldr	r3, [pc, #368]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006648:	ee07 3a90 	vmov	s15, r3
 800664c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006650:	ed97 6a02 	vldr	s12, [r7, #8]
 8006654:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80067bc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006658:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800665c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006660:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006664:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800666c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006670:	e036      	b.n	80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006672:	4b50      	ldr	r3, [pc, #320]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800667e:	4b4d      	ldr	r3, [pc, #308]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	0f1b      	lsrs	r3, r3, #28
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	e006      	b.n	8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800668a:	4b4a      	ldr	r3, [pc, #296]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800668c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006690:	041b      	lsls	r3, r3, #16
 8006692:	0f1b      	lsrs	r3, r3, #28
 8006694:	f003 030f 	and.w	r3, r3, #15
 8006698:	4a49      	ldr	r2, [pc, #292]	@ (80067c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800669a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	ee07 3a90 	vmov	s15, r3
 80066ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	ee07 3a90 	vmov	s15, r3
 80066ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066be:	ed97 6a02 	vldr	s12, [r7, #8]
 80066c2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80067bc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80066c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80066d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066de:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80066e0:	4b34      	ldr	r3, [pc, #208]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80066e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d017      	beq.n	800671c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066ec:	4b31      	ldr	r3, [pc, #196]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80066ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f0:	0a5b      	lsrs	r3, r3, #9
 80066f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80066fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006702:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006706:	edd7 6a07 	vldr	s13, [r7, #28]
 800670a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800670e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006712:	ee17 2a90 	vmov	r2, s15
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	e002      	b.n	8006722 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006722:	4b24      	ldr	r3, [pc, #144]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d017      	beq.n	800675e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800672e:	4b21      	ldr	r3, [pc, #132]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006732:	0c1b      	lsrs	r3, r3, #16
 8006734:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006738:	ee07 3a90 	vmov	s15, r3
 800673c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006740:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006744:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006748:	edd7 6a07 	vldr	s13, [r7, #28]
 800674c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006754:	ee17 2a90 	vmov	r2, s15
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	605a      	str	r2, [r3, #4]
 800675c:	e002      	b.n	8006764 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006764:	4b13      	ldr	r3, [pc, #76]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006768:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d017      	beq.n	80067a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006770:	4b10      	ldr	r3, [pc, #64]	@ (80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006774:	0e1b      	lsrs	r3, r3, #24
 8006776:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800677a:	ee07 3a90 	vmov	s15, r3
 800677e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006782:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006786:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800678a:	edd7 6a07 	vldr	s13, [r7, #28]
 800678e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006796:	ee17 2a90 	vmov	r2, s15
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800679e:	e002      	b.n	80067a6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	609a      	str	r2, [r3, #8]
}
 80067a6:	bf00      	nop
 80067a8:	3724      	adds	r7, #36	@ 0x24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	46020c00 	.word	0x46020c00
 80067b8:	4b742400 	.word	0x4b742400
 80067bc:	46000000 	.word	0x46000000
 80067c0:	0800fff0 	.word	0x0800fff0

080067c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b089      	sub	sp, #36	@ 0x24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80067cc:	4ba6      	ldr	r3, [pc, #664]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80067d6:	4ba4      	ldr	r3, [pc, #656]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067da:	f003 0303 	and.w	r3, r3, #3
 80067de:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80067e0:	4ba1      	ldr	r3, [pc, #644]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e4:	0a1b      	lsrs	r3, r3, #8
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	3301      	adds	r3, #1
 80067ec:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80067ee:	4b9e      	ldr	r3, [pc, #632]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f2:	091b      	lsrs	r3, r3, #4
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80067fa:	4b9b      	ldr	r3, [pc, #620]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067fe:	08db      	lsrs	r3, r3, #3
 8006800:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	fb02 f303 	mul.w	r3, r2, r3
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006812:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	2b03      	cmp	r3, #3
 800681a:	d062      	beq.n	80068e2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	2b03      	cmp	r3, #3
 8006820:	f200 8081 	bhi.w	8006926 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d024      	beq.n	8006874 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2b02      	cmp	r3, #2
 800682e:	d17a      	bne.n	8006926 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	ee07 3a90 	vmov	s15, r3
 8006836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800683a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006a6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800683e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006842:	4b89      	ldr	r3, [pc, #548]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006852:	ed97 6a02 	vldr	s12, [r7, #8]
 8006856:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800685a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800685e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006866:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800686a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800686e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8006872:	e08f      	b.n	8006994 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006874:	4b7c      	ldr	r3, [pc, #496]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d005      	beq.n	800688c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006880:	4b79      	ldr	r3, [pc, #484]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	0f1b      	lsrs	r3, r3, #28
 8006886:	f003 030f 	and.w	r3, r3, #15
 800688a:	e006      	b.n	800689a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800688c:	4b76      	ldr	r3, [pc, #472]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800688e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006892:	041b      	lsls	r3, r3, #16
 8006894:	0f1b      	lsrs	r3, r3, #28
 8006896:	f003 030f 	and.w	r3, r3, #15
 800689a:	4a76      	ldr	r2, [pc, #472]	@ (8006a74 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800689c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a0:	ee07 3a90 	vmov	s15, r3
 80068a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	ee07 3a90 	vmov	s15, r3
 80068ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	ee07 3a90 	vmov	s15, r3
 80068bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80068c4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80068c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80068d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068e0:	e058      	b.n	8006994 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	ee07 3a90 	vmov	s15, r3
 80068e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ec:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006a6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80068f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068f4:	4b5c      	ldr	r3, [pc, #368]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80068f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068fc:	ee07 3a90 	vmov	s15, r3
 8006900:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006904:	ed97 6a02 	vldr	s12, [r7, #8]
 8006908:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800690c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006910:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006914:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006918:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800691c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006920:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006924:	e036      	b.n	8006994 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006926:	4b50      	ldr	r3, [pc, #320]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d005      	beq.n	800693e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8006932:	4b4d      	ldr	r3, [pc, #308]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	0f1b      	lsrs	r3, r3, #28
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	e006      	b.n	800694c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800693e:	4b4a      	ldr	r3, [pc, #296]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006940:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006944:	041b      	lsls	r3, r3, #16
 8006946:	0f1b      	lsrs	r3, r3, #28
 8006948:	f003 030f 	and.w	r3, r3, #15
 800694c:	4a49      	ldr	r2, [pc, #292]	@ (8006a74 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800694e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006952:	ee07 3a90 	vmov	s15, r3
 8006956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	ee07 3a90 	vmov	s15, r3
 8006960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006964:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006972:	ed97 6a02 	vldr	s12, [r7, #8]
 8006976:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800697a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800697e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006986:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800698a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006992:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006994:	4b34      	ldr	r3, [pc, #208]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d017      	beq.n	80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80069a0:	4b31      	ldr	r3, [pc, #196]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80069a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a4:	0a5b      	lsrs	r3, r3, #9
 80069a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80069b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069b6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80069ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80069be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069c6:	ee17 2a90 	vmov	r2, s15
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	e002      	b.n	80069d6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80069d6:	4b24      	ldr	r3, [pc, #144]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80069d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d017      	beq.n	8006a12 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80069e2:	4b21      	ldr	r3, [pc, #132]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80069e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e6:	0c1b      	lsrs	r3, r3, #16
 80069e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069ec:	ee07 3a90 	vmov	s15, r3
 80069f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80069f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069f8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80069fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a08:	ee17 2a90 	vmov	r2, s15
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	605a      	str	r2, [r3, #4]
 8006a10:	e002      	b.n	8006a18 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006a18:	4b13      	ldr	r3, [pc, #76]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d017      	beq.n	8006a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006a24:	4b10      	ldr	r3, [pc, #64]	@ (8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a28:	0e1b      	lsrs	r3, r3, #24
 8006a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006a36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a4a:	ee17 2a90 	vmov	r2, s15
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006a52:	e002      	b.n	8006a5a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	609a      	str	r2, [r3, #8]
}
 8006a5a:	bf00      	nop
 8006a5c:	3724      	adds	r7, #36	@ 0x24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	46020c00 	.word	0x46020c00
 8006a6c:	4b742400 	.word	0x4b742400
 8006a70:	46000000 	.word	0x46000000
 8006a74:	0800fff0 	.word	0x0800fff0

08006a78 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b08e      	sub	sp, #56	@ 0x38
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006a82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a86:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8006a8a:	430b      	orrs	r3, r1
 8006a8c:	d145      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006a8e:	4ba7      	ldr	r3, [pc, #668]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a98:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006a9a:	4ba4      	ldr	r3, [pc, #656]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d108      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aae:	d104      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006ab0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab6:	f001 bb31 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006aba:	4b9c      	ldr	r3, [pc, #624]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ac4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ac8:	d114      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ad0:	d110      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ad2:	4b96      	ldr	r3, [pc, #600]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006adc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ae0:	d103      	bne.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006ae2:	23fa      	movs	r3, #250	@ 0xfa
 8006ae4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ae6:	f001 bb19 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8006aea:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006aee:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006af0:	f001 bb14 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006af4:	4b8d      	ldr	r3, [pc, #564]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006afc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b00:	d107      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b08:	d103      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006b0a:	4b89      	ldr	r3, [pc, #548]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b0e:	f001 bb05 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b16:	f001 bb01 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006b1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b1e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006b22:	430b      	orrs	r3, r1
 8006b24:	d151      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006b26:	4b81      	ldr	r3, [pc, #516]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b2c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006b30:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	2b80      	cmp	r3, #128	@ 0x80
 8006b36:	d035      	beq.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3a:	2b80      	cmp	r3, #128	@ 0x80
 8006b3c:	d841      	bhi.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b40:	2b60      	cmp	r3, #96	@ 0x60
 8006b42:	d02a      	beq.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b46:	2b60      	cmp	r3, #96	@ 0x60
 8006b48:	d83b      	bhi.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4c:	2b40      	cmp	r3, #64	@ 0x40
 8006b4e:	d009      	beq.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b52:	2b40      	cmp	r3, #64	@ 0x40
 8006b54:	d835      	bhi.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00c      	beq.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5e:	2b20      	cmp	r3, #32
 8006b60:	d012      	beq.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006b62:	e02e      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7ff fb77 	bl	800625c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b72:	f001 bad3 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b76:	f107 0318 	add.w	r3, r7, #24
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7ff fcc8 	bl	8006510 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b84:	f001 baca 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b88:	f107 030c 	add.w	r3, r7, #12
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff fe19 	bl	80067c4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b96:	f001 bac1 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006b9a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006b9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ba0:	f001 babc 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ba4:	4b61      	ldr	r3, [pc, #388]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bb0:	d103      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006bb2:	4b60      	ldr	r3, [pc, #384]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006bb4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006bb6:	f001 bab1 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bbe:	f001 baad 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bc6:	f001 baa9 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006bca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bce:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006bd2:	430b      	orrs	r3, r1
 8006bd4:	d158      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006bd6:	4b55      	ldr	r3, [pc, #340]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006bdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006be0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006be8:	d03b      	beq.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bf0:	d846      	bhi.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bf8:	d02e      	beq.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c00:	d83e      	bhi.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c08:	d00b      	beq.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c10:	d836      	bhi.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00d      	beq.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c1e:	d012      	beq.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006c20:	e02e      	b.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7ff fb18 	bl	800625c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c30:	f001 ba74 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c34:	f107 0318 	add.w	r3, r7, #24
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff fc69 	bl	8006510 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c42:	f001 ba6b 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c46:	f107 030c 	add.w	r3, r7, #12
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7ff fdba 	bl	80067c4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c54:	f001 ba62 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006c58:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006c5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c5e:	f001 ba5d 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c62:	4b32      	ldr	r3, [pc, #200]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c6e:	d103      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006c70:	4b30      	ldr	r3, [pc, #192]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006c72:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c74:	f001 ba52 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c7c:	f001 ba4e 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c84:	f001 ba4a 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c8c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006c90:	430b      	orrs	r3, r1
 8006c92:	d126      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006c94:	4b25      	ldr	r3, [pc, #148]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c9e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006ca0:	4b22      	ldr	r3, [pc, #136]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ca8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cac:	d106      	bne.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d103      	bne.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb8:	f001 ba30 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc8:	d107      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ccc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cd0:	d103      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006cd2:	4b19      	ldr	r3, [pc, #100]	@ (8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd6:	f001 ba21 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cde:	f001 ba1d 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006ce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ce6:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006cea:	430b      	orrs	r3, r1
 8006cec:	d16e      	bne.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006cee:	4b0f      	ldr	r3, [pc, #60]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cf4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006cf8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006d00:	d03d      	beq.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d04:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006d08:	d85c      	bhi.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d10:	d014      	beq.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d18:	d854      	bhi.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01f      	beq.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d26:	d012      	beq.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006d28:	e04c      	b.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006d2a:	bf00      	nop
 8006d2c:	46020c00 	.word	0x46020c00
 8006d30:	0007a120 	.word	0x0007a120
 8006d34:	00f42400 	.word	0x00f42400
 8006d38:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff fa8b 	bl	800625c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d4a:	f001 b9e7 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d4e:	f107 0318 	add.w	r3, r7, #24
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff fbdc 	bl	8006510 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d5c:	f001 b9de 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006d60:	4ba7      	ldr	r3, [pc, #668]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d6c:	d103      	bne.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006d6e:	4ba5      	ldr	r3, [pc, #660]	@ (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d70:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d72:	f001 b9d3 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006d76:	2300      	movs	r3, #0
 8006d78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d7a:	f001 b9cf 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d7e:	4ba0      	ldr	r3, [pc, #640]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d118      	bne.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d8a:	4b9d      	ldr	r3, [pc, #628]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d005      	beq.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006d96:	4b9a      	ldr	r3, [pc, #616]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	0e1b      	lsrs	r3, r3, #24
 8006d9c:	f003 030f 	and.w	r3, r3, #15
 8006da0:	e006      	b.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006da2:	4b97      	ldr	r3, [pc, #604]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006da8:	041b      	lsls	r3, r3, #16
 8006daa:	0e1b      	lsrs	r3, r3, #24
 8006dac:	f003 030f 	and.w	r3, r3, #15
 8006db0:	4a95      	ldr	r2, [pc, #596]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006db8:	f001 b9b0 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dc0:	f001 b9ac 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dc8:	f001 b9a8 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dd0:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006dd4:	430b      	orrs	r3, r1
 8006dd6:	d17f      	bne.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006dd8:	4b89      	ldr	r3, [pc, #548]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006dda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006de2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d165      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006dea:	4b85      	ldr	r3, [pc, #532]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006df0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006df4:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006dfc:	d034      	beq.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e00:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006e04:	d853      	bhi.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e0c:	d00b      	beq.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e14:	d84b      	bhi.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d016      	beq.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e22:	d009      	beq.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006e24:	e043      	b.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff fa16 	bl	800625c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e32:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006e34:	f001 b972 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e38:	f107 0318 	add.w	r3, r7, #24
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff fb67 	bl	8006510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006e46:	f001 b969 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006e4a:	4b6d      	ldr	r3, [pc, #436]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e56:	d103      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006e58:	4b6a      	ldr	r3, [pc, #424]	@ (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e5a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006e5c:	f001 b95e 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006e64:	f001 b95a 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e68:	4b65      	ldr	r3, [pc, #404]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0320 	and.w	r3, r3, #32
 8006e70:	2b20      	cmp	r3, #32
 8006e72:	d118      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e74:	4b62      	ldr	r3, [pc, #392]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d005      	beq.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006e80:	4b5f      	ldr	r3, [pc, #380]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	0e1b      	lsrs	r3, r3, #24
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	e006      	b.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006e8c:	4b5c      	ldr	r3, [pc, #368]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e92:	041b      	lsls	r3, r3, #16
 8006e94:	0e1b      	lsrs	r3, r3, #24
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	4a5b      	ldr	r2, [pc, #364]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ea0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006ea2:	f001 b93b 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006eaa:	f001 b937 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006eb2:	f001 b933 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ebc:	d108      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff f9ca 	bl	800625c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ecc:	f001 b926 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ed4:	f001 b922 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006edc:	1e51      	subs	r1, r2, #1
 8006ede:	430b      	orrs	r3, r1
 8006ee0:	d136      	bne.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006ee2:	4b47      	ldr	r3, [pc, #284]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ee8:	f003 0303 	and.w	r3, r3, #3
 8006eec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d104      	bne.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006ef4:	f7fe fa48 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 8006ef8:	6378      	str	r0, [r7, #52]	@ 0x34
 8006efa:	f001 b90f 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d104      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f04:	f7fe f910 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 8006f08:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f0a:	f001 b907 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f1a:	d106      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d103      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8006f22:	4b3a      	ldr	r3, [pc, #232]	@ (800700c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f26:	f001 b8f9 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006f2a:	4b35      	ldr	r3, [pc, #212]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d107      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d104      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8006f3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f44:	f001 b8ea 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f4c:	f001 b8e6 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f54:	1e91      	subs	r1, r2, #2
 8006f56:	430b      	orrs	r3, r1
 8006f58:	d136      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006f5a:	4b29      	ldr	r3, [pc, #164]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f60:	f003 030c 	and.w	r3, r3, #12
 8006f64:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d104      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f6c:	f7fe f9f8 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8006f70:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f72:	f001 b8d3 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d104      	bne.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f7c:	f7fe f8d4 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 8006f80:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f82:	f001 b8cb 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006f86:	4b1e      	ldr	r3, [pc, #120]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f92:	d106      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f96:	2b08      	cmp	r3, #8
 8006f98:	d103      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800700c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f9e:	f001 b8bd 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006fa2:	4b17      	ldr	r3, [pc, #92]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d107      	bne.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb2:	2b0c      	cmp	r3, #12
 8006fb4:	d104      	bne.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006fb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fba:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fbc:	f001 b8ae 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fc4:	f001 b8aa 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fcc:	1f11      	subs	r1, r2, #4
 8006fce:	430b      	orrs	r3, r1
 8006fd0:	d13f      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fd8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006fdc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d104      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006fe4:	f7fe f9bc 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8006fe8:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fea:	f001 b897 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff0:	2b10      	cmp	r3, #16
 8006ff2:	d10d      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ff4:	f7fe f898 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 8006ff8:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ffa:	f001 b88f 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8006ffe:	bf00      	nop
 8007000:	46020c00 	.word	0x46020c00
 8007004:	02dc6c00 	.word	0x02dc6c00
 8007008:	0800fff0 	.word	0x0800fff0
 800700c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007010:	4ba8      	ldr	r3, [pc, #672]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800701c:	d106      	bne.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800701e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007020:	2b20      	cmp	r3, #32
 8007022:	d103      	bne.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8007024:	4ba4      	ldr	r3, [pc, #656]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007026:	637b      	str	r3, [r7, #52]	@ 0x34
 8007028:	f001 b878 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800702c:	4ba1      	ldr	r3, [pc, #644]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800702e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b02      	cmp	r3, #2
 8007038:	d107      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703c:	2b30      	cmp	r3, #48	@ 0x30
 800703e:	d104      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8007040:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007044:	637b      	str	r3, [r7, #52]	@ 0x34
 8007046:	f001 b869 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	637b      	str	r3, [r7, #52]	@ 0x34
 800704e:	f001 b865 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007056:	f1a2 0108 	sub.w	r1, r2, #8
 800705a:	430b      	orrs	r3, r1
 800705c:	d136      	bne.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800705e:	4b95      	ldr	r3, [pc, #596]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007064:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007068:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800706a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706c:	2b00      	cmp	r3, #0
 800706e:	d104      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007070:	f7fe f976 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8007074:	6378      	str	r0, [r7, #52]	@ 0x34
 8007076:	f001 b851 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707c:	2b40      	cmp	r3, #64	@ 0x40
 800707e:	d104      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007080:	f7fe f852 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 8007084:	6378      	str	r0, [r7, #52]	@ 0x34
 8007086:	f001 b849 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800708a:	4b8a      	ldr	r3, [pc, #552]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007096:	d106      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8007098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709a:	2b80      	cmp	r3, #128	@ 0x80
 800709c:	d103      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800709e:	4b86      	ldr	r3, [pc, #536]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80070a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a2:	f001 b83b 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80070a6:	4b83      	ldr	r3, [pc, #524]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80070a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d107      	bne.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80070b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80070b8:	d104      	bne.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80070ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070be:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c0:	f001 b82c 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c8:	f001 b828 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80070cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070d0:	f1a2 0110 	sub.w	r1, r2, #16
 80070d4:	430b      	orrs	r3, r1
 80070d6:	d139      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80070d8:	4b76      	ldr	r3, [pc, #472]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80070da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070e2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80070e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d104      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80070ea:	f7fe f939 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 80070ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80070f0:	f001 b814 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80070f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070fa:	d104      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070fc:	f7fe f814 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 8007100:	6378      	str	r0, [r7, #52]	@ 0x34
 8007102:	f001 b80b 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007106:	4b6b      	ldr	r3, [pc, #428]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800710e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007112:	d107      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8007114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007116:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800711a:	d103      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800711c:	4b66      	ldr	r3, [pc, #408]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800711e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007120:	f000 bffc 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007124:	4b63      	ldr	r3, [pc, #396]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b02      	cmp	r3, #2
 8007130:	d108      	bne.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007134:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007138:	d104      	bne.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800713a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800713e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007140:	f000 bfec 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	637b      	str	r3, [r7, #52]	@ 0x34
 8007148:	f000 bfe8 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800714c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007150:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8007154:	430b      	orrs	r3, r1
 8007156:	d139      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007158:	4b56      	ldr	r3, [pc, #344]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800715a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800715e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007162:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007166:	2b00      	cmp	r3, #0
 8007168:	d104      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800716a:	f7fe f8f9 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 800716e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007170:	f000 bfd4 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8007174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800717a:	d104      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800717c:	f7fd ffd4 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 8007180:	6378      	str	r0, [r7, #52]	@ 0x34
 8007182:	f000 bfcb 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007186:	4b4b      	ldr	r3, [pc, #300]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800718e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007192:	d107      	bne.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8007194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007196:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800719a:	d103      	bne.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800719c:	4b46      	ldr	r3, [pc, #280]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800719e:	637b      	str	r3, [r7, #52]	@ 0x34
 80071a0:	f000 bfbc 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80071a4:	4b43      	ldr	r3, [pc, #268]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80071a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d108      	bne.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 80071b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071b8:	d104      	bne.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 80071ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071be:	637b      	str	r3, [r7, #52]	@ 0x34
 80071c0:	f000 bfac 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071c8:	f000 bfa8 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80071cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d0:	f1a2 0120 	sub.w	r1, r2, #32
 80071d4:	430b      	orrs	r3, r1
 80071d6:	d158      	bne.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80071d8:	4b36      	ldr	r3, [pc, #216]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80071da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80071e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d104      	bne.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80071ea:	f7fe f8e1 	bl	80053b0 <HAL_RCC_GetPCLK3Freq>
 80071ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80071f0:	f000 bf94 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d104      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80071fa:	f7fd ff95 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 80071fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8007200:	f000 bf8c 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007204:	4b2b      	ldr	r3, [pc, #172]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800720c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007210:	d106      	bne.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8007212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007214:	2b02      	cmp	r3, #2
 8007216:	d103      	bne.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8007218:	4b27      	ldr	r3, [pc, #156]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800721a:	637b      	str	r3, [r7, #52]	@ 0x34
 800721c:	f000 bf7e 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007220:	4b24      	ldr	r3, [pc, #144]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007222:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b02      	cmp	r3, #2
 800722c:	d107      	bne.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800722e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007230:	2b03      	cmp	r3, #3
 8007232:	d104      	bne.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8007234:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007238:	637b      	str	r3, [r7, #52]	@ 0x34
 800723a:	f000 bf6f 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800723e:	4b1d      	ldr	r3, [pc, #116]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b20      	cmp	r3, #32
 8007248:	d11b      	bne.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800724a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724c:	2b04      	cmp	r3, #4
 800724e:	d118      	bne.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007250:	4b18      	ldr	r3, [pc, #96]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800725c:	4b15      	ldr	r3, [pc, #84]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	0e1b      	lsrs	r3, r3, #24
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	e006      	b.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8007268:	4b12      	ldr	r3, [pc, #72]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800726a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800726e:	041b      	lsls	r3, r3, #16
 8007270:	0e1b      	lsrs	r3, r3, #24
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	4a11      	ldr	r2, [pc, #68]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800727c:	637b      	str	r3, [r7, #52]	@ 0x34
 800727e:	f000 bf4d 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	637b      	str	r3, [r7, #52]	@ 0x34
 8007286:	f000 bf49 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800728a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800728e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007292:	430b      	orrs	r3, r1
 8007294:	d172      	bne.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007296:	4b07      	ldr	r3, [pc, #28]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800729c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80072a0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80072a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072a8:	d10a      	bne.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80072aa:	f7fd ff3d 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 80072ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80072b0:	f000 bf34 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80072b4:	46020c00 	.word	0x46020c00
 80072b8:	00f42400 	.word	0x00f42400
 80072bc:	0800fff0 	.word	0x0800fff0
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072c6:	d108      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072c8:	f107 0318 	add.w	r3, r7, #24
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff f91f 	bl	8006510 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d6:	f000 bf21 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d104      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80072e0:	f7fe f824 	bl	800532c <HAL_RCC_GetHCLKFreq>
 80072e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80072e6:	f000 bf19 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80072ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ec:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80072f0:	d122      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80072f2:	4bb0      	ldr	r3, [pc, #704]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0320 	and.w	r3, r3, #32
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	d118      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072fe:	4bad      	ldr	r3, [pc, #692]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d005      	beq.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800730a:	4baa      	ldr	r3, [pc, #680]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	0e1b      	lsrs	r3, r3, #24
 8007310:	f003 030f 	and.w	r3, r3, #15
 8007314:	e006      	b.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8007316:	4ba7      	ldr	r3, [pc, #668]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800731c:	041b      	lsls	r3, r3, #16
 800731e:	0e1b      	lsrs	r3, r3, #24
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	4aa4      	ldr	r2, [pc, #656]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800732a:	637b      	str	r3, [r7, #52]	@ 0x34
 800732c:	f000 bef6 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	637b      	str	r3, [r7, #52]	@ 0x34
 8007334:	f000 bef2 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007338:	4b9e      	ldr	r3, [pc, #632]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007344:	d107      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007348:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800734c:	d103      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800734e:	4b9b      	ldr	r3, [pc, #620]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8007350:	637b      	str	r3, [r7, #52]	@ 0x34
 8007352:	f000 bee3 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007356:	4b97      	ldr	r3, [pc, #604]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800735e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007362:	d107      	bne.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8007364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007366:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800736a:	d103      	bne.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800736c:	4b93      	ldr	r3, [pc, #588]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800736e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007370:	f000 bed4 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	637b      	str	r3, [r7, #52]	@ 0x34
 8007378:	f000 bed0 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800737c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007380:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007384:	430b      	orrs	r3, r1
 8007386:	d158      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007388:	4b8a      	ldr	r3, [pc, #552]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800738a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800738e:	f003 0307 	and.w	r3, r3, #7
 8007392:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007396:	2b04      	cmp	r3, #4
 8007398:	d84b      	bhi.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800739a:	a201      	add	r2, pc, #4	@ (adr r2, 80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800739c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a0:	080073d9 	.word	0x080073d9
 80073a4:	080073b5 	.word	0x080073b5
 80073a8:	080073c7 	.word	0x080073c7
 80073ac:	080073e3 	.word	0x080073e3
 80073b0:	080073ed 	.word	0x080073ed
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe ff4f 	bl	800625c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80073be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073c2:	f000 beab 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073c6:	f107 030c 	add.w	r3, r7, #12
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff f9fa 	bl	80067c4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073d4:	f000 bea2 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80073d8:	f7fd ffa8 	bl	800532c <HAL_RCC_GetHCLKFreq>
 80073dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80073de:	f000 be9d 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80073e2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80073e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073e8:	f000 be98 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80073ec:	4b71      	ldr	r3, [pc, #452]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0320 	and.w	r3, r3, #32
 80073f4:	2b20      	cmp	r3, #32
 80073f6:	d118      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073f8:	4b6e      	ldr	r3, [pc, #440]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d005      	beq.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007404:	4b6b      	ldr	r3, [pc, #428]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	0e1b      	lsrs	r3, r3, #24
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	e006      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8007410:	4b68      	ldr	r3, [pc, #416]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007416:	041b      	lsls	r3, r3, #16
 8007418:	0e1b      	lsrs	r3, r3, #24
 800741a:	f003 030f 	and.w	r3, r3, #15
 800741e:	4a66      	ldr	r2, [pc, #408]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007424:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007426:	f000 be79 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800742e:	f000 be75 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007436:	f000 be71 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800743a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800743e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007442:	430b      	orrs	r3, r1
 8007444:	d167      	bne.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007446:	4b5b      	ldr	r3, [pc, #364]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800744c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007450:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007454:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007458:	d036      	beq.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800745a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007460:	d855      	bhi.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007464:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007468:	d029      	beq.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800746a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007470:	d84d      	bhi.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007474:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007478:	d013      	beq.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007480:	d845      	bhi.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007484:	2b00      	cmp	r3, #0
 8007486:	d015      	beq.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8007488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800748e:	d13e      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007494:	4618      	mov	r0, r3
 8007496:	f7fe fee1 	bl	800625c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800749a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800749e:	f000 be3d 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074a2:	f107 030c 	add.w	r3, r7, #12
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7ff f98c 	bl	80067c4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074b0:	f000 be34 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80074b4:	f7fd ff3a 	bl	800532c <HAL_RCC_GetHCLKFreq>
 80074b8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80074ba:	f000 be2f 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80074be:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80074c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074c4:	f000 be2a 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80074c8:	4b3a      	ldr	r3, [pc, #232]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0320 	and.w	r3, r3, #32
 80074d0:	2b20      	cmp	r3, #32
 80074d2:	d118      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074d4:	4b37      	ldr	r3, [pc, #220]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d005      	beq.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80074e0:	4b34      	ldr	r3, [pc, #208]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	0e1b      	lsrs	r3, r3, #24
 80074e6:	f003 030f 	and.w	r3, r3, #15
 80074ea:	e006      	b.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80074ec:	4b31      	ldr	r3, [pc, #196]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80074ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074f2:	041b      	lsls	r3, r3, #16
 80074f4:	0e1b      	lsrs	r3, r3, #24
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	4a2f      	ldr	r2, [pc, #188]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80074fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007500:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007502:	f000 be0b 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007506:	2300      	movs	r3, #0
 8007508:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800750a:	f000 be07 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007512:	f000 be03 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800751a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800751e:	430b      	orrs	r3, r1
 8007520:	d152      	bne.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007522:	4b24      	ldr	r3, [pc, #144]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007528:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800752c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800752e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007534:	f7fd ff14 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8007538:	6378      	str	r0, [r7, #52]	@ 0x34
 800753a:	f000 bdef 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800753e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007544:	d104      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007546:	f7fd fdef 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 800754a:	6378      	str	r0, [r7, #52]	@ 0x34
 800754c:	f000 bde6 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007550:	4b18      	ldr	r3, [pc, #96]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800755c:	d107      	bne.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800755e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007560:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007564:	d103      	bne.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8007566:	4b15      	ldr	r3, [pc, #84]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8007568:	637b      	str	r3, [r7, #52]	@ 0x34
 800756a:	f000 bdd7 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800756e:	4b11      	ldr	r3, [pc, #68]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0320 	and.w	r3, r3, #32
 8007576:	2b20      	cmp	r3, #32
 8007578:	d122      	bne.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007580:	d11e      	bne.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007582:	4b0c      	ldr	r3, [pc, #48]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d005      	beq.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800758e:	4b09      	ldr	r3, [pc, #36]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	0e1b      	lsrs	r3, r3, #24
 8007594:	f003 030f 	and.w	r3, r3, #15
 8007598:	e006      	b.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800759a:	4b06      	ldr	r3, [pc, #24]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800759c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075a0:	041b      	lsls	r3, r3, #16
 80075a2:	0e1b      	lsrs	r3, r3, #24
 80075a4:	f003 030f 	and.w	r3, r3, #15
 80075a8:	4a03      	ldr	r2, [pc, #12]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80075aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80075b0:	f000 bdb4 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80075b4:	46020c00 	.word	0x46020c00
 80075b8:	0800fff0 	.word	0x0800fff0
 80075bc:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80075c0:	2300      	movs	r3, #0
 80075c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075c4:	f000 bdaa 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80075c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075cc:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80075d0:	430b      	orrs	r3, r1
 80075d2:	d14c      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80075d4:	4ba8      	ldr	r3, [pc, #672]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80075d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075da:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80075de:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80075e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d104      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80075e6:	f7fd febb 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 80075ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80075ec:	f000 bd96 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80075f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075f6:	d104      	bne.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80075f8:	f7fd fd96 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 80075fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80075fe:	f000 bd8d 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007602:	4b9d      	ldr	r3, [pc, #628]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800760a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800760e:	d107      	bne.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8007610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007616:	d103      	bne.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 8007618:	4b98      	ldr	r3, [pc, #608]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800761a:	637b      	str	r3, [r7, #52]	@ 0x34
 800761c:	f000 bd7e 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007620:	4b95      	ldr	r3, [pc, #596]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0320 	and.w	r3, r3, #32
 8007628:	2b20      	cmp	r3, #32
 800762a:	d11c      	bne.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800762c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007632:	d118      	bne.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007634:	4b90      	ldr	r3, [pc, #576]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d005      	beq.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8007640:	4b8d      	ldr	r3, [pc, #564]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	0e1b      	lsrs	r3, r3, #24
 8007646:	f003 030f 	and.w	r3, r3, #15
 800764a:	e006      	b.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800764c:	4b8a      	ldr	r3, [pc, #552]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800764e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007652:	041b      	lsls	r3, r3, #16
 8007654:	0e1b      	lsrs	r3, r3, #24
 8007656:	f003 030f 	and.w	r3, r3, #15
 800765a:	4a89      	ldr	r2, [pc, #548]	@ (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800765c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007660:	637b      	str	r3, [r7, #52]	@ 0x34
 8007662:	f000 bd5b 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	637b      	str	r3, [r7, #52]	@ 0x34
 800766a:	f000 bd57 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800766e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007672:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007676:	430b      	orrs	r3, r1
 8007678:	d158      	bne.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800767a:	4b7f      	ldr	r3, [pc, #508]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800767c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007680:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007684:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007688:	2bc0      	cmp	r3, #192	@ 0xc0
 800768a:	d028      	beq.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800768c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007690:	d848      	bhi.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	2b80      	cmp	r3, #128	@ 0x80
 8007696:	d00e      	beq.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769a:	2b80      	cmp	r3, #128	@ 0x80
 800769c:	d842      	bhi.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800769e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	2b40      	cmp	r3, #64	@ 0x40
 80076a8:	d014      	beq.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80076aa:	e03b      	b.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80076ac:	f7fd fe80 	bl	80053b0 <HAL_RCC_GetPCLK3Freq>
 80076b0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80076b2:	f000 bd33 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076b6:	4b70      	ldr	r3, [pc, #448]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076c2:	d103      	bne.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 80076c4:	4b6d      	ldr	r3, [pc, #436]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80076c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076c8:	f000 bd28 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076d0:	f000 bd24 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80076d4:	f7fd fd28 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 80076d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80076da:	f000 bd1f 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80076de:	4b66      	ldr	r3, [pc, #408]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d118      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076ea:	4b63      	ldr	r3, [pc, #396]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d005      	beq.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 80076f6:	4b60      	ldr	r3, [pc, #384]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	0e1b      	lsrs	r3, r3, #24
 80076fc:	f003 030f 	and.w	r3, r3, #15
 8007700:	e006      	b.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8007702:	4b5d      	ldr	r3, [pc, #372]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007708:	041b      	lsls	r3, r3, #16
 800770a:	0e1b      	lsrs	r3, r3, #24
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	4a5b      	ldr	r2, [pc, #364]	@ (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007716:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007718:	f000 bd00 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007720:	f000 bcfc 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007728:	f000 bcf8 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800772c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007730:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8007734:	430b      	orrs	r3, r1
 8007736:	d14c      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007738:	4b4f      	ldr	r3, [pc, #316]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800773a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800773e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007742:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007746:	2b00      	cmp	r3, #0
 8007748:	d104      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800774a:	f7fd fe09 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 800774e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007750:	f000 bce4 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007756:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800775a:	d104      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800775c:	f7fd fce4 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 8007760:	6378      	str	r0, [r7, #52]	@ 0x34
 8007762:	f000 bcdb 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007766:	4b44      	ldr	r3, [pc, #272]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800776e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007772:	d107      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8007774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007776:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800777a:	d103      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800777c:	4b3f      	ldr	r3, [pc, #252]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800777e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007780:	f000 bccc 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007784:	4b3c      	ldr	r3, [pc, #240]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0320 	and.w	r3, r3, #32
 800778c:	2b20      	cmp	r3, #32
 800778e:	d11c      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8007790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007792:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007796:	d118      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007798:	4b37      	ldr	r3, [pc, #220]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80077a4:	4b34      	ldr	r3, [pc, #208]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	0e1b      	lsrs	r3, r3, #24
 80077aa:	f003 030f 	and.w	r3, r3, #15
 80077ae:	e006      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80077b0:	4b31      	ldr	r3, [pc, #196]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80077b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077b6:	041b      	lsls	r3, r3, #16
 80077b8:	0e1b      	lsrs	r3, r3, #24
 80077ba:	f003 030f 	and.w	r3, r3, #15
 80077be:	4a30      	ldr	r2, [pc, #192]	@ (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80077c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c6:	f000 bca9 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ce:	f000 bca5 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 80077d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d6:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 80077da:	430b      	orrs	r3, r1
 80077dc:	d152      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 80077de:	4b26      	ldr	r3, [pc, #152]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80077e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077e4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80077e8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 80077ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d104      	bne.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80077f0:	f7fd fdb6 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 80077f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80077f6:	f000 bc91 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007800:	d104      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007802:	f7fd fc91 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 8007806:	6378      	str	r0, [r7, #52]	@ 0x34
 8007808:	f000 bc88 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800780c:	4b1a      	ldr	r3, [pc, #104]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007814:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007818:	d107      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800781a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007820:	d103      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8007822:	4b16      	ldr	r3, [pc, #88]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007824:	637b      	str	r3, [r7, #52]	@ 0x34
 8007826:	f000 bc79 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800782a:	4b13      	ldr	r3, [pc, #76]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b20      	cmp	r3, #32
 8007834:	d11c      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8007836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007838:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800783c:	d118      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800783e:	4b0e      	ldr	r3, [pc, #56]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d005      	beq.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800784a:	4b0b      	ldr	r3, [pc, #44]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	0e1b      	lsrs	r3, r3, #24
 8007850:	f003 030f 	and.w	r3, r3, #15
 8007854:	e006      	b.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 8007856:	4b08      	ldr	r3, [pc, #32]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007858:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800785c:	041b      	lsls	r3, r3, #16
 800785e:	0e1b      	lsrs	r3, r3, #24
 8007860:	f003 030f 	and.w	r3, r3, #15
 8007864:	4a06      	ldr	r2, [pc, #24]	@ (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800786a:	637b      	str	r3, [r7, #52]	@ 0x34
 800786c:	f000 bc56 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	637b      	str	r3, [r7, #52]	@ 0x34
 8007874:	f000 bc52 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007878:	46020c00 	.word	0x46020c00
 800787c:	00f42400 	.word	0x00f42400
 8007880:	0800fff0 	.word	0x0800fff0
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8007884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007888:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800788c:	430b      	orrs	r3, r1
 800788e:	d14a      	bne.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8007890:	4ba5      	ldr	r3, [pc, #660]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007892:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007896:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800789a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800789c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d104      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80078a2:	f7fd fd5d 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 80078a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80078a8:	f000 bc38 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 80078ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078b2:	d104      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078b4:	f7fd fc38 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 80078b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80078ba:	f000 bc2f 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 80078be:	4b9a      	ldr	r3, [pc, #616]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078ca:	d107      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80078cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078d2:	d103      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 80078d4:	4b95      	ldr	r3, [pc, #596]	@ (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80078d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80078d8:	f000 bc20 	b.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 80078dc:	4b92      	ldr	r3, [pc, #584]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0320 	and.w	r3, r3, #32
 80078e4:	2b20      	cmp	r3, #32
 80078e6:	d11b      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 80078e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80078ee:	d117      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80078f0:	4b8d      	ldr	r3, [pc, #564]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d005      	beq.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 80078fc:	4b8a      	ldr	r3, [pc, #552]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	0e1b      	lsrs	r3, r3, #24
 8007902:	f003 030f 	and.w	r3, r3, #15
 8007906:	e006      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 8007908:	4b87      	ldr	r3, [pc, #540]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800790a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800790e:	041b      	lsls	r3, r3, #16
 8007910:	0e1b      	lsrs	r3, r3, #24
 8007912:	f003 030f 	and.w	r3, r3, #15
 8007916:	4a86      	ldr	r2, [pc, #536]	@ (8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800791c:	637b      	str	r3, [r7, #52]	@ 0x34
 800791e:	e3fd      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8007920:	2300      	movs	r3, #0
 8007922:	637b      	str	r3, [r7, #52]	@ 0x34
 8007924:	e3fa      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800792a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800792e:	430b      	orrs	r3, r1
 8007930:	d164      	bne.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007932:	4b7d      	ldr	r3, [pc, #500]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007934:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007938:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800793c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800793e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007940:	2b00      	cmp	r3, #0
 8007942:	d120      	bne.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007944:	4b78      	ldr	r3, [pc, #480]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0320 	and.w	r3, r3, #32
 800794c:	2b20      	cmp	r3, #32
 800794e:	d117      	bne.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007950:	4b75      	ldr	r3, [pc, #468]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d005      	beq.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 800795c:	4b72      	ldr	r3, [pc, #456]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	0e1b      	lsrs	r3, r3, #24
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	e006      	b.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 8007968:	4b6f      	ldr	r3, [pc, #444]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800796a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800796e:	041b      	lsls	r3, r3, #16
 8007970:	0e1b      	lsrs	r3, r3, #24
 8007972:	f003 030f 	and.w	r3, r3, #15
 8007976:	4a6e      	ldr	r2, [pc, #440]	@ (8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800797c:	637b      	str	r3, [r7, #52]	@ 0x34
 800797e:	e3cd      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8007980:	2300      	movs	r3, #0
 8007982:	637b      	str	r3, [r7, #52]	@ 0x34
 8007984:	e3ca      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007986:	4b68      	ldr	r3, [pc, #416]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800798c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007990:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007994:	d112      	bne.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 8007996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007998:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800799c:	d10e      	bne.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800799e:	4b62      	ldr	r3, [pc, #392]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80079a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079ac:	d102      	bne.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 80079ae:	23fa      	movs	r3, #250	@ 0xfa
 80079b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079b2:	e3b3      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80079b4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80079b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079ba:	e3af      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80079bc:	4b5a      	ldr	r3, [pc, #360]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079c8:	d106      	bne.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80079ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079d0:	d102      	bne.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 80079d2:	4b56      	ldr	r3, [pc, #344]	@ (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80079d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079d6:	e3a1      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80079d8:	4b53      	ldr	r3, [pc, #332]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80079da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d107      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079ec:	d103      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 80079ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f4:	e392      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80079f6:	2300      	movs	r3, #0
 80079f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079fa:	e38f      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80079fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a00:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007a04:	430b      	orrs	r3, r1
 8007a06:	d164      	bne.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007a08:	4b47      	ldr	r3, [pc, #284]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007a0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a0e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a12:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d120      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a1a:	4b43      	ldr	r3, [pc, #268]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0320 	and.w	r3, r3, #32
 8007a22:	2b20      	cmp	r3, #32
 8007a24:	d117      	bne.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a26:	4b40      	ldr	r3, [pc, #256]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d005      	beq.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 8007a32:	4b3d      	ldr	r3, [pc, #244]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	0e1b      	lsrs	r3, r3, #24
 8007a38:	f003 030f 	and.w	r3, r3, #15
 8007a3c:	e006      	b.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8007a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007a40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a44:	041b      	lsls	r3, r3, #16
 8007a46:	0e1b      	lsrs	r3, r3, #24
 8007a48:	f003 030f 	and.w	r3, r3, #15
 8007a4c:	4a38      	ldr	r2, [pc, #224]	@ (8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a54:	e362      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a5a:	e35f      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007a5c:	4b32      	ldr	r3, [pc, #200]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007a5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a6a:	d112      	bne.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a72:	d10e      	bne.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007a74:	4b2c      	ldr	r3, [pc, #176]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007a76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a82:	d102      	bne.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 8007a84:	23fa      	movs	r3, #250	@ 0xfa
 8007a86:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007a88:	e348      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8007a8a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007a8e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007a90:	e344      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007a92:	4b25      	ldr	r3, [pc, #148]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a9e:	d106      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007aa6:	d102      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 8007aa8:	4b20      	ldr	r3, [pc, #128]	@ (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aac:	e336      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007aae:	4b1e      	ldr	r3, [pc, #120]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d107      	bne.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 8007abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ac2:	d103      	bne.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 8007ac4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aca:	e327      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad0:	e324      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ad6:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007ada:	430b      	orrs	r3, r1
 8007adc:	d14e      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007ade:	4b12      	ldr	r3, [pc, #72]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ae4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007ae8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d103      	bne.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007af0:	f7fd fc36 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8007af4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007af6:	e311      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007af8:	4b0b      	ldr	r3, [pc, #44]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007afe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b06:	d119      	bne.n	8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8007b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b0e:	d115      	bne.n	8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b10:	4b05      	ldr	r3, [pc, #20]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007b12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b1e:	d109      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 8007b20:	23fa      	movs	r3, #250	@ 0xfa
 8007b22:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b24:	e2fa      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007b26:	bf00      	nop
 8007b28:	46020c00 	.word	0x46020c00
 8007b2c:	00f42400 	.word	0x00f42400
 8007b30:	0800fff0 	.word	0x0800fff0
      }
      else
      {
        frequency = LSI_VALUE;
 8007b34:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007b38:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b3a:	e2ef      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007b3c:	4ba8      	ldr	r3, [pc, #672]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b48:	d106      	bne.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007b50:	d102      	bne.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 8007b52:	4ba4      	ldr	r3, [pc, #656]	@ (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b56:	e2e1      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007b58:	4ba1      	ldr	r3, [pc, #644]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d107      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007b6c:	d103      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 8007b6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b74:	e2d2      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b7a:	e2cf      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b80:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007b84:	430b      	orrs	r3, r1
 8007b86:	d12d      	bne.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007b88:	4b95      	ldr	r3, [pc, #596]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b8e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007b92:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007b94:	4b92      	ldr	r3, [pc, #584]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ba0:	d105      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d102      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 8007ba8:	4b8e      	ldr	r3, [pc, #568]	@ (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bac:	e2b6      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007bb4:	d107      	bne.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe fb4e 	bl	800625c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bc4:	e2aa      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007bcc:	d107      	bne.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bce:	f107 0318 	add.w	r3, r7, #24
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fe fc9c 	bl	8006510 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bdc:	e29e      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007be2:	e29b      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007be8:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007bec:	430b      	orrs	r3, r1
 8007bee:	d156      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007bf0:	4b7b      	ldr	r3, [pc, #492]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bf6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007bfa:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c02:	d028      	beq.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 8007c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c0a:	d845      	bhi.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c12:	d013      	beq.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 8007c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c1a:	d83d      	bhi.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d004      	beq.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 8007c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c28:	d004      	beq.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 8007c2a:	e035      	b.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007c2c:	f7fd fbac 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 8007c30:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007c32:	e273      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007c34:	f7fd fa78 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 8007c38:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007c3a:	e26f      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c3c:	4b68      	ldr	r3, [pc, #416]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c48:	d102      	bne.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 8007c4a:	4b66      	ldr	r3, [pc, #408]	@ (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007c4c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c4e:	e265      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c54:	e262      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c56:	4b62      	ldr	r3, [pc, #392]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0320 	and.w	r3, r3, #32
 8007c5e:	2b20      	cmp	r3, #32
 8007c60:	d117      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c62:	4b5f      	ldr	r3, [pc, #380]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 8007c6e:	4b5c      	ldr	r3, [pc, #368]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	0e1b      	lsrs	r3, r3, #24
 8007c74:	f003 030f 	and.w	r3, r3, #15
 8007c78:	e006      	b.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 8007c7a:	4b59      	ldr	r3, [pc, #356]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007c7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c80:	041b      	lsls	r3, r3, #16
 8007c82:	0e1b      	lsrs	r3, r3, #24
 8007c84:	f003 030f 	and.w	r3, r3, #15
 8007c88:	4a57      	ldr	r2, [pc, #348]	@ (8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c8e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c90:	e244      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c96:	e241      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c9c:	e23e      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca2:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007ca6:	430b      	orrs	r3, r1
 8007ca8:	d156      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007caa:	4b4d      	ldr	r3, [pc, #308]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007cb4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007cbc:	d028      	beq.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007cc4:	d845      	bhi.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ccc:	d013      	beq.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8007cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cd4:	d83d      	bhi.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d004      	beq.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ce2:	d004      	beq.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8007ce4:	e035      	b.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007ce6:	f7fd fb3b 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8007cea:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007cec:	e216      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007cee:	f7fd fa1b 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 8007cf2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007cf4:	e212      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d02:	d102      	bne.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 8007d04:	4b37      	ldr	r3, [pc, #220]	@ (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007d06:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007d08:	e208      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d0e:	e205      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007d10:	4b33      	ldr	r3, [pc, #204]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0320 	and.w	r3, r3, #32
 8007d18:	2b20      	cmp	r3, #32
 8007d1a:	d117      	bne.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d1c:	4b30      	ldr	r3, [pc, #192]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8007d28:	4b2d      	ldr	r3, [pc, #180]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	0e1b      	lsrs	r3, r3, #24
 8007d2e:	f003 030f 	and.w	r3, r3, #15
 8007d32:	e006      	b.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 8007d34:	4b2a      	ldr	r3, [pc, #168]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007d36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d3a:	041b      	lsls	r3, r3, #16
 8007d3c:	0e1b      	lsrs	r3, r3, #24
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	4a29      	ldr	r2, [pc, #164]	@ (8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d48:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007d4a:	e1e7      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d50:	e1e4      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d56:	e1e1      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007d58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d5c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007d60:	430b      	orrs	r3, r1
 8007d62:	d17c      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007d64:	4b1e      	ldr	r3, [pc, #120]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007d66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d6a:	f003 0318 	and.w	r3, r3, #24
 8007d6e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d72:	2b18      	cmp	r3, #24
 8007d74:	d870      	bhi.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 8007d76:	a201      	add	r2, pc, #4	@ (adr r2, 8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 8007d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7c:	08007ded 	.word	0x08007ded
 8007d80:	08007e59 	.word	0x08007e59
 8007d84:	08007e59 	.word	0x08007e59
 8007d88:	08007e59 	.word	0x08007e59
 8007d8c:	08007e59 	.word	0x08007e59
 8007d90:	08007e59 	.word	0x08007e59
 8007d94:	08007e59 	.word	0x08007e59
 8007d98:	08007e59 	.word	0x08007e59
 8007d9c:	08007df5 	.word	0x08007df5
 8007da0:	08007e59 	.word	0x08007e59
 8007da4:	08007e59 	.word	0x08007e59
 8007da8:	08007e59 	.word	0x08007e59
 8007dac:	08007e59 	.word	0x08007e59
 8007db0:	08007e59 	.word	0x08007e59
 8007db4:	08007e59 	.word	0x08007e59
 8007db8:	08007e59 	.word	0x08007e59
 8007dbc:	08007dfd 	.word	0x08007dfd
 8007dc0:	08007e59 	.word	0x08007e59
 8007dc4:	08007e59 	.word	0x08007e59
 8007dc8:	08007e59 	.word	0x08007e59
 8007dcc:	08007e59 	.word	0x08007e59
 8007dd0:	08007e59 	.word	0x08007e59
 8007dd4:	08007e59 	.word	0x08007e59
 8007dd8:	08007e59 	.word	0x08007e59
 8007ddc:	08007e17 	.word	0x08007e17
 8007de0:	46020c00 	.word	0x46020c00
 8007de4:	00f42400 	.word	0x00f42400
 8007de8:	0800fff0 	.word	0x0800fff0
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007dec:	f7fd fae0 	bl	80053b0 <HAL_RCC_GetPCLK3Freq>
 8007df0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007df2:	e193      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007df4:	f7fd f998 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 8007df8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007dfa:	e18f      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007dfc:	4b9f      	ldr	r3, [pc, #636]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e08:	d102      	bne.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 8007e0a:	4b9d      	ldr	r3, [pc, #628]	@ (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8007e0c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e0e:	e185      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e14:	e182      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e16:	4b99      	ldr	r3, [pc, #612]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	d117      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e22:	4b96      	ldr	r3, [pc, #600]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d005      	beq.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 8007e2e:	4b93      	ldr	r3, [pc, #588]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	0e1b      	lsrs	r3, r3, #24
 8007e34:	f003 030f 	and.w	r3, r3, #15
 8007e38:	e006      	b.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 8007e3a:	4b90      	ldr	r3, [pc, #576]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007e3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e40:	041b      	lsls	r3, r3, #16
 8007e42:	0e1b      	lsrs	r3, r3, #24
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	4a8e      	ldr	r2, [pc, #568]	@ (8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e4e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e50:	e164      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e56:	e161      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e5c:	e15e      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e62:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007e66:	430b      	orrs	r3, r1
 8007e68:	d155      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007e6a:	4b84      	ldr	r3, [pc, #528]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007e6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e70:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007e74:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e7c:	d013      	beq.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e84:	d844      	bhi.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e8c:	d013      	beq.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e94:	d83c      	bhi.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8007e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d014      	beq.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ea2:	d014      	beq.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8007ea4:	e034      	b.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea6:	f107 0318 	add.w	r3, r7, #24
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fb30 	bl	8006510 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007eb4:	e132      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fe f9ce 	bl	800625c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ec4:	e12a      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007ec6:	f7fd f92f 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 8007eca:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007ecc:	e126      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007ece:	4b6b      	ldr	r3, [pc, #428]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	d117      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007eda:	4b68      	ldr	r3, [pc, #416]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d005      	beq.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 8007ee6:	4b65      	ldr	r3, [pc, #404]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	0e1b      	lsrs	r3, r3, #24
 8007eec:	f003 030f 	and.w	r3, r3, #15
 8007ef0:	e006      	b.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 8007ef2:	4b62      	ldr	r3, [pc, #392]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007ef4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ef8:	041b      	lsls	r3, r3, #16
 8007efa:	0e1b      	lsrs	r3, r3, #24
 8007efc:	f003 030f 	and.w	r3, r3, #15
 8007f00:	4a60      	ldr	r2, [pc, #384]	@ (8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f06:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f08:	e108      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f0e:	e105      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f14:	e102      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8007f16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f1a:	1e59      	subs	r1, r3, #1
 8007f1c:	ea52 0301 	orrs.w	r3, r2, r1
 8007f20:	d13c      	bne.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8007f22:	4b56      	ldr	r3, [pc, #344]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007f24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f28:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007f2c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f30:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007f34:	d027      	beq.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8007f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f38:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007f3c:	d82b      	bhi.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f44:	d017      	beq.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 8007f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f4c:	d823      	bhi.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d004      	beq.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 8007f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f5a:	d004      	beq.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8007f5c:	e01b      	b.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007f5e:	f7fd f8e3 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 8007f62:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007f64:	e0da      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fe f976 	bl	800625c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f74:	e0d2      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f76:	f107 0318 	add.w	r3, r7, #24
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fe fac8 	bl	8006510 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f84:	e0ca      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f86:	f107 030c 	add.w	r3, r7, #12
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe fc1a 	bl	80067c4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f94:	e0c2      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007f96:	2300      	movs	r3, #0
 8007f98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f9a:	e0bf      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fa0:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	d131      	bne.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007fa8:	4b34      	ldr	r3, [pc, #208]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007faa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fb2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007fb4:	4b31      	ldr	r3, [pc, #196]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007fb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d106      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d103      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 8007fc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fce:	e0a5      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fde:	d112      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fe6:	d10e      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007fe8:	4b24      	ldr	r3, [pc, #144]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ff2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ff6:	d102      	bne.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 8007ff8:	23fa      	movs	r3, #250	@ 0xfa
 8007ffa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ffc:	e08e      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8007ffe:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008002:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008004:	e08a      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008006:	2300      	movs	r3, #0
 8008008:	637b      	str	r3, [r7, #52]	@ 0x34
 800800a:	e087      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800800c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008010:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008014:	430b      	orrs	r3, r1
 8008016:	d13b      	bne.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008018:	4b18      	ldr	r3, [pc, #96]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800801a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800801e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008022:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008024:	4b15      	ldr	r3, [pc, #84]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800802c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008030:	d105      	bne.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 8008032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008034:	2b00      	cmp	r3, #0
 8008036:	d102      	bne.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 8008038:	4b13      	ldr	r3, [pc, #76]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800803a:	637b      	str	r3, [r7, #52]	@ 0x34
 800803c:	e06e      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800803e:	4b0f      	ldr	r3, [pc, #60]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800804a:	d106      	bne.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 800804c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008052:	d102      	bne.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008054:	4b0d      	ldr	r3, [pc, #52]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8008056:	637b      	str	r3, [r7, #52]	@ 0x34
 8008058:	e060      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800805a:	4b08      	ldr	r3, [pc, #32]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008066:	d106      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 8008068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800806e:	d102      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 8008070:	4b03      	ldr	r3, [pc, #12]	@ (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8008072:	637b      	str	r3, [r7, #52]	@ 0x34
 8008074:	e052      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	637b      	str	r3, [r7, #52]	@ 0x34
 800807a:	e04f      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800807c:	46020c00 	.word	0x46020c00
 8008080:	00f42400 	.word	0x00f42400
 8008084:	0800fff0 	.word	0x0800fff0
 8008088:	02dc6c00 	.word	0x02dc6c00
 800808c:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8008090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008094:	f1a3 0108 	sub.w	r1, r3, #8
 8008098:	ea52 0301 	orrs.w	r3, r2, r1
 800809c:	d13c      	bne.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800809e:	4b22      	ldr	r3, [pc, #136]	@ (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80080a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080a4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80080a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 80080aa:	4b1f      	ldr	r3, [pc, #124]	@ (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080b6:	d105      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 80080b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d102      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 80080be:	4b1b      	ldr	r3, [pc, #108]	@ (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 80080c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080c2:	e02b      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 80080c4:	4b18      	ldr	r3, [pc, #96]	@ (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080d0:	d106      	bne.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 80080d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080d8:	d102      	bne.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 80080da:	4b15      	ldr	r3, [pc, #84]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 80080dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80080de:	e01d      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 80080e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080e6:	d107      	bne.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fe f8b5 	bl	800625c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80080f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080f6:	e011      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 80080f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fa:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80080fe:	d108      	bne.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008104:	4618      	mov	r0, r3
 8008106:	f7fe f8a9 	bl	800625c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800810a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810c:	085b      	lsrs	r3, r3, #1
 800810e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008110:	e004      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	637b      	str	r3, [r7, #52]	@ 0x34
 8008116:	e001      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008118:	2300      	movs	r3, #0
 800811a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800811c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800811e:	4618      	mov	r0, r3
 8008120:	3738      	adds	r7, #56	@ 0x38
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	46020c00 	.word	0x46020c00
 800812c:	00f42400 	.word	0x00f42400
 8008130:	007a1200 	.word	0x007a1200

08008134 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800813c:	4b47      	ldr	r3, [pc, #284]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a46      	ldr	r2, [pc, #280]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 8008142:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008146:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008148:	f7f9 fbbc 	bl	80018c4 <HAL_GetTick>
 800814c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800814e:	e008      	b.n	8008162 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008150:	f7f9 fbb8 	bl	80018c4 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	2b02      	cmp	r3, #2
 800815c:	d901      	bls.n	8008162 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e077      	b.n	8008252 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008162:	4b3e      	ldr	r3, [pc, #248]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1f0      	bne.n	8008150 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800816e:	4b3b      	ldr	r3, [pc, #236]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 8008170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008172:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008176:	f023 0303 	bic.w	r3, r3, #3
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	6811      	ldr	r1, [r2, #0]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	6852      	ldr	r2, [r2, #4]
 8008182:	3a01      	subs	r2, #1
 8008184:	0212      	lsls	r2, r2, #8
 8008186:	430a      	orrs	r2, r1
 8008188:	4934      	ldr	r1, [pc, #208]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 800818a:	4313      	orrs	r3, r2
 800818c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800818e:	4b33      	ldr	r3, [pc, #204]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 8008190:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008192:	4b33      	ldr	r3, [pc, #204]	@ (8008260 <RCCEx_PLL2_Config+0x12c>)
 8008194:	4013      	ands	r3, r2
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	6892      	ldr	r2, [r2, #8]
 800819a:	3a01      	subs	r2, #1
 800819c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	68d2      	ldr	r2, [r2, #12]
 80081a4:	3a01      	subs	r2, #1
 80081a6:	0252      	lsls	r2, r2, #9
 80081a8:	b292      	uxth	r2, r2
 80081aa:	4311      	orrs	r1, r2
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	6912      	ldr	r2, [r2, #16]
 80081b0:	3a01      	subs	r2, #1
 80081b2:	0412      	lsls	r2, r2, #16
 80081b4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80081b8:	4311      	orrs	r1, r2
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	6952      	ldr	r2, [r2, #20]
 80081be:	3a01      	subs	r2, #1
 80081c0:	0612      	lsls	r2, r2, #24
 80081c2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80081c6:	430a      	orrs	r2, r1
 80081c8:	4924      	ldr	r1, [pc, #144]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80081ce:	4b23      	ldr	r3, [pc, #140]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 80081d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d2:	f023 020c 	bic.w	r2, r3, #12
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	4920      	ldr	r1, [pc, #128]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80081e0:	4b1e      	ldr	r3, [pc, #120]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 80081e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a1b      	ldr	r3, [r3, #32]
 80081e8:	491c      	ldr	r1, [pc, #112]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80081ee:	4b1b      	ldr	r3, [pc, #108]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f2:	4a1a      	ldr	r2, [pc, #104]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 80081f4:	f023 0310 	bic.w	r3, r3, #16
 80081f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80081fa:	4b18      	ldr	r3, [pc, #96]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 80081fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008202:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	69d2      	ldr	r2, [r2, #28]
 800820a:	00d2      	lsls	r2, r2, #3
 800820c:	4913      	ldr	r1, [pc, #76]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 800820e:	4313      	orrs	r3, r2
 8008210:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008212:	4b12      	ldr	r3, [pc, #72]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 8008214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008216:	4a11      	ldr	r2, [pc, #68]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 8008218:	f043 0310 	orr.w	r3, r3, #16
 800821c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800821e:	4b0f      	ldr	r3, [pc, #60]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a0e      	ldr	r2, [pc, #56]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 8008224:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008228:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800822a:	f7f9 fb4b 	bl	80018c4 <HAL_GetTick>
 800822e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008230:	e008      	b.n	8008244 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008232:	f7f9 fb47 	bl	80018c4 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d901      	bls.n	8008244 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e006      	b.n	8008252 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008244:	4b05      	ldr	r3, [pc, #20]	@ (800825c <RCCEx_PLL2_Config+0x128>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d0f0      	beq.n	8008232 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008250:	2300      	movs	r3, #0

}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	46020c00 	.word	0x46020c00
 8008260:	80800000 	.word	0x80800000

08008264 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800826c:	4b47      	ldr	r3, [pc, #284]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a46      	ldr	r2, [pc, #280]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 8008272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008276:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008278:	f7f9 fb24 	bl	80018c4 <HAL_GetTick>
 800827c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800827e:	e008      	b.n	8008292 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008280:	f7f9 fb20 	bl	80018c4 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d901      	bls.n	8008292 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e077      	b.n	8008382 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008292:	4b3e      	ldr	r3, [pc, #248]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1f0      	bne.n	8008280 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800829e:	4b3b      	ldr	r3, [pc, #236]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 80082a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80082a6:	f023 0303 	bic.w	r3, r3, #3
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	6811      	ldr	r1, [r2, #0]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	6852      	ldr	r2, [r2, #4]
 80082b2:	3a01      	subs	r2, #1
 80082b4:	0212      	lsls	r2, r2, #8
 80082b6:	430a      	orrs	r2, r1
 80082b8:	4934      	ldr	r1, [pc, #208]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	630b      	str	r3, [r1, #48]	@ 0x30
 80082be:	4b33      	ldr	r3, [pc, #204]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 80082c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082c2:	4b33      	ldr	r3, [pc, #204]	@ (8008390 <RCCEx_PLL3_Config+0x12c>)
 80082c4:	4013      	ands	r3, r2
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	6892      	ldr	r2, [r2, #8]
 80082ca:	3a01      	subs	r2, #1
 80082cc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	68d2      	ldr	r2, [r2, #12]
 80082d4:	3a01      	subs	r2, #1
 80082d6:	0252      	lsls	r2, r2, #9
 80082d8:	b292      	uxth	r2, r2
 80082da:	4311      	orrs	r1, r2
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	6912      	ldr	r2, [r2, #16]
 80082e0:	3a01      	subs	r2, #1
 80082e2:	0412      	lsls	r2, r2, #16
 80082e4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80082e8:	4311      	orrs	r1, r2
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	6952      	ldr	r2, [r2, #20]
 80082ee:	3a01      	subs	r2, #1
 80082f0:	0612      	lsls	r2, r2, #24
 80082f2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80082f6:	430a      	orrs	r2, r1
 80082f8:	4924      	ldr	r1, [pc, #144]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80082fe:	4b23      	ldr	r3, [pc, #140]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 8008300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008302:	f023 020c 	bic.w	r2, r3, #12
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	4920      	ldr	r1, [pc, #128]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 800830c:	4313      	orrs	r3, r2
 800830e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008310:	4b1e      	ldr	r3, [pc, #120]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 8008312:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a1b      	ldr	r3, [r3, #32]
 8008318:	491c      	ldr	r1, [pc, #112]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 800831a:	4313      	orrs	r3, r2
 800831c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800831e:	4b1b      	ldr	r3, [pc, #108]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 8008320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008322:	4a1a      	ldr	r2, [pc, #104]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 8008324:	f023 0310 	bic.w	r3, r3, #16
 8008328:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800832a:	4b18      	ldr	r3, [pc, #96]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 800832c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800832e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008332:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	69d2      	ldr	r2, [r2, #28]
 800833a:	00d2      	lsls	r2, r2, #3
 800833c:	4913      	ldr	r1, [pc, #76]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 800833e:	4313      	orrs	r3, r2
 8008340:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008342:	4b12      	ldr	r3, [pc, #72]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 8008344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008346:	4a11      	ldr	r2, [pc, #68]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 8008348:	f043 0310 	orr.w	r3, r3, #16
 800834c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800834e:	4b0f      	ldr	r3, [pc, #60]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a0e      	ldr	r2, [pc, #56]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 8008354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008358:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800835a:	f7f9 fab3 	bl	80018c4 <HAL_GetTick>
 800835e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008360:	e008      	b.n	8008374 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008362:	f7f9 faaf 	bl	80018c4 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	2b02      	cmp	r3, #2
 800836e:	d901      	bls.n	8008374 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e006      	b.n	8008382 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008374:	4b05      	ldr	r3, [pc, #20]	@ (800838c <RCCEx_PLL3_Config+0x128>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d0f0      	beq.n	8008362 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	46020c00 	.word	0x46020c00
 8008390:	80800000 	.word	0x80800000

08008394 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e0fb      	b.n	800859e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a7f      	ldr	r2, [pc, #508]	@ (80085a8 <HAL_SPI_Init+0x214>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d004      	beq.n	80083ba <HAL_SPI_Init+0x26>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a7d      	ldr	r2, [pc, #500]	@ (80085ac <HAL_SPI_Init+0x218>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	e000      	b.n	80083bc <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80083ba:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a78      	ldr	r2, [pc, #480]	@ (80085a8 <HAL_SPI_Init+0x214>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d004      	beq.n	80083d6 <HAL_SPI_Init+0x42>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a76      	ldr	r2, [pc, #472]	@ (80085ac <HAL_SPI_Init+0x218>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d105      	bne.n	80083e2 <HAL_SPI_Init+0x4e>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	2b0f      	cmp	r3, #15
 80083dc:	d901      	bls.n	80083e2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e0dd      	b.n	800859e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fc14 	bl	8008c10 <SPI_GetPacketSize>
 80083e8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a6e      	ldr	r2, [pc, #440]	@ (80085a8 <HAL_SPI_Init+0x214>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d004      	beq.n	80083fe <HAL_SPI_Init+0x6a>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a6c      	ldr	r2, [pc, #432]	@ (80085ac <HAL_SPI_Init+0x218>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d102      	bne.n	8008404 <HAL_SPI_Init+0x70>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b08      	cmp	r3, #8
 8008402:	d816      	bhi.n	8008432 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008408:	4a69      	ldr	r2, [pc, #420]	@ (80085b0 <HAL_SPI_Init+0x21c>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d00e      	beq.n	800842c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a68      	ldr	r2, [pc, #416]	@ (80085b4 <HAL_SPI_Init+0x220>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d009      	beq.n	800842c <HAL_SPI_Init+0x98>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a66      	ldr	r2, [pc, #408]	@ (80085b8 <HAL_SPI_Init+0x224>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d004      	beq.n	800842c <HAL_SPI_Init+0x98>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a65      	ldr	r2, [pc, #404]	@ (80085bc <HAL_SPI_Init+0x228>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d104      	bne.n	8008436 <HAL_SPI_Init+0xa2>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2b10      	cmp	r3, #16
 8008430:	d901      	bls.n	8008436 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e0b3      	b.n	800859e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d106      	bne.n	8008450 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7f8 ff2e 	bl	80012ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2202      	movs	r2, #2
 8008454:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 0201 	bic.w	r2, r2, #1
 8008466:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008472:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800847c:	d119      	bne.n	80084b2 <HAL_SPI_Init+0x11e>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008486:	d103      	bne.n	8008490 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800848c:	2b00      	cmp	r3, #0
 800848e:	d008      	beq.n	80084a2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10c      	bne.n	80084b2 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800849c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084a0:	d107      	bne.n	80084b2 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80084b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00f      	beq.n	80084de <HAL_SPI_Init+0x14a>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	2b06      	cmp	r3, #6
 80084c4:	d90b      	bls.n	80084de <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	430a      	orrs	r2, r1
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	e007      	b.n	80084ee <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	69da      	ldr	r2, [r3, #28]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f6:	431a      	orrs	r2, r3
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	431a      	orrs	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008500:	ea42 0103 	orr.w	r1, r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008518:	431a      	orrs	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800851e:	431a      	orrs	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	431a      	orrs	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	431a      	orrs	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	431a      	orrs	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	431a      	orrs	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	431a      	orrs	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008542:	431a      	orrs	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	431a      	orrs	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800854e:	431a      	orrs	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008554:	431a      	orrs	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800855a:	ea42 0103 	orr.w	r1, r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	430a      	orrs	r2, r1
 8008568:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00a      	beq.n	800858c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	430a      	orrs	r2, r1
 800858a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	46002000 	.word	0x46002000
 80085ac:	56002000 	.word	0x56002000
 80085b0:	40013000 	.word	0x40013000
 80085b4:	50013000 	.word	0x50013000
 80085b8:	40003800 	.word	0x40003800
 80085bc:	50003800 	.word	0x50003800

080085c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08c      	sub	sp, #48	@ 0x30
 80085c4:	af02      	add	r7, sp, #8
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3320      	adds	r3, #32
 80085d4:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3330      	adds	r3, #48	@ 0x30
 80085dc:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085de:	f7f9 f971 	bl	80018c4 <HAL_GetTick>
 80085e2:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 80085e4:	887b      	ldrh	r3, [r7, #2]
 80085e6:	847b      	strh	r3, [r7, #34]	@ 0x22
  initial_RxXferCount = Size;
 80085e8:	887b      	ldrh	r3, [r7, #2]
 80085ea:	843b      	strh	r3, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d001      	beq.n	80085fc <HAL_SPI_TransmitReceive+0x3c>
  {
    return HAL_BUSY;
 80085f8:	2302      	movs	r3, #2
 80085fa:	e237      	b.n	8008a6c <HAL_SPI_TransmitReceive+0x4ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d005      	beq.n	800860e <HAL_SPI_TransmitReceive+0x4e>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d002      	beq.n	800860e <HAL_SPI_TransmitReceive+0x4e>
 8008608:	887b      	ldrh	r3, [r7, #2]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <HAL_SPI_TransmitReceive+0x52>
  {
    return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e22c      	b.n	8008a6c <HAL_SPI_TransmitReceive+0x4ac>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008618:	2b01      	cmp	r3, #1
 800861a:	d101      	bne.n	8008620 <HAL_SPI_TransmitReceive+0x60>
 800861c:	2302      	movs	r3, #2
 800861e:	e225      	b.n	8008a6c <HAL_SPI_TransmitReceive+0x4ac>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2205      	movs	r2, #5
 800862c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	887a      	ldrh	r2, [r7, #2]
 8008642:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	887a      	ldrh	r2, [r7, #2]
 800864a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	887a      	ldrh	r2, [r7, #2]
 8008658:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	887a      	ldrh	r2, [r7, #2]
 8008660:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800867e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a6c      	ldr	r2, [pc, #432]	@ (8008838 <HAL_SPI_TransmitReceive+0x278>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d00e      	beq.n	80086a8 <HAL_SPI_TransmitReceive+0xe8>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a6b      	ldr	r2, [pc, #428]	@ (800883c <HAL_SPI_TransmitReceive+0x27c>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d009      	beq.n	80086a8 <HAL_SPI_TransmitReceive+0xe8>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a69      	ldr	r2, [pc, #420]	@ (8008840 <HAL_SPI_TransmitReceive+0x280>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d004      	beq.n	80086a8 <HAL_SPI_TransmitReceive+0xe8>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a68      	ldr	r2, [pc, #416]	@ (8008844 <HAL_SPI_TransmitReceive+0x284>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d102      	bne.n	80086ae <HAL_SPI_TransmitReceive+0xee>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80086a8:	2310      	movs	r3, #16
 80086aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80086ac:	e001      	b.n	80086b2 <HAL_SPI_TransmitReceive+0xf2>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80086ae:	2308      	movs	r3, #8
 80086b0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	0c1b      	lsrs	r3, r3, #16
 80086ba:	041b      	lsls	r3, r3, #16
 80086bc:	8879      	ldrh	r1, [r7, #2]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	6812      	ldr	r2, [r2, #0]
 80086c2:	430b      	orrs	r3, r1
 80086c4:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f042 0201 	orr.w	r2, r2, #1
 80086d4:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	69db      	ldr	r3, [r3, #28]
 80086dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10c      	bne.n	80086fe <HAL_SPI_TransmitReceive+0x13e>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086ec:	d107      	bne.n	80086fe <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	2b0f      	cmp	r3, #15
 8008704:	f240 808e 	bls.w	8008824 <HAL_SPI_TransmitReceive+0x264>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a4a      	ldr	r2, [pc, #296]	@ (8008838 <HAL_SPI_TransmitReceive+0x278>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d00e      	beq.n	8008730 <HAL_SPI_TransmitReceive+0x170>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a49      	ldr	r2, [pc, #292]	@ (800883c <HAL_SPI_TransmitReceive+0x27c>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d009      	beq.n	8008730 <HAL_SPI_TransmitReceive+0x170>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a47      	ldr	r2, [pc, #284]	@ (8008840 <HAL_SPI_TransmitReceive+0x280>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d004      	beq.n	8008730 <HAL_SPI_TransmitReceive+0x170>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a46      	ldr	r2, [pc, #280]	@ (8008844 <HAL_SPI_TransmitReceive+0x284>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d179      	bne.n	8008824 <HAL_SPI_TransmitReceive+0x264>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8008730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008732:	089b      	lsrs	r3, r3, #2
 8008734:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008736:	e06e      	b.n	8008816 <HAL_SPI_TransmitReceive+0x256>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b02      	cmp	r3, #2
 8008744:	d120      	bne.n	8008788 <HAL_SPI_TransmitReceive+0x1c8>
 8008746:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008748:	2b00      	cmp	r3, #0
 800874a:	d01d      	beq.n	8008788 <HAL_SPI_TransmitReceive+0x1c8>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800874c:	8c3a      	ldrh	r2, [r7, #32]
 800874e:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8008750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008752:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008754:	429a      	cmp	r2, r3
 8008756:	d217      	bcs.n	8008788 <HAL_SPI_TransmitReceive+0x1c8>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6812      	ldr	r2, [r2, #0]
 8008762:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008768:	1d1a      	adds	r2, r3, #4
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008774:	b29b      	uxth	r3, r3
 8008776:	3b01      	subs	r3, #1
 8008778:	b29a      	uxth	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008786:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	695a      	ldr	r2, [r3, #20]
 800878e:	f248 0308 	movw	r3, #32776	@ 0x8008
 8008792:	4013      	ands	r3, r2
 8008794:	2b00      	cmp	r3, #0
 8008796:	d01a      	beq.n	80087ce <HAL_SPI_TransmitReceive+0x20e>
 8008798:	8c3b      	ldrh	r3, [r7, #32]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d017      	beq.n	80087ce <HAL_SPI_TransmitReceive+0x20e>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087a6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80087a8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087ae:	1d1a      	adds	r2, r3, #4
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount --;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	3b01      	subs	r3, #1
 80087be:	b29a      	uxth	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80087cc:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087ce:	f7f9 f879 	bl	80018c4 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087da:	429a      	cmp	r2, r3
 80087dc:	d803      	bhi.n	80087e6 <HAL_SPI_TransmitReceive+0x226>
 80087de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087e4:	d102      	bne.n	80087ec <HAL_SPI_TransmitReceive+0x22c>
 80087e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d114      	bne.n	8008816 <HAL_SPI_TransmitReceive+0x256>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 f941 	bl	8008a74 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e12a      	b.n	8008a6c <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008816:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008818:	2b00      	cmp	r3, #0
 800881a:	d18d      	bne.n	8008738 <HAL_SPI_TransmitReceive+0x178>
 800881c:	8c3b      	ldrh	r3, [r7, #32]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d18a      	bne.n	8008738 <HAL_SPI_TransmitReceive+0x178>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008822:	e0fd      	b.n	8008a20 <HAL_SPI_TransmitReceive+0x460>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	2b07      	cmp	r3, #7
 800882a:	f240 80f3 	bls.w	8008a14 <HAL_SPI_TransmitReceive+0x454>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800882e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008830:	085b      	lsrs	r3, r3, #1
 8008832:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008834:	e075      	b.n	8008922 <HAL_SPI_TransmitReceive+0x362>
 8008836:	bf00      	nop
 8008838:	40013000 	.word	0x40013000
 800883c:	50013000 	.word	0x50013000
 8008840:	40003800 	.word	0x40003800
 8008844:	50003800 	.word	0x50003800
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b02      	cmp	r3, #2
 8008854:	d11f      	bne.n	8008896 <HAL_SPI_TransmitReceive+0x2d6>
 8008856:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008858:	2b00      	cmp	r3, #0
 800885a:	d01c      	beq.n	8008896 <HAL_SPI_TransmitReceive+0x2d6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800885c:	8c3a      	ldrh	r2, [r7, #32]
 800885e:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8008860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008862:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008864:	429a      	cmp	r2, r3
 8008866:	d216      	bcs.n	8008896 <HAL_SPI_TransmitReceive+0x2d6>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800886c:	881a      	ldrh	r2, [r3, #0]
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008876:	1c9a      	adds	r2, r3, #2
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008882:	b29b      	uxth	r3, r3
 8008884:	3b01      	subs	r3, #1
 8008886:	b29a      	uxth	r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008894:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	f003 0301 	and.w	r3, r3, #1
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d11a      	bne.n	80088da <HAL_SPI_TransmitReceive+0x31a>
 80088a4:	8c3b      	ldrh	r3, [r7, #32]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d017      	beq.n	80088da <HAL_SPI_TransmitReceive+0x31a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088ae:	69ba      	ldr	r2, [r7, #24]
 80088b0:	8812      	ldrh	r2, [r2, #0]
 80088b2:	b292      	uxth	r2, r2
 80088b4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088ba:	1c9a      	adds	r2, r3, #2
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	3b01      	subs	r3, #1
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80088d8:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088da:	f7f8 fff3 	bl	80018c4 <HAL_GetTick>
 80088de:	4602      	mov	r2, r0
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d803      	bhi.n	80088f2 <HAL_SPI_TransmitReceive+0x332>
 80088ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088f0:	d102      	bne.n	80088f8 <HAL_SPI_TransmitReceive+0x338>
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d114      	bne.n	8008922 <HAL_SPI_TransmitReceive+0x362>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 f8bb 	bl	8008a74 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008904:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e0a4      	b.n	8008a6c <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008922:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008924:	2b00      	cmp	r3, #0
 8008926:	d18f      	bne.n	8008848 <HAL_SPI_TransmitReceive+0x288>
 8008928:	8c3b      	ldrh	r3, [r7, #32]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d18c      	bne.n	8008848 <HAL_SPI_TransmitReceive+0x288>
 800892e:	e077      	b.n	8008a20 <HAL_SPI_TransmitReceive+0x460>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	2b02      	cmp	r3, #2
 800893c:	d121      	bne.n	8008982 <HAL_SPI_TransmitReceive+0x3c2>
 800893e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008940:	2b00      	cmp	r3, #0
 8008942:	d01e      	beq.n	8008982 <HAL_SPI_TransmitReceive+0x3c2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008944:	8c3a      	ldrh	r2, [r7, #32]
 8008946:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8008948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800894c:	429a      	cmp	r2, r3
 800894e:	d218      	bcs.n	8008982 <HAL_SPI_TransmitReceive+0x3c2>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3320      	adds	r3, #32
 800895a:	7812      	ldrb	r2, [r2, #0]
 800895c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008962:	1c5a      	adds	r2, r3, #1
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800896e:	b29b      	uxth	r3, r3
 8008970:	3b01      	subs	r3, #1
 8008972:	b29a      	uxth	r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008980:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b01      	cmp	r3, #1
 800898e:	d11d      	bne.n	80089cc <HAL_SPI_TransmitReceive+0x40c>
 8008990:	8c3b      	ldrh	r3, [r7, #32]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d01a      	beq.n	80089cc <HAL_SPI_TransmitReceive+0x40c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089a2:	7812      	ldrb	r2, [r2, #0]
 80089a4:	b2d2      	uxtb	r2, r2
 80089a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089ac:	1c5a      	adds	r2, r3, #1
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	3b01      	subs	r3, #1
 80089bc:	b29a      	uxth	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80089ca:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089cc:	f7f8 ff7a 	bl	80018c4 <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089d8:	429a      	cmp	r2, r3
 80089da:	d803      	bhi.n	80089e4 <HAL_SPI_TransmitReceive+0x424>
 80089dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089e2:	d102      	bne.n	80089ea <HAL_SPI_TransmitReceive+0x42a>
 80089e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d114      	bne.n	8008a14 <HAL_SPI_TransmitReceive+0x454>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 f842 	bl	8008a74 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e02b      	b.n	8008a6c <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008a14:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d18a      	bne.n	8008930 <HAL_SPI_TransmitReceive+0x370>
 8008a1a:	8c3b      	ldrh	r3, [r7, #32]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d187      	bne.n	8008930 <HAL_SPI_TransmitReceive+0x370>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a26:	2200      	movs	r2, #0
 8008a28:	2108      	movs	r1, #8
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 f8c2 	bl	8008bb4 <SPI_WaitOnFlagUntilTimeout>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d007      	beq.n	8008a46 <HAL_SPI_TransmitReceive+0x486>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a3c:	f043 0220 	orr.w	r2, r3, #32
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 f814 	bl	8008a74 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <HAL_SPI_TransmitReceive+0x4aa>
  {
    return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e000      	b.n	8008a6c <HAL_SPI_TransmitReceive+0x4ac>
  }
  else
  {
    return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
  }
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3728      	adds	r7, #40	@ 0x28
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	699a      	ldr	r2, [r3, #24]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f042 0208 	orr.w	r2, r2, #8
 8008a92:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	699a      	ldr	r2, [r3, #24]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f042 0210 	orr.w	r2, r2, #16
 8008aa2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f022 0201 	bic.w	r2, r2, #1
 8008ab2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	6812      	ldr	r2, [r2, #0]
 8008abe:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8008ac2:	f023 0303 	bic.w	r3, r3, #3
 8008ac6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	689a      	ldr	r2, [r3, #8]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008ad6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	2b04      	cmp	r3, #4
 8008ae2:	d014      	beq.n	8008b0e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f003 0320 	and.w	r3, r3, #32
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00f      	beq.n	8008b0e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008af4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	699a      	ldr	r2, [r3, #24]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f042 0220 	orr.w	r2, r2, #32
 8008b0c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d014      	beq.n	8008b44 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00f      	beq.n	8008b44 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b2a:	f043 0204 	orr.w	r2, r3, #4
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	699a      	ldr	r2, [r3, #24]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b42:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00f      	beq.n	8008b6e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b54:	f043 0201 	orr.w	r2, r3, #1
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	699a      	ldr	r2, [r3, #24]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b6c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00f      	beq.n	8008b98 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b7e:	f043 0208 	orr.w	r2, r3, #8
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	699a      	ldr	r2, [r3, #24]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b96:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8008ba8:	bf00      	nop
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008bc4:	e010      	b.n	8008be8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bc6:	f7f8 fe7d 	bl	80018c4 <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d803      	bhi.n	8008bde <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bdc:	d102      	bne.n	8008be4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e00f      	b.n	8008c08 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	695a      	ldr	r2, [r3, #20]
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	bf0c      	ite	eq
 8008bf8:	2301      	moveq	r3, #1
 8008bfa:	2300      	movne	r3, #0
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	461a      	mov	r2, r3
 8008c00:	79fb      	ldrb	r3, [r7, #7]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d0df      	beq.n	8008bc6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c1c:	095b      	lsrs	r3, r3, #5
 8008c1e:	3301      	adds	r3, #1
 8008c20:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	3301      	adds	r3, #1
 8008c28:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	3307      	adds	r3, #7
 8008c2e:	08db      	lsrs	r3, r3, #3
 8008c30:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	fb02 f303 	mul.w	r3, r2, r3
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b083      	sub	sp, #12
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d12e      	bne.n	8008cba <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d101      	bne.n	8008c6a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008c66:	2302      	movs	r3, #2
 8008c68:	e028      	b.n	8008cbc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2202      	movs	r2, #2
 8008c76:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f022 0201 	bic.w	r2, r2, #1
 8008c88:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008c96:	ea42 0103 	orr.w	r1, r2, r3
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	689a      	ldr	r2, [r3, #8]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	e000      	b.n	8008cbc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
  }
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e042      	b.n	8008d60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d106      	bne.n	8008cf2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7f8 fb47 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2224      	movs	r2, #36	@ 0x24
 8008cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f022 0201 	bic.w	r2, r2, #1
 8008d08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f9d6 	bl	80090c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f825 	bl	8008d68 <UART_SetConfig>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d101      	bne.n	8008d28 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e01b      	b.n	8008d60 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	685a      	ldr	r2, [r3, #4]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689a      	ldr	r2, [r3, #8]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f042 0201 	orr.w	r2, r2, #1
 8008d56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fa55 	bl	8009208 <UART_CheckIdleState>
 8008d5e:	4603      	mov	r3, r0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d6c:	b094      	sub	sp, #80	@ 0x50
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	4b83      	ldr	r3, [pc, #524]	@ (8008f8c <UART_SetConfig+0x224>)
 8008d7e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d82:	689a      	ldr	r2, [r3, #8]
 8008d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	431a      	orrs	r2, r3
 8008d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	431a      	orrs	r2, r3
 8008d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	497c      	ldr	r1, [pc, #496]	@ (8008f90 <UART_SetConfig+0x228>)
 8008da0:	4019      	ands	r1, r3
 8008da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008da8:	430b      	orrs	r3, r1
 8008daa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db8:	68d9      	ldr	r1, [r3, #12]
 8008dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	ea40 0301 	orr.w	r3, r0, r1
 8008dc2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	4b6f      	ldr	r3, [pc, #444]	@ (8008f8c <UART_SetConfig+0x224>)
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d009      	beq.n	8008de8 <UART_SetConfig+0x80>
 8008dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	4b6e      	ldr	r3, [pc, #440]	@ (8008f94 <UART_SetConfig+0x22c>)
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d004      	beq.n	8008de8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de0:	6a1a      	ldr	r2, [r3, #32]
 8008de2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008de4:	4313      	orrs	r3, r2
 8008de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008df2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dfc:	430b      	orrs	r3, r1
 8008dfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e06:	f023 000f 	bic.w	r0, r3, #15
 8008e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e0c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	ea40 0301 	orr.w	r3, r0, r1
 8008e16:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	4b5e      	ldr	r3, [pc, #376]	@ (8008f98 <UART_SetConfig+0x230>)
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d102      	bne.n	8008e28 <UART_SetConfig+0xc0>
 8008e22:	2301      	movs	r3, #1
 8008e24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e26:	e032      	b.n	8008e8e <UART_SetConfig+0x126>
 8008e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	4b5b      	ldr	r3, [pc, #364]	@ (8008f9c <UART_SetConfig+0x234>)
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d102      	bne.n	8008e38 <UART_SetConfig+0xd0>
 8008e32:	2302      	movs	r3, #2
 8008e34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e36:	e02a      	b.n	8008e8e <UART_SetConfig+0x126>
 8008e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	4b58      	ldr	r3, [pc, #352]	@ (8008fa0 <UART_SetConfig+0x238>)
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d102      	bne.n	8008e48 <UART_SetConfig+0xe0>
 8008e42:	2304      	movs	r3, #4
 8008e44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e46:	e022      	b.n	8008e8e <UART_SetConfig+0x126>
 8008e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	4b55      	ldr	r3, [pc, #340]	@ (8008fa4 <UART_SetConfig+0x23c>)
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d102      	bne.n	8008e58 <UART_SetConfig+0xf0>
 8008e52:	2308      	movs	r3, #8
 8008e54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e56:	e01a      	b.n	8008e8e <UART_SetConfig+0x126>
 8008e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	4b52      	ldr	r3, [pc, #328]	@ (8008fa8 <UART_SetConfig+0x240>)
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d102      	bne.n	8008e68 <UART_SetConfig+0x100>
 8008e62:	2310      	movs	r3, #16
 8008e64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e66:	e012      	b.n	8008e8e <UART_SetConfig+0x126>
 8008e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	4b4f      	ldr	r3, [pc, #316]	@ (8008fac <UART_SetConfig+0x244>)
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d103      	bne.n	8008e7a <UART_SetConfig+0x112>
 8008e72:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8008e76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e78:	e009      	b.n	8008e8e <UART_SetConfig+0x126>
 8008e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	4b43      	ldr	r3, [pc, #268]	@ (8008f8c <UART_SetConfig+0x224>)
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d102      	bne.n	8008e8a <UART_SetConfig+0x122>
 8008e84:	2320      	movs	r3, #32
 8008e86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e88:	e001      	b.n	8008e8e <UART_SetConfig+0x126>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	4b3e      	ldr	r3, [pc, #248]	@ (8008f8c <UART_SetConfig+0x224>)
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d005      	beq.n	8008ea4 <UART_SetConfig+0x13c>
 8008e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	4b3d      	ldr	r3, [pc, #244]	@ (8008f94 <UART_SetConfig+0x22c>)
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	f040 8088 	bne.w	8008fb4 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008ea4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	623b      	str	r3, [r7, #32]
 8008eaa:	627a      	str	r2, [r7, #36]	@ 0x24
 8008eac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008eb0:	f7fd fde2 	bl	8006a78 <HAL_RCCEx_GetPeriphCLKFreq>
 8008eb4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008eb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 80eb 	beq.w	8009094 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec2:	4a3b      	ldr	r2, [pc, #236]	@ (8008fb0 <UART_SetConfig+0x248>)
 8008ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ec8:	461a      	mov	r2, r3
 8008eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ed0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	005b      	lsls	r3, r3, #1
 8008eda:	4413      	add	r3, r2
 8008edc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d305      	bcc.n	8008eee <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ee8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d903      	bls.n	8008ef6 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008ef4:	e048      	b.n	8008f88 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ef8:	2200      	movs	r2, #0
 8008efa:	61bb      	str	r3, [r7, #24]
 8008efc:	61fa      	str	r2, [r7, #28]
 8008efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f02:	4a2b      	ldr	r2, [pc, #172]	@ (8008fb0 <UART_SetConfig+0x248>)
 8008f04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	613b      	str	r3, [r7, #16]
 8008f0e:	617a      	str	r2, [r7, #20]
 8008f10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008f18:	f7f7 f9ba 	bl	8000290 <__aeabi_uldivmod>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4610      	mov	r0, r2
 8008f22:	4619      	mov	r1, r3
 8008f24:	f04f 0200 	mov.w	r2, #0
 8008f28:	f04f 0300 	mov.w	r3, #0
 8008f2c:	020b      	lsls	r3, r1, #8
 8008f2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f32:	0202      	lsls	r2, r0, #8
 8008f34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f36:	6849      	ldr	r1, [r1, #4]
 8008f38:	0849      	lsrs	r1, r1, #1
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	4605      	mov	r5, r0
 8008f40:	eb12 0804 	adds.w	r8, r2, r4
 8008f44:	eb43 0905 	adc.w	r9, r3, r5
 8008f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	60bb      	str	r3, [r7, #8]
 8008f50:	60fa      	str	r2, [r7, #12]
 8008f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f56:	4640      	mov	r0, r8
 8008f58:	4649      	mov	r1, r9
 8008f5a:	f7f7 f999 	bl	8000290 <__aeabi_uldivmod>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	4613      	mov	r3, r2
 8008f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f6c:	d308      	bcc.n	8008f80 <UART_SetConfig+0x218>
 8008f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f74:	d204      	bcs.n	8008f80 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8008f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008f7c:	60da      	str	r2, [r3, #12]
 8008f7e:	e003      	b.n	8008f88 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008f86:	e085      	b.n	8009094 <UART_SetConfig+0x32c>
 8008f88:	e084      	b.n	8009094 <UART_SetConfig+0x32c>
 8008f8a:	bf00      	nop
 8008f8c:	46002400 	.word	0x46002400
 8008f90:	cfff69f3 	.word	0xcfff69f3
 8008f94:	56002400 	.word	0x56002400
 8008f98:	40013800 	.word	0x40013800
 8008f9c:	40004400 	.word	0x40004400
 8008fa0:	40004800 	.word	0x40004800
 8008fa4:	40004c00 	.word	0x40004c00
 8008fa8:	40005000 	.word	0x40005000
 8008fac:	40006400 	.word	0x40006400
 8008fb0:	080100b0 	.word	0x080100b0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb6:	69db      	ldr	r3, [r3, #28]
 8008fb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fbc:	d13c      	bne.n	8009038 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	603b      	str	r3, [r7, #0]
 8008fc4:	607a      	str	r2, [r7, #4]
 8008fc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fca:	f7fd fd55 	bl	8006a78 <HAL_RCCEx_GetPeriphCLKFreq>
 8008fce:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d05e      	beq.n	8009094 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fda:	4a39      	ldr	r2, [pc, #228]	@ (80090c0 <UART_SetConfig+0x358>)
 8008fdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fe4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fe8:	005a      	lsls	r2, r3, #1
 8008fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	085b      	lsrs	r3, r3, #1
 8008ff0:	441a      	add	r2, r3
 8008ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ffe:	2b0f      	cmp	r3, #15
 8009000:	d916      	bls.n	8009030 <UART_SetConfig+0x2c8>
 8009002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009008:	d212      	bcs.n	8009030 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800900a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800900c:	b29b      	uxth	r3, r3
 800900e:	f023 030f 	bic.w	r3, r3, #15
 8009012:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009016:	085b      	lsrs	r3, r3, #1
 8009018:	b29b      	uxth	r3, r3
 800901a:	f003 0307 	and.w	r3, r3, #7
 800901e:	b29a      	uxth	r2, r3
 8009020:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009022:	4313      	orrs	r3, r2
 8009024:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800902c:	60da      	str	r2, [r3, #12]
 800902e:	e031      	b.n	8009094 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009036:	e02d      	b.n	8009094 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009038:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800903a:	2200      	movs	r2, #0
 800903c:	469a      	mov	sl, r3
 800903e:	4693      	mov	fp, r2
 8009040:	4650      	mov	r0, sl
 8009042:	4659      	mov	r1, fp
 8009044:	f7fd fd18 	bl	8006a78 <HAL_RCCEx_GetPeriphCLKFreq>
 8009048:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800904a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800904c:	2b00      	cmp	r3, #0
 800904e:	d021      	beq.n	8009094 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009054:	4a1a      	ldr	r2, [pc, #104]	@ (80090c0 <UART_SetConfig+0x358>)
 8009056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800905a:	461a      	mov	r2, r3
 800905c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800905e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	085b      	lsrs	r3, r3, #1
 8009068:	441a      	add	r2, r3
 800906a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009072:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009076:	2b0f      	cmp	r3, #15
 8009078:	d909      	bls.n	800908e <UART_SetConfig+0x326>
 800907a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800907c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009080:	d205      	bcs.n	800908e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009084:	b29a      	uxth	r2, r3
 8009086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	60da      	str	r2, [r3, #12]
 800908c:	e002      	b.n	8009094 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009096:	2201      	movs	r2, #1
 8009098:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800909c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800909e:	2201      	movs	r2, #1
 80090a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090a6:	2200      	movs	r2, #0
 80090a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80090aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ac:	2200      	movs	r2, #0
 80090ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80090b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3750      	adds	r7, #80	@ 0x50
 80090b8:	46bd      	mov	sp, r7
 80090ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090be:	bf00      	nop
 80090c0:	080100b0 	.word	0x080100b0

080090c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d0:	f003 0308 	and.w	r3, r3, #8
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00a      	beq.n	80090ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	430a      	orrs	r2, r1
 80090ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00a      	beq.n	8009110 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	430a      	orrs	r2, r1
 800910e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009114:	f003 0302 	and.w	r3, r3, #2
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00a      	beq.n	8009132 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	430a      	orrs	r2, r1
 8009130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009136:	f003 0304 	and.w	r3, r3, #4
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	430a      	orrs	r2, r1
 8009152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009158:	f003 0310 	and.w	r3, r3, #16
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00a      	beq.n	8009176 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	430a      	orrs	r2, r1
 8009174:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800917a:	f003 0320 	and.w	r3, r3, #32
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00a      	beq.n	8009198 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	430a      	orrs	r2, r1
 8009196:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800919c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d01a      	beq.n	80091da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	430a      	orrs	r2, r1
 80091b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091c2:	d10a      	bne.n	80091da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	430a      	orrs	r2, r1
 80091d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00a      	beq.n	80091fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	605a      	str	r2, [r3, #4]
  }
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b098      	sub	sp, #96	@ 0x60
 800920c:	af02      	add	r7, sp, #8
 800920e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009218:	f7f8 fb54 	bl	80018c4 <HAL_GetTick>
 800921c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0308 	and.w	r3, r3, #8
 8009228:	2b08      	cmp	r3, #8
 800922a:	d12f      	bne.n	800928c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800922c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009234:	2200      	movs	r2, #0
 8009236:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f88e 	bl	800935c <UART_WaitOnFlagUntilTimeout>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d022      	beq.n	800928c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924e:	e853 3f00 	ldrex	r3, [r3]
 8009252:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009256:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800925a:	653b      	str	r3, [r7, #80]	@ 0x50
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	461a      	mov	r2, r3
 8009262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009264:	647b      	str	r3, [r7, #68]	@ 0x44
 8009266:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009268:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800926a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800926c:	e841 2300 	strex	r3, r2, [r1]
 8009270:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1e6      	bne.n	8009246 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2220      	movs	r2, #32
 800927c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e063      	b.n	8009354 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0304 	and.w	r3, r3, #4
 8009296:	2b04      	cmp	r3, #4
 8009298:	d149      	bne.n	800932e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800929a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092a2:	2200      	movs	r2, #0
 80092a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f857 	bl	800935c <UART_WaitOnFlagUntilTimeout>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d03c      	beq.n	800932e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092bc:	e853 3f00 	ldrex	r3, [r3]
 80092c0:	623b      	str	r3, [r7, #32]
   return(result);
 80092c2:	6a3b      	ldr	r3, [r7, #32]
 80092c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	461a      	mov	r2, r3
 80092d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80092d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092da:	e841 2300 	strex	r3, r2, [r1]
 80092de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1e6      	bne.n	80092b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3308      	adds	r3, #8
 80092ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f023 0301 	bic.w	r3, r3, #1
 80092fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3308      	adds	r3, #8
 8009304:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009306:	61fa      	str	r2, [r7, #28]
 8009308:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	69b9      	ldr	r1, [r7, #24]
 800930c:	69fa      	ldr	r2, [r7, #28]
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	617b      	str	r3, [r7, #20]
   return(result);
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e5      	bne.n	80092e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2220      	movs	r2, #32
 800931e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e012      	b.n	8009354 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2220      	movs	r2, #32
 8009332:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2220      	movs	r2, #32
 800933a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3758      	adds	r7, #88	@ 0x58
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	603b      	str	r3, [r7, #0]
 8009368:	4613      	mov	r3, r2
 800936a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800936c:	e04f      	b.n	800940e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009374:	d04b      	beq.n	800940e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009376:	f7f8 faa5 	bl	80018c4 <HAL_GetTick>
 800937a:	4602      	mov	r2, r0
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	69ba      	ldr	r2, [r7, #24]
 8009382:	429a      	cmp	r2, r3
 8009384:	d302      	bcc.n	800938c <UART_WaitOnFlagUntilTimeout+0x30>
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800938c:	2303      	movs	r3, #3
 800938e:	e04e      	b.n	800942e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0304 	and.w	r3, r3, #4
 800939a:	2b00      	cmp	r3, #0
 800939c:	d037      	beq.n	800940e <UART_WaitOnFlagUntilTimeout+0xb2>
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	2b80      	cmp	r3, #128	@ 0x80
 80093a2:	d034      	beq.n	800940e <UART_WaitOnFlagUntilTimeout+0xb2>
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b40      	cmp	r3, #64	@ 0x40
 80093a8:	d031      	beq.n	800940e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	69db      	ldr	r3, [r3, #28]
 80093b0:	f003 0308 	and.w	r3, r3, #8
 80093b4:	2b08      	cmp	r3, #8
 80093b6:	d110      	bne.n	80093da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2208      	movs	r2, #8
 80093be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 f838 	bl	8009436 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2208      	movs	r2, #8
 80093ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e029      	b.n	800942e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	69db      	ldr	r3, [r3, #28]
 80093e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80093e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093e8:	d111      	bne.n	800940e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80093f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 f81e 	bl	8009436 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2220      	movs	r2, #32
 80093fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	e00f      	b.n	800942e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	69da      	ldr	r2, [r3, #28]
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	4013      	ands	r3, r2
 8009418:	68ba      	ldr	r2, [r7, #8]
 800941a:	429a      	cmp	r2, r3
 800941c:	bf0c      	ite	eq
 800941e:	2301      	moveq	r3, #1
 8009420:	2300      	movne	r3, #0
 8009422:	b2db      	uxtb	r3, r3
 8009424:	461a      	mov	r2, r3
 8009426:	79fb      	ldrb	r3, [r7, #7]
 8009428:	429a      	cmp	r2, r3
 800942a:	d0a0      	beq.n	800936e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009436:	b480      	push	{r7}
 8009438:	b095      	sub	sp, #84	@ 0x54
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009446:	e853 3f00 	ldrex	r3, [r3]
 800944a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800944c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	461a      	mov	r2, r3
 800945a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800945c:	643b      	str	r3, [r7, #64]	@ 0x40
 800945e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009462:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009464:	e841 2300 	strex	r3, r2, [r1]
 8009468:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800946a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e6      	bne.n	800943e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3308      	adds	r3, #8
 8009476:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	e853 3f00 	ldrex	r3, [r3]
 800947e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009486:	f023 0301 	bic.w	r3, r3, #1
 800948a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	3308      	adds	r3, #8
 8009492:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009494:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009496:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009498:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800949a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800949c:	e841 2300 	strex	r3, r2, [r1]
 80094a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1e3      	bne.n	8009470 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d118      	bne.n	80094e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f023 0310 	bic.w	r3, r3, #16
 80094c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094ce:	61bb      	str	r3, [r7, #24]
 80094d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d2:	6979      	ldr	r1, [r7, #20]
 80094d4:	69ba      	ldr	r2, [r7, #24]
 80094d6:	e841 2300 	strex	r3, r2, [r1]
 80094da:	613b      	str	r3, [r7, #16]
   return(result);
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1e6      	bne.n	80094b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2220      	movs	r2, #32
 80094e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80094f6:	bf00      	nop
 80094f8:	3754      	adds	r7, #84	@ 0x54
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009502:	b480      	push	{r7}
 8009504:	b085      	sub	sp, #20
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009510:	2b01      	cmp	r3, #1
 8009512:	d101      	bne.n	8009518 <HAL_UARTEx_DisableFifoMode+0x16>
 8009514:	2302      	movs	r3, #2
 8009516:	e027      	b.n	8009568 <HAL_UARTEx_DisableFifoMode+0x66>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2224      	movs	r2, #36	@ 0x24
 8009524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f022 0201 	bic.w	r2, r2, #1
 800953e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009546:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2220      	movs	r2, #32
 800955a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3714      	adds	r7, #20
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009584:	2b01      	cmp	r3, #1
 8009586:	d101      	bne.n	800958c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009588:	2302      	movs	r3, #2
 800958a:	e02d      	b.n	80095e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2224      	movs	r2, #36	@ 0x24
 8009598:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f022 0201 	bic.w	r2, r2, #1
 80095b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	430a      	orrs	r2, r1
 80095c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f84f 	bl	800966c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2220      	movs	r2, #32
 80095da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009600:	2b01      	cmp	r3, #1
 8009602:	d101      	bne.n	8009608 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009604:	2302      	movs	r3, #2
 8009606:	e02d      	b.n	8009664 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2224      	movs	r2, #36	@ 0x24
 8009614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f022 0201 	bic.w	r2, r2, #1
 800962e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	430a      	orrs	r2, r1
 8009642:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f811 	bl	800966c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2220      	movs	r2, #32
 8009656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009678:	2b00      	cmp	r3, #0
 800967a:	d108      	bne.n	800968e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800968c:	e031      	b.n	80096f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800968e:	2308      	movs	r3, #8
 8009690:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009692:	2308      	movs	r3, #8
 8009694:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	0e5b      	lsrs	r3, r3, #25
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	f003 0307 	and.w	r3, r3, #7
 80096a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	0f5b      	lsrs	r3, r3, #29
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	f003 0307 	and.w	r3, r3, #7
 80096b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096b6:	7bbb      	ldrb	r3, [r7, #14]
 80096b8:	7b3a      	ldrb	r2, [r7, #12]
 80096ba:	4911      	ldr	r1, [pc, #68]	@ (8009700 <UARTEx_SetNbDataToProcess+0x94>)
 80096bc:	5c8a      	ldrb	r2, [r1, r2]
 80096be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80096c2:	7b3a      	ldrb	r2, [r7, #12]
 80096c4:	490f      	ldr	r1, [pc, #60]	@ (8009704 <UARTEx_SetNbDataToProcess+0x98>)
 80096c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
 80096d6:	7b7a      	ldrb	r2, [r7, #13]
 80096d8:	4909      	ldr	r1, [pc, #36]	@ (8009700 <UARTEx_SetNbDataToProcess+0x94>)
 80096da:	5c8a      	ldrb	r2, [r1, r2]
 80096dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096e0:	7b7a      	ldrb	r2, [r7, #13]
 80096e2:	4908      	ldr	r1, [pc, #32]	@ (8009704 <UARTEx_SetNbDataToProcess+0x98>)
 80096e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80096f2:	bf00      	nop
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	080100c8 	.word	0x080100c8
 8009704:	080100d0 	.word	0x080100d0

08009708 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
    /* Initialize WiFi GPIO pins */
    GPIO_InitTypeDef GPIO_InitStruct;

    /* Configure GPIO pins : PA1 PA2 PA0 - we are using ST GPIO definitions for winc1500 */
    GPIO_InitStruct.Pin   = CONF_WINC_PIN_RESET;
 800970e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009712:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8009714:	2301      	movs	r3, #1
 8009716:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;    // GPIO_PULLDOWN;
 8009718:	2300      	movs	r3, #0
 800971a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800971c:	2300      	movs	r3, #0
 800971e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = 0;
 8009720:	2300      	movs	r3, #0
 8009722:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CONF_WINC_PORT_RESET, &GPIO_InitStruct);
 8009724:	1d3b      	adds	r3, r7, #4
 8009726:	4619      	mov	r1, r3
 8009728:	481d      	ldr	r0, [pc, #116]	@ (80097a0 <init_chip_pins+0x98>)
 800972a:	f7f9 ff5d 	bl	80035e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_CHIP_ENABLE;
 800972e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009732:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(CONF_WINC_PORT_CHIP_ENABLE, &GPIO_InitStruct);
 8009734:	1d3b      	adds	r3, r7, #4
 8009736:	4619      	mov	r1, r3
 8009738:	481a      	ldr	r0, [pc, #104]	@ (80097a4 <init_chip_pins+0x9c>)
 800973a:	f7f9 ff55 	bl	80035e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_WAKE;
 800973e:	2340      	movs	r3, #64	@ 0x40
 8009740:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CONF_WINC_PORT_WAKE, &GPIO_InitStruct);
 8009742:	1d3b      	adds	r3, r7, #4
 8009744:	4619      	mov	r1, r3
 8009746:	4818      	ldr	r0, [pc, #96]	@ (80097a8 <init_chip_pins+0xa0>)
 8009748:	f7f9 ff4e 	bl	80035e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_POWER_ENABLE;
 800974c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009750:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CONF_WINC_PORT_POWER_ENABLE, &GPIO_InitStruct);
 8009752:	1d3b      	adds	r3, r7, #4
 8009754:	4619      	mov	r1, r3
 8009756:	4815      	ldr	r0, [pc, #84]	@ (80097ac <init_chip_pins+0xa4>)
 8009758:	f7f9 ff46 	bl	80035e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE;
 800975c:	2340      	movs	r3, #64	@ 0x40
 800975e:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE, &GPIO_InitStruct);
 8009760:	1d3b      	adds	r3, r7, #4
 8009762:	4619      	mov	r1, r3
 8009764:	480f      	ldr	r0, [pc, #60]	@ (80097a4 <init_chip_pins+0x9c>)
 8009766:	f7f9 ff3f 	bl	80035e8 <HAL_GPIO_Init>

    /* Set INIT value */
    HAL_GPIO_WritePin(CONF_WINC_PORT_POWER_ENABLE,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_RESET);
 800976a:	2200      	movs	r2, #0
 800976c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009770:	480e      	ldr	r0, [pc, #56]	@ (80097ac <init_chip_pins+0xa4>)
 8009772:	f7fa f911 	bl	8003998 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_SET);
 8009776:	2201      	movs	r2, #1
 8009778:	2140      	movs	r1, #64	@ 0x40
 800977a:	480a      	ldr	r0, [pc, #40]	@ (80097a4 <init_chip_pins+0x9c>)
 800977c:	f7fa f90c 	bl	8003998 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_CHIP_ENABLE,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_RESET);
 8009780:	2200      	movs	r2, #0
 8009782:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009786:	4807      	ldr	r0, [pc, #28]	@ (80097a4 <init_chip_pins+0x9c>)
 8009788:	f7fa f906 	bl	8003998 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_RESET,CONF_WINC_PIN_RESET,GPIO_PIN_RESET);
 800978c:	2200      	movs	r2, #0
 800978e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009792:	4803      	ldr	r0, [pc, #12]	@ (80097a0 <init_chip_pins+0x98>)
 8009794:	f7fa f900 	bl	8003998 <HAL_GPIO_WritePin>

}
 8009798:	bf00      	nop
 800979a:	3718      	adds	r7, #24
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	42020c00 	.word	0x42020c00
 80097a4:	42020400 	.word	0x42020400
 80097a8:	42020800 	.word	0x42020800
 80097ac:	42020000 	.word	0x42020000

080097b0 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	af00      	add	r7, sp, #0
	/* Initialize chip IOs. */
	init_chip_pins();
 80097b4:	f7ff ffa8 	bl	8009708 <init_chip_pins>

	/* Perform chip reset. */
	nm_bsp_reset();
 80097b8:	f000 f804 	bl	80097c4 <nm_bsp_reset>

	return M2M_SUCCESS;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	bd80      	pop	{r7, pc}
	...

080097c4 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	af00      	add	r7, sp, #0
    /* Set Power sequence of GPIO lines */
    /* -------------------------------- */

    /* Power enable (3.3V) - 3V3_DC2DC_EN output */
    HAL_GPIO_WritePin(CONF_WINC_PORT_POWER_ENABLE,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_SET);
 80097c8:	2201      	movs	r2, #1
 80097ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80097ce:	4811      	ldr	r0, [pc, #68]	@ (8009814 <nm_bsp_reset+0x50>)
 80097d0:	f7fa f8e2 	bl	8003998 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80097d4:	2064      	movs	r0, #100	@ 0x64
 80097d6:	f7f8 f881 	bl	80018dc <HAL_Delay>

    /* Level Shifter Translate enable - LEVEL_TRNSLT_EN output */
    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_RESET);
 80097da:	2200      	movs	r2, #0
 80097dc:	2140      	movs	r1, #64	@ 0x40
 80097de:	480e      	ldr	r0, [pc, #56]	@ (8009818 <nm_bsp_reset+0x54>)
 80097e0:	f7fa f8da 	bl	8003998 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80097e4:	2064      	movs	r0, #100	@ 0x64
 80097e6:	f7f8 f879 	bl	80018dc <HAL_Delay>

    /* Set CHIP enable */
	HAL_GPIO_WritePin(CONF_WINC_PORT_CHIP_ENABLE,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
 80097ea:	2201      	movs	r2, #1
 80097ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80097f0:	4809      	ldr	r0, [pc, #36]	@ (8009818 <nm_bsp_reset+0x54>)
 80097f2:	f7fa f8d1 	bl	8003998 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80097f6:	2064      	movs	r0, #100	@ 0x64
 80097f8:	f7f8 f870 	bl	80018dc <HAL_Delay>

    /* Set RSTN 1.8V */
    HAL_GPIO_WritePin(CONF_WINC_PORT_RESET,CONF_WINC_PIN_RESET,GPIO_PIN_SET);
 80097fc:	2201      	movs	r2, #1
 80097fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009802:	4806      	ldr	r0, [pc, #24]	@ (800981c <nm_bsp_reset+0x58>)
 8009804:	f7fa f8c8 	bl	8003998 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8009808:	2064      	movs	r0, #100	@ 0x64
 800980a:	f7f8 f867 	bl	80018dc <HAL_Delay>

}
 800980e:	bf00      	nop
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	42020000 	.word	0x42020000
 8009818:	42020400 	.word	0x42020400
 800981c:	42020c00 	.word	0x42020c00

08009820 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
    /* use FreeRTOS delay */
    HAL_Delay(u32TimeMsec);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7f8 f857 	bl	80018dc <HAL_Delay>
}
 800982e:	bf00      	nop
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
	...

08009838 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b088      	sub	sp, #32
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    /* EXTI2 init ISR function - called from nm_bsp_register_isr() */

     __GPIOC_CLK_ENABLE();
 8009840:	4b13      	ldr	r3, [pc, #76]	@ (8009890 <nm_bsp_register_isr+0x58>)
 8009842:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009846:	4a12      	ldr	r2, [pc, #72]	@ (8009890 <nm_bsp_register_isr+0x58>)
 8009848:	f043 0304 	orr.w	r3, r3, #4
 800984c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009850:	4b0f      	ldr	r3, [pc, #60]	@ (8009890 <nm_bsp_register_isr+0x58>)
 8009852:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009856:	f003 0304 	and.w	r3, r3, #4
 800985a:	60bb      	str	r3, [r7, #8]
 800985c:	68bb      	ldr	r3, [r7, #8]
	 //__GPIOA_CLK_ENABLE();

    /*Configure GPIO pin : PA2 */
    GPIO_InitStruct.Pin   = CONF_WINC_SPI_INT_PIN;
 800985e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009862:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8009864:	4b0b      	ldr	r3, [pc, #44]	@ (8009894 <nm_bsp_register_isr+0x5c>)
 8009866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8009868:	2300      	movs	r3, #0
 800986a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CONF_WINC_SPI_INT_PORT, &GPIO_InitStruct);
 800986c:	f107 030c 	add.w	r3, r7, #12
 8009870:	4619      	mov	r1, r3
 8009872:	4809      	ldr	r0, [pc, #36]	@ (8009898 <nm_bsp_register_isr+0x60>)
 8009874:	f7f9 feb8 	bl	80035e8 <HAL_GPIO_Init>

    /* EXTI 2 (PA2) interrupt init*/
    HAL_NVIC_SetPriority(CONF_WINC_EXTI_IRQN, 0x00, 0);
 8009878:	2200      	movs	r2, #0
 800987a:	2100      	movs	r1, #0
 800987c:	2017      	movs	r0, #23
 800987e:	f7f9 fd0d 	bl	800329c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CONF_WINC_EXTI_IRQN);
 8009882:	2017      	movs	r0, #23
 8009884:	f7f9 fd24 	bl	80032d0 <HAL_NVIC_EnableIRQ>
	/* Enable and set EXTI line 15_10 Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
#endif

}
 8009888:	bf00      	nop
 800988a:	3720      	adds	r7, #32
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	46020c00 	.word	0x46020c00
 8009894:	10210000 	.word	0x10210000
 8009898:	42020c00 	.word	0x42020c00

0800989c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	4603      	mov	r3, r0
 80098a4:	71fb      	strb	r3, [r7, #7]
    if (1 == u8Enable)
 80098a6:	79fb      	ldrb	r3, [r7, #7]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d108      	bne.n	80098be <nm_bsp_interrupt_ctrl+0x22>
    {
        HAL_NVIC_SetPriority((IRQn_Type)(CONF_WINC_EXTI_IRQN), 0x01, 0);
 80098ac:	2200      	movs	r2, #0
 80098ae:	2101      	movs	r1, #1
 80098b0:	2017      	movs	r0, #23
 80098b2:	f7f9 fcf3 	bl	800329c <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 80098b6:	2017      	movs	r0, #23
 80098b8:	f7f9 fd0a 	bl	80032d0 <HAL_NVIC_EnableIRQ>
    }
    else
    {
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
    }
}
 80098bc:	e002      	b.n	80098c4 <nm_bsp_interrupt_ctrl+0x28>
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 80098be:	2017      	movs	r0, #23
 80098c0:	f7f9 fd14 	bl	80032ec <HAL_NVIC_DisableIRQ>
}
 80098c4:	bf00      	nop
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <spi_select_slave>:
*	@fn		spi_select_slave
*	@brief	Select slave chip select: true - select, false - deselect
*	@return	None
*/
static void spi_select_slave(const uint8_t select)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	4603      	mov	r3, r0
 80098d4:	71fb      	strb	r3, [r7, #7]
    if (select)
 80098d6:	79fb      	ldrb	r3, [r7, #7]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d006      	beq.n	80098ea <spi_select_slave+0x1e>
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_RESET);
 80098dc:	2200      	movs	r2, #0
 80098de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80098e2:	4807      	ldr	r0, [pc, #28]	@ (8009900 <spi_select_slave+0x34>)
 80098e4:	f7fa f858 	bl	8003998 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
    }
}
 80098e8:	e005      	b.n	80098f6 <spi_select_slave+0x2a>
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 80098ea:	2201      	movs	r2, #1
 80098ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80098f0:	4803      	ldr	r0, [pc, #12]	@ (8009900 <spi_select_slave+0x34>)
 80098f2:	f7fa f851 	bl	8003998 <HAL_GPIO_WritePin>
}
 80098f6:	bf00      	nop
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	42020c00 	.word	0x42020c00

08009904 <nm_spi_rw>:
	return M2M_SUCCESS;
}
#else

sint8 nm_spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b088      	sub	sp, #32
 8009908:	af02      	add	r7, sp, #8
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	4613      	mov	r3, r2
 8009910:	80fb      	strh	r3, [r7, #6]
   HAL_StatusTypeDef status;

    /* Start SPI transaction - polling method */
  	spi_select_slave(true);
 8009912:	2001      	movs	r0, #1
 8009914:	f7ff ffda 	bl	80098cc <spi_select_slave>


    /* Transmit/Recieve */
    if (pu8Mosi == NULL)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10b      	bne.n	8009936 <nm_spi_rw+0x32>
	{
		status = HAL_SPI_TransmitReceive(&hspiWifi,spiDummyBuf,pu8Miso,u16Sz,1000);
 800991e:	88fb      	ldrh	r3, [r7, #6]
 8009920:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009924:	9200      	str	r2, [sp, #0]
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	4921      	ldr	r1, [pc, #132]	@ (80099b0 <nm_spi_rw+0xac>)
 800992a:	4822      	ldr	r0, [pc, #136]	@ (80099b4 <nm_spi_rw+0xb0>)
 800992c:	f7fe fe48 	bl	80085c0 <HAL_SPI_TransmitReceive>
 8009930:	4603      	mov	r3, r0
 8009932:	75fb      	strb	r3, [r7, #23]
 8009934:	e01f      	b.n	8009976 <nm_spi_rw+0x72>
    }
    else if(pu8Miso == NULL)
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d111      	bne.n	8009960 <nm_spi_rw+0x5c>
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,spiDummyBuf,u16Sz,1000);
 800993c:	88fb      	ldrh	r3, [r7, #6]
 800993e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009942:	9200      	str	r2, [sp, #0]
 8009944:	4a1a      	ldr	r2, [pc, #104]	@ (80099b0 <nm_spi_rw+0xac>)
 8009946:	68f9      	ldr	r1, [r7, #12]
 8009948:	481a      	ldr	r0, [pc, #104]	@ (80099b4 <nm_spi_rw+0xb0>)
 800994a:	f7fe fe39 	bl	80085c0 <HAL_SPI_TransmitReceive>
 800994e:	4603      	mov	r3, r0
 8009950:	75fb      	strb	r3, [r7, #23]
        memset(spiDummyBuf,0, u16Sz);
 8009952:	88fb      	ldrh	r3, [r7, #6]
 8009954:	461a      	mov	r2, r3
 8009956:	2100      	movs	r1, #0
 8009958:	4815      	ldr	r0, [pc, #84]	@ (80099b0 <nm_spi_rw+0xac>)
 800995a:	f004 fcdf 	bl	800e31c <memset>
 800995e:	e00a      	b.n	8009976 <nm_spi_rw+0x72>
    }
    else
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,pu8Miso,u16Sz,1000);
 8009960:	88fb      	ldrh	r3, [r7, #6]
 8009962:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009966:	9200      	str	r2, [sp, #0]
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	68f9      	ldr	r1, [r7, #12]
 800996c:	4811      	ldr	r0, [pc, #68]	@ (80099b4 <nm_spi_rw+0xb0>)
 800996e:	f7fe fe27 	bl	80085c0 <HAL_SPI_TransmitReceive>
 8009972:	4603      	mov	r3, r0
 8009974:	75fb      	strb	r3, [r7, #23]
    }

    /* Handle Transmit/Recieve error */
    if (status != HAL_OK)
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d010      	beq.n	800999e <nm_spi_rw+0x9a>
    {
        M2M_ERR("%s: HAL_SPI_TransmitReceive failed. error (%d)\n",__FUNCTION__,status);
 800997c:	22b2      	movs	r2, #178	@ 0xb2
 800997e:	490e      	ldr	r1, [pc, #56]	@ (80099b8 <nm_spi_rw+0xb4>)
 8009980:	480e      	ldr	r0, [pc, #56]	@ (80099bc <nm_spi_rw+0xb8>)
 8009982:	f004 fb7b 	bl	800e07c <iprintf>
 8009986:	7dfb      	ldrb	r3, [r7, #23]
 8009988:	461a      	mov	r2, r3
 800998a:	490b      	ldr	r1, [pc, #44]	@ (80099b8 <nm_spi_rw+0xb4>)
 800998c:	480c      	ldr	r0, [pc, #48]	@ (80099c0 <nm_spi_rw+0xbc>)
 800998e:	f004 fb75 	bl	800e07c <iprintf>
 8009992:	200d      	movs	r0, #13
 8009994:	f004 fb84 	bl	800e0a0 <putchar>
        return status;
 8009998:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800999c:	e003      	b.n	80099a6 <nm_spi_rw+0xa2>
    }

  	spi_select_slave(false);
 800999e:	2000      	movs	r0, #0
 80099a0:	f7ff ff94 	bl	80098cc <spi_select_slave>

	return M2M_SUCCESS;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	20000a98 	.word	0x20000a98
 80099b4:	20000a08 	.word	0x20000a08
 80099b8:	080100d8 	.word	0x080100d8
 80099bc:	0800efa4 	.word	0x0800efa4
 80099c0:	0800efb8 	.word	0x0800efb8

080099c4 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
 80099cc:	2300      	movs	r3, #0
 80099ce:	73fb      	strb	r3, [r7, #15]

	 /* WiFi SPI init function - called from nm_bus_init() */

	hspiWifi.Instance			   = SPI_WIFI;
 80099d0:	4b20      	ldr	r3, [pc, #128]	@ (8009a54 <nm_bus_init+0x90>)
 80099d2:	4a21      	ldr	r2, [pc, #132]	@ (8009a58 <nm_bus_init+0x94>)
 80099d4:	601a      	str	r2, [r3, #0]
	hspiWifi.Init.Mode			   = SPI_MODE_MASTER;
 80099d6:	4b1f      	ldr	r3, [pc, #124]	@ (8009a54 <nm_bus_init+0x90>)
 80099d8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80099dc:	605a      	str	r2, [r3, #4]
	hspiWifi.Init.Direction 	   = SPI_DIRECTION_2LINES;
 80099de:	4b1d      	ldr	r3, [pc, #116]	@ (8009a54 <nm_bus_init+0x90>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	609a      	str	r2, [r3, #8]
	hspiWifi.Init.DataSize		   = SPI_DATASIZE_8BIT;
 80099e4:	4b1b      	ldr	r3, [pc, #108]	@ (8009a54 <nm_bus_init+0x90>)
 80099e6:	2207      	movs	r2, #7
 80099e8:	60da      	str	r2, [r3, #12]
	hspiWifi.Init.CLKPolarity	   = SPI_POLARITY_LOW;
 80099ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009a54 <nm_bus_init+0x90>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	611a      	str	r2, [r3, #16]
	hspiWifi.Init.CLKPhase		   = SPI_PHASE_1EDGE;
 80099f0:	4b18      	ldr	r3, [pc, #96]	@ (8009a54 <nm_bus_init+0x90>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	615a      	str	r2, [r3, #20]
	hspiWifi.Init.NSS			   = SPI_NSS_SOFT;
 80099f6:	4b17      	ldr	r3, [pc, #92]	@ (8009a54 <nm_bus_init+0x90>)
 80099f8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80099fc:	619a      	str	r2, [r3, #24]
	hspiWifi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80099fe:	4b15      	ldr	r3, [pc, #84]	@ (8009a54 <nm_bus_init+0x90>)
 8009a00:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009a04:	61da      	str	r2, [r3, #28]
	hspiWifi.Init.FirstBit		   = SPI_FIRSTBIT_MSB;
 8009a06:	4b13      	ldr	r3, [pc, #76]	@ (8009a54 <nm_bus_init+0x90>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	621a      	str	r2, [r3, #32]
	hspiWifi.Init.TIMode		   = SPI_TIMODE_DISABLE;
 8009a0c:	4b11      	ldr	r3, [pc, #68]	@ (8009a54 <nm_bus_init+0x90>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	625a      	str	r2, [r3, #36]	@ 0x24
	hspiWifi.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 8009a12:	4b10      	ldr	r3, [pc, #64]	@ (8009a54 <nm_bus_init+0x90>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	629a      	str	r2, [r3, #40]	@ 0x28
	hspiWifi.Init.CRCPolynomial    = 10;
 8009a18:	4b0e      	ldr	r3, [pc, #56]	@ (8009a54 <nm_bus_init+0x90>)
 8009a1a:	220a      	movs	r2, #10
 8009a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
//	  hspiWifi.Init.CRCLength		 = SPI_CRC_LENGTH_DATASIZE;
//	  hspiWifi.Init.NSSPMode		 = SPI_NSS_PULSE_DISABLE;
	if (HAL_SPI_Init(&hspiWifi) != HAL_OK)
 8009a1e:	480d      	ldr	r0, [pc, #52]	@ (8009a54 <nm_bus_init+0x90>)
 8009a20:	f7fe fcb8 	bl	8008394 <HAL_SPI_Init>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <nm_bus_init+0x7c>
	{
		M2M_ERR("SPI bus Initialization error\r\n");
 8009a2a:	22f6      	movs	r2, #246	@ 0xf6
 8009a2c:	490b      	ldr	r1, [pc, #44]	@ (8009a5c <nm_bus_init+0x98>)
 8009a2e:	480c      	ldr	r0, [pc, #48]	@ (8009a60 <nm_bus_init+0x9c>)
 8009a30:	f004 fb24 	bl	800e07c <iprintf>
 8009a34:	480b      	ldr	r0, [pc, #44]	@ (8009a64 <nm_bus_init+0xa0>)
 8009a36:	f004 fb91 	bl	800e15c <puts>
 8009a3a:	200d      	movs	r0, #13
 8009a3c:	f004 fb30 	bl	800e0a0 <putchar>
	}

	HAL_SPI_MspInit(&hspiWifi);
 8009a40:	4804      	ldr	r0, [pc, #16]	@ (8009a54 <nm_bus_init+0x90>)
 8009a42:	f7f7 fc33 	bl	80012ac <HAL_SPI_MspInit>
	return result;
 8009a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	20000a08 	.word	0x20000a08
 8009a58:	40013000 	.word	0x40013000
 8009a5c:	080100e4 	.word	0x080100e4
 8009a60:	0800efa4 	.word	0x0800efa4
 8009a64:	0800efe8 	.word	0x0800efe8

08009a68 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	af00      	add	r7, sp, #0
	return M2M_SUCCESS;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8 *pDst, uint8 *pSrc, uint32 sz)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
    if(sz == 0) return;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d010      	beq.n	8009aac <m2m_memcpy+0x34>
    do
    {
        *pDst = *pSrc;
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	781a      	ldrb	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	701a      	strb	r2, [r3, #0]
        pDst++;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3301      	adds	r3, #1
 8009a96:	60fb      	str	r3, [r7, #12]
        pSrc++;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	60bb      	str	r3, [r7, #8]
    } while(--sz);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	607b      	str	r3, [r7, #4]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1ef      	bne.n	8009a8a <m2m_memcpy+0x12>
 8009aaa:	e000      	b.n	8009aae <m2m_memcpy+0x36>
    if(sz == 0) return;
 8009aac:	bf00      	nop
}
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <m2m_memset>:

    return cs;
}

void m2m_memset(uint8 *pBuf, uint8 val, uint32 sz)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	607a      	str	r2, [r7, #4]
 8009ac4:	72fb      	strb	r3, [r7, #11]
    if(sz == 0) return;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00c      	beq.n	8009ae6 <m2m_memset+0x2e>
    do
    {
        *pBuf = val;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	7afa      	ldrb	r2, [r7, #11]
 8009ad0:	701a      	strb	r2, [r3, #0]
        pBuf++;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	60fb      	str	r3, [r7, #12]
    } while(--sz);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	607b      	str	r3, [r7, #4]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1f3      	bne.n	8009acc <m2m_memset+0x14>
 8009ae4:	e000      	b.n	8009ae8 <m2m_memset+0x30>
    if(sz == 0) return;
 8009ae6:	bf00      	nop
}
 8009ae8:	3714      	adds	r7, #20
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <m2m_strlen>:

uint16 m2m_strlen(uint8 *pcStr)
{
 8009af2:	b480      	push	{r7}
 8009af4:	b085      	sub	sp, #20
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
    uint16  u16StrLen = 0;
 8009afa:	2300      	movs	r3, #0
 8009afc:	81fb      	strh	r3, [r7, #14]
    while(*pcStr)
 8009afe:	e005      	b.n	8009b0c <m2m_strlen+0x1a>
    {
        u16StrLen ++;
 8009b00:	89fb      	ldrh	r3, [r7, #14]
 8009b02:	3301      	adds	r3, #1
 8009b04:	81fb      	strh	r3, [r7, #14]
        pcStr++;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	607b      	str	r3, [r7, #4]
    while(*pcStr)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1f5      	bne.n	8009b00 <m2m_strlen+0xe>
    }
    return u16StrLen;
 8009b14:	89fb      	ldrh	r3, [r7, #14]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3714      	adds	r7, #20
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr

08009b22 <hexchar_2_val>:
    return s8Result;
}

/* Convert hexchar to value 0-15 */
static uint8 hexchar_2_val(uint8 ch)
{
 8009b22:	b480      	push	{r7}
 8009b24:	b083      	sub	sp, #12
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	4603      	mov	r3, r0
 8009b2a:	71fb      	strb	r3, [r7, #7]
    /* ch -= '0' */
    ch -= 0x30;
 8009b2c:	79fb      	ldrb	r3, [r7, #7]
 8009b2e:	3b30      	subs	r3, #48	@ 0x30
 8009b30:	71fb      	strb	r3, [r7, #7]
    if(ch <= 9)
 8009b32:	79fb      	ldrb	r3, [r7, #7]
 8009b34:	2b09      	cmp	r3, #9
 8009b36:	d801      	bhi.n	8009b3c <hexchar_2_val+0x1a>
        return ch;
 8009b38:	79fb      	ldrb	r3, [r7, #7]
 8009b3a:	e00e      	b.n	8009b5a <hexchar_2_val+0x38>
    /* OR with 0x20 to convert upper case to lower case. */
    ch |= 0x20;
 8009b3c:	79fb      	ldrb	r3, [r7, #7]
 8009b3e:	f043 0320 	orr.w	r3, r3, #32
 8009b42:	71fb      	strb	r3, [r7, #7]
    /* ch -= ('a'-'0') */
    ch -= 0x31;
 8009b44:	79fb      	ldrb	r3, [r7, #7]
 8009b46:	3b31      	subs	r3, #49	@ 0x31
 8009b48:	71fb      	strb	r3, [r7, #7]
    if(ch <= 5)
 8009b4a:	79fb      	ldrb	r3, [r7, #7]
 8009b4c:	2b05      	cmp	r3, #5
 8009b4e:	d803      	bhi.n	8009b58 <hexchar_2_val+0x36>
        return ch + 10;
 8009b50:	79fb      	ldrb	r3, [r7, #7]
 8009b52:	330a      	adds	r3, #10
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	e000      	b.n	8009b5a <hexchar_2_val+0x38>
    return 0xFF;
 8009b58:	23ff      	movs	r3, #255	@ 0xff
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	370c      	adds	r7, #12
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <hexstr_2_bytes>:

/* Convert hexstring to bytes */
sint8 hexstr_2_bytes(uint8 *pu8Out, uint8 *pu8In, uint8 u8SizeOut)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b086      	sub	sp, #24
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	60f8      	str	r0, [r7, #12]
 8009b6e:	60b9      	str	r1, [r7, #8]
 8009b70:	4613      	mov	r3, r2
 8009b72:	71fb      	strb	r3, [r7, #7]
    while(u8SizeOut--)
 8009b74:	e02c      	b.n	8009bd0 <hexstr_2_bytes+0x6a>
    {
        uint8   u8Out = hexchar_2_val(*pu8In++);
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	1c5a      	adds	r2, r3, #1
 8009b7a:	60ba      	str	r2, [r7, #8]
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7ff ffcf 	bl	8009b22 <hexchar_2_val>
 8009b84:	4603      	mov	r3, r0
 8009b86:	75fb      	strb	r3, [r7, #23]
        if(u8Out > 0xF)
 8009b88:	7dfb      	ldrb	r3, [r7, #23]
 8009b8a:	2b0f      	cmp	r3, #15
 8009b8c:	d902      	bls.n	8009b94 <hexstr_2_bytes+0x2e>
            return M2M_ERR_INVALID_ARG;
 8009b8e:	f06f 030e 	mvn.w	r3, #14
 8009b92:	e023      	b.n	8009bdc <hexstr_2_bytes+0x76>
        *pu8Out = u8Out * 0x10;
 8009b94:	7dfb      	ldrb	r3, [r7, #23]
 8009b96:	011b      	lsls	r3, r3, #4
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	701a      	strb	r2, [r3, #0]
        u8Out = hexchar_2_val(*pu8In++);
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	60ba      	str	r2, [r7, #8]
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7ff ffbb 	bl	8009b22 <hexchar_2_val>
 8009bac:	4603      	mov	r3, r0
 8009bae:	75fb      	strb	r3, [r7, #23]
        if(u8Out > 0xF)
 8009bb0:	7dfb      	ldrb	r3, [r7, #23]
 8009bb2:	2b0f      	cmp	r3, #15
 8009bb4:	d902      	bls.n	8009bbc <hexstr_2_bytes+0x56>
            return M2M_ERR_INVALID_ARG;
 8009bb6:	f06f 030e 	mvn.w	r3, #14
 8009bba:	e00f      	b.n	8009bdc <hexstr_2_bytes+0x76>
        *pu8Out += u8Out;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	781a      	ldrb	r2, [r3, #0]
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	701a      	strb	r2, [r3, #0]
        pu8Out++;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	60fb      	str	r3, [r7, #12]
    while(u8SizeOut--)
 8009bd0:	79fb      	ldrb	r3, [r7, #7]
 8009bd2:	1e5a      	subs	r2, r3, #1
 8009bd4:	71fa      	strb	r2, [r7, #7]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1cd      	bne.n	8009b76 <hexstr_2_bytes+0x10>
    }
    return M2M_SUCCESS;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3718      	adds	r7, #24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
 8009be4:	b480      	push	{r7}
 8009be6:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
 8009be8:	4b05      	ldr	r3, [pc, #20]	@ (8009c00 <isr+0x1c>)
 8009bea:	78db      	ldrb	r3, [r3, #3]
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	3301      	adds	r3, #1
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	4b03      	ldr	r3, [pc, #12]	@ (8009c00 <isr+0x1c>)
 8009bf4:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
 8009bf6:	bf00      	nop
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	20000bc4 	.word	0x20000bc4

08009c04 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	71fb      	strb	r3, [r7, #7]

	gstrHifCxt.u8HifRXDone = 0;
 8009c0e:	4b14      	ldr	r3, [pc, #80]	@ (8009c60 <hif_set_rx_done+0x5c>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
 8009c14:	2001      	movs	r0, #1
 8009c16:	f7ff fe41 	bl	800989c <nm_bsp_interrupt_ctrl>
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
 8009c1a:	463b      	mov	r3, r7
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009c22:	f001 ff37 	bl	800ba94 <nm_read_reg_with_ret>
 8009c26:	4603      	mov	r3, r0
 8009c28:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 8009c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10f      	bne.n	8009c52 <hif_set_rx_done+0x4e>
	/* Set RX Done */
	reg |= NBIT1;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	f043 0302 	orr.w	r3, r3, #2
 8009c38:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009c42:	f001 ff35 	bl	800bab0 <nm_write_reg>
 8009c46:	4603      	mov	r3, r0
 8009c48:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 8009c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c4e:	2b00      	cmp	r3, #0
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
 8009c50:	e000      	b.n	8009c54 <hif_set_rx_done+0x50>
	if(ret != M2M_SUCCESS)goto ERR1;
 8009c52:	bf00      	nop
	return ret;
 8009c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3708      	adds	r7, #8
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	20000bc4 	.word	0x20000bc4

08009c64 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	603a      	str	r2, [r7, #0]
 8009c6e:	71fb      	strb	r3, [r7, #7]
 8009c70:	460b      	mov	r3, r1
 8009c72:	80bb      	strh	r3, [r7, #4]


}
 8009c74:	bf00      	nop
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 8009c86:	2300      	movs	r3, #0
 8009c88:	71fb      	strb	r3, [r7, #7]
	if(gstrHifCxt.u8HifRXDone)
 8009c8a:	4b14      	ldr	r3, [pc, #80]	@ (8009cdc <hif_chip_wake+0x5c>)
 8009c8c:	789b      	ldrb	r3, [r3, #2]
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <hif_chip_wake+0x1a>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
 8009c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c98:	e01c      	b.n	8009cd4 <hif_chip_wake+0x54>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
 8009c9a:	4b10      	ldr	r3, [pc, #64]	@ (8009cdc <hif_chip_wake+0x5c>)
 8009c9c:	785b      	ldrb	r3, [r3, #1]
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10c      	bne.n	8009cbe <hif_chip_wake+0x3e>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 8009ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8009cdc <hif_chip_wake+0x5c>)
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d007      	beq.n	8009cbe <hif_chip_wake+0x3e>
		{
			ret = chip_wake();
 8009cae:	f001 fca5 	bl	800b5fc <chip_wake>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 8009cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d107      	bne.n	8009cce <hif_chip_wake+0x4e>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
 8009cbe:	4b07      	ldr	r3, [pc, #28]	@ (8009cdc <hif_chip_wake+0x5c>)
 8009cc0:	785b      	ldrb	r3, [r3, #1]
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	b2da      	uxtb	r2, r3
 8009cc8:	4b04      	ldr	r3, [pc, #16]	@ (8009cdc <hif_chip_wake+0x5c>)
 8009cca:	705a      	strb	r2, [r3, #1]
 8009ccc:	e000      	b.n	8009cd0 <hif_chip_wake+0x50>
			if(ret != M2M_SUCCESS)goto ERR1;
 8009cce:	bf00      	nop
ERR1:
	return ret;
 8009cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	20000bc4 	.word	0x20000bc4

08009ce0 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
 8009ce4:	4b08      	ldr	r3, [pc, #32]	@ (8009d08 <hif_chip_sleep_sc+0x28>)
 8009ce6:	785b      	ldrb	r3, [r3, #1]
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d006      	beq.n	8009cfc <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
 8009cee:	4b06      	ldr	r3, [pc, #24]	@ (8009d08 <hif_chip_sleep_sc+0x28>)
 8009cf0:	785b      	ldrb	r3, [r3, #1]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	4b03      	ldr	r3, [pc, #12]	@ (8009d08 <hif_chip_sleep_sc+0x28>)
 8009cfa:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr
 8009d08:	20000bc4 	.word	0x20000bc4

08009d0c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 8009d12:	2300      	movs	r3, #0
 8009d14:	71fb      	strb	r3, [r7, #7]

	if(gstrHifCxt.u8ChipSleep >= 1)
 8009d16:	4b12      	ldr	r3, [pc, #72]	@ (8009d60 <hif_chip_sleep+0x54>)
 8009d18:	785b      	ldrb	r3, [r3, #1]
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d006      	beq.n	8009d2e <hif_chip_sleep+0x22>
	{
		gstrHifCxt.u8ChipSleep--;
 8009d20:	4b0f      	ldr	r3, [pc, #60]	@ (8009d60 <hif_chip_sleep+0x54>)
 8009d22:	785b      	ldrb	r3, [r3, #1]
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	3b01      	subs	r3, #1
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009d60 <hif_chip_sleep+0x54>)
 8009d2c:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
 8009d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8009d60 <hif_chip_sleep+0x54>)
 8009d30:	785b      	ldrb	r3, [r3, #1]
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10c      	bne.n	8009d52 <hif_chip_sleep+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 8009d38:	4b09      	ldr	r3, [pc, #36]	@ (8009d60 <hif_chip_sleep+0x54>)
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d007      	beq.n	8009d52 <hif_chip_sleep+0x46>
		{
			ret = chip_sleep();
 8009d42:	f001 fbf7 	bl	800b534 <chip_sleep>
 8009d46:	4603      	mov	r3, r0
 8009d48:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 8009d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	e000      	b.n	8009d54 <hif_chip_sleep+0x48>
		}
		else
		{
		}
	}
ERR1:
 8009d52:	bf00      	nop
	return ret;
 8009d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	20000bc4 	.word	0x20000bc4

08009d64 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
 8009d6c:	222c      	movs	r2, #44	@ 0x2c
 8009d6e:	2100      	movs	r1, #0
 8009d70:	4807      	ldr	r0, [pc, #28]	@ (8009d90 <hif_init+0x2c>)
 8009d72:	f7ff fea1 	bl	8009ab8 <m2m_memset>
	nm_bsp_register_isr(isr);
 8009d76:	4807      	ldr	r0, [pc, #28]	@ (8009d94 <hif_init+0x30>)
 8009d78:	f7ff fd5e 	bl	8009838 <nm_bsp_register_isr>
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
 8009d7c:	4906      	ldr	r1, [pc, #24]	@ (8009d98 <hif_init+0x34>)
 8009d7e:	2003      	movs	r0, #3
 8009d80:	f000 fc5a 	bl	800a638 <hif_register_cb>
	return M2M_SUCCESS;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	20000bc4 	.word	0x20000bc4
 8009d94:	08009be5 	.word	0x08009be5
 8009d98:	08009c65 	.word	0x08009c65

08009d9c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b088      	sub	sp, #32
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	603a      	str	r2, [r7, #0]
 8009da4:	461a      	mov	r2, r3
 8009da6:	4603      	mov	r3, r0
 8009da8:	71fb      	strb	r3, [r7, #7]
 8009daa:	460b      	mov	r3, r1
 8009dac:	71bb      	strb	r3, [r7, #6]
 8009dae:	4613      	mov	r3, r2
 8009db0:	80bb      	strh	r3, [r7, #4]
	sint8		ret = M2M_ERR_SEND;
 8009db2:	23ff      	movs	r3, #255	@ 0xff
 8009db4:	77fb      	strb	r3, [r7, #31]
	tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
 8009db6:	79bb      	ldrb	r3, [r7, #6]
 8009db8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	767b      	strb	r3, [r7, #25]
	strHif.u8Gid		= u8Gid;
 8009dc0:	79fb      	ldrb	r3, [r7, #7]
 8009dc2:	763b      	strb	r3, [r7, #24]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 8009dc4:	2308      	movs	r3, #8
 8009dc6:	837b      	strh	r3, [r7, #26]
	if(pu8DataBuf != NULL)
 8009dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d008      	beq.n	8009de0 <hif_send+0x44>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
 8009dce:	8b7a      	ldrh	r2, [r7, #26]
 8009dd0:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8009dd2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009dd4:	440b      	add	r3, r1
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	4413      	add	r3, r2
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	837b      	strh	r3, [r7, #26]
 8009dde:	e004      	b.n	8009dea <hif_send+0x4e>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
 8009de0:	8b7a      	ldrh	r2, [r7, #26]
 8009de2:	88bb      	ldrh	r3, [r7, #4]
 8009de4:	4413      	add	r3, r2
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	837b      	strh	r3, [r7, #26]
	}
    if (strHif.u16Length <= M2M_HIF_MAX_PACKET_SIZE)
 8009dea:	8b7b      	ldrh	r3, [r7, #26]
 8009dec:	f240 623c 	movw	r2, #1596	@ 0x63c
 8009df0:	4293      	cmp	r3, r2
 8009df2:	f200 8103 	bhi.w	8009ffc <hif_send+0x260>
    {
	ret = hif_chip_wake();
 8009df6:	f7ff ff43 	bl	8009c80 <hif_chip_wake>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	77fb      	strb	r3, [r7, #31]
	if(ret == M2M_SUCCESS)
 8009dfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f040 80ed 	bne.w	8009fe2 <hif_send+0x246>
	{
		volatile uint32 reg, dma_addr = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	81fb      	strh	r3, [r7, #14]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
 8009e10:	2300      	movs	r3, #0
 8009e12:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
 8009e14:	79fa      	ldrb	r2, [r7, #7]
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
 8009e1c:	79bb      	ldrb	r3, [r7, #6]
 8009e1e:	021a      	lsls	r2, r3, #8
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
 8009e26:	8b7b      	ldrh	r3, [r7, #26]
 8009e28:	041a      	lsls	r2, r3, #16
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	4619      	mov	r1, r3
 8009e34:	f241 008c 	movw	r0, #4236	@ 0x108c
 8009e38:	f001 fe3a 	bl	800bab0 <nm_write_reg>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 8009e40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f040 80f3 	bne.w	800a030 <hif_send+0x294>

		reg = 0UL;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	f043 0302 	orr.w	r3, r3, #2
 8009e54:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	4619      	mov	r1, r3
 8009e5a:	f241 0078 	movw	r0, #4216	@ 0x1078
 8009e5e:	f001 fe27 	bl	800bab0 <nm_write_reg>
 8009e62:	4603      	mov	r3, r0
 8009e64:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 8009e66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f040 80e2 	bne.w	800a034 <hif_send+0x298>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
 8009e70:	2300      	movs	r3, #0
 8009e72:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
 8009e74:	2300      	movs	r3, #0
 8009e76:	81fb      	strh	r3, [r7, #14]
 8009e78:	e03b      	b.n	8009ef2 <hif_send+0x156>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
 8009e7a:	f107 0314 	add.w	r3, r7, #20
 8009e7e:	4619      	mov	r1, r3
 8009e80:	f241 0078 	movw	r0, #4216	@ 0x1078
 8009e84:	f001 fe06 	bl	800ba94 <nm_read_reg_with_ret>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	77fb      	strb	r3, [r7, #31]
			if(ret != M2M_SUCCESS) break;
 8009e8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d134      	bne.n	8009efe <hif_send+0x162>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
 8009e94:	89fb      	ldrh	r3, [r7, #14]
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009e9c:	d310      	bcc.n	8009ec0 <hif_send+0x124>
				if(cnt < 501) {
 8009e9e:	89fb      	ldrh	r3, [r7, #14]
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009ea6:	d808      	bhi.n	8009eba <hif_send+0x11e>
					M2M_INFO("Slowing down...\n");
 8009ea8:	486a      	ldr	r0, [pc, #424]	@ (800a054 <hif_send+0x2b8>)
 8009eaa:	f004 f8e7 	bl	800e07c <iprintf>
 8009eae:	486a      	ldr	r0, [pc, #424]	@ (800a058 <hif_send+0x2bc>)
 8009eb0:	f004 f954 	bl	800e15c <puts>
 8009eb4:	200d      	movs	r0, #13
 8009eb6:	f004 f8f3 	bl	800e0a0 <putchar>
				}
				nm_bsp_sleep(1);
 8009eba:	2001      	movs	r0, #1
 8009ebc:	f7ff fcb0 	bl	8009820 <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	f003 0302 	and.w	r3, r3, #2
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10e      	bne.n	8009ee8 <hif_send+0x14c>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
 8009eca:	f107 0310 	add.w	r3, r7, #16
 8009ece:	4619      	mov	r1, r3
 8009ed0:	4862      	ldr	r0, [pc, #392]	@ (800a05c <hif_send+0x2c0>)
 8009ed2:	f001 fddf 	bl	800ba94 <nm_read_reg_with_ret>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	77fb      	strb	r3, [r7, #31]
				if(ret != M2M_SUCCESS) {
 8009eda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00f      	beq.n	8009f02 <hif_send+0x166>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	613b      	str	r3, [r7, #16]
					goto ERR1;
 8009ee6:	e0ac      	b.n	800a042 <hif_send+0x2a6>
		for(cnt = 0; cnt < 1000; cnt ++)
 8009ee8:	89fb      	ldrh	r3, [r7, #14]
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	3301      	adds	r3, #1
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	81fb      	strh	r3, [r7, #14]
 8009ef2:	89fb      	ldrh	r3, [r7, #14]
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009efa:	d3be      	bcc.n	8009e7a <hif_send+0xde>
 8009efc:	e002      	b.n	8009f04 <hif_send+0x168>
			if(ret != M2M_SUCCESS) break;
 8009efe:	bf00      	nop
 8009f00:	e000      	b.n	8009f04 <hif_send+0x168>
				}
				/*in case of success break */
				break;
 8009f02:	bf00      	nop
			}
		}

		if (dma_addr != 0)
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d055      	beq.n	8009fb6 <hif_send+0x21a>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 8009f0e:	8b7b      	ldrh	r3, [r7, #26]
 8009f10:	837b      	strh	r3, [r7, #26]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	f107 0118 	add.w	r1, r7, #24
 8009f18:	2208      	movs	r2, #8
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f001 fe44 	bl	800bba8 <nm_write_block>
 8009f20:	4603      	mov	r3, r0
 8009f22:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 8009f24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f040 8085 	bne.w	800a038 <hif_send+0x29c>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	3308      	adds	r3, #8
 8009f32:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00f      	beq.n	8009f5a <hif_send+0x1be>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	88ba      	ldrh	r2, [r7, #4]
 8009f3e:	6839      	ldr	r1, [r7, #0]
 8009f40:	4618      	mov	r0, r3
 8009f42:	f001 fe31 	bl	800bba8 <nm_write_block>
 8009f46:	4603      	mov	r3, r0
 8009f48:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 8009f4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d174      	bne.n	800a03c <hif_send+0x2a0>
				u32CurrAddr += u16CtrlBufSize;
 8009f52:	88ba      	ldrh	r2, [r7, #4]
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	4413      	add	r3, r2
 8009f58:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
 8009f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d016      	beq.n	8009f8e <hif_send+0x1f2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
 8009f60:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009f62:	88bb      	ldrh	r3, [r7, #4]
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	461a      	mov	r2, r3
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009f72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f74:	4618      	mov	r0, r3
 8009f76:	f001 fe17 	bl	800bba8 <nm_write_block>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 8009f7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d15c      	bne.n	800a040 <hif_send+0x2a4>
				u32CurrAddr += u16DataSize;
 8009f86:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	f043 0302 	orr.w	r3, r3, #2
 8009f9a:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	f241 006c 	movw	r0, #4204	@ 0x106c
 8009fa4:	f001 fd84 	bl	800bab0 <nm_write_reg>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 8009fac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d036      	beq.n	800a022 <hif_send+0x286>
 8009fb4:	e045      	b.n	800a042 <hif_send+0x2a6>
		}
		else
		{
			ret = hif_chip_sleep();
 8009fb6:	f7ff fea9 	bl	8009d0c <hif_chip_sleep>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	77fb      	strb	r3, [r7, #31]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
 8009fbe:	f240 128f 	movw	r2, #399	@ 0x18f
 8009fc2:	4927      	ldr	r1, [pc, #156]	@ (800a060 <hif_send+0x2c4>)
 8009fc4:	4827      	ldr	r0, [pc, #156]	@ (800a064 <hif_send+0x2c8>)
 8009fc6:	f004 f859 	bl	800e07c <iprintf>
 8009fca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	4825      	ldr	r0, [pc, #148]	@ (800a068 <hif_send+0x2cc>)
 8009fd2:	f004 f853 	bl	800e07c <iprintf>
 8009fd6:	200d      	movs	r0, #13
 8009fd8:	f004 f862 	bl	800e0a0 <putchar>
			ret = M2M_ERR_MEM_ALLOC;
 8009fdc:	23fd      	movs	r3, #253	@ 0xfd
 8009fde:	77fb      	strb	r3, [r7, #31]
			goto ERR2;
 8009fe0:	e031      	b.n	800a046 <hif_send+0x2aa>
		}
	}
	else
	{
            M2M_ERR("(HIF)Failed to wakeup the chip\n");
 8009fe2:	f44f 72cb 	mov.w	r2, #406	@ 0x196
 8009fe6:	491e      	ldr	r1, [pc, #120]	@ (800a060 <hif_send+0x2c4>)
 8009fe8:	4820      	ldr	r0, [pc, #128]	@ (800a06c <hif_send+0x2d0>)
 8009fea:	f004 f847 	bl	800e07c <iprintf>
 8009fee:	4820      	ldr	r0, [pc, #128]	@ (800a070 <hif_send+0x2d4>)
 8009ff0:	f004 f8b4 	bl	800e15c <puts>
 8009ff4:	200d      	movs	r0, #13
 8009ff6:	f004 f853 	bl	800e0a0 <putchar>
            goto ERR2;
 8009ffa:	e024      	b.n	800a046 <hif_send+0x2aa>
        }
	}
	else
	{
        M2M_ERR("HIF message length (%d) exceeds max length (%d)\n",strHif.u16Length, M2M_HIF_MAX_PACKET_SIZE);
 8009ffc:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800a000:	4917      	ldr	r1, [pc, #92]	@ (800a060 <hif_send+0x2c4>)
 800a002:	481a      	ldr	r0, [pc, #104]	@ (800a06c <hif_send+0x2d0>)
 800a004:	f004 f83a 	bl	800e07c <iprintf>
 800a008:	8b7b      	ldrh	r3, [r7, #26]
 800a00a:	f240 623c 	movw	r2, #1596	@ 0x63c
 800a00e:	4619      	mov	r1, r3
 800a010:	4818      	ldr	r0, [pc, #96]	@ (800a074 <hif_send+0x2d8>)
 800a012:	f004 f833 	bl	800e07c <iprintf>
 800a016:	200d      	movs	r0, #13
 800a018:	f004 f842 	bl	800e0a0 <putchar>
        ret = M2M_ERR_SEND;
 800a01c:	23ff      	movs	r3, #255	@ 0xff
 800a01e:	77fb      	strb	r3, [r7, #31]
		goto ERR2;
 800a020:	e011      	b.n	800a046 <hif_send+0x2aa>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
 800a022:	f7ff fe73 	bl	8009d0c <hif_chip_sleep>
 800a026:	4603      	mov	r3, r0
 800a028:	77fb      	strb	r3, [r7, #31]
	return ret;
 800a02a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a02e:	e00c      	b.n	800a04a <hif_send+0x2ae>
		if(M2M_SUCCESS != ret) goto ERR1;
 800a030:	bf00      	nop
 800a032:	e006      	b.n	800a042 <hif_send+0x2a6>
		if(M2M_SUCCESS != ret) goto ERR1;
 800a034:	bf00      	nop
 800a036:	e004      	b.n	800a042 <hif_send+0x2a6>
			if(M2M_SUCCESS != ret) goto ERR1;
 800a038:	bf00      	nop
 800a03a:	e002      	b.n	800a042 <hif_send+0x2a6>
				if(M2M_SUCCESS != ret) goto ERR1;
 800a03c:	bf00      	nop
 800a03e:	e000      	b.n	800a042 <hif_send+0x2a6>
				if(M2M_SUCCESS != ret) goto ERR1;
 800a040:	bf00      	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
 800a042:	f7ff fe4d 	bl	8009ce0 <hif_chip_sleep_sc>
ERR2:
	/*logical error*/
	return ret;
 800a046:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3720      	adds	r7, #32
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	0800f01c 	.word	0x0800f01c
 800a058:	0800f028 	.word	0x0800f028
 800a05c:	00150400 	.word	0x00150400
 800a060:	080100f0 	.word	0x080100f0
 800a064:	0800f038 	.word	0x0800f038
 800a068:	0800f04c 	.word	0x0800f04c
 800a06c:	0800f068 	.word	0x0800f068
 800a070:	0800f07c 	.word	0x0800f07c
 800a074:	0800f09c 	.word	0x0800f09c

0800a078 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
 800a07e:	2300      	movs	r3, #0
 800a080:	73fb      	strb	r3, [r7, #15]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 800a082:	f107 0308 	add.w	r3, r7, #8
 800a086:	4619      	mov	r1, r3
 800a088:	f241 0070 	movw	r0, #4208	@ 0x1070
 800a08c:	f001 fd02 	bl	800ba94 <nm_read_reg_with_ret>
 800a090:	4603      	mov	r3, r0
 800a092:	73fb      	strb	r3, [r7, #15]
	if(M2M_SUCCESS == ret)
 800a094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f040 81b2 	bne.w	800a402 <hif_isr+0x38a>
	{
		if(reg & 0x1)	/* New interrupt has been received */
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	f003 0301 	and.w	r3, r3, #1
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f000 819d 	beq.w	800a3e4 <hif_isr+0x36c>
		{
			uint16 size;

			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	f023 0301 	bic.w	r3, r3, #1
 800a0b0:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	f241 0070 	movw	r0, #4208	@ 0x1070
 800a0ba:	f001 fcf9 	bl	800bab0 <nm_write_reg>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	73fb      	strb	r3, [r7, #15]
			if(ret != M2M_SUCCESS)goto ERR1;
 800a0c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f040 81a8 	bne.w	800a41c <hif_isr+0x3a4>
			gstrHifCxt.u8HifRXDone = 1;
 800a0cc:	4ba1      	ldr	r3, [pc, #644]	@ (800a354 <hif_isr+0x2dc>)
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	089b      	lsrs	r3, r3, #2
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0dc:	81bb      	strh	r3, [r7, #12]
			if (size > 0) {
 800a0de:	89bb      	ldrh	r3, [r7, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f000 8170 	beq.w	800a3c6 <hif_isr+0x34e>
				uint32 address = 0;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
 800a0ea:	463b      	mov	r3, r7
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	f241 0084 	movw	r0, #4228	@ 0x1084
 800a0f2:	f001 fccf 	bl	800ba94 <nm_read_reg_with_ret>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	73fb      	strb	r3, [r7, #15]
				if(M2M_SUCCESS != ret)
 800a0fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00c      	beq.n	800a11c <hif_isr+0xa4>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
 800a102:	f240 12cd 	movw	r2, #461	@ 0x1cd
 800a106:	4994      	ldr	r1, [pc, #592]	@ (800a358 <hif_isr+0x2e0>)
 800a108:	4894      	ldr	r0, [pc, #592]	@ (800a35c <hif_isr+0x2e4>)
 800a10a:	f003 ffb7 	bl	800e07c <iprintf>
 800a10e:	4894      	ldr	r0, [pc, #592]	@ (800a360 <hif_isr+0x2e8>)
 800a110:	f004 f824 	bl	800e15c <puts>
 800a114:	200d      	movs	r0, #13
 800a116:	f003 ffc3 	bl	800e0a0 <putchar>
					goto ERR1;
 800a11a:	e180      	b.n	800a41e <hif_isr+0x3a6>
				}
				gstrHifCxt.u32RxAddr = address;
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	4a8d      	ldr	r2, [pc, #564]	@ (800a354 <hif_isr+0x2dc>)
 800a120:	6093      	str	r3, [r2, #8]
				gstrHifCxt.u32RxSize = size;
 800a122:	89bb      	ldrh	r3, [r7, #12]
 800a124:	4a8b      	ldr	r2, [pc, #556]	@ (800a354 <hif_isr+0x2dc>)
 800a126:	60d3      	str	r3, [r2, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	1d39      	adds	r1, r7, #4
 800a12c:	2204      	movs	r2, #4
 800a12e:	4618      	mov	r0, r3
 800a130:	f001 fcde 	bl	800baf0 <nm_read_block>
 800a134:	4603      	mov	r3, r0
 800a136:	73fb      	strb	r3, [r7, #15]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
 800a138:	88fb      	ldrh	r3, [r7, #6]
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	80fb      	strh	r3, [r7, #6]
				if(M2M_SUCCESS != ret)
 800a13e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00c      	beq.n	800a160 <hif_isr+0xe8>
				{
					M2M_ERR("(hif) address bus fail\n");
 800a146:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 800a14a:	4983      	ldr	r1, [pc, #524]	@ (800a358 <hif_isr+0x2e0>)
 800a14c:	4883      	ldr	r0, [pc, #524]	@ (800a35c <hif_isr+0x2e4>)
 800a14e:	f003 ff95 	bl	800e07c <iprintf>
 800a152:	4884      	ldr	r0, [pc, #528]	@ (800a364 <hif_isr+0x2ec>)
 800a154:	f004 f802 	bl	800e15c <puts>
 800a158:	200d      	movs	r0, #13
 800a15a:	f003 ffa1 	bl	800e0a0 <putchar>
					goto ERR1;
 800a15e:	e15e      	b.n	800a41e <hif_isr+0x3a6>
				}
				if(strHif.u16Length != size)
 800a160:	88fb      	ldrh	r3, [r7, #6]
 800a162:	b29b      	uxth	r3, r3
 800a164:	89ba      	ldrh	r2, [r7, #12]
 800a166:	429a      	cmp	r2, r3
 800a168:	d01f      	beq.n	800a1aa <hif_isr+0x132>
				{
					if((size - strHif.u16Length) > 4)
 800a16a:	89bb      	ldrh	r3, [r7, #12]
 800a16c:	88fa      	ldrh	r2, [r7, #6]
 800a16e:	b292      	uxth	r2, r2
 800a170:	1a9b      	subs	r3, r3, r2
 800a172:	2b04      	cmp	r3, #4
 800a174:	dd19      	ble.n	800a1aa <hif_isr+0x132>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
 800a176:	f240 12dd 	movw	r2, #477	@ 0x1dd
 800a17a:	4977      	ldr	r1, [pc, #476]	@ (800a358 <hif_isr+0x2e0>)
 800a17c:	4877      	ldr	r0, [pc, #476]	@ (800a35c <hif_isr+0x2e4>)
 800a17e:	f003 ff7d 	bl	800e07c <iprintf>
 800a182:	89b9      	ldrh	r1, [r7, #12]
 800a184:	88fb      	ldrh	r3, [r7, #6]
 800a186:	b29b      	uxth	r3, r3
 800a188:	461a      	mov	r2, r3
 800a18a:	793b      	ldrb	r3, [r7, #4]
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	4618      	mov	r0, r3
 800a190:	797b      	ldrb	r3, [r7, #5]
 800a192:	b2db      	uxtb	r3, r3
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	4603      	mov	r3, r0
 800a198:	4873      	ldr	r0, [pc, #460]	@ (800a368 <hif_isr+0x2f0>)
 800a19a:	f003 ff6f 	bl	800e07c <iprintf>
 800a19e:	200d      	movs	r0, #13
 800a1a0:	f003 ff7e 	bl	800e0a0 <putchar>
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						ret = M2M_ERR_BUS_FAIL;
 800a1a4:	23fa      	movs	r3, #250	@ 0xfa
 800a1a6:	73fb      	strb	r3, [r7, #15]
						goto ERR1;
 800a1a8:	e139      	b.n	800a41e <hif_isr+0x3a6>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
 800a1aa:	793b      	ldrb	r3, [r7, #4]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d11c      	bne.n	800a1ec <hif_isr+0x174>
				{
					if(gstrHifCxt.pfWifiCb)
 800a1b2:	4b68      	ldr	r3, [pc, #416]	@ (800a354 <hif_isr+0x2dc>)
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00b      	beq.n	800a1d2 <hif_isr+0x15a>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800a1ba:	4b66      	ldr	r3, [pc, #408]	@ (800a354 <hif_isr+0x2dc>)
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	797a      	ldrb	r2, [r7, #5]
 800a1c0:	b2d0      	uxtb	r0, r2
 800a1c2:	88fa      	ldrh	r2, [r7, #6]
 800a1c4:	b292      	uxth	r2, r2
 800a1c6:	3a08      	subs	r2, #8
 800a1c8:	b291      	uxth	r1, r2
 800a1ca:	683a      	ldr	r2, [r7, #0]
 800a1cc:	3208      	adds	r2, #8
 800a1ce:	4798      	blx	r3
 800a1d0:	e0da      	b.n	800a388 <hif_isr+0x310>
					else
						M2M_ERR("WIFI callback is not registered\n");
 800a1d2:	f240 12e9 	movw	r2, #489	@ 0x1e9
 800a1d6:	4960      	ldr	r1, [pc, #384]	@ (800a358 <hif_isr+0x2e0>)
 800a1d8:	4860      	ldr	r0, [pc, #384]	@ (800a35c <hif_isr+0x2e4>)
 800a1da:	f003 ff4f 	bl	800e07c <iprintf>
 800a1de:	4863      	ldr	r0, [pc, #396]	@ (800a36c <hif_isr+0x2f4>)
 800a1e0:	f003 ffbc 	bl	800e15c <puts>
 800a1e4:	200d      	movs	r0, #13
 800a1e6:	f003 ff5b 	bl	800e0a0 <putchar>
 800a1ea:	e0cd      	b.n	800a388 <hif_isr+0x310>
				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
 800a1ec:	793b      	ldrb	r3, [r7, #4]
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d11c      	bne.n	800a22e <hif_isr+0x1b6>
				{
					if(gstrHifCxt.pfIpCb)
 800a1f4:	4b57      	ldr	r3, [pc, #348]	@ (800a354 <hif_isr+0x2dc>)
 800a1f6:	695b      	ldr	r3, [r3, #20]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00b      	beq.n	800a214 <hif_isr+0x19c>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800a1fc:	4b55      	ldr	r3, [pc, #340]	@ (800a354 <hif_isr+0x2dc>)
 800a1fe:	695b      	ldr	r3, [r3, #20]
 800a200:	797a      	ldrb	r2, [r7, #5]
 800a202:	b2d0      	uxtb	r0, r2
 800a204:	88fa      	ldrh	r2, [r7, #6]
 800a206:	b292      	uxth	r2, r2
 800a208:	3a08      	subs	r2, #8
 800a20a:	b291      	uxth	r1, r2
 800a20c:	683a      	ldr	r2, [r7, #0]
 800a20e:	3208      	adds	r2, #8
 800a210:	4798      	blx	r3
 800a212:	e0b9      	b.n	800a388 <hif_isr+0x310>
					else
						M2M_ERR("Socket callback is not registered\n");
 800a214:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 800a218:	494f      	ldr	r1, [pc, #316]	@ (800a358 <hif_isr+0x2e0>)
 800a21a:	4850      	ldr	r0, [pc, #320]	@ (800a35c <hif_isr+0x2e4>)
 800a21c:	f003 ff2e 	bl	800e07c <iprintf>
 800a220:	4853      	ldr	r0, [pc, #332]	@ (800a370 <hif_isr+0x2f8>)
 800a222:	f003 ff9b 	bl	800e15c <puts>
 800a226:	200d      	movs	r0, #13
 800a228:	f003 ff3a 	bl	800e0a0 <putchar>
 800a22c:	e0ac      	b.n	800a388 <hif_isr+0x310>
				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
 800a22e:	793b      	ldrb	r3, [r7, #4]
 800a230:	b2db      	uxtb	r3, r3
 800a232:	2b04      	cmp	r3, #4
 800a234:	d11c      	bne.n	800a270 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfOtaCb)
 800a236:	4b47      	ldr	r3, [pc, #284]	@ (800a354 <hif_isr+0x2dc>)
 800a238:	699b      	ldr	r3, [r3, #24]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00b      	beq.n	800a256 <hif_isr+0x1de>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800a23e:	4b45      	ldr	r3, [pc, #276]	@ (800a354 <hif_isr+0x2dc>)
 800a240:	699b      	ldr	r3, [r3, #24]
 800a242:	797a      	ldrb	r2, [r7, #5]
 800a244:	b2d0      	uxtb	r0, r2
 800a246:	88fa      	ldrh	r2, [r7, #6]
 800a248:	b292      	uxth	r2, r2
 800a24a:	3a08      	subs	r2, #8
 800a24c:	b291      	uxth	r1, r2
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	3208      	adds	r2, #8
 800a252:	4798      	blx	r3
 800a254:	e098      	b.n	800a388 <hif_isr+0x310>
					else
						M2M_ERR("Ota callback is not registered\n");
 800a256:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800a25a:	493f      	ldr	r1, [pc, #252]	@ (800a358 <hif_isr+0x2e0>)
 800a25c:	483f      	ldr	r0, [pc, #252]	@ (800a35c <hif_isr+0x2e4>)
 800a25e:	f003 ff0d 	bl	800e07c <iprintf>
 800a262:	4844      	ldr	r0, [pc, #272]	@ (800a374 <hif_isr+0x2fc>)
 800a264:	f003 ff7a 	bl	800e15c <puts>
 800a268:	200d      	movs	r0, #13
 800a26a:	f003 ff19 	bl	800e0a0 <putchar>
 800a26e:	e08b      	b.n	800a388 <hif_isr+0x310>
				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
 800a270:	793b      	ldrb	r3, [r7, #4]
 800a272:	b2db      	uxtb	r3, r3
 800a274:	2b06      	cmp	r3, #6
 800a276:	d11c      	bne.n	800a2b2 <hif_isr+0x23a>
				{
					if(gstrHifCxt.pfCryptoCb)
 800a278:	4b36      	ldr	r3, [pc, #216]	@ (800a354 <hif_isr+0x2dc>)
 800a27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00b      	beq.n	800a298 <hif_isr+0x220>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800a280:	4b34      	ldr	r3, [pc, #208]	@ (800a354 <hif_isr+0x2dc>)
 800a282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a284:	797a      	ldrb	r2, [r7, #5]
 800a286:	b2d0      	uxtb	r0, r2
 800a288:	88fa      	ldrh	r2, [r7, #6]
 800a28a:	b292      	uxth	r2, r2
 800a28c:	3a08      	subs	r2, #8
 800a28e:	b291      	uxth	r1, r2
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	3208      	adds	r2, #8
 800a294:	4798      	blx	r3
 800a296:	e077      	b.n	800a388 <hif_isr+0x310>
					else
						M2M_ERR("Crypto callback is not registered\n");
 800a298:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 800a29c:	492e      	ldr	r1, [pc, #184]	@ (800a358 <hif_isr+0x2e0>)
 800a29e:	482f      	ldr	r0, [pc, #188]	@ (800a35c <hif_isr+0x2e4>)
 800a2a0:	f003 feec 	bl	800e07c <iprintf>
 800a2a4:	4834      	ldr	r0, [pc, #208]	@ (800a378 <hif_isr+0x300>)
 800a2a6:	f003 ff59 	bl	800e15c <puts>
 800a2aa:	200d      	movs	r0, #13
 800a2ac:	f003 fef8 	bl	800e0a0 <putchar>
 800a2b0:	e06a      	b.n	800a388 <hif_isr+0x310>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
 800a2b2:	793b      	ldrb	r3, [r7, #4]
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b07      	cmp	r3, #7
 800a2b8:	d11c      	bne.n	800a2f4 <hif_isr+0x27c>
				{
					if(gstrHifCxt.pfSigmaCb)
 800a2ba:	4b26      	ldr	r3, [pc, #152]	@ (800a354 <hif_isr+0x2dc>)
 800a2bc:	69db      	ldr	r3, [r3, #28]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00b      	beq.n	800a2da <hif_isr+0x262>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800a2c2:	4b24      	ldr	r3, [pc, #144]	@ (800a354 <hif_isr+0x2dc>)
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	797a      	ldrb	r2, [r7, #5]
 800a2c8:	b2d0      	uxtb	r0, r2
 800a2ca:	88fa      	ldrh	r2, [r7, #6]
 800a2cc:	b292      	uxth	r2, r2
 800a2ce:	3a08      	subs	r2, #8
 800a2d0:	b291      	uxth	r1, r2
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	3208      	adds	r2, #8
 800a2d6:	4798      	blx	r3
 800a2d8:	e056      	b.n	800a388 <hif_isr+0x310>
					else
						M2M_ERR("Sigma callback is not registered\n");
 800a2da:	f240 2205 	movw	r2, #517	@ 0x205
 800a2de:	491e      	ldr	r1, [pc, #120]	@ (800a358 <hif_isr+0x2e0>)
 800a2e0:	481e      	ldr	r0, [pc, #120]	@ (800a35c <hif_isr+0x2e4>)
 800a2e2:	f003 fecb 	bl	800e07c <iprintf>
 800a2e6:	4825      	ldr	r0, [pc, #148]	@ (800a37c <hif_isr+0x304>)
 800a2e8:	f003 ff38 	bl	800e15c <puts>
 800a2ec:	200d      	movs	r0, #13
 800a2ee:	f003 fed7 	bl	800e0a0 <putchar>
 800a2f2:	e049      	b.n	800a388 <hif_isr+0x310>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
 800a2f4:	793b      	ldrb	r3, [r7, #4]
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	2b05      	cmp	r3, #5
 800a2fa:	d11c      	bne.n	800a336 <hif_isr+0x2be>
				{
				    if(gstrHifCxt.pfSslCb)
 800a2fc:	4b15      	ldr	r3, [pc, #84]	@ (800a354 <hif_isr+0x2dc>)
 800a2fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00b      	beq.n	800a31c <hif_isr+0x2a4>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800a304:	4b13      	ldr	r3, [pc, #76]	@ (800a354 <hif_isr+0x2dc>)
 800a306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a308:	797a      	ldrb	r2, [r7, #5]
 800a30a:	b2d0      	uxtb	r0, r2
 800a30c:	88fa      	ldrh	r2, [r7, #6]
 800a30e:	b292      	uxth	r2, r2
 800a310:	3a08      	subs	r2, #8
 800a312:	b291      	uxth	r1, r2
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	3208      	adds	r2, #8
 800a318:	4798      	blx	r3
 800a31a:	e035      	b.n	800a388 <hif_isr+0x310>
                    else
                        M2M_ERR("SSL callback is not registered\n");
 800a31c:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 800a320:	490d      	ldr	r1, [pc, #52]	@ (800a358 <hif_isr+0x2e0>)
 800a322:	480e      	ldr	r0, [pc, #56]	@ (800a35c <hif_isr+0x2e4>)
 800a324:	f003 feaa 	bl	800e07c <iprintf>
 800a328:	4815      	ldr	r0, [pc, #84]	@ (800a380 <hif_isr+0x308>)
 800a32a:	f003 ff17 	bl	800e15c <puts>
 800a32e:	200d      	movs	r0, #13
 800a330:	f003 feb6 	bl	800e0a0 <putchar>
 800a334:	e028      	b.n	800a388 <hif_isr+0x310>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
 800a336:	f44f 7204 	mov.w	r2, #528	@ 0x210
 800a33a:	4907      	ldr	r1, [pc, #28]	@ (800a358 <hif_isr+0x2e0>)
 800a33c:	4807      	ldr	r0, [pc, #28]	@ (800a35c <hif_isr+0x2e4>)
 800a33e:	f003 fe9d 	bl	800e07c <iprintf>
 800a342:	4810      	ldr	r0, [pc, #64]	@ (800a384 <hif_isr+0x30c>)
 800a344:	f003 ff0a 	bl	800e15c <puts>
 800a348:	200d      	movs	r0, #13
 800a34a:	f003 fea9 	bl	800e0a0 <putchar>
					ret = M2M_ERR_BUS_FAIL;
 800a34e:	23fa      	movs	r3, #250	@ 0xfa
 800a350:	73fb      	strb	r3, [r7, #15]
					goto ERR1;
 800a352:	e064      	b.n	800a41e <hif_isr+0x3a6>
 800a354:	20000bc4 	.word	0x20000bc4
 800a358:	080100fc 	.word	0x080100fc
 800a35c:	0800f068 	.word	0x0800f068
 800a360:	0800f0d0 	.word	0x0800f0d0
 800a364:	0800f0f4 	.word	0x0800f0f4
 800a368:	0800f10c 	.word	0x0800f10c
 800a36c:	0800f14c 	.word	0x0800f14c
 800a370:	0800f16c 	.word	0x0800f16c
 800a374:	0800f190 	.word	0x0800f190
 800a378:	0800f1b0 	.word	0x0800f1b0
 800a37c:	0800f1d4 	.word	0x0800f1d4
 800a380:	0800f1f8 	.word	0x0800f1f8
 800a384:	0800f218 	.word	0x0800f218
				}
				if(gstrHifCxt.u8HifRXDone)
 800a388:	4b28      	ldr	r3, [pc, #160]	@ (800a42c <hif_isr+0x3b4>)
 800a38a:	789b      	ldrb	r3, [r3, #2]
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d045      	beq.n	800a41e <hif_isr+0x3a6>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
 800a392:	f240 2216 	movw	r2, #534	@ 0x216
 800a396:	4926      	ldr	r1, [pc, #152]	@ (800a430 <hif_isr+0x3b8>)
 800a398:	4826      	ldr	r0, [pc, #152]	@ (800a434 <hif_isr+0x3bc>)
 800a39a:	f003 fe6f 	bl	800e07c <iprintf>
 800a39e:	793b      	ldrb	r3, [r7, #4]
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	797b      	ldrb	r3, [r7, #5]
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	4823      	ldr	r0, [pc, #140]	@ (800a438 <hif_isr+0x3c0>)
 800a3ac:	f003 fe66 	bl	800e07c <iprintf>
 800a3b0:	200d      	movs	r0, #13
 800a3b2:	f003 fe75 	bl	800e0a0 <putchar>
					ret = hif_set_rx_done();
 800a3b6:	f7ff fc25 	bl	8009c04 <hif_set_rx_done>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	73fb      	strb	r3, [r7, #15]
					if(ret != M2M_SUCCESS) goto ERR1;
 800a3be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	e02b      	b.n	800a41e <hif_isr+0x3a6>
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
 800a3c6:	f240 221d 	movw	r2, #541	@ 0x21d
 800a3ca:	4919      	ldr	r1, [pc, #100]	@ (800a430 <hif_isr+0x3b8>)
 800a3cc:	4819      	ldr	r0, [pc, #100]	@ (800a434 <hif_isr+0x3bc>)
 800a3ce:	f003 fe55 	bl	800e07c <iprintf>
 800a3d2:	481a      	ldr	r0, [pc, #104]	@ (800a43c <hif_isr+0x3c4>)
 800a3d4:	f003 fec2 	bl	800e15c <puts>
 800a3d8:	200d      	movs	r0, #13
 800a3da:	f003 fe61 	bl	800e0a0 <putchar>
				ret = M2M_ERR_RCV;
 800a3de:	23fe      	movs	r3, #254	@ 0xfe
 800a3e0:	73fb      	strb	r3, [r7, #15]
				goto ERR1;
 800a3e2:	e01c      	b.n	800a41e <hif_isr+0x3a6>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
 800a3e4:	f240 2225 	movw	r2, #549	@ 0x225
 800a3e8:	4911      	ldr	r1, [pc, #68]	@ (800a430 <hif_isr+0x3b8>)
 800a3ea:	4812      	ldr	r0, [pc, #72]	@ (800a434 <hif_isr+0x3bc>)
 800a3ec:	f003 fe46 	bl	800e07c <iprintf>
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	4812      	ldr	r0, [pc, #72]	@ (800a440 <hif_isr+0x3c8>)
 800a3f6:	f003 fe41 	bl	800e07c <iprintf>
 800a3fa:	200d      	movs	r0, #13
 800a3fc:	f003 fe50 	bl	800e0a0 <putchar>
			goto ERR1;
 800a400:	e00d      	b.n	800a41e <hif_isr+0x3a6>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Failed to Read interrupt reg\n");
 800a402:	f240 222d 	movw	r2, #557	@ 0x22d
 800a406:	490a      	ldr	r1, [pc, #40]	@ (800a430 <hif_isr+0x3b8>)
 800a408:	480a      	ldr	r0, [pc, #40]	@ (800a434 <hif_isr+0x3bc>)
 800a40a:	f003 fe37 	bl	800e07c <iprintf>
 800a40e:	480d      	ldr	r0, [pc, #52]	@ (800a444 <hif_isr+0x3cc>)
 800a410:	f003 fea4 	bl	800e15c <puts>
 800a414:	200d      	movs	r0, #13
 800a416:	f003 fe43 	bl	800e0a0 <putchar>
		goto ERR1;
 800a41a:	e000      	b.n	800a41e <hif_isr+0x3a6>
			if(ret != M2M_SUCCESS)goto ERR1;
 800a41c:	bf00      	nop
	}

ERR1:
	return ret;
 800a41e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a422:	4618      	mov	r0, r3
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	20000bc4 	.word	0x20000bc4
 800a430:	080100fc 	.word	0x080100fc
 800a434:	0800f068 	.word	0x0800f068
 800a438:	0800f230 	.word	0x0800f230
 800a43c:	0800f25c 	.word	0x0800f25c
 800a440:	0800f270 	.word	0x0800f270
 800a444:	0800f28c 	.word	0x0800f28c

0800a448 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
 800a44e:	2300      	movs	r3, #0
 800a450:	71fb      	strb	r3, [r7, #7]
	
	gstrHifCxt.u8Yield = 0;
 800a452:	4b29      	ldr	r3, [pc, #164]	@ (800a4f8 <hif_handle_isr+0xb0>)
 800a454:	2200      	movs	r2, #0
 800a456:	711a      	strb	r2, [r3, #4]
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
 800a458:	e03e      	b.n	800a4d8 <hif_handle_isr+0x90>
         * during which the ISR could fire again.
         * If LEVEL interrupt is used instead of EDGE then the atomicity isn't needed since the interrupt
         * is turned off in the ISR and back on again only after the interrupt has been serviced in hif_isr(). */

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(0);
 800a45a:	2000      	movs	r0, #0
 800a45c:	f7ff fa1e 	bl	800989c <nm_bsp_interrupt_ctrl>
#endif

		gstrHifCxt.u8Interrupt--;
 800a460:	4b25      	ldr	r3, [pc, #148]	@ (800a4f8 <hif_handle_isr+0xb0>)
 800a462:	78db      	ldrb	r3, [r3, #3]
 800a464:	b2db      	uxtb	r3, r3
 800a466:	3b01      	subs	r3, #1
 800a468:	b2da      	uxtb	r2, r3
 800a46a:	4b23      	ldr	r3, [pc, #140]	@ (800a4f8 <hif_handle_isr+0xb0>)
 800a46c:	70da      	strb	r2, [r3, #3]

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(1);
 800a46e:	2001      	movs	r0, #1
 800a470:	f7ff fa14 	bl	800989c <nm_bsp_interrupt_ctrl>
#endif

		uint8 retries = 5;
 800a474:	2305      	movs	r3, #5
 800a476:	71bb      	strb	r3, [r7, #6]
		while(1)
		{
			ret = hif_isr();
 800a478:	f7ff fdfe 	bl	800a078 <hif_isr>
 800a47c:	4603      	mov	r3, r0
 800a47e:	71fb      	strb	r3, [r7, #7]
			if(ret == M2M_SUCCESS) {
 800a480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d026      	beq.n	800a4d6 <hif_handle_isr+0x8e>
				/*we will try forever until we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				retries--;
 800a488:	79bb      	ldrb	r3, [r7, #6]
 800a48a:	3b01      	subs	r3, #1
 800a48c:	71bb      	strb	r3, [r7, #6]
				if(!retries)
 800a48e:	79bb      	ldrb	r3, [r7, #6]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10f      	bne.n	800a4b4 <hif_handle_isr+0x6c>
				{
					M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
 800a494:	f240 2267 	movw	r2, #615	@ 0x267
 800a498:	4918      	ldr	r1, [pc, #96]	@ (800a4fc <hif_handle_isr+0xb4>)
 800a49a:	4819      	ldr	r0, [pc, #100]	@ (800a500 <hif_handle_isr+0xb8>)
 800a49c:	f003 fdee 	bl	800e07c <iprintf>
 800a4a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4817      	ldr	r0, [pc, #92]	@ (800a504 <hif_handle_isr+0xbc>)
 800a4a8:	f003 fde8 	bl	800e07c <iprintf>
 800a4ac:	200d      	movs	r0, #13
 800a4ae:	f003 fdf7 	bl	800e0a0 <putchar>
					break;
 800a4b2:	e011      	b.n	800a4d8 <hif_handle_isr+0x90>
				}
				else
					M2M_ERR("(HIF) Failed to handle interrupt %d try again... (%u)\n", ret, retries);
 800a4b4:	f240 226b 	movw	r2, #619	@ 0x26b
 800a4b8:	4910      	ldr	r1, [pc, #64]	@ (800a4fc <hif_handle_isr+0xb4>)
 800a4ba:	4811      	ldr	r0, [pc, #68]	@ (800a500 <hif_handle_isr+0xb8>)
 800a4bc:	f003 fdde 	bl	800e07c <iprintf>
 800a4c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4c4:	79ba      	ldrb	r2, [r7, #6]
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	480f      	ldr	r0, [pc, #60]	@ (800a508 <hif_handle_isr+0xc0>)
 800a4ca:	f003 fdd7 	bl	800e07c <iprintf>
 800a4ce:	200d      	movs	r0, #13
 800a4d0:	f003 fde6 	bl	800e0a0 <putchar>
			ret = hif_isr();
 800a4d4:	e7d0      	b.n	800a478 <hif_handle_isr+0x30>
				break;
 800a4d6:	bf00      	nop
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
 800a4d8:	4b07      	ldr	r3, [pc, #28]	@ (800a4f8 <hif_handle_isr+0xb0>)
 800a4da:	78db      	ldrb	r3, [r3, #3]
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d004      	beq.n	800a4ec <hif_handle_isr+0xa4>
 800a4e2:	4b05      	ldr	r3, [pc, #20]	@ (800a4f8 <hif_handle_isr+0xb0>)
 800a4e4:	791b      	ldrb	r3, [r3, #4]
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d0b6      	beq.n	800a45a <hif_handle_isr+0x12>
			}
		}
	}

	return ret;
 800a4ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	20000bc4 	.word	0x20000bc4
 800a4fc:	08010104 	.word	0x08010104
 800a500:	0800f068 	.word	0x0800f068
 800a504:	0800f2b0 	.word	0x0800f2b0
 800a508:	0800f2f8 	.word	0x0800f2f8

0800a50c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b086      	sub	sp, #24
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	4611      	mov	r1, r2
 800a518:	461a      	mov	r2, r3
 800a51a:	460b      	mov	r3, r1
 800a51c:	80fb      	strh	r3, [r7, #6]
 800a51e:	4613      	mov	r3, r2
 800a520:	717b      	strb	r3, [r7, #5]
	sint8 ret = M2M_SUCCESS;
 800a522:	2300      	movs	r3, #0
 800a524:	75fb      	strb	r3, [r7, #23]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d005      	beq.n	800a538 <hif_receive+0x2c>
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d002      	beq.n	800a538 <hif_receive+0x2c>
 800a532:	88fb      	ldrh	r3, [r7, #6]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d116      	bne.n	800a566 <hif_receive+0x5a>
	{
		if(isDone)
 800a538:	797b      	ldrb	r3, [r7, #5]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d004      	beq.n	800a548 <hif_receive+0x3c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
 800a53e:	f7ff fb61 	bl	8009c04 <hif_set_rx_done>
 800a542:	4603      	mov	r3, r0
 800a544:	75fb      	strb	r3, [r7, #23]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
 800a546:	e065      	b.n	800a614 <hif_receive+0x108>
			ret = M2M_ERR_FAIL;
 800a548:	23f4      	movs	r3, #244	@ 0xf4
 800a54a:	75fb      	strb	r3, [r7, #23]
			M2M_ERR(" hif_receive: Invalid argument\n");
 800a54c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a550:	4933      	ldr	r1, [pc, #204]	@ (800a620 <hif_receive+0x114>)
 800a552:	4834      	ldr	r0, [pc, #208]	@ (800a624 <hif_receive+0x118>)
 800a554:	f003 fd92 	bl	800e07c <iprintf>
 800a558:	4833      	ldr	r0, [pc, #204]	@ (800a628 <hif_receive+0x11c>)
 800a55a:	f003 fdff 	bl	800e15c <puts>
 800a55e:	200d      	movs	r0, #13
 800a560:	f003 fd9e 	bl	800e0a0 <putchar>
		goto ERR1;
 800a564:	e056      	b.n	800a614 <hif_receive+0x108>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
 800a566:	88fa      	ldrh	r2, [r7, #6]
 800a568:	4b30      	ldr	r3, [pc, #192]	@ (800a62c <hif_receive+0x120>)
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d912      	bls.n	800a596 <hif_receive+0x8a>
	{
		ret = M2M_ERR_FAIL;
 800a570:	23f4      	movs	r3, #244	@ 0xf4
 800a572:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Size is larger than the received buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
 800a574:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800a578:	4929      	ldr	r1, [pc, #164]	@ (800a620 <hif_receive+0x114>)
 800a57a:	482a      	ldr	r0, [pc, #168]	@ (800a624 <hif_receive+0x118>)
 800a57c:	f003 fd7e 	bl	800e07c <iprintf>
 800a580:	88fb      	ldrh	r3, [r7, #6]
 800a582:	4a2a      	ldr	r2, [pc, #168]	@ (800a62c <hif_receive+0x120>)
 800a584:	68d2      	ldr	r2, [r2, #12]
 800a586:	4619      	mov	r1, r3
 800a588:	4829      	ldr	r0, [pc, #164]	@ (800a630 <hif_receive+0x124>)
 800a58a:	f003 fd77 	bl	800e07c <iprintf>
 800a58e:	200d      	movs	r0, #13
 800a590:	f003 fd86 	bl	800e0a0 <putchar>
		goto ERR1;
 800a594:	e03e      	b.n	800a614 <hif_receive+0x108>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
 800a596:	4b25      	ldr	r3, [pc, #148]	@ (800a62c <hif_receive+0x120>)
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d309      	bcc.n	800a5b4 <hif_receive+0xa8>
 800a5a0:	88fa      	ldrh	r2, [r7, #6]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	441a      	add	r2, r3
 800a5a6:	4b21      	ldr	r3, [pc, #132]	@ (800a62c <hif_receive+0x120>)
 800a5a8:	6899      	ldr	r1, [r3, #8]
 800a5aa:	4b20      	ldr	r3, [pc, #128]	@ (800a62c <hif_receive+0x120>)
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	440b      	add	r3, r1
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d90e      	bls.n	800a5d2 <hif_receive+0xc6>
	{
		ret = M2M_ERR_FAIL;
 800a5b4:	23f4      	movs	r3, #244	@ 0xf4
 800a5b6:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Address beyond the received buffer address and length\n");
 800a5b8:	f240 229a 	movw	r2, #666	@ 0x29a
 800a5bc:	4918      	ldr	r1, [pc, #96]	@ (800a620 <hif_receive+0x114>)
 800a5be:	4819      	ldr	r0, [pc, #100]	@ (800a624 <hif_receive+0x118>)
 800a5c0:	f003 fd5c 	bl	800e07c <iprintf>
 800a5c4:	481b      	ldr	r0, [pc, #108]	@ (800a634 <hif_receive+0x128>)
 800a5c6:	f003 fdc9 	bl	800e15c <puts>
 800a5ca:	200d      	movs	r0, #13
 800a5cc:	f003 fd68 	bl	800e0a0 <putchar>
		goto ERR1;
 800a5d0:	e020      	b.n	800a614 <hif_receive+0x108>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
 800a5d2:	88fb      	ldrh	r3, [r7, #6]
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	68b9      	ldr	r1, [r7, #8]
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f001 fa89 	bl	800baf0 <nm_read_block>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	75fb      	strb	r3, [r7, #23]
	if(ret != M2M_SUCCESS)goto ERR1;
 800a5e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d111      	bne.n	800a60e <hif_receive+0x102>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
 800a5ea:	4b10      	ldr	r3, [pc, #64]	@ (800a62c <hif_receive+0x120>)
 800a5ec:	689a      	ldr	r2, [r3, #8]
 800a5ee:	4b0f      	ldr	r3, [pc, #60]	@ (800a62c <hif_receive+0x120>)
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	441a      	add	r2, r3
 800a5f4:	88f9      	ldrh	r1, [r7, #6]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	440b      	add	r3, r1
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d002      	beq.n	800a604 <hif_receive+0xf8>
 800a5fe:	797b      	ldrb	r3, [r7, #5]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d006      	beq.n	800a612 <hif_receive+0x106>
	{
		/* set RX done */
		ret = hif_set_rx_done();
 800a604:	f7ff fafe 	bl	8009c04 <hif_set_rx_done>
 800a608:	4603      	mov	r3, r0
 800a60a:	75fb      	strb	r3, [r7, #23]
 800a60c:	e002      	b.n	800a614 <hif_receive+0x108>
	if(ret != M2M_SUCCESS)goto ERR1;
 800a60e:	bf00      	nop
 800a610:	e000      	b.n	800a614 <hif_receive+0x108>
	}

ERR1:
 800a612:	bf00      	nop
	return ret;
 800a614:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	08010114 	.word	0x08010114
 800a624:	0800f068 	.word	0x0800f068
 800a628:	0800f330 	.word	0x0800f330
 800a62c:	20000bc4 	.word	0x20000bc4
 800a630:	0800f350 	.word	0x0800f350
 800a634:	0800f398 	.word	0x0800f398

0800a638 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	4603      	mov	r3, r0
 800a640:	6039      	str	r1, [r7, #0]
 800a642:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800a644:	2300      	movs	r3, #0
 800a646:	73fb      	strb	r3, [r7, #15]
	switch(u8Grp)
 800a648:	79fb      	ldrb	r3, [r7, #7]
 800a64a:	3b01      	subs	r3, #1
 800a64c:	2b06      	cmp	r3, #6
 800a64e:	d82d      	bhi.n	800a6ac <hif_register_cb+0x74>
 800a650:	a201      	add	r2, pc, #4	@ (adr r2, 800a658 <hif_register_cb+0x20>)
 800a652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a656:	bf00      	nop
 800a658:	0800a67d 	.word	0x0800a67d
 800a65c:	0800a675 	.word	0x0800a675
 800a660:	0800a68d 	.word	0x0800a68d
 800a664:	0800a685 	.word	0x0800a685
 800a668:	0800a6a5 	.word	0x0800a6a5
 800a66c:	0800a695 	.word	0x0800a695
 800a670:	0800a69d 	.word	0x0800a69d
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
 800a674:	4a19      	ldr	r2, [pc, #100]	@ (800a6dc <hif_register_cb+0xa4>)
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	6153      	str	r3, [r2, #20]
			break;
 800a67a:	e028      	b.n	800a6ce <hif_register_cb+0x96>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
 800a67c:	4a17      	ldr	r2, [pc, #92]	@ (800a6dc <hif_register_cb+0xa4>)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	6113      	str	r3, [r2, #16]
			break;
 800a682:	e024      	b.n	800a6ce <hif_register_cb+0x96>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
 800a684:	4a15      	ldr	r2, [pc, #84]	@ (800a6dc <hif_register_cb+0xa4>)
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	6193      	str	r3, [r2, #24]
			break;
 800a68a:	e020      	b.n	800a6ce <hif_register_cb+0x96>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
 800a68c:	4a13      	ldr	r2, [pc, #76]	@ (800a6dc <hif_register_cb+0xa4>)
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	6213      	str	r3, [r2, #32]
			break;
 800a692:	e01c      	b.n	800a6ce <hif_register_cb+0x96>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
 800a694:	4a11      	ldr	r2, [pc, #68]	@ (800a6dc <hif_register_cb+0xa4>)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	6253      	str	r3, [r2, #36]	@ 0x24
			break;
 800a69a:	e018      	b.n	800a6ce <hif_register_cb+0x96>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
 800a69c:	4a0f      	ldr	r2, [pc, #60]	@ (800a6dc <hif_register_cb+0xa4>)
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	61d3      	str	r3, [r2, #28]
			break;
 800a6a2:	e014      	b.n	800a6ce <hif_register_cb+0x96>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
 800a6a4:	4a0d      	ldr	r2, [pc, #52]	@ (800a6dc <hif_register_cb+0xa4>)
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	6293      	str	r3, [r2, #40]	@ 0x28
			break;
 800a6aa:	e010      	b.n	800a6ce <hif_register_cb+0x96>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
 800a6ac:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800a6b0:	490b      	ldr	r1, [pc, #44]	@ (800a6e0 <hif_register_cb+0xa8>)
 800a6b2:	480c      	ldr	r0, [pc, #48]	@ (800a6e4 <hif_register_cb+0xac>)
 800a6b4:	f003 fce2 	bl	800e07c <iprintf>
 800a6b8:	79fb      	ldrb	r3, [r7, #7]
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	480a      	ldr	r0, [pc, #40]	@ (800a6e8 <hif_register_cb+0xb0>)
 800a6be:	f003 fcdd 	bl	800e07c <iprintf>
 800a6c2:	200d      	movs	r0, #13
 800a6c4:	f003 fcec 	bl	800e0a0 <putchar>
			ret = M2M_ERR_FAIL;
 800a6c8:	23f4      	movs	r3, #244	@ 0xf4
 800a6ca:	73fb      	strb	r3, [r7, #15]
			break;
 800a6cc:	bf00      	nop
	}
	return ret;
 800a6ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	20000bc4 	.word	0x20000bc4
 800a6e0:	08010120 	.word	0x08010120
 800a6e4:	0800f068 	.word	0x0800f068
 800a6e8:	0800f3dc 	.word	0x0800f3dc

0800a6ec <m2m_wifi_cb>:
                HIF address.
@param[in]  grp
                HIF group type.
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b0ae      	sub	sp, #184	@ 0xb8
 800a6f0:	af02      	add	r7, sp, #8
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	603a      	str	r2, [r7, #0]
 800a6f6:	71fb      	strb	r3, [r7, #7]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	80bb      	strh	r3, [r7, #4]
    uint8 rx_buf[8];
    if(u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 800a6fc:	79fb      	ldrb	r3, [r7, #7]
 800a6fe:	2b2c      	cmp	r3, #44	@ 0x2c
 800a700:	d117      	bne.n	800a732 <m2m_wifi_cb+0x46>
    {
        tstrM2mWifiStateChanged strState;
        if(hif_receive(u32Addr, (uint8 *) &strState, sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
 800a702:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800a706:	2300      	movs	r3, #0
 800a708:	2204      	movs	r2, #4
 800a70a:	6838      	ldr	r0, [r7, #0]
 800a70c:	f7ff fefe 	bl	800a50c <hif_receive>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	f040 81cd 	bne.w	800aab2 <m2m_wifi_cb+0x3c6>
        {
            if(gpfAppWifiCb)
 800a718:	4bae      	ldr	r3, [pc, #696]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 81c8 	beq.w	800aab2 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
 800a722:	4bac      	ldr	r3, [pc, #688]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800a72a:	4611      	mov	r1, r2
 800a72c:	202c      	movs	r0, #44	@ 0x2c
 800a72e:	4798      	blx	r3
#endif  /* ETH_MODE */
    else
    {
        M2M_ERR("REQ Not defined %d\n", u8OpCode);
    }
}
 800a730:	e1bf      	b.n	800aab2 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
 800a732:	79fb      	ldrb	r3, [r7, #7]
 800a734:	2b1b      	cmp	r3, #27
 800a736:	d117      	bne.n	800a768 <m2m_wifi_cb+0x7c>
        if(hif_receive(u32Addr, (uint8 *) &strSysTime, sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
 800a738:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 800a73c:	2300      	movs	r3, #0
 800a73e:	2208      	movs	r2, #8
 800a740:	6838      	ldr	r0, [r7, #0]
 800a742:	f7ff fee3 	bl	800a50c <hif_receive>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f040 81b2 	bne.w	800aab2 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a74e:	4ba1      	ldr	r3, [pc, #644]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	f000 81ad 	beq.w	800aab2 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
 800a758:	4b9e      	ldr	r3, [pc, #632]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800a760:	4611      	mov	r1, r2
 800a762:	201b      	movs	r0, #27
 800a764:	4798      	blx	r3
}
 800a766:	e1a4      	b.n	800aab2 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
 800a768:	79fb      	ldrb	r3, [r7, #7]
 800a76a:	2b06      	cmp	r3, #6
 800a76c:	d117      	bne.n	800a79e <m2m_wifi_cb+0xb2>
        if(hif_receive(u32Addr, (uint8 *)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
 800a76e:	f107 0108 	add.w	r1, r7, #8
 800a772:	2301      	movs	r3, #1
 800a774:	2230      	movs	r2, #48	@ 0x30
 800a776:	6838      	ldr	r0, [r7, #0]
 800a778:	f7ff fec8 	bl	800a50c <hif_receive>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f040 8197 	bne.w	800aab2 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a784:	4b93      	ldr	r3, [pc, #588]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f000 8192 	beq.w	800aab2 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
 800a78e:	4b91      	ldr	r3, [pc, #580]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f107 0208 	add.w	r2, r7, #8
 800a796:	4611      	mov	r1, r2
 800a798:	2006      	movs	r0, #6
 800a79a:	4798      	blx	r3
}
 800a79c:	e189      	b.n	800aab2 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
 800a79e:	79fb      	ldrb	r3, [r7, #7]
 800a7a0:	2b0e      	cmp	r3, #14
 800a7a2:	f000 8186 	beq.w	800aab2 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
 800a7a6:	79fb      	ldrb	r3, [r7, #7]
 800a7a8:	2b32      	cmp	r3, #50	@ 0x32
 800a7aa:	d117      	bne.n	800a7dc <m2m_wifi_cb+0xf0>
        if(hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
 800a7ac:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	2218      	movs	r2, #24
 800a7b4:	6838      	ldr	r0, [r7, #0]
 800a7b6:	f7ff fea9 	bl	800a50c <hif_receive>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f040 8178 	bne.w	800aab2 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a7c2:	4b84      	ldr	r3, [pc, #528]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f000 8173 	beq.w	800aab2 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
 800a7cc:	4b81      	ldr	r3, [pc, #516]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	2032      	movs	r0, #50	@ 0x32
 800a7d8:	4798      	blx	r3
}
 800a7da:	e16a      	b.n	800aab2 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_REQ_DHCP_FAILURE)
 800a7dc:	79fb      	ldrb	r3, [r7, #7]
 800a7de:	2b3d      	cmp	r3, #61	@ 0x3d
 800a7e0:	d114      	bne.n	800a80c <m2m_wifi_cb+0x120>
        if(hif_receive(u32Addr, NULL, 0, 1) == M2M_SUCCESS)
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	6838      	ldr	r0, [r7, #0]
 800a7ea:	f7ff fe8f 	bl	800a50c <hif_receive>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f040 815e 	bne.w	800aab2 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a7f6:	4b77      	ldr	r3, [pc, #476]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f000 8159 	beq.w	800aab2 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_REQ_DHCP_FAILURE, NULL);
 800a800:	4b74      	ldr	r3, [pc, #464]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2100      	movs	r1, #0
 800a806:	203d      	movs	r0, #61	@ 0x3d
 800a808:	4798      	blx	r3
}
 800a80a:	e152      	b.n	800aab2 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_REQ_WPS)
 800a80c:	79fb      	ldrb	r3, [r7, #7]
 800a80e:	2b2f      	cmp	r3, #47	@ 0x2f
 800a810:	d11e      	bne.n	800a850 <m2m_wifi_cb+0x164>
        m2m_memset((uint8 *)&strWps, 0, sizeof(tstrM2MWPSInfo));
 800a812:	f107 0308 	add.w	r3, r7, #8
 800a816:	2264      	movs	r2, #100	@ 0x64
 800a818:	2100      	movs	r1, #0
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7ff f94c 	bl	8009ab8 <m2m_memset>
        if(hif_receive(u32Addr, (uint8 *)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
 800a820:	f107 0108 	add.w	r1, r7, #8
 800a824:	2300      	movs	r3, #0
 800a826:	2264      	movs	r2, #100	@ 0x64
 800a828:	6838      	ldr	r0, [r7, #0]
 800a82a:	f7ff fe6f 	bl	800a50c <hif_receive>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	f040 813e 	bne.w	800aab2 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a836:	4b67      	ldr	r3, [pc, #412]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f000 8139 	beq.w	800aab2 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
 800a840:	4b64      	ldr	r3, [pc, #400]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f107 0208 	add.w	r2, r7, #8
 800a848:	4611      	mov	r1, r2
 800a84a:	202f      	movs	r0, #47	@ 0x2f
 800a84c:	4798      	blx	r3
}
 800a84e:	e130      	b.n	800aab2 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
 800a850:	79fb      	ldrb	r3, [r7, #7]
 800a852:	2b34      	cmp	r3, #52	@ 0x34
 800a854:	d132      	bne.n	800a8bc <m2m_wifi_cb+0x1d0>
        if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
 800a856:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800a85a:	2300      	movs	r3, #0
 800a85c:	2204      	movs	r2, #4
 800a85e:	6838      	ldr	r0, [r7, #0]
 800a860:	f7ff fe54 	bl	800a50c <hif_receive>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	f040 8123 	bne.w	800aab2 <m2m_wifi_cb+0x3c6>
            M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n",
 800a86c:	485a      	ldr	r0, [pc, #360]	@ (800a9d8 <m2m_wifi_cb+0x2ec>)
 800a86e:	f003 fc05 	bl	800e07c <iprintf>
 800a872:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a876:	b2db      	uxtb	r3, r3
 800a878:	4619      	mov	r1, r3
 800a87a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a87e:	0a1b      	lsrs	r3, r3, #8
 800a880:	b2db      	uxtb	r3, r3
 800a882:	461a      	mov	r2, r3
 800a884:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a888:	0c1b      	lsrs	r3, r3, #16
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	4618      	mov	r0, r3
 800a88e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a892:	0e1b      	lsrs	r3, r3, #24
 800a894:	b2db      	uxtb	r3, r3
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	4603      	mov	r3, r0
 800a89a:	4850      	ldr	r0, [pc, #320]	@ (800a9dc <m2m_wifi_cb+0x2f0>)
 800a89c:	f003 fbee 	bl	800e07c <iprintf>
 800a8a0:	200d      	movs	r0, #13
 800a8a2:	f003 fbfd 	bl	800e0a0 <putchar>
            if(gpfAppWifiCb)
 800a8a6:	4b4b      	ldr	r3, [pc, #300]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	f000 8101 	beq.w	800aab2 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
 800a8b0:	4b48      	ldr	r3, [pc, #288]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	2034      	movs	r0, #52	@ 0x34
 800a8b8:	4798      	blx	r3
}
 800a8ba:	e0fa      	b.n	800aab2 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
 800a8bc:	79fb      	ldrb	r3, [r7, #7]
 800a8be:	2b11      	cmp	r3, #17
 800a8c0:	d11e      	bne.n	800a900 <m2m_wifi_cb+0x214>
        gu8scanInProgress = 0;
 800a8c2:	4b47      	ldr	r3, [pc, #284]	@ (800a9e0 <m2m_wifi_cb+0x2f4>)
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	701a      	strb	r2, [r3, #0]
        if(hif_receive(u32Addr, (uint8 *)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 800a8c8:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	2204      	movs	r2, #4
 800a8d0:	6838      	ldr	r0, [r7, #0]
 800a8d2:	f7ff fe1b 	bl	800a50c <hif_receive>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f040 80ea 	bne.w	800aab2 <m2m_wifi_cb+0x3c6>
            gu8ChNum = strState.u8NumofCh;
 800a8de:	f897 207c 	ldrb.w	r2, [r7, #124]	@ 0x7c
 800a8e2:	4b40      	ldr	r3, [pc, #256]	@ (800a9e4 <m2m_wifi_cb+0x2f8>)
 800a8e4:	701a      	strb	r2, [r3, #0]
            if(gpfAppWifiCb)
 800a8e6:	4b3b      	ldr	r3, [pc, #236]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f000 80e1 	beq.w	800aab2 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
 800a8f0:	4b38      	ldr	r3, [pc, #224]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	2011      	movs	r0, #17
 800a8fc:	4798      	blx	r3
}
 800a8fe:	e0d8      	b.n	800aab2 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
 800a900:	79fb      	ldrb	r3, [r7, #7]
 800a902:	2b13      	cmp	r3, #19
 800a904:	d117      	bne.n	800a936 <m2m_wifi_cb+0x24a>
        if(hif_receive(u32Addr, (uint8 *)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
 800a906:	f107 0108 	add.w	r1, r7, #8
 800a90a:	2300      	movs	r3, #0
 800a90c:	222c      	movs	r2, #44	@ 0x2c
 800a90e:	6838      	ldr	r0, [r7, #0]
 800a910:	f7ff fdfc 	bl	800a50c <hif_receive>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	f040 80cb 	bne.w	800aab2 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a91c:	4b2d      	ldr	r3, [pc, #180]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	f000 80c6 	beq.w	800aab2 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
 800a926:	4b2b      	ldr	r3, [pc, #172]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f107 0208 	add.w	r2, r7, #8
 800a92e:	4611      	mov	r1, r2
 800a930:	2013      	movs	r0, #19
 800a932:	4798      	blx	r3
}
 800a934:	e0bd      	b.n	800aab2 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
 800a936:	79fb      	ldrb	r3, [r7, #7]
 800a938:	2b04      	cmp	r3, #4
 800a93a:	d117      	bne.n	800a96c <m2m_wifi_cb+0x280>
        if(hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800a93c:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800a940:	2300      	movs	r3, #0
 800a942:	2204      	movs	r2, #4
 800a944:	6838      	ldr	r0, [r7, #0]
 800a946:	f7ff fde1 	bl	800a50c <hif_receive>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f040 80b0 	bne.w	800aab2 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a952:	4b20      	ldr	r3, [pc, #128]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	f000 80ab 	beq.w	800aab2 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
 800a95c:	4b1d      	ldr	r3, [pc, #116]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800a964:	4611      	mov	r1, r2
 800a966:	2004      	movs	r0, #4
 800a968:	4798      	blx	r3
}
 800a96a:	e0a2      	b.n	800aab2 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	2b65      	cmp	r3, #101	@ 0x65
 800a970:	d117      	bne.n	800a9a2 <m2m_wifi_cb+0x2b6>
        if(hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800a972:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800a976:	2300      	movs	r3, #0
 800a978:	2204      	movs	r2, #4
 800a97a:	6838      	ldr	r0, [r7, #0]
 800a97c:	f7ff fdc6 	bl	800a50c <hif_receive>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	f040 8095 	bne.w	800aab2 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a988:	4b12      	ldr	r3, [pc, #72]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f000 8090 	beq.w	800aab2 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
 800a992:	4b10      	ldr	r3, [pc, #64]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800a99a:	4611      	mov	r1, r2
 800a99c:	2065      	movs	r0, #101	@ 0x65
 800a99e:	4798      	blx	r3
}
 800a9a0:	e087      	b.n	800aab2 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
 800a9a2:	79fb      	ldrb	r3, [r7, #7]
 800a9a4:	2b09      	cmp	r3, #9
 800a9a6:	d11f      	bne.n	800a9e8 <m2m_wifi_cb+0x2fc>
        if(hif_receive(u32Addr, (uint8 *)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
 800a9a8:	f107 0108 	add.w	r1, r7, #8
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	2264      	movs	r2, #100	@ 0x64
 800a9b0:	6838      	ldr	r0, [r7, #0]
 800a9b2:	f7ff fdab 	bl	800a50c <hif_receive>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d17a      	bne.n	800aab2 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a9bc:	4b05      	ldr	r3, [pc, #20]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d076      	beq.n	800aab2 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
 800a9c4:	4b03      	ldr	r3, [pc, #12]	@ (800a9d4 <m2m_wifi_cb+0x2e8>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f107 0208 	add.w	r2, r7, #8
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	2009      	movs	r0, #9
 800a9d0:	4798      	blx	r3
}
 800a9d2:	e06e      	b.n	800aab2 <m2m_wifi_cb+0x3c6>
 800a9d4:	20000bf4 	.word	0x20000bf4
 800a9d8:	0800f3e8 	.word	0x0800f3e8
 800a9dc:	0800f3f4 	.word	0x0800f3f4
 800a9e0:	20000bf8 	.word	0x20000bf8
 800a9e4:	20000bf0 	.word	0x20000bf0
    else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
 800a9e8:	79fb      	ldrb	r3, [r7, #7]
 800a9ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9ec:	d115      	bne.n	800aa1a <m2m_wifi_cb+0x32e>
        if(hif_receive(u32Addr, (uint8 *)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
 800a9ee:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	2204      	movs	r2, #4
 800a9f6:	6838      	ldr	r0, [r7, #0]
 800a9f8:	f7ff fd88 	bl	800a50c <hif_receive>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d157      	bne.n	800aab2 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800aa02:	4b2e      	ldr	r3, [pc, #184]	@ (800aabc <m2m_wifi_cb+0x3d0>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d053      	beq.n	800aab2 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
 800aa0a:	4b2c      	ldr	r3, [pc, #176]	@ (800aabc <m2m_wifi_cb+0x3d0>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800aa12:	4611      	mov	r1, r2
 800aa14:	202a      	movs	r0, #42	@ 0x2a
 800aa16:	4798      	blx	r3
}
 800aa18:	e04b      	b.n	800aab2 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_REQRSP_DELETE_APID)
 800aa1a:	79fb      	ldrb	r3, [r7, #7]
 800aa1c:	2b27      	cmp	r3, #39	@ 0x27
 800aa1e:	d115      	bne.n	800aa4c <m2m_wifi_cb+0x360>
        if(hif_receive(u32Addr, (uint8 *)&strResp, sizeof(tstrM2MGenericResp), 0) == M2M_SUCCESS)
 800aa20:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800aa24:	2300      	movs	r3, #0
 800aa26:	2204      	movs	r2, #4
 800aa28:	6838      	ldr	r0, [r7, #0]
 800aa2a:	f7ff fd6f 	bl	800a50c <hif_receive>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d13e      	bne.n	800aab2 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800aa34:	4b21      	ldr	r3, [pc, #132]	@ (800aabc <m2m_wifi_cb+0x3d0>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d03a      	beq.n	800aab2 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_REQRSP_DELETE_APID, &strResp);
 800aa3c:	4b1f      	ldr	r3, [pc, #124]	@ (800aabc <m2m_wifi_cb+0x3d0>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800aa44:	4611      	mov	r1, r2
 800aa46:	2027      	movs	r0, #39	@ 0x27
 800aa48:	4798      	blx	r3
}
 800aa4a:	e032      	b.n	800aab2 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
 800aa4c:	79fb      	ldrb	r3, [r7, #7]
 800aa4e:	2b20      	cmp	r3, #32
 800aa50:	d121      	bne.n	800aa96 <m2m_wifi_cb+0x3aa>
        if(hif_receive(u32Addr, (uint8 *)&strPrng, sizeof(tstrPrng), 0) == M2M_SUCCESS)
 800aa52:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800aa56:	2300      	movs	r3, #0
 800aa58:	2208      	movs	r2, #8
 800aa5a:	6838      	ldr	r0, [r7, #0]
 800aa5c:	f7ff fd56 	bl	800a50c <hif_receive>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d125      	bne.n	800aab2 <m2m_wifi_cb+0x3c6>
            if(hif_receive(u32Addr + sizeof(tstrPrng), strPrng.pu8RngBuff, strPrng.u16PrngSize, 1) == M2M_SUCCESS)
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	f103 0008 	add.w	r0, r3, #8
 800aa6c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800aa6e:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 800aa72:	2301      	movs	r3, #1
 800aa74:	f7ff fd4a 	bl	800a50c <hif_receive>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d119      	bne.n	800aab2 <m2m_wifi_cb+0x3c6>
                if(gpfAppWifiCb)
 800aa7e:	4b0f      	ldr	r3, [pc, #60]	@ (800aabc <m2m_wifi_cb+0x3d0>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d015      	beq.n	800aab2 <m2m_wifi_cb+0x3c6>
                    gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG, &strPrng);
 800aa86:	4b0d      	ldr	r3, [pc, #52]	@ (800aabc <m2m_wifi_cb+0x3d0>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800aa8e:	4611      	mov	r1, r2
 800aa90:	2020      	movs	r0, #32
 800aa92:	4798      	blx	r3
}
 800aa94:	e00d      	b.n	800aab2 <m2m_wifi_cb+0x3c6>
        M2M_ERR("REQ Not defined %d\n", u8OpCode);
 800aa96:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 800aa9a:	4909      	ldr	r1, [pc, #36]	@ (800aac0 <m2m_wifi_cb+0x3d4>)
 800aa9c:	4809      	ldr	r0, [pc, #36]	@ (800aac4 <m2m_wifi_cb+0x3d8>)
 800aa9e:	f003 faed 	bl	800e07c <iprintf>
 800aaa2:	79fb      	ldrb	r3, [r7, #7]
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	4808      	ldr	r0, [pc, #32]	@ (800aac8 <m2m_wifi_cb+0x3dc>)
 800aaa8:	f003 fae8 	bl	800e07c <iprintf>
 800aaac:	200d      	movs	r0, #13
 800aaae:	f003 faf7 	bl	800e0a0 <putchar>
}
 800aab2:	bf00      	nop
 800aab4:	37b0      	adds	r7, #176	@ 0xb0
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	20000bf4 	.word	0x20000bf4
 800aac0:	08010130 	.word	0x08010130
 800aac4:	0800f414 	.word	0x0800f414
 800aac8:	0800f428 	.word	0x0800f428

0800aacc <m2m_wifi_init_hold>:
    s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8 *)pCRL, sizeof(tstrTlsCrlInfo), 0);
    return s8Ret;
}

sint8 m2m_wifi_init_hold(void)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
    sint8 ret = M2M_ERR_FAIL;
 800aad2:	23f4      	movs	r3, #244	@ 0xf4
 800aad4:	71fb      	strb	r3, [r7, #7]

    /* Apply device specific initialization. */
    ret = nm_drv_init_hold();
 800aad6:	f001 f949 	bl	800bd6c <nm_drv_init_hold>
 800aada:	4603      	mov	r3, r0
 800aadc:	71fb      	strb	r3, [r7, #7]

    if(M2M_SUCCESS == ret)
 800aade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d102      	bne.n	800aaec <m2m_wifi_init_hold+0x20>
        gu8WifiState = WIFI_STATE_INIT;
 800aae6:	4b04      	ldr	r3, [pc, #16]	@ (800aaf8 <m2m_wifi_init_hold+0x2c>)
 800aae8:	2201      	movs	r2, #1
 800aaea:	701a      	strb	r2, [r3, #0]

    return ret;
 800aaec:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	20000bf1 	.word	0x20000bf1

0800aafc <m2m_wifi_init_start>:

sint8 m2m_wifi_init_start(tstrWifiInitParam *pWifiInitParam)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b090      	sub	sp, #64	@ 0x40
 800ab00:	af02      	add	r7, sp, #8
 800ab02:	6078      	str	r0, [r7, #4]
    tstrM2mRev strtmp;
    sint8 ret = M2M_SUCCESS;
 800ab04:	2300      	movs	r3, #0
 800ab06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	72fb      	strb	r3, [r7, #11]

    if(pWifiInitParam == NULL) {
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d103      	bne.n	800ab1c <m2m_wifi_init_start+0x20>
        ret = M2M_ERR_FAIL;
 800ab14:	23f4      	movs	r3, #244	@ 0xf4
 800ab16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        goto _EXIT0;
 800ab1a:	e090      	b.n	800ac3e <m2m_wifi_init_start+0x142>
    }

    gpfAppWifiCb = pWifiInitParam->pfAppWifiCb;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a4a      	ldr	r2, [pc, #296]	@ (800ac4c <m2m_wifi_init_start+0x150>)
 800ab22:	6013      	str	r3, [r2, #0]
    gu16ethRcvBufSize = pWifiInitParam->strEthInitParam.u16ethRcvBufSize;
	if (pWifiInitParam->strEthInitParam.u8EthernetEnable)		
		u8WifiMode = M2M_WIFI_MODE_ETHERNET;
#endif /* ETH_MODE */

    gu8scanInProgress = 0;
 800ab24:	4b4a      	ldr	r3, [pc, #296]	@ (800ac50 <m2m_wifi_init_start+0x154>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	701a      	strb	r2, [r3, #0]
    /* Apply device specific initialization. */
    ret = nm_drv_init_start(&u8WifiMode);
 800ab2a:	f107 030b 	add.w	r3, r7, #11
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f001 f95a 	bl	800bde8 <nm_drv_init_start>
 800ab34:	4603      	mov	r3, r0
 800ab36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if(ret != M2M_SUCCESS) goto _EXIT0;
 800ab3a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d17a      	bne.n	800ac38 <m2m_wifi_init_start+0x13c>

    gu8WifiState = WIFI_STATE_START;
 800ab42:	4b44      	ldr	r3, [pc, #272]	@ (800ac54 <m2m_wifi_init_start+0x158>)
 800ab44:	2202      	movs	r2, #2
 800ab46:	701a      	strb	r2, [r3, #0]

    /* Initialize host interface module */
    ret = hif_init(NULL);
 800ab48:	2000      	movs	r0, #0
 800ab4a:	f7ff f90b 	bl	8009d64 <hif_init>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if(ret != M2M_SUCCESS) goto _EXIT1;
 800ab54:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d165      	bne.n	800ac28 <m2m_wifi_init_start+0x12c>

    hif_register_cb(M2M_REQ_GROUP_WIFI, m2m_wifi_cb);
 800ab5c:	493e      	ldr	r1, [pc, #248]	@ (800ac58 <m2m_wifi_init_start+0x15c>)
 800ab5e:	2001      	movs	r0, #1
 800ab60:	f7ff fd6a 	bl	800a638 <hif_register_cb>

    ret = nm_get_firmware_full_info(&strtmp);
 800ab64:	f107 030c 	add.w	r3, r7, #12
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f001 f867 	bl	800bc3c <nm_get_firmware_full_info>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
 800ab74:	4839      	ldr	r0, [pc, #228]	@ (800ac5c <m2m_wifi_init_start+0x160>)
 800ab76:	f003 fa81 	bl	800e07c <iprintf>
 800ab7a:	7c3b      	ldrb	r3, [r7, #16]
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	7c7b      	ldrb	r3, [r7, #17]
 800ab80:	461a      	mov	r2, r3
 800ab82:	7cbb      	ldrb	r3, [r7, #18]
 800ab84:	4618      	mov	r0, r3
 800ab86:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	4834      	ldr	r0, [pc, #208]	@ (800ac60 <m2m_wifi_init_start+0x164>)
 800ab8e:	f003 fa75 	bl	800e07c <iprintf>
 800ab92:	200d      	movs	r0, #13
 800ab94:	f003 fa84 	bl	800e0a0 <putchar>
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
 800ab98:	4830      	ldr	r0, [pc, #192]	@ (800ac5c <m2m_wifi_init_start+0x160>)
 800ab9a:	f003 fa6f 	bl	800e07c <iprintf>
 800ab9e:	f107 030c 	add.w	r3, r7, #12
 800aba2:	f103 0216 	add.w	r2, r3, #22
 800aba6:	f107 030c 	add.w	r3, r7, #12
 800abaa:	330a      	adds	r3, #10
 800abac:	4619      	mov	r1, r3
 800abae:	482d      	ldr	r0, [pc, #180]	@ (800ac64 <m2m_wifi_init_start+0x168>)
 800abb0:	f003 fa64 	bl	800e07c <iprintf>
 800abb4:	200d      	movs	r0, #13
 800abb6:	f003 fa73 	bl	800e0a0 <putchar>
	M2M_INFO("Firmware Min driver ver : %u.%u.%u \n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
 800abba:	4828      	ldr	r0, [pc, #160]	@ (800ac5c <m2m_wifi_init_start+0x160>)
 800abbc:	f003 fa5e 	bl	800e07c <iprintf>
 800abc0:	7cfb      	ldrb	r3, [r7, #19]
 800abc2:	4619      	mov	r1, r3
 800abc4:	7d3b      	ldrb	r3, [r7, #20]
 800abc6:	461a      	mov	r2, r3
 800abc8:	7d7b      	ldrb	r3, [r7, #21]
 800abca:	4827      	ldr	r0, [pc, #156]	@ (800ac68 <m2m_wifi_init_start+0x16c>)
 800abcc:	f003 fa56 	bl	800e07c <iprintf>
 800abd0:	200d      	movs	r0, #13
 800abd2:	f003 fa65 	bl	800e0a0 <putchar>
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 800abd6:	4821      	ldr	r0, [pc, #132]	@ (800ac5c <m2m_wifi_init_start+0x160>)
 800abd8:	f003 fa50 	bl	800e07c <iprintf>
 800abdc:	2307      	movs	r3, #7
 800abde:	2207      	movs	r2, #7
 800abe0:	2113      	movs	r1, #19
 800abe2:	4822      	ldr	r0, [pc, #136]	@ (800ac6c <m2m_wifi_init_start+0x170>)
 800abe4:	f003 fa4a 	bl	800e07c <iprintf>
 800abe8:	200d      	movs	r0, #13
 800abea:	f003 fa59 	bl	800e0a0 <putchar>
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
 800abee:	481b      	ldr	r0, [pc, #108]	@ (800ac5c <m2m_wifi_init_start+0x160>)
 800abf0:	f003 fa44 	bl	800e07c <iprintf>
 800abf4:	4a1e      	ldr	r2, [pc, #120]	@ (800ac70 <m2m_wifi_init_start+0x174>)
 800abf6:	491f      	ldr	r1, [pc, #124]	@ (800ac74 <m2m_wifi_init_start+0x178>)
 800abf8:	481f      	ldr	r0, [pc, #124]	@ (800ac78 <m2m_wifi_init_start+0x17c>)
 800abfa:	f003 fa3f 	bl	800e07c <iprintf>
 800abfe:	200d      	movs	r0, #13
 800ac00:	f003 fa4e 	bl	800e0a0 <putchar>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
 800ac04:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ac08:	f113 0f0d 	cmn.w	r3, #13
 800ac0c:	d116      	bne.n	800ac3c <m2m_wifi_init_start+0x140>
	{
		M2M_ERR("Mismatch Firmware Version\n");
 800ac0e:	f240 12db 	movw	r2, #475	@ 0x1db
 800ac12:	491a      	ldr	r1, [pc, #104]	@ (800ac7c <m2m_wifi_init_start+0x180>)
 800ac14:	481a      	ldr	r0, [pc, #104]	@ (800ac80 <m2m_wifi_init_start+0x184>)
 800ac16:	f003 fa31 	bl	800e07c <iprintf>
 800ac1a:	481a      	ldr	r0, [pc, #104]	@ (800ac84 <m2m_wifi_init_start+0x188>)
 800ac1c:	f003 fa9e 	bl	800e15c <puts>
 800ac20:	200d      	movs	r0, #13
 800ac22:	f003 fa3d 	bl	800e0a0 <putchar>
	}

    goto _EXIT0;
 800ac26:	e009      	b.n	800ac3c <m2m_wifi_init_start+0x140>
    if(ret != M2M_SUCCESS) goto _EXIT1;
 800ac28:	bf00      	nop

_EXIT1:
    gu8WifiState = WIFI_STATE_DEINIT;
 800ac2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ac54 <m2m_wifi_init_start+0x158>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	701a      	strb	r2, [r3, #0]
    nm_drv_deinit(NULL);
 800ac30:	2000      	movs	r0, #0
 800ac32:	f001 f937 	bl	800bea4 <nm_drv_deinit>
 800ac36:	e002      	b.n	800ac3e <m2m_wifi_init_start+0x142>
    if(ret != M2M_SUCCESS) goto _EXIT0;
 800ac38:	bf00      	nop
 800ac3a:	e000      	b.n	800ac3e <m2m_wifi_init_start+0x142>
    goto _EXIT0;
 800ac3c:	bf00      	nop
_EXIT0:

    return ret;
 800ac3e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3738      	adds	r7, #56	@ 0x38
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	20000bf4 	.word	0x20000bf4
 800ac50:	20000bf8 	.word	0x20000bf8
 800ac54:	20000bf1 	.word	0x20000bf1
 800ac58:	0800a6ed 	.word	0x0800a6ed
 800ac5c:	0800f3e8 	.word	0x0800f3e8
 800ac60:	0800f53c 	.word	0x0800f53c
 800ac64:	0800f564 	.word	0x0800f564
 800ac68:	0800f580 	.word	0x0800f580
 800ac6c:	0800f5a8 	.word	0x0800f5a8
 800ac70:	0800f5c0 	.word	0x0800f5c0
 800ac74:	0800f5cc 	.word	0x0800f5cc
 800ac78:	0800f5d8 	.word	0x0800f5d8
 800ac7c:	0801013c 	.word	0x0801013c
 800ac80:	0800f414 	.word	0x0800f414
 800ac84:	0800f5f0 	.word	0x0800f5f0

0800ac88 <m2m_wifi_init>:

sint8 m2m_wifi_init(tstrWifiInitParam *pWifiInitParam)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 800ac90:	2300      	movs	r3, #0
 800ac92:	73fb      	strb	r3, [r7, #15]

    ret = m2m_wifi_init_hold();
 800ac94:	f7ff ff1a 	bl	800aacc <m2m_wifi_init_hold>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 800ac9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d104      	bne.n	800acae <m2m_wifi_init+0x26>
    {
        ret = m2m_wifi_init_start(pWifiInitParam);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f7ff ff29 	bl	800aafc <m2m_wifi_init_start>
 800acaa:	4603      	mov	r3, r0
 800acac:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 800acae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <m2m_wifi_handle_events>:
{
    hif_yield();
}

sint8 m2m_wifi_handle_events(void *arg)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b082      	sub	sp, #8
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
    return hif_handle_isr();
 800acc2:	f7ff fbc1 	bl	800a448 <hif_handle_isr>
 800acc6:	4603      	mov	r3, r0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <m2m_wifi_connect_prepare_msg>:
    tenuM2mSecType      enuAuthType,
    uint16              u16AuthSize,
    tstrNetworkId       *pstrNetworkId,
    tstrM2mWifiConnHdr  *pstrWifiConn
)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	603b      	str	r3, [r7, #0]
 800acd8:	4603      	mov	r3, r0
 800acda:	71fb      	strb	r3, [r7, #7]
 800acdc:	460b      	mov	r3, r1
 800acde:	71bb      	strb	r3, [r7, #6]
 800ace0:	4613      	mov	r3, r2
 800ace2:	80bb      	strh	r3, [r7, #4]
    sint8   ret = M2M_ERR_FAIL;
 800ace4:	23f4      	movs	r3, #244	@ 0xf4
 800ace6:	75fb      	strb	r3, [r7, #23]
    uint16  u16CredSize = sizeof(tstrM2mConnCredCmn) + u16AuthSize;
 800ace8:	88bb      	ldrh	r3, [r7, #4]
 800acea:	332c      	adds	r3, #44	@ 0x2c
 800acec:	82bb      	strh	r3, [r7, #20]

    /* Check application params. */
    if(
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d074      	beq.n	800adde <m2m_wifi_connect_prepare_msg+0x10e>
        (pstrNetworkId == NULL)
        || (pstrNetworkId->pu8Ssid == NULL)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d070      	beq.n	800adde <m2m_wifi_connect_prepare_msg+0x10e>
        || (pstrNetworkId->u8SsidLen >= M2M_MAX_SSID_LEN)
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	7a1b      	ldrb	r3, [r3, #8]
 800ad00:	2b20      	cmp	r3, #32
 800ad02:	d86c      	bhi.n	800adde <m2m_wifi_connect_prepare_msg+0x10e>
    )
        goto INVALID_ARG;

    if(pstrWifiConn != NULL)
 800ad04:	6a3b      	ldr	r3, [r7, #32]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d066      	beq.n	800add8 <m2m_wifi_connect_prepare_msg+0x108>
    {
        tstrM2mConnCredHdr  *pstrHdr = &pstrWifiConn->strConnCredHdr;
 800ad0a:	6a3b      	ldr	r3, [r7, #32]
 800ad0c:	613b      	str	r3, [r7, #16]
        tstrM2mConnCredCmn  *pstrCmn = &pstrWifiConn->strConnCredCmn;
 800ad0e:	6a3b      	ldr	r3, [r7, #32]
 800ad10:	3304      	adds	r3, #4
 800ad12:	60fb      	str	r3, [r7, #12]

        m2m_memset((uint8 *)pstrWifiConn, 0, sizeof(tstrM2mWifiConnHdr));
 800ad14:	2230      	movs	r2, #48	@ 0x30
 800ad16:	2100      	movs	r1, #0
 800ad18:	6a38      	ldr	r0, [r7, #32]
 800ad1a:	f7fe fecd 	bl	8009ab8 <m2m_memset>

        pstrHdr->u16CredSize = u16CredSize;
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	8aba      	ldrh	r2, [r7, #20]
 800ad22:	801a      	strh	r2, [r3, #0]
        switch(enuCredStoreOption)
 800ad24:	79fb      	ldrb	r3, [r7, #7]
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	d006      	beq.n	800ad38 <m2m_wifi_connect_prepare_msg+0x68>
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	dc59      	bgt.n	800ade2 <m2m_wifi_connect_prepare_msg+0x112>
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d010      	beq.n	800ad54 <m2m_wifi_connect_prepare_msg+0x84>
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d007      	beq.n	800ad46 <m2m_wifi_connect_prepare_msg+0x76>
            pstrHdr->u8CredStoreFlags |= M2M_CRED_STORE_FLAG;
        // intentional fall through...
        case WIFI_CRED_DONTSAVE:
            break;
        default:
            goto INVALID_ARG;
 800ad36:	e054      	b.n	800ade2 <m2m_wifi_connect_prepare_msg+0x112>
            pstrHdr->u8CredStoreFlags |= M2M_CRED_ENCRYPT_FLAG;
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	789b      	ldrb	r3, [r3, #2]
 800ad3c:	f043 0302 	orr.w	r3, r3, #2
 800ad40:	b2da      	uxtb	r2, r3
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	709a      	strb	r2, [r3, #2]
            pstrHdr->u8CredStoreFlags |= M2M_CRED_STORE_FLAG;
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	789b      	ldrb	r3, [r3, #2]
 800ad4a:	f043 0301 	orr.w	r3, r3, #1
 800ad4e:	b2da      	uxtb	r2, r3
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	709a      	strb	r2, [r3, #2]
            break;
 800ad54:	bf00      	nop
        }

        if(pstrNetworkId->enuChannel == M2M_WIFI_CH_ALL)
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	7a5b      	ldrb	r3, [r3, #9]
 800ad5a:	2bff      	cmp	r3, #255	@ 0xff
 800ad5c:	d104      	bne.n	800ad68 <m2m_wifi_connect_prepare_msg+0x98>
            pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel);
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	7a5a      	ldrb	r2, [r3, #9]
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	70da      	strb	r2, [r3, #3]
 800ad66:	e00d      	b.n	800ad84 <m2m_wifi_connect_prepare_msg+0xb4>
        else if((pstrNetworkId->enuChannel <= M2M_WIFI_CH_14) && (pstrNetworkId->enuChannel >= M2M_WIFI_CH_1))
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	7a5b      	ldrb	r3, [r3, #9]
 800ad6c:	2b0e      	cmp	r3, #14
 800ad6e:	d83a      	bhi.n	800ade6 <m2m_wifi_connect_prepare_msg+0x116>
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	7a5b      	ldrb	r3, [r3, #9]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d036      	beq.n	800ade6 <m2m_wifi_connect_prepare_msg+0x116>
            pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel) - 1;
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	7a5b      	ldrb	r3, [r3, #9]
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	b2da      	uxtb	r2, r3
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	70da      	strb	r2, [r3, #3]
        else
            goto INVALID_ARG;

        if((enuAuthType == M2M_WIFI_SEC_INVALID) || (enuAuthType >= M2M_WIFI_NUM_AUTH_TYPES))
 800ad84:	79bb      	ldrb	r3, [r7, #6]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d02f      	beq.n	800adea <m2m_wifi_connect_prepare_msg+0x11a>
 800ad8a:	79bb      	ldrb	r3, [r7, #6]
 800ad8c:	2b04      	cmp	r3, #4
 800ad8e:	d82c      	bhi.n	800adea <m2m_wifi_connect_prepare_msg+0x11a>
            goto INVALID_ARG;
        pstrCmn->u8AuthType = (uint8)enuAuthType;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	79ba      	ldrb	r2, [r7, #6]
 800ad94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

        pstrCmn->u8SsidLen = pstrNetworkId->u8SsidLen;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	7a1a      	ldrb	r2, [r3, #8]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	701a      	strb	r2, [r3, #0]
        m2m_memcpy(pstrCmn->au8Ssid, pstrNetworkId->pu8Ssid, pstrNetworkId->u8SsidLen);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	1c58      	adds	r0, r3, #1
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	6859      	ldr	r1, [r3, #4]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	7a1b      	ldrb	r3, [r3, #8]
 800adac:	461a      	mov	r2, r3
 800adae:	f7fe fe63 	bl	8009a78 <m2m_memcpy>
        if(pstrNetworkId->pu8Bssid != NULL)
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00c      	beq.n	800add4 <m2m_wifi_connect_prepare_msg+0x104>
        {
            pstrCmn->u8Options = M2M_WIFI_CONN_BSSID_FLAG;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2201      	movs	r2, #1
 800adbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            m2m_memcpy(pstrCmn->au8Bssid, pstrNetworkId->pu8Bssid, M2M_MAC_ADDRES_LEN);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f103 0022 	add.w	r0, r3, #34	@ 0x22
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2206      	movs	r2, #6
 800adce:	4619      	mov	r1, r3
 800add0:	f7fe fe52 	bl	8009a78 <m2m_memcpy>
        }
        /* Everything is ok, set return value. */
        ret = M2M_SUCCESS;
 800add4:	2300      	movs	r3, #0
 800add6:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 800add8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800addc:	e008      	b.n	800adf0 <m2m_wifi_connect_prepare_msg+0x120>
        goto INVALID_ARG;
 800adde:	bf00      	nop
 800ade0:	e004      	b.n	800adec <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 800ade2:	bf00      	nop
 800ade4:	e002      	b.n	800adec <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 800ade6:	bf00      	nop
 800ade8:	e000      	b.n	800adec <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 800adea:	bf00      	nop
INVALID_ARG:
    return M2M_ERR_INVALID_ARG;
 800adec:	f06f 030e 	mvn.w	r3, #14
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3718      	adds	r7, #24
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <m2m_wifi_connect_open>:
/*************************************************************************************************/
sint8 m2m_wifi_connect_open(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId      *pstrNetworkId
)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b094      	sub	sp, #80	@ 0x50
 800adfc:	af04      	add	r7, sp, #16
 800adfe:	4603      	mov	r3, r0
 800ae00:	6039      	str	r1, [r7, #0]
 800ae02:	71fb      	strb	r3, [r7, #7]
    sint8               ret = M2M_ERR_INVALID_ARG;
 800ae04:	23f1      	movs	r3, #241	@ 0xf1
 800ae06:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    tstrM2mWifiConnHdr  strConnHdr;

    ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption, M2M_WIFI_SEC_OPEN, 0, pstrNetworkId, &strConnHdr);
 800ae0a:	79f8      	ldrb	r0, [r7, #7]
 800ae0c:	f107 030c 	add.w	r3, r7, #12
 800ae10:	9300      	str	r3, [sp, #0]
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2200      	movs	r2, #0
 800ae16:	2101      	movs	r1, #1
 800ae18:	f7ff ff5a 	bl	800acd0 <m2m_wifi_connect_prepare_msg>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if(ret == M2M_SUCCESS)
 800ae22:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d10f      	bne.n	800ae4a <m2m_wifi_connect_open+0x52>
    {
        ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN,
 800ae2a:	f107 020c 	add.w	r2, r7, #12
 800ae2e:	2300      	movs	r3, #0
 800ae30:	9302      	str	r3, [sp, #8]
 800ae32:	2300      	movs	r3, #0
 800ae34:	9301      	str	r3, [sp, #4]
 800ae36:	2300      	movs	r3, #0
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	2330      	movs	r3, #48	@ 0x30
 800ae3c:	213b      	movs	r1, #59	@ 0x3b
 800ae3e:	2001      	movs	r0, #1
 800ae40:	f7fe ffac 	bl	8009d9c <hif_send>
 800ae44:	4603      	mov	r3, r0
 800ae46:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                       (uint8 *)&strConnHdr, sizeof(strConnHdr),
                       NULL, 0, 0);
    }
    return ret;
 800ae4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3740      	adds	r7, #64	@ 0x40
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <m2m_wifi_connect_wep>:
sint8 m2m_wifi_connect_wep(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuthWep         *pstrAuthWep
)
{
 800ae56:	b480      	push	{r7}
 800ae58:	b085      	sub	sp, #20
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	60b9      	str	r1, [r7, #8]
 800ae60:	607a      	str	r2, [r7, #4]
 800ae62:	73fb      	strb	r3, [r7, #15]
    /* As of 19.7.5 the WEP protocol is deprecated */
    return M2M_ERR_INVALID;
 800ae64:	f06f 030f 	mvn.w	r3, #15
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <m2m_wifi_connect_psk>:
sint8 m2m_wifi_connect_psk(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuthPsk         *pstrAuthPsk
)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b096      	sub	sp, #88	@ 0x58
 800ae78:	af04      	add	r7, sp, #16
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
 800ae80:	73fb      	strb	r3, [r7, #15]
    sint8   ret = M2M_ERR_INVALID_ARG;
 800ae82:	23f1      	movs	r3, #241	@ 0xf1
 800ae84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if(pstrAuthPsk != NULL)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d07e      	beq.n	800af8c <m2m_wifi_connect_psk+0x118>
    {
        tstrM2mWifiConnHdr  strConnHdr;

        ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption,
 800ae8e:	7bf8      	ldrb	r0, [r7, #15]
 800ae90:	f107 0310 	add.w	r3, r7, #16
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	226c      	movs	r2, #108	@ 0x6c
 800ae9a:	2102      	movs	r1, #2
 800ae9c:	f7ff ff18 	bl	800acd0 <m2m_wifi_connect_prepare_msg>
 800aea0:	4603      	mov	r3, r0
 800aea2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                           M2M_WIFI_SEC_WPA_PSK,
                                           sizeof(tstrM2mWifiPsk),
                                           pstrNetworkId,
                                           &strConnHdr);

        if(ret == M2M_SUCCESS)
 800aea6:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d16e      	bne.n	800af8c <m2m_wifi_connect_psk+0x118>
        {
            tstrM2mWifiPsk  *pstrPsk = (tstrM2mWifiPsk *)malloc(sizeof(tstrM2mWifiPsk));
 800aeae:	206c      	movs	r0, #108	@ 0x6c
 800aeb0:	f002 ff64 	bl	800dd7c <malloc>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	643b      	str	r3, [r7, #64]	@ 0x40
            if(pstrPsk != NULL)
 800aeb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d063      	beq.n	800af86 <m2m_wifi_connect_psk+0x112>
            {
                m2m_memset((uint8 *)pstrPsk, 0, sizeof(tstrM2mWifiPsk));
 800aebe:	226c      	movs	r2, #108	@ 0x6c
 800aec0:	2100      	movs	r1, #0
 800aec2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800aec4:	f7fe fdf8 	bl	8009ab8 <m2m_memset>
                if(pstrAuthPsk->pu8Psk != NULL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d025      	beq.n	800af1c <m2m_wifi_connect_psk+0xa8>
                {
                    if(pstrAuthPsk->pu8Passphrase != NULL)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d003      	beq.n	800aee0 <m2m_wifi_connect_psk+0x6c>
                        ret = M2M_ERR_INVALID_ARG;
 800aed8:	23f1      	movs	r3, #241	@ 0xf1
 800aeda:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800aede:	e03a      	b.n	800af56 <m2m_wifi_connect_psk+0xe2>
                    else
                    {
                        pstrPsk->u8PassphraseLen = M2M_MAX_PSK_LEN-1;
 800aee0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aee2:	2240      	movs	r2, #64	@ 0x40
 800aee4:	701a      	strb	r2, [r3, #0]
                        /* Use hexstr_2_bytes to verify pu8Psk input. */
                        if(M2M_SUCCESS != hexstr_2_bytes(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen/2))
 800aee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aee8:	1c58      	adds	r0, r3, #1
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6819      	ldr	r1, [r3, #0]
 800aeee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	085b      	lsrs	r3, r3, #1
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	461a      	mov	r2, r3
 800aef8:	f7fe fe35 	bl	8009b66 <hexstr_2_bytes>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d002      	beq.n	800af08 <m2m_wifi_connect_psk+0x94>
                            ret = M2M_ERR_INVALID_ARG;
 800af02:	23f1      	movs	r3, #241	@ 0xf1
 800af04:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                        m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen);
 800af08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af0a:	1c58      	adds	r0, r3, #1
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6819      	ldr	r1, [r3, #0]
 800af10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	461a      	mov	r2, r3
 800af16:	f7fe fdaf 	bl	8009a78 <m2m_memcpy>
 800af1a:	e01c      	b.n	800af56 <m2m_wifi_connect_psk+0xe2>
                    }
                }
                else if(pstrAuthPsk->pu8Passphrase != NULL)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d015      	beq.n	800af50 <m2m_wifi_connect_psk+0xdc>
                {
                    if(pstrAuthPsk->u8PassphraseLen > M2M_MAX_PSK_LEN-1)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	7a1b      	ldrb	r3, [r3, #8]
 800af28:	2b40      	cmp	r3, #64	@ 0x40
 800af2a:	d903      	bls.n	800af34 <m2m_wifi_connect_psk+0xc0>
                        ret = M2M_ERR_INVALID_ARG;
 800af2c:	23f1      	movs	r3, #241	@ 0xf1
 800af2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800af32:	e010      	b.n	800af56 <m2m_wifi_connect_psk+0xe2>
                    else
                    {
                        pstrPsk->u8PassphraseLen = pstrAuthPsk->u8PassphraseLen;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	7a1a      	ldrb	r2, [r3, #8]
 800af38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af3a:	701a      	strb	r2, [r3, #0]
                        m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Passphrase, pstrPsk->u8PassphraseLen);
 800af3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af3e:	1c58      	adds	r0, r3, #1
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6859      	ldr	r1, [r3, #4]
 800af44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	461a      	mov	r2, r3
 800af4a:	f7fe fd95 	bl	8009a78 <m2m_memcpy>
 800af4e:	e002      	b.n	800af56 <m2m_wifi_connect_psk+0xe2>
                    }
                }
                else
                    ret = M2M_ERR_INVALID_ARG;
 800af50:	23f1      	movs	r3, #241	@ 0xf1
 800af52:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                if(ret == M2M_SUCCESS)
 800af56:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d10f      	bne.n	800af7e <m2m_wifi_connect_psk+0x10a>
                {
                    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
 800af5e:	f107 0210 	add.w	r2, r7, #16
 800af62:	2330      	movs	r3, #48	@ 0x30
 800af64:	9302      	str	r3, [sp, #8]
 800af66:	236c      	movs	r3, #108	@ 0x6c
 800af68:	9301      	str	r3, [sp, #4]
 800af6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	2330      	movs	r3, #48	@ 0x30
 800af70:	21bb      	movs	r1, #187	@ 0xbb
 800af72:	2001      	movs	r0, #1
 800af74:	f7fe ff12 	bl	8009d9c <hif_send>
 800af78:	4603      	mov	r3, r0
 800af7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                   (uint8 *)&strConnHdr, sizeof(tstrM2mWifiConnHdr),
                                   (uint8 *)pstrPsk, sizeof(tstrM2mWifiPsk), sizeof(tstrM2mWifiConnHdr));
                }
                free(pstrPsk);
 800af7e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800af80:	f002 ff04 	bl	800dd8c <free>
 800af84:	e002      	b.n	800af8c <m2m_wifi_connect_psk+0x118>
            }
            else
                ret = M2M_ERR_MEM_ALLOC;
 800af86:	23fd      	movs	r3, #253	@ 0xfd
 800af88:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }
    return ret;
 800af8c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800af90:	4618      	mov	r0, r3
 800af92:	3748      	adds	r7, #72	@ 0x48
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <m2m_wifi_connect_1x_mschap2>:
sint8 m2m_wifi_connect_1x_mschap2(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuth1xMschap2   *pstrAuth1xMschap2
)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b098      	sub	sp, #96	@ 0x60
 800af9c:	af04      	add	r7, sp, #16
 800af9e:	4603      	mov	r3, r0
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
 800afa4:	73fb      	strb	r3, [r7, #15]
    sint8 ret = M2M_ERR_INVALID_ARG;
 800afa6:	23f1      	movs	r3, #241	@ 0xf1
 800afa8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if(pstrAuth1xMschap2 != NULL)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f000 80d3 	beq.w	800b15a <m2m_wifi_connect_1x_mschap2+0x1c2>
    {
        if(pstrAuth1xMschap2->pu8Domain == NULL)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d102      	bne.n	800afc2 <m2m_wifi_connect_1x_mschap2+0x2a>
            pstrAuth1xMschap2->u16DomainLen = 0;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	819a      	strh	r2, [r3, #12]
        if(
            (pstrAuth1xMschap2->pu8UserName != NULL)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	685b      	ldr	r3, [r3, #4]
        if(
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f000 80c7 	beq.w	800b15a <m2m_wifi_connect_1x_mschap2+0x1c2>
            && (pstrAuth1xMschap2->pu8Password != NULL)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f000 80c2 	beq.w	800b15a <m2m_wifi_connect_1x_mschap2+0x1c2>
            && ((uint32)(pstrAuth1xMschap2->u16DomainLen) + pstrAuth1xMschap2->u16UserNameLen <= M2M_AUTH_1X_USER_LEN_MAX)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	899b      	ldrh	r3, [r3, #12]
 800afda:	461a      	mov	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	89db      	ldrh	r3, [r3, #14]
 800afe0:	4413      	add	r3, r2
 800afe2:	2b64      	cmp	r3, #100	@ 0x64
 800afe4:	f200 80b9 	bhi.w	800b15a <m2m_wifi_connect_1x_mschap2+0x1c2>
            && (pstrAuth1xMschap2->u16PasswordLen <= M2M_AUTH_1X_PASSWORD_LEN_MAX)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	8a1b      	ldrh	r3, [r3, #16]
 800afec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aff0:	f200 80b3 	bhi.w	800b15a <m2m_wifi_connect_1x_mschap2+0x1c2>
        )
        {
            tstrM2mWifiConnHdr  strConnHdr;
            uint16              u16AuthSize =   sizeof(tstrM2mWifi1xHdr) +
                                                pstrAuth1xMschap2->u16DomainLen +
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	899a      	ldrh	r2, [r3, #12]
                                                pstrAuth1xMschap2->u16UserNameLen +
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	89db      	ldrh	r3, [r3, #14]
                                                pstrAuth1xMschap2->u16DomainLen +
 800affc:	4413      	add	r3, r2
 800affe:	b29a      	uxth	r2, r3
                                                pstrAuth1xMschap2->u16PasswordLen;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	8a1b      	ldrh	r3, [r3, #16]
                                                pstrAuth1xMschap2->u16UserNameLen +
 800b004:	4413      	add	r3, r2
 800b006:	b29b      	uxth	r3, r3
            uint16              u16AuthSize =   sizeof(tstrM2mWifi1xHdr) +
 800b008:	332c      	adds	r3, #44	@ 0x2c
 800b00a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

            ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption,
 800b00e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800b012:	7bf8      	ldrb	r0, [r7, #15]
 800b014:	f107 0310 	add.w	r3, r7, #16
 800b018:	9300      	str	r3, [sp, #0]
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	2104      	movs	r1, #4
 800b01e:	f7ff fe57 	bl	800acd0 <m2m_wifi_connect_prepare_msg>
 800b022:	4603      	mov	r3, r0
 800b024:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                                               M2M_WIFI_SEC_802_1X,
                                               u16AuthSize,
                                               pstrNetworkId,
                                               &strConnHdr);

            if(ret == M2M_SUCCESS)
 800b028:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f040 8094 	bne.w	800b15a <m2m_wifi_connect_1x_mschap2+0x1c2>
            {
                tstrM2mWifi1xHdr    *pstr1xHdr = (tstrM2mWifi1xHdr *)malloc(u16AuthSize);
 800b032:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b036:	4618      	mov	r0, r3
 800b038:	f002 fea0 	bl	800dd7c <malloc>
 800b03c:	4603      	mov	r3, r0
 800b03e:	643b      	str	r3, [r7, #64]	@ 0x40
                if(pstr1xHdr != NULL)
 800b040:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b042:	2b00      	cmp	r3, #0
 800b044:	f000 8086 	beq.w	800b154 <m2m_wifi_connect_1x_mschap2+0x1bc>
                {
                    uint8   *pu8AuthPtr = pstr1xHdr->au81xAuthDetails;
 800b048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b04a:	332c      	adds	r3, #44	@ 0x2c
 800b04c:	64bb      	str	r3, [r7, #72]	@ 0x48
                    m2m_memset((uint8 *)pstr1xHdr, 0, u16AuthSize);
 800b04e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b052:	461a      	mov	r2, r3
 800b054:	2100      	movs	r1, #0
 800b056:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800b058:	f7fe fd2e 	bl	8009ab8 <m2m_memset>

                    pstr1xHdr->u8Flags = M2M_802_1X_MSCHAP2_FLAG;
 800b05c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b05e:	2201      	movs	r2, #1
 800b060:	701a      	strb	r2, [r3, #0]
                    if(pstrAuth1xMschap2->bUnencryptedUserName == true)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	7c9b      	ldrb	r3, [r3, #18]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d006      	beq.n	800b078 <m2m_wifi_connect_1x_mschap2+0xe0>
                        pstr1xHdr->u8Flags |= M2M_802_1X_UNENCRYPTED_USERNAME_FLAG;
 800b06a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b072:	b2da      	uxtb	r2, r3
 800b074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b076:	701a      	strb	r2, [r3, #0]
                    if(pstrAuth1xMschap2->bPrependDomain == true)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	7cdb      	ldrb	r3, [r3, #19]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d006      	beq.n	800b08e <m2m_wifi_connect_1x_mschap2+0xf6>
                        pstr1xHdr->u8Flags |= M2M_802_1X_PREPEND_DOMAIN_FLAG;
 800b080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b088:	b2da      	uxtb	r2, r3
 800b08a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b08c:	701a      	strb	r2, [r3, #0]

                    pstr1xHdr->u8HdrLength = sizeof(tstrM2mWifi1xHdr);
 800b08e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b090:	222c      	movs	r2, #44	@ 0x2c
 800b092:	70da      	strb	r2, [r3, #3]
                    pstr1xHdr->u32TlsHsFlags = gu321xTlsHsFlags;
 800b094:	4b34      	ldr	r3, [pc, #208]	@ (800b168 <m2m_wifi_connect_1x_mschap2+0x1d0>)
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b09a:	625a      	str	r2, [r3, #36]	@ 0x24
                    m2m_memcpy(pstr1xHdr->au8TlsSpecificRootNameSha1, gau81xRootSha1, sizeof(gau81xRootSha1));
 800b09c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b09e:	330c      	adds	r3, #12
 800b0a0:	2214      	movs	r2, #20
 800b0a2:	4932      	ldr	r1, [pc, #200]	@ (800b16c <m2m_wifi_connect_1x_mschap2+0x1d4>)
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7fe fce7 	bl	8009a78 <m2m_memcpy>

                    pstr1xHdr->u8DomainLength = 0;
 800b0aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	705a      	strb	r2, [r3, #1]
                    if(pstrAuth1xMschap2->pu8Domain != NULL)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d012      	beq.n	800b0de <m2m_wifi_connect_1x_mschap2+0x146>
                    {
                        pstr1xHdr->u8DomainLength = (uint8)(pstrAuth1xMschap2->u16DomainLen);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	899b      	ldrh	r3, [r3, #12]
 800b0bc:	b2da      	uxtb	r2, r3
 800b0be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0c0:	705a      	strb	r2, [r3, #1]
                        m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8Domain, pstr1xHdr->u8DomainLength);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6819      	ldr	r1, [r3, #0]
 800b0c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0c8:	785b      	ldrb	r3, [r3, #1]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800b0ce:	f7fe fcd3 	bl	8009a78 <m2m_memcpy>
                        pu8AuthPtr += pstr1xHdr->u8DomainLength;
 800b0d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0d4:	785b      	ldrb	r3, [r3, #1]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0da:	4413      	add	r3, r2
 800b0dc:	64bb      	str	r3, [r7, #72]	@ 0x48
                    }

                    pstr1xHdr->u8UserNameLength = (pstrAuth1xMschap2->u16UserNameLen);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	89db      	ldrh	r3, [r3, #14]
 800b0e2:	b2da      	uxtb	r2, r3
 800b0e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0e6:	709a      	strb	r2, [r3, #2]
                    m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8UserName, pstr1xHdr->u8UserNameLength);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6859      	ldr	r1, [r3, #4]
 800b0ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0ee:	789b      	ldrb	r3, [r3, #2]
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800b0f4:	f7fe fcc0 	bl	8009a78 <m2m_memcpy>
                    pu8AuthPtr += pstr1xHdr->u8UserNameLength;
 800b0f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0fa:	789b      	ldrb	r3, [r3, #2]
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b100:	4413      	add	r3, r2
 800b102:	64bb      	str	r3, [r7, #72]	@ 0x48

                    pstr1xHdr->u16PrivateKeyOffset = pu8AuthPtr - pstr1xHdr->au81xAuthDetails;
 800b104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b106:	332c      	adds	r3, #44	@ 0x2c
 800b108:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b110:	809a      	strh	r2, [r3, #4]
                    pstr1xHdr->u16PrivateKeyLength = pstrAuth1xMschap2->u16PasswordLen;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	8a1a      	ldrh	r2, [r3, #16]
 800b116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b118:	80da      	strh	r2, [r3, #6]
                    m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8Password, pstr1xHdr->u16PrivateKeyLength);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6899      	ldr	r1, [r3, #8]
 800b11e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b120:	88db      	ldrh	r3, [r3, #6]
 800b122:	461a      	mov	r2, r3
 800b124:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800b126:	f7fe fca7 	bl	8009a78 <m2m_memcpy>

                    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
 800b12a:	f107 0210 	add.w	r2, r7, #16
 800b12e:	2330      	movs	r3, #48	@ 0x30
 800b130:	9302      	str	r3, [sp, #8]
 800b132:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b136:	9301      	str	r3, [sp, #4]
 800b138:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b13a:	9300      	str	r3, [sp, #0]
 800b13c:	2330      	movs	r3, #48	@ 0x30
 800b13e:	21bb      	movs	r1, #187	@ 0xbb
 800b140:	2001      	movs	r0, #1
 800b142:	f7fe fe2b 	bl	8009d9c <hif_send>
 800b146:	4603      	mov	r3, r0
 800b148:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                                   (uint8 *)&strConnHdr, sizeof(tstrM2mWifiConnHdr),
                                   (uint8 *)pstr1xHdr, u16AuthSize,
                                   sizeof(tstrM2mWifiConnHdr));
                    free(pstr1xHdr);
 800b14c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800b14e:	f002 fe1d 	bl	800dd8c <free>
 800b152:	e002      	b.n	800b15a <m2m_wifi_connect_1x_mschap2+0x1c2>
                }
                else
                    ret = M2M_ERR_MEM_ALLOC;
 800b154:	23fd      	movs	r3, #253	@ 0xfd
 800b156:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            }
        }
    }
    return ret;
 800b15a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3750      	adds	r7, #80	@ 0x50
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	20000014 	.word	0x20000014
 800b16c:	20000bfc 	.word	0x20000bfc

0800b170 <m2m_wifi_connect>:
    }
    return ret;
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af02      	add	r7, sp, #8
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	607b      	str	r3, [r7, #4]
 800b17a:	460b      	mov	r3, r1
 800b17c:	72fb      	strb	r3, [r7, #11]
 800b17e:	4613      	mov	r3, r2
 800b180:	72bb      	strb	r3, [r7, #10]
    return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch, 0);
 800b182:	7aba      	ldrb	r2, [r7, #10]
 800b184:	7af9      	ldrb	r1, [r7, #11]
 800b186:	2300      	movs	r3, #0
 800b188:	9301      	str	r3, [sp, #4]
 800b18a:	8b3b      	ldrh	r3, [r7, #24]
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f000 f805 	bl	800b1a0 <m2m_wifi_connect_sc>
 800b196:	4603      	mov	r3, r0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <m2m_wifi_connect_sc>:

sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b096      	sub	sp, #88	@ 0x58
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	607b      	str	r3, [r7, #4]
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	72fb      	strb	r3, [r7, #11]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	72bb      	strb	r3, [r7, #10]
    sint8               s8Ret              = M2M_ERR_INVALID_ARG;
 800b1b2:	23f1      	movs	r3, #241	@ 0xf1
 800b1b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    tstrNetworkId       strNetworkId       = {NULL, (uint8 *)pcSsid, u8SsidLen, (tenuM2mScanCh)u16Ch};
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1c0:	7afb      	ldrb	r3, [r7, #11]
 800b1c2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800b1c6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    tenuCredStoreOption enuCredStoreOption = u8NoSaveCred ? WIFI_CRED_DONTSAVE : WIFI_CRED_SAVE_ENCRYPTED;
 800b1d0:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d001      	beq.n	800b1dc <m2m_wifi_connect_sc+0x3c>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	e000      	b.n	800b1de <m2m_wifi_connect_sc+0x3e>
 800b1dc:	2302      	movs	r3, #2
 800b1de:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    /* This API does not support SSIDs which contain '\0'. If there is a '\0' character within the
     * first u8SsidLen characters, then assume that the input u8SsidLen was incorrect - set length
     * to strlen(pcSsid) and continue. This is to avoid a change from the behaviour of previously
     * released drivers. */
    if(u8SsidLen < M2M_MAX_SSID_LEN)
 800b1e2:	7afb      	ldrb	r3, [r7, #11]
 800b1e4:	2b20      	cmp	r3, #32
 800b1e6:	d80e      	bhi.n	800b206 <m2m_wifi_connect_sc+0x66>
        while(u8SsidLen--)
 800b1e8:	e008      	b.n	800b1fc <m2m_wifi_connect_sc+0x5c>
            if(strNetworkId.pu8Ssid[u8SsidLen] == 0)
 800b1ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b1ec:	7afb      	ldrb	r3, [r7, #11]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d102      	bne.n	800b1fc <m2m_wifi_connect_sc+0x5c>
                strNetworkId.u8SsidLen = u8SsidLen;
 800b1f6:	7afb      	ldrb	r3, [r7, #11]
 800b1f8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        while(u8SsidLen--)
 800b1fc:	7afb      	ldrb	r3, [r7, #11]
 800b1fe:	1e5a      	subs	r2, r3, #1
 800b200:	72fa      	strb	r2, [r7, #11]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1f1      	bne.n	800b1ea <m2m_wifi_connect_sc+0x4a>

    switch((tenuM2mSecType)u8SecType)
 800b206:	7abb      	ldrb	r3, [r7, #10]
 800b208:	3b01      	subs	r3, #1
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	f200 808e 	bhi.w	800b32c <m2m_wifi_connect_sc+0x18c>
 800b210:	a201      	add	r2, pc, #4	@ (adr r2, 800b218 <m2m_wifi_connect_sc+0x78>)
 800b212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b216:	bf00      	nop
 800b218:	0800b229 	.word	0x0800b229
 800b21c:	0800b241 	.word	0x0800b241
 800b220:	0800b297 	.word	0x0800b297
 800b224:	0800b2d5 	.word	0x0800b2d5
    {
    case M2M_WIFI_SEC_OPEN:
        s8Ret = m2m_wifi_connect_open(enuCredStoreOption, &strNetworkId);
 800b228:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800b22c:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800b230:	4611      	mov	r1, r2
 800b232:	4618      	mov	r0, r3
 800b234:	f7ff fde0 	bl	800adf8 <m2m_wifi_connect_open>
 800b238:	4603      	mov	r3, r0
 800b23a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        break;
 800b23e:	e07c      	b.n	800b33a <m2m_wifi_connect_sc+0x19a>
    case M2M_WIFI_SEC_WPA_PSK:
        if(pvAuthInfo != NULL)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d074      	beq.n	800b330 <m2m_wifi_connect_sc+0x190>
        {
            tstrAuthPsk strAuthPsk = {NULL, NULL, 0};
 800b246:	2300      	movs	r3, #0
 800b248:	633b      	str	r3, [r7, #48]	@ 0x30
 800b24a:	2300      	movs	r3, #0
 800b24c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b24e:	2300      	movs	r3, #0
 800b250:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            uint16      len        = m2m_strlen((uint8 *)pvAuthInfo);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7fe fc4c 	bl	8009af2 <m2m_strlen>
 800b25a:	4603      	mov	r3, r0
 800b25c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

            if(len == M2M_MAX_PSK_LEN-1)
 800b260:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b264:	2b40      	cmp	r3, #64	@ 0x40
 800b266:	d102      	bne.n	800b26e <m2m_wifi_connect_sc+0xce>
            {
                strAuthPsk.pu8Psk = (uint8 *)pvAuthInfo;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b26c:	e006      	b.n	800b27c <m2m_wifi_connect_sc+0xdc>
            }
            else
            {
                strAuthPsk.pu8Passphrase   = (uint8 *)pvAuthInfo;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	637b      	str	r3, [r7, #52]	@ 0x34
                strAuthPsk.u8PassphraseLen = len;
 800b272:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b276:	b2db      	uxtb	r3, r3
 800b278:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            }
            s8Ret = m2m_wifi_connect_psk(enuCredStoreOption, &strNetworkId, &strAuthPsk);
 800b27c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800b280:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800b284:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800b288:	4618      	mov	r0, r3
 800b28a:	f7ff fdf3 	bl	800ae74 <m2m_wifi_connect_psk>
 800b28e:	4603      	mov	r3, r0
 800b290:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        }
        break;
 800b294:	e04c      	b.n	800b330 <m2m_wifi_connect_sc+0x190>
    case M2M_WIFI_SEC_WEP:
        if(pvAuthInfo != NULL)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d04b      	beq.n	800b334 <m2m_wifi_connect_sc+0x194>
        {
            tstrM2mWifiWepParams    *pstrWepParams = (tstrM2mWifiWepParams *)pvAuthInfo;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	64fb      	str	r3, [r7, #76]	@ 0x4c
            tstrAuthWep             strAuthWep     = {pstrWepParams->au8WepKey, pstrWepParams->u8KeySz-1, pstrWepParams->u8KeyIndx};
 800b2a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2a2:	3302      	adds	r3, #2
 800b2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2a8:	785b      	ldrb	r3, [r3, #1]
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800b2b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

            s8Ret = m2m_wifi_connect_wep(enuCredStoreOption, &strNetworkId, &strAuthWep);
 800b2ba:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800b2be:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800b2c2:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7ff fdc5 	bl	800ae56 <m2m_wifi_connect_wep>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        }
        break;
 800b2d2:	e02f      	b.n	800b334 <m2m_wifi_connect_sc+0x194>
    case M2M_WIFI_SEC_802_1X:
        if(pvAuthInfo != NULL)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d02e      	beq.n	800b338 <m2m_wifi_connect_sc+0x198>
        {
            tstr1xAuthCredentials   *pstr1xParams    = (tstr1xAuthCredentials *)pvAuthInfo;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	653b      	str	r3, [r7, #80]	@ 0x50
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800b2de:	f107 0314 	add.w	r3, r7, #20
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	601a      	str	r2, [r3, #0]
 800b2e6:	605a      	str	r2, [r3, #4]
 800b2e8:	609a      	str	r2, [r3, #8]
 800b2ea:	60da      	str	r2, [r3, #12]
 800b2ec:	611a      	str	r2, [r3, #16]
                                                        pstr1xParams->au8UserName,
 800b2ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800b2f0:	61bb      	str	r3, [r7, #24]
                                                        pstr1xParams->au8Passwd,
 800b2f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2f4:	3315      	adds	r3, #21
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800b2f6:	61fb      	str	r3, [r7, #28]
                                                        0,
                                                        m2m_strlen(pstr1xParams->au8UserName),
 800b2f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fe fbf9 	bl	8009af2 <m2m_strlen>
 800b300:	4603      	mov	r3, r0
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800b302:	847b      	strh	r3, [r7, #34]	@ 0x22
                                                        m2m_strlen(pstr1xParams->au8Passwd),
 800b304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b306:	3315      	adds	r3, #21
 800b308:	4618      	mov	r0, r3
 800b30a:	f7fe fbf2 	bl	8009af2 <m2m_strlen>
 800b30e:	4603      	mov	r3, r0
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800b310:	84bb      	strh	r3, [r7, #36]	@ 0x24
                                                        false};

            s8Ret = m2m_wifi_connect_1x_mschap2(enuCredStoreOption, &strNetworkId, &strAuth1xMschap2);
 800b312:	f107 0214 	add.w	r2, r7, #20
 800b316:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800b31a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800b31e:	4618      	mov	r0, r3
 800b320:	f7ff fe3a 	bl	800af98 <m2m_wifi_connect_1x_mschap2>
 800b324:	4603      	mov	r3, r0
 800b326:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        }
        break;
 800b32a:	e005      	b.n	800b338 <m2m_wifi_connect_sc+0x198>
    default:
        break;
 800b32c:	bf00      	nop
 800b32e:	e004      	b.n	800b33a <m2m_wifi_connect_sc+0x19a>
        break;
 800b330:	bf00      	nop
 800b332:	e002      	b.n	800b33a <m2m_wifi_connect_sc+0x19a>
        break;
 800b334:	bf00      	nop
 800b336:	e000      	b.n	800b33a <m2m_wifi_connect_sc+0x19a>
        break;
 800b338:	bf00      	nop
    }
    return s8Ret;
 800b33a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3758      	adds	r7, #88	@ 0x58
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop

0800b348 <m2m_wifi_request_dhcp_client>:
    return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
                    (uint8 *) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0, 0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
 800b348:	b480      	push	{r7}
 800b34a:	af00      	add	r7, sp, #0
    /*legacy API should be removed */
    return 0;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <chip_apply_conf>:

#define TIMEOUT						(20000) // ITCO: replace (0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b086      	sub	sp, #24
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800b360:	2300      	movs	r3, #0
 800b362:	75fb      	strb	r3, [r7, #23]
	uint32 val32 = u32Conf;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b36e:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
 800b370:	6939      	ldr	r1, [r7, #16]
 800b372:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 800b376:	f000 fb9b 	bl	800bab0 <nm_write_reg>
		if(val32 != 0) {
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d013      	beq.n	800b3a8 <chip_apply_conf+0x50>
			uint32 reg = 0;
 800b380:	2300      	movs	r3, #0
 800b382:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
 800b384:	f107 030c 	add.w	r3, r7, #12
 800b388:	4619      	mov	r1, r3
 800b38a:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 800b38e:	f000 fb81 	bl	800ba94 <nm_read_reg_with_ret>
 800b392:	4603      	mov	r3, r0
 800b394:	75fb      	strb	r3, [r7, #23]
			if(ret == M2M_SUCCESS) {
 800b396:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1e8      	bne.n	800b370 <chip_apply_conf+0x18>
				if(reg == val32)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	693a      	ldr	r2, [r7, #16]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d002      	beq.n	800b3ac <chip_apply_conf+0x54>
		nm_write_reg(rNMI_GP_REG_1, val32);
 800b3a6:	e7e3      	b.n	800b370 <chip_apply_conf+0x18>
					break;
			}
		} else {
			break;
 800b3a8:	bf00      	nop
 800b3aa:	e000      	b.n	800b3ae <chip_apply_conf+0x56>
					break;
 800b3ac:	bf00      	nop
		}
	} while(1);

	return M2M_SUCCESS;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3718      	adds	r7, #24
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	71fb      	strb	r3, [r7, #7]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
 800b3c6:	463b      	mov	r3, r7
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	f241 4008 	movw	r0, #5128	@ 0x1408
 800b3ce:	f000 fb61 	bl	800ba94 <nm_read_reg_with_ret>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800b3d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d12b      	bne.n	800b436 <enable_interrupts+0x7e>

	reg |= ((uint32) 1 << 8);
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3e4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	f241 4008 	movw	r0, #5128	@ 0x1408
 800b3ee:	f000 fb5f 	bl	800bab0 <nm_write_reg>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800b3f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d11d      	bne.n	800b43a <enable_interrupts+0x82>

	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
 800b3fe:	463b      	mov	r3, r7
 800b400:	4619      	mov	r1, r3
 800b402:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800b406:	f000 fb45 	bl	800ba94 <nm_read_reg_with_ret>
 800b40a:	4603      	mov	r3, r0
 800b40c:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800b40e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d113      	bne.n	800b43e <enable_interrupts+0x86>

	reg |= ((uint32) 1 << 16);
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b41c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	4619      	mov	r1, r3
 800b422:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800b426:	f000 fb43 	bl	800bab0 <nm_write_reg>
 800b42a:	4603      	mov	r3, r0
 800b42c:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800b42e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b432:	2b00      	cmp	r3, #0
ERR1:
 800b434:	e004      	b.n	800b440 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800b436:	bf00      	nop
 800b438:	e002      	b.n	800b440 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800b43a:	bf00      	nop
 800b43c:	e000      	b.n	800b440 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800b43e:	bf00      	nop
	return ret;
 800b440:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3708      	adds	r7, #8
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
 800b452:	4b31      	ldr	r3, [pc, #196]	@ (800b518 <nmi_get_chipid+0xcc>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d157      	bne.n	800b50a <nmi_get_chipid+0xbe>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
 800b45a:	492f      	ldr	r1, [pc, #188]	@ (800b518 <nmi_get_chipid+0xcc>)
 800b45c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800b460:	f000 fb18 	bl	800ba94 <nm_read_reg_with_ret>
 800b464:	4603      	mov	r3, r0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d004      	beq.n	800b474 <nmi_get_chipid+0x28>
			chipid = 0;
 800b46a:	4b2b      	ldr	r3, [pc, #172]	@ (800b518 <nmi_get_chipid+0xcc>)
 800b46c:	2200      	movs	r2, #0
 800b46e:	601a      	str	r2, [r3, #0]
			return 0;
 800b470:	2300      	movs	r3, #0
 800b472:	e04c      	b.n	800b50e <nmi_get_chipid+0xc2>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 800b474:	1d3b      	adds	r3, r7, #4
 800b476:	4619      	mov	r1, r3
 800b478:	f241 30f4 	movw	r0, #5108	@ 0x13f4
 800b47c:	f000 fb0a 	bl	800ba94 <nm_read_reg_with_ret>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d004      	beq.n	800b490 <nmi_get_chipid+0x44>
			chipid = 0;
 800b486:	4b24      	ldr	r3, [pc, #144]	@ (800b518 <nmi_get_chipid+0xcc>)
 800b488:	2200      	movs	r2, #0
 800b48a:	601a      	str	r2, [r3, #0]
			return 0;
 800b48c:	2300      	movs	r3, #0
 800b48e:	e03e      	b.n	800b50e <nmi_get_chipid+0xc2>
		}

		if (chipid == 0x1002a0)  {
 800b490:	4b21      	ldr	r3, [pc, #132]	@ (800b518 <nmi_get_chipid+0xcc>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a21      	ldr	r2, [pc, #132]	@ (800b51c <nmi_get_chipid+0xd0>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d106      	bne.n	800b4a8 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d028      	beq.n	800b4f2 <nmi_get_chipid+0xa6>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
 800b4a0:	4b1d      	ldr	r3, [pc, #116]	@ (800b518 <nmi_get_chipid+0xcc>)
 800b4a2:	4a1f      	ldr	r2, [pc, #124]	@ (800b520 <nmi_get_chipid+0xd4>)
 800b4a4:	601a      	str	r2, [r3, #0]
 800b4a6:	e024      	b.n	800b4f2 <nmi_get_chipid+0xa6>
			}
		} else if(chipid == 0x1002b0) {
 800b4a8:	4b1b      	ldr	r3, [pc, #108]	@ (800b518 <nmi_get_chipid+0xcc>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a1d      	ldr	r2, [pc, #116]	@ (800b524 <nmi_get_chipid+0xd8>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d10d      	bne.n	800b4ce <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b03      	cmp	r3, #3
 800b4b6:	d01c      	beq.n	800b4f2 <nmi_get_chipid+0xa6>
			} else if(rfrevid == 4) { /* 1002B1 */
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b04      	cmp	r3, #4
 800b4bc:	d103      	bne.n	800b4c6 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
 800b4be:	4b16      	ldr	r3, [pc, #88]	@ (800b518 <nmi_get_chipid+0xcc>)
 800b4c0:	4a19      	ldr	r2, [pc, #100]	@ (800b528 <nmi_get_chipid+0xdc>)
 800b4c2:	601a      	str	r2, [r3, #0]
 800b4c4:	e015      	b.n	800b4f2 <nmi_get_chipid+0xa6>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
 800b4c6:	4b14      	ldr	r3, [pc, #80]	@ (800b518 <nmi_get_chipid+0xcc>)
 800b4c8:	4a18      	ldr	r2, [pc, #96]	@ (800b52c <nmi_get_chipid+0xe0>)
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	e011      	b.n	800b4f2 <nmi_get_chipid+0xa6>
			}
		}else if(chipid == 0x1000F0) {
 800b4ce:	4b12      	ldr	r3, [pc, #72]	@ (800b518 <nmi_get_chipid+0xcc>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a17      	ldr	r2, [pc, #92]	@ (800b530 <nmi_get_chipid+0xe4>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d10c      	bne.n	800b4f2 <nmi_get_chipid+0xa6>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
 800b4d8:	490f      	ldr	r1, [pc, #60]	@ (800b518 <nmi_get_chipid+0xcc>)
 800b4da:	f44f 106c 	mov.w	r0, #3866624	@ 0x3b0000
 800b4de:	f000 fad9 	bl	800ba94 <nm_read_reg_with_ret>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d004      	beq.n	800b4f2 <nmi_get_chipid+0xa6>
			chipid = 0;
 800b4e8:	4b0b      	ldr	r3, [pc, #44]	@ (800b518 <nmi_get_chipid+0xcc>)
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	601a      	str	r2, [r3, #0]
			return 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	e00d      	b.n	800b50e <nmi_get_chipid+0xc2>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
 800b4f2:	4b09      	ldr	r3, [pc, #36]	@ (800b518 <nmi_get_chipid+0xcc>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800b4fa:	4a07      	ldr	r2, [pc, #28]	@ (800b518 <nmi_get_chipid+0xcc>)
 800b4fc:	6013      	str	r3, [r2, #0]
		chipid |= 0x050000;
 800b4fe:	4b06      	ldr	r3, [pc, #24]	@ (800b518 <nmi_get_chipid+0xcc>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800b506:	4a04      	ldr	r2, [pc, #16]	@ (800b518 <nmi_get_chipid+0xcc>)
 800b508:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
 800b50a:	4b03      	ldr	r3, [pc, #12]	@ (800b518 <nmi_get_chipid+0xcc>)
 800b50c:	681b      	ldr	r3, [r3, #0]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3708      	adds	r7, #8
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	20000c10 	.word	0x20000c10
 800b51c:	001002a0 	.word	0x001002a0
 800b520:	001002a1 	.word	0x001002a1
 800b524:	001002b0 	.word	0x001002b0
 800b528:	001002b1 	.word	0x001002b1
 800b52c:	001002b2 	.word	0x001002b2
 800b530:	001000f0 	.word	0x001000f0

0800b534 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800b53a:	2300      	movs	r3, #0
 800b53c:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800b53e:	463b      	mov	r3, r7
 800b540:	4619      	mov	r1, r3
 800b542:	2010      	movs	r0, #16
 800b544:	f000 faa6 	bl	800ba94 <nm_read_reg_with_ret>
 800b548:	4603      	mov	r3, r0
 800b54a:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS) goto ERR1;
 800b54c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d144      	bne.n	800b5de <chip_sleep+0xaa>
		if((reg & NBIT0) == 0) break;
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	f003 0301 	and.w	r3, r3, #1
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d000      	beq.n	800b560 <chip_sleep+0x2c>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800b55e:	e7ee      	b.n	800b53e <chip_sleep+0xa>
		if((reg & NBIT0) == 0) break;
 800b560:	bf00      	nop
	}

	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800b562:	463b      	mov	r3, r7
 800b564:	4619      	mov	r1, r3
 800b566:	2001      	movs	r0, #1
 800b568:	f000 fa94 	bl	800ba94 <nm_read_reg_with_ret>
 800b56c:	4603      	mov	r3, r0
 800b56e:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800b570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d134      	bne.n	800b5e2 <chip_sleep+0xae>
	if(reg & NBIT1)
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	f003 0302 	and.w	r3, r3, #2
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00e      	beq.n	800b5a0 <chip_sleep+0x6c>
	{
		reg &=~NBIT1;
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	f023 0302 	bic.w	r3, r3, #2
 800b588:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	4619      	mov	r1, r3
 800b58e:	2001      	movs	r0, #1
 800b590:	f000 fa8e 	bl	800bab0 <nm_write_reg>
 800b594:	4603      	mov	r3, r0
 800b596:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800b598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d122      	bne.n	800b5e6 <chip_sleep+0xb2>
	}

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800b5a0:	463b      	mov	r3, r7
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	200b      	movs	r0, #11
 800b5a6:	f000 fa75 	bl	800ba94 <nm_read_reg_with_ret>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800b5ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d119      	bne.n	800b5ea <chip_sleep+0xb6>
	if(reg & NBIT0)
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	f003 0301 	and.w	r3, r3, #1
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d016      	beq.n	800b5ee <chip_sleep+0xba>
	{
		reg &= ~NBIT0;
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	f023 0301 	bic.w	r3, r3, #1
 800b5c6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	200b      	movs	r0, #11
 800b5ce:	f000 fa6f 	bl	800bab0 <nm_write_reg>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800b5d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5da:	2b00      	cmp	r3, #0
	}

ERR1:
 800b5dc:	e007      	b.n	800b5ee <chip_sleep+0xba>
		if(ret != M2M_SUCCESS) goto ERR1;
 800b5de:	bf00      	nop
 800b5e0:	e006      	b.n	800b5f0 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800b5e2:	bf00      	nop
 800b5e4:	e004      	b.n	800b5f0 <chip_sleep+0xbc>
		if(ret != M2M_SUCCESS)goto ERR1;
 800b5e6:	bf00      	nop
 800b5e8:	e002      	b.n	800b5f0 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800b5ea:	bf00      	nop
 800b5ec:	e000      	b.n	800b5f0 <chip_sleep+0xbc>
ERR1:
 800b5ee:	bf00      	nop
	return ret;
 800b5f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3708      	adds	r7, #8
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <chip_wake>:
sint8 chip_wake(void)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800b602:	2300      	movs	r3, #0
 800b604:	73fb      	strb	r3, [r7, #15]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
 800b606:	2300      	movs	r3, #0
 800b608:	607b      	str	r3, [r7, #4]
 800b60a:	2300      	movs	r3, #0
 800b60c:	603b      	str	r3, [r7, #0]
 800b60e:	2300      	movs	r3, #0
 800b610:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800b612:	1d3b      	adds	r3, r7, #4
 800b614:	4619      	mov	r1, r3
 800b616:	200b      	movs	r0, #11
 800b618:	f000 fa3c 	bl	800ba94 <nm_read_reg_with_ret>
 800b61c:	4603      	mov	r3, r0
 800b61e:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800b620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d16d      	bne.n	800b704 <chip_wake+0x108>

	if(!(reg & NBIT0))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f003 0301 	and.w	r3, r3, #1
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10c      	bne.n	800b64c <chip_wake+0x50>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f043 0301 	orr.w	r3, r3, #1
 800b638:	4619      	mov	r1, r3
 800b63a:	200b      	movs	r0, #11
 800b63c:	f000 fa38 	bl	800bab0 <nm_write_reg>
 800b640:	4603      	mov	r3, r0
 800b642:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800b644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d15d      	bne.n	800b708 <chip_wake+0x10c>
	}

	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800b64c:	1d3b      	adds	r3, r7, #4
 800b64e:	4619      	mov	r1, r3
 800b650:	2001      	movs	r0, #1
 800b652:	f000 fa1f 	bl	800ba94 <nm_read_reg_with_ret>
 800b656:	4603      	mov	r3, r0
 800b658:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800b65a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d154      	bne.n	800b70c <chip_wake+0x110>
	/* Set bit 1 */
	if(!(reg & NBIT1))
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f003 0302 	and.w	r3, r3, #2
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d000      	beq.n	800b66e <chip_wake+0x72>
 800b66c:	e00d      	b.n	800b68a <chip_wake+0x8e>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f043 0302 	orr.w	r3, r3, #2
 800b674:	4619      	mov	r1, r3
 800b676:	2001      	movs	r0, #1
 800b678:	f000 fa1a 	bl	800bab0 <nm_write_reg>
 800b67c:	4603      	mov	r3, r0
 800b67e:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 800b680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d000      	beq.n	800b68a <chip_wake+0x8e>
 800b688:	e041      	b.n	800b70e <chip_wake+0x112>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 800b68a:	463b      	mov	r3, r7
 800b68c:	4619      	mov	r1, r3
 800b68e:	200f      	movs	r0, #15
 800b690:	f000 fa00 	bl	800ba94 <nm_read_reg_with_ret>
 800b694:	4603      	mov	r3, r0
 800b696:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) {
 800b698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d010      	beq.n	800b6c2 <chip_wake+0xc6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
 800b6a0:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 800b6a4:	491d      	ldr	r1, [pc, #116]	@ (800b71c <chip_wake+0x120>)
 800b6a6:	481e      	ldr	r0, [pc, #120]	@ (800b720 <chip_wake+0x124>)
 800b6a8:	f002 fce8 	bl	800e07c <iprintf>
 800b6ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6b0:	683a      	ldr	r2, [r7, #0]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	481b      	ldr	r0, [pc, #108]	@ (800b724 <chip_wake+0x128>)
 800b6b6:	f002 fce1 	bl	800e07c <iprintf>
 800b6ba:	200d      	movs	r0, #13
 800b6bc:	f002 fcf0 	bl	800e0a0 <putchar>
			goto _WAKE_EXIT;
 800b6c0:	e025      	b.n	800b70e <chip_wake+0x112>
		}
		if(clk_status_reg & NBIT2) {
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	f003 0304 	and.w	r3, r3, #4
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d117      	bne.n	800b6fc <chip_wake+0x100>
			break;
		}
		nm_bsp_sleep(2);
 800b6cc:	2002      	movs	r0, #2
 800b6ce:	f7fe f8a7 	bl	8009820 <nm_bsp_sleep>
		trials++;
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	2b04      	cmp	r3, #4
 800b6dc:	d9d5      	bls.n	800b68a <chip_wake+0x8e>
		{
			M2M_ERR("Failed to wakup the chip\n");
 800b6de:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800b6e2:	490e      	ldr	r1, [pc, #56]	@ (800b71c <chip_wake+0x120>)
 800b6e4:	480e      	ldr	r0, [pc, #56]	@ (800b720 <chip_wake+0x124>)
 800b6e6:	f002 fcc9 	bl	800e07c <iprintf>
 800b6ea:	480f      	ldr	r0, [pc, #60]	@ (800b728 <chip_wake+0x12c>)
 800b6ec:	f002 fd36 	bl	800e15c <puts>
 800b6f0:	200d      	movs	r0, #13
 800b6f2:	f002 fcd5 	bl	800e0a0 <putchar>
			ret = M2M_ERR_TIME_OUT;
 800b6f6:	23fc      	movs	r3, #252	@ 0xfc
 800b6f8:	73fb      	strb	r3, [r7, #15]
			goto _WAKE_EXIT;
 800b6fa:	e008      	b.n	800b70e <chip_wake+0x112>
			break;
 800b6fc:	bf00      	nop
		}
	}while(1);

	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
 800b6fe:	f000 f9b1 	bl	800ba64 <nm_bus_reset>
 800b702:	e004      	b.n	800b70e <chip_wake+0x112>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800b704:	bf00      	nop
 800b706:	e002      	b.n	800b70e <chip_wake+0x112>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800b708:	bf00      	nop
 800b70a:	e000      	b.n	800b70e <chip_wake+0x112>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800b70c:	bf00      	nop

_WAKE_EXIT:
	return ret;
 800b70e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b712:	4618      	mov	r0, r3
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	08010150 	.word	0x08010150
 800b720:	0800f6e4 	.word	0x0800f6e4
 800b724:	0800f6f8 	.word	0x0800f6f8
 800b728:	0800f710 	.word	0x0800f710

0800b72c <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b088      	sub	sp, #32
 800b730:	af00      	add	r7, sp, #0
 800b732:	4603      	mov	r3, r0
 800b734:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800b736:	2300      	movs	r3, #0
 800b738:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800b73a:	2300      	movs	r3, #0
 800b73c:	61bb      	str	r3, [r7, #24]
 800b73e:	2300      	movs	r3, #0
 800b740:	617b      	str	r3, [r7, #20]
	uint32 u32GpReg1 = 0;
 800b742:	2300      	movs	r3, #0
 800b744:	613b      	str	r3, [r7, #16]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
 800b746:	4b4a      	ldr	r3, [pc, #296]	@ (800b870 <wait_for_bootrom+0x144>)
 800b748:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
 800b74a:	2300      	movs	r3, #0
 800b74c:	61bb      	str	r3, [r7, #24]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800b74e:	f241 0014 	movw	r0, #4116	@ 0x1014
 800b752:	f000 f993 	bl	800ba7c <nm_read_reg>
 800b756:	61b8      	str	r0, [r7, #24]
		if (reg & 0x80000000) {
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	db03      	blt.n	800b766 <wait_for_bootrom+0x3a>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
 800b75e:	2001      	movs	r0, #1
 800b760:	f7fe f85e 	bl	8009820 <nm_bsp_sleep>
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800b764:	e7f3      	b.n	800b74e <wait_for_bootrom+0x22>
			break;
 800b766:	bf00      	nop
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
 800b768:	4842      	ldr	r0, [pc, #264]	@ (800b874 <wait_for_bootrom+0x148>)
 800b76a:	f000 f987 	bl	800ba7c <nm_read_reg>
 800b76e:	61b8      	str	r0, [r7, #24]
	reg &= 0x1;
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	f003 0301 	and.w	r3, r3, #1
 800b776:	61bb      	str	r3, [r7, #24]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d125      	bne.n	800b7ca <wait_for_bootrom+0x9e>
	{
		reg = 0;
 800b77e:	2300      	movs	r3, #0
 800b780:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
 800b782:	e01e      	b.n	800b7c2 <wait_for_bootrom+0x96>
		{
			nm_bsp_sleep(1);
 800b784:	2001      	movs	r0, #1
 800b786:	f7fe f84b 	bl	8009820 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
 800b78a:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 800b78e:	f000 f975 	bl	800ba7c <nm_read_reg>
 800b792:	61b8      	str	r0, [r7, #24]

			if(++cnt > (uint32)TIMEOUT)
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	3301      	adds	r3, #1
 800b798:	617b      	str	r3, [r7, #20]
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d90e      	bls.n	800b7c2 <wait_for_bootrom+0x96>
			{
				M2M_DBG("failed to load firmware from flash.\n");
 800b7a4:	f240 12b1 	movw	r2, #433	@ 0x1b1
 800b7a8:	4933      	ldr	r1, [pc, #204]	@ (800b878 <wait_for_bootrom+0x14c>)
 800b7aa:	4834      	ldr	r0, [pc, #208]	@ (800b87c <wait_for_bootrom+0x150>)
 800b7ac:	f002 fc66 	bl	800e07c <iprintf>
 800b7b0:	4833      	ldr	r0, [pc, #204]	@ (800b880 <wait_for_bootrom+0x154>)
 800b7b2:	f002 fcd3 	bl	800e15c <puts>
 800b7b6:	200d      	movs	r0, #13
 800b7b8:	f002 fc72 	bl	800e0a0 <putchar>
				ret = M2M_ERR_INIT;
 800b7bc:	23fb      	movs	r3, #251	@ 0xfb
 800b7be:	77fb      	strb	r3, [r7, #31]
				goto ERR2;
 800b7c0:	e04f      	b.n	800b862 <wait_for_bootrom+0x136>
		while(reg != M2M_FINISH_BOOT_ROM)
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	4a2f      	ldr	r2, [pc, #188]	@ (800b884 <wait_for_bootrom+0x158>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d1dc      	bne.n	800b784 <wait_for_bootrom+0x58>
			}
		}
	}

	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
 800b7ca:	79fb      	ldrb	r3, [r7, #7]
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d10a      	bne.n	800b7e6 <wait_for_bootrom+0xba>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800b7d0:	492d      	ldr	r1, [pc, #180]	@ (800b888 <wait_for_bootrom+0x15c>)
 800b7d2:	482e      	ldr	r0, [pc, #184]	@ (800b88c <wait_for_bootrom+0x160>)
 800b7d4:	f000 f96c 	bl	800bab0 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
 800b7d8:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 800b7dc:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b7e0:	f000 f966 	bl	800bab0 <nm_write_reg>
 800b7e4:	e01c      	b.n	800b820 <wait_for_bootrom+0xf4>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
 800b7e6:	79fb      	ldrb	r3, [r7, #7]
 800b7e8:	2b03      	cmp	r3, #3
 800b7ea:	d109      	bne.n	800b800 <wait_for_bootrom+0xd4>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800b7ec:	4926      	ldr	r1, [pc, #152]	@ (800b888 <wait_for_bootrom+0x15c>)
 800b7ee:	4827      	ldr	r0, [pc, #156]	@ (800b88c <wait_for_bootrom+0x160>)
 800b7f0:	f000 f95e 	bl	800bab0 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b7fa:	f000 f959 	bl	800bab0 <nm_write_reg>
 800b7fe:	e00f      	b.n	800b820 <wait_for_bootrom+0xf4>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
 800b800:	79fb      	ldrb	r3, [r7, #7]
 800b802:	2b04      	cmp	r3, #4
 800b804:	d107      	bne.n	800b816 <wait_for_bootrom+0xea>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
 800b806:	2380      	movs	r3, #128	@ 0x80
 800b808:	613b      	str	r3, [r7, #16]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800b80a:	68f9      	ldr	r1, [r7, #12]
 800b80c:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b810:	f000 f94e 	bl	800bab0 <nm_write_reg>
 800b814:	e004      	b.n	800b820 <wait_for_bootrom+0xf4>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800b816:	68f9      	ldr	r1, [r7, #12]
 800b818:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b81c:	f000 f948 	bl	800bab0 <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
 800b820:	f7ff fe14 	bl	800b44c <nmi_get_chipid>
 800b824:	4603      	mov	r3, r0
 800b826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b82a:	f5b3 7f68 	cmp.w	r3, #928	@ 0x3a0
 800b82e:	d306      	bcc.n	800b83e <wait_for_bootrom+0x112>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	f043 0302 	orr.w	r3, r3, #2
 800b836:	4618      	mov	r0, r3
 800b838:	f7ff fd8e 	bl	800b358 <chip_apply_conf>
 800b83c:	e002      	b.n	800b844 <wait_for_bootrom+0x118>
	} else {
		chip_apply_conf(u32GpReg1);
 800b83e:	6938      	ldr	r0, [r7, #16]
 800b840:	f7ff fd8a 	bl	800b358 <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
 800b844:	4812      	ldr	r0, [pc, #72]	@ (800b890 <wait_for_bootrom+0x164>)
 800b846:	f002 fc19 	bl	800e07c <iprintf>
 800b84a:	68f9      	ldr	r1, [r7, #12]
 800b84c:	4811      	ldr	r0, [pc, #68]	@ (800b894 <wait_for_bootrom+0x168>)
 800b84e:	f002 fc15 	bl	800e07c <iprintf>
 800b852:	200d      	movs	r0, #13
 800b854:	f002 fc24 	bl	800e0a0 <putchar>

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
 800b858:	490f      	ldr	r1, [pc, #60]	@ (800b898 <wait_for_bootrom+0x16c>)
 800b85a:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 800b85e:	f000 f927 	bl	800bab0 <nm_write_reg>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
 800b862:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3720      	adds	r7, #32
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	13771377 	.word	0x13771377
 800b874:	000207bc 	.word	0x000207bc
 800b878:	0801015c 	.word	0x0801015c
 800b87c:	0800f72c 	.word	0x0800f72c
 800b880:	0800f740 	.word	0x0800f740
 800b884:	10add09e 	.word	0x10add09e
 800b888:	3c1cd57d 	.word	0x3c1cd57d
 800b88c:	000207ac 	.word	0x000207ac
 800b890:	0800f764 	.word	0x0800f764
 800b894:	0800f770 	.word	0x0800f770
 800b898:	ef522f61 	.word	0xef522f61

0800b89c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
 800b89c:	b5b0      	push	{r4, r5, r7, lr}
 800b89e:	b088      	sub	sp, #32
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	61bb      	str	r3, [r7, #24]
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
 800b8b2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800b8b6:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
 800b8b8:	f241 038c 	movw	r3, #4236	@ 0x108c
 800b8bc:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 800b8be:	4b2e      	ldr	r3, [pc, #184]	@ (800b978 <wait_for_firmware_start+0xdc>)
 800b8c0:	60bb      	str	r3, [r7, #8]

	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
 800b8c2:	79fb      	ldrb	r3, [r7, #7]
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	d002      	beq.n	800b8ce <wait_for_firmware_start+0x32>
 800b8c8:	79fb      	ldrb	r3, [r7, #7]
 800b8ca:	2b03      	cmp	r3, #3
 800b8cc:	d13f      	bne.n	800b94e <wait_for_firmware_start+0xb2>
		regAddress = NMI_REV_REG;
 800b8ce:	4b2b      	ldr	r3, [pc, #172]	@ (800b97c <wait_for_firmware_start+0xe0>)
 800b8d0:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
 800b8d2:	4b2b      	ldr	r3, [pc, #172]	@ (800b980 <wait_for_firmware_start+0xe4>)
 800b8d4:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}


	while (checkValue != reg)
 800b8d6:	e03a      	b.n	800b94e <wait_for_firmware_start+0xb2>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
 800b8d8:	2002      	movs	r0, #2
 800b8da:	f7fd ffa1 	bl	8009820 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
 800b8de:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 800b8e2:	4928      	ldr	r1, [pc, #160]	@ (800b984 <wait_for_firmware_start+0xe8>)
 800b8e4:	4828      	ldr	r0, [pc, #160]	@ (800b988 <wait_for_firmware_start+0xec>)
 800b8e6:	f002 fbc9 	bl	800e07c <iprintf>
 800b8ea:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b8ee:	f000 f8c5 	bl	800ba7c <nm_read_reg>
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b8f8:	f000 f8c0 	bl	800ba7c <nm_read_reg>
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 800b902:	f000 f8bb 	bl	800ba7c <nm_read_reg>
 800b906:	4603      	mov	r3, r0
 800b908:	462a      	mov	r2, r5
 800b90a:	4621      	mov	r1, r4
 800b90c:	481f      	ldr	r0, [pc, #124]	@ (800b98c <wait_for_firmware_start+0xf0>)
 800b90e:	f002 fbb5 	bl	800e07c <iprintf>
 800b912:	200d      	movs	r0, #13
 800b914:	f002 fbc4 	bl	800e0a0 <putchar>
		reg = nm_read_reg(regAddress);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f000 f8ae 	bl	800ba7c <nm_read_reg>
 800b920:	61b8      	str	r0, [r7, #24]
		if(++cnt >= u32Timeout)
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	3301      	adds	r3, #1
 800b926:	617b      	str	r3, [r7, #20]
 800b928:	697a      	ldr	r2, [r7, #20]
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d30e      	bcc.n	800b94e <wait_for_firmware_start+0xb2>
		{
			M2M_DBG("Time out for wait firmware Run\n");
 800b930:	f44f 72f7 	mov.w	r2, #494	@ 0x1ee
 800b934:	4913      	ldr	r1, [pc, #76]	@ (800b984 <wait_for_firmware_start+0xe8>)
 800b936:	4814      	ldr	r0, [pc, #80]	@ (800b988 <wait_for_firmware_start+0xec>)
 800b938:	f002 fba0 	bl	800e07c <iprintf>
 800b93c:	4814      	ldr	r0, [pc, #80]	@ (800b990 <wait_for_firmware_start+0xf4>)
 800b93e:	f002 fc0d 	bl	800e15c <puts>
 800b942:	200d      	movs	r0, #13
 800b944:	f002 fbac 	bl	800e0a0 <putchar>
			ret = M2M_ERR_INIT;
 800b948:	23fb      	movs	r3, #251	@ 0xfb
 800b94a:	77fb      	strb	r3, [r7, #31]
			goto ERR;
 800b94c:	e00e      	b.n	800b96c <wait_for_firmware_start+0xd0>
	while (checkValue != reg)
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	69ba      	ldr	r2, [r7, #24]
 800b952:	429a      	cmp	r2, r3
 800b954:	d1c0      	bne.n	800b8d8 <wait_for_firmware_start+0x3c>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	4a07      	ldr	r2, [pc, #28]	@ (800b978 <wait_for_firmware_start+0xdc>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d105      	bne.n	800b96a <wait_for_firmware_start+0xce>
	{
		nm_write_reg(NMI_STATE_REG, 0);
 800b95e:	2100      	movs	r1, #0
 800b960:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b964:	f000 f8a4 	bl	800bab0 <nm_write_reg>
 800b968:	e000      	b.n	800b96c <wait_for_firmware_start+0xd0>
	}
ERR:
 800b96a:	bf00      	nop
	return ret;
 800b96c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3720      	adds	r7, #32
 800b974:	46bd      	mov	sp, r7
 800b976:	bdb0      	pop	{r4, r5, r7, pc}
 800b978:	02532636 	.word	0x02532636
 800b97c:	000207ac 	.word	0x000207ac
 800b980:	d75dc1c3 	.word	0xd75dc1c3
 800b984:	08010170 	.word	0x08010170
 800b988:	0800f72c 	.word	0x0800f72c
 800b98c:	0800f788 	.word	0x0800f788
 800b990:	0800f794 	.word	0x0800f794

0800b994 <chip_deinit>:

sint8 chip_deinit(void)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800b99a:	2300      	movs	r3, #0
 800b99c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 800b99e:	463b      	mov	r3, r7
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800b9a6:	f000 f875 	bl	800ba94 <nm_read_reg_with_ret>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800b9ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d00c      	beq.n	800b9d0 <chip_deinit+0x3c>
		M2M_ERR("failed to de-initialize\n");
 800b9b6:	f240 2205 	movw	r2, #517	@ 0x205
 800b9ba:	4917      	ldr	r1, [pc, #92]	@ (800ba18 <chip_deinit+0x84>)
 800b9bc:	4817      	ldr	r0, [pc, #92]	@ (800ba1c <chip_deinit+0x88>)
 800b9be:	f002 fb5d 	bl	800e07c <iprintf>
 800b9c2:	4817      	ldr	r0, [pc, #92]	@ (800ba20 <chip_deinit+0x8c>)
 800b9c4:	f002 fbca 	bl	800e15c <puts>
 800b9c8:	200d      	movs	r0, #13
 800b9ca:	f002 fb69 	bl	800e0a0 <putchar>
		goto ERR1;
 800b9ce:	e01d      	b.n	800ba0c <chip_deinit+0x78>
	}
	reg &= ~(1 << 10);
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b9d6:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	4619      	mov	r1, r3
 800b9dc:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800b9e0:	f000 f866 	bl	800bab0 <nm_write_reg>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800b9e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00c      	beq.n	800ba0a <chip_deinit+0x76>
		M2M_ERR("failed to de-initialize\n");
 800b9f0:	f240 220b 	movw	r2, #523	@ 0x20b
 800b9f4:	4908      	ldr	r1, [pc, #32]	@ (800ba18 <chip_deinit+0x84>)
 800b9f6:	4809      	ldr	r0, [pc, #36]	@ (800ba1c <chip_deinit+0x88>)
 800b9f8:	f002 fb40 	bl	800e07c <iprintf>
 800b9fc:	4808      	ldr	r0, [pc, #32]	@ (800ba20 <chip_deinit+0x8c>)
 800b9fe:	f002 fbad 	bl	800e15c <puts>
 800ba02:	200d      	movs	r0, #13
 800ba04:	f002 fb4c 	bl	800e0a0 <putchar>
		goto ERR1;
 800ba08:	e000      	b.n	800ba0c <chip_deinit+0x78>
	}

ERR1:
 800ba0a:	bf00      	nop
	return ret;
 800ba0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	08010188 	.word	0x08010188
 800ba1c:	0800f6e4 	.word	0x0800f6e4
 800ba20:	0800f7b4 	.word	0x0800f7b4

0800ba24 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	73fb      	strb	r3, [r7, #15]
	ret = nm_bus_init(pvInitVal);
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f7fd ffc7 	bl	80099c4 <nm_bus_init>
 800ba36:	4603      	mov	r3, r0
 800ba38:	73fb      	strb	r3, [r7, #15]
	return ret;
 800ba3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b082      	sub	sp, #8
 800ba4a:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	71fb      	strb	r3, [r7, #7]
	ret = nm_bus_deinit();
 800ba50:	f7fe f80a 	bl	8009a68 <nm_bus_deinit>
 800ba54:	4603      	mov	r3, r0
 800ba56:	71fb      	strb	r3, [r7, #7]

	return ret;
 800ba58:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	71fb      	strb	r3, [r7, #7]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
 800ba6e:	f000 fcdd 	bl	800c42c <nm_spi_reset>
 800ba72:	4603      	mov	r3, r0
#else
#error "Please define bus usage"
#endif

	return ret;
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3708      	adds	r7, #8
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f001 f9cd 	bl	800ce24 <nm_spi_read_reg>
 800ba8a:	4603      	mov	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Please define bus usage"
#endif

}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 800ba9e:	6839      	ldr	r1, [r7, #0]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 ff99 	bl	800c9d8 <nm_spi_read_reg_with_ret>
 800baa6:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Please define bus usage"
#endif
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3708      	adds	r7, #8
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
 800baba:	6839      	ldr	r1, [r7, #0]
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 fe55 	bl	800c76c <nm_spi_write_reg>
 800bac2:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Please define bus usage"
#endif
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	4613      	mov	r3, r2
 800bad8:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
 800bada:	88fb      	ldrh	r3, [r7, #6]
 800badc:	461a      	mov	r2, r3
 800bade:	68b9      	ldr	r1, [r7, #8]
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	f001 f9ae 	bl	800ce42 <nm_spi_read_block>
 800bae6:	4603      	mov	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Please define bus usage"
#endif

}
 800bae8:	4618      	mov	r0, r3
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800bafc:	4b20      	ldr	r3, [pc, #128]	@ (800bb80 <nm_read_block+0x90>)
 800bafe:	881b      	ldrh	r3, [r3, #0]
 800bb00:	3b08      	subs	r3, #8
 800bb02:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800bb04:	2300      	movs	r3, #0
 800bb06:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800bb0c:	8a3b      	ldrh	r3, [r7, #16]
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d80f      	bhi.n	800bb34 <nm_read_block+0x44>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	4413      	add	r3, r2
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	b292      	uxth	r2, r2
 800bb1e:	4619      	mov	r1, r3
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f7ff ffd3 	bl	800bacc <p_nm_read_block>
 800bb26:	4603      	mov	r3, r0
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	7cfb      	ldrb	r3, [r7, #19]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	74fb      	strb	r3, [r7, #19]
			break;
 800bb32:	e01f      	b.n	800bb74 <nm_read_block+0x84>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	4413      	add	r3, r2
 800bb3a:	8a3a      	ldrh	r2, [r7, #16]
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f7ff ffc4 	bl	800bacc <p_nm_read_block>
 800bb44:	4603      	mov	r3, r0
 800bb46:	b2da      	uxtb	r2, r3
 800bb48:	7cfb      	ldrb	r3, [r7, #19]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800bb50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10c      	bne.n	800bb72 <nm_read_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800bb58:	8a3b      	ldrh	r3, [r7, #16]
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800bb60:	8a3b      	ldrh	r3, [r7, #16]
 800bb62:	697a      	ldr	r2, [r7, #20]
 800bb64:	4413      	add	r3, r2
 800bb66:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800bb68:	8a3b      	ldrh	r3, [r7, #16]
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800bb70:	e7cc      	b.n	800bb0c <nm_read_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800bb72:	bf00      	nop
		}
	}

	return s8Ret;
 800bb74:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3718      	adds	r7, #24
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	20000010 	.word	0x20000010

0800bb84 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	4613      	mov	r3, r2
 800bb90:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
 800bb92:	88fb      	ldrh	r3, [r7, #6]
 800bb94:	461a      	mov	r2, r3
 800bb96:	68b9      	ldr	r1, [r7, #8]
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f001 f970 	bl	800ce7e <nm_spi_write_block>
 800bb9e:	4603      	mov	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Please define bus usage"
#endif

}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3710      	adds	r7, #16
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b086      	sub	sp, #24
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800bbb4:	4b20      	ldr	r3, [pc, #128]	@ (800bc38 <nm_write_block+0x90>)
 800bbb6:	881b      	ldrh	r3, [r3, #0]
 800bbb8:	3b08      	subs	r3, #8
 800bbba:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800bbc4:	8a3b      	ldrh	r3, [r7, #16]
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d80f      	bhi.n	800bbec <nm_write_block+0x44>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
 800bbcc:	68ba      	ldr	r2, [r7, #8]
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	b292      	uxth	r2, r2
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f7ff ffd3 	bl	800bb84 <p_nm_write_block>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	b2da      	uxtb	r2, r3
 800bbe2:	7cfb      	ldrb	r3, [r7, #19]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	74fb      	strb	r3, [r7, #19]
			break;
 800bbea:	e01f      	b.n	800bc2c <nm_write_block+0x84>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800bbec:	68ba      	ldr	r2, [r7, #8]
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	8a3a      	ldrh	r2, [r7, #16]
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f7ff ffc4 	bl	800bb84 <p_nm_write_block>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	b2da      	uxtb	r2, r3
 800bc00:	7cfb      	ldrb	r3, [r7, #19]
 800bc02:	4413      	add	r3, r2
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800bc08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10c      	bne.n	800bc2a <nm_write_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800bc10:	8a3b      	ldrh	r3, [r7, #16]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800bc18:	8a3b      	ldrh	r3, [r7, #16]
 800bc1a:	697a      	ldr	r2, [r7, #20]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800bc20:	8a3b      	ldrh	r3, [r7, #16]
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	4413      	add	r3, r2
 800bc26:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800bc28:	e7cc      	b.n	800bbc4 <nm_write_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800bc2a:	bf00      	nop
		}
	}

	return s8Ret;
 800bc2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3718      	adds	r7, #24
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	20000010 	.word	0x20000010

0800bc3c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b088      	sub	sp, #32
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
 800bc44:	2300      	movs	r3, #0
 800bc46:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	77fb      	strb	r3, [r7, #31]
	tstrGpRegs strgp = {0};
 800bc4c:	f107 030c 	add.w	r3, r7, #12
 800bc50:	2200      	movs	r2, #0
 800bc52:	601a      	str	r2, [r3, #0]
 800bc54:	605a      	str	r2, [r3, #4]
	if (pstrRev != NULL)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d07e      	beq.n	800bd5a <nm_get_firmware_full_info+0x11e>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
 800bc5c:	2228      	movs	r2, #40	@ 0x28
 800bc5e:	2100      	movs	r1, #0
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f7fd ff29 	bl	8009ab8 <m2m_memset>
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
 800bc66:	f107 0314 	add.w	r3, r7, #20
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	483e      	ldr	r0, [pc, #248]	@ (800bd68 <nm_get_firmware_full_info+0x12c>)
 800bc6e:	f7ff ff11 	bl	800ba94 <nm_read_reg_with_ret>
 800bc72:	4603      	mov	r3, r0
 800bc74:	77fb      	strb	r3, [r7, #31]
		if(ret == M2M_SUCCESS)
 800bc76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d16d      	bne.n	800bd5a <nm_get_firmware_full_info+0x11e>
		{
			if(reg != 0)
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d067      	beq.n	800bd54 <nm_get_firmware_full_info+0x118>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800bc8a:	f107 010c 	add.w	r1, r7, #12
 800bc8e:	2208      	movs	r2, #8
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7ff ff2d 	bl	800baf0 <nm_read_block>
 800bc96:	4603      	mov	r3, r0
 800bc98:	77fb      	strb	r3, [r7, #31]
				if(ret == M2M_SUCCESS)
 800bc9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d15c      	bne.n	800bd5c <nm_get_firmware_full_info+0x120>
				{
					reg = strgp.u32Firmware_Ota_rev;
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	617b      	str	r3, [r7, #20]
					if(reg != 0)
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d04d      	beq.n	800bd4e <nm_get_firmware_full_info+0x112>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800bcb8:	2228      	movs	r2, #40	@ 0x28
 800bcba:	6879      	ldr	r1, [r7, #4]
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7ff ff17 	bl	800baf0 <nm_read_block>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	77fb      	strb	r3, [r7, #31]
						if(ret == M2M_SUCCESS)
 800bcc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d146      	bne.n	800bd5c <nm_get_firmware_full_info+0x120>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	791b      	ldrb	r3, [r3, #4]
 800bcd2:	021b      	lsls	r3, r3, #8
 800bcd4:	b21a      	sxth	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	795b      	ldrb	r3, [r3, #5]
 800bcda:	011b      	lsls	r3, r3, #4
 800bcdc:	b21b      	sxth	r3, r3
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	b21b      	sxth	r3, r3
 800bce2:	4313      	orrs	r3, r2
 800bce4:	b21a      	sxth	r2, r3
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	799b      	ldrb	r3, [r3, #6]
 800bcea:	b21b      	sxth	r3, r3
 800bcec:	f003 030f 	and.w	r3, r3, #15
 800bcf0:	b21b      	sxth	r3, r3
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	b21b      	sxth	r3, r3
 800bcf6:	83bb      	strh	r3, [r7, #28]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 800bcf8:	f241 3377 	movw	r3, #4983	@ 0x1377
 800bcfc:	837b      	strh	r3, [r7, #26]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	79db      	ldrb	r3, [r3, #7]
 800bd02:	021b      	lsls	r3, r3, #8
 800bd04:	b21a      	sxth	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	7a1b      	ldrb	r3, [r3, #8]
 800bd0a:	011b      	lsls	r3, r3, #4
 800bd0c:	b21b      	sxth	r3, r3
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	b21b      	sxth	r3, r3
 800bd12:	4313      	orrs	r3, r2
 800bd14:	b21a      	sxth	r2, r3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	7a5b      	ldrb	r3, [r3, #9]
 800bd1a:	b21b      	sxth	r3, r3
 800bd1c:	f003 030f 	and.w	r3, r3, #15
 800bd20:	b21b      	sxth	r3, r3
 800bd22:	4313      	orrs	r3, r2
 800bd24:	b21b      	sxth	r3, r3
 800bd26:	833b      	strh	r3, [r7, #24]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
 800bd28:	8bbb      	ldrh	r3, [r7, #28]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d005      	beq.n	800bd3a <nm_get_firmware_full_info+0xfe>
 800bd2e:	8b3b      	ldrh	r3, [r7, #24]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d002      	beq.n	800bd3a <nm_get_firmware_full_info+0xfe>
 800bd34:	8b3b      	ldrh	r3, [r7, #24]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d102      	bne.n	800bd40 <nm_get_firmware_full_info+0x104>
								ret = M2M_ERR_FAIL;
 800bd3a:	23f4      	movs	r3, #244	@ 0xf4
 800bd3c:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800bd3e:	e00d      	b.n	800bd5c <nm_get_firmware_full_info+0x120>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
 800bd40:	8b7a      	ldrh	r2, [r7, #26]
 800bd42:	8b3b      	ldrh	r3, [r7, #24]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d209      	bcs.n	800bd5c <nm_get_firmware_full_info+0x120>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
 800bd48:	23f3      	movs	r3, #243	@ 0xf3
 800bd4a:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800bd4c:	e006      	b.n	800bd5c <nm_get_firmware_full_info+0x120>
								//ret = M2M_ERR_FW_VER_MISMATCH;
								//goto EXIT;
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
 800bd4e:	23f4      	movs	r3, #244	@ 0xf4
 800bd50:	77fb      	strb	r3, [r7, #31]
 800bd52:	e003      	b.n	800bd5c <nm_get_firmware_full_info+0x120>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
 800bd54:	23f4      	movs	r3, #244	@ 0xf4
 800bd56:	77fb      	strb	r3, [r7, #31]
 800bd58:	e000      	b.n	800bd5c <nm_get_firmware_full_info+0x120>
			}
		}
	}
EXIT:
 800bd5a:	bf00      	nop
	return ret;
 800bd5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3720      	adds	r7, #32
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	000c0008 	.word	0x000c0008

0800bd6c <nm_drv_init_hold>:
ERR1:
	return ret;
}

sint8 nm_drv_init_hold(void)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800bd72:	2300      	movs	r3, #0
 800bd74:	71fb      	strb	r3, [r7, #7]

	ret = nm_bus_iface_init(NULL);
 800bd76:	2000      	movs	r0, #0
 800bd78:	f7ff fe54 	bl	800ba24 <nm_bus_iface_init>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) {
 800bd80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d00f      	beq.n	800bda8 <nm_drv_init_hold+0x3c>
		M2M_ERR("[nmi start]: fail init bus\n");
 800bd88:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 800bd8c:	4911      	ldr	r1, [pc, #68]	@ (800bdd4 <nm_drv_init_hold+0x68>)
 800bd8e:	4812      	ldr	r0, [pc, #72]	@ (800bdd8 <nm_drv_init_hold+0x6c>)
 800bd90:	f002 f974 	bl	800e07c <iprintf>
 800bd94:	4811      	ldr	r0, [pc, #68]	@ (800bddc <nm_drv_init_hold+0x70>)
 800bd96:	f002 f9e1 	bl	800e15c <puts>
 800bd9a:	200d      	movs	r0, #13
 800bd9c:	f002 f980 	bl	800e0a0 <putchar>
		goto ERR1;
 800bda0:	bf00      	nop

	return ret;
ERR2:
	nm_bus_iface_deinit();
ERR1:
	return ret;
 800bda2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bda6:	e010      	b.n	800bdca <nm_drv_init_hold+0x5e>
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
 800bda8:	480d      	ldr	r0, [pc, #52]	@ (800bde0 <nm_drv_init_hold+0x74>)
 800bdaa:	f002 f967 	bl	800e07c <iprintf>
 800bdae:	f7ff fb4d 	bl	800b44c <nmi_get_chipid>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	480b      	ldr	r0, [pc, #44]	@ (800bde4 <nm_drv_init_hold+0x78>)
 800bdb8:	f002 f960 	bl	800e07c <iprintf>
 800bdbc:	200d      	movs	r0, #13
 800bdbe:	f002 f96f 	bl	800e0a0 <putchar>
	nm_spi_init();
 800bdc2:	f000 ff7f 	bl	800ccc4 <nm_spi_init>
	return ret;
 800bdc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3708      	adds	r7, #8
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	08010194 	.word	0x08010194
 800bdd8:	0800f7e0 	.word	0x0800f7e0
 800bddc:	0800f7f4 	.word	0x0800f7f4
 800bde0:	0800f810 	.word	0x0800f810
 800bde4:	0800f81c 	.word	0x0800f81c

0800bde8 <nm_drv_init_start>:

sint8 nm_drv_init_start(void * arg)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73fb      	strb	r3, [r7, #15]
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	73bb      	strb	r3, [r7, #14]

	if(NULL != arg) {
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00a      	beq.n	800be14 <nm_drv_init_start+0x2c>
		u8Mode = *((uint8 *)arg);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	73bb      	strb	r3, [r7, #14]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
 800be04:	7bbb      	ldrb	r3, [r7, #14]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d002      	beq.n	800be10 <nm_drv_init_start+0x28>
 800be0a:	7bbb      	ldrb	r3, [r7, #14]
 800be0c:	2b04      	cmp	r3, #4
 800be0e:	d901      	bls.n	800be14 <nm_drv_init_start+0x2c>
			u8Mode = M2M_WIFI_MODE_NORMAL;
 800be10:	2301      	movs	r3, #1
 800be12:	73bb      	strb	r3, [r7, #14]
		}
	}

	ret = wait_for_bootrom(u8Mode);
 800be14:	7bbb      	ldrb	r3, [r7, #14]
 800be16:	4618      	mov	r0, r3
 800be18:	f7ff fc88 	bl	800b72c <wait_for_bootrom>
 800be1c:	4603      	mov	r3, r0
 800be1e:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800be20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d127      	bne.n	800be78 <nm_drv_init_start+0x90>
		goto ERR2;
	}

	ret = wait_for_firmware_start(u8Mode);
 800be28:	7bbb      	ldrb	r3, [r7, #14]
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7ff fd36 	bl	800b89c <wait_for_firmware_start>
 800be30:	4603      	mov	r3, r0
 800be32:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800be34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d11f      	bne.n	800be7c <nm_drv_init_start+0x94>
		goto ERR2;
	}

	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
 800be3c:	7bbb      	ldrb	r3, [r7, #14]
 800be3e:	2b02      	cmp	r3, #2
 800be40:	d022      	beq.n	800be88 <nm_drv_init_start+0xa0>
 800be42:	7bbb      	ldrb	r3, [r7, #14]
 800be44:	2b03      	cmp	r3, #3
 800be46:	d01f      	beq.n	800be88 <nm_drv_init_start+0xa0>
		goto ERR1;
	} else {
		/*continue running*/
	}

	ret = enable_interrupts();
 800be48:	f7ff fab6 	bl	800b3b8 <enable_interrupts>
 800be4c:	4603      	mov	r3, r0
 800be4e:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800be50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00c      	beq.n	800be72 <nm_drv_init_start+0x8a>
		M2M_ERR("failed to enable interrupts..\n");
 800be58:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 800be5c:	490e      	ldr	r1, [pc, #56]	@ (800be98 <nm_drv_init_start+0xb0>)
 800be5e:	480f      	ldr	r0, [pc, #60]	@ (800be9c <nm_drv_init_start+0xb4>)
 800be60:	f002 f90c 	bl	800e07c <iprintf>
 800be64:	480e      	ldr	r0, [pc, #56]	@ (800bea0 <nm_drv_init_start+0xb8>)
 800be66:	f002 f979 	bl	800e15c <puts>
 800be6a:	200d      	movs	r0, #13
 800be6c:	f002 f918 	bl	800e0a0 <putchar>
		goto ERR2;
 800be70:	e005      	b.n	800be7e <nm_drv_init_start+0x96>
	}

	return ret;
 800be72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be76:	e00a      	b.n	800be8e <nm_drv_init_start+0xa6>
		goto ERR2;
 800be78:	bf00      	nop
 800be7a:	e000      	b.n	800be7e <nm_drv_init_start+0x96>
		goto ERR2;
 800be7c:	bf00      	nop
ERR2:
	nm_bus_iface_deinit();
 800be7e:	f7ff fde2 	bl	800ba46 <nm_bus_iface_deinit>
#ifdef CONF_WINC_USE_SPI
	nm_spi_deinit();
 800be82:	f000 ffc1 	bl	800ce08 <nm_spi_deinit>
 800be86:	e000      	b.n	800be8a <nm_drv_init_start+0xa2>
		goto ERR1;
 800be88:	bf00      	nop
#endif
ERR1:
	return ret;
 800be8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	080101a8 	.word	0x080101a8
 800be9c:	0800f7e0 	.word	0x0800f7e0
 800bea0:	0800f82c 	.word	0x0800f82c

0800bea4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
 800beac:	f7ff fd72 	bl	800b994 <chip_deinit>
 800beb0:	4603      	mov	r3, r0
 800beb2:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800beb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00c      	beq.n	800bed6 <nm_drv_deinit+0x32>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
 800bebc:	f240 1281 	movw	r2, #385	@ 0x181
 800bec0:	491e      	ldr	r1, [pc, #120]	@ (800bf3c <nm_drv_deinit+0x98>)
 800bec2:	481f      	ldr	r0, [pc, #124]	@ (800bf40 <nm_drv_deinit+0x9c>)
 800bec4:	f002 f8da 	bl	800e07c <iprintf>
 800bec8:	481e      	ldr	r0, [pc, #120]	@ (800bf44 <nm_drv_deinit+0xa0>)
 800beca:	f002 f947 	bl	800e15c <puts>
 800bece:	200d      	movs	r0, #13
 800bed0:	f002 f8e6 	bl	800e0a0 <putchar>
		goto ERR1;
 800bed4:	e02c      	b.n	800bf30 <nm_drv_deinit+0x8c>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
 800bed6:	2000      	movs	r0, #0
 800bed8:	f001 ff06 	bl	800dce8 <spi_flash_enable>
 800bedc:	4603      	mov	r3, r0
 800bede:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800bee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00c      	beq.n	800bf02 <nm_drv_deinit+0x5e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
 800bee8:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 800beec:	4913      	ldr	r1, [pc, #76]	@ (800bf3c <nm_drv_deinit+0x98>)
 800beee:	4814      	ldr	r0, [pc, #80]	@ (800bf40 <nm_drv_deinit+0x9c>)
 800bef0:	f002 f8c4 	bl	800e07c <iprintf>
 800bef4:	4814      	ldr	r0, [pc, #80]	@ (800bf48 <nm_drv_deinit+0xa4>)
 800bef6:	f002 f931 	bl	800e15c <puts>
 800befa:	200d      	movs	r0, #13
 800befc:	f002 f8d0 	bl	800e0a0 <putchar>
		goto ERR1;
 800bf00:	e016      	b.n	800bf30 <nm_drv_deinit+0x8c>
	}

	ret = nm_bus_iface_deinit();
 800bf02:	f7ff fda0 	bl	800ba46 <nm_bus_iface_deinit>
 800bf06:	4603      	mov	r3, r0
 800bf08:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800bf0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00c      	beq.n	800bf2c <nm_drv_deinit+0x88>
		M2M_ERR("[nmi stop]: fail init bus\n");
 800bf12:	f44f 72c7 	mov.w	r2, #398	@ 0x18e
 800bf16:	4909      	ldr	r1, [pc, #36]	@ (800bf3c <nm_drv_deinit+0x98>)
 800bf18:	4809      	ldr	r0, [pc, #36]	@ (800bf40 <nm_drv_deinit+0x9c>)
 800bf1a:	f002 f8af 	bl	800e07c <iprintf>
 800bf1e:	480b      	ldr	r0, [pc, #44]	@ (800bf4c <nm_drv_deinit+0xa8>)
 800bf20:	f002 f91c 	bl	800e15c <puts>
 800bf24:	200d      	movs	r0, #13
 800bf26:	f002 f8bb 	bl	800e0a0 <putchar>
		goto ERR1;
 800bf2a:	e001      	b.n	800bf30 <nm_drv_deinit+0x8c>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
 800bf2c:	f000 ff6c 	bl	800ce08 <nm_spi_deinit>
#endif

ERR1:
	return ret;
 800bf30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	080101bc 	.word	0x080101bc
 800bf40:	0800f7e0 	.word	0x0800f7e0
 800bf44:	0800f84c 	.word	0x0800f84c
 800bf48:	0800f86c 	.word	0x0800f86c
 800bf4c:	0800f890 	.word	0x0800f890

0800bf50 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static inline sint8 nmi_spi_read(uint8 *b, uint16 sz)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	460b      	mov	r3, r1
 800bf5a:	807b      	strh	r3, [r7, #2]
    return nm_spi_rw(NULL, b, sz);
 800bf5c:	887b      	ldrh	r3, [r7, #2]
 800bf5e:	461a      	mov	r2, r3
 800bf60:	6879      	ldr	r1, [r7, #4]
 800bf62:	2000      	movs	r0, #0
 800bf64:	f7fd fcce 	bl	8009904 <nm_spi_rw>
 800bf68:	4603      	mov	r3, r0
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <nmi_spi_write>:
static inline sint8 nmi_spi_write(uint8 *b, uint16 sz)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b082      	sub	sp, #8
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	807b      	strh	r3, [r7, #2]
    return nm_spi_rw(b, NULL, sz);
 800bf7e:	887b      	ldrh	r3, [r7, #2]
 800bf80:	461a      	mov	r2, r3
 800bf82:	2100      	movs	r1, #0
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7fd fcbd 	bl	8009904 <nm_spi_rw>
 800bf8a:	4603      	mov	r3, r0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <nmi_spi_writeread>:
static sint8 nmi_spi_writeread(uint8 *bw, uint8 *br, uint16 sz)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	80fb      	strh	r3, [r7, #6]
    return nm_spi_rw(bw, br, sz);
 800bfa2:	88fb      	ldrh	r3, [r7, #6]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	68b9      	ldr	r1, [r7, #8]
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f7fd fcab 	bl	8009904 <nm_spi_rw>
 800bfae:	4603      	mov	r3, r0
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3710      	adds	r7, #16
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static inline uint8 crc7_byte(uint8 crc, uint8 data)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	460a      	mov	r2, r1
 800bfc2:	71fb      	strb	r3, [r7, #7]
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	71bb      	strb	r3, [r7, #6]
	return crc7_syndrome_table[(crc << 1) ^ data];
 800bfc8:	79fb      	ldrb	r3, [r7, #7]
 800bfca:	005a      	lsls	r2, r3, #1
 800bfcc:	79bb      	ldrb	r3, [r7, #6]
 800bfce:	4053      	eors	r3, r2
 800bfd0:	4a03      	ldr	r2, [pc, #12]	@ (800bfe0 <crc7_byte+0x28>)
 800bfd2:	5cd3      	ldrb	r3, [r2, r3]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr
 800bfe0:	080101cc 	.word	0x080101cc

0800bfe4 <crc7>:

static inline uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	4603      	mov	r3, r0
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
 800bff0:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800bff2:	e00a      	b.n	800c00a <crc7+0x26>
		crc = crc7_byte(crc, *buffer++);
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	1c5a      	adds	r2, r3, #1
 800bff8:	60ba      	str	r2, [r7, #8]
 800bffa:	781a      	ldrb	r2, [r3, #0]
 800bffc:	7bfb      	ldrb	r3, [r7, #15]
 800bffe:	4611      	mov	r1, r2
 800c000:	4618      	mov	r0, r3
 800c002:	f7ff ffd9 	bl	800bfb8 <crc7_byte>
 800c006:	4603      	mov	r3, r0
 800c008:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	1e5a      	subs	r2, r3, #1
 800c00e:	607a      	str	r2, [r7, #4]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1ef      	bne.n	800bff4 <crc7+0x10>
	return crc;
 800c014:	7bfb      	ldrb	r3, [r7, #15]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
	...

0800c020 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b088      	sub	sp, #32
 800c024:	af00      	add	r7, sp, #0
 800c026:	60b9      	str	r1, [r7, #8]
 800c028:	607a      	str	r2, [r7, #4]
 800c02a:	603b      	str	r3, [r7, #0]
 800c02c:	4603      	mov	r3, r0
 800c02e:	73fb      	strb	r3, [r7, #15]
	uint8 bc[9];
	uint8 len = 5;
 800c030:	2305      	movs	r3, #5
 800c032:	77fb      	strb	r3, [r7, #31]
	sint8 result = N_OK;
 800c034:	2300      	movs	r3, #0
 800c036:	77bb      	strb	r3, [r7, #30]

	bc[0] = cmd;
 800c038:	7bfb      	ldrb	r3, [r7, #15]
 800c03a:	753b      	strb	r3, [r7, #20]
	switch (cmd) {
 800c03c:	7bfb      	ldrb	r3, [r7, #15]
 800c03e:	3bc1      	subs	r3, #193	@ 0xc1
 800c040:	2b0e      	cmp	r3, #14
 800c042:	f200 80cc 	bhi.w	800c1de <spi_cmd+0x1be>
 800c046:	a201      	add	r2, pc, #4	@ (adr r2, 800c04c <spi_cmd+0x2c>)
 800c048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04c:	0800c105 	.word	0x0800c105
 800c050:	0800c105 	.word	0x0800c105
 800c054:	0800c161 	.word	0x0800c161
 800c058:	0800c0a5 	.word	0x0800c0a5
 800c05c:	0800c0cf 	.word	0x0800c0cf
 800c060:	0800c0e1 	.word	0x0800c0e1
 800c064:	0800c12f 	.word	0x0800c12f
 800c068:	0800c12f 	.word	0x0800c12f
 800c06c:	0800c1a5 	.word	0x0800c1a5
 800c070:	0800c089 	.word	0x0800c089
 800c074:	0800c1df 	.word	0x0800c1df
 800c078:	0800c1df 	.word	0x0800c1df
 800c07c:	0800c1df 	.word	0x0800c1df
 800c080:	0800c1df 	.word	0x0800c1df
 800c084:	0800c0f3 	.word	0x0800c0f3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	0c1b      	lsrs	r3, r3, #16
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	0a1b      	lsrs	r3, r3, #8
 800c094:	b2db      	uxtb	r3, r3
 800c096:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800c09e:	2305      	movs	r3, #5
 800c0a0:	77fb      	strb	r3, [r7, #31]
		break;
 800c0a2:	e09f      	b.n	800c1e4 <spi_cmd+0x1c4>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	0a1b      	lsrs	r3, r3, #8
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800c0ac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d004      	beq.n	800c0be <spi_cmd+0x9e>
 800c0b4:	7d7b      	ldrb	r3, [r7, #21]
 800c0b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)adr;
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800c0c8:	2305      	movs	r3, #5
 800c0ca:	77fb      	strb	r3, [r7, #31]
		break;
 800c0cc:	e08a      	b.n	800c1e4 <spi_cmd+0x1c4>
#if defined(CMD_TERMINATE)
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800c0da:	2305      	movs	r3, #5
 800c0dc:	77fb      	strb	r3, [r7, #31]
		break;
 800c0de:	e081      	b.n	800c1e4 <spi_cmd+0x1c4>
#endif
#if defined(CMD_REPEAT)
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800c0ec:	2305      	movs	r3, #5
 800c0ee:	77fb      	strb	r3, [r7, #31]
		break;
 800c0f0:	e078      	b.n	800c1e4 <spi_cmd+0x1c4>
#endif
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
 800c0f2:	23ff      	movs	r3, #255	@ 0xff
 800c0f4:	757b      	strb	r3, [r7, #21]
		bc[2] = 0xff;
 800c0f6:	23ff      	movs	r3, #255	@ 0xff
 800c0f8:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0xff;
 800c0fa:	23ff      	movs	r3, #255	@ 0xff
 800c0fc:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800c0fe:	2305      	movs	r3, #5
 800c100:	77fb      	strb	r3, [r7, #31]
		break;
 800c102:	e06f      	b.n	800c1e4 <spi_cmd+0x1c4>
#if defined(CMD_DMA_WRITE) || defined(CMD_DMA_READ)
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	0c1b      	lsrs	r3, r3, #16
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	0a1b      	lsrs	r3, r3, #8
 800c110:	b2db      	uxtb	r3, r3
 800c112:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	b2db      	uxtb	r3, r3
 800c118:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 8);
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	0a1b      	lsrs	r3, r3, #8
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz);
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	b2db      	uxtb	r3, r3
 800c126:	767b      	strb	r3, [r7, #25]
		len = 7;
 800c128:	2307      	movs	r3, #7
 800c12a:	77fb      	strb	r3, [r7, #31]
		break;
 800c12c:	e05a      	b.n	800c1e4 <spi_cmd+0x1c4>
#endif
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	0c1b      	lsrs	r3, r3, #16
 800c132:	b2db      	uxtb	r3, r3
 800c134:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	0a1b      	lsrs	r3, r3, #8
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	b2db      	uxtb	r3, r3
 800c142:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 16);
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	0c1b      	lsrs	r3, r3, #16
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz >> 8);
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	0a1b      	lsrs	r3, r3, #8
 800c150:	b2db      	uxtb	r3, r3
 800c152:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(sz);
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	b2db      	uxtb	r3, r3
 800c158:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800c15a:	2308      	movs	r3, #8
 800c15c:	77fb      	strb	r3, [r7, #31]
		break;
 800c15e:	e041      	b.n	800c1e4 <spi_cmd+0x1c4>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	0a1b      	lsrs	r3, r3, #8
 800c164:	b2db      	uxtb	r3, r3
 800c166:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800c168:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d004      	beq.n	800c17a <spi_cmd+0x15a>
 800c170:	7d7b      	ldrb	r3, [r7, #21]
 800c172:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c176:	b2db      	uxtb	r3, r3
 800c178:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr);
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(u32data >> 24);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	0e1b      	lsrs	r3, r3, #24
 800c184:	b2db      	uxtb	r3, r3
 800c186:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 16);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	0c1b      	lsrs	r3, r3, #16
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 8);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	0a1b      	lsrs	r3, r3, #8
 800c194:	b2db      	uxtb	r3, r3
 800c196:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800c19e:	2308      	movs	r3, #8
 800c1a0:	77fb      	strb	r3, [r7, #31]
		break;
 800c1a2:	e01f      	b.n	800c1e4 <spi_cmd+0x1c4>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	0c1b      	lsrs	r3, r3, #16
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	0a1b      	lsrs	r3, r3, #8
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(adr);
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 24);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	0e1b      	lsrs	r3, r3, #24
 800c1be:	b2db      	uxtb	r3, r3
 800c1c0:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 16);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	0c1b      	lsrs	r3, r3, #16
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data >> 8);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	0a1b      	lsrs	r3, r3, #8
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	76bb      	strb	r3, [r7, #26]
		bc[7] = (uint8)(u32data);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	76fb      	strb	r3, [r7, #27]
		len = 9;
 800c1d8:	2309      	movs	r3, #9
 800c1da:	77fb      	strb	r3, [r7, #31]
		break;
 800c1dc:	e002      	b.n	800c1e4 <spi_cmd+0x1c4>
	default:
		result = N_FAIL;
 800c1de:	23ff      	movs	r3, #255	@ 0xff
 800c1e0:	77bb      	strb	r3, [r7, #30]
		break;
 800c1e2:	bf00      	nop
	}

    if(result == N_OK) {
 800c1e4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d133      	bne.n	800c254 <spi_cmd+0x234>
		if (!gu8Crc_off)
 800c1ec:	4b1c      	ldr	r3, [pc, #112]	@ (800c260 <spi_cmd+0x240>)
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d113      	bne.n	800c21c <spi_cmd+0x1fc>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 800c1f4:	7ffb      	ldrb	r3, [r7, #31]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	f107 0314 	add.w	r3, r7, #20
 800c1fe:	4619      	mov	r1, r3
 800c200:	207f      	movs	r0, #127	@ 0x7f
 800c202:	f7ff feef 	bl	800bfe4 <crc7>
 800c206:	4603      	mov	r3, r0
 800c208:	461a      	mov	r2, r3
 800c20a:	7ffb      	ldrb	r3, [r7, #31]
 800c20c:	3b01      	subs	r3, #1
 800c20e:	0052      	lsls	r2, r2, #1
 800c210:	b2d2      	uxtb	r2, r2
 800c212:	3320      	adds	r3, #32
 800c214:	443b      	add	r3, r7
 800c216:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800c21a:	e002      	b.n	800c222 <spi_cmd+0x202>
		else
			len-=1;
 800c21c:	7ffb      	ldrb	r3, [r7, #31]
 800c21e:	3b01      	subs	r3, #1
 800c220:	77fb      	strb	r3, [r7, #31]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 800c222:	7ffb      	ldrb	r3, [r7, #31]
 800c224:	b29a      	uxth	r2, r3
 800c226:	f107 0314 	add.w	r3, r7, #20
 800c22a:	4611      	mov	r1, r2
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7ff fea0 	bl	800bf72 <nmi_spi_write>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00d      	beq.n	800c254 <spi_cmd+0x234>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
 800c238:	f240 1203 	movw	r2, #259	@ 0x103
 800c23c:	4909      	ldr	r1, [pc, #36]	@ (800c264 <spi_cmd+0x244>)
 800c23e:	480a      	ldr	r0, [pc, #40]	@ (800c268 <spi_cmd+0x248>)
 800c240:	f001 ff1c 	bl	800e07c <iprintf>
 800c244:	4809      	ldr	r0, [pc, #36]	@ (800c26c <spi_cmd+0x24c>)
 800c246:	f001 ff89 	bl	800e15c <puts>
 800c24a:	200d      	movs	r0, #13
 800c24c:	f001 ff28 	bl	800e0a0 <putchar>
			result = N_FAIL;
 800c250:	23ff      	movs	r3, #255	@ 0xff
 800c252:	77bb      	strb	r3, [r7, #30]
		}
	}

	return result;
 800c254:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3720      	adds	r7, #32
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	20000c14 	.word	0x20000c14
 800c264:	080102cc 	.word	0x080102cc
 800c268:	0800f8ac 	.word	0x0800f8ac
 800c26c:	0800f8c0 	.word	0x0800f8c0

0800c270 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	4603      	mov	r3, r0
 800c278:	71fb      	strb	r3, [r7, #7]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
 800c27a:	2300      	movs	r3, #0
 800c27c:	73bb      	strb	r3, [r7, #14]

    if (!gu8Crc_off)
 800c27e:	4b27      	ldr	r3, [pc, #156]	@ (800c31c <spi_data_rsp+0xac>)
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d102      	bne.n	800c28c <spi_data_rsp+0x1c>
		len = 2;
 800c286:	2302      	movs	r3, #2
 800c288:	73fb      	strb	r3, [r7, #15]
 800c28a:	e001      	b.n	800c290 <spi_data_rsp+0x20>
	else
		len = 3;
 800c28c:	2303      	movs	r3, #3
 800c28e:	73fb      	strb	r3, [r7, #15]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
 800c290:	7bfb      	ldrb	r3, [r7, #15]
 800c292:	b29a      	uxth	r2, r3
 800c294:	f107 0308 	add.w	r3, r7, #8
 800c298:	4611      	mov	r1, r2
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7ff fe58 	bl	800bf50 <nmi_spi_read>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00e      	beq.n	800c2c4 <spi_data_rsp+0x54>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
 800c2a6:	f240 1217 	movw	r2, #279	@ 0x117
 800c2aa:	491d      	ldr	r1, [pc, #116]	@ (800c320 <spi_data_rsp+0xb0>)
 800c2ac:	481d      	ldr	r0, [pc, #116]	@ (800c324 <spi_data_rsp+0xb4>)
 800c2ae:	f001 fee5 	bl	800e07c <iprintf>
 800c2b2:	481d      	ldr	r0, [pc, #116]	@ (800c328 <spi_data_rsp+0xb8>)
 800c2b4:	f001 ff52 	bl	800e15c <puts>
 800c2b8:	200d      	movs	r0, #13
 800c2ba:	f001 fef1 	bl	800e0a0 <putchar>
		result = N_FAIL;
 800c2be:	23ff      	movs	r3, #255	@ 0xff
 800c2c0:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800c2c2:	e024      	b.n	800c30e <spi_data_rsp+0x9e>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	3310      	adds	r3, #16
 800c2ca:	443b      	add	r3, r7
 800c2cc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d107      	bne.n	800c2e4 <spi_data_rsp+0x74>
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
 800c2d6:	3b02      	subs	r3, #2
 800c2d8:	3310      	adds	r3, #16
 800c2da:	443b      	add	r3, r7
 800c2dc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800c2e0:	2bc3      	cmp	r3, #195	@ 0xc3
 800c2e2:	d013      	beq.n	800c30c <spi_data_rsp+0x9c>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
 800c2e4:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 800c2e8:	490d      	ldr	r1, [pc, #52]	@ (800c320 <spi_data_rsp+0xb0>)
 800c2ea:	480e      	ldr	r0, [pc, #56]	@ (800c324 <spi_data_rsp+0xb4>)
 800c2ec:	f001 fec6 	bl	800e07c <iprintf>
 800c2f0:	7a3b      	ldrb	r3, [r7, #8]
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	7a7b      	ldrb	r3, [r7, #9]
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	7abb      	ldrb	r3, [r7, #10]
 800c2fa:	480c      	ldr	r0, [pc, #48]	@ (800c32c <spi_data_rsp+0xbc>)
 800c2fc:	f001 febe 	bl	800e07c <iprintf>
 800c300:	200d      	movs	r0, #13
 800c302:	f001 fecd 	bl	800e0a0 <putchar>
		result = N_FAIL;
 800c306:	23ff      	movs	r3, #255	@ 0xff
 800c308:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800c30a:	e000      	b.n	800c30e <spi_data_rsp+0x9e>
	}
_fail_:
 800c30c:	bf00      	nop

	return result;
 800c30e:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3710      	adds	r7, #16
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	20000c14 	.word	0x20000c14
 800c320:	080102d4 	.word	0x080102d4
 800c324:	0800f8ac 	.word	0x0800f8ac
 800c328:	0800f8ec 	.word	0x0800f8ec
 800c32c:	0800f90c 	.word	0x0800f90c

0800c330 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	4603      	mov	r3, r0
 800c338:	71fb      	strb	r3, [r7, #7]
	uint8 rsp;
	sint8 result = N_OK;
 800c33a:	2300      	movs	r3, #0
 800c33c:	73fb      	strb	r3, [r7, #15]

	/**
		Command/Control response
	**/
#if defined(CMD_TERMINATE)
    if(cmd == CMD_TERMINATE) {
 800c33e:	79fb      	ldrb	r3, [r7, #7]
 800c340:	2bc5      	cmp	r3, #197	@ 0xc5
 800c342:	d10b      	bne.n	800c35c <spi_cmd_rsp+0x2c>
        if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800c344:	f107 030d 	add.w	r3, r7, #13
 800c348:	2101      	movs	r1, #1
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7ff fe00 	bl	800bf50 <nmi_spi_read>
 800c350:	4603      	mov	r3, r0
 800c352:	2b00      	cmp	r3, #0
 800c354:	d002      	beq.n	800c35c <spi_cmd_rsp+0x2c>
            result = N_FAIL;
 800c356:	23ff      	movs	r3, #255	@ 0xff
 800c358:	73fb      	strb	r3, [r7, #15]
            goto _fail_;
 800c35a:	e05a      	b.n	800c412 <spi_cmd_rsp+0xe2>
        }
    }
#endif
#if defined(CMD_REPEAT)
    if(cmd == CMD_REPEAT) {
 800c35c:	79fb      	ldrb	r3, [r7, #7]
 800c35e:	2bc6      	cmp	r3, #198	@ 0xc6
 800c360:	d10b      	bne.n	800c37a <spi_cmd_rsp+0x4a>
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800c362:	f107 030d 	add.w	r3, r7, #13
 800c366:	2101      	movs	r1, #1
 800c368:	4618      	mov	r0, r3
 800c36a:	f7ff fdf1 	bl	800bf50 <nmi_spi_read>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d002      	beq.n	800c37a <spi_cmd_rsp+0x4a>
			result = N_FAIL;
 800c374:	23ff      	movs	r3, #255	@ 0xff
 800c376:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800c378:	e04b      	b.n	800c412 <spi_cmd_rsp+0xe2>
		}
	}
#endif

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800c37a:	230a      	movs	r3, #10
 800c37c:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800c37e:	f107 030d 	add.w	r3, r7, #13
 800c382:	2101      	movs	r1, #1
 800c384:	4618      	mov	r0, r3
 800c386:	f7ff fde3 	bl	800bf50 <nmi_spi_read>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00e      	beq.n	800c3ae <spi_cmd_rsp+0x7e>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
 800c390:	f44f 72a3 	mov.w	r2, #326	@ 0x146
 800c394:	4922      	ldr	r1, [pc, #136]	@ (800c420 <spi_cmd_rsp+0xf0>)
 800c396:	4823      	ldr	r0, [pc, #140]	@ (800c424 <spi_cmd_rsp+0xf4>)
 800c398:	f001 fe70 	bl	800e07c <iprintf>
 800c39c:	4822      	ldr	r0, [pc, #136]	@ (800c428 <spi_cmd_rsp+0xf8>)
 800c39e:	f001 fedd 	bl	800e15c <puts>
 800c3a2:	200d      	movs	r0, #13
 800c3a4:	f001 fe7c 	bl	800e0a0 <putchar>
			result = N_FAIL;
 800c3a8:	23ff      	movs	r3, #255	@ 0xff
 800c3aa:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800c3ac:	e031      	b.n	800c412 <spi_cmd_rsp+0xe2>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 800c3ae:	7b7b      	ldrb	r3, [r7, #13]
 800c3b0:	79fa      	ldrb	r2, [r7, #7]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d007      	beq.n	800c3c6 <spi_cmd_rsp+0x96>
 800c3b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3ba:	b2da      	uxtb	r2, r3
 800c3bc:	3a01      	subs	r2, #1
 800c3be:	b2d2      	uxtb	r2, r2
 800c3c0:	73ba      	strb	r2, [r7, #14]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	dcdb      	bgt.n	800c37e <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800c3c6:	230a      	movs	r3, #10
 800c3c8:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800c3ca:	f107 030d 	add.w	r3, r7, #13
 800c3ce:	2101      	movs	r1, #1
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7ff fdbd 	bl	800bf50 <nmi_spi_read>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00e      	beq.n	800c3fa <spi_cmd_rsp+0xca>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
 800c3dc:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 800c3e0:	490f      	ldr	r1, [pc, #60]	@ (800c420 <spi_cmd_rsp+0xf0>)
 800c3e2:	4810      	ldr	r0, [pc, #64]	@ (800c424 <spi_cmd_rsp+0xf4>)
 800c3e4:	f001 fe4a 	bl	800e07c <iprintf>
 800c3e8:	480f      	ldr	r0, [pc, #60]	@ (800c428 <spi_cmd_rsp+0xf8>)
 800c3ea:	f001 feb7 	bl	800e15c <puts>
 800c3ee:	200d      	movs	r0, #13
 800c3f0:	f001 fe56 	bl	800e0a0 <putchar>
			result = N_FAIL;
 800c3f4:	23ff      	movs	r3, #255	@ 0xff
 800c3f6:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800c3f8:	e00b      	b.n	800c412 <spi_cmd_rsp+0xe2>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 800c3fa:	7b7b      	ldrb	r3, [r7, #13]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d007      	beq.n	800c410 <spi_cmd_rsp+0xe0>
 800c400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c404:	b2da      	uxtb	r2, r3
 800c406:	3a01      	subs	r2, #1
 800c408:	b2d2      	uxtb	r2, r2
 800c40a:	73ba      	strb	r2, [r7, #14]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	dcdc      	bgt.n	800c3ca <spi_cmd_rsp+0x9a>

_fail_:
 800c410:	bf00      	nop

	return result;
 800c412:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c416:	4618      	mov	r0, r3
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	080102e4 	.word	0x080102e4
 800c424:	0800f8ac 	.word	0x0800f8ac
 800c428:	0800f93c 	.word	0x0800f93c

0800c42c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af02      	add	r7, sp, #8
	//M2M_INFO("Reset Spi\n");
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800c432:	2300      	movs	r3, #0
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	2300      	movs	r3, #0
 800c438:	2200      	movs	r2, #0
 800c43a:	2100      	movs	r1, #0
 800c43c:	20cf      	movs	r0, #207	@ 0xcf
 800c43e:	f7ff fdef 	bl	800c020 <spi_cmd>

	if(spi_cmd_rsp(CMD_RESET) != N_OK) {
 800c442:	20cf      	movs	r0, #207	@ 0xcf
 800c444:	f7ff ff74 	bl	800c330 <spi_cmd_rsp>
 800c448:	4603      	mov	r3, r0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d028      	beq.n	800c4a0 <nm_spi_reset+0x74>
		// Reset command failed, need to send repeated 1's until reset occurs
		uint8 w_buf[8] = {0xFF};
 800c44e:	23ff      	movs	r3, #255	@ 0xff
 800c450:	60bb      	str	r3, [r7, #8]
 800c452:	2300      	movs	r3, #0
 800c454:	60fb      	str	r3, [r7, #12]
		uint8 r_buf[8];
		M2M_ERR("[nmi spi]: Failed rst cmd response\n");
 800c456:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800c45a:	4914      	ldr	r1, [pc, #80]	@ (800c4ac <nm_spi_reset+0x80>)
 800c45c:	4814      	ldr	r0, [pc, #80]	@ (800c4b0 <nm_spi_reset+0x84>)
 800c45e:	f001 fe0d 	bl	800e07c <iprintf>
 800c462:	4814      	ldr	r0, [pc, #80]	@ (800c4b4 <nm_spi_reset+0x88>)
 800c464:	f001 fe7a 	bl	800e15c <puts>
 800c468:	200d      	movs	r0, #13
 800c46a:	f001 fe19 	bl	800e0a0 <putchar>
		nmi_spi_writeread(w_buf, r_buf, 8);
 800c46e:	4639      	mov	r1, r7
 800c470:	f107 0308 	add.w	r3, r7, #8
 800c474:	2208      	movs	r2, #8
 800c476:	4618      	mov	r0, r3
 800c478:	f7ff fd8c 	bl	800bf94 <nmi_spi_writeread>
		if(r_buf[7] != 0xFF)
 800c47c:	79fb      	ldrb	r3, [r7, #7]
 800c47e:	2bff      	cmp	r3, #255	@ 0xff
 800c480:	d00e      	beq.n	800c4a0 <nm_spi_reset+0x74>
		{
			M2M_ERR("[nmi spi]: Failed repeated reset\n");
 800c482:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c486:	4909      	ldr	r1, [pc, #36]	@ (800c4ac <nm_spi_reset+0x80>)
 800c488:	4809      	ldr	r0, [pc, #36]	@ (800c4b0 <nm_spi_reset+0x84>)
 800c48a:	f001 fdf7 	bl	800e07c <iprintf>
 800c48e:	480a      	ldr	r0, [pc, #40]	@ (800c4b8 <nm_spi_reset+0x8c>)
 800c490:	f001 fe64 	bl	800e15c <puts>
 800c494:	200d      	movs	r0, #13
 800c496:	f001 fe03 	bl	800e0a0 <putchar>
			return N_FAIL;
 800c49a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c49e:	e000      	b.n	800c4a2 <nm_spi_reset+0x76>
		}
	}
	return N_OK;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3710      	adds	r7, #16
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	080102f0 	.word	0x080102f0
 800c4b0:	0800f8ac 	.word	0x0800f8ac
 800c4b4:	0800f970 	.word	0x0800f970
 800c4b8:	0800f994 	.word	0x0800f994

0800c4bc <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b086      	sub	sp, #24
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	807b      	strh	r3, [r7, #2]
 800c4c8:	4613      	mov	r3, r2
 800c4ca:	707b      	strb	r3, [r7, #1]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	747b      	strb	r3, [r7, #17]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	82bb      	strh	r3, [r7, #20]
	do {
		if (sz <= DATA_PKT_SZ)
 800c4d4:	887b      	ldrh	r3, [r7, #2]
 800c4d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4da:	d802      	bhi.n	800c4e2 <spi_data_read+0x26>
			nbytes = sz;
 800c4dc:	887b      	ldrh	r3, [r7, #2]
 800c4de:	827b      	strh	r3, [r7, #18]
 800c4e0:	e002      	b.n	800c4e8 <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800c4e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c4e6:	827b      	strh	r3, [r7, #18]

		/**
			Data Response header
		**/
		retry = SPI_RESP_RETRY_COUNT;
 800c4e8:	230a      	movs	r3, #10
 800c4ea:	82fb      	strh	r3, [r7, #22]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800c4ec:	f107 030b 	add.w	r3, r7, #11
 800c4f0:	2101      	movs	r1, #1
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7ff fd2c 	bl	800bf50 <nmi_spi_read>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00e      	beq.n	800c51c <spi_data_read+0x60>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
 800c4fe:	f44f 72c5 	mov.w	r2, #394	@ 0x18a
 800c502:	4942      	ldr	r1, [pc, #264]	@ (800c60c <spi_data_read+0x150>)
 800c504:	4842      	ldr	r0, [pc, #264]	@ (800c610 <spi_data_read+0x154>)
 800c506:	f001 fdb9 	bl	800e07c <iprintf>
 800c50a:	4842      	ldr	r0, [pc, #264]	@ (800c614 <spi_data_read+0x158>)
 800c50c:	f001 fe26 	bl	800e15c <puts>
 800c510:	200d      	movs	r0, #13
 800c512:	f001 fdc5 	bl	800e0a0 <putchar>
				result = N_FAIL;
 800c516:	23ff      	movs	r3, #255	@ 0xff
 800c518:	747b      	strb	r3, [r7, #17]
				break;
 800c51a:	e00e      	b.n	800c53a <spi_data_read+0x7e>
			}
            if((rsp & 0xf0) == 0xf0)
 800c51c:	7afb      	ldrb	r3, [r7, #11]
 800c51e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c522:	2bf0      	cmp	r3, #240	@ 0xf0
 800c524:	d008      	beq.n	800c538 <spi_data_read+0x7c>
				break;
		} while (retry--);
 800c526:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c52a:	b29a      	uxth	r2, r3
 800c52c:	3a01      	subs	r2, #1
 800c52e:	b292      	uxth	r2, r2
 800c530:	82fa      	strh	r2, [r7, #22]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1da      	bne.n	800c4ec <spi_data_read+0x30>
 800c536:	e000      	b.n	800c53a <spi_data_read+0x7e>
				break;
 800c538:	bf00      	nop

		if (result == N_FAIL)
 800c53a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800c53e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c542:	d05c      	beq.n	800c5fe <spi_data_read+0x142>
			break;

		if (retry <= 0) {
 800c544:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	dc10      	bgt.n	800c56e <spi_data_read+0xb2>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
 800c54c:	f44f 72cb 	mov.w	r2, #406	@ 0x196
 800c550:	492e      	ldr	r1, [pc, #184]	@ (800c60c <spi_data_read+0x150>)
 800c552:	482f      	ldr	r0, [pc, #188]	@ (800c610 <spi_data_read+0x154>)
 800c554:	f001 fd92 	bl	800e07c <iprintf>
 800c558:	7afb      	ldrb	r3, [r7, #11]
 800c55a:	4619      	mov	r1, r3
 800c55c:	482e      	ldr	r0, [pc, #184]	@ (800c618 <spi_data_read+0x15c>)
 800c55e:	f001 fd8d 	bl	800e07c <iprintf>
 800c562:	200d      	movs	r0, #13
 800c564:	f001 fd9c 	bl	800e0a0 <putchar>
			result = N_FAIL;
 800c568:	23ff      	movs	r3, #255	@ 0xff
 800c56a:	747b      	strb	r3, [r7, #17]
			break;
 800c56c:	e048      	b.n	800c600 <spi_data_read+0x144>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 800c56e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	4413      	add	r3, r2
 800c576:	8a7a      	ldrh	r2, [r7, #18]
 800c578:	4611      	mov	r1, r2
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7ff fce8 	bl	800bf50 <nmi_spi_read>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00e      	beq.n	800c5a4 <spi_data_read+0xe8>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
 800c586:	f240 129f 	movw	r2, #415	@ 0x19f
 800c58a:	4920      	ldr	r1, [pc, #128]	@ (800c60c <spi_data_read+0x150>)
 800c58c:	4820      	ldr	r0, [pc, #128]	@ (800c610 <spi_data_read+0x154>)
 800c58e:	f001 fd75 	bl	800e07c <iprintf>
 800c592:	4822      	ldr	r0, [pc, #136]	@ (800c61c <spi_data_read+0x160>)
 800c594:	f001 fde2 	bl	800e15c <puts>
 800c598:	200d      	movs	r0, #13
 800c59a:	f001 fd81 	bl	800e0a0 <putchar>
			result = N_FAIL;
 800c59e:	23ff      	movs	r3, #255	@ 0xff
 800c5a0:	747b      	strb	r3, [r7, #17]
			break;
 800c5a2:	e02d      	b.n	800c600 <spi_data_read+0x144>
		}
		if(!clockless)
 800c5a4:	787b      	ldrb	r3, [r7, #1]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d11b      	bne.n	800c5e2 <spi_data_read+0x126>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
 800c5aa:	4b1d      	ldr	r3, [pc, #116]	@ (800c620 <spi_data_read+0x164>)
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d117      	bne.n	800c5e2 <spi_data_read+0x126>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 800c5b2:	f107 030c 	add.w	r3, r7, #12
 800c5b6:	2102      	movs	r1, #2
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7ff fcc9 	bl	800bf50 <nmi_spi_read>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00e      	beq.n	800c5e2 <spi_data_read+0x126>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
 800c5c4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800c5c8:	4910      	ldr	r1, [pc, #64]	@ (800c60c <spi_data_read+0x150>)
 800c5ca:	4811      	ldr	r0, [pc, #68]	@ (800c610 <spi_data_read+0x154>)
 800c5cc:	f001 fd56 	bl	800e07c <iprintf>
 800c5d0:	4814      	ldr	r0, [pc, #80]	@ (800c624 <spi_data_read+0x168>)
 800c5d2:	f001 fdc3 	bl	800e15c <puts>
 800c5d6:	200d      	movs	r0, #13
 800c5d8:	f001 fd62 	bl	800e0a0 <putchar>
					result = N_FAIL;
 800c5dc:	23ff      	movs	r3, #255	@ 0xff
 800c5de:	747b      	strb	r3, [r7, #17]
					break;
 800c5e0:	e00e      	b.n	800c600 <spi_data_read+0x144>
				}
			}
		}
		ix += nbytes;
 800c5e2:	8aba      	ldrh	r2, [r7, #20]
 800c5e4:	8a7b      	ldrh	r3, [r7, #18]
 800c5e6:	4413      	add	r3, r2
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	82bb      	strh	r3, [r7, #20]
		sz -= nbytes;
 800c5ec:	8a7b      	ldrh	r3, [r7, #18]
 800c5ee:	887a      	ldrh	r2, [r7, #2]
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	807b      	strh	r3, [r7, #2]

	} while (sz);
 800c5f4:	887b      	ldrh	r3, [r7, #2]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f47f af6c 	bne.w	800c4d4 <spi_data_read+0x18>
 800c5fc:	e000      	b.n	800c600 <spi_data_read+0x144>
			break;
 800c5fe:	bf00      	nop

	return result;
 800c600:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800c604:	4618      	mov	r0, r3
 800c606:	3718      	adds	r7, #24
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	08010300 	.word	0x08010300
 800c610:	0800f8ac 	.word	0x0800f8ac
 800c614:	0800f9b8 	.word	0x0800f9b8
 800c618:	0800f9ec 	.word	0x0800f9ec
 800c61c:	0800fa1c 	.word	0x0800fa1c
 800c620:	20000c14 	.word	0x20000c14
 800c624:	0800fa4c 	.word	0x0800fa4c

0800c628 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b086      	sub	sp, #24
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	460b      	mov	r3, r1
 800c632:	807b      	strh	r3, [r7, #2]
    sint16 ix = 0;
 800c634:	2300      	movs	r3, #0
 800c636:	82fb      	strh	r3, [r7, #22]
	uint16 nbytes;
    sint8 result = N_OK;
 800c638:	2300      	movs	r3, #0
 800c63a:	74fb      	strb	r3, [r7, #19]
	uint8 cmd, order, crc[2] = {0};
 800c63c:	2300      	movs	r3, #0
 800c63e:	81bb      	strh	r3, [r7, #12]

	/**
		Data
	**/
	do {
		if (sz <= DATA_PKT_SZ)
 800c640:	887b      	ldrh	r3, [r7, #2]
 800c642:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c646:	d802      	bhi.n	800c64e <spi_data_write+0x26>
			nbytes = sz;
 800c648:	887b      	ldrh	r3, [r7, #2]
 800c64a:	82bb      	strh	r3, [r7, #20]
 800c64c:	e002      	b.n	800c654 <spi_data_write+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800c64e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c652:	82bb      	strh	r3, [r7, #20]

		/**
			Write command
		**/
		cmd = 0xf0;
 800c654:	23f0      	movs	r3, #240	@ 0xf0
 800c656:	747b      	strb	r3, [r7, #17]
		if (ix == 0)  {
 800c658:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d109      	bne.n	800c674 <spi_data_write+0x4c>
			if (sz <= DATA_PKT_SZ)
 800c660:	887b      	ldrh	r3, [r7, #2]
 800c662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c666:	d802      	bhi.n	800c66e <spi_data_write+0x46>
				order = 0x3;
 800c668:	2303      	movs	r3, #3
 800c66a:	74bb      	strb	r3, [r7, #18]
 800c66c:	e00b      	b.n	800c686 <spi_data_write+0x5e>
			else
				order = 0x1;
 800c66e:	2301      	movs	r3, #1
 800c670:	74bb      	strb	r3, [r7, #18]
 800c672:	e008      	b.n	800c686 <spi_data_write+0x5e>
		} else {
			if (sz <= DATA_PKT_SZ)
 800c674:	887b      	ldrh	r3, [r7, #2]
 800c676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c67a:	d802      	bhi.n	800c682 <spi_data_write+0x5a>
				order = 0x3;
 800c67c:	2303      	movs	r3, #3
 800c67e:	74bb      	strb	r3, [r7, #18]
 800c680:	e001      	b.n	800c686 <spi_data_write+0x5e>
			else
				order = 0x2;
 800c682:	2302      	movs	r3, #2
 800c684:	74bb      	strb	r3, [r7, #18]
		}
		cmd |= order;
 800c686:	7c7a      	ldrb	r2, [r7, #17]
 800c688:	7cbb      	ldrb	r3, [r7, #18]
 800c68a:	4313      	orrs	r3, r2
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	747b      	strb	r3, [r7, #17]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 800c690:	f107 0311 	add.w	r3, r7, #17
 800c694:	2101      	movs	r1, #1
 800c696:	4618      	mov	r0, r3
 800c698:	f7ff fc6b 	bl	800bf72 <nmi_spi_write>
 800c69c:	4603      	mov	r3, r0
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d00e      	beq.n	800c6c0 <spi_data_write+0x98>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
 800c6a2:	f44f 72ed 	mov.w	r2, #474	@ 0x1da
 800c6a6:	492b      	ldr	r1, [pc, #172]	@ (800c754 <spi_data_write+0x12c>)
 800c6a8:	482b      	ldr	r0, [pc, #172]	@ (800c758 <spi_data_write+0x130>)
 800c6aa:	f001 fce7 	bl	800e07c <iprintf>
 800c6ae:	482b      	ldr	r0, [pc, #172]	@ (800c75c <spi_data_write+0x134>)
 800c6b0:	f001 fd54 	bl	800e15c <puts>
 800c6b4:	200d      	movs	r0, #13
 800c6b6:	f001 fcf3 	bl	800e0a0 <putchar>
			result = N_FAIL;
 800c6ba:	23ff      	movs	r3, #255	@ 0xff
 800c6bc:	74fb      	strb	r3, [r7, #19]
			break;
 800c6be:	e043      	b.n	800c748 <spi_data_write+0x120>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 800c6c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	8aba      	ldrh	r2, [r7, #20]
 800c6ca:	4611      	mov	r1, r2
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7ff fc50 	bl	800bf72 <nmi_spi_write>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d00e      	beq.n	800c6f6 <spi_data_write+0xce>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
 800c6d8:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800c6dc:	491d      	ldr	r1, [pc, #116]	@ (800c754 <spi_data_write+0x12c>)
 800c6de:	481e      	ldr	r0, [pc, #120]	@ (800c758 <spi_data_write+0x130>)
 800c6e0:	f001 fccc 	bl	800e07c <iprintf>
 800c6e4:	481e      	ldr	r0, [pc, #120]	@ (800c760 <spi_data_write+0x138>)
 800c6e6:	f001 fd39 	bl	800e15c <puts>
 800c6ea:	200d      	movs	r0, #13
 800c6ec:	f001 fcd8 	bl	800e0a0 <putchar>
			result = N_FAIL;
 800c6f0:	23ff      	movs	r3, #255	@ 0xff
 800c6f2:	74fb      	strb	r3, [r7, #19]
			break;
 800c6f4:	e028      	b.n	800c748 <spi_data_write+0x120>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
 800c6f6:	4b1b      	ldr	r3, [pc, #108]	@ (800c764 <spi_data_write+0x13c>)
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d117      	bne.n	800c72e <spi_data_write+0x106>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 800c6fe:	f107 030c 	add.w	r3, r7, #12
 800c702:	2102      	movs	r1, #2
 800c704:	4618      	mov	r0, r3
 800c706:	f7ff fc34 	bl	800bf72 <nmi_spi_write>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d00e      	beq.n	800c72e <spi_data_write+0x106>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
 800c710:	f240 12ed 	movw	r2, #493	@ 0x1ed
 800c714:	490f      	ldr	r1, [pc, #60]	@ (800c754 <spi_data_write+0x12c>)
 800c716:	4810      	ldr	r0, [pc, #64]	@ (800c758 <spi_data_write+0x130>)
 800c718:	f001 fcb0 	bl	800e07c <iprintf>
 800c71c:	4812      	ldr	r0, [pc, #72]	@ (800c768 <spi_data_write+0x140>)
 800c71e:	f001 fd1d 	bl	800e15c <puts>
 800c722:	200d      	movs	r0, #13
 800c724:	f001 fcbc 	bl	800e0a0 <putchar>
				result = N_FAIL;
 800c728:	23ff      	movs	r3, #255	@ 0xff
 800c72a:	74fb      	strb	r3, [r7, #19]
				break;
 800c72c:	e00c      	b.n	800c748 <spi_data_write+0x120>
			}
		}

		ix += nbytes;
 800c72e:	8afa      	ldrh	r2, [r7, #22]
 800c730:	8abb      	ldrh	r3, [r7, #20]
 800c732:	4413      	add	r3, r2
 800c734:	b29b      	uxth	r3, r3
 800c736:	82fb      	strh	r3, [r7, #22]
		sz -= nbytes;
 800c738:	887a      	ldrh	r2, [r7, #2]
 800c73a:	8abb      	ldrh	r3, [r7, #20]
 800c73c:	1ad3      	subs	r3, r2, r3
 800c73e:	807b      	strh	r3, [r7, #2]
	} while (sz);
 800c740:	887b      	ldrh	r3, [r7, #2]
 800c742:	2b00      	cmp	r3, #0
 800c744:	f47f af7c 	bne.w	800c640 <spi_data_write+0x18>


	return result;
 800c748:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3718      	adds	r7, #24
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	08010310 	.word	0x08010310
 800c758:	0800f8ac 	.word	0x0800f8ac
 800c75c:	0800fa80 	.word	0x0800fa80
 800c760:	0800fab8 	.word	0x0800fab8
 800c764:	20000c14 	.word	0x20000c14
 800c768:	0800faec 	.word	0x0800faec

0800c76c <nm_spi_write_reg>:
 *  @param[in]  u32Val
 *                  Value to be written to the register
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_write_reg(uint32 addr, uint32 u32data)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b086      	sub	sp, #24
 800c770:	af02      	add	r7, sp, #8
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800c776:	230a      	movs	r3, #10
 800c778:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 800c77a:	2300      	movs	r3, #0
 800c77c:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_WRITE;
 800c77e:	23c9      	movs	r3, #201	@ 0xc9
 800c780:	737b      	strb	r3, [r7, #13]
	uint8 clockless = 0;
 800c782:	2300      	movs	r3, #0
 800c784:	733b      	strb	r3, [r7, #12]
	
_RETRY_:	
	if (addr <= 0x30)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2b30      	cmp	r3, #48	@ 0x30
 800c78a:	d803      	bhi.n	800c794 <nm_spi_write_reg+0x28>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
 800c78c:	23c3      	movs	r3, #195	@ 0xc3
 800c78e:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 800c790:	2301      	movs	r3, #1
 800c792:	733b      	strb	r3, [r7, #12]
	}

	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 800c794:	7b78      	ldrb	r0, [r7, #13]
 800c796:	7b3b      	ldrb	r3, [r7, #12]
 800c798:	9300      	str	r3, [sp, #0]
 800c79a:	2304      	movs	r3, #4
 800c79c:	683a      	ldr	r2, [r7, #0]
 800c79e:	6879      	ldr	r1, [r7, #4]
 800c7a0:	f7ff fc3e 	bl	800c020 <spi_cmd>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800c7a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d00d      	beq.n	800c7cc <nm_spi_write_reg+0x60>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
 800c7b0:	f240 2223 	movw	r2, #547	@ 0x223
 800c7b4:	492a      	ldr	r1, [pc, #168]	@ (800c860 <nm_spi_write_reg+0xf4>)
 800c7b6:	482b      	ldr	r0, [pc, #172]	@ (800c864 <nm_spi_write_reg+0xf8>)
 800c7b8:	f001 fc60 	bl	800e07c <iprintf>
 800c7bc:	6879      	ldr	r1, [r7, #4]
 800c7be:	482a      	ldr	r0, [pc, #168]	@ (800c868 <nm_spi_write_reg+0xfc>)
 800c7c0:	f001 fc5c 	bl	800e07c <iprintf>
 800c7c4:	200d      	movs	r0, #13
 800c7c6:	f001 fc6b 	bl	800e0a0 <putchar>
		goto _FAIL_;
 800c7ca:	e018      	b.n	800c7fe <nm_spi_write_reg+0x92>
	}

	result = spi_cmd_rsp(cmd);
 800c7cc:	7b7b      	ldrb	r3, [r7, #13]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7ff fdae 	bl	800c330 <spi_cmd_rsp>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800c7d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d00d      	beq.n	800c7fc <nm_spi_write_reg+0x90>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
 800c7e0:	f240 2229 	movw	r2, #553	@ 0x229
 800c7e4:	491e      	ldr	r1, [pc, #120]	@ (800c860 <nm_spi_write_reg+0xf4>)
 800c7e6:	481f      	ldr	r0, [pc, #124]	@ (800c864 <nm_spi_write_reg+0xf8>)
 800c7e8:	f001 fc48 	bl	800e07c <iprintf>
 800c7ec:	6879      	ldr	r1, [r7, #4]
 800c7ee:	481f      	ldr	r0, [pc, #124]	@ (800c86c <nm_spi_write_reg+0x100>)
 800c7f0:	f001 fc44 	bl	800e07c <iprintf>
 800c7f4:	200d      	movs	r0, #13
 800c7f6:	f001 fc53 	bl	800e0a0 <putchar>
		goto _FAIL_;
 800c7fa:	e000      	b.n	800c7fe <nm_spi_write_reg+0x92>
	}
_FAIL_:
 800c7fc:	bf00      	nop
	if(result != N_OK)
 800c7fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d026      	beq.n	800c854 <nm_spi_write_reg+0xe8>
	{
		nm_bsp_sleep(1);
 800c806:	2001      	movs	r0, #1
 800c808:	f7fd f80a 	bl	8009820 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800c80c:	2300      	movs	r3, #0
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	2300      	movs	r3, #0
 800c812:	2200      	movs	r2, #0
 800c814:	2100      	movs	r1, #0
 800c816:	20cf      	movs	r0, #207	@ 0xcf
 800c818:	f7ff fc02 	bl	800c020 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800c81c:	20cf      	movs	r0, #207	@ 0xcf
 800c81e:	f7ff fd87 	bl	800c330 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %x %x\n",retry,addr,u32data);
 800c822:	f240 2232 	movw	r2, #562	@ 0x232
 800c826:	490e      	ldr	r1, [pc, #56]	@ (800c860 <nm_spi_write_reg+0xf4>)
 800c828:	480e      	ldr	r0, [pc, #56]	@ (800c864 <nm_spi_write_reg+0xf8>)
 800c82a:	f001 fc27 	bl	800e07c <iprintf>
 800c82e:	7bf9      	ldrb	r1, [r7, #15]
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	480e      	ldr	r0, [pc, #56]	@ (800c870 <nm_spi_write_reg+0x104>)
 800c836:	f001 fc21 	bl	800e07c <iprintf>
 800c83a:	200d      	movs	r0, #13
 800c83c:	f001 fc30 	bl	800e0a0 <putchar>
		nm_bsp_sleep(1);
 800c840:	2001      	movs	r0, #1
 800c842:	f7fc ffed 	bl	8009820 <nm_bsp_sleep>
		retry--;
 800c846:	7bfb      	ldrb	r3, [r7, #15]
 800c848:	3b01      	subs	r3, #1
 800c84a:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800c84c:	7bfb      	ldrb	r3, [r7, #15]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d000      	beq.n	800c854 <nm_spi_write_reg+0xe8>
 800c852:	e798      	b.n	800c786 <nm_spi_write_reg+0x1a>
	}

	return result;
 800c854:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3710      	adds	r7, #16
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	08010320 	.word	0x08010320
 800c864:	0800f8ac 	.word	0x0800f8ac
 800c868:	0800fb24 	.word	0x0800fb24
 800c86c:	0800fb50 	.word	0x0800fb50
 800c870:	0800fb88 	.word	0x0800fb88

0800c874 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b088      	sub	sp, #32
 800c878:	af02      	add	r7, sp, #8
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	4613      	mov	r3, r2
 800c880:	80fb      	strh	r3, [r7, #6]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800c882:	230a      	movs	r3, #10
 800c884:	75bb      	strb	r3, [r7, #22]
	uint8 cmd = CMD_DMA_EXT_WRITE;
 800c886:	23c7      	movs	r3, #199	@ 0xc7
 800c888:	757b      	strb	r3, [r7, #21]
_RETRY_:
	/**
		Command
	**/
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
 800c88a:	88fb      	ldrh	r3, [r7, #6]
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d101      	bne.n	800c894 <nm_spi_write+0x20>
		size = 2;
 800c890:	2302      	movs	r3, #2
 800c892:	80fb      	strh	r3, [r7, #6]

	result = spi_cmd(cmd, addr, 0, size,0);
 800c894:	88fb      	ldrh	r3, [r7, #6]
 800c896:	7d78      	ldrb	r0, [r7, #21]
 800c898:	2200      	movs	r2, #0
 800c89a:	9200      	str	r2, [sp, #0]
 800c89c:	2200      	movs	r2, #0
 800c89e:	68f9      	ldr	r1, [r7, #12]
 800c8a0:	f7ff fbbe 	bl	800c020 <spi_cmd>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800c8a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d00d      	beq.n	800c8cc <nm_spi_write+0x58>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
 800c8b0:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 800c8b4:	4942      	ldr	r1, [pc, #264]	@ (800c9c0 <nm_spi_write+0x14c>)
 800c8b6:	4843      	ldr	r0, [pc, #268]	@ (800c9c4 <nm_spi_write+0x150>)
 800c8b8:	f001 fbe0 	bl	800e07c <iprintf>
 800c8bc:	68f9      	ldr	r1, [r7, #12]
 800c8be:	4842      	ldr	r0, [pc, #264]	@ (800c9c8 <nm_spi_write+0x154>)
 800c8c0:	f001 fbdc 	bl	800e07c <iprintf>
 800c8c4:	200d      	movs	r0, #13
 800c8c6:	f001 fbeb 	bl	800e0a0 <putchar>
		goto _FAIL_;
 800c8ca:	e047      	b.n	800c95c <nm_spi_write+0xe8>
	}

	result = spi_cmd_rsp(cmd);
 800c8cc:	7d7b      	ldrb	r3, [r7, #21]
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7ff fd2e 	bl	800c330 <spi_cmd_rsp>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800c8d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d00d      	beq.n	800c8fc <nm_spi_write+0x88>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
 800c8e0:	f240 2252 	movw	r2, #594	@ 0x252
 800c8e4:	4936      	ldr	r1, [pc, #216]	@ (800c9c0 <nm_spi_write+0x14c>)
 800c8e6:	4837      	ldr	r0, [pc, #220]	@ (800c9c4 <nm_spi_write+0x150>)
 800c8e8:	f001 fbc8 	bl	800e07c <iprintf>
 800c8ec:	68f9      	ldr	r1, [r7, #12]
 800c8ee:	4837      	ldr	r0, [pc, #220]	@ (800c9cc <nm_spi_write+0x158>)
 800c8f0:	f001 fbc4 	bl	800e07c <iprintf>
 800c8f4:	200d      	movs	r0, #13
 800c8f6:	f001 fbd3 	bl	800e0a0 <putchar>
		goto _FAIL_;
 800c8fa:	e02f      	b.n	800c95c <nm_spi_write+0xe8>
	}

	/**
		Data
	**/
	result = spi_data_write(buf, size);
 800c8fc:	88fb      	ldrh	r3, [r7, #6]
 800c8fe:	4619      	mov	r1, r3
 800c900:	68b8      	ldr	r0, [r7, #8]
 800c902:	f7ff fe91 	bl	800c628 <spi_data_write>
 800c906:	4603      	mov	r3, r0
 800c908:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800c90a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00c      	beq.n	800c92c <nm_spi_write+0xb8>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
 800c912:	f240 225b 	movw	r2, #603	@ 0x25b
 800c916:	492a      	ldr	r1, [pc, #168]	@ (800c9c0 <nm_spi_write+0x14c>)
 800c918:	482a      	ldr	r0, [pc, #168]	@ (800c9c4 <nm_spi_write+0x150>)
 800c91a:	f001 fbaf 	bl	800e07c <iprintf>
 800c91e:	482c      	ldr	r0, [pc, #176]	@ (800c9d0 <nm_spi_write+0x15c>)
 800c920:	f001 fc1c 	bl	800e15c <puts>
 800c924:	200d      	movs	r0, #13
 800c926:	f001 fbbb 	bl	800e0a0 <putchar>
		goto _FAIL_;
 800c92a:	e017      	b.n	800c95c <nm_spi_write+0xe8>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
 800c92c:	7d7b      	ldrb	r3, [r7, #21]
 800c92e:	4618      	mov	r0, r3
 800c930:	f7ff fc9e 	bl	800c270 <spi_data_rsp>
 800c934:	4603      	mov	r3, r0
 800c936:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800c938:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00c      	beq.n	800c95a <nm_spi_write+0xe6>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
 800c940:	f240 2263 	movw	r2, #611	@ 0x263
 800c944:	491e      	ldr	r1, [pc, #120]	@ (800c9c0 <nm_spi_write+0x14c>)
 800c946:	481f      	ldr	r0, [pc, #124]	@ (800c9c4 <nm_spi_write+0x150>)
 800c948:	f001 fb98 	bl	800e07c <iprintf>
 800c94c:	4820      	ldr	r0, [pc, #128]	@ (800c9d0 <nm_spi_write+0x15c>)
 800c94e:	f001 fc05 	bl	800e15c <puts>
 800c952:	200d      	movs	r0, #13
 800c954:	f001 fba4 	bl	800e0a0 <putchar>
		goto _FAIL_;
 800c958:	e000      	b.n	800c95c <nm_spi_write+0xe8>
	}
	
_FAIL_:
 800c95a:	bf00      	nop
	if(result != N_OK)
 800c95c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d026      	beq.n	800c9b2 <nm_spi_write+0x13e>
	{
		nm_bsp_sleep(1);
 800c964:	2001      	movs	r0, #1
 800c966:	f7fc ff5b 	bl	8009820 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800c96a:	2300      	movs	r3, #0
 800c96c:	9300      	str	r3, [sp, #0]
 800c96e:	2300      	movs	r3, #0
 800c970:	2200      	movs	r2, #0
 800c972:	2100      	movs	r1, #0
 800c974:	20cf      	movs	r0, #207	@ 0xcf
 800c976:	f7ff fb53 	bl	800c020 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800c97a:	20cf      	movs	r0, #207	@ 0xcf
 800c97c:	f7ff fcd8 	bl	800c330 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %x %d\n",retry,addr,size);
 800c980:	f240 226d 	movw	r2, #621	@ 0x26d
 800c984:	490e      	ldr	r1, [pc, #56]	@ (800c9c0 <nm_spi_write+0x14c>)
 800c986:	480f      	ldr	r0, [pc, #60]	@ (800c9c4 <nm_spi_write+0x150>)
 800c988:	f001 fb78 	bl	800e07c <iprintf>
 800c98c:	7db9      	ldrb	r1, [r7, #22]
 800c98e:	88fb      	ldrh	r3, [r7, #6]
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	4810      	ldr	r0, [pc, #64]	@ (800c9d4 <nm_spi_write+0x160>)
 800c994:	f001 fb72 	bl	800e07c <iprintf>
 800c998:	200d      	movs	r0, #13
 800c99a:	f001 fb81 	bl	800e0a0 <putchar>
		nm_bsp_sleep(1);
 800c99e:	2001      	movs	r0, #1
 800c9a0:	f7fc ff3e 	bl	8009820 <nm_bsp_sleep>
		retry--;
 800c9a4:	7dbb      	ldrb	r3, [r7, #22]
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800c9aa:	7dbb      	ldrb	r3, [r7, #22]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d000      	beq.n	800c9b2 <nm_spi_write+0x13e>
 800c9b0:	e76b      	b.n	800c88a <nm_spi_write+0x16>
	}


	return result;
 800c9b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3718      	adds	r7, #24
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	08010334 	.word	0x08010334
 800c9c4:	0800f8ac 	.word	0x0800f8ac
 800c9c8:	0800fba4 	.word	0x0800fba4
 800c9cc:	0800fbd4 	.word	0x0800fbd4
 800c9d0:	0800fc0c 	.word	0x0800fc0c
 800c9d4:	0800fc34 	.word	0x0800fc34

0800c9d8 <nm_spi_read_reg_with_ret>:
 *  @param[out] pu32RetVal
 *                  Pointer to u32 variable used to return the read value
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_read_reg_with_ret(uint32 addr, uint32 *u32data)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af02      	add	r7, sp, #8
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800c9e2:	230a      	movs	r3, #10
 800c9e4:	73fb      	strb	r3, [r7, #15]
	volatile sint8 result = N_OK;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	733b      	strb	r3, [r7, #12]
	uint8 cmd = CMD_SINGLE_READ;
 800c9ea:	23ca      	movs	r3, #202	@ 0xca
 800c9ec:	73bb      	strb	r3, [r7, #14]
	uint8 tmp[4];
	uint8 clockless = 0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	737b      	strb	r3, [r7, #13]

_RETRY_:

	if (addr <= 0xff)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2bff      	cmp	r3, #255	@ 0xff
 800c9f6:	d803      	bhi.n	800ca00 <nm_spi_read_reg_with_ret+0x28>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
 800c9f8:	23c4      	movs	r3, #196	@ 0xc4
 800c9fa:	73bb      	strb	r3, [r7, #14]
		clockless = 1;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	737b      	strb	r3, [r7, #13]
	}

	result = spi_cmd(cmd, addr, 0, 4, clockless);
 800ca00:	7bb8      	ldrb	r0, [r7, #14]
 800ca02:	7b7b      	ldrb	r3, [r7, #13]
 800ca04:	9300      	str	r3, [sp, #0]
 800ca06:	2304      	movs	r3, #4
 800ca08:	2200      	movs	r2, #0
 800ca0a:	6879      	ldr	r1, [r7, #4]
 800ca0c:	f7ff fb08 	bl	800c020 <spi_cmd>
 800ca10:	4603      	mov	r3, r0
 800ca12:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800ca14:	7b3b      	ldrb	r3, [r7, #12]
 800ca16:	b25b      	sxtb	r3, r3
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d00d      	beq.n	800ca38 <nm_spi_read_reg_with_ret+0x60>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
 800ca1c:	f240 2295 	movw	r2, #661	@ 0x295
 800ca20:	493d      	ldr	r1, [pc, #244]	@ (800cb18 <nm_spi_read_reg_with_ret+0x140>)
 800ca22:	483e      	ldr	r0, [pc, #248]	@ (800cb1c <nm_spi_read_reg_with_ret+0x144>)
 800ca24:	f001 fb2a 	bl	800e07c <iprintf>
 800ca28:	6879      	ldr	r1, [r7, #4]
 800ca2a:	483d      	ldr	r0, [pc, #244]	@ (800cb20 <nm_spi_read_reg_with_ret+0x148>)
 800ca2c:	f001 fb26 	bl	800e07c <iprintf>
 800ca30:	200d      	movs	r0, #13
 800ca32:	f001 fb35 	bl	800e0a0 <putchar>
		goto _FAIL_;
 800ca36:	e03e      	b.n	800cab6 <nm_spi_read_reg_with_ret+0xde>
	}

	result = spi_cmd_rsp(cmd);
 800ca38:	7bbb      	ldrb	r3, [r7, #14]
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7ff fc78 	bl	800c330 <spi_cmd_rsp>
 800ca40:	4603      	mov	r3, r0
 800ca42:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800ca44:	7b3b      	ldrb	r3, [r7, #12]
 800ca46:	b25b      	sxtb	r3, r3
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00d      	beq.n	800ca68 <nm_spi_read_reg_with_ret+0x90>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
 800ca4c:	f240 229b 	movw	r2, #667	@ 0x29b
 800ca50:	4931      	ldr	r1, [pc, #196]	@ (800cb18 <nm_spi_read_reg_with_ret+0x140>)
 800ca52:	4832      	ldr	r0, [pc, #200]	@ (800cb1c <nm_spi_read_reg_with_ret+0x144>)
 800ca54:	f001 fb12 	bl	800e07c <iprintf>
 800ca58:	6879      	ldr	r1, [r7, #4]
 800ca5a:	4832      	ldr	r0, [pc, #200]	@ (800cb24 <nm_spi_read_reg_with_ret+0x14c>)
 800ca5c:	f001 fb0e 	bl	800e07c <iprintf>
 800ca60:	200d      	movs	r0, #13
 800ca62:	f001 fb1d 	bl	800e0a0 <putchar>
		goto _FAIL_;
 800ca66:	e026      	b.n	800cab6 <nm_spi_read_reg_with_ret+0xde>
	}

	/* to avoid endianness issues */
	result = spi_data_read(&tmp[0], 4, clockless);
 800ca68:	7b7a      	ldrb	r2, [r7, #13]
 800ca6a:	f107 0308 	add.w	r3, r7, #8
 800ca6e:	2104      	movs	r1, #4
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7ff fd23 	bl	800c4bc <spi_data_read>
 800ca76:	4603      	mov	r3, r0
 800ca78:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800ca7a:	7b3b      	ldrb	r3, [r7, #12]
 800ca7c:	b25b      	sxtb	r3, r3
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d00c      	beq.n	800ca9c <nm_spi_read_reg_with_ret+0xc4>
		M2M_ERR("[nmi spi]: Failed data read...\n");
 800ca82:	f240 22a2 	movw	r2, #674	@ 0x2a2
 800ca86:	4924      	ldr	r1, [pc, #144]	@ (800cb18 <nm_spi_read_reg_with_ret+0x140>)
 800ca88:	4824      	ldr	r0, [pc, #144]	@ (800cb1c <nm_spi_read_reg_with_ret+0x144>)
 800ca8a:	f001 faf7 	bl	800e07c <iprintf>
 800ca8e:	4826      	ldr	r0, [pc, #152]	@ (800cb28 <nm_spi_read_reg_with_ret+0x150>)
 800ca90:	f001 fb64 	bl	800e15c <puts>
 800ca94:	200d      	movs	r0, #13
 800ca96:	f001 fb03 	bl	800e0a0 <putchar>
		goto _FAIL_;
 800ca9a:	e00c      	b.n	800cab6 <nm_spi_read_reg_with_ret+0xde>
	}

	*u32data = tmp[0] |
 800ca9c:	7a3b      	ldrb	r3, [r7, #8]
 800ca9e:	461a      	mov	r2, r3
		((uint32)tmp[1] << 8) |
 800caa0:	7a7b      	ldrb	r3, [r7, #9]
 800caa2:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
 800caa4:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
 800caa6:	7abb      	ldrb	r3, [r7, #10]
 800caa8:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
 800caaa:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
 800caac:	7afb      	ldrb	r3, [r7, #11]
 800caae:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
 800cab0:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
 800cab6:	7b3b      	ldrb	r3, [r7, #12]
 800cab8:	b25b      	sxtb	r3, r3
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d026      	beq.n	800cb0c <nm_spi_read_reg_with_ret+0x134>
	{
		nm_bsp_sleep(1);
 800cabe:	2001      	movs	r0, #1
 800cac0:	f7fc feae 	bl	8009820 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800cac4:	2300      	movs	r3, #0
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	2300      	movs	r3, #0
 800caca:	2200      	movs	r2, #0
 800cacc:	2100      	movs	r1, #0
 800cace:	20cf      	movs	r0, #207	@ 0xcf
 800cad0:	f7ff faa6 	bl	800c020 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800cad4:	20cf      	movs	r0, #207	@ 0xcf
 800cad6:	f7ff fc2b 	bl	800c330 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
 800cada:	f240 22b1 	movw	r2, #689	@ 0x2b1
 800cade:	490e      	ldr	r1, [pc, #56]	@ (800cb18 <nm_spi_read_reg_with_ret+0x140>)
 800cae0:	480e      	ldr	r0, [pc, #56]	@ (800cb1c <nm_spi_read_reg_with_ret+0x144>)
 800cae2:	f001 facb 	bl	800e07c <iprintf>
 800cae6:	7bfb      	ldrb	r3, [r7, #15]
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	4619      	mov	r1, r3
 800caec:	480f      	ldr	r0, [pc, #60]	@ (800cb2c <nm_spi_read_reg_with_ret+0x154>)
 800caee:	f001 fac5 	bl	800e07c <iprintf>
 800caf2:	200d      	movs	r0, #13
 800caf4:	f001 fad4 	bl	800e0a0 <putchar>
		nm_bsp_sleep(1);
 800caf8:	2001      	movs	r0, #1
 800cafa:	f7fc fe91 	bl	8009820 <nm_bsp_sleep>
		retry--;
 800cafe:	7bfb      	ldrb	r3, [r7, #15]
 800cb00:	3b01      	subs	r3, #1
 800cb02:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800cb04:	7bfb      	ldrb	r3, [r7, #15]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d000      	beq.n	800cb0c <nm_spi_read_reg_with_ret+0x134>
 800cb0a:	e772      	b.n	800c9f2 <nm_spi_read_reg_with_ret+0x1a>
	}
		
	return result;
 800cb0c:	7b3b      	ldrb	r3, [r7, #12]
 800cb0e:	b25b      	sxtb	r3, r3
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3710      	adds	r7, #16
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	08010344 	.word	0x08010344
 800cb1c:	0800f8ac 	.word	0x0800f8ac
 800cb20:	0800fc50 	.word	0x0800fc50
 800cb24:	0800fc7c 	.word	0x0800fc7c
 800cb28:	0800fcb0 	.word	0x0800fcb0
 800cb2c:	0800fcd0 	.word	0x0800fcd0

0800cb30 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b088      	sub	sp, #32
 800cb34:	af02      	add	r7, sp, #8
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	80fb      	strh	r3, [r7, #6]
	uint8 cmd = CMD_DMA_EXT_READ;
 800cb3e:	23c8      	movs	r3, #200	@ 0xc8
 800cb40:	753b      	strb	r3, [r7, #20]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800cb42:	230a      	movs	r3, #10
 800cb44:	75bb      	strb	r3, [r7, #22]
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
 800cb46:	2300      	movs	r3, #0
 800cb48:	757b      	strb	r3, [r7, #21]
_RETRY_:

	/**
		Command
	**/
	if (size == 1)
 800cb4a:	88fb      	ldrh	r3, [r7, #6]
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d103      	bne.n	800cb58 <nm_spi_read+0x28>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
 800cb50:	2302      	movs	r3, #2
 800cb52:	80fb      	strh	r3, [r7, #6]
		single_byte_workaround = 1;
 800cb54:	2301      	movs	r3, #1
 800cb56:	757b      	strb	r3, [r7, #21]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
 800cb58:	88fb      	ldrh	r3, [r7, #6]
 800cb5a:	7d38      	ldrb	r0, [r7, #20]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	9200      	str	r2, [sp, #0]
 800cb60:	2200      	movs	r2, #0
 800cb62:	68f9      	ldr	r1, [r7, #12]
 800cb64:	f7ff fa5c 	bl	800c020 <spi_cmd>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800cb6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d00d      	beq.n	800cb90 <nm_spi_read+0x60>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
 800cb74:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800cb78:	493f      	ldr	r1, [pc, #252]	@ (800cc78 <nm_spi_read+0x148>)
 800cb7a:	4840      	ldr	r0, [pc, #256]	@ (800cc7c <nm_spi_read+0x14c>)
 800cb7c:	f001 fa7e 	bl	800e07c <iprintf>
 800cb80:	68f9      	ldr	r1, [r7, #12]
 800cb82:	483f      	ldr	r0, [pc, #252]	@ (800cc80 <nm_spi_read+0x150>)
 800cb84:	f001 fa7a 	bl	800e07c <iprintf>
 800cb88:	200d      	movs	r0, #13
 800cb8a:	f001 fa89 	bl	800e0a0 <putchar>
		goto _FAIL_;
 800cb8e:	e041      	b.n	800cc14 <nm_spi_read+0xe4>
	}

	result = spi_cmd_rsp(cmd);
 800cb90:	7d3b      	ldrb	r3, [r7, #20]
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7ff fbcc 	bl	800c330 <spi_cmd_rsp>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800cb9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00d      	beq.n	800cbc0 <nm_spi_read+0x90>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
 800cba4:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800cba8:	4933      	ldr	r1, [pc, #204]	@ (800cc78 <nm_spi_read+0x148>)
 800cbaa:	4834      	ldr	r0, [pc, #208]	@ (800cc7c <nm_spi_read+0x14c>)
 800cbac:	f001 fa66 	bl	800e07c <iprintf>
 800cbb0:	68f9      	ldr	r1, [r7, #12]
 800cbb2:	4834      	ldr	r0, [pc, #208]	@ (800cc84 <nm_spi_read+0x154>)
 800cbb4:	f001 fa62 	bl	800e07c <iprintf>
 800cbb8:	200d      	movs	r0, #13
 800cbba:	f001 fa71 	bl	800e0a0 <putchar>
		goto _FAIL_;
 800cbbe:	e029      	b.n	800cc14 <nm_spi_read+0xe4>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
 800cbc0:	7d7b      	ldrb	r3, [r7, #21]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d00c      	beq.n	800cbe0 <nm_spi_read+0xb0>
	{
		result = spi_data_read(tmp, size,0);
 800cbc6:	88f9      	ldrh	r1, [r7, #6]
 800cbc8:	f107 0310 	add.w	r3, r7, #16
 800cbcc:	2200      	movs	r2, #0
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7ff fc74 	bl	800c4bc <spi_data_read>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	75fb      	strb	r3, [r7, #23]
		buf[0] = tmp[0];
 800cbd8:	7c3a      	ldrb	r2, [r7, #16]
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	701a      	strb	r2, [r3, #0]
 800cbde:	e007      	b.n	800cbf0 <nm_spi_read+0xc0>
	}
	else
		result = spi_data_read(buf, size,0);
 800cbe0:	88fb      	ldrh	r3, [r7, #6]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	68b8      	ldr	r0, [r7, #8]
 800cbe8:	f7ff fc68 	bl	800c4bc <spi_data_read>
 800cbec:	4603      	mov	r3, r0
 800cbee:	75fb      	strb	r3, [r7, #23]

	if (result != N_OK) {
 800cbf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00c      	beq.n	800cc12 <nm_spi_read+0xe2>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
 800cbf8:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800cbfc:	491e      	ldr	r1, [pc, #120]	@ (800cc78 <nm_spi_read+0x148>)
 800cbfe:	481f      	ldr	r0, [pc, #124]	@ (800cc7c <nm_spi_read+0x14c>)
 800cc00:	f001 fa3c 	bl	800e07c <iprintf>
 800cc04:	4820      	ldr	r0, [pc, #128]	@ (800cc88 <nm_spi_read+0x158>)
 800cc06:	f001 faa9 	bl	800e15c <puts>
 800cc0a:	200d      	movs	r0, #13
 800cc0c:	f001 fa48 	bl	800e0a0 <putchar>
		goto _FAIL_;
 800cc10:	e000      	b.n	800cc14 <nm_spi_read+0xe4>
	}

_FAIL_:
 800cc12:	bf00      	nop
	if(result != N_OK)
 800cc14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d026      	beq.n	800cc6a <nm_spi_read+0x13a>
	{
		nm_bsp_sleep(1);
 800cc1c:	2001      	movs	r0, #1
 800cc1e:	f7fc fdff 	bl	8009820 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800cc22:	2300      	movs	r3, #0
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	2300      	movs	r3, #0
 800cc28:	2200      	movs	r2, #0
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	20cf      	movs	r0, #207	@ 0xcf
 800cc2e:	f7ff f9f7 	bl	800c020 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800cc32:	20cf      	movs	r0, #207	@ 0xcf
 800cc34:	f7ff fb7c 	bl	800c330 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
 800cc38:	f240 22ef 	movw	r2, #751	@ 0x2ef
 800cc3c:	490e      	ldr	r1, [pc, #56]	@ (800cc78 <nm_spi_read+0x148>)
 800cc3e:	480f      	ldr	r0, [pc, #60]	@ (800cc7c <nm_spi_read+0x14c>)
 800cc40:	f001 fa1c 	bl	800e07c <iprintf>
 800cc44:	7db9      	ldrb	r1, [r7, #22]
 800cc46:	88fb      	ldrh	r3, [r7, #6]
 800cc48:	68fa      	ldr	r2, [r7, #12]
 800cc4a:	4810      	ldr	r0, [pc, #64]	@ (800cc8c <nm_spi_read+0x15c>)
 800cc4c:	f001 fa16 	bl	800e07c <iprintf>
 800cc50:	200d      	movs	r0, #13
 800cc52:	f001 fa25 	bl	800e0a0 <putchar>
		nm_bsp_sleep(1);
 800cc56:	2001      	movs	r0, #1
 800cc58:	f7fc fde2 	bl	8009820 <nm_bsp_sleep>
		retry--;
 800cc5c:	7dbb      	ldrb	r3, [r7, #22]
 800cc5e:	3b01      	subs	r3, #1
 800cc60:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800cc62:	7dbb      	ldrb	r3, [r7, #22]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d000      	beq.n	800cc6a <nm_spi_read+0x13a>
 800cc68:	e76f      	b.n	800cb4a <nm_spi_read+0x1a>
	}

	return result;
 800cc6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3718      	adds	r7, #24
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	08010360 	.word	0x08010360
 800cc7c:	0800f8ac 	.word	0x0800f8ac
 800cc80:	0800fce8 	.word	0x0800fce8
 800cc84:	0800fd18 	.word	0x0800fd18
 800cc88:	0800fd50 	.word	0x0800fd50
 800cc8c:	0800fd78 	.word	0x0800fd78

0800cc90 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
 800cc96:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800cc9a:	f000 f8c3 	bl	800ce24 <nm_spi_read_reg>
 800cc9e:	6078      	str	r0, [r7, #4]
	val32 &= ~(0x7 << 4);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cca6:	607b      	str	r3, [r7, #4]
            break;
        case 4096:
            val32 |= (4 << 4);
            break;
        case 8192:
            val32 |= (5 << 4);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800ccae:	607b      	str	r3, [r7, #4]
            break;
 800ccb0:	bf00      	nop
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
 800ccb2:	6879      	ldr	r1, [r7, #4]
 800ccb4:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800ccb8:	f7ff fd58 	bl	800c76c <nm_spi_write_reg>
}
 800ccbc:	bf00      	nop
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <nm_spi_init>:
*	@fn		nm_spi_init
*	@brief	Initialize the SPI
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_spi_init(void)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
 800ccca:	2300      	movs	r3, #0
 800cccc:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
 800ccce:	4b45      	ldr	r3, [pc, #276]	@ (800cde4 <nm_spi_init+0x120>)
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	701a      	strb	r2, [r3, #0]

    if(nm_spi_read_reg_with_ret(NMI_SPI_PROTOCOL_CONFIG, &reg) != M2M_SUCCESS) {
 800ccd4:	463b      	mov	r3, r7
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800ccdc:	f7ff fe7c 	bl	800c9d8 <nm_spi_read_reg_with_ret>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d026      	beq.n	800cd34 <nm_spi_init+0x70>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
 800cce6:	4b3f      	ldr	r3, [pc, #252]	@ (800cde4 <nm_spi_init+0x120>)
 800cce8:	2201      	movs	r2, #1
 800ccea:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retrying with CRC off...\n");
 800ccec:	f240 3231 	movw	r2, #817	@ 0x331
 800ccf0:	493d      	ldr	r1, [pc, #244]	@ (800cde8 <nm_spi_init+0x124>)
 800ccf2:	483e      	ldr	r0, [pc, #248]	@ (800cdec <nm_spi_init+0x128>)
 800ccf4:	f001 f9c2 	bl	800e07c <iprintf>
 800ccf8:	483d      	ldr	r0, [pc, #244]	@ (800cdf0 <nm_spi_init+0x12c>)
 800ccfa:	f001 fa2f 	bl	800e15c <puts>
 800ccfe:	200d      	movs	r0, #13
 800cd00:	f001 f9ce 	bl	800e0a0 <putchar>
        if(nm_spi_read_reg_with_ret(NMI_SPI_PROTOCOL_CONFIG, &reg) != M2M_SUCCESS) {
 800cd04:	463b      	mov	r3, r7
 800cd06:	4619      	mov	r1, r3
 800cd08:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800cd0c:	f7ff fe64 	bl	800c9d8 <nm_spi_read_reg_with_ret>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00e      	beq.n	800cd34 <nm_spi_init+0x70>
			// Read failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
 800cd16:	f44f 724d 	mov.w	r2, #820	@ 0x334
 800cd1a:	4933      	ldr	r1, [pc, #204]	@ (800cde8 <nm_spi_init+0x124>)
 800cd1c:	4833      	ldr	r0, [pc, #204]	@ (800cdec <nm_spi_init+0x128>)
 800cd1e:	f001 f9ad 	bl	800e07c <iprintf>
 800cd22:	4834      	ldr	r0, [pc, #208]	@ (800cdf4 <nm_spi_init+0x130>)
 800cd24:	f001 fa1a 	bl	800e15c <puts>
 800cd28:	200d      	movs	r0, #13
 800cd2a:	f001 f9b9 	bl	800e0a0 <putchar>
            return M2M_ERR_BUS_FAIL;
 800cd2e:	f06f 0305 	mvn.w	r3, #5
 800cd32:	e053      	b.n	800cddc <nm_spi_init+0x118>
		}
	}
	if(gu8Crc_off == 0)
 800cd34:	4b2b      	ldr	r3, [pc, #172]	@ (800cde4 <nm_spi_init+0x120>)
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d126      	bne.n	800cd8a <nm_spi_init+0xc6>
	{
		reg &= ~0xc;	/* disable crc checking */
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	f023 030c 	bic.w	r3, r3, #12
 800cd42:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd4a:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800cd52:	603b      	str	r3, [r7, #0]
        if(nm_spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg) != M2M_SUCCESS) {
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	4619      	mov	r1, r3
 800cd58:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800cd5c:	f7ff fd06 	bl	800c76c <nm_spi_write_reg>
 800cd60:	4603      	mov	r3, r0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00e      	beq.n	800cd84 <nm_spi_init+0xc0>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
 800cd66:	f240 323e 	movw	r2, #830	@ 0x33e
 800cd6a:	491f      	ldr	r1, [pc, #124]	@ (800cde8 <nm_spi_init+0x124>)
 800cd6c:	481f      	ldr	r0, [pc, #124]	@ (800cdec <nm_spi_init+0x128>)
 800cd6e:	f001 f985 	bl	800e07c <iprintf>
 800cd72:	4821      	ldr	r0, [pc, #132]	@ (800cdf8 <nm_spi_init+0x134>)
 800cd74:	f001 f9f2 	bl	800e15c <puts>
 800cd78:	200d      	movs	r0, #13
 800cd7a:	f001 f991 	bl	800e0a0 <putchar>
            return M2M_ERR_BUS_FAIL;
 800cd7e:	f06f 0305 	mvn.w	r3, #5
 800cd82:	e02b      	b.n	800cddc <nm_spi_init+0x118>
		}
		gu8Crc_off = 1;
 800cd84:	4b17      	ldr	r3, [pc, #92]	@ (800cde4 <nm_spi_init+0x120>)
 800cd86:	2201      	movs	r2, #1
 800cd88:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
    if(nm_spi_read_reg_with_ret(0x1000, &chipid) != M2M_SUCCESS) {
 800cd8a:	1d3b      	adds	r3, r7, #4
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800cd92:	f7ff fe21 	bl	800c9d8 <nm_spi_read_reg_with_ret>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00e      	beq.n	800cdba <nm_spi_init+0xf6>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
 800cd9c:	f44f 7252 	mov.w	r2, #840	@ 0x348
 800cda0:	4911      	ldr	r1, [pc, #68]	@ (800cde8 <nm_spi_init+0x124>)
 800cda2:	4812      	ldr	r0, [pc, #72]	@ (800cdec <nm_spi_init+0x128>)
 800cda4:	f001 f96a 	bl	800e07c <iprintf>
 800cda8:	4814      	ldr	r0, [pc, #80]	@ (800cdfc <nm_spi_init+0x138>)
 800cdaa:	f001 f9d7 	bl	800e15c <puts>
 800cdae:	200d      	movs	r0, #13
 800cdb0:	f001 f976 	bl	800e0a0 <putchar>
		return M2M_ERR_BUS_FAIL;
 800cdb4:	f06f 0305 	mvn.w	r3, #5
 800cdb8:	e010      	b.n	800cddc <nm_spi_init+0x118>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
 800cdba:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 800cdbe:	490a      	ldr	r1, [pc, #40]	@ (800cde8 <nm_spi_init+0x124>)
 800cdc0:	480f      	ldr	r0, [pc, #60]	@ (800ce00 <nm_spi_init+0x13c>)
 800cdc2:	f001 f95b 	bl	800e07c <iprintf>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	4619      	mov	r1, r3
 800cdca:	480e      	ldr	r0, [pc, #56]	@ (800ce04 <nm_spi_init+0x140>)
 800cdcc:	f001 f956 	bl	800e07c <iprintf>
 800cdd0:	200d      	movs	r0, #13
 800cdd2:	f001 f965 	bl	800e0a0 <putchar>
	spi_init_pkt_sz();
 800cdd6:	f7ff ff5b 	bl	800cc90 <spi_init_pkt_sz>


	return M2M_SUCCESS;
 800cdda:	2300      	movs	r3, #0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3708      	adds	r7, #8
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	20000c14 	.word	0x20000c14
 800cde8:	0801036c 	.word	0x0801036c
 800cdec:	0800f8ac 	.word	0x0800f8ac
 800cdf0:	0800fd94 	.word	0x0800fd94
 800cdf4:	0800fde4 	.word	0x0800fde4
 800cdf8:	0800fe10 	.word	0x0800fe10
 800cdfc:	0800fe44 	.word	0x0800fe44
 800ce00:	0800fe68 	.word	0x0800fe68
 800ce04:	0800fe7c 	.word	0x0800fe7c

0800ce08 <nm_spi_deinit>:
*	@fn		nm_spi_init
*	@brief	DeInitialize the SPI 
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
*/ 
sint8 nm_spi_deinit(void)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
 800ce0c:	4b04      	ldr	r3, [pc, #16]	@ (800ce20 <nm_spi_deinit+0x18>)
 800ce0e:	2200      	movs	r2, #0
 800ce10:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr
 800ce1e:	bf00      	nop
 800ce20:	20000c14 	.word	0x20000c14

0800ce24 <nm_spi_read_reg>:
*	@param [in]	u32Addr
*				Register address
*	@return	Register value
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

    nm_spi_read_reg_with_ret(u32Addr, &u32Val);
 800ce2c:	f107 030c 	add.w	r3, r7, #12
 800ce30:	4619      	mov	r1, r3
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7ff fdd0 	bl	800c9d8 <nm_spi_read_reg_with_ret>

	return u32Val;
 800ce38:	68fb      	ldr	r3, [r7, #12]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3710      	adds	r7, #16
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}

0800ce42 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800ce42:	b580      	push	{r7, lr}
 800ce44:	b086      	sub	sp, #24
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	60f8      	str	r0, [r7, #12]
 800ce4a:	60b9      	str	r1, [r7, #8]
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 800ce50:	88fb      	ldrh	r3, [r7, #6]
 800ce52:	461a      	mov	r2, r3
 800ce54:	68b9      	ldr	r1, [r7, #8]
 800ce56:	68f8      	ldr	r0, [r7, #12]
 800ce58:	f7ff fe6a 	bl	800cb30 <nm_spi_read>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800ce60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d102      	bne.n	800ce6e <nm_spi_read_block+0x2c>
 800ce68:	2300      	movs	r3, #0
 800ce6a:	75fb      	strb	r3, [r7, #23]
 800ce6c:	e001      	b.n	800ce72 <nm_spi_read_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800ce6e:	23fa      	movs	r3, #250	@ 0xfa
 800ce70:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800ce72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3718      	adds	r7, #24
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b086      	sub	sp, #24
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	60f8      	str	r0, [r7, #12]
 800ce86:	60b9      	str	r1, [r7, #8]
 800ce88:	4613      	mov	r3, r2
 800ce8a:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 800ce8c:	88fb      	ldrh	r3, [r7, #6]
 800ce8e:	461a      	mov	r2, r3
 800ce90:	68b9      	ldr	r1, [r7, #8]
 800ce92:	68f8      	ldr	r0, [r7, #12]
 800ce94:	f7ff fcee 	bl	800c874 <nm_spi_write>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800ce9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d102      	bne.n	800ceaa <nm_spi_write_block+0x2c>
 800cea4:	2300      	movs	r3, #0
 800cea6:	75fb      	strb	r3, [r7, #23]
 800cea8:	e001      	b.n	800ceae <nm_spi_write_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800ceaa:	23fa      	movs	r3, #250	@ 0xfa
 800ceac:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800ceae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3718      	adds	r7, #24
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
	...

0800cebc <Socket_ReadSocketData>:
Date
        17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv, uint8 u8SocketMsg,
                                   uint32 u32StartAddress, uint16 u16ReadCount)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b088      	sub	sp, #32
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60b9      	str	r1, [r7, #8]
 800cec4:	607b      	str	r3, [r7, #4]
 800cec6:	4603      	mov	r3, r0
 800cec8:	73fb      	strb	r3, [r7, #15]
 800ceca:	4613      	mov	r3, r2
 800cecc:	73bb      	strb	r3, [r7, #14]
    uint32  u32Address = u32StartAddress;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	61bb      	str	r3, [r7, #24]
    uint16  u16Read;
    sint16  s16Diff;

    pstrRecv->u16RemainingSize = u16ReadCount;
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ced6:	80da      	strh	r2, [r3, #6]
    if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
 800ced8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d07e      	beq.n	800cfdc <Socket_ReadSocketData+0x120>
 800cede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cee2:	4a40      	ldr	r2, [pc, #256]	@ (800cfe4 <Socket_ReadSocketData+0x128>)
 800cee4:	011b      	lsls	r3, r3, #4
 800cee6:	4413      	add	r3, r2
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d076      	beq.n	800cfdc <Socket_ReadSocketData+0x120>
 800ceee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cef2:	4a3c      	ldr	r2, [pc, #240]	@ (800cfe4 <Socket_ReadSocketData+0x128>)
 800cef4:	011b      	lsls	r3, r3, #4
 800cef6:	4413      	add	r3, r2
 800cef8:	3304      	adds	r3, #4
 800cefa:	881b      	ldrh	r3, [r3, #0]
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d06c      	beq.n	800cfdc <Socket_ReadSocketData+0x120>
 800cf02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf06:	4a37      	ldr	r2, [pc, #220]	@ (800cfe4 <Socket_ReadSocketData+0x128>)
 800cf08:	011b      	lsls	r3, r3, #4
 800cf0a:	4413      	add	r3, r2
 800cf0c:	330a      	adds	r3, #10
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d162      	bne.n	800cfdc <Socket_ReadSocketData+0x120>
    {
        u16Read = u16ReadCount;
 800cf16:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cf18:	83fb      	strh	r3, [r7, #30]
        s16Diff = u16Read - gastrSockets[sock].u16UserBufferSize;
 800cf1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf1e:	4a31      	ldr	r2, [pc, #196]	@ (800cfe4 <Socket_ReadSocketData+0x128>)
 800cf20:	011b      	lsls	r3, r3, #4
 800cf22:	4413      	add	r3, r2
 800cf24:	3304      	adds	r3, #4
 800cf26:	881b      	ldrh	r3, [r3, #0]
 800cf28:	b29b      	uxth	r3, r3
 800cf2a:	8bfa      	ldrh	r2, [r7, #30]
 800cf2c:	1ad3      	subs	r3, r2, r3
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	82fb      	strh	r3, [r7, #22]
        if(s16Diff > 0)
 800cf32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	dd07      	ble.n	800cf4a <Socket_ReadSocketData+0x8e>
        {
            /* We don't expect to be here. Firmware 19.6.4 and later only sends data to the driver according to the application's buffer size.
             * But it is worth keeping this check, eg in case the application calls recv again with a smaller buffer size, or in case of HIF hacking. */
            u16Read = gastrSockets[sock].u16UserBufferSize;
 800cf3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf3e:	4a29      	ldr	r2, [pc, #164]	@ (800cfe4 <Socket_ReadSocketData+0x128>)
 800cf40:	011b      	lsls	r3, r3, #4
 800cf42:	4413      	add	r3, r2
 800cf44:	3304      	adds	r3, #4
 800cf46:	881b      	ldrh	r3, [r3, #0]
 800cf48:	83fb      	strh	r3, [r7, #30]
        }

        if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, 1) == M2M_SUCCESS)
 800cf4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf4e:	4a25      	ldr	r2, [pc, #148]	@ (800cfe4 <Socket_ReadSocketData+0x128>)
 800cf50:	011b      	lsls	r3, r3, #4
 800cf52:	4413      	add	r3, r2
 800cf54:	6819      	ldr	r1, [r3, #0]
 800cf56:	8bfa      	ldrh	r2, [r7, #30]
 800cf58:	2301      	movs	r3, #1
 800cf5a:	69b8      	ldr	r0, [r7, #24]
 800cf5c:	f7fd fad6 	bl	800a50c <hif_receive>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d12d      	bne.n	800cfc2 <Socket_ReadSocketData+0x106>
        {
            pstrRecv->pu8Buffer         = gastrSockets[sock].pu8UserBuffer;
 800cf66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf6a:	4a1e      	ldr	r2, [pc, #120]	@ (800cfe4 <Socket_ReadSocketData+0x128>)
 800cf6c:	011b      	lsls	r3, r3, #4
 800cf6e:	4413      	add	r3, r2
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	601a      	str	r2, [r3, #0]
            pstrRecv->s16BufferSize     = u16Read;
 800cf76:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	809a      	strh	r2, [r3, #4]
            pstrRecv->u16RemainingSize  -= u16Read;
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	88da      	ldrh	r2, [r3, #6]
 800cf82:	8bfb      	ldrh	r3, [r7, #30]
 800cf84:	1ad3      	subs	r3, r2, r3
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	80da      	strh	r2, [r3, #6]

            gastrSockets[sock].u16UserBufferSize = 0;
 800cf8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf90:	4a14      	ldr	r2, [pc, #80]	@ (800cfe4 <Socket_ReadSocketData+0x128>)
 800cf92:	011b      	lsls	r3, r3, #4
 800cf94:	4413      	add	r3, r2
 800cf96:	3304      	adds	r3, #4
 800cf98:	2200      	movs	r2, #0
 800cf9a:	801a      	strh	r2, [r3, #0]
            gastrSockets[sock].pu8UserBuffer = NULL;
 800cf9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfa0:	4a10      	ldr	r2, [pc, #64]	@ (800cfe4 <Socket_ReadSocketData+0x128>)
 800cfa2:	011b      	lsls	r3, r3, #4
 800cfa4:	4413      	add	r3, r2
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	601a      	str	r2, [r3, #0]

            if(gpfAppSocketCb)
 800cfaa:	4b0f      	ldr	r3, [pc, #60]	@ (800cfe8 <Socket_ReadSocketData+0x12c>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d014      	beq.n	800cfdc <Socket_ReadSocketData+0x120>
                gpfAppSocketCb(sock, u8SocketMsg, pstrRecv);
 800cfb2:	4b0d      	ldr	r3, [pc, #52]	@ (800cfe8 <Socket_ReadSocketData+0x12c>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	7bb9      	ldrb	r1, [r7, #14]
 800cfb8:	f997 000f 	ldrsb.w	r0, [r7, #15]
 800cfbc:	68ba      	ldr	r2, [r7, #8]
 800cfbe:	4798      	blx	r3
        else
        {
            M2M_ERR("Current <%d>\n", u16ReadCount);
        }
    }
}
 800cfc0:	e00c      	b.n	800cfdc <Socket_ReadSocketData+0x120>
            M2M_ERR("Current <%d>\n", u16ReadCount);
 800cfc2:	22b0      	movs	r2, #176	@ 0xb0
 800cfc4:	4909      	ldr	r1, [pc, #36]	@ (800cfec <Socket_ReadSocketData+0x130>)
 800cfc6:	480a      	ldr	r0, [pc, #40]	@ (800cff0 <Socket_ReadSocketData+0x134>)
 800cfc8:	f001 f858 	bl	800e07c <iprintf>
 800cfcc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cfce:	4619      	mov	r1, r3
 800cfd0:	4808      	ldr	r0, [pc, #32]	@ (800cff4 <Socket_ReadSocketData+0x138>)
 800cfd2:	f001 f853 	bl	800e07c <iprintf>
 800cfd6:	200d      	movs	r0, #13
 800cfd8:	f001 f862 	bl	800e0a0 <putchar>
}
 800cfdc:	bf00      	nop
 800cfde:	3720      	adds	r7, #32
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	20000c18 	.word	0x20000c18
 800cfe8:	20000ccc 	.word	0x20000ccc
 800cfec:	08010378 	.word	0x08010378
 800cff0:	0800fe98 	.word	0x0800fe98
 800cff4:	0800feac 	.word	0x0800feac

0800cff8 <m2m_ip_cb>:

Date
        17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize, uint32 u32Address)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b0bc      	sub	sp, #240	@ 0xf0
 800cffc:	af02      	add	r7, sp, #8
 800cffe:	4603      	mov	r3, r0
 800d000:	603a      	str	r2, [r7, #0]
 800d002:	71fb      	strb	r3, [r7, #7]
 800d004:	460b      	mov	r3, r1
 800d006:	80bb      	strh	r3, [r7, #4]
    if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
 800d008:	79fb      	ldrb	r3, [r7, #7]
 800d00a:	2b41      	cmp	r3, #65	@ 0x41
 800d00c:	d002      	beq.n	800d014 <m2m_ip_cb+0x1c>
 800d00e:	79fb      	ldrb	r3, [r7, #7]
 800d010:	2b54      	cmp	r3, #84	@ 0x54
 800d012:	d11c      	bne.n	800d04e <m2m_ip_cb+0x56>
    {
        tstrBindReply       strBindReply;
        tstrSocketBindMsg   strBind;

        if(hif_receive(u32Address, (uint8 *)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
 800d014:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 800d018:	2300      	movs	r3, #0
 800d01a:	2204      	movs	r2, #4
 800d01c:	6838      	ldr	r0, [r7, #0]
 800d01e:	f7fd fa75 	bl	800a50c <hif_receive>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	f040 82ce 	bne.w	800d5c6 <m2m_ip_cb+0x5ce>
        {
            strBind.status = strBindReply.s8Status;
 800d02a:	f997 30d1 	ldrsb.w	r3, [r7, #209]	@ 0xd1
 800d02e:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
            if(gpfAppSocketCb)
 800d032:	4bac      	ldr	r3, [pc, #688]	@ (800d2e4 <m2m_ip_cb+0x2ec>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	f000 82c5 	beq.w	800d5c6 <m2m_ip_cb+0x5ce>
                gpfAppSocketCb(strBindReply.sock, SOCKET_MSG_BIND, &strBind);
 800d03c:	4ba9      	ldr	r3, [pc, #676]	@ (800d2e4 <m2m_ip_cb+0x2ec>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f997 00d0 	ldrsb.w	r0, [r7, #208]	@ 0xd0
 800d044:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 800d048:	2101      	movs	r1, #1
 800d04a:	4798      	blx	r3
    {
 800d04c:	e2bb      	b.n	800d5c6 <m2m_ip_cb+0x5ce>
        }
    }
    else if(u8OpCode == SOCKET_CMD_LISTEN)
 800d04e:	79fb      	ldrb	r3, [r7, #7]
 800d050:	2b42      	cmp	r3, #66	@ 0x42
 800d052:	d11c      	bne.n	800d08e <m2m_ip_cb+0x96>
    {
        tstrListenReply         strListenReply;
        tstrSocketListenMsg     strListen;
        if(hif_receive(u32Address, (uint8 *)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
 800d054:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 800d058:	2300      	movs	r3, #0
 800d05a:	2204      	movs	r2, #4
 800d05c:	6838      	ldr	r0, [r7, #0]
 800d05e:	f7fd fa55 	bl	800a50c <hif_receive>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	f040 82b5 	bne.w	800d5d4 <m2m_ip_cb+0x5dc>
        {
            strListen.status = strListenReply.s8Status;
 800d06a:	f997 30c9 	ldrsb.w	r3, [r7, #201]	@ 0xc9
 800d06e:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
            if(gpfAppSocketCb)
 800d072:	4b9c      	ldr	r3, [pc, #624]	@ (800d2e4 <m2m_ip_cb+0x2ec>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	f000 82ac 	beq.w	800d5d4 <m2m_ip_cb+0x5dc>
                gpfAppSocketCb(strListenReply.sock, SOCKET_MSG_LISTEN, &strListen);
 800d07c:	4b99      	ldr	r3, [pc, #612]	@ (800d2e4 <m2m_ip_cb+0x2ec>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f997 00c8 	ldrsb.w	r0, [r7, #200]	@ 0xc8
 800d084:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 800d088:	2102      	movs	r1, #2
 800d08a:	4798      	blx	r3
            {
                gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
            }
        }
    }
}
 800d08c:	e2a2      	b.n	800d5d4 <m2m_ip_cb+0x5dc>
    else if(u8OpCode == SOCKET_CMD_ACCEPT)
 800d08e:	79fb      	ldrb	r3, [r7, #7]
 800d090:	2b43      	cmp	r3, #67	@ 0x43
 800d092:	f040 8087 	bne.w	800d1a4 <m2m_ip_cb+0x1ac>
        if(hif_receive(u32Address, (uint8 *)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
 800d096:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 800d09a:	2300      	movs	r3, #0
 800d09c:	220c      	movs	r2, #12
 800d09e:	6838      	ldr	r0, [r7, #0]
 800d0a0:	f7fd fa34 	bl	800a50c <hif_receive>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f040 8294 	bne.w	800d5d4 <m2m_ip_cb+0x5dc>
            if((strAcceptReply.sConnectedSock >= 0) && (strAcceptReply.sConnectedSock < MAX_SOCKET))
 800d0ac:	f997 30c1 	ldrsb.w	r3, [r7, #193]	@ 0xc1
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	db5a      	blt.n	800d16a <m2m_ip_cb+0x172>
 800d0b4:	f997 30c1 	ldrsb.w	r3, [r7, #193]	@ 0xc1
 800d0b8:	2b0a      	cmp	r3, #10
 800d0ba:	dc56      	bgt.n	800d16a <m2m_ip_cb+0x172>
                gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags      = gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
 800d0bc:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 800d0c0:	f997 20c1 	ldrsb.w	r2, [r7, #193]	@ 0xc1
 800d0c4:	4610      	mov	r0, r2
 800d0c6:	4a88      	ldr	r2, [pc, #544]	@ (800d2e8 <m2m_ip_cb+0x2f0>)
 800d0c8:	011b      	lsls	r3, r3, #4
 800d0ca:	4413      	add	r3, r2
 800d0cc:	330b      	adds	r3, #11
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	b2d9      	uxtb	r1, r3
 800d0d2:	4a85      	ldr	r2, [pc, #532]	@ (800d2e8 <m2m_ip_cb+0x2f0>)
 800d0d4:	0103      	lsls	r3, r0, #4
 800d0d6:	4413      	add	r3, r2
 800d0d8:	330b      	adds	r3, #11
 800d0da:	460a      	mov	r2, r1
 800d0dc:	701a      	strb	r2, [r3, #0]
                gastrSockets[strAcceptReply.sConnectedSock].bIsUsed         = 1;
 800d0de:	f997 30c1 	ldrsb.w	r3, [r7, #193]	@ 0xc1
 800d0e2:	4a81      	ldr	r2, [pc, #516]	@ (800d2e8 <m2m_ip_cb+0x2f0>)
 800d0e4:	011b      	lsls	r3, r3, #4
 800d0e6:	4413      	add	r3, r2
 800d0e8:	330a      	adds	r3, #10
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	701a      	strb	r2, [r3, #0]
                gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset   = strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
 800d0ee:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 800d0f2:	f997 20c1 	ldrsb.w	r2, [r7, #193]	@ 0xc1
 800d0f6:	4610      	mov	r0, r2
 800d0f8:	3b08      	subs	r3, #8
 800d0fa:	b299      	uxth	r1, r3
 800d0fc:	4a7a      	ldr	r2, [pc, #488]	@ (800d2e8 <m2m_ip_cb+0x2f0>)
 800d0fe:	0103      	lsls	r3, r0, #4
 800d100:	4413      	add	r3, r2
 800d102:	3308      	adds	r3, #8
 800d104:	460a      	mov	r2, r1
 800d106:	801a      	strh	r2, [r3, #0]
                ++gu16SessionID;
 800d108:	4b78      	ldr	r3, [pc, #480]	@ (800d2ec <m2m_ip_cb+0x2f4>)
 800d10a:	881b      	ldrh	r3, [r3, #0]
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	3301      	adds	r3, #1
 800d110:	b29a      	uxth	r2, r3
 800d112:	4b76      	ldr	r3, [pc, #472]	@ (800d2ec <m2m_ip_cb+0x2f4>)
 800d114:	801a      	strh	r2, [r3, #0]
                if(gu16SessionID == 0)
 800d116:	4b75      	ldr	r3, [pc, #468]	@ (800d2ec <m2m_ip_cb+0x2f4>)
 800d118:	881b      	ldrh	r3, [r3, #0]
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d106      	bne.n	800d12e <m2m_ip_cb+0x136>
                    ++gu16SessionID;
 800d120:	4b72      	ldr	r3, [pc, #456]	@ (800d2ec <m2m_ip_cb+0x2f4>)
 800d122:	881b      	ldrh	r3, [r3, #0]
 800d124:	b29b      	uxth	r3, r3
 800d126:	3301      	adds	r3, #1
 800d128:	b29a      	uxth	r2, r3
 800d12a:	4b70      	ldr	r3, [pc, #448]	@ (800d2ec <m2m_ip_cb+0x2f4>)
 800d12c:	801a      	strh	r2, [r3, #0]
                gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
 800d12e:	f997 30c1 	ldrsb.w	r3, [r7, #193]	@ 0xc1
 800d132:	4618      	mov	r0, r3
 800d134:	4b6d      	ldr	r3, [pc, #436]	@ (800d2ec <m2m_ip_cb+0x2f4>)
 800d136:	881b      	ldrh	r3, [r3, #0]
 800d138:	b299      	uxth	r1, r3
 800d13a:	4a6b      	ldr	r2, [pc, #428]	@ (800d2e8 <m2m_ip_cb+0x2f0>)
 800d13c:	0103      	lsls	r3, r0, #4
 800d13e:	4413      	add	r3, r2
 800d140:	3306      	adds	r3, #6
 800d142:	460a      	mov	r2, r1
 800d144:	801a      	strh	r2, [r3, #0]
                M2M_DBG("Socket %d session ID = %d\r\n", strAcceptReply.sConnectedSock, gu16SessionID);
 800d146:	22f5      	movs	r2, #245	@ 0xf5
 800d148:	4969      	ldr	r1, [pc, #420]	@ (800d2f0 <m2m_ip_cb+0x2f8>)
 800d14a:	486a      	ldr	r0, [pc, #424]	@ (800d2f4 <m2m_ip_cb+0x2fc>)
 800d14c:	f000 ff96 	bl	800e07c <iprintf>
 800d150:	f997 30c1 	ldrsb.w	r3, [r7, #193]	@ 0xc1
 800d154:	4619      	mov	r1, r3
 800d156:	4b65      	ldr	r3, [pc, #404]	@ (800d2ec <m2m_ip_cb+0x2f4>)
 800d158:	881b      	ldrh	r3, [r3, #0]
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	461a      	mov	r2, r3
 800d15e:	4866      	ldr	r0, [pc, #408]	@ (800d2f8 <m2m_ip_cb+0x300>)
 800d160:	f000 ff8c 	bl	800e07c <iprintf>
 800d164:	200d      	movs	r0, #13
 800d166:	f000 ff9b 	bl	800e0a0 <putchar>
            strAccept.sock = strAcceptReply.sConnectedSock;
 800d16a:	f997 30c1 	ldrsb.w	r3, [r7, #193]	@ 0xc1
 800d16e:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
            strAccept.strAddr.sin_family        = AF_INET;
 800d172:	2302      	movs	r3, #2
 800d174:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
            strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
 800d178:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 800d17c:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
            strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
 800d180:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d184:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            if(gpfAppSocketCb)
 800d188:	4b56      	ldr	r3, [pc, #344]	@ (800d2e4 <m2m_ip_cb+0x2ec>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f000 8221 	beq.w	800d5d4 <m2m_ip_cb+0x5dc>
                gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
 800d192:	4b54      	ldr	r3, [pc, #336]	@ (800d2e4 <m2m_ip_cb+0x2ec>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f997 00c0 	ldrsb.w	r0, [r7, #192]	@ 0xc0
 800d19a:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800d19e:	2104      	movs	r1, #4
 800d1a0:	4798      	blx	r3
}
 800d1a2:	e217      	b.n	800d5d4 <m2m_ip_cb+0x5dc>
    else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT_ALPN))
 800d1a4:	79fb      	ldrb	r3, [r7, #7]
 800d1a6:	2b44      	cmp	r3, #68	@ 0x44
 800d1a8:	d005      	beq.n	800d1b6 <m2m_ip_cb+0x1be>
 800d1aa:	79fb      	ldrb	r3, [r7, #7]
 800d1ac:	2b4b      	cmp	r3, #75	@ 0x4b
 800d1ae:	d002      	beq.n	800d1b6 <m2m_ip_cb+0x1be>
 800d1b0:	79fb      	ldrb	r3, [r7, #7]
 800d1b2:	2b57      	cmp	r3, #87	@ 0x57
 800d1b4:	d17a      	bne.n	800d2ac <m2m_ip_cb+0x2b4>
        tstrConnectAlpnReply    strConnectAlpnReply = {{0}};
 800d1b6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	601a      	str	r2, [r3, #0]
 800d1be:	605a      	str	r2, [r3, #4]
        uint16                  u16HifSz = sizeof(tstrConnectAlpnReply);
 800d1c0:	2308      	movs	r3, #8
 800d1c2:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
        if(u8OpCode != SOCKET_CMD_SSL_CONNECT_ALPN)
 800d1c6:	79fb      	ldrb	r3, [r7, #7]
 800d1c8:	2b57      	cmp	r3, #87	@ 0x57
 800d1ca:	d002      	beq.n	800d1d2 <m2m_ip_cb+0x1da>
            u16HifSz = sizeof(tstrConnectReply);
 800d1cc:	2304      	movs	r3, #4
 800d1ce:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
        if(hif_receive(u32Address, (uint8*)&strConnectAlpnReply, u16HifSz, 0) == M2M_SUCCESS)
 800d1d2:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	@ 0xe6
 800d1d6:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 800d1da:	2300      	movs	r3, #0
 800d1dc:	6838      	ldr	r0, [r7, #0]
 800d1de:	f7fd f995 	bl	800a50c <hif_receive>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f040 81f0 	bne.w	800d5ca <m2m_ip_cb+0x5d2>
            if((strConnectAlpnReply.strConnReply.sock >= 0) && (strConnectAlpnReply.strConnReply.sock < MAX_SOCKET))
 800d1ea:	f997 309c 	ldrsb.w	r3, [r7, #156]	@ 0x9c
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	f2c0 81eb 	blt.w	800d5ca <m2m_ip_cb+0x5d2>
 800d1f4:	f997 309c 	ldrsb.w	r3, [r7, #156]	@ 0x9c
 800d1f8:	2b0a      	cmp	r3, #10
 800d1fa:	f300 81e6 	bgt.w	800d5ca <m2m_ip_cb+0x5d2>
                uint8 u8Msg = SOCKET_MSG_CONNECT;
 800d1fe:	2305      	movs	r3, #5
 800d200:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
                strConnMsg.sock     = strConnectAlpnReply.strConnReply.sock;
 800d204:	f997 309c 	ldrsb.w	r3, [r7, #156]	@ 0x9c
 800d208:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
                strConnMsg.s8Error  = strConnectAlpnReply.strConnReply.s8Error;
 800d20c:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 800d210:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
                if(0 != gastrSockets[strConnMsg.sock].u16DataOffset)
 800d214:	f997 3098 	ldrsb.w	r3, [r7, #152]	@ 0x98
 800d218:	4a33      	ldr	r2, [pc, #204]	@ (800d2e8 <m2m_ip_cb+0x2f0>)
 800d21a:	011b      	lsls	r3, r3, #4
 800d21c:	4413      	add	r3, r2
 800d21e:	3308      	adds	r3, #8
 800d220:	881b      	ldrh	r3, [r3, #0]
 800d222:	b29b      	uxth	r3, r3
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <m2m_ip_cb+0x236>
                    u8Msg = SOCKET_MSG_SECURE;
 800d228:	230a      	movs	r3, #10
 800d22a:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
                if(strConnectAlpnReply.strConnReply.s8Error == SOCK_ERR_NO_ERROR)
 800d22e:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 800d232:	2b00      	cmp	r3, #0
 800d234:	d117      	bne.n	800d266 <m2m_ip_cb+0x26e>
                    gastrSockets[strConnMsg.sock].u16DataOffset = strConnectAlpnReply.strConnReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
 800d236:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800d23a:	f997 2098 	ldrsb.w	r2, [r7, #152]	@ 0x98
 800d23e:	4610      	mov	r0, r2
 800d240:	3b08      	subs	r3, #8
 800d242:	b299      	uxth	r1, r3
 800d244:	4a28      	ldr	r2, [pc, #160]	@ (800d2e8 <m2m_ip_cb+0x2f0>)
 800d246:	0103      	lsls	r3, r0, #4
 800d248:	4413      	add	r3, r2
 800d24a:	3308      	adds	r3, #8
 800d24c:	460a      	mov	r2, r1
 800d24e:	801a      	strh	r2, [r3, #0]
                    gastrSockets[strConnMsg.sock].u8AlpnStatus = strConnectAlpnReply.u8AppProtocolIdx;
 800d250:	f997 3098 	ldrsb.w	r3, [r7, #152]	@ 0x98
 800d254:	f897 10a0 	ldrb.w	r1, [r7, #160]	@ 0xa0
 800d258:	4a23      	ldr	r2, [pc, #140]	@ (800d2e8 <m2m_ip_cb+0x2f0>)
 800d25a:	011b      	lsls	r3, r3, #4
 800d25c:	4413      	add	r3, r2
 800d25e:	330d      	adds	r3, #13
 800d260:	460a      	mov	r2, r1
 800d262:	701a      	strb	r2, [r3, #0]
 800d264:	e013      	b.n	800d28e <m2m_ip_cb+0x296>
                    gastrSockets[strConnMsg.sock].u8ErrSource = strConnectAlpnReply.strConnReply.u8ErrSource;
 800d266:	f997 3098 	ldrsb.w	r3, [r7, #152]	@ 0x98
 800d26a:	f897 109e 	ldrb.w	r1, [r7, #158]	@ 0x9e
 800d26e:	4a1e      	ldr	r2, [pc, #120]	@ (800d2e8 <m2m_ip_cb+0x2f0>)
 800d270:	011b      	lsls	r3, r3, #4
 800d272:	4413      	add	r3, r2
 800d274:	330e      	adds	r3, #14
 800d276:	460a      	mov	r2, r1
 800d278:	701a      	strb	r2, [r3, #0]
                    gastrSockets[strConnMsg.sock].u8ErrCode = strConnectAlpnReply.strConnReply.u8ErrCode;
 800d27a:	f997 3098 	ldrsb.w	r3, [r7, #152]	@ 0x98
 800d27e:	f897 109f 	ldrb.w	r1, [r7, #159]	@ 0x9f
 800d282:	4a19      	ldr	r2, [pc, #100]	@ (800d2e8 <m2m_ip_cb+0x2f0>)
 800d284:	011b      	lsls	r3, r3, #4
 800d286:	4413      	add	r3, r2
 800d288:	330f      	adds	r3, #15
 800d28a:	460a      	mov	r2, r1
 800d28c:	701a      	strb	r2, [r3, #0]
                if(gpfAppSocketCb)
 800d28e:	4b15      	ldr	r3, [pc, #84]	@ (800d2e4 <m2m_ip_cb+0x2ec>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	f000 8199 	beq.w	800d5ca <m2m_ip_cb+0x5d2>
                    gpfAppSocketCb(strConnMsg.sock, u8Msg, &strConnMsg);
 800d298:	4b12      	ldr	r3, [pc, #72]	@ (800d2e4 <m2m_ip_cb+0x2ec>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f997 0098 	ldrsb.w	r0, [r7, #152]	@ 0x98
 800d2a0:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 800d2a4:	f897 10e5 	ldrb.w	r1, [r7, #229]	@ 0xe5
 800d2a8:	4798      	blx	r3
    {
 800d2aa:	e18e      	b.n	800d5ca <m2m_ip_cb+0x5d2>
    else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
 800d2ac:	79fb      	ldrb	r3, [r7, #7]
 800d2ae:	2b4a      	cmp	r3, #74	@ 0x4a
 800d2b0:	d126      	bne.n	800d300 <m2m_ip_cb+0x308>
        if(hif_receive(u32Address, (uint8 *)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
 800d2b2:	f107 010c 	add.w	r1, r7, #12
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	2244      	movs	r2, #68	@ 0x44
 800d2ba:	6838      	ldr	r0, [r7, #0]
 800d2bc:	f7fd f926 	bl	800a50c <hif_receive>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	f040 8186 	bne.w	800d5d4 <m2m_ip_cb+0x5dc>
            if(gpfAppResolveCb)
 800d2c8:	4b0c      	ldr	r3, [pc, #48]	@ (800d2fc <m2m_ip_cb+0x304>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	f000 8181 	beq.w	800d5d4 <m2m_ip_cb+0x5dc>
                gpfAppResolveCb((uint8 *)strDnsReply.acHostName, strDnsReply.u32HostIP);
 800d2d2:	4b0a      	ldr	r3, [pc, #40]	@ (800d2fc <m2m_ip_cb+0x304>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d2d8:	f107 020c 	add.w	r2, r7, #12
 800d2dc:	4610      	mov	r0, r2
 800d2de:	4798      	blx	r3
}
 800d2e0:	e178      	b.n	800d5d4 <m2m_ip_cb+0x5dc>
 800d2e2:	bf00      	nop
 800d2e4:	20000ccc 	.word	0x20000ccc
 800d2e8:	20000c18 	.word	0x20000c18
 800d2ec:	20000cc8 	.word	0x20000cc8
 800d2f0:	08010390 	.word	0x08010390
 800d2f4:	0800febc 	.word	0x0800febc
 800d2f8:	0800fed0 	.word	0x0800fed0
 800d2fc:	20000cd0 	.word	0x20000cd0
    else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
 800d300:	79fb      	ldrb	r3, [r7, #7]
 800d302:	2b46      	cmp	r3, #70	@ 0x46
 800d304:	d006      	beq.n	800d314 <m2m_ip_cb+0x31c>
 800d306:	79fb      	ldrb	r3, [r7, #7]
 800d308:	2b48      	cmp	r3, #72	@ 0x48
 800d30a:	d003      	beq.n	800d314 <m2m_ip_cb+0x31c>
 800d30c:	79fb      	ldrb	r3, [r7, #7]
 800d30e:	2b4d      	cmp	r3, #77	@ 0x4d
 800d310:	f040 80c7 	bne.w	800d4a2 <m2m_ip_cb+0x4aa>
        uint8               u8CallbackMsgID = SOCKET_MSG_RECV;
 800d314:	2306      	movs	r3, #6
 800d316:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
        if(u8OpCode == SOCKET_CMD_RECVFROM)
 800d31a:	79fb      	ldrb	r3, [r7, #7]
 800d31c:	2b48      	cmp	r3, #72	@ 0x48
 800d31e:	d102      	bne.n	800d326 <m2m_ip_cb+0x32e>
            u8CallbackMsgID = SOCKET_MSG_RECVFROM;
 800d320:	2309      	movs	r3, #9
 800d322:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
        u16ReadSize = sizeof(tstrRecvReply);
 800d326:	2310      	movs	r3, #16
 800d328:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
        if(hif_receive(u32Address, (uint8 *)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
 800d32c:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	@ 0xdc
 800d330:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800d334:	2300      	movs	r3, #0
 800d336:	6838      	ldr	r0, [r7, #0]
 800d338:	f7fd f8e8 	bl	800a50c <hif_receive>
 800d33c:	4603      	mov	r3, r0
 800d33e:	2b00      	cmp	r3, #0
 800d340:	f040 8145 	bne.w	800d5ce <m2m_ip_cb+0x5d6>
            if((strRecvReply.sock >= 0) && (strRecvReply.sock < MAX_SOCKET))
 800d344:	f997 3094 	ldrsb.w	r3, [r7, #148]	@ 0x94
 800d348:	2b00      	cmp	r3, #0
 800d34a:	f2c0 8140 	blt.w	800d5ce <m2m_ip_cb+0x5d6>
 800d34e:	f997 3094 	ldrsb.w	r3, [r7, #148]	@ 0x94
 800d352:	2b0a      	cmp	r3, #10
 800d354:	f300 813b 	bgt.w	800d5ce <m2m_ip_cb+0x5d6>
                uint16 u16SessionID = 0;
 800d358:	2300      	movs	r3, #0
 800d35a:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
                sock            = strRecvReply.sock;
 800d35e:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 800d362:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
                u16SessionID = strRecvReply.u16SessionID;
 800d366:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d36a:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
                M2M_DBG("recv callback session ID = %d\r\n", u16SessionID);
 800d36e:	f44f 72a3 	mov.w	r2, #326	@ 0x146
 800d372:	499a      	ldr	r1, [pc, #616]	@ (800d5dc <m2m_ip_cb+0x5e4>)
 800d374:	489a      	ldr	r0, [pc, #616]	@ (800d5e0 <m2m_ip_cb+0x5e8>)
 800d376:	f000 fe81 	bl	800e07c <iprintf>
 800d37a:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 800d37e:	4619      	mov	r1, r3
 800d380:	4898      	ldr	r0, [pc, #608]	@ (800d5e4 <m2m_ip_cb+0x5ec>)
 800d382:	f000 fe7b 	bl	800e07c <iprintf>
 800d386:	200d      	movs	r0, #13
 800d388:	f000 fe8a 	bl	800e0a0 <putchar>
                gastrSockets[sock].bIsRecvPending = 0;
 800d38c:	f997 30d9 	ldrsb.w	r3, [r7, #217]	@ 0xd9
 800d390:	4a95      	ldr	r2, [pc, #596]	@ (800d5e8 <m2m_ip_cb+0x5f0>)
 800d392:	011b      	lsls	r3, r3, #4
 800d394:	4413      	add	r3, r2
 800d396:	330c      	adds	r3, #12
 800d398:	2200      	movs	r2, #0
 800d39a:	701a      	strb	r2, [r3, #0]
                s16RecvStatus   = NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
 800d39c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800d3a0:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
                u16DataOffset   = NM_BSP_B_L_16(strRecvReply.u16DataOffset);
 800d3a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d3a8:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
                strRecvMsg.strRemoteAddr.sin_port           = strRecvReply.strRemoteAddr.u16Port;
 800d3ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d3b0:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
                strRecvMsg.strRemoteAddr.sin_addr.s_addr    = strRecvReply.strRemoteAddr.u32IPAddr;
 800d3b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d3b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
                if(u16SessionID == gastrSockets[sock].u16SessionID)
 800d3ba:	f997 30d9 	ldrsb.w	r3, [r7, #217]	@ 0xd9
 800d3be:	4a8a      	ldr	r2, [pc, #552]	@ (800d5e8 <m2m_ip_cb+0x5f0>)
 800d3c0:	011b      	lsls	r3, r3, #4
 800d3c2:	4413      	add	r3, r2
 800d3c4:	3306      	adds	r3, #6
 800d3c6:	881b      	ldrh	r3, [r3, #0]
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	f8b7 20da 	ldrh.w	r2, [r7, #218]	@ 0xda
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d133      	bne.n	800d43a <m2m_ip_cb+0x442>
                    if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
 800d3d2:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	@ 0xd6
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	dd1a      	ble.n	800d410 <m2m_ip_cb+0x418>
 800d3da:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	@ 0xd6
 800d3de:	88bb      	ldrh	r3, [r7, #4]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	da15      	bge.n	800d410 <m2m_ip_cb+0x418>
                        u32Address += u16DataOffset;
 800d3e4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 800d3e8:	683a      	ldr	r2, [r7, #0]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	603b      	str	r3, [r7, #0]
                        u16ReadSize = (uint16)s16RecvStatus;
 800d3ee:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 800d3f2:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
                        Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
 800d3f6:	f897 20e4 	ldrb.w	r2, [r7, #228]	@ 0xe4
 800d3fa:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800d3fe:	f997 00d9 	ldrsb.w	r0, [r7, #217]	@ 0xd9
 800d402:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 800d406:	9300      	str	r3, [sp, #0]
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	f7ff fd57 	bl	800cebc <Socket_ReadSocketData>
    {
 800d40e:	e0de      	b.n	800d5ce <m2m_ip_cb+0x5d6>
                        strRecvMsg.s16BufferSize    = s16RecvStatus;
 800d410:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 800d414:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
                        strRecvMsg.pu8Buffer        = NULL;
 800d418:	2300      	movs	r3, #0
 800d41a:	673b      	str	r3, [r7, #112]	@ 0x70
                        if(gpfAppSocketCb)
 800d41c:	4b73      	ldr	r3, [pc, #460]	@ (800d5ec <m2m_ip_cb+0x5f4>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	f000 80d4 	beq.w	800d5ce <m2m_ip_cb+0x5d6>
                            gpfAppSocketCb(sock, u8CallbackMsgID, &strRecvMsg);
 800d426:	4b71      	ldr	r3, [pc, #452]	@ (800d5ec <m2m_ip_cb+0x5f4>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800d42e:	f897 10e4 	ldrb.w	r1, [r7, #228]	@ 0xe4
 800d432:	f997 00d9 	ldrsb.w	r0, [r7, #217]	@ 0xd9
 800d436:	4798      	blx	r3
    {
 800d438:	e0c9      	b.n	800d5ce <m2m_ip_cb+0x5d6>
                    M2M_DBG("Discard recv callback %d %d \r\n", u16SessionID, gastrSockets[sock].u16SessionID);
 800d43a:	f240 126d 	movw	r2, #365	@ 0x16d
 800d43e:	4967      	ldr	r1, [pc, #412]	@ (800d5dc <m2m_ip_cb+0x5e4>)
 800d440:	4867      	ldr	r0, [pc, #412]	@ (800d5e0 <m2m_ip_cb+0x5e8>)
 800d442:	f000 fe1b 	bl	800e07c <iprintf>
 800d446:	f8b7 10da 	ldrh.w	r1, [r7, #218]	@ 0xda
 800d44a:	f997 30d9 	ldrsb.w	r3, [r7, #217]	@ 0xd9
 800d44e:	4a66      	ldr	r2, [pc, #408]	@ (800d5e8 <m2m_ip_cb+0x5f0>)
 800d450:	011b      	lsls	r3, r3, #4
 800d452:	4413      	add	r3, r2
 800d454:	3306      	adds	r3, #6
 800d456:	881b      	ldrh	r3, [r3, #0]
 800d458:	b29b      	uxth	r3, r3
 800d45a:	461a      	mov	r2, r3
 800d45c:	4864      	ldr	r0, [pc, #400]	@ (800d5f0 <m2m_ip_cb+0x5f8>)
 800d45e:	f000 fe0d 	bl	800e07c <iprintf>
 800d462:	200d      	movs	r0, #13
 800d464:	f000 fe1c 	bl	800e0a0 <putchar>
                    if(u16ReadSize < u16BufferSize)
 800d468:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	@ 0xdc
 800d46c:	88bb      	ldrh	r3, [r7, #4]
 800d46e:	429a      	cmp	r2, r3
 800d470:	f080 80ad 	bcs.w	800d5ce <m2m_ip_cb+0x5d6>
                        if(hif_receive(0, NULL, 0, 1) != M2M_SUCCESS)
 800d474:	2301      	movs	r3, #1
 800d476:	2200      	movs	r2, #0
 800d478:	2100      	movs	r1, #0
 800d47a:	2000      	movs	r0, #0
 800d47c:	f7fd f846 	bl	800a50c <hif_receive>
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	f000 80a3 	beq.w	800d5ce <m2m_ip_cb+0x5d6>
                            M2M_ERR("hif rx done failed\n");
 800d488:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800d48c:	4953      	ldr	r1, [pc, #332]	@ (800d5dc <m2m_ip_cb+0x5e4>)
 800d48e:	4859      	ldr	r0, [pc, #356]	@ (800d5f4 <m2m_ip_cb+0x5fc>)
 800d490:	f000 fdf4 	bl	800e07c <iprintf>
 800d494:	4858      	ldr	r0, [pc, #352]	@ (800d5f8 <m2m_ip_cb+0x600>)
 800d496:	f000 fe61 	bl	800e15c <puts>
 800d49a:	200d      	movs	r0, #13
 800d49c:	f000 fe00 	bl	800e0a0 <putchar>
    {
 800d4a0:	e095      	b.n	800d5ce <m2m_ip_cb+0x5d6>
    else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
 800d4a2:	79fb      	ldrb	r3, [r7, #7]
 800d4a4:	2b45      	cmp	r3, #69	@ 0x45
 800d4a6:	d005      	beq.n	800d4b4 <m2m_ip_cb+0x4bc>
 800d4a8:	79fb      	ldrb	r3, [r7, #7]
 800d4aa:	2b47      	cmp	r3, #71	@ 0x47
 800d4ac:	d002      	beq.n	800d4b4 <m2m_ip_cb+0x4bc>
 800d4ae:	79fb      	ldrb	r3, [r7, #7]
 800d4b0:	2b4c      	cmp	r3, #76	@ 0x4c
 800d4b2:	d16a      	bne.n	800d58a <m2m_ip_cb+0x592>
        uint8           u8CallbackMsgID = SOCKET_MSG_SEND;
 800d4b4:	2307      	movs	r3, #7
 800d4b6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        if(u8OpCode == SOCKET_CMD_SENDTO)
 800d4ba:	79fb      	ldrb	r3, [r7, #7]
 800d4bc:	2b47      	cmp	r3, #71	@ 0x47
 800d4be:	d102      	bne.n	800d4c6 <m2m_ip_cb+0x4ce>
            u8CallbackMsgID = SOCKET_MSG_SENDTO;
 800d4c0:	2308      	movs	r3, #8
 800d4c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        if(hif_receive(u32Address, (uint8 *)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
 800d4c6:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	2208      	movs	r2, #8
 800d4ce:	6838      	ldr	r0, [r7, #0]
 800d4d0:	f7fd f81c 	bl	800a50c <hif_receive>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d17b      	bne.n	800d5d2 <m2m_ip_cb+0x5da>
            if((strReply.sock >=0) && (strReply.sock < MAX_SOCKET))
 800d4da:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	db77      	blt.n	800d5d2 <m2m_ip_cb+0x5da>
 800d4e2:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800d4e6:	2b0a      	cmp	r3, #10
 800d4e8:	dc73      	bgt.n	800d5d2 <m2m_ip_cb+0x5da>
                uint16 u16SessionID = 0;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
                sock = strReply.sock;
 800d4f0:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800d4f4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
                u16SessionID = strReply.u16SessionID;
 800d4f8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800d4fc:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
                M2M_DBG("send callback session ID = %d\r\n", u16SessionID);
 800d500:	f240 1287 	movw	r2, #391	@ 0x187
 800d504:	4935      	ldr	r1, [pc, #212]	@ (800d5dc <m2m_ip_cb+0x5e4>)
 800d506:	4836      	ldr	r0, [pc, #216]	@ (800d5e0 <m2m_ip_cb+0x5e8>)
 800d508:	f000 fdb8 	bl	800e07c <iprintf>
 800d50c:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	@ 0xe0
 800d510:	4619      	mov	r1, r3
 800d512:	483a      	ldr	r0, [pc, #232]	@ (800d5fc <m2m_ip_cb+0x604>)
 800d514:	f000 fdb2 	bl	800e07c <iprintf>
 800d518:	200d      	movs	r0, #13
 800d51a:	f000 fdc1 	bl	800e0a0 <putchar>
                s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
 800d51e:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 800d522:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
                if(u16SessionID == gastrSockets[sock].u16SessionID)
 800d526:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 800d52a:	4a2f      	ldr	r2, [pc, #188]	@ (800d5e8 <m2m_ip_cb+0x5f0>)
 800d52c:	011b      	lsls	r3, r3, #4
 800d52e:	4413      	add	r3, r2
 800d530:	3306      	adds	r3, #6
 800d532:	881b      	ldrh	r3, [r3, #0]
 800d534:	b29b      	uxth	r3, r3
 800d536:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	@ 0xe0
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d10d      	bne.n	800d55a <m2m_ip_cb+0x562>
                    if(gpfAppSocketCb)
 800d53e:	4b2b      	ldr	r3, [pc, #172]	@ (800d5ec <m2m_ip_cb+0x5f4>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d045      	beq.n	800d5d2 <m2m_ip_cb+0x5da>
                        gpfAppSocketCb(sock, u8CallbackMsgID, &s16Rcvd);
 800d546:	4b29      	ldr	r3, [pc, #164]	@ (800d5ec <m2m_ip_cb+0x5f4>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f107 026e 	add.w	r2, r7, #110	@ 0x6e
 800d54e:	f897 10e3 	ldrb.w	r1, [r7, #227]	@ 0xe3
 800d552:	f997 00df 	ldrsb.w	r0, [r7, #223]	@ 0xdf
 800d556:	4798      	blx	r3
    {
 800d558:	e03b      	b.n	800d5d2 <m2m_ip_cb+0x5da>
                    M2M_DBG("Discard send callback %d %d \r\n", u16SessionID, gastrSockets[sock].u16SessionID);
 800d55a:	f44f 72c9 	mov.w	r2, #402	@ 0x192
 800d55e:	491f      	ldr	r1, [pc, #124]	@ (800d5dc <m2m_ip_cb+0x5e4>)
 800d560:	481f      	ldr	r0, [pc, #124]	@ (800d5e0 <m2m_ip_cb+0x5e8>)
 800d562:	f000 fd8b 	bl	800e07c <iprintf>
 800d566:	f8b7 10e0 	ldrh.w	r1, [r7, #224]	@ 0xe0
 800d56a:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 800d56e:	4a1e      	ldr	r2, [pc, #120]	@ (800d5e8 <m2m_ip_cb+0x5f0>)
 800d570:	011b      	lsls	r3, r3, #4
 800d572:	4413      	add	r3, r2
 800d574:	3306      	adds	r3, #6
 800d576:	881b      	ldrh	r3, [r3, #0]
 800d578:	b29b      	uxth	r3, r3
 800d57a:	461a      	mov	r2, r3
 800d57c:	4820      	ldr	r0, [pc, #128]	@ (800d600 <m2m_ip_cb+0x608>)
 800d57e:	f000 fd7d 	bl	800e07c <iprintf>
 800d582:	200d      	movs	r0, #13
 800d584:	f000 fd8c 	bl	800e0a0 <putchar>
    {
 800d588:	e023      	b.n	800d5d2 <m2m_ip_cb+0x5da>
    else if(u8OpCode == SOCKET_CMD_PING)
 800d58a:	79fb      	ldrb	r3, [r7, #7]
 800d58c:	2b52      	cmp	r3, #82	@ 0x52
 800d58e:	d121      	bne.n	800d5d4 <m2m_ip_cb+0x5dc>
        if(hif_receive(u32Address, (uint8 *)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
 800d590:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800d594:	2301      	movs	r3, #1
 800d596:	2214      	movs	r2, #20
 800d598:	6838      	ldr	r0, [r7, #0]
 800d59a:	f7fc ffb7 	bl	800a50c <hif_receive>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d117      	bne.n	800d5d4 <m2m_ip_cb+0x5dc>
            if((gu32PingId == strPingReply.u32CmdPrivate) && (gfpPingCb != NULL))
 800d5a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d5a6:	4b17      	ldr	r3, [pc, #92]	@ (800d604 <m2m_ip_cb+0x60c>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d112      	bne.n	800d5d4 <m2m_ip_cb+0x5dc>
 800d5ae:	4b16      	ldr	r3, [pc, #88]	@ (800d608 <m2m_ip_cb+0x610>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d00e      	beq.n	800d5d4 <m2m_ip_cb+0x5dc>
                gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
 800d5b6:	4b14      	ldr	r3, [pc, #80]	@ (800d608 <m2m_ip_cb+0x610>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d5bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d5be:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800d5c2:	4798      	blx	r3
}
 800d5c4:	e006      	b.n	800d5d4 <m2m_ip_cb+0x5dc>
    {
 800d5c6:	bf00      	nop
 800d5c8:	e004      	b.n	800d5d4 <m2m_ip_cb+0x5dc>
    {
 800d5ca:	bf00      	nop
 800d5cc:	e002      	b.n	800d5d4 <m2m_ip_cb+0x5dc>
    {
 800d5ce:	bf00      	nop
 800d5d0:	e000      	b.n	800d5d4 <m2m_ip_cb+0x5dc>
    {
 800d5d2:	bf00      	nop
}
 800d5d4:	bf00      	nop
 800d5d6:	37e8      	adds	r7, #232	@ 0xe8
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	08010390 	.word	0x08010390
 800d5e0:	0800febc 	.word	0x0800febc
 800d5e4:	0800feec 	.word	0x0800feec
 800d5e8:	20000c18 	.word	0x20000c18
 800d5ec:	20000ccc 	.word	0x20000ccc
 800d5f0:	0800ff0c 	.word	0x0800ff0c
 800d5f4:	0800fe98 	.word	0x0800fe98
 800d5f8:	0800ff2c 	.word	0x0800ff2c
 800d5fc:	0800ff40 	.word	0x0800ff40
 800d600:	0800ff60 	.word	0x0800ff60
 800d604:	20000cdc 	.word	0x20000cdc
 800d608:	20000cd8 	.word	0x20000cd8

0800d60c <socketInit>:

Date
        4 June 2012
*********************************************************************/
void socketInit(void)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	af00      	add	r7, sp, #0
    if(gbSocketInit == 0)
 800d610:	4b0a      	ldr	r3, [pc, #40]	@ (800d63c <socketInit+0x30>)
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	b2db      	uxtb	r3, r3
 800d616:	2b00      	cmp	r3, #0
 800d618:	d10e      	bne.n	800d638 <socketInit+0x2c>
    {
        m2m_memset((uint8 *)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
 800d61a:	22b0      	movs	r2, #176	@ 0xb0
 800d61c:	2100      	movs	r1, #0
 800d61e:	4808      	ldr	r0, [pc, #32]	@ (800d640 <socketInit+0x34>)
 800d620:	f7fc fa4a 	bl	8009ab8 <m2m_memset>
        hif_register_cb(M2M_REQ_GROUP_IP, m2m_ip_cb);
 800d624:	4907      	ldr	r1, [pc, #28]	@ (800d644 <socketInit+0x38>)
 800d626:	2002      	movs	r0, #2
 800d628:	f7fd f806 	bl	800a638 <hif_register_cb>
        gbSocketInit    = 1;
 800d62c:	4b03      	ldr	r3, [pc, #12]	@ (800d63c <socketInit+0x30>)
 800d62e:	2201      	movs	r2, #1
 800d630:	701a      	strb	r2, [r3, #0]
        gu16SessionID   = 0;
 800d632:	4b05      	ldr	r3, [pc, #20]	@ (800d648 <socketInit+0x3c>)
 800d634:	2200      	movs	r2, #0
 800d636:	801a      	strh	r2, [r3, #0]
    }
}
 800d638:	bf00      	nop
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	20000cd4 	.word	0x20000cd4
 800d640:	20000c18 	.word	0x20000c18
 800d644:	0800cff9 	.word	0x0800cff9
 800d648:	20000cc8 	.word	0x20000cc8

0800d64c <registerSocketCallback>:

Date
        4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
    gpfAppSocketCb  = pfAppSocketCb;
 800d656:	4a06      	ldr	r2, [pc, #24]	@ (800d670 <registerSocketCallback+0x24>)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6013      	str	r3, [r2, #0]
    gpfAppResolveCb = pfAppResolveCb;
 800d65c:	4a05      	ldr	r2, [pc, #20]	@ (800d674 <registerSocketCallback+0x28>)
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	6013      	str	r3, [r2, #0]
}
 800d662:	bf00      	nop
 800d664:	370c      	adds	r7, #12
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop
 800d670:	20000ccc 	.word	0x20000ccc
 800d674:	20000cd0 	.word	0x20000cd0

0800d678 <socket>:

Date
        4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Config)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b08c      	sub	sp, #48	@ 0x30
 800d67c:	af04      	add	r7, sp, #16
 800d67e:	4603      	mov	r3, r0
 800d680:	80fb      	strh	r3, [r7, #6]
 800d682:	460b      	mov	r3, r1
 800d684:	717b      	strb	r3, [r7, #5]
 800d686:	4613      	mov	r3, r2
 800d688:	713b      	strb	r3, [r7, #4]
    SOCKET                  sock = -1;
 800d68a:	23ff      	movs	r3, #255	@ 0xff
 800d68c:	77fb      	strb	r3, [r7, #31]
    volatile tstrSocket     *pstrSock;
    static volatile uint8   u8NextTcpSock   = 0;
    static volatile uint8   u8NextUdpSock   = 0;

    /* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
    if(u16Domain == AF_INET)
 800d68e:	88fb      	ldrh	r3, [r7, #6]
 800d690:	2b02      	cmp	r3, #2
 800d692:	f040 80b7 	bne.w	800d804 <socket+0x18c>
    {
        if(u8Type == SOCK_STREAM)
 800d696:	797b      	ldrb	r3, [r7, #5]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d12d      	bne.n	800d6f8 <socket+0x80>
        {
            for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
 800d69c:	2300      	movs	r3, #0
 800d69e:	77bb      	strb	r3, [r7, #30]
 800d6a0:	e026      	b.n	800d6f0 <socket+0x78>
            {
                u8SockID    = u8NextTcpSock;
 800d6a2:	4b5b      	ldr	r3, [pc, #364]	@ (800d810 <socket+0x198>)
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	74fb      	strb	r3, [r7, #19]
                pstrSock    = &gastrSockets[u8NextTcpSock];
 800d6a8:	4b59      	ldr	r3, [pc, #356]	@ (800d810 <socket+0x198>)
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	011b      	lsls	r3, r3, #4
 800d6b0:	4a58      	ldr	r2, [pc, #352]	@ (800d814 <socket+0x19c>)
 800d6b2:	4413      	add	r3, r2
 800d6b4:	61bb      	str	r3, [r7, #24]
                u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
 800d6b6:	4b56      	ldr	r3, [pc, #344]	@ (800d810 <socket+0x198>)
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	1c5a      	adds	r2, r3, #1
 800d6be:	4b56      	ldr	r3, [pc, #344]	@ (800d818 <socket+0x1a0>)
 800d6c0:	fb83 1302 	smull	r1, r3, r3, r2
 800d6c4:	4413      	add	r3, r2
 800d6c6:	1099      	asrs	r1, r3, #2
 800d6c8:	17d3      	asrs	r3, r2, #31
 800d6ca:	1ac9      	subs	r1, r1, r3
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	00db      	lsls	r3, r3, #3
 800d6d0:	1a5b      	subs	r3, r3, r1
 800d6d2:	1ad1      	subs	r1, r2, r3
 800d6d4:	b2ca      	uxtb	r2, r1
 800d6d6:	4b4e      	ldr	r3, [pc, #312]	@ (800d810 <socket+0x198>)
 800d6d8:	701a      	strb	r2, [r3, #0]
                if(!pstrSock->bIsUsed)
 800d6da:	69bb      	ldr	r3, [r7, #24]
 800d6dc:	7a9b      	ldrb	r3, [r3, #10]
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d102      	bne.n	800d6ea <socket+0x72>
                {
                    sock = (SOCKET)u8SockID;
 800d6e4:	7cfb      	ldrb	r3, [r7, #19]
 800d6e6:	77fb      	strb	r3, [r7, #31]
                    break;
 800d6e8:	e036      	b.n	800d758 <socket+0xe0>
            for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
 800d6ea:	7fbb      	ldrb	r3, [r7, #30]
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	77bb      	strb	r3, [r7, #30]
 800d6f0:	7fbb      	ldrb	r3, [r7, #30]
 800d6f2:	2b06      	cmp	r3, #6
 800d6f4:	d9d5      	bls.n	800d6a2 <socket+0x2a>
 800d6f6:	e02f      	b.n	800d758 <socket+0xe0>
                }
            }
        }
        else if(u8Type == SOCK_DGRAM)
 800d6f8:	797b      	ldrb	r3, [r7, #5]
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d12c      	bne.n	800d758 <socket+0xe0>
        {
            volatile tstrSocket *pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
 800d6fe:	4b47      	ldr	r3, [pc, #284]	@ (800d81c <socket+0x1a4>)
 800d700:	617b      	str	r3, [r7, #20]
            for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
 800d702:	2300      	movs	r3, #0
 800d704:	77bb      	strb	r3, [r7, #30]
 800d706:	e024      	b.n	800d752 <socket+0xda>
            {
                u8SockID        = u8NextUdpSock;
 800d708:	4b45      	ldr	r3, [pc, #276]	@ (800d820 <socket+0x1a8>)
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	74fb      	strb	r3, [r7, #19]
                pstrSock        = &pastrUDPSockets[u8NextUdpSock];
 800d70e:	4b44      	ldr	r3, [pc, #272]	@ (800d820 <socket+0x1a8>)
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	b2db      	uxtb	r3, r3
 800d714:	011b      	lsls	r3, r3, #4
 800d716:	697a      	ldr	r2, [r7, #20]
 800d718:	4413      	add	r3, r2
 800d71a:	61bb      	str	r3, [r7, #24]
                u8NextUdpSock   = (u8NextUdpSock + 1) % UDP_SOCK_MAX;
 800d71c:	4b40      	ldr	r3, [pc, #256]	@ (800d820 <socket+0x1a8>)
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	b2db      	uxtb	r3, r3
 800d722:	3301      	adds	r3, #1
 800d724:	425a      	negs	r2, r3
 800d726:	f003 0303 	and.w	r3, r3, #3
 800d72a:	f002 0203 	and.w	r2, r2, #3
 800d72e:	bf58      	it	pl
 800d730:	4253      	negpl	r3, r2
 800d732:	b2da      	uxtb	r2, r3
 800d734:	4b3a      	ldr	r3, [pc, #232]	@ (800d820 <socket+0x1a8>)
 800d736:	701a      	strb	r2, [r3, #0]
                if(!pstrSock->bIsUsed)
 800d738:	69bb      	ldr	r3, [r7, #24]
 800d73a:	7a9b      	ldrb	r3, [r3, #10]
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d104      	bne.n	800d74c <socket+0xd4>
                {
                    sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
 800d742:	7cfb      	ldrb	r3, [r7, #19]
 800d744:	3307      	adds	r3, #7
 800d746:	b2db      	uxtb	r3, r3
 800d748:	77fb      	strb	r3, [r7, #31]
                    break;
 800d74a:	e005      	b.n	800d758 <socket+0xe0>
            for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
 800d74c:	7fbb      	ldrb	r3, [r7, #30]
 800d74e:	3301      	adds	r3, #1
 800d750:	77bb      	strb	r3, [r7, #30]
 800d752:	7fbb      	ldrb	r3, [r7, #30]
 800d754:	2b03      	cmp	r3, #3
 800d756:	d9d7      	bls.n	800d708 <socket+0x90>
                }
            }
        }

        if(sock >= 0)
 800d758:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	db51      	blt.n	800d804 <socket+0x18c>
        {
            m2m_memset((uint8 *)pstrSock, 0, sizeof(tstrSocket));
 800d760:	2210      	movs	r2, #16
 800d762:	2100      	movs	r1, #0
 800d764:	69b8      	ldr	r0, [r7, #24]
 800d766:	f7fc f9a7 	bl	8009ab8 <m2m_memset>
            pstrSock->bIsUsed = 1;
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	2201      	movs	r2, #1
 800d76e:	729a      	strb	r2, [r3, #10]

            /* The session ID is used to distinguish different socket connections
                by comparing the assigned session ID to the one reported by the firmware*/
            ++gu16SessionID;
 800d770:	4b2c      	ldr	r3, [pc, #176]	@ (800d824 <socket+0x1ac>)
 800d772:	881b      	ldrh	r3, [r3, #0]
 800d774:	b29b      	uxth	r3, r3
 800d776:	3301      	adds	r3, #1
 800d778:	b29a      	uxth	r2, r3
 800d77a:	4b2a      	ldr	r3, [pc, #168]	@ (800d824 <socket+0x1ac>)
 800d77c:	801a      	strh	r2, [r3, #0]
            if(gu16SessionID == 0)
 800d77e:	4b29      	ldr	r3, [pc, #164]	@ (800d824 <socket+0x1ac>)
 800d780:	881b      	ldrh	r3, [r3, #0]
 800d782:	b29b      	uxth	r3, r3
 800d784:	2b00      	cmp	r3, #0
 800d786:	d106      	bne.n	800d796 <socket+0x11e>
                ++gu16SessionID;
 800d788:	4b26      	ldr	r3, [pc, #152]	@ (800d824 <socket+0x1ac>)
 800d78a:	881b      	ldrh	r3, [r3, #0]
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	3301      	adds	r3, #1
 800d790:	b29a      	uxth	r2, r3
 800d792:	4b24      	ldr	r3, [pc, #144]	@ (800d824 <socket+0x1ac>)
 800d794:	801a      	strh	r2, [r3, #0]

            pstrSock->u16SessionID = gu16SessionID;
 800d796:	4b23      	ldr	r3, [pc, #140]	@ (800d824 <socket+0x1ac>)
 800d798:	881b      	ldrh	r3, [r3, #0]
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	69bb      	ldr	r3, [r7, #24]
 800d79e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n", sock, gu16SessionID);
 800d7a0:	4821      	ldr	r0, [pc, #132]	@ (800d828 <socket+0x1b0>)
 800d7a2:	f000 fc6b 	bl	800e07c <iprintf>
 800d7a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d7aa:	4a1e      	ldr	r2, [pc, #120]	@ (800d824 <socket+0x1ac>)
 800d7ac:	8812      	ldrh	r2, [r2, #0]
 800d7ae:	b292      	uxth	r2, r2
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	481e      	ldr	r0, [pc, #120]	@ (800d82c <socket+0x1b4>)
 800d7b4:	f000 fc62 	bl	800e07c <iprintf>
 800d7b8:	200d      	movs	r0, #13
 800d7ba:	f000 fc71 	bl	800e0a0 <putchar>

            if((u8Type == SOCK_STREAM) && (u8Config != SOCKET_CONFIG_SSL_OFF))
 800d7be:	797b      	ldrb	r3, [r7, #5]
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d11f      	bne.n	800d804 <socket+0x18c>
 800d7c4:	793b      	ldrb	r3, [r7, #4]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d01c      	beq.n	800d804 <socket+0x18c>
            {
                tstrSSLSocketCreateCmd  strSSLCreate;
                strSSLCreate.sslSock = sock;
 800d7ca:	7ffb      	ldrb	r3, [r7, #31]
 800d7cc:	733b      	strb	r3, [r7, #12]
                SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8 *)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
 800d7ce:	f107 020c 	add.w	r2, r7, #12
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	9302      	str	r3, [sp, #8]
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	9301      	str	r3, [sp, #4]
 800d7da:	2300      	movs	r3, #0
 800d7dc:	9300      	str	r3, [sp, #0]
 800d7de:	2304      	movs	r3, #4
 800d7e0:	2150      	movs	r1, #80	@ 0x50
 800d7e2:	2002      	movs	r0, #2
 800d7e4:	f7fc fada 	bl	8009d9c <hif_send>

                pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
 800d7e8:	69bb      	ldr	r3, [r7, #24]
 800d7ea:	2221      	movs	r2, #33	@ 0x21
 800d7ec:	72da      	strb	r2, [r3, #11]
                if(u8Config == SOCKET_CONFIG_SSL_DELAY)
 800d7ee:	793b      	ldrb	r3, [r7, #4]
 800d7f0:	2b02      	cmp	r3, #2
 800d7f2:	d107      	bne.n	800d804 <socket+0x18c>
                    pstrSock->u8SSLFlags |= SSL_FLAGS_DELAY;
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	7adb      	ldrb	r3, [r3, #11]
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d7fe:	b2da      	uxtb	r2, r3
 800d800:	69bb      	ldr	r3, [r7, #24]
 800d802:	72da      	strb	r2, [r3, #11]
            }
        }
    }
    return sock;
 800d804:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3720      	adds	r7, #32
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	20000ce0 	.word	0x20000ce0
 800d814:	20000c18 	.word	0x20000c18
 800d818:	92492493 	.word	0x92492493
 800d81c:	20000c88 	.word	0x20000c88
 800d820:	20000ce1 	.word	0x20000ce1
 800d824:	20000cc8 	.word	0x20000cc8
 800d828:	0800ff80 	.word	0x0800ff80
 800d82c:	0800fed0 	.word	0x0800fed0

0800d830 <connect>:

Date
        5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b08a      	sub	sp, #40	@ 0x28
 800d834:	af04      	add	r7, sp, #16
 800d836:	4603      	mov	r3, r0
 800d838:	6039      	str	r1, [r7, #0]
 800d83a:	71fb      	strb	r3, [r7, #7]
 800d83c:	4613      	mov	r3, r2
 800d83e:	71bb      	strb	r3, [r7, #6]
    sint8   s8Ret = SOCK_ERR_INVALID_ARG;
 800d840:	23fa      	movs	r3, #250	@ 0xfa
 800d842:	75fb      	strb	r3, [r7, #23]
    if((sock >= 0) && (sock < MAX_SOCKET) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
 800d844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	db53      	blt.n	800d8f4 <connect+0xc4>
 800d84c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d850:	2b0a      	cmp	r3, #10
 800d852:	dc4f      	bgt.n	800d8f4 <connect+0xc4>
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d04c      	beq.n	800d8f4 <connect+0xc4>
 800d85a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d85e:	4a28      	ldr	r2, [pc, #160]	@ (800d900 <connect+0xd0>)
 800d860:	011b      	lsls	r3, r3, #4
 800d862:	4413      	add	r3, r2
 800d864:	330a      	adds	r3, #10
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	b2db      	uxtb	r3, r3
 800d86a:	2b01      	cmp	r3, #1
 800d86c:	d142      	bne.n	800d8f4 <connect+0xc4>
 800d86e:	79bb      	ldrb	r3, [r7, #6]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d03f      	beq.n	800d8f4 <connect+0xc4>
    {
        tstrConnectCmd  strConnect;
        uint8           u8Cmd = SOCKET_CMD_CONNECT;
 800d874:	2344      	movs	r3, #68	@ 0x44
 800d876:	75bb      	strb	r3, [r7, #22]
        if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
 800d878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d87c:	4a20      	ldr	r2, [pc, #128]	@ (800d900 <connect+0xd0>)
 800d87e:	011b      	lsls	r3, r3, #4
 800d880:	4413      	add	r3, r2
 800d882:	330b      	adds	r3, #11
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	b2db      	uxtb	r3, r3
 800d888:	f003 0301 	and.w	r3, r3, #1
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d00a      	beq.n	800d8a6 <connect+0x76>
        {
            u8Cmd = SOCKET_CMD_SSL_CONNECT;
 800d890:	234b      	movs	r3, #75	@ 0x4b
 800d892:	75bb      	strb	r3, [r7, #22]
            strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
 800d894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d898:	4a19      	ldr	r2, [pc, #100]	@ (800d900 <connect+0xd0>)
 800d89a:	011b      	lsls	r3, r3, #4
 800d89c:	4413      	add	r3, r2
 800d89e:	330b      	adds	r3, #11
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	747b      	strb	r3, [r7, #17]
        }
        strConnect.sock = sock;
 800d8a6:	79fb      	ldrb	r3, [r7, #7]
 800d8a8:	743b      	strb	r3, [r7, #16]
        m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
 800d8aa:	f107 0308 	add.w	r3, r7, #8
 800d8ae:	2208      	movs	r2, #8
 800d8b0:	6839      	ldr	r1, [r7, #0]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7fc f8e0 	bl	8009a78 <m2m_memcpy>

        strConnect.u16SessionID     = gastrSockets[sock].u16SessionID;
 800d8b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8bc:	4a10      	ldr	r2, [pc, #64]	@ (800d900 <connect+0xd0>)
 800d8be:	011b      	lsls	r3, r3, #4
 800d8c0:	4413      	add	r3, r2
 800d8c2:	3306      	adds	r3, #6
 800d8c4:	881b      	ldrh	r3, [r3, #0]
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	827b      	strh	r3, [r7, #18]
        s8Ret = SOCKET_REQUEST(u8Cmd, (uint8 *)&strConnect, sizeof(tstrConnectCmd), NULL, 0, 0);
 800d8ca:	f107 0208 	add.w	r2, r7, #8
 800d8ce:	7db9      	ldrb	r1, [r7, #22]
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	9302      	str	r3, [sp, #8]
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	9301      	str	r3, [sp, #4]
 800d8d8:	2300      	movs	r3, #0
 800d8da:	9300      	str	r3, [sp, #0]
 800d8dc:	230c      	movs	r3, #12
 800d8de:	2002      	movs	r0, #2
 800d8e0:	f7fc fa5c 	bl	8009d9c <hif_send>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	75fb      	strb	r3, [r7, #23]
        if(s8Ret != SOCK_ERR_NO_ERROR)
 800d8e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d001      	beq.n	800d8f4 <connect+0xc4>
        {
            s8Ret = SOCK_ERR_INVALID;
 800d8f0:	23f7      	movs	r3, #247	@ 0xf7
 800d8f2:	75fb      	strb	r3, [r7, #23]
        }
    }
    return s8Ret;
 800d8f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3718      	adds	r7, #24
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}
 800d900:	20000c18 	.word	0x20000c18

0800d904 <send>:

Date
        5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b08e      	sub	sp, #56	@ 0x38
 800d908:	af04      	add	r7, sp, #16
 800d90a:	60b9      	str	r1, [r7, #8]
 800d90c:	4611      	mov	r1, r2
 800d90e:	461a      	mov	r2, r3
 800d910:	4603      	mov	r3, r0
 800d912:	73fb      	strb	r3, [r7, #15]
 800d914:	460b      	mov	r3, r1
 800d916:	81bb      	strh	r3, [r7, #12]
 800d918:	4613      	mov	r3, r2
 800d91a:	80fb      	strh	r3, [r7, #6]
    sint16  s16Ret = SOCK_ERR_INVALID_ARG;
 800d91c:	f64f 73fa 	movw	r3, #65530	@ 0xfffa
 800d920:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if((sock >= 0) && (sock < MAX_SOCKET) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
 800d922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d926:	2b00      	cmp	r3, #0
 800d928:	db68      	blt.n	800d9fc <send+0xf8>
 800d92a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d92e:	2b0a      	cmp	r3, #10
 800d930:	dc64      	bgt.n	800d9fc <send+0xf8>
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d061      	beq.n	800d9fc <send+0xf8>
 800d938:	89bb      	ldrh	r3, [r7, #12]
 800d93a:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 800d93e:	d85d      	bhi.n	800d9fc <send+0xf8>
 800d940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d944:	4a30      	ldr	r2, [pc, #192]	@ (800da08 <send+0x104>)
 800d946:	011b      	lsls	r3, r3, #4
 800d948:	4413      	add	r3, r2
 800d94a:	330a      	adds	r3, #10
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	2b01      	cmp	r3, #1
 800d952:	d153      	bne.n	800d9fc <send+0xf8>
    {
        uint16          u16DataOffset;
        tstrSendCmd     strSend;
        uint8           u8Cmd;

        u8Cmd           = SOCKET_CMD_SEND;
 800d954:	2345      	movs	r3, #69	@ 0x45
 800d956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        u16DataOffset   = TCP_TX_PACKET_OFFSET;
 800d95a:	2350      	movs	r3, #80	@ 0x50
 800d95c:	84bb      	strh	r3, [r7, #36]	@ 0x24

        strSend.sock            = sock;
 800d95e:	7bfb      	ldrb	r3, [r7, #15]
 800d960:	743b      	strb	r3, [r7, #16]
        strSend.u16DataSize     = NM_BSP_B_L_16(u16SendLength);
 800d962:	89bb      	ldrh	r3, [r7, #12]
 800d964:	827b      	strh	r3, [r7, #18]
        strSend.u16SessionID    = gastrSockets[sock].u16SessionID;
 800d966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d96a:	4a27      	ldr	r2, [pc, #156]	@ (800da08 <send+0x104>)
 800d96c:	011b      	lsls	r3, r3, #4
 800d96e:	4413      	add	r3, r2
 800d970:	3306      	adds	r3, #6
 800d972:	881b      	ldrh	r3, [r3, #0]
 800d974:	b29b      	uxth	r3, r3
 800d976:	83bb      	strh	r3, [r7, #28]

        if(sock >= TCP_SOCK_MAX)
 800d978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d97c:	2b06      	cmp	r3, #6
 800d97e:	dd01      	ble.n	800d984 <send+0x80>
        {
            u16DataOffset = UDP_TX_PACKET_OFFSET;
 800d980:	2344      	movs	r3, #68	@ 0x44
 800d982:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }
        if(
                (gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 800d984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d988:	4a1f      	ldr	r2, [pc, #124]	@ (800da08 <send+0x104>)
 800d98a:	011b      	lsls	r3, r3, #4
 800d98c:	4413      	add	r3, r2
 800d98e:	330b      	adds	r3, #11
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	b2db      	uxtb	r3, r3
 800d994:	f003 0301 	and.w	r3, r3, #1
        if(
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d015      	beq.n	800d9c8 <send+0xc4>
            &&  (!(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_DELAY))
 800d99c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9a0:	4a19      	ldr	r2, [pc, #100]	@ (800da08 <send+0x104>)
 800d9a2:	011b      	lsls	r3, r3, #4
 800d9a4:	4413      	add	r3, r2
 800d9a6:	330b      	adds	r3, #11
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	b25b      	sxtb	r3, r3
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	db0a      	blt.n	800d9c8 <send+0xc4>
        )
        {
            u8Cmd           = SOCKET_CMD_SSL_SEND;
 800d9b2:	234c      	movs	r3, #76	@ 0x4c
 800d9b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            u16DataOffset   = gastrSockets[sock].u16DataOffset;
 800d9b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9bc:	4a12      	ldr	r2, [pc, #72]	@ (800da08 <send+0x104>)
 800d9be:	011b      	lsls	r3, r3, #4
 800d9c0:	4413      	add	r3, r2
 800d9c2:	3308      	adds	r3, #8
 800d9c4:	881b      	ldrh	r3, [r3, #0]
 800d9c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }

        s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8 *)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
 800d9c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d9cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d9d0:	b2d9      	uxtb	r1, r3
 800d9d2:	f107 0210 	add.w	r2, r7, #16
 800d9d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9d8:	9302      	str	r3, [sp, #8]
 800d9da:	89bb      	ldrh	r3, [r7, #12]
 800d9dc:	9301      	str	r3, [sp, #4]
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	9300      	str	r3, [sp, #0]
 800d9e2:	2310      	movs	r3, #16
 800d9e4:	2002      	movs	r0, #2
 800d9e6:	f7fc f9d9 	bl	8009d9c <hif_send>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if(s16Ret != SOCK_ERR_NO_ERROR)
 800d9ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d002      	beq.n	800d9fc <send+0xf8>
        {
            s16Ret = SOCK_ERR_BUFFER_FULL;
 800d9f6:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 800d9fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
    }
    return s16Ret;
 800d9fc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 800da00:	4618      	mov	r0, r3
 800da02:	3728      	adds	r7, #40	@ 0x28
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	20000c18 	.word	0x20000c18

0800da0c <recv>:

Date
        5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b08c      	sub	sp, #48	@ 0x30
 800da10:	af04      	add	r7, sp, #16
 800da12:	60b9      	str	r1, [r7, #8]
 800da14:	607b      	str	r3, [r7, #4]
 800da16:	4603      	mov	r3, r0
 800da18:	73fb      	strb	r3, [r7, #15]
 800da1a:	4613      	mov	r3, r2
 800da1c:	81bb      	strh	r3, [r7, #12]
    sint16  s16Ret = SOCK_ERR_INVALID_ARG;
 800da1e:	f64f 73fa 	movw	r3, #65530	@ 0xfffa
 800da22:	83fb      	strh	r3, [r7, #30]

    if((sock >= 0) && (sock < MAX_SOCKET) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
 800da24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	db7d      	blt.n	800db28 <recv+0x11c>
 800da2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da30:	2b0a      	cmp	r3, #10
 800da32:	dc79      	bgt.n	800db28 <recv+0x11c>
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d076      	beq.n	800db28 <recv+0x11c>
 800da3a:	89bb      	ldrh	r3, [r7, #12]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d073      	beq.n	800db28 <recv+0x11c>
 800da40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da44:	4a3b      	ldr	r2, [pc, #236]	@ (800db34 <recv+0x128>)
 800da46:	011b      	lsls	r3, r3, #4
 800da48:	4413      	add	r3, r2
 800da4a:	330a      	adds	r3, #10
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	2b01      	cmp	r3, #1
 800da52:	d169      	bne.n	800db28 <recv+0x11c>
    {
        s16Ret = SOCK_ERR_NO_ERROR;
 800da54:	2300      	movs	r3, #0
 800da56:	83fb      	strh	r3, [r7, #30]
        gastrSockets[sock].pu8UserBuffer        = (uint8 *)pvRecvBuf;
 800da58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da5c:	4a35      	ldr	r2, [pc, #212]	@ (800db34 <recv+0x128>)
 800da5e:	011b      	lsls	r3, r3, #4
 800da60:	4413      	add	r3, r2
 800da62:	68ba      	ldr	r2, [r7, #8]
 800da64:	601a      	str	r2, [r3, #0]
        gastrSockets[sock].u16UserBufferSize    = u16BufLen;
 800da66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da6a:	4a32      	ldr	r2, [pc, #200]	@ (800db34 <recv+0x128>)
 800da6c:	011b      	lsls	r3, r3, #4
 800da6e:	4413      	add	r3, r2
 800da70:	3304      	adds	r3, #4
 800da72:	89ba      	ldrh	r2, [r7, #12]
 800da74:	801a      	strh	r2, [r3, #0]

        if(!gastrSockets[sock].bIsRecvPending)
 800da76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da7a:	4a2e      	ldr	r2, [pc, #184]	@ (800db34 <recv+0x128>)
 800da7c:	011b      	lsls	r3, r3, #4
 800da7e:	4413      	add	r3, r2
 800da80:	330c      	adds	r3, #12
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	b2db      	uxtb	r3, r3
 800da86:	2b00      	cmp	r3, #0
 800da88:	d14e      	bne.n	800db28 <recv+0x11c>
        {
            tstrRecvCmd strRecv;
            uint8       u8Cmd = SOCKET_CMD_RECV;
 800da8a:	2346      	movs	r3, #70	@ 0x46
 800da8c:	777b      	strb	r3, [r7, #29]

            gastrSockets[sock].bIsRecvPending = 1;
 800da8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da92:	4a28      	ldr	r2, [pc, #160]	@ (800db34 <recv+0x128>)
 800da94:	011b      	lsls	r3, r3, #4
 800da96:	4413      	add	r3, r2
 800da98:	330c      	adds	r3, #12
 800da9a:	2201      	movs	r2, #1
 800da9c:	701a      	strb	r2, [r3, #0]
            if(
                    (gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 800da9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daa2:	4a24      	ldr	r2, [pc, #144]	@ (800db34 <recv+0x128>)
 800daa4:	011b      	lsls	r3, r3, #4
 800daa6:	4413      	add	r3, r2
 800daa8:	330b      	adds	r3, #11
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	b2db      	uxtb	r3, r3
 800daae:	f003 0301 	and.w	r3, r3, #1
            if(
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00c      	beq.n	800dad0 <recv+0xc4>
                &&  (!(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_DELAY))
 800dab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daba:	4a1e      	ldr	r2, [pc, #120]	@ (800db34 <recv+0x128>)
 800dabc:	011b      	lsls	r3, r3, #4
 800dabe:	4413      	add	r3, r2
 800dac0:	330b      	adds	r3, #11
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	b25b      	sxtb	r3, r3
 800dac8:	2b00      	cmp	r3, #0
 800daca:	db01      	blt.n	800dad0 <recv+0xc4>
            )
            {
                u8Cmd = SOCKET_CMD_SSL_RECV;
 800dacc:	234d      	movs	r3, #77	@ 0x4d
 800dace:	777b      	strb	r3, [r7, #29]
            }

            /* Check the timeout value. */
            if(u32Timeoutmsec == 0)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d103      	bne.n	800dade <recv+0xd2>
                strRecv.u32Timeoutmsec = 0xFFFFFFFF;
 800dad6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dada:	613b      	str	r3, [r7, #16]
 800dadc:	e001      	b.n	800dae2 <recv+0xd6>
            else
                strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	613b      	str	r3, [r7, #16]
            strRecv.sock = sock;
 800dae2:	7bfb      	ldrb	r3, [r7, #15]
 800dae4:	753b      	strb	r3, [r7, #20]
            strRecv.u16SessionID        = gastrSockets[sock].u16SessionID;
 800dae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daea:	4a12      	ldr	r2, [pc, #72]	@ (800db34 <recv+0x128>)
 800daec:	011b      	lsls	r3, r3, #4
 800daee:	4413      	add	r3, r2
 800daf0:	3306      	adds	r3, #6
 800daf2:	881b      	ldrh	r3, [r3, #0]
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	82fb      	strh	r3, [r7, #22]
            strRecv.u16BufLen           = u16BufLen;
 800daf8:	89bb      	ldrh	r3, [r7, #12]
 800dafa:	833b      	strh	r3, [r7, #24]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
 800dafc:	f107 0210 	add.w	r2, r7, #16
 800db00:	7f79      	ldrb	r1, [r7, #29]
 800db02:	2300      	movs	r3, #0
 800db04:	9302      	str	r3, [sp, #8]
 800db06:	2300      	movs	r3, #0
 800db08:	9301      	str	r3, [sp, #4]
 800db0a:	2300      	movs	r3, #0
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	230c      	movs	r3, #12
 800db10:	2002      	movs	r0, #2
 800db12:	f7fc f943 	bl	8009d9c <hif_send>
 800db16:	4603      	mov	r3, r0
 800db18:	83fb      	strh	r3, [r7, #30]
            if(s16Ret != SOCK_ERR_NO_ERROR)
 800db1a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d002      	beq.n	800db28 <recv+0x11c>
            {
                s16Ret = SOCK_ERR_BUFFER_FULL;
 800db22:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 800db26:	83fb      	strh	r3, [r7, #30]
            }
        }
    }
    return s16Ret;
 800db28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3720      	adds	r7, #32
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}
 800db34:	20000c18 	.word	0x20000c18

0800db38 <close>:

Date
        4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b088      	sub	sp, #32
 800db3c:	af04      	add	r7, sp, #16
 800db3e:	4603      	mov	r3, r0
 800db40:	71fb      	strb	r3, [r7, #7]
    sint8   s8Ret = SOCK_ERR_INVALID_ARG;
 800db42:	23fa      	movs	r3, #250	@ 0xfa
 800db44:	73fb      	strb	r3, [r7, #15]
    M2M_INFO("Sock to delete <%d>\n", sock);
 800db46:	482f      	ldr	r0, [pc, #188]	@ (800dc04 <close+0xcc>)
 800db48:	f000 fa98 	bl	800e07c <iprintf>
 800db4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db50:	4619      	mov	r1, r3
 800db52:	482d      	ldr	r0, [pc, #180]	@ (800dc08 <close+0xd0>)
 800db54:	f000 fa92 	bl	800e07c <iprintf>
 800db58:	200d      	movs	r0, #13
 800db5a:	f000 faa1 	bl	800e0a0 <putchar>
    if((sock >= 0) && (sock < MAX_SOCKET) && (gastrSockets[sock].bIsUsed == 1))
 800db5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db62:	2b00      	cmp	r3, #0
 800db64:	db47      	blt.n	800dbf6 <close+0xbe>
 800db66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db6a:	2b0a      	cmp	r3, #10
 800db6c:	dc43      	bgt.n	800dbf6 <close+0xbe>
 800db6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db72:	4a26      	ldr	r2, [pc, #152]	@ (800dc0c <close+0xd4>)
 800db74:	011b      	lsls	r3, r3, #4
 800db76:	4413      	add	r3, r2
 800db78:	330a      	adds	r3, #10
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	b2db      	uxtb	r3, r3
 800db7e:	2b01      	cmp	r3, #1
 800db80:	d139      	bne.n	800dbf6 <close+0xbe>
    {
        uint8   u8Cmd = SOCKET_CMD_CLOSE;
 800db82:	2349      	movs	r3, #73	@ 0x49
 800db84:	73bb      	strb	r3, [r7, #14]
        tstrCloseCmd strclose;
        strclose.sock = sock;
 800db86:	79fb      	ldrb	r3, [r7, #7]
 800db88:	723b      	strb	r3, [r7, #8]
        strclose.u16SessionID       = gastrSockets[sock].u16SessionID;
 800db8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db8e:	4a1f      	ldr	r2, [pc, #124]	@ (800dc0c <close+0xd4>)
 800db90:	011b      	lsls	r3, r3, #4
 800db92:	4413      	add	r3, r2
 800db94:	3306      	adds	r3, #6
 800db96:	881b      	ldrh	r3, [r3, #0]
 800db98:	b29b      	uxth	r3, r3
 800db9a:	817b      	strh	r3, [r7, #10]

        if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 800db9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dba0:	4a1a      	ldr	r2, [pc, #104]	@ (800dc0c <close+0xd4>)
 800dba2:	011b      	lsls	r3, r3, #4
 800dba4:	4413      	add	r3, r2
 800dba6:	330b      	adds	r3, #11
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	b2db      	uxtb	r3, r3
 800dbac:	f003 0301 	and.w	r3, r3, #1
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d001      	beq.n	800dbb8 <close+0x80>
        {
            u8Cmd = SOCKET_CMD_SSL_CLOSE;
 800dbb4:	234e      	movs	r3, #78	@ 0x4e
 800dbb6:	73bb      	strb	r3, [r7, #14]
        }
        s8Ret = SOCKET_REQUEST(u8Cmd, (uint8 *)&strclose, sizeof(tstrCloseCmd), NULL, 0, 0);
 800dbb8:	f107 0208 	add.w	r2, r7, #8
 800dbbc:	7bb9      	ldrb	r1, [r7, #14]
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	9302      	str	r3, [sp, #8]
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	9301      	str	r3, [sp, #4]
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	9300      	str	r3, [sp, #0]
 800dbca:	2304      	movs	r3, #4
 800dbcc:	2002      	movs	r0, #2
 800dbce:	f7fc f8e5 	bl	8009d9c <hif_send>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	73fb      	strb	r3, [r7, #15]
        if(s8Ret != SOCK_ERR_NO_ERROR)
 800dbd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d001      	beq.n	800dbe2 <close+0xaa>
        {
            s8Ret = SOCK_ERR_INVALID;
 800dbde:	23f7      	movs	r3, #247	@ 0xf7
 800dbe0:	73fb      	strb	r3, [r7, #15]
        }
        m2m_memset((uint8 *)&gastrSockets[sock], 0, sizeof(tstrSocket));
 800dbe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbe6:	011b      	lsls	r3, r3, #4
 800dbe8:	4a08      	ldr	r2, [pc, #32]	@ (800dc0c <close+0xd4>)
 800dbea:	4413      	add	r3, r2
 800dbec:	2210      	movs	r2, #16
 800dbee:	2100      	movs	r1, #0
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7fb ff61 	bl	8009ab8 <m2m_memset>
    }
    return s8Ret;
 800dbf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	0800ff80 	.word	0x0800ff80
 800dc08:	0800ff8c 	.word	0x0800ff8c
 800dc0c:	20000c18 	.word	0x20000c18

0800dc10 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800dc16:	463b      	mov	r3, r7
 800dc18:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	22b9      	movs	r2, #185	@ 0xb9
 800dc1e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800dc20:	2100      	movs	r1, #0
 800dc22:	4810      	ldr	r0, [pc, #64]	@ (800dc64 <spi_flash_enter_low_power_mode+0x54>)
 800dc24:	f7fd ff44 	bl	800bab0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	480e      	ldr	r0, [pc, #56]	@ (800dc68 <spi_flash_enter_low_power_mode+0x58>)
 800dc30:	f7fd ff3e 	bl	800bab0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800dc34:	2101      	movs	r1, #1
 800dc36:	480d      	ldr	r0, [pc, #52]	@ (800dc6c <spi_flash_enter_low_power_mode+0x5c>)
 800dc38:	f7fd ff3a 	bl	800bab0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800dc3c:	2100      	movs	r1, #0
 800dc3e:	480c      	ldr	r0, [pc, #48]	@ (800dc70 <spi_flash_enter_low_power_mode+0x60>)
 800dc40:	f7fd ff36 	bl	800bab0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
 800dc44:	2181      	movs	r1, #129	@ 0x81
 800dc46:	480b      	ldr	r0, [pc, #44]	@ (800dc74 <spi_flash_enter_low_power_mode+0x64>)
 800dc48:	f7fd ff32 	bl	800bab0 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800dc4c:	bf00      	nop
 800dc4e:	480a      	ldr	r0, [pc, #40]	@ (800dc78 <spi_flash_enter_low_power_mode+0x68>)
 800dc50:	f7fd ff14 	bl	800ba7c <nm_read_reg>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d1f9      	bne.n	800dc4e <spi_flash_enter_low_power_mode+0x3e>
}
 800dc5a:	bf00      	nop
 800dc5c:	bf00      	nop
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	00010208 	.word	0x00010208
 800dc68:	0001020c 	.word	0x0001020c
 800dc6c:	00010214 	.word	0x00010214
 800dc70:	0001021c 	.word	0x0001021c
 800dc74:	00010204 	.word	0x00010204
 800dc78:	00010218 	.word	0x00010218

0800dc7c <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800dc82:	463b      	mov	r3, r7
 800dc84:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	22ab      	movs	r2, #171	@ 0xab
 800dc8a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800dc8c:	2100      	movs	r1, #0
 800dc8e:	4810      	ldr	r0, [pc, #64]	@ (800dcd0 <spi_flash_leave_low_power_mode+0x54>)
 800dc90:	f7fd ff0e 	bl	800bab0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	4619      	mov	r1, r3
 800dc9a:	480e      	ldr	r0, [pc, #56]	@ (800dcd4 <spi_flash_leave_low_power_mode+0x58>)
 800dc9c:	f7fd ff08 	bl	800bab0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800dca0:	2101      	movs	r1, #1
 800dca2:	480d      	ldr	r0, [pc, #52]	@ (800dcd8 <spi_flash_leave_low_power_mode+0x5c>)
 800dca4:	f7fd ff04 	bl	800bab0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800dca8:	2100      	movs	r1, #0
 800dcaa:	480c      	ldr	r0, [pc, #48]	@ (800dcdc <spi_flash_leave_low_power_mode+0x60>)
 800dcac:	f7fd ff00 	bl	800bab0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
 800dcb0:	2181      	movs	r1, #129	@ 0x81
 800dcb2:	480b      	ldr	r0, [pc, #44]	@ (800dce0 <spi_flash_leave_low_power_mode+0x64>)
 800dcb4:	f7fd fefc 	bl	800bab0 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800dcb8:	bf00      	nop
 800dcba:	480a      	ldr	r0, [pc, #40]	@ (800dce4 <spi_flash_leave_low_power_mode+0x68>)
 800dcbc:	f7fd fede 	bl	800ba7c <nm_read_reg>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d1f9      	bne.n	800dcba <spi_flash_leave_low_power_mode+0x3e>
}
 800dcc6:	bf00      	nop
 800dcc8:	bf00      	nop
 800dcca:	3708      	adds	r7, #8
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	00010208 	.word	0x00010208
 800dcd4:	0001020c 	.word	0x0001020c
 800dcd8:	00010214 	.word	0x00010214
 800dcdc:	0001021c 	.word	0x0001021c
 800dce0:	00010204 	.word	0x00010204
 800dce4:	00010218 	.word	0x00010218

0800dce8 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	4603      	mov	r3, r0
 800dcf0:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = M2M_SUCCESS;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	73fb      	strb	r3, [r7, #15]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
 800dcf6:	f7fd fba9 	bl	800b44c <nmi_get_chipid>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dd00:	f5b3 7f68 	cmp.w	r3, #928	@ 0x3a0
 800dd04:	d331      	bcc.n	800dd6a <spi_flash_enable+0x82>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
 800dd06:	f107 0308 	add.w	r3, r7, #8
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	f241 4010 	movw	r0, #5136	@ 0x1410
 800dd10:	f7fd fec0 	bl	800ba94 <nm_read_reg_with_ret>
 800dd14:	4603      	mov	r3, r0
 800dd16:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != M2M_SUCCESS) {
 800dd18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d126      	bne.n	800dd6e <spi_flash_enable+0x86>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	f023 63ee 	bic.w	r3, r3, #124780544	@ 0x7700000
 800dd26:	f423 23ee 	bic.w	r3, r3, #487424	@ 0x77000
 800dd2a:	60bb      	str	r3, [r7, #8]
		if(enable) {
 800dd2c:	79fb      	ldrb	r3, [r7, #7]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d00e      	beq.n	800dd50 <spi_flash_enable+0x68>
			u32Val |= ((0x1111ul) << 12);
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	f043 7388 	orr.w	r3, r3, #17825792	@ 0x1100000
 800dd38:	f443 3388 	orr.w	r3, r3, #69632	@ 0x11000
 800dd3c:	60bb      	str	r3, [r7, #8]
			nm_write_reg(0x1410, u32Val);
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	4619      	mov	r1, r3
 800dd42:	f241 4010 	movw	r0, #5136	@ 0x1410
 800dd46:	f7fd feb3 	bl	800bab0 <nm_write_reg>
			spi_flash_leave_low_power_mode();
 800dd4a:	f7ff ff97 	bl	800dc7c <spi_flash_leave_low_power_mode>
 800dd4e:	e00f      	b.n	800dd70 <spi_flash_enable+0x88>
		} else {
			spi_flash_enter_low_power_mode();
 800dd50:	f7ff ff5e 	bl	800dc10 <spi_flash_enter_low_power_mode>
			/* Disable pinmux to SPI flash to minimize leakage. */
			u32Val |= ((0x0010ul) << 12);
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dd5a:	60bb      	str	r3, [r7, #8]
			nm_write_reg(0x1410, u32Val);
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	4619      	mov	r1, r3
 800dd60:	f241 4010 	movw	r0, #5136	@ 0x1410
 800dd64:	f7fd fea4 	bl	800bab0 <nm_write_reg>
 800dd68:	e002      	b.n	800dd70 <spi_flash_enable+0x88>
		}
	}
ERR1:
 800dd6a:	bf00      	nop
 800dd6c:	e000      	b.n	800dd70 <spi_flash_enable+0x88>
			goto ERR1;
 800dd6e:	bf00      	nop
	return s8Ret;
 800dd70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3710      	adds	r7, #16
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <malloc>:
 800dd7c:	4b02      	ldr	r3, [pc, #8]	@ (800dd88 <malloc+0xc>)
 800dd7e:	4601      	mov	r1, r0
 800dd80:	6818      	ldr	r0, [r3, #0]
 800dd82:	f000 b82d 	b.w	800dde0 <_malloc_r>
 800dd86:	bf00      	nop
 800dd88:	20000024 	.word	0x20000024

0800dd8c <free>:
 800dd8c:	4b02      	ldr	r3, [pc, #8]	@ (800dd98 <free+0xc>)
 800dd8e:	4601      	mov	r1, r0
 800dd90:	6818      	ldr	r0, [r3, #0]
 800dd92:	f000 bb4f 	b.w	800e434 <_free_r>
 800dd96:	bf00      	nop
 800dd98:	20000024 	.word	0x20000024

0800dd9c <sbrk_aligned>:
 800dd9c:	b570      	push	{r4, r5, r6, lr}
 800dd9e:	4e0f      	ldr	r6, [pc, #60]	@ (800dddc <sbrk_aligned+0x40>)
 800dda0:	460c      	mov	r4, r1
 800dda2:	4605      	mov	r5, r0
 800dda4:	6831      	ldr	r1, [r6, #0]
 800dda6:	b911      	cbnz	r1, 800ddae <sbrk_aligned+0x12>
 800dda8:	f000 faf4 	bl	800e394 <_sbrk_r>
 800ddac:	6030      	str	r0, [r6, #0]
 800ddae:	4621      	mov	r1, r4
 800ddb0:	4628      	mov	r0, r5
 800ddb2:	f000 faef 	bl	800e394 <_sbrk_r>
 800ddb6:	1c43      	adds	r3, r0, #1
 800ddb8:	d103      	bne.n	800ddc2 <sbrk_aligned+0x26>
 800ddba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	bd70      	pop	{r4, r5, r6, pc}
 800ddc2:	1cc4      	adds	r4, r0, #3
 800ddc4:	f024 0403 	bic.w	r4, r4, #3
 800ddc8:	42a0      	cmp	r0, r4
 800ddca:	d0f8      	beq.n	800ddbe <sbrk_aligned+0x22>
 800ddcc:	1a21      	subs	r1, r4, r0
 800ddce:	4628      	mov	r0, r5
 800ddd0:	f000 fae0 	bl	800e394 <_sbrk_r>
 800ddd4:	3001      	adds	r0, #1
 800ddd6:	d1f2      	bne.n	800ddbe <sbrk_aligned+0x22>
 800ddd8:	e7ef      	b.n	800ddba <sbrk_aligned+0x1e>
 800ddda:	bf00      	nop
 800dddc:	20000ce4 	.word	0x20000ce4

0800dde0 <_malloc_r>:
 800dde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dde4:	1ccd      	adds	r5, r1, #3
 800dde6:	4606      	mov	r6, r0
 800dde8:	f025 0503 	bic.w	r5, r5, #3
 800ddec:	3508      	adds	r5, #8
 800ddee:	2d0c      	cmp	r5, #12
 800ddf0:	bf38      	it	cc
 800ddf2:	250c      	movcc	r5, #12
 800ddf4:	2d00      	cmp	r5, #0
 800ddf6:	db01      	blt.n	800ddfc <_malloc_r+0x1c>
 800ddf8:	42a9      	cmp	r1, r5
 800ddfa:	d904      	bls.n	800de06 <_malloc_r+0x26>
 800ddfc:	230c      	movs	r3, #12
 800ddfe:	6033      	str	r3, [r6, #0]
 800de00:	2000      	movs	r0, #0
 800de02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dedc <_malloc_r+0xfc>
 800de0a:	f000 f869 	bl	800dee0 <__malloc_lock>
 800de0e:	f8d8 3000 	ldr.w	r3, [r8]
 800de12:	461c      	mov	r4, r3
 800de14:	bb44      	cbnz	r4, 800de68 <_malloc_r+0x88>
 800de16:	4629      	mov	r1, r5
 800de18:	4630      	mov	r0, r6
 800de1a:	f7ff ffbf 	bl	800dd9c <sbrk_aligned>
 800de1e:	1c43      	adds	r3, r0, #1
 800de20:	4604      	mov	r4, r0
 800de22:	d158      	bne.n	800ded6 <_malloc_r+0xf6>
 800de24:	f8d8 4000 	ldr.w	r4, [r8]
 800de28:	4627      	mov	r7, r4
 800de2a:	2f00      	cmp	r7, #0
 800de2c:	d143      	bne.n	800deb6 <_malloc_r+0xd6>
 800de2e:	2c00      	cmp	r4, #0
 800de30:	d04b      	beq.n	800deca <_malloc_r+0xea>
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	4639      	mov	r1, r7
 800de36:	4630      	mov	r0, r6
 800de38:	eb04 0903 	add.w	r9, r4, r3
 800de3c:	f000 faaa 	bl	800e394 <_sbrk_r>
 800de40:	4581      	cmp	r9, r0
 800de42:	d142      	bne.n	800deca <_malloc_r+0xea>
 800de44:	6821      	ldr	r1, [r4, #0]
 800de46:	4630      	mov	r0, r6
 800de48:	1a6d      	subs	r5, r5, r1
 800de4a:	4629      	mov	r1, r5
 800de4c:	f7ff ffa6 	bl	800dd9c <sbrk_aligned>
 800de50:	3001      	adds	r0, #1
 800de52:	d03a      	beq.n	800deca <_malloc_r+0xea>
 800de54:	6823      	ldr	r3, [r4, #0]
 800de56:	442b      	add	r3, r5
 800de58:	6023      	str	r3, [r4, #0]
 800de5a:	f8d8 3000 	ldr.w	r3, [r8]
 800de5e:	685a      	ldr	r2, [r3, #4]
 800de60:	bb62      	cbnz	r2, 800debc <_malloc_r+0xdc>
 800de62:	f8c8 7000 	str.w	r7, [r8]
 800de66:	e00f      	b.n	800de88 <_malloc_r+0xa8>
 800de68:	6822      	ldr	r2, [r4, #0]
 800de6a:	1b52      	subs	r2, r2, r5
 800de6c:	d420      	bmi.n	800deb0 <_malloc_r+0xd0>
 800de6e:	2a0b      	cmp	r2, #11
 800de70:	d917      	bls.n	800dea2 <_malloc_r+0xc2>
 800de72:	1961      	adds	r1, r4, r5
 800de74:	42a3      	cmp	r3, r4
 800de76:	6025      	str	r5, [r4, #0]
 800de78:	bf18      	it	ne
 800de7a:	6059      	strne	r1, [r3, #4]
 800de7c:	6863      	ldr	r3, [r4, #4]
 800de7e:	bf08      	it	eq
 800de80:	f8c8 1000 	streq.w	r1, [r8]
 800de84:	5162      	str	r2, [r4, r5]
 800de86:	604b      	str	r3, [r1, #4]
 800de88:	4630      	mov	r0, r6
 800de8a:	f000 f82f 	bl	800deec <__malloc_unlock>
 800de8e:	f104 000b 	add.w	r0, r4, #11
 800de92:	1d23      	adds	r3, r4, #4
 800de94:	f020 0007 	bic.w	r0, r0, #7
 800de98:	1ac2      	subs	r2, r0, r3
 800de9a:	bf1c      	itt	ne
 800de9c:	1a1b      	subne	r3, r3, r0
 800de9e:	50a3      	strne	r3, [r4, r2]
 800dea0:	e7af      	b.n	800de02 <_malloc_r+0x22>
 800dea2:	6862      	ldr	r2, [r4, #4]
 800dea4:	42a3      	cmp	r3, r4
 800dea6:	bf0c      	ite	eq
 800dea8:	f8c8 2000 	streq.w	r2, [r8]
 800deac:	605a      	strne	r2, [r3, #4]
 800deae:	e7eb      	b.n	800de88 <_malloc_r+0xa8>
 800deb0:	4623      	mov	r3, r4
 800deb2:	6864      	ldr	r4, [r4, #4]
 800deb4:	e7ae      	b.n	800de14 <_malloc_r+0x34>
 800deb6:	463c      	mov	r4, r7
 800deb8:	687f      	ldr	r7, [r7, #4]
 800deba:	e7b6      	b.n	800de2a <_malloc_r+0x4a>
 800debc:	461a      	mov	r2, r3
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	42a3      	cmp	r3, r4
 800dec2:	d1fb      	bne.n	800debc <_malloc_r+0xdc>
 800dec4:	2300      	movs	r3, #0
 800dec6:	6053      	str	r3, [r2, #4]
 800dec8:	e7de      	b.n	800de88 <_malloc_r+0xa8>
 800deca:	230c      	movs	r3, #12
 800decc:	4630      	mov	r0, r6
 800dece:	6033      	str	r3, [r6, #0]
 800ded0:	f000 f80c 	bl	800deec <__malloc_unlock>
 800ded4:	e794      	b.n	800de00 <_malloc_r+0x20>
 800ded6:	6005      	str	r5, [r0, #0]
 800ded8:	e7d6      	b.n	800de88 <_malloc_r+0xa8>
 800deda:	bf00      	nop
 800dedc:	20000ce8 	.word	0x20000ce8

0800dee0 <__malloc_lock>:
 800dee0:	4801      	ldr	r0, [pc, #4]	@ (800dee8 <__malloc_lock+0x8>)
 800dee2:	f000 baa4 	b.w	800e42e <__retarget_lock_acquire_recursive>
 800dee6:	bf00      	nop
 800dee8:	20000e2c 	.word	0x20000e2c

0800deec <__malloc_unlock>:
 800deec:	4801      	ldr	r0, [pc, #4]	@ (800def4 <__malloc_unlock+0x8>)
 800deee:	f000 ba9f 	b.w	800e430 <__retarget_lock_release_recursive>
 800def2:	bf00      	nop
 800def4:	20000e2c 	.word	0x20000e2c

0800def8 <std>:
 800def8:	2300      	movs	r3, #0
 800defa:	b510      	push	{r4, lr}
 800defc:	4604      	mov	r4, r0
 800defe:	6083      	str	r3, [r0, #8]
 800df00:	8181      	strh	r1, [r0, #12]
 800df02:	4619      	mov	r1, r3
 800df04:	6643      	str	r3, [r0, #100]	@ 0x64
 800df06:	81c2      	strh	r2, [r0, #14]
 800df08:	2208      	movs	r2, #8
 800df0a:	6183      	str	r3, [r0, #24]
 800df0c:	e9c0 3300 	strd	r3, r3, [r0]
 800df10:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df14:	305c      	adds	r0, #92	@ 0x5c
 800df16:	f000 fa01 	bl	800e31c <memset>
 800df1a:	4b0d      	ldr	r3, [pc, #52]	@ (800df50 <std+0x58>)
 800df1c:	6224      	str	r4, [r4, #32]
 800df1e:	6263      	str	r3, [r4, #36]	@ 0x24
 800df20:	4b0c      	ldr	r3, [pc, #48]	@ (800df54 <std+0x5c>)
 800df22:	62a3      	str	r3, [r4, #40]	@ 0x28
 800df24:	4b0c      	ldr	r3, [pc, #48]	@ (800df58 <std+0x60>)
 800df26:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800df28:	4b0c      	ldr	r3, [pc, #48]	@ (800df5c <std+0x64>)
 800df2a:	6323      	str	r3, [r4, #48]	@ 0x30
 800df2c:	4b0c      	ldr	r3, [pc, #48]	@ (800df60 <std+0x68>)
 800df2e:	429c      	cmp	r4, r3
 800df30:	d006      	beq.n	800df40 <std+0x48>
 800df32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800df36:	4294      	cmp	r4, r2
 800df38:	d002      	beq.n	800df40 <std+0x48>
 800df3a:	33d0      	adds	r3, #208	@ 0xd0
 800df3c:	429c      	cmp	r4, r3
 800df3e:	d105      	bne.n	800df4c <std+0x54>
 800df40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800df44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df48:	f000 ba70 	b.w	800e42c <__retarget_lock_init_recursive>
 800df4c:	bd10      	pop	{r4, pc}
 800df4e:	bf00      	nop
 800df50:	0800e16d 	.word	0x0800e16d
 800df54:	0800e18f 	.word	0x0800e18f
 800df58:	0800e1c7 	.word	0x0800e1c7
 800df5c:	0800e1eb 	.word	0x0800e1eb
 800df60:	20000cec 	.word	0x20000cec

0800df64 <stdio_exit_handler>:
 800df64:	4a02      	ldr	r2, [pc, #8]	@ (800df70 <stdio_exit_handler+0xc>)
 800df66:	4903      	ldr	r1, [pc, #12]	@ (800df74 <stdio_exit_handler+0x10>)
 800df68:	4803      	ldr	r0, [pc, #12]	@ (800df78 <stdio_exit_handler+0x14>)
 800df6a:	f000 b869 	b.w	800e040 <_fwalk_sglue>
 800df6e:	bf00      	nop
 800df70:	20000018 	.word	0x20000018
 800df74:	0800eb79 	.word	0x0800eb79
 800df78:	20000028 	.word	0x20000028

0800df7c <cleanup_stdio>:
 800df7c:	6841      	ldr	r1, [r0, #4]
 800df7e:	4b0c      	ldr	r3, [pc, #48]	@ (800dfb0 <cleanup_stdio+0x34>)
 800df80:	4299      	cmp	r1, r3
 800df82:	b510      	push	{r4, lr}
 800df84:	4604      	mov	r4, r0
 800df86:	d001      	beq.n	800df8c <cleanup_stdio+0x10>
 800df88:	f000 fdf6 	bl	800eb78 <_fflush_r>
 800df8c:	68a1      	ldr	r1, [r4, #8]
 800df8e:	4b09      	ldr	r3, [pc, #36]	@ (800dfb4 <cleanup_stdio+0x38>)
 800df90:	4299      	cmp	r1, r3
 800df92:	d002      	beq.n	800df9a <cleanup_stdio+0x1e>
 800df94:	4620      	mov	r0, r4
 800df96:	f000 fdef 	bl	800eb78 <_fflush_r>
 800df9a:	68e1      	ldr	r1, [r4, #12]
 800df9c:	4b06      	ldr	r3, [pc, #24]	@ (800dfb8 <cleanup_stdio+0x3c>)
 800df9e:	4299      	cmp	r1, r3
 800dfa0:	d004      	beq.n	800dfac <cleanup_stdio+0x30>
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfa8:	f000 bde6 	b.w	800eb78 <_fflush_r>
 800dfac:	bd10      	pop	{r4, pc}
 800dfae:	bf00      	nop
 800dfb0:	20000cec 	.word	0x20000cec
 800dfb4:	20000d54 	.word	0x20000d54
 800dfb8:	20000dbc 	.word	0x20000dbc

0800dfbc <global_stdio_init.part.0>:
 800dfbc:	b510      	push	{r4, lr}
 800dfbe:	4b0b      	ldr	r3, [pc, #44]	@ (800dfec <global_stdio_init.part.0+0x30>)
 800dfc0:	2104      	movs	r1, #4
 800dfc2:	4c0b      	ldr	r4, [pc, #44]	@ (800dff0 <global_stdio_init.part.0+0x34>)
 800dfc4:	4a0b      	ldr	r2, [pc, #44]	@ (800dff4 <global_stdio_init.part.0+0x38>)
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	601a      	str	r2, [r3, #0]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	f7ff ff94 	bl	800def8 <std>
 800dfd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	2109      	movs	r1, #9
 800dfd8:	f7ff ff8e 	bl	800def8 <std>
 800dfdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dfe0:	2202      	movs	r2, #2
 800dfe2:	2112      	movs	r1, #18
 800dfe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfe8:	f7ff bf86 	b.w	800def8 <std>
 800dfec:	20000e24 	.word	0x20000e24
 800dff0:	20000cec 	.word	0x20000cec
 800dff4:	0800df65 	.word	0x0800df65

0800dff8 <__sfp_lock_acquire>:
 800dff8:	4801      	ldr	r0, [pc, #4]	@ (800e000 <__sfp_lock_acquire+0x8>)
 800dffa:	f000 ba18 	b.w	800e42e <__retarget_lock_acquire_recursive>
 800dffe:	bf00      	nop
 800e000:	20000e2d 	.word	0x20000e2d

0800e004 <__sfp_lock_release>:
 800e004:	4801      	ldr	r0, [pc, #4]	@ (800e00c <__sfp_lock_release+0x8>)
 800e006:	f000 ba13 	b.w	800e430 <__retarget_lock_release_recursive>
 800e00a:	bf00      	nop
 800e00c:	20000e2d 	.word	0x20000e2d

0800e010 <__sinit>:
 800e010:	b510      	push	{r4, lr}
 800e012:	4604      	mov	r4, r0
 800e014:	f7ff fff0 	bl	800dff8 <__sfp_lock_acquire>
 800e018:	6a23      	ldr	r3, [r4, #32]
 800e01a:	b11b      	cbz	r3, 800e024 <__sinit+0x14>
 800e01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e020:	f7ff bff0 	b.w	800e004 <__sfp_lock_release>
 800e024:	4b04      	ldr	r3, [pc, #16]	@ (800e038 <__sinit+0x28>)
 800e026:	6223      	str	r3, [r4, #32]
 800e028:	4b04      	ldr	r3, [pc, #16]	@ (800e03c <__sinit+0x2c>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d1f5      	bne.n	800e01c <__sinit+0xc>
 800e030:	f7ff ffc4 	bl	800dfbc <global_stdio_init.part.0>
 800e034:	e7f2      	b.n	800e01c <__sinit+0xc>
 800e036:	bf00      	nop
 800e038:	0800df7d 	.word	0x0800df7d
 800e03c:	20000e24 	.word	0x20000e24

0800e040 <_fwalk_sglue>:
 800e040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e044:	4607      	mov	r7, r0
 800e046:	4688      	mov	r8, r1
 800e048:	4614      	mov	r4, r2
 800e04a:	2600      	movs	r6, #0
 800e04c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e050:	f1b9 0901 	subs.w	r9, r9, #1
 800e054:	d505      	bpl.n	800e062 <_fwalk_sglue+0x22>
 800e056:	6824      	ldr	r4, [r4, #0]
 800e058:	2c00      	cmp	r4, #0
 800e05a:	d1f7      	bne.n	800e04c <_fwalk_sglue+0xc>
 800e05c:	4630      	mov	r0, r6
 800e05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e062:	89ab      	ldrh	r3, [r5, #12]
 800e064:	2b01      	cmp	r3, #1
 800e066:	d907      	bls.n	800e078 <_fwalk_sglue+0x38>
 800e068:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e06c:	3301      	adds	r3, #1
 800e06e:	d003      	beq.n	800e078 <_fwalk_sglue+0x38>
 800e070:	4629      	mov	r1, r5
 800e072:	4638      	mov	r0, r7
 800e074:	47c0      	blx	r8
 800e076:	4306      	orrs	r6, r0
 800e078:	3568      	adds	r5, #104	@ 0x68
 800e07a:	e7e9      	b.n	800e050 <_fwalk_sglue+0x10>

0800e07c <iprintf>:
 800e07c:	b40f      	push	{r0, r1, r2, r3}
 800e07e:	b507      	push	{r0, r1, r2, lr}
 800e080:	4906      	ldr	r1, [pc, #24]	@ (800e09c <iprintf+0x20>)
 800e082:	ab04      	add	r3, sp, #16
 800e084:	6808      	ldr	r0, [r1, #0]
 800e086:	f853 2b04 	ldr.w	r2, [r3], #4
 800e08a:	6881      	ldr	r1, [r0, #8]
 800e08c:	9301      	str	r3, [sp, #4]
 800e08e:	f000 fa45 	bl	800e51c <_vfiprintf_r>
 800e092:	b003      	add	sp, #12
 800e094:	f85d eb04 	ldr.w	lr, [sp], #4
 800e098:	b004      	add	sp, #16
 800e09a:	4770      	bx	lr
 800e09c:	20000024 	.word	0x20000024

0800e0a0 <putchar>:
 800e0a0:	4b02      	ldr	r3, [pc, #8]	@ (800e0ac <putchar+0xc>)
 800e0a2:	4601      	mov	r1, r0
 800e0a4:	6818      	ldr	r0, [r3, #0]
 800e0a6:	6882      	ldr	r2, [r0, #8]
 800e0a8:	f000 bdef 	b.w	800ec8a <_putc_r>
 800e0ac:	20000024 	.word	0x20000024

0800e0b0 <_puts_r>:
 800e0b0:	6a03      	ldr	r3, [r0, #32]
 800e0b2:	b570      	push	{r4, r5, r6, lr}
 800e0b4:	4605      	mov	r5, r0
 800e0b6:	460e      	mov	r6, r1
 800e0b8:	6884      	ldr	r4, [r0, #8]
 800e0ba:	b90b      	cbnz	r3, 800e0c0 <_puts_r+0x10>
 800e0bc:	f7ff ffa8 	bl	800e010 <__sinit>
 800e0c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e0c2:	07db      	lsls	r3, r3, #31
 800e0c4:	d405      	bmi.n	800e0d2 <_puts_r+0x22>
 800e0c6:	89a3      	ldrh	r3, [r4, #12]
 800e0c8:	0598      	lsls	r0, r3, #22
 800e0ca:	d402      	bmi.n	800e0d2 <_puts_r+0x22>
 800e0cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e0ce:	f000 f9ae 	bl	800e42e <__retarget_lock_acquire_recursive>
 800e0d2:	89a3      	ldrh	r3, [r4, #12]
 800e0d4:	0719      	lsls	r1, r3, #28
 800e0d6:	d502      	bpl.n	800e0de <_puts_r+0x2e>
 800e0d8:	6923      	ldr	r3, [r4, #16]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d135      	bne.n	800e14a <_puts_r+0x9a>
 800e0de:	4621      	mov	r1, r4
 800e0e0:	4628      	mov	r0, r5
 800e0e2:	f000 f8c5 	bl	800e270 <__swsetup_r>
 800e0e6:	b380      	cbz	r0, 800e14a <_puts_r+0x9a>
 800e0e8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800e0ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e0ee:	07da      	lsls	r2, r3, #31
 800e0f0:	d405      	bmi.n	800e0fe <_puts_r+0x4e>
 800e0f2:	89a3      	ldrh	r3, [r4, #12]
 800e0f4:	059b      	lsls	r3, r3, #22
 800e0f6:	d402      	bmi.n	800e0fe <_puts_r+0x4e>
 800e0f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e0fa:	f000 f999 	bl	800e430 <__retarget_lock_release_recursive>
 800e0fe:	4628      	mov	r0, r5
 800e100:	bd70      	pop	{r4, r5, r6, pc}
 800e102:	2b00      	cmp	r3, #0
 800e104:	da04      	bge.n	800e110 <_puts_r+0x60>
 800e106:	69a2      	ldr	r2, [r4, #24]
 800e108:	429a      	cmp	r2, r3
 800e10a:	dc17      	bgt.n	800e13c <_puts_r+0x8c>
 800e10c:	290a      	cmp	r1, #10
 800e10e:	d015      	beq.n	800e13c <_puts_r+0x8c>
 800e110:	6823      	ldr	r3, [r4, #0]
 800e112:	1c5a      	adds	r2, r3, #1
 800e114:	6022      	str	r2, [r4, #0]
 800e116:	7019      	strb	r1, [r3, #0]
 800e118:	68a3      	ldr	r3, [r4, #8]
 800e11a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e11e:	3b01      	subs	r3, #1
 800e120:	60a3      	str	r3, [r4, #8]
 800e122:	2900      	cmp	r1, #0
 800e124:	d1ed      	bne.n	800e102 <_puts_r+0x52>
 800e126:	2b00      	cmp	r3, #0
 800e128:	da11      	bge.n	800e14e <_puts_r+0x9e>
 800e12a:	4622      	mov	r2, r4
 800e12c:	210a      	movs	r1, #10
 800e12e:	4628      	mov	r0, r5
 800e130:	f000 f85f 	bl	800e1f2 <__swbuf_r>
 800e134:	3001      	adds	r0, #1
 800e136:	d0d7      	beq.n	800e0e8 <_puts_r+0x38>
 800e138:	250a      	movs	r5, #10
 800e13a:	e7d7      	b.n	800e0ec <_puts_r+0x3c>
 800e13c:	4622      	mov	r2, r4
 800e13e:	4628      	mov	r0, r5
 800e140:	f000 f857 	bl	800e1f2 <__swbuf_r>
 800e144:	3001      	adds	r0, #1
 800e146:	d1e7      	bne.n	800e118 <_puts_r+0x68>
 800e148:	e7ce      	b.n	800e0e8 <_puts_r+0x38>
 800e14a:	3e01      	subs	r6, #1
 800e14c:	e7e4      	b.n	800e118 <_puts_r+0x68>
 800e14e:	6823      	ldr	r3, [r4, #0]
 800e150:	1c5a      	adds	r2, r3, #1
 800e152:	6022      	str	r2, [r4, #0]
 800e154:	220a      	movs	r2, #10
 800e156:	701a      	strb	r2, [r3, #0]
 800e158:	e7ee      	b.n	800e138 <_puts_r+0x88>
	...

0800e15c <puts>:
 800e15c:	4b02      	ldr	r3, [pc, #8]	@ (800e168 <puts+0xc>)
 800e15e:	4601      	mov	r1, r0
 800e160:	6818      	ldr	r0, [r3, #0]
 800e162:	f7ff bfa5 	b.w	800e0b0 <_puts_r>
 800e166:	bf00      	nop
 800e168:	20000024 	.word	0x20000024

0800e16c <__sread>:
 800e16c:	b510      	push	{r4, lr}
 800e16e:	460c      	mov	r4, r1
 800e170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e174:	f000 f8fc 	bl	800e370 <_read_r>
 800e178:	2800      	cmp	r0, #0
 800e17a:	bfab      	itete	ge
 800e17c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e17e:	89a3      	ldrhlt	r3, [r4, #12]
 800e180:	181b      	addge	r3, r3, r0
 800e182:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e186:	bfac      	ite	ge
 800e188:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e18a:	81a3      	strhlt	r3, [r4, #12]
 800e18c:	bd10      	pop	{r4, pc}

0800e18e <__swrite>:
 800e18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e192:	461f      	mov	r7, r3
 800e194:	898b      	ldrh	r3, [r1, #12]
 800e196:	4605      	mov	r5, r0
 800e198:	460c      	mov	r4, r1
 800e19a:	05db      	lsls	r3, r3, #23
 800e19c:	4616      	mov	r6, r2
 800e19e:	d505      	bpl.n	800e1ac <__swrite+0x1e>
 800e1a0:	2302      	movs	r3, #2
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1a8:	f000 f8d0 	bl	800e34c <_lseek_r>
 800e1ac:	89a3      	ldrh	r3, [r4, #12]
 800e1ae:	4632      	mov	r2, r6
 800e1b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e1ba:	81a3      	strh	r3, [r4, #12]
 800e1bc:	463b      	mov	r3, r7
 800e1be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c2:	f000 b8f7 	b.w	800e3b4 <_write_r>

0800e1c6 <__sseek>:
 800e1c6:	b510      	push	{r4, lr}
 800e1c8:	460c      	mov	r4, r1
 800e1ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1ce:	f000 f8bd 	bl	800e34c <_lseek_r>
 800e1d2:	1c43      	adds	r3, r0, #1
 800e1d4:	89a3      	ldrh	r3, [r4, #12]
 800e1d6:	bf15      	itete	ne
 800e1d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e1da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e1de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e1e2:	81a3      	strheq	r3, [r4, #12]
 800e1e4:	bf18      	it	ne
 800e1e6:	81a3      	strhne	r3, [r4, #12]
 800e1e8:	bd10      	pop	{r4, pc}

0800e1ea <__sclose>:
 800e1ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1ee:	f000 b89d 	b.w	800e32c <_close_r>

0800e1f2 <__swbuf_r>:
 800e1f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1f4:	460e      	mov	r6, r1
 800e1f6:	4614      	mov	r4, r2
 800e1f8:	4605      	mov	r5, r0
 800e1fa:	b118      	cbz	r0, 800e204 <__swbuf_r+0x12>
 800e1fc:	6a03      	ldr	r3, [r0, #32]
 800e1fe:	b90b      	cbnz	r3, 800e204 <__swbuf_r+0x12>
 800e200:	f7ff ff06 	bl	800e010 <__sinit>
 800e204:	69a3      	ldr	r3, [r4, #24]
 800e206:	60a3      	str	r3, [r4, #8]
 800e208:	89a3      	ldrh	r3, [r4, #12]
 800e20a:	071a      	lsls	r2, r3, #28
 800e20c:	d501      	bpl.n	800e212 <__swbuf_r+0x20>
 800e20e:	6923      	ldr	r3, [r4, #16]
 800e210:	b943      	cbnz	r3, 800e224 <__swbuf_r+0x32>
 800e212:	4621      	mov	r1, r4
 800e214:	4628      	mov	r0, r5
 800e216:	f000 f82b 	bl	800e270 <__swsetup_r>
 800e21a:	b118      	cbz	r0, 800e224 <__swbuf_r+0x32>
 800e21c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e220:	4638      	mov	r0, r7
 800e222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e224:	6823      	ldr	r3, [r4, #0]
 800e226:	b2f6      	uxtb	r6, r6
 800e228:	6922      	ldr	r2, [r4, #16]
 800e22a:	4637      	mov	r7, r6
 800e22c:	1a98      	subs	r0, r3, r2
 800e22e:	6963      	ldr	r3, [r4, #20]
 800e230:	4283      	cmp	r3, r0
 800e232:	dc05      	bgt.n	800e240 <__swbuf_r+0x4e>
 800e234:	4621      	mov	r1, r4
 800e236:	4628      	mov	r0, r5
 800e238:	f000 fc9e 	bl	800eb78 <_fflush_r>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d1ed      	bne.n	800e21c <__swbuf_r+0x2a>
 800e240:	68a3      	ldr	r3, [r4, #8]
 800e242:	3b01      	subs	r3, #1
 800e244:	60a3      	str	r3, [r4, #8]
 800e246:	6823      	ldr	r3, [r4, #0]
 800e248:	1c5a      	adds	r2, r3, #1
 800e24a:	6022      	str	r2, [r4, #0]
 800e24c:	701e      	strb	r6, [r3, #0]
 800e24e:	1c43      	adds	r3, r0, #1
 800e250:	6962      	ldr	r2, [r4, #20]
 800e252:	429a      	cmp	r2, r3
 800e254:	d004      	beq.n	800e260 <__swbuf_r+0x6e>
 800e256:	89a3      	ldrh	r3, [r4, #12]
 800e258:	07db      	lsls	r3, r3, #31
 800e25a:	d5e1      	bpl.n	800e220 <__swbuf_r+0x2e>
 800e25c:	2e0a      	cmp	r6, #10
 800e25e:	d1df      	bne.n	800e220 <__swbuf_r+0x2e>
 800e260:	4621      	mov	r1, r4
 800e262:	4628      	mov	r0, r5
 800e264:	f000 fc88 	bl	800eb78 <_fflush_r>
 800e268:	2800      	cmp	r0, #0
 800e26a:	d0d9      	beq.n	800e220 <__swbuf_r+0x2e>
 800e26c:	e7d6      	b.n	800e21c <__swbuf_r+0x2a>
	...

0800e270 <__swsetup_r>:
 800e270:	b538      	push	{r3, r4, r5, lr}
 800e272:	4b29      	ldr	r3, [pc, #164]	@ (800e318 <__swsetup_r+0xa8>)
 800e274:	4605      	mov	r5, r0
 800e276:	460c      	mov	r4, r1
 800e278:	6818      	ldr	r0, [r3, #0]
 800e27a:	b118      	cbz	r0, 800e284 <__swsetup_r+0x14>
 800e27c:	6a03      	ldr	r3, [r0, #32]
 800e27e:	b90b      	cbnz	r3, 800e284 <__swsetup_r+0x14>
 800e280:	f7ff fec6 	bl	800e010 <__sinit>
 800e284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e288:	0719      	lsls	r1, r3, #28
 800e28a:	d422      	bmi.n	800e2d2 <__swsetup_r+0x62>
 800e28c:	06da      	lsls	r2, r3, #27
 800e28e:	d407      	bmi.n	800e2a0 <__swsetup_r+0x30>
 800e290:	2209      	movs	r2, #9
 800e292:	602a      	str	r2, [r5, #0]
 800e294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e298:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e29c:	81a3      	strh	r3, [r4, #12]
 800e29e:	e033      	b.n	800e308 <__swsetup_r+0x98>
 800e2a0:	0758      	lsls	r0, r3, #29
 800e2a2:	d512      	bpl.n	800e2ca <__swsetup_r+0x5a>
 800e2a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e2a6:	b141      	cbz	r1, 800e2ba <__swsetup_r+0x4a>
 800e2a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e2ac:	4299      	cmp	r1, r3
 800e2ae:	d002      	beq.n	800e2b6 <__swsetup_r+0x46>
 800e2b0:	4628      	mov	r0, r5
 800e2b2:	f000 f8bf 	bl	800e434 <_free_r>
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e2ba:	89a3      	ldrh	r3, [r4, #12]
 800e2bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e2c0:	81a3      	strh	r3, [r4, #12]
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	6063      	str	r3, [r4, #4]
 800e2c6:	6923      	ldr	r3, [r4, #16]
 800e2c8:	6023      	str	r3, [r4, #0]
 800e2ca:	89a3      	ldrh	r3, [r4, #12]
 800e2cc:	f043 0308 	orr.w	r3, r3, #8
 800e2d0:	81a3      	strh	r3, [r4, #12]
 800e2d2:	6923      	ldr	r3, [r4, #16]
 800e2d4:	b94b      	cbnz	r3, 800e2ea <__swsetup_r+0x7a>
 800e2d6:	89a3      	ldrh	r3, [r4, #12]
 800e2d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e2dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2e0:	d003      	beq.n	800e2ea <__swsetup_r+0x7a>
 800e2e2:	4621      	mov	r1, r4
 800e2e4:	4628      	mov	r0, r5
 800e2e6:	f000 fc94 	bl	800ec12 <__smakebuf_r>
 800e2ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2ee:	f013 0201 	ands.w	r2, r3, #1
 800e2f2:	d00a      	beq.n	800e30a <__swsetup_r+0x9a>
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	60a2      	str	r2, [r4, #8]
 800e2f8:	6962      	ldr	r2, [r4, #20]
 800e2fa:	4252      	negs	r2, r2
 800e2fc:	61a2      	str	r2, [r4, #24]
 800e2fe:	6922      	ldr	r2, [r4, #16]
 800e300:	b942      	cbnz	r2, 800e314 <__swsetup_r+0xa4>
 800e302:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e306:	d1c5      	bne.n	800e294 <__swsetup_r+0x24>
 800e308:	bd38      	pop	{r3, r4, r5, pc}
 800e30a:	0799      	lsls	r1, r3, #30
 800e30c:	bf58      	it	pl
 800e30e:	6962      	ldrpl	r2, [r4, #20]
 800e310:	60a2      	str	r2, [r4, #8]
 800e312:	e7f4      	b.n	800e2fe <__swsetup_r+0x8e>
 800e314:	2000      	movs	r0, #0
 800e316:	e7f7      	b.n	800e308 <__swsetup_r+0x98>
 800e318:	20000024 	.word	0x20000024

0800e31c <memset>:
 800e31c:	4402      	add	r2, r0
 800e31e:	4603      	mov	r3, r0
 800e320:	4293      	cmp	r3, r2
 800e322:	d100      	bne.n	800e326 <memset+0xa>
 800e324:	4770      	bx	lr
 800e326:	f803 1b01 	strb.w	r1, [r3], #1
 800e32a:	e7f9      	b.n	800e320 <memset+0x4>

0800e32c <_close_r>:
 800e32c:	b538      	push	{r3, r4, r5, lr}
 800e32e:	2300      	movs	r3, #0
 800e330:	4d05      	ldr	r5, [pc, #20]	@ (800e348 <_close_r+0x1c>)
 800e332:	4604      	mov	r4, r0
 800e334:	4608      	mov	r0, r1
 800e336:	602b      	str	r3, [r5, #0]
 800e338:	f7f3 f93e 	bl	80015b8 <_close>
 800e33c:	1c43      	adds	r3, r0, #1
 800e33e:	d102      	bne.n	800e346 <_close_r+0x1a>
 800e340:	682b      	ldr	r3, [r5, #0]
 800e342:	b103      	cbz	r3, 800e346 <_close_r+0x1a>
 800e344:	6023      	str	r3, [r4, #0]
 800e346:	bd38      	pop	{r3, r4, r5, pc}
 800e348:	20000e28 	.word	0x20000e28

0800e34c <_lseek_r>:
 800e34c:	b538      	push	{r3, r4, r5, lr}
 800e34e:	4604      	mov	r4, r0
 800e350:	4d06      	ldr	r5, [pc, #24]	@ (800e36c <_lseek_r+0x20>)
 800e352:	4608      	mov	r0, r1
 800e354:	4611      	mov	r1, r2
 800e356:	2200      	movs	r2, #0
 800e358:	602a      	str	r2, [r5, #0]
 800e35a:	461a      	mov	r2, r3
 800e35c:	f7f3 f953 	bl	8001606 <_lseek>
 800e360:	1c43      	adds	r3, r0, #1
 800e362:	d102      	bne.n	800e36a <_lseek_r+0x1e>
 800e364:	682b      	ldr	r3, [r5, #0]
 800e366:	b103      	cbz	r3, 800e36a <_lseek_r+0x1e>
 800e368:	6023      	str	r3, [r4, #0]
 800e36a:	bd38      	pop	{r3, r4, r5, pc}
 800e36c:	20000e28 	.word	0x20000e28

0800e370 <_read_r>:
 800e370:	b538      	push	{r3, r4, r5, lr}
 800e372:	4604      	mov	r4, r0
 800e374:	4d06      	ldr	r5, [pc, #24]	@ (800e390 <_read_r+0x20>)
 800e376:	4608      	mov	r0, r1
 800e378:	4611      	mov	r1, r2
 800e37a:	2200      	movs	r2, #0
 800e37c:	602a      	str	r2, [r5, #0]
 800e37e:	461a      	mov	r2, r3
 800e380:	f7f3 f8fd 	bl	800157e <_read>
 800e384:	1c43      	adds	r3, r0, #1
 800e386:	d102      	bne.n	800e38e <_read_r+0x1e>
 800e388:	682b      	ldr	r3, [r5, #0]
 800e38a:	b103      	cbz	r3, 800e38e <_read_r+0x1e>
 800e38c:	6023      	str	r3, [r4, #0]
 800e38e:	bd38      	pop	{r3, r4, r5, pc}
 800e390:	20000e28 	.word	0x20000e28

0800e394 <_sbrk_r>:
 800e394:	b538      	push	{r3, r4, r5, lr}
 800e396:	2300      	movs	r3, #0
 800e398:	4d05      	ldr	r5, [pc, #20]	@ (800e3b0 <_sbrk_r+0x1c>)
 800e39a:	4604      	mov	r4, r0
 800e39c:	4608      	mov	r0, r1
 800e39e:	602b      	str	r3, [r5, #0]
 800e3a0:	f7f3 f93e 	bl	8001620 <_sbrk>
 800e3a4:	1c43      	adds	r3, r0, #1
 800e3a6:	d102      	bne.n	800e3ae <_sbrk_r+0x1a>
 800e3a8:	682b      	ldr	r3, [r5, #0]
 800e3aa:	b103      	cbz	r3, 800e3ae <_sbrk_r+0x1a>
 800e3ac:	6023      	str	r3, [r4, #0]
 800e3ae:	bd38      	pop	{r3, r4, r5, pc}
 800e3b0:	20000e28 	.word	0x20000e28

0800e3b4 <_write_r>:
 800e3b4:	b538      	push	{r3, r4, r5, lr}
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	4d06      	ldr	r5, [pc, #24]	@ (800e3d4 <_write_r+0x20>)
 800e3ba:	4608      	mov	r0, r1
 800e3bc:	4611      	mov	r1, r2
 800e3be:	2200      	movs	r2, #0
 800e3c0:	602a      	str	r2, [r5, #0]
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	f7f2 fe46 	bl	8001054 <_write>
 800e3c8:	1c43      	adds	r3, r0, #1
 800e3ca:	d102      	bne.n	800e3d2 <_write_r+0x1e>
 800e3cc:	682b      	ldr	r3, [r5, #0]
 800e3ce:	b103      	cbz	r3, 800e3d2 <_write_r+0x1e>
 800e3d0:	6023      	str	r3, [r4, #0]
 800e3d2:	bd38      	pop	{r3, r4, r5, pc}
 800e3d4:	20000e28 	.word	0x20000e28

0800e3d8 <__errno>:
 800e3d8:	4b01      	ldr	r3, [pc, #4]	@ (800e3e0 <__errno+0x8>)
 800e3da:	6818      	ldr	r0, [r3, #0]
 800e3dc:	4770      	bx	lr
 800e3de:	bf00      	nop
 800e3e0:	20000024 	.word	0x20000024

0800e3e4 <__libc_init_array>:
 800e3e4:	b570      	push	{r4, r5, r6, lr}
 800e3e6:	4d0d      	ldr	r5, [pc, #52]	@ (800e41c <__libc_init_array+0x38>)
 800e3e8:	2600      	movs	r6, #0
 800e3ea:	4c0d      	ldr	r4, [pc, #52]	@ (800e420 <__libc_init_array+0x3c>)
 800e3ec:	1b64      	subs	r4, r4, r5
 800e3ee:	10a4      	asrs	r4, r4, #2
 800e3f0:	42a6      	cmp	r6, r4
 800e3f2:	d109      	bne.n	800e408 <__libc_init_array+0x24>
 800e3f4:	4d0b      	ldr	r5, [pc, #44]	@ (800e424 <__libc_init_array+0x40>)
 800e3f6:	2600      	movs	r6, #0
 800e3f8:	4c0b      	ldr	r4, [pc, #44]	@ (800e428 <__libc_init_array+0x44>)
 800e3fa:	f000 fcab 	bl	800ed54 <_init>
 800e3fe:	1b64      	subs	r4, r4, r5
 800e400:	10a4      	asrs	r4, r4, #2
 800e402:	42a6      	cmp	r6, r4
 800e404:	d105      	bne.n	800e412 <__libc_init_array+0x2e>
 800e406:	bd70      	pop	{r4, r5, r6, pc}
 800e408:	f855 3b04 	ldr.w	r3, [r5], #4
 800e40c:	3601      	adds	r6, #1
 800e40e:	4798      	blx	r3
 800e410:	e7ee      	b.n	800e3f0 <__libc_init_array+0xc>
 800e412:	f855 3b04 	ldr.w	r3, [r5], #4
 800e416:	3601      	adds	r6, #1
 800e418:	4798      	blx	r3
 800e41a:	e7f2      	b.n	800e402 <__libc_init_array+0x1e>
 800e41c:	080103d8 	.word	0x080103d8
 800e420:	080103d8 	.word	0x080103d8
 800e424:	080103d8 	.word	0x080103d8
 800e428:	080103dc 	.word	0x080103dc

0800e42c <__retarget_lock_init_recursive>:
 800e42c:	4770      	bx	lr

0800e42e <__retarget_lock_acquire_recursive>:
 800e42e:	4770      	bx	lr

0800e430 <__retarget_lock_release_recursive>:
 800e430:	4770      	bx	lr
	...

0800e434 <_free_r>:
 800e434:	b538      	push	{r3, r4, r5, lr}
 800e436:	4605      	mov	r5, r0
 800e438:	2900      	cmp	r1, #0
 800e43a:	d041      	beq.n	800e4c0 <_free_r+0x8c>
 800e43c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e440:	1f0c      	subs	r4, r1, #4
 800e442:	2b00      	cmp	r3, #0
 800e444:	bfb8      	it	lt
 800e446:	18e4      	addlt	r4, r4, r3
 800e448:	f7ff fd4a 	bl	800dee0 <__malloc_lock>
 800e44c:	4a1d      	ldr	r2, [pc, #116]	@ (800e4c4 <_free_r+0x90>)
 800e44e:	6813      	ldr	r3, [r2, #0]
 800e450:	b933      	cbnz	r3, 800e460 <_free_r+0x2c>
 800e452:	6063      	str	r3, [r4, #4]
 800e454:	6014      	str	r4, [r2, #0]
 800e456:	4628      	mov	r0, r5
 800e458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e45c:	f7ff bd46 	b.w	800deec <__malloc_unlock>
 800e460:	42a3      	cmp	r3, r4
 800e462:	d908      	bls.n	800e476 <_free_r+0x42>
 800e464:	6820      	ldr	r0, [r4, #0]
 800e466:	1821      	adds	r1, r4, r0
 800e468:	428b      	cmp	r3, r1
 800e46a:	bf01      	itttt	eq
 800e46c:	6819      	ldreq	r1, [r3, #0]
 800e46e:	685b      	ldreq	r3, [r3, #4]
 800e470:	1809      	addeq	r1, r1, r0
 800e472:	6021      	streq	r1, [r4, #0]
 800e474:	e7ed      	b.n	800e452 <_free_r+0x1e>
 800e476:	461a      	mov	r2, r3
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	b10b      	cbz	r3, 800e480 <_free_r+0x4c>
 800e47c:	42a3      	cmp	r3, r4
 800e47e:	d9fa      	bls.n	800e476 <_free_r+0x42>
 800e480:	6811      	ldr	r1, [r2, #0]
 800e482:	1850      	adds	r0, r2, r1
 800e484:	42a0      	cmp	r0, r4
 800e486:	d10b      	bne.n	800e4a0 <_free_r+0x6c>
 800e488:	6820      	ldr	r0, [r4, #0]
 800e48a:	4401      	add	r1, r0
 800e48c:	1850      	adds	r0, r2, r1
 800e48e:	6011      	str	r1, [r2, #0]
 800e490:	4283      	cmp	r3, r0
 800e492:	d1e0      	bne.n	800e456 <_free_r+0x22>
 800e494:	6818      	ldr	r0, [r3, #0]
 800e496:	685b      	ldr	r3, [r3, #4]
 800e498:	4408      	add	r0, r1
 800e49a:	6053      	str	r3, [r2, #4]
 800e49c:	6010      	str	r0, [r2, #0]
 800e49e:	e7da      	b.n	800e456 <_free_r+0x22>
 800e4a0:	d902      	bls.n	800e4a8 <_free_r+0x74>
 800e4a2:	230c      	movs	r3, #12
 800e4a4:	602b      	str	r3, [r5, #0]
 800e4a6:	e7d6      	b.n	800e456 <_free_r+0x22>
 800e4a8:	6820      	ldr	r0, [r4, #0]
 800e4aa:	1821      	adds	r1, r4, r0
 800e4ac:	428b      	cmp	r3, r1
 800e4ae:	bf02      	ittt	eq
 800e4b0:	6819      	ldreq	r1, [r3, #0]
 800e4b2:	685b      	ldreq	r3, [r3, #4]
 800e4b4:	1809      	addeq	r1, r1, r0
 800e4b6:	6063      	str	r3, [r4, #4]
 800e4b8:	bf08      	it	eq
 800e4ba:	6021      	streq	r1, [r4, #0]
 800e4bc:	6054      	str	r4, [r2, #4]
 800e4be:	e7ca      	b.n	800e456 <_free_r+0x22>
 800e4c0:	bd38      	pop	{r3, r4, r5, pc}
 800e4c2:	bf00      	nop
 800e4c4:	20000ce8 	.word	0x20000ce8

0800e4c8 <__sfputc_r>:
 800e4c8:	6893      	ldr	r3, [r2, #8]
 800e4ca:	3b01      	subs	r3, #1
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	6093      	str	r3, [r2, #8]
 800e4d0:	b410      	push	{r4}
 800e4d2:	da08      	bge.n	800e4e6 <__sfputc_r+0x1e>
 800e4d4:	6994      	ldr	r4, [r2, #24]
 800e4d6:	42a3      	cmp	r3, r4
 800e4d8:	db01      	blt.n	800e4de <__sfputc_r+0x16>
 800e4da:	290a      	cmp	r1, #10
 800e4dc:	d103      	bne.n	800e4e6 <__sfputc_r+0x1e>
 800e4de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4e2:	f7ff be86 	b.w	800e1f2 <__swbuf_r>
 800e4e6:	6813      	ldr	r3, [r2, #0]
 800e4e8:	1c58      	adds	r0, r3, #1
 800e4ea:	6010      	str	r0, [r2, #0]
 800e4ec:	4608      	mov	r0, r1
 800e4ee:	7019      	strb	r1, [r3, #0]
 800e4f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4f4:	4770      	bx	lr

0800e4f6 <__sfputs_r>:
 800e4f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4f8:	4606      	mov	r6, r0
 800e4fa:	460f      	mov	r7, r1
 800e4fc:	4614      	mov	r4, r2
 800e4fe:	18d5      	adds	r5, r2, r3
 800e500:	42ac      	cmp	r4, r5
 800e502:	d101      	bne.n	800e508 <__sfputs_r+0x12>
 800e504:	2000      	movs	r0, #0
 800e506:	e007      	b.n	800e518 <__sfputs_r+0x22>
 800e508:	463a      	mov	r2, r7
 800e50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e50e:	4630      	mov	r0, r6
 800e510:	f7ff ffda 	bl	800e4c8 <__sfputc_r>
 800e514:	1c43      	adds	r3, r0, #1
 800e516:	d1f3      	bne.n	800e500 <__sfputs_r+0xa>
 800e518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e51c <_vfiprintf_r>:
 800e51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e520:	460d      	mov	r5, r1
 800e522:	b09d      	sub	sp, #116	@ 0x74
 800e524:	4614      	mov	r4, r2
 800e526:	4698      	mov	r8, r3
 800e528:	4606      	mov	r6, r0
 800e52a:	b118      	cbz	r0, 800e534 <_vfiprintf_r+0x18>
 800e52c:	6a03      	ldr	r3, [r0, #32]
 800e52e:	b90b      	cbnz	r3, 800e534 <_vfiprintf_r+0x18>
 800e530:	f7ff fd6e 	bl	800e010 <__sinit>
 800e534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e536:	07d9      	lsls	r1, r3, #31
 800e538:	d405      	bmi.n	800e546 <_vfiprintf_r+0x2a>
 800e53a:	89ab      	ldrh	r3, [r5, #12]
 800e53c:	059a      	lsls	r2, r3, #22
 800e53e:	d402      	bmi.n	800e546 <_vfiprintf_r+0x2a>
 800e540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e542:	f7ff ff74 	bl	800e42e <__retarget_lock_acquire_recursive>
 800e546:	89ab      	ldrh	r3, [r5, #12]
 800e548:	071b      	lsls	r3, r3, #28
 800e54a:	d501      	bpl.n	800e550 <_vfiprintf_r+0x34>
 800e54c:	692b      	ldr	r3, [r5, #16]
 800e54e:	b99b      	cbnz	r3, 800e578 <_vfiprintf_r+0x5c>
 800e550:	4629      	mov	r1, r5
 800e552:	4630      	mov	r0, r6
 800e554:	f7ff fe8c 	bl	800e270 <__swsetup_r>
 800e558:	b170      	cbz	r0, 800e578 <_vfiprintf_r+0x5c>
 800e55a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e55c:	07dc      	lsls	r4, r3, #31
 800e55e:	d504      	bpl.n	800e56a <_vfiprintf_r+0x4e>
 800e560:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e564:	b01d      	add	sp, #116	@ 0x74
 800e566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e56a:	89ab      	ldrh	r3, [r5, #12]
 800e56c:	0598      	lsls	r0, r3, #22
 800e56e:	d4f7      	bmi.n	800e560 <_vfiprintf_r+0x44>
 800e570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e572:	f7ff ff5d 	bl	800e430 <__retarget_lock_release_recursive>
 800e576:	e7f3      	b.n	800e560 <_vfiprintf_r+0x44>
 800e578:	2300      	movs	r3, #0
 800e57a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e57e:	f04f 0901 	mov.w	r9, #1
 800e582:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800e738 <_vfiprintf_r+0x21c>
 800e586:	9309      	str	r3, [sp, #36]	@ 0x24
 800e588:	2320      	movs	r3, #32
 800e58a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e58e:	2330      	movs	r3, #48	@ 0x30
 800e590:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e594:	4623      	mov	r3, r4
 800e596:	469a      	mov	sl, r3
 800e598:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e59c:	b10a      	cbz	r2, 800e5a2 <_vfiprintf_r+0x86>
 800e59e:	2a25      	cmp	r2, #37	@ 0x25
 800e5a0:	d1f9      	bne.n	800e596 <_vfiprintf_r+0x7a>
 800e5a2:	ebba 0b04 	subs.w	fp, sl, r4
 800e5a6:	d00b      	beq.n	800e5c0 <_vfiprintf_r+0xa4>
 800e5a8:	465b      	mov	r3, fp
 800e5aa:	4622      	mov	r2, r4
 800e5ac:	4629      	mov	r1, r5
 800e5ae:	4630      	mov	r0, r6
 800e5b0:	f7ff ffa1 	bl	800e4f6 <__sfputs_r>
 800e5b4:	3001      	adds	r0, #1
 800e5b6:	f000 80a7 	beq.w	800e708 <_vfiprintf_r+0x1ec>
 800e5ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5bc:	445a      	add	r2, fp
 800e5be:	9209      	str	r2, [sp, #36]	@ 0x24
 800e5c0:	f89a 3000 	ldrb.w	r3, [sl]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	f000 809f 	beq.w	800e708 <_vfiprintf_r+0x1ec>
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e5d0:	f10a 0a01 	add.w	sl, sl, #1
 800e5d4:	9304      	str	r3, [sp, #16]
 800e5d6:	9307      	str	r3, [sp, #28]
 800e5d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e5dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800e5de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5e2:	4654      	mov	r4, sl
 800e5e4:	2205      	movs	r2, #5
 800e5e6:	4854      	ldr	r0, [pc, #336]	@ (800e738 <_vfiprintf_r+0x21c>)
 800e5e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5ec:	f000 fba4 	bl	800ed38 <memchr>
 800e5f0:	9a04      	ldr	r2, [sp, #16]
 800e5f2:	b9d8      	cbnz	r0, 800e62c <_vfiprintf_r+0x110>
 800e5f4:	06d1      	lsls	r1, r2, #27
 800e5f6:	bf44      	itt	mi
 800e5f8:	2320      	movmi	r3, #32
 800e5fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e5fe:	0713      	lsls	r3, r2, #28
 800e600:	bf44      	itt	mi
 800e602:	232b      	movmi	r3, #43	@ 0x2b
 800e604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e608:	f89a 3000 	ldrb.w	r3, [sl]
 800e60c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e60e:	d015      	beq.n	800e63c <_vfiprintf_r+0x120>
 800e610:	9a07      	ldr	r2, [sp, #28]
 800e612:	4654      	mov	r4, sl
 800e614:	2000      	movs	r0, #0
 800e616:	f04f 0c0a 	mov.w	ip, #10
 800e61a:	4621      	mov	r1, r4
 800e61c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e620:	3b30      	subs	r3, #48	@ 0x30
 800e622:	2b09      	cmp	r3, #9
 800e624:	d94b      	bls.n	800e6be <_vfiprintf_r+0x1a2>
 800e626:	b1b0      	cbz	r0, 800e656 <_vfiprintf_r+0x13a>
 800e628:	9207      	str	r2, [sp, #28]
 800e62a:	e014      	b.n	800e656 <_vfiprintf_r+0x13a>
 800e62c:	eba0 0308 	sub.w	r3, r0, r8
 800e630:	46a2      	mov	sl, r4
 800e632:	fa09 f303 	lsl.w	r3, r9, r3
 800e636:	4313      	orrs	r3, r2
 800e638:	9304      	str	r3, [sp, #16]
 800e63a:	e7d2      	b.n	800e5e2 <_vfiprintf_r+0xc6>
 800e63c:	9b03      	ldr	r3, [sp, #12]
 800e63e:	1d19      	adds	r1, r3, #4
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	9103      	str	r1, [sp, #12]
 800e646:	bfbb      	ittet	lt
 800e648:	425b      	neglt	r3, r3
 800e64a:	f042 0202 	orrlt.w	r2, r2, #2
 800e64e:	9307      	strge	r3, [sp, #28]
 800e650:	9307      	strlt	r3, [sp, #28]
 800e652:	bfb8      	it	lt
 800e654:	9204      	strlt	r2, [sp, #16]
 800e656:	7823      	ldrb	r3, [r4, #0]
 800e658:	2b2e      	cmp	r3, #46	@ 0x2e
 800e65a:	d10a      	bne.n	800e672 <_vfiprintf_r+0x156>
 800e65c:	7863      	ldrb	r3, [r4, #1]
 800e65e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e660:	d132      	bne.n	800e6c8 <_vfiprintf_r+0x1ac>
 800e662:	9b03      	ldr	r3, [sp, #12]
 800e664:	3402      	adds	r4, #2
 800e666:	1d1a      	adds	r2, r3, #4
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e66e:	9203      	str	r2, [sp, #12]
 800e670:	9305      	str	r3, [sp, #20]
 800e672:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e748 <_vfiprintf_r+0x22c>
 800e676:	2203      	movs	r2, #3
 800e678:	7821      	ldrb	r1, [r4, #0]
 800e67a:	4650      	mov	r0, sl
 800e67c:	f000 fb5c 	bl	800ed38 <memchr>
 800e680:	b138      	cbz	r0, 800e692 <_vfiprintf_r+0x176>
 800e682:	eba0 000a 	sub.w	r0, r0, sl
 800e686:	2240      	movs	r2, #64	@ 0x40
 800e688:	9b04      	ldr	r3, [sp, #16]
 800e68a:	3401      	adds	r4, #1
 800e68c:	4082      	lsls	r2, r0
 800e68e:	4313      	orrs	r3, r2
 800e690:	9304      	str	r3, [sp, #16]
 800e692:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e696:	2206      	movs	r2, #6
 800e698:	4828      	ldr	r0, [pc, #160]	@ (800e73c <_vfiprintf_r+0x220>)
 800e69a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e69e:	f000 fb4b 	bl	800ed38 <memchr>
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	d03f      	beq.n	800e726 <_vfiprintf_r+0x20a>
 800e6a6:	4b26      	ldr	r3, [pc, #152]	@ (800e740 <_vfiprintf_r+0x224>)
 800e6a8:	bb1b      	cbnz	r3, 800e6f2 <_vfiprintf_r+0x1d6>
 800e6aa:	9b03      	ldr	r3, [sp, #12]
 800e6ac:	3307      	adds	r3, #7
 800e6ae:	f023 0307 	bic.w	r3, r3, #7
 800e6b2:	3308      	adds	r3, #8
 800e6b4:	9303      	str	r3, [sp, #12]
 800e6b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6b8:	443b      	add	r3, r7
 800e6ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6bc:	e76a      	b.n	800e594 <_vfiprintf_r+0x78>
 800e6be:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6c2:	460c      	mov	r4, r1
 800e6c4:	2001      	movs	r0, #1
 800e6c6:	e7a8      	b.n	800e61a <_vfiprintf_r+0xfe>
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	3401      	adds	r4, #1
 800e6cc:	f04f 0c0a 	mov.w	ip, #10
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	9305      	str	r3, [sp, #20]
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6da:	3a30      	subs	r2, #48	@ 0x30
 800e6dc:	2a09      	cmp	r2, #9
 800e6de:	d903      	bls.n	800e6e8 <_vfiprintf_r+0x1cc>
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d0c6      	beq.n	800e672 <_vfiprintf_r+0x156>
 800e6e4:	9105      	str	r1, [sp, #20]
 800e6e6:	e7c4      	b.n	800e672 <_vfiprintf_r+0x156>
 800e6e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6ec:	4604      	mov	r4, r0
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	e7f0      	b.n	800e6d4 <_vfiprintf_r+0x1b8>
 800e6f2:	ab03      	add	r3, sp, #12
 800e6f4:	462a      	mov	r2, r5
 800e6f6:	a904      	add	r1, sp, #16
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	9300      	str	r3, [sp, #0]
 800e6fc:	4b11      	ldr	r3, [pc, #68]	@ (800e744 <_vfiprintf_r+0x228>)
 800e6fe:	f3af 8000 	nop.w
 800e702:	4607      	mov	r7, r0
 800e704:	1c78      	adds	r0, r7, #1
 800e706:	d1d6      	bne.n	800e6b6 <_vfiprintf_r+0x19a>
 800e708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e70a:	07d9      	lsls	r1, r3, #31
 800e70c:	d405      	bmi.n	800e71a <_vfiprintf_r+0x1fe>
 800e70e:	89ab      	ldrh	r3, [r5, #12]
 800e710:	059a      	lsls	r2, r3, #22
 800e712:	d402      	bmi.n	800e71a <_vfiprintf_r+0x1fe>
 800e714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e716:	f7ff fe8b 	bl	800e430 <__retarget_lock_release_recursive>
 800e71a:	89ab      	ldrh	r3, [r5, #12]
 800e71c:	065b      	lsls	r3, r3, #25
 800e71e:	f53f af1f 	bmi.w	800e560 <_vfiprintf_r+0x44>
 800e722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e724:	e71e      	b.n	800e564 <_vfiprintf_r+0x48>
 800e726:	ab03      	add	r3, sp, #12
 800e728:	462a      	mov	r2, r5
 800e72a:	a904      	add	r1, sp, #16
 800e72c:	4630      	mov	r0, r6
 800e72e:	9300      	str	r3, [sp, #0]
 800e730:	4b04      	ldr	r3, [pc, #16]	@ (800e744 <_vfiprintf_r+0x228>)
 800e732:	f000 f87d 	bl	800e830 <_printf_i>
 800e736:	e7e4      	b.n	800e702 <_vfiprintf_r+0x1e6>
 800e738:	0801039a 	.word	0x0801039a
 800e73c:	080103a4 	.word	0x080103a4
 800e740:	00000000 	.word	0x00000000
 800e744:	0800e4f7 	.word	0x0800e4f7
 800e748:	080103a0 	.word	0x080103a0

0800e74c <_printf_common>:
 800e74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e750:	4616      	mov	r6, r2
 800e752:	4698      	mov	r8, r3
 800e754:	688a      	ldr	r2, [r1, #8]
 800e756:	4607      	mov	r7, r0
 800e758:	690b      	ldr	r3, [r1, #16]
 800e75a:	460c      	mov	r4, r1
 800e75c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e760:	4293      	cmp	r3, r2
 800e762:	bfb8      	it	lt
 800e764:	4613      	movlt	r3, r2
 800e766:	6033      	str	r3, [r6, #0]
 800e768:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e76c:	b10a      	cbz	r2, 800e772 <_printf_common+0x26>
 800e76e:	3301      	adds	r3, #1
 800e770:	6033      	str	r3, [r6, #0]
 800e772:	6823      	ldr	r3, [r4, #0]
 800e774:	0699      	lsls	r1, r3, #26
 800e776:	bf42      	ittt	mi
 800e778:	6833      	ldrmi	r3, [r6, #0]
 800e77a:	3302      	addmi	r3, #2
 800e77c:	6033      	strmi	r3, [r6, #0]
 800e77e:	6825      	ldr	r5, [r4, #0]
 800e780:	f015 0506 	ands.w	r5, r5, #6
 800e784:	d106      	bne.n	800e794 <_printf_common+0x48>
 800e786:	f104 0a19 	add.w	sl, r4, #25
 800e78a:	68e3      	ldr	r3, [r4, #12]
 800e78c:	6832      	ldr	r2, [r6, #0]
 800e78e:	1a9b      	subs	r3, r3, r2
 800e790:	42ab      	cmp	r3, r5
 800e792:	dc2b      	bgt.n	800e7ec <_printf_common+0xa0>
 800e794:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e798:	6822      	ldr	r2, [r4, #0]
 800e79a:	3b00      	subs	r3, #0
 800e79c:	bf18      	it	ne
 800e79e:	2301      	movne	r3, #1
 800e7a0:	0692      	lsls	r2, r2, #26
 800e7a2:	d430      	bmi.n	800e806 <_printf_common+0xba>
 800e7a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e7a8:	4641      	mov	r1, r8
 800e7aa:	4638      	mov	r0, r7
 800e7ac:	47c8      	blx	r9
 800e7ae:	3001      	adds	r0, #1
 800e7b0:	d023      	beq.n	800e7fa <_printf_common+0xae>
 800e7b2:	6823      	ldr	r3, [r4, #0]
 800e7b4:	341a      	adds	r4, #26
 800e7b6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800e7ba:	f003 0306 	and.w	r3, r3, #6
 800e7be:	2b04      	cmp	r3, #4
 800e7c0:	bf0a      	itet	eq
 800e7c2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800e7c6:	2500      	movne	r5, #0
 800e7c8:	6833      	ldreq	r3, [r6, #0]
 800e7ca:	f04f 0600 	mov.w	r6, #0
 800e7ce:	bf08      	it	eq
 800e7d0:	1aed      	subeq	r5, r5, r3
 800e7d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e7d6:	bf08      	it	eq
 800e7d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	bfc4      	itt	gt
 800e7e0:	1a9b      	subgt	r3, r3, r2
 800e7e2:	18ed      	addgt	r5, r5, r3
 800e7e4:	42b5      	cmp	r5, r6
 800e7e6:	d11a      	bne.n	800e81e <_printf_common+0xd2>
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	e008      	b.n	800e7fe <_printf_common+0xb2>
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	4652      	mov	r2, sl
 800e7f0:	4641      	mov	r1, r8
 800e7f2:	4638      	mov	r0, r7
 800e7f4:	47c8      	blx	r9
 800e7f6:	3001      	adds	r0, #1
 800e7f8:	d103      	bne.n	800e802 <_printf_common+0xb6>
 800e7fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e802:	3501      	adds	r5, #1
 800e804:	e7c1      	b.n	800e78a <_printf_common+0x3e>
 800e806:	18e1      	adds	r1, r4, r3
 800e808:	1c5a      	adds	r2, r3, #1
 800e80a:	2030      	movs	r0, #48	@ 0x30
 800e80c:	3302      	adds	r3, #2
 800e80e:	4422      	add	r2, r4
 800e810:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e814:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e818:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e81c:	e7c2      	b.n	800e7a4 <_printf_common+0x58>
 800e81e:	2301      	movs	r3, #1
 800e820:	4622      	mov	r2, r4
 800e822:	4641      	mov	r1, r8
 800e824:	4638      	mov	r0, r7
 800e826:	47c8      	blx	r9
 800e828:	3001      	adds	r0, #1
 800e82a:	d0e6      	beq.n	800e7fa <_printf_common+0xae>
 800e82c:	3601      	adds	r6, #1
 800e82e:	e7d9      	b.n	800e7e4 <_printf_common+0x98>

0800e830 <_printf_i>:
 800e830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e834:	7e0f      	ldrb	r7, [r1, #24]
 800e836:	4691      	mov	r9, r2
 800e838:	4680      	mov	r8, r0
 800e83a:	460c      	mov	r4, r1
 800e83c:	2f78      	cmp	r7, #120	@ 0x78
 800e83e:	469a      	mov	sl, r3
 800e840:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e842:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e846:	d807      	bhi.n	800e858 <_printf_i+0x28>
 800e848:	2f62      	cmp	r7, #98	@ 0x62
 800e84a:	d80a      	bhi.n	800e862 <_printf_i+0x32>
 800e84c:	2f00      	cmp	r7, #0
 800e84e:	f000 80d2 	beq.w	800e9f6 <_printf_i+0x1c6>
 800e852:	2f58      	cmp	r7, #88	@ 0x58
 800e854:	f000 80b9 	beq.w	800e9ca <_printf_i+0x19a>
 800e858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e85c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e860:	e03a      	b.n	800e8d8 <_printf_i+0xa8>
 800e862:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e866:	2b15      	cmp	r3, #21
 800e868:	d8f6      	bhi.n	800e858 <_printf_i+0x28>
 800e86a:	a101      	add	r1, pc, #4	@ (adr r1, 800e870 <_printf_i+0x40>)
 800e86c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e870:	0800e8c9 	.word	0x0800e8c9
 800e874:	0800e8dd 	.word	0x0800e8dd
 800e878:	0800e859 	.word	0x0800e859
 800e87c:	0800e859 	.word	0x0800e859
 800e880:	0800e859 	.word	0x0800e859
 800e884:	0800e859 	.word	0x0800e859
 800e888:	0800e8dd 	.word	0x0800e8dd
 800e88c:	0800e859 	.word	0x0800e859
 800e890:	0800e859 	.word	0x0800e859
 800e894:	0800e859 	.word	0x0800e859
 800e898:	0800e859 	.word	0x0800e859
 800e89c:	0800e9dd 	.word	0x0800e9dd
 800e8a0:	0800e907 	.word	0x0800e907
 800e8a4:	0800e997 	.word	0x0800e997
 800e8a8:	0800e859 	.word	0x0800e859
 800e8ac:	0800e859 	.word	0x0800e859
 800e8b0:	0800e9ff 	.word	0x0800e9ff
 800e8b4:	0800e859 	.word	0x0800e859
 800e8b8:	0800e907 	.word	0x0800e907
 800e8bc:	0800e859 	.word	0x0800e859
 800e8c0:	0800e859 	.word	0x0800e859
 800e8c4:	0800e99f 	.word	0x0800e99f
 800e8c8:	6833      	ldr	r3, [r6, #0]
 800e8ca:	1d1a      	adds	r2, r3, #4
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	6032      	str	r2, [r6, #0]
 800e8d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e8d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e8d8:	2301      	movs	r3, #1
 800e8da:	e09d      	b.n	800ea18 <_printf_i+0x1e8>
 800e8dc:	6833      	ldr	r3, [r6, #0]
 800e8de:	6820      	ldr	r0, [r4, #0]
 800e8e0:	1d19      	adds	r1, r3, #4
 800e8e2:	6031      	str	r1, [r6, #0]
 800e8e4:	0606      	lsls	r6, r0, #24
 800e8e6:	d501      	bpl.n	800e8ec <_printf_i+0xbc>
 800e8e8:	681d      	ldr	r5, [r3, #0]
 800e8ea:	e003      	b.n	800e8f4 <_printf_i+0xc4>
 800e8ec:	0645      	lsls	r5, r0, #25
 800e8ee:	d5fb      	bpl.n	800e8e8 <_printf_i+0xb8>
 800e8f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e8f4:	2d00      	cmp	r5, #0
 800e8f6:	da03      	bge.n	800e900 <_printf_i+0xd0>
 800e8f8:	232d      	movs	r3, #45	@ 0x2d
 800e8fa:	426d      	negs	r5, r5
 800e8fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e900:	4859      	ldr	r0, [pc, #356]	@ (800ea68 <_printf_i+0x238>)
 800e902:	230a      	movs	r3, #10
 800e904:	e011      	b.n	800e92a <_printf_i+0xfa>
 800e906:	6821      	ldr	r1, [r4, #0]
 800e908:	6833      	ldr	r3, [r6, #0]
 800e90a:	0608      	lsls	r0, r1, #24
 800e90c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e910:	d402      	bmi.n	800e918 <_printf_i+0xe8>
 800e912:	0649      	lsls	r1, r1, #25
 800e914:	bf48      	it	mi
 800e916:	b2ad      	uxthmi	r5, r5
 800e918:	2f6f      	cmp	r7, #111	@ 0x6f
 800e91a:	6033      	str	r3, [r6, #0]
 800e91c:	4852      	ldr	r0, [pc, #328]	@ (800ea68 <_printf_i+0x238>)
 800e91e:	bf14      	ite	ne
 800e920:	230a      	movne	r3, #10
 800e922:	2308      	moveq	r3, #8
 800e924:	2100      	movs	r1, #0
 800e926:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e92a:	6866      	ldr	r6, [r4, #4]
 800e92c:	2e00      	cmp	r6, #0
 800e92e:	60a6      	str	r6, [r4, #8]
 800e930:	bfa2      	ittt	ge
 800e932:	6821      	ldrge	r1, [r4, #0]
 800e934:	f021 0104 	bicge.w	r1, r1, #4
 800e938:	6021      	strge	r1, [r4, #0]
 800e93a:	b90d      	cbnz	r5, 800e940 <_printf_i+0x110>
 800e93c:	2e00      	cmp	r6, #0
 800e93e:	d04b      	beq.n	800e9d8 <_printf_i+0x1a8>
 800e940:	4616      	mov	r6, r2
 800e942:	fbb5 f1f3 	udiv	r1, r5, r3
 800e946:	fb03 5711 	mls	r7, r3, r1, r5
 800e94a:	5dc7      	ldrb	r7, [r0, r7]
 800e94c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e950:	462f      	mov	r7, r5
 800e952:	460d      	mov	r5, r1
 800e954:	42bb      	cmp	r3, r7
 800e956:	d9f4      	bls.n	800e942 <_printf_i+0x112>
 800e958:	2b08      	cmp	r3, #8
 800e95a:	d10b      	bne.n	800e974 <_printf_i+0x144>
 800e95c:	6823      	ldr	r3, [r4, #0]
 800e95e:	07df      	lsls	r7, r3, #31
 800e960:	d508      	bpl.n	800e974 <_printf_i+0x144>
 800e962:	6923      	ldr	r3, [r4, #16]
 800e964:	6861      	ldr	r1, [r4, #4]
 800e966:	4299      	cmp	r1, r3
 800e968:	bfde      	ittt	le
 800e96a:	2330      	movle	r3, #48	@ 0x30
 800e96c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e970:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e974:	1b92      	subs	r2, r2, r6
 800e976:	6122      	str	r2, [r4, #16]
 800e978:	464b      	mov	r3, r9
 800e97a:	aa03      	add	r2, sp, #12
 800e97c:	4621      	mov	r1, r4
 800e97e:	4640      	mov	r0, r8
 800e980:	f8cd a000 	str.w	sl, [sp]
 800e984:	f7ff fee2 	bl	800e74c <_printf_common>
 800e988:	3001      	adds	r0, #1
 800e98a:	d14a      	bne.n	800ea22 <_printf_i+0x1f2>
 800e98c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e990:	b004      	add	sp, #16
 800e992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e996:	6823      	ldr	r3, [r4, #0]
 800e998:	f043 0320 	orr.w	r3, r3, #32
 800e99c:	6023      	str	r3, [r4, #0]
 800e99e:	2778      	movs	r7, #120	@ 0x78
 800e9a0:	4832      	ldr	r0, [pc, #200]	@ (800ea6c <_printf_i+0x23c>)
 800e9a2:	6823      	ldr	r3, [r4, #0]
 800e9a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e9a8:	061f      	lsls	r7, r3, #24
 800e9aa:	6831      	ldr	r1, [r6, #0]
 800e9ac:	f851 5b04 	ldr.w	r5, [r1], #4
 800e9b0:	d402      	bmi.n	800e9b8 <_printf_i+0x188>
 800e9b2:	065f      	lsls	r7, r3, #25
 800e9b4:	bf48      	it	mi
 800e9b6:	b2ad      	uxthmi	r5, r5
 800e9b8:	6031      	str	r1, [r6, #0]
 800e9ba:	07d9      	lsls	r1, r3, #31
 800e9bc:	bf44      	itt	mi
 800e9be:	f043 0320 	orrmi.w	r3, r3, #32
 800e9c2:	6023      	strmi	r3, [r4, #0]
 800e9c4:	b11d      	cbz	r5, 800e9ce <_printf_i+0x19e>
 800e9c6:	2310      	movs	r3, #16
 800e9c8:	e7ac      	b.n	800e924 <_printf_i+0xf4>
 800e9ca:	4827      	ldr	r0, [pc, #156]	@ (800ea68 <_printf_i+0x238>)
 800e9cc:	e7e9      	b.n	800e9a2 <_printf_i+0x172>
 800e9ce:	6823      	ldr	r3, [r4, #0]
 800e9d0:	f023 0320 	bic.w	r3, r3, #32
 800e9d4:	6023      	str	r3, [r4, #0]
 800e9d6:	e7f6      	b.n	800e9c6 <_printf_i+0x196>
 800e9d8:	4616      	mov	r6, r2
 800e9da:	e7bd      	b.n	800e958 <_printf_i+0x128>
 800e9dc:	6833      	ldr	r3, [r6, #0]
 800e9de:	6825      	ldr	r5, [r4, #0]
 800e9e0:	1d18      	adds	r0, r3, #4
 800e9e2:	6961      	ldr	r1, [r4, #20]
 800e9e4:	6030      	str	r0, [r6, #0]
 800e9e6:	062e      	lsls	r6, r5, #24
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	d501      	bpl.n	800e9f0 <_printf_i+0x1c0>
 800e9ec:	6019      	str	r1, [r3, #0]
 800e9ee:	e002      	b.n	800e9f6 <_printf_i+0x1c6>
 800e9f0:	0668      	lsls	r0, r5, #25
 800e9f2:	d5fb      	bpl.n	800e9ec <_printf_i+0x1bc>
 800e9f4:	8019      	strh	r1, [r3, #0]
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	4616      	mov	r6, r2
 800e9fa:	6123      	str	r3, [r4, #16]
 800e9fc:	e7bc      	b.n	800e978 <_printf_i+0x148>
 800e9fe:	6833      	ldr	r3, [r6, #0]
 800ea00:	2100      	movs	r1, #0
 800ea02:	1d1a      	adds	r2, r3, #4
 800ea04:	6032      	str	r2, [r6, #0]
 800ea06:	681e      	ldr	r6, [r3, #0]
 800ea08:	6862      	ldr	r2, [r4, #4]
 800ea0a:	4630      	mov	r0, r6
 800ea0c:	f000 f994 	bl	800ed38 <memchr>
 800ea10:	b108      	cbz	r0, 800ea16 <_printf_i+0x1e6>
 800ea12:	1b80      	subs	r0, r0, r6
 800ea14:	6060      	str	r0, [r4, #4]
 800ea16:	6863      	ldr	r3, [r4, #4]
 800ea18:	6123      	str	r3, [r4, #16]
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea20:	e7aa      	b.n	800e978 <_printf_i+0x148>
 800ea22:	6923      	ldr	r3, [r4, #16]
 800ea24:	4632      	mov	r2, r6
 800ea26:	4649      	mov	r1, r9
 800ea28:	4640      	mov	r0, r8
 800ea2a:	47d0      	blx	sl
 800ea2c:	3001      	adds	r0, #1
 800ea2e:	d0ad      	beq.n	800e98c <_printf_i+0x15c>
 800ea30:	6823      	ldr	r3, [r4, #0]
 800ea32:	079b      	lsls	r3, r3, #30
 800ea34:	d413      	bmi.n	800ea5e <_printf_i+0x22e>
 800ea36:	68e0      	ldr	r0, [r4, #12]
 800ea38:	9b03      	ldr	r3, [sp, #12]
 800ea3a:	4298      	cmp	r0, r3
 800ea3c:	bfb8      	it	lt
 800ea3e:	4618      	movlt	r0, r3
 800ea40:	e7a6      	b.n	800e990 <_printf_i+0x160>
 800ea42:	2301      	movs	r3, #1
 800ea44:	4632      	mov	r2, r6
 800ea46:	4649      	mov	r1, r9
 800ea48:	4640      	mov	r0, r8
 800ea4a:	47d0      	blx	sl
 800ea4c:	3001      	adds	r0, #1
 800ea4e:	d09d      	beq.n	800e98c <_printf_i+0x15c>
 800ea50:	3501      	adds	r5, #1
 800ea52:	68e3      	ldr	r3, [r4, #12]
 800ea54:	9903      	ldr	r1, [sp, #12]
 800ea56:	1a5b      	subs	r3, r3, r1
 800ea58:	42ab      	cmp	r3, r5
 800ea5a:	dcf2      	bgt.n	800ea42 <_printf_i+0x212>
 800ea5c:	e7eb      	b.n	800ea36 <_printf_i+0x206>
 800ea5e:	2500      	movs	r5, #0
 800ea60:	f104 0619 	add.w	r6, r4, #25
 800ea64:	e7f5      	b.n	800ea52 <_printf_i+0x222>
 800ea66:	bf00      	nop
 800ea68:	080103ab 	.word	0x080103ab
 800ea6c:	080103bc 	.word	0x080103bc

0800ea70 <__sflush_r>:
 800ea70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea78:	0716      	lsls	r6, r2, #28
 800ea7a:	4605      	mov	r5, r0
 800ea7c:	460c      	mov	r4, r1
 800ea7e:	d454      	bmi.n	800eb2a <__sflush_r+0xba>
 800ea80:	684b      	ldr	r3, [r1, #4]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	dc02      	bgt.n	800ea8c <__sflush_r+0x1c>
 800ea86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	dd48      	ble.n	800eb1e <__sflush_r+0xae>
 800ea8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea8e:	2e00      	cmp	r6, #0
 800ea90:	d045      	beq.n	800eb1e <__sflush_r+0xae>
 800ea92:	2300      	movs	r3, #0
 800ea94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ea98:	682f      	ldr	r7, [r5, #0]
 800ea9a:	6a21      	ldr	r1, [r4, #32]
 800ea9c:	602b      	str	r3, [r5, #0]
 800ea9e:	d030      	beq.n	800eb02 <__sflush_r+0x92>
 800eaa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eaa2:	89a3      	ldrh	r3, [r4, #12]
 800eaa4:	0759      	lsls	r1, r3, #29
 800eaa6:	d505      	bpl.n	800eab4 <__sflush_r+0x44>
 800eaa8:	6863      	ldr	r3, [r4, #4]
 800eaaa:	1ad2      	subs	r2, r2, r3
 800eaac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eaae:	b10b      	cbz	r3, 800eab4 <__sflush_r+0x44>
 800eab0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eab2:	1ad2      	subs	r2, r2, r3
 800eab4:	2300      	movs	r3, #0
 800eab6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eab8:	6a21      	ldr	r1, [r4, #32]
 800eaba:	4628      	mov	r0, r5
 800eabc:	47b0      	blx	r6
 800eabe:	1c43      	adds	r3, r0, #1
 800eac0:	89a3      	ldrh	r3, [r4, #12]
 800eac2:	d106      	bne.n	800ead2 <__sflush_r+0x62>
 800eac4:	6829      	ldr	r1, [r5, #0]
 800eac6:	291d      	cmp	r1, #29
 800eac8:	d82b      	bhi.n	800eb22 <__sflush_r+0xb2>
 800eaca:	4a2a      	ldr	r2, [pc, #168]	@ (800eb74 <__sflush_r+0x104>)
 800eacc:	410a      	asrs	r2, r1
 800eace:	07d6      	lsls	r6, r2, #31
 800ead0:	d427      	bmi.n	800eb22 <__sflush_r+0xb2>
 800ead2:	2200      	movs	r2, #0
 800ead4:	04d9      	lsls	r1, r3, #19
 800ead6:	6062      	str	r2, [r4, #4]
 800ead8:	6922      	ldr	r2, [r4, #16]
 800eada:	6022      	str	r2, [r4, #0]
 800eadc:	d504      	bpl.n	800eae8 <__sflush_r+0x78>
 800eade:	1c42      	adds	r2, r0, #1
 800eae0:	d101      	bne.n	800eae6 <__sflush_r+0x76>
 800eae2:	682b      	ldr	r3, [r5, #0]
 800eae4:	b903      	cbnz	r3, 800eae8 <__sflush_r+0x78>
 800eae6:	6560      	str	r0, [r4, #84]	@ 0x54
 800eae8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eaea:	602f      	str	r7, [r5, #0]
 800eaec:	b1b9      	cbz	r1, 800eb1e <__sflush_r+0xae>
 800eaee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eaf2:	4299      	cmp	r1, r3
 800eaf4:	d002      	beq.n	800eafc <__sflush_r+0x8c>
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	f7ff fc9c 	bl	800e434 <_free_r>
 800eafc:	2300      	movs	r3, #0
 800eafe:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb00:	e00d      	b.n	800eb1e <__sflush_r+0xae>
 800eb02:	2301      	movs	r3, #1
 800eb04:	4628      	mov	r0, r5
 800eb06:	47b0      	blx	r6
 800eb08:	4602      	mov	r2, r0
 800eb0a:	1c50      	adds	r0, r2, #1
 800eb0c:	d1c9      	bne.n	800eaa2 <__sflush_r+0x32>
 800eb0e:	682b      	ldr	r3, [r5, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d0c6      	beq.n	800eaa2 <__sflush_r+0x32>
 800eb14:	2b1d      	cmp	r3, #29
 800eb16:	d001      	beq.n	800eb1c <__sflush_r+0xac>
 800eb18:	2b16      	cmp	r3, #22
 800eb1a:	d11d      	bne.n	800eb58 <__sflush_r+0xe8>
 800eb1c:	602f      	str	r7, [r5, #0]
 800eb1e:	2000      	movs	r0, #0
 800eb20:	e021      	b.n	800eb66 <__sflush_r+0xf6>
 800eb22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb26:	b21b      	sxth	r3, r3
 800eb28:	e01a      	b.n	800eb60 <__sflush_r+0xf0>
 800eb2a:	690f      	ldr	r7, [r1, #16]
 800eb2c:	2f00      	cmp	r7, #0
 800eb2e:	d0f6      	beq.n	800eb1e <__sflush_r+0xae>
 800eb30:	0793      	lsls	r3, r2, #30
 800eb32:	680e      	ldr	r6, [r1, #0]
 800eb34:	600f      	str	r7, [r1, #0]
 800eb36:	bf0c      	ite	eq
 800eb38:	694b      	ldreq	r3, [r1, #20]
 800eb3a:	2300      	movne	r3, #0
 800eb3c:	eba6 0807 	sub.w	r8, r6, r7
 800eb40:	608b      	str	r3, [r1, #8]
 800eb42:	f1b8 0f00 	cmp.w	r8, #0
 800eb46:	ddea      	ble.n	800eb1e <__sflush_r+0xae>
 800eb48:	4643      	mov	r3, r8
 800eb4a:	463a      	mov	r2, r7
 800eb4c:	6a21      	ldr	r1, [r4, #32]
 800eb4e:	4628      	mov	r0, r5
 800eb50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eb52:	47b0      	blx	r6
 800eb54:	2800      	cmp	r0, #0
 800eb56:	dc08      	bgt.n	800eb6a <__sflush_r+0xfa>
 800eb58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb64:	81a3      	strh	r3, [r4, #12]
 800eb66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb6a:	4407      	add	r7, r0
 800eb6c:	eba8 0800 	sub.w	r8, r8, r0
 800eb70:	e7e7      	b.n	800eb42 <__sflush_r+0xd2>
 800eb72:	bf00      	nop
 800eb74:	dfbffffe 	.word	0xdfbffffe

0800eb78 <_fflush_r>:
 800eb78:	b538      	push	{r3, r4, r5, lr}
 800eb7a:	690b      	ldr	r3, [r1, #16]
 800eb7c:	4605      	mov	r5, r0
 800eb7e:	460c      	mov	r4, r1
 800eb80:	b913      	cbnz	r3, 800eb88 <_fflush_r+0x10>
 800eb82:	2500      	movs	r5, #0
 800eb84:	4628      	mov	r0, r5
 800eb86:	bd38      	pop	{r3, r4, r5, pc}
 800eb88:	b118      	cbz	r0, 800eb92 <_fflush_r+0x1a>
 800eb8a:	6a03      	ldr	r3, [r0, #32]
 800eb8c:	b90b      	cbnz	r3, 800eb92 <_fflush_r+0x1a>
 800eb8e:	f7ff fa3f 	bl	800e010 <__sinit>
 800eb92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d0f3      	beq.n	800eb82 <_fflush_r+0xa>
 800eb9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eb9c:	07d0      	lsls	r0, r2, #31
 800eb9e:	d404      	bmi.n	800ebaa <_fflush_r+0x32>
 800eba0:	0599      	lsls	r1, r3, #22
 800eba2:	d402      	bmi.n	800ebaa <_fflush_r+0x32>
 800eba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eba6:	f7ff fc42 	bl	800e42e <__retarget_lock_acquire_recursive>
 800ebaa:	4628      	mov	r0, r5
 800ebac:	4621      	mov	r1, r4
 800ebae:	f7ff ff5f 	bl	800ea70 <__sflush_r>
 800ebb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ebb4:	4605      	mov	r5, r0
 800ebb6:	07da      	lsls	r2, r3, #31
 800ebb8:	d4e4      	bmi.n	800eb84 <_fflush_r+0xc>
 800ebba:	89a3      	ldrh	r3, [r4, #12]
 800ebbc:	059b      	lsls	r3, r3, #22
 800ebbe:	d4e1      	bmi.n	800eb84 <_fflush_r+0xc>
 800ebc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ebc2:	f7ff fc35 	bl	800e430 <__retarget_lock_release_recursive>
 800ebc6:	e7dd      	b.n	800eb84 <_fflush_r+0xc>

0800ebc8 <__swhatbuf_r>:
 800ebc8:	b570      	push	{r4, r5, r6, lr}
 800ebca:	460c      	mov	r4, r1
 800ebcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebd0:	b096      	sub	sp, #88	@ 0x58
 800ebd2:	4615      	mov	r5, r2
 800ebd4:	2900      	cmp	r1, #0
 800ebd6:	461e      	mov	r6, r3
 800ebd8:	da0c      	bge.n	800ebf4 <__swhatbuf_r+0x2c>
 800ebda:	89a3      	ldrh	r3, [r4, #12]
 800ebdc:	2100      	movs	r1, #0
 800ebde:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ebe2:	bf14      	ite	ne
 800ebe4:	2340      	movne	r3, #64	@ 0x40
 800ebe6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ebea:	2000      	movs	r0, #0
 800ebec:	6031      	str	r1, [r6, #0]
 800ebee:	602b      	str	r3, [r5, #0]
 800ebf0:	b016      	add	sp, #88	@ 0x58
 800ebf2:	bd70      	pop	{r4, r5, r6, pc}
 800ebf4:	466a      	mov	r2, sp
 800ebf6:	f000 f87d 	bl	800ecf4 <_fstat_r>
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	dbed      	blt.n	800ebda <__swhatbuf_r+0x12>
 800ebfe:	9901      	ldr	r1, [sp, #4]
 800ec00:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ec04:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ec08:	4259      	negs	r1, r3
 800ec0a:	4159      	adcs	r1, r3
 800ec0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec10:	e7eb      	b.n	800ebea <__swhatbuf_r+0x22>

0800ec12 <__smakebuf_r>:
 800ec12:	898b      	ldrh	r3, [r1, #12]
 800ec14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec16:	079d      	lsls	r5, r3, #30
 800ec18:	4606      	mov	r6, r0
 800ec1a:	460c      	mov	r4, r1
 800ec1c:	d507      	bpl.n	800ec2e <__smakebuf_r+0x1c>
 800ec1e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ec22:	6023      	str	r3, [r4, #0]
 800ec24:	6123      	str	r3, [r4, #16]
 800ec26:	2301      	movs	r3, #1
 800ec28:	6163      	str	r3, [r4, #20]
 800ec2a:	b003      	add	sp, #12
 800ec2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec2e:	ab01      	add	r3, sp, #4
 800ec30:	466a      	mov	r2, sp
 800ec32:	f7ff ffc9 	bl	800ebc8 <__swhatbuf_r>
 800ec36:	9f00      	ldr	r7, [sp, #0]
 800ec38:	4605      	mov	r5, r0
 800ec3a:	4630      	mov	r0, r6
 800ec3c:	4639      	mov	r1, r7
 800ec3e:	f7ff f8cf 	bl	800dde0 <_malloc_r>
 800ec42:	b948      	cbnz	r0, 800ec58 <__smakebuf_r+0x46>
 800ec44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec48:	059a      	lsls	r2, r3, #22
 800ec4a:	d4ee      	bmi.n	800ec2a <__smakebuf_r+0x18>
 800ec4c:	f023 0303 	bic.w	r3, r3, #3
 800ec50:	f043 0302 	orr.w	r3, r3, #2
 800ec54:	81a3      	strh	r3, [r4, #12]
 800ec56:	e7e2      	b.n	800ec1e <__smakebuf_r+0xc>
 800ec58:	89a3      	ldrh	r3, [r4, #12]
 800ec5a:	6020      	str	r0, [r4, #0]
 800ec5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec60:	81a3      	strh	r3, [r4, #12]
 800ec62:	9b01      	ldr	r3, [sp, #4]
 800ec64:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ec68:	b15b      	cbz	r3, 800ec82 <__smakebuf_r+0x70>
 800ec6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec6e:	4630      	mov	r0, r6
 800ec70:	f000 f852 	bl	800ed18 <_isatty_r>
 800ec74:	b128      	cbz	r0, 800ec82 <__smakebuf_r+0x70>
 800ec76:	89a3      	ldrh	r3, [r4, #12]
 800ec78:	f023 0303 	bic.w	r3, r3, #3
 800ec7c:	f043 0301 	orr.w	r3, r3, #1
 800ec80:	81a3      	strh	r3, [r4, #12]
 800ec82:	89a3      	ldrh	r3, [r4, #12]
 800ec84:	431d      	orrs	r5, r3
 800ec86:	81a5      	strh	r5, [r4, #12]
 800ec88:	e7cf      	b.n	800ec2a <__smakebuf_r+0x18>

0800ec8a <_putc_r>:
 800ec8a:	b570      	push	{r4, r5, r6, lr}
 800ec8c:	460d      	mov	r5, r1
 800ec8e:	4614      	mov	r4, r2
 800ec90:	4606      	mov	r6, r0
 800ec92:	b118      	cbz	r0, 800ec9c <_putc_r+0x12>
 800ec94:	6a03      	ldr	r3, [r0, #32]
 800ec96:	b90b      	cbnz	r3, 800ec9c <_putc_r+0x12>
 800ec98:	f7ff f9ba 	bl	800e010 <__sinit>
 800ec9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ec9e:	07d8      	lsls	r0, r3, #31
 800eca0:	d405      	bmi.n	800ecae <_putc_r+0x24>
 800eca2:	89a3      	ldrh	r3, [r4, #12]
 800eca4:	0599      	lsls	r1, r3, #22
 800eca6:	d402      	bmi.n	800ecae <_putc_r+0x24>
 800eca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ecaa:	f7ff fbc0 	bl	800e42e <__retarget_lock_acquire_recursive>
 800ecae:	68a3      	ldr	r3, [r4, #8]
 800ecb0:	3b01      	subs	r3, #1
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	60a3      	str	r3, [r4, #8]
 800ecb6:	da05      	bge.n	800ecc4 <_putc_r+0x3a>
 800ecb8:	69a2      	ldr	r2, [r4, #24]
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	db12      	blt.n	800ece4 <_putc_r+0x5a>
 800ecbe:	b2eb      	uxtb	r3, r5
 800ecc0:	2b0a      	cmp	r3, #10
 800ecc2:	d00f      	beq.n	800ece4 <_putc_r+0x5a>
 800ecc4:	6823      	ldr	r3, [r4, #0]
 800ecc6:	1c5a      	adds	r2, r3, #1
 800ecc8:	6022      	str	r2, [r4, #0]
 800ecca:	701d      	strb	r5, [r3, #0]
 800eccc:	b2ed      	uxtb	r5, r5
 800ecce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ecd0:	07da      	lsls	r2, r3, #31
 800ecd2:	d405      	bmi.n	800ece0 <_putc_r+0x56>
 800ecd4:	89a3      	ldrh	r3, [r4, #12]
 800ecd6:	059b      	lsls	r3, r3, #22
 800ecd8:	d402      	bmi.n	800ece0 <_putc_r+0x56>
 800ecda:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ecdc:	f7ff fba8 	bl	800e430 <__retarget_lock_release_recursive>
 800ece0:	4628      	mov	r0, r5
 800ece2:	bd70      	pop	{r4, r5, r6, pc}
 800ece4:	4629      	mov	r1, r5
 800ece6:	4622      	mov	r2, r4
 800ece8:	4630      	mov	r0, r6
 800ecea:	f7ff fa82 	bl	800e1f2 <__swbuf_r>
 800ecee:	4605      	mov	r5, r0
 800ecf0:	e7ed      	b.n	800ecce <_putc_r+0x44>
	...

0800ecf4 <_fstat_r>:
 800ecf4:	b538      	push	{r3, r4, r5, lr}
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	4d06      	ldr	r5, [pc, #24]	@ (800ed14 <_fstat_r+0x20>)
 800ecfa:	4604      	mov	r4, r0
 800ecfc:	4608      	mov	r0, r1
 800ecfe:	4611      	mov	r1, r2
 800ed00:	602b      	str	r3, [r5, #0]
 800ed02:	f7f2 fc65 	bl	80015d0 <_fstat>
 800ed06:	1c43      	adds	r3, r0, #1
 800ed08:	d102      	bne.n	800ed10 <_fstat_r+0x1c>
 800ed0a:	682b      	ldr	r3, [r5, #0]
 800ed0c:	b103      	cbz	r3, 800ed10 <_fstat_r+0x1c>
 800ed0e:	6023      	str	r3, [r4, #0]
 800ed10:	bd38      	pop	{r3, r4, r5, pc}
 800ed12:	bf00      	nop
 800ed14:	20000e28 	.word	0x20000e28

0800ed18 <_isatty_r>:
 800ed18:	b538      	push	{r3, r4, r5, lr}
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	4d05      	ldr	r5, [pc, #20]	@ (800ed34 <_isatty_r+0x1c>)
 800ed1e:	4604      	mov	r4, r0
 800ed20:	4608      	mov	r0, r1
 800ed22:	602b      	str	r3, [r5, #0]
 800ed24:	f7f2 fc64 	bl	80015f0 <_isatty>
 800ed28:	1c43      	adds	r3, r0, #1
 800ed2a:	d102      	bne.n	800ed32 <_isatty_r+0x1a>
 800ed2c:	682b      	ldr	r3, [r5, #0]
 800ed2e:	b103      	cbz	r3, 800ed32 <_isatty_r+0x1a>
 800ed30:	6023      	str	r3, [r4, #0]
 800ed32:	bd38      	pop	{r3, r4, r5, pc}
 800ed34:	20000e28 	.word	0x20000e28

0800ed38 <memchr>:
 800ed38:	b2c9      	uxtb	r1, r1
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	4402      	add	r2, r0
 800ed3e:	b510      	push	{r4, lr}
 800ed40:	4293      	cmp	r3, r2
 800ed42:	4618      	mov	r0, r3
 800ed44:	d101      	bne.n	800ed4a <memchr+0x12>
 800ed46:	2000      	movs	r0, #0
 800ed48:	e003      	b.n	800ed52 <memchr+0x1a>
 800ed4a:	7804      	ldrb	r4, [r0, #0]
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	428c      	cmp	r4, r1
 800ed50:	d1f6      	bne.n	800ed40 <memchr+0x8>
 800ed52:	bd10      	pop	{r4, pc}

0800ed54 <_init>:
 800ed54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed56:	bf00      	nop
 800ed58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed5a:	bc08      	pop	{r3}
 800ed5c:	469e      	mov	lr, r3
 800ed5e:	4770      	bx	lr

0800ed60 <_fini>:
 800ed60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed62:	bf00      	nop
 800ed64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed66:	bc08      	pop	{r3}
 800ed68:	469e      	mov	lr, r3
 800ed6a:	4770      	bx	lr
