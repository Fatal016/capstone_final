
capstone_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2e8  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014b3  0800f538  0800f538  00010538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080109ec  080109ec  000119ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080109f4  080109f4  000119f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080109f8  080109f8  000119f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  20000000  080109fc  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000078e  20000070  08010a6c  00012070  2**2
                  ALLOC
  8 ._user_heap_stack 00000602  200007fe  08010a6c  000127fe  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00012070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a3cd  00000000  00000000  000120a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004cfb  00000000  00000000  0003c473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002420  00000000  00000000  00041170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001cad  00000000  00000000  00043590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ef5d  00000000  00000000  0004523d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00031469  00000000  00000000  0008419a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001876f2  00000000  00000000  000b5603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023ccf5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a578  00000000  00000000  0023cd38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  002472b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000070 	.word	0x20000070
 800026c:	00000000 	.word	0x00000000
 8000270:	0800f520 	.word	0x0800f520

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000074 	.word	0x20000074
 800028c:	0800f520 	.word	0x0800f520

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b97e 	b.w	8000d80 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aa0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14d      	bne.n	8000b44 <__udivmoddi4+0xa8>
 8000aa8:	428a      	cmp	r2, r1
 8000aaa:	460f      	mov	r7, r1
 8000aac:	4684      	mov	ip, r0
 8000aae:	4696      	mov	lr, r2
 8000ab0:	fab2 f382 	clz	r3, r2
 8000ab4:	d960      	bls.n	8000b78 <__udivmoddi4+0xdc>
 8000ab6:	b14b      	cbz	r3, 8000acc <__udivmoddi4+0x30>
 8000ab8:	fa02 fe03 	lsl.w	lr, r2, r3
 8000abc:	f1c3 0220 	rsb	r2, r3, #32
 8000ac0:	409f      	lsls	r7, r3
 8000ac2:	fa00 fc03 	lsl.w	ip, r0, r3
 8000ac6:	fa20 f202 	lsr.w	r2, r0, r2
 8000aca:	4317      	orrs	r7, r2
 8000acc:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000ad0:	fa1f f48e 	uxth.w	r4, lr
 8000ad4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000ad8:	fbb7 f1f6 	udiv	r1, r7, r6
 8000adc:	fb06 7711 	mls	r7, r6, r1, r7
 8000ae0:	fb01 f004 	mul.w	r0, r1, r4
 8000ae4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ae8:	4290      	cmp	r0, r2
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x62>
 8000aec:	eb1e 0202 	adds.w	r2, lr, r2
 8000af0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000af4:	d202      	bcs.n	8000afc <__udivmoddi4+0x60>
 8000af6:	4290      	cmp	r0, r2
 8000af8:	f200 812d 	bhi.w	8000d56 <__udivmoddi4+0x2ba>
 8000afc:	4639      	mov	r1, r7
 8000afe:	1a12      	subs	r2, r2, r0
 8000b00:	fa1f fc8c 	uxth.w	ip, ip
 8000b04:	fbb2 f0f6 	udiv	r0, r2, r6
 8000b08:	fb06 2210 	mls	r2, r6, r0, r2
 8000b0c:	fb00 f404 	mul.w	r4, r0, r4
 8000b10:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000b14:	4564      	cmp	r4, ip
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x8e>
 8000b18:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000b1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x8c>
 8000b22:	4564      	cmp	r4, ip
 8000b24:	f200 811a 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000b28:	4610      	mov	r0, r2
 8000b2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b2e:	ebac 0c04 	sub.w	ip, ip, r4
 8000b32:	2100      	movs	r1, #0
 8000b34:	b125      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b36:	fa2c f303 	lsr.w	r3, ip, r3
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	e9c5 3200 	strd	r3, r2, [r5]
 8000b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b44:	428b      	cmp	r3, r1
 8000b46:	d905      	bls.n	8000b54 <__udivmoddi4+0xb8>
 8000b48:	b10d      	cbz	r5, 8000b4e <__udivmoddi4+0xb2>
 8000b4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4608      	mov	r0, r1
 8000b52:	e7f5      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b54:	fab3 f183 	clz	r1, r3
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	d14d      	bne.n	8000bf8 <__udivmoddi4+0x15c>
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	f0c0 80f2 	bcc.w	8000d46 <__udivmoddi4+0x2aa>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f080 80ef 	bcs.w	8000d46 <__udivmoddi4+0x2aa>
 8000b68:	4606      	mov	r6, r0
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0e6      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b72:	e9c5 6300 	strd	r6, r3, [r5]
 8000b76:	e7e3      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f040 80a2 	bne.w	8000cc2 <__udivmoddi4+0x226>
 8000b7e:	1a8a      	subs	r2, r1, r2
 8000b80:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000b84:	fa1f f68e 	uxth.w	r6, lr
 8000b88:	2101      	movs	r1, #1
 8000b8a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000b8e:	fb07 2014 	mls	r0, r7, r4, r2
 8000b92:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000b96:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b9a:	fb06 f004 	mul.w	r0, r6, r4
 8000b9e:	4290      	cmp	r0, r2
 8000ba0:	d90f      	bls.n	8000bc2 <__udivmoddi4+0x126>
 8000ba2:	eb1e 0202 	adds.w	r2, lr, r2
 8000ba6:	f104 38ff 	add.w	r8, r4, #4294967295
 8000baa:	bf2c      	ite	cs
 8000bac:	f04f 0901 	movcs.w	r9, #1
 8000bb0:	f04f 0900 	movcc.w	r9, #0
 8000bb4:	4290      	cmp	r0, r2
 8000bb6:	d903      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb8:	f1b9 0f00 	cmp.w	r9, #0
 8000bbc:	f000 80c8 	beq.w	8000d50 <__udivmoddi4+0x2b4>
 8000bc0:	4644      	mov	r4, r8
 8000bc2:	1a12      	subs	r2, r2, r0
 8000bc4:	fa1f fc8c 	uxth.w	ip, ip
 8000bc8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bcc:	fb07 2210 	mls	r2, r7, r0, r2
 8000bd0:	fb00 f606 	mul.w	r6, r0, r6
 8000bd4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000bd8:	4566      	cmp	r6, ip
 8000bda:	d908      	bls.n	8000bee <__udivmoddi4+0x152>
 8000bdc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000be0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000be4:	d202      	bcs.n	8000bec <__udivmoddi4+0x150>
 8000be6:	4566      	cmp	r6, ip
 8000be8:	f200 80bb 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000bec:	4610      	mov	r0, r2
 8000bee:	ebac 0c06 	sub.w	ip, ip, r6
 8000bf2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bf6:	e79d      	b.n	8000b34 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa04 fe01 	lsl.w	lr, r4, r1
 8000c02:	fa22 f706 	lsr.w	r7, r2, r6
 8000c06:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c0a:	40f4      	lsrs	r4, r6
 8000c0c:	408a      	lsls	r2, r1
 8000c0e:	431f      	orrs	r7, r3
 8000c10:	ea4e 030c 	orr.w	r3, lr, ip
 8000c14:	fa00 fe01 	lsl.w	lr, r0, r1
 8000c18:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c20:	fa1f fc87 	uxth.w	ip, r7
 8000c24:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c28:	fb08 4410 	mls	r4, r8, r0, r4
 8000c2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c30:	fb00 f90c 	mul.w	r9, r0, ip
 8000c34:	45a1      	cmp	r9, r4
 8000c36:	d90e      	bls.n	8000c56 <__udivmoddi4+0x1ba>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	bf2c      	ite	cs
 8000c40:	f04f 0b01 	movcs.w	fp, #1
 8000c44:	f04f 0b00 	movcc.w	fp, #0
 8000c48:	45a1      	cmp	r9, r4
 8000c4a:	d903      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c4c:	f1bb 0f00 	cmp.w	fp, #0
 8000c50:	f000 8093 	beq.w	8000d7a <__udivmoddi4+0x2de>
 8000c54:	4650      	mov	r0, sl
 8000c56:	eba4 0409 	sub.w	r4, r4, r9
 8000c5a:	fa1f f983 	uxth.w	r9, r3
 8000c5e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000c62:	fb08 4413 	mls	r4, r8, r3, r4
 8000c66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c6e:	45a4      	cmp	ip, r4
 8000c70:	d906      	bls.n	8000c80 <__udivmoddi4+0x1e4>
 8000c72:	193c      	adds	r4, r7, r4
 8000c74:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c78:	d201      	bcs.n	8000c7e <__udivmoddi4+0x1e2>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d87a      	bhi.n	8000d74 <__udivmoddi4+0x2d8>
 8000c7e:	4643      	mov	r3, r8
 8000c80:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c84:	eba4 040c 	sub.w	r4, r4, ip
 8000c88:	fba0 9802 	umull	r9, r8, r0, r2
 8000c8c:	4544      	cmp	r4, r8
 8000c8e:	46cc      	mov	ip, r9
 8000c90:	4643      	mov	r3, r8
 8000c92:	d302      	bcc.n	8000c9a <__udivmoddi4+0x1fe>
 8000c94:	d106      	bne.n	8000ca4 <__udivmoddi4+0x208>
 8000c96:	45ce      	cmp	lr, r9
 8000c98:	d204      	bcs.n	8000ca4 <__udivmoddi4+0x208>
 8000c9a:	3801      	subs	r0, #1
 8000c9c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000ca0:	eb68 0307 	sbc.w	r3, r8, r7
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x222>
 8000ca6:	ebbe 020c 	subs.w	r2, lr, ip
 8000caa:	eb64 0403 	sbc.w	r4, r4, r3
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	fa22 f301 	lsr.w	r3, r2, r1
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	431e      	orrs	r6, r3
 8000cba:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	e73e      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000cc2:	fa02 fe03 	lsl.w	lr, r2, r3
 8000cc6:	f1c3 0120 	rsb	r1, r3, #32
 8000cca:	fa04 f203 	lsl.w	r2, r4, r3
 8000cce:	fa00 fc03 	lsl.w	ip, r0, r3
 8000cd2:	40cc      	lsrs	r4, r1
 8000cd4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000cd8:	fa20 f101 	lsr.w	r1, r0, r1
 8000cdc:	fa1f f68e 	uxth.w	r6, lr
 8000ce0:	fbb4 f0f7 	udiv	r0, r4, r7
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	fb07 4410 	mls	r4, r7, r0, r4
 8000cea:	0c11      	lsrs	r1, r2, #16
 8000cec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000cf0:	fb00 f406 	mul.w	r4, r0, r6
 8000cf4:	428c      	cmp	r4, r1
 8000cf6:	d90e      	bls.n	8000d16 <__udivmoddi4+0x27a>
 8000cf8:	eb1e 0101 	adds.w	r1, lr, r1
 8000cfc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d00:	bf2c      	ite	cs
 8000d02:	f04f 0901 	movcs.w	r9, #1
 8000d06:	f04f 0900 	movcc.w	r9, #0
 8000d0a:	428c      	cmp	r4, r1
 8000d0c:	d902      	bls.n	8000d14 <__udivmoddi4+0x278>
 8000d0e:	f1b9 0f00 	cmp.w	r9, #0
 8000d12:	d02c      	beq.n	8000d6e <__udivmoddi4+0x2d2>
 8000d14:	4640      	mov	r0, r8
 8000d16:	1b09      	subs	r1, r1, r4
 8000d18:	b292      	uxth	r2, r2
 8000d1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d1e:	fb07 1114 	mls	r1, r7, r4, r1
 8000d22:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d26:	fb04 f106 	mul.w	r1, r4, r6
 8000d2a:	4291      	cmp	r1, r2
 8000d2c:	d907      	bls.n	8000d3e <__udivmoddi4+0x2a2>
 8000d2e:	eb1e 0202 	adds.w	r2, lr, r2
 8000d32:	f104 38ff 	add.w	r8, r4, #4294967295
 8000d36:	d201      	bcs.n	8000d3c <__udivmoddi4+0x2a0>
 8000d38:	4291      	cmp	r1, r2
 8000d3a:	d815      	bhi.n	8000d68 <__udivmoddi4+0x2cc>
 8000d3c:	4644      	mov	r4, r8
 8000d3e:	1a52      	subs	r2, r2, r1
 8000d40:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000d44:	e721      	b.n	8000b8a <__udivmoddi4+0xee>
 8000d46:	1a86      	subs	r6, r0, r2
 8000d48:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	e70e      	b.n	8000b6e <__udivmoddi4+0xd2>
 8000d50:	3c02      	subs	r4, #2
 8000d52:	4472      	add	r2, lr
 8000d54:	e735      	b.n	8000bc2 <__udivmoddi4+0x126>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4472      	add	r2, lr
 8000d5a:	e6d0      	b.n	8000afe <__udivmoddi4+0x62>
 8000d5c:	44f4      	add	ip, lr
 8000d5e:	3802      	subs	r0, #2
 8000d60:	e6e3      	b.n	8000b2a <__udivmoddi4+0x8e>
 8000d62:	44f4      	add	ip, lr
 8000d64:	3802      	subs	r0, #2
 8000d66:	e742      	b.n	8000bee <__udivmoddi4+0x152>
 8000d68:	3c02      	subs	r4, #2
 8000d6a:	4472      	add	r2, lr
 8000d6c:	e7e7      	b.n	8000d3e <__udivmoddi4+0x2a2>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	4471      	add	r1, lr
 8000d72:	e7d0      	b.n	8000d16 <__udivmoddi4+0x27a>
 8000d74:	3b02      	subs	r3, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	e782      	b.n	8000c80 <__udivmoddi4+0x1e4>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	e76a      	b.n	8000c56 <__udivmoddi4+0x1ba>

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d8c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d90:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d9c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000da0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000da4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00b      	beq.n	8000dc4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000dac:	e000      	b.n	8000db0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000dae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000db0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f9      	beq.n	8000dae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000dba:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <EXTI8_IRQHandler>:
#endif /* __GNUC__ */
static void SystemClock_Config(void);
extern void isr(void);

void EXTI8_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
    uint16_t GPIO_Pin;

    /* Get GPIO_Pin */
    if (__HAL_GPIO_EXTI_GET_IT(CONF_WINC_SPI_INT_PIN))
 8000dda:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <EXTI8_IRQHandler+0x34>)
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d105      	bne.n	8000df2 <EXTI8_IRQHandler+0x1e>
 8000de6:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <EXTI8_IRQHandler+0x34>)
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <EXTI8_IRQHandler+0x24>
    {
        GPIO_Pin = CONF_WINC_SPI_INT_PIN;
 8000df2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000df6:	80fb      	strh	r3, [r7, #6]
    }

    HAL_GPIO_EXTI_IRQHandler(GPIO_Pin);
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f003 fb38 	bl	8004470 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	46022000 	.word	0x46022000

08000e0c <HAL_GPIO_EXTI_Rising_Callback>:


void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == CONF_WINC_SPI_INT_PIN)
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e1c:	d101      	bne.n	8000e22 <HAL_GPIO_EXTI_Rising_Callback+0x16>
    {
        isr();
 8000e1e:	f00a fbbd 	bl	800b59c <isr>
    }
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <wifi_cb>:
        break;
    }
}

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af02      	add	r7, sp, #8
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
    switch (u8MsgType)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e3c:	d002      	beq.n	8000e44 <wifi_cb+0x18>
 8000e3e:	2b32      	cmp	r3, #50	@ 0x32
 8000e40:	d01f      	beq.n	8000e82 <wifi_cb+0x56>
            wifi_connected = M2M_WIFI_CONNECTED;
            printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF : IP is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
        }
        break;
        default:
        break;
 8000e42:	e038      	b.n	8000eb6 <wifi_cb+0x8a>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	60bb      	str	r3, [r7, #8]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d105      	bne.n	8000e5c <wifi_cb+0x30>
                printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
 8000e50:	481b      	ldr	r0, [pc, #108]	@ (8000ec0 <wifi_cb+0x94>)
 8000e52:	f00d fd69 	bl	800e928 <puts>
                m2m_wifi_request_dhcp_client();
 8000e56:	f00b fcff 	bl	800c858 <m2m_wifi_request_dhcp_client>
        break;
 8000e5a:	e02b      	b.n	8000eb4 <wifi_cb+0x88>
            else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d127      	bne.n	8000eb4 <wifi_cb+0x88>
                printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
 8000e64:	4817      	ldr	r0, [pc, #92]	@ (8000ec4 <wifi_cb+0x98>)
 8000e66:	f00d fd5f 	bl	800e928 <puts>
                wifi_connected = M2M_WIFI_DISCONNECTED;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <wifi_cb+0x9c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_WPA_PSK_KEY, M2M_WIFI_CH_ALL);
 8000e70:	23ff      	movs	r3, #255	@ 0xff
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <wifi_cb+0xa0>)
 8000e76:	2202      	movs	r2, #2
 8000e78:	2107      	movs	r1, #7
 8000e7a:	4815      	ldr	r0, [pc, #84]	@ (8000ed0 <wifi_cb+0xa4>)
 8000e7c:	f00b fc00 	bl	800c680 <m2m_wifi_connect>
        break;
 8000e80:	e018      	b.n	8000eb4 <wifi_cb+0x88>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
            wifi_connected = M2M_WIFI_CONNECTED;
 8000e86:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <wifi_cb+0x9c>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
            printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF : IP is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3301      	adds	r3, #1
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	3303      	adds	r3, #3
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4809      	ldr	r0, [pc, #36]	@ (8000ed4 <wifi_cb+0xa8>)
 8000eae:	f00d fccb 	bl	800e848 <iprintf>
        break;
 8000eb2:	e000      	b.n	8000eb6 <wifi_cb+0x8a>
        break;
 8000eb4:	bf00      	nop
    }
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	0800f5e0 	.word	0x0800f5e0
 8000ec4:	0800f618 	.word	0x0800f618
 8000ec8:	20000488 	.word	0x20000488
 8000ecc:	0800f650 	.word	0x0800f650
 8000ed0:	0800f65c 	.word	0x0800f65c
 8000ed4:	0800f664 	.word	0x0800f664

08000ed8 <HAL_TIM_IC_CaptureCallback>:
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);
}


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	static uint32_t returnSignal = 0;
	static uint32_t begin_timestamp = 0;
	static uint32_t end_timestamp = 0;

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7f1b      	ldrb	r3, [r3, #28]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d162      	bne.n	8000fae <HAL_TIM_IC_CaptureCallback+0xd6>
	{
		if (returnSignal) {
 8000ee8:	4b35      	ldr	r3, [pc, #212]	@ (8000fc0 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d01a      	beq.n	8000f26 <HAL_TIM_IC_CaptureCallback+0x4e>
			returnSignal = 0;
 8000ef0:	4b33      	ldr	r3, [pc, #204]	@ (8000fc0 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
			begin_timestamp = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f008 ffdb 	bl	8009eb4 <HAL_TIM_ReadCapturedValue>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a30      	ldr	r2, [pc, #192]	@ (8000fc4 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000f02:	6013      	str	r3, [r2, #0]

			/* switching capture signal to falling edge */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6a1a      	ldr	r2, [r3, #32]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 020a 	bic.w	r2, r2, #10
 8000f12:	621a      	str	r2, [r3, #32]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6a1a      	ldr	r2, [r3, #32]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0202 	orr.w	r2, r2, #2
 8000f22:	621a      	str	r2, [r3, #32]

			/* Resetting interrupt */
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000f24:	e043      	b.n	8000fae <HAL_TIM_IC_CaptureCallback+0xd6>
			returnSignal = 1;
 8000f26:	4b26      	ldr	r3, [pc, #152]	@ (8000fc0 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
			end_timestamp = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f008 ffc0 	bl	8009eb4 <HAL_TIM_ReadCapturedValue>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a24      	ldr	r2, [pc, #144]	@ (8000fc8 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000f38:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	@ 0x24
			Distance = (end_timestamp - begin_timestamp) * .034/2;
 8000f42:	4b21      	ldr	r3, [pc, #132]	@ (8000fc8 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fae1 	bl	8000514 <__aeabi_ui2d>
 8000f52:	a319      	add	r3, pc, #100	@ (adr r3, 8000fb8 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	f7ff fb56 	bl	8000608 <__aeabi_dmul>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f6c:	f7ff fc76 	bl	800085c <__aeabi_ddiv>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fd58 	bl	8000a2c <__aeabi_d2uiz>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4a13      	ldr	r2, [pc, #76]	@ (8000fcc <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f80:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6a1a      	ldr	r2, [r3, #32]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 020a 	bic.w	r2, r2, #10
 8000f90:	621a      	str	r2, [r3, #32]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	6a12      	ldr	r2, [r2, #32]
 8000f9c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 0202 	bic.w	r2, r2, #2
 8000fac:	60da      	str	r2, [r3, #12]
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	b020c49c 	.word	0xb020c49c
 8000fbc:	3fa16872 	.word	0x3fa16872
 8000fc0:	20000490 	.word	0x20000490
 8000fc4:	20000494 	.word	0x20000494
 8000fc8:	20000498 	.word	0x20000498
 8000fcc:	2000048c 	.word	0x2000048c
 8000fd0:	20000314 	.word	0x20000314

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08e      	sub	sp, #56	@ 0x38
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fda:	f001 f8f3 	bl	80021c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fde:	f000 f8b9 	bl	8001154 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  UartHandle.Instance        = USARTx;
 8000fe2:	4b51      	ldr	r3, [pc, #324]	@ (8001128 <main+0x154>)
 8000fe4:	4a51      	ldr	r2, [pc, #324]	@ (800112c <main+0x158>)
 8000fe6:	601a      	str	r2, [r3, #0]

  UartHandle.Init.BaudRate   = 115200 ; //9600
 8000fe8:	4b4f      	ldr	r3, [pc, #316]	@ (8001128 <main+0x154>)
 8000fea:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fee:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff0:	4b4d      	ldr	r3, [pc, #308]	@ (8001128 <main+0x154>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000ff6:	4b4c      	ldr	r3, [pc, #304]	@ (8001128 <main+0x154>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE; //UART_PARITY_ODD
 8000ffc:	4b4a      	ldr	r3, [pc, #296]	@ (8001128 <main+0x154>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001002:	4b49      	ldr	r3, [pc, #292]	@ (8001128 <main+0x154>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8001008:	4b47      	ldr	r3, [pc, #284]	@ (8001128 <main+0x154>)
 800100a:	220c      	movs	r2, #12
 800100c:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800100e:	4b46      	ldr	r3, [pc, #280]	@ (8001128 <main+0x154>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8001014:	4844      	ldr	r0, [pc, #272]	@ (8001128 <main+0x154>)
 8001016:	f009 fb39 	bl	800a68c <HAL_UART_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <main+0x50>
  {
    /* Initialization Error */
    Error_Handler();
 8001020:	f000 fc92 	bl	8001948 <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001024:	f000 fb78 	bl	8001718 <MX_GPIO_Init>
  MX_AES_Init();
 8001028:	f000 f966 	bl	80012f8 <MX_AES_Init>
  MX_SPI1_Init();
 800102c:	f000 f9f2 	bl	8001414 <MX_SPI1_Init>
  MX_I2C2_Init();
 8001030:	f000 f99c 	bl	800136c <MX_I2C2_Init>
  MX_SPI2_Init();
 8001034:	f000 fa5c 	bl	80014f0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001038:	f000 fac8 	bl	80015cc <MX_TIM1_Init>
  MX_ADC1_Init();
 800103c:	f000 f8ec 	bl	8001218 <MX_ADC1_Init>
  MX_UART4_Init();
 8001040:	f000 fb1e 	bl	8001680 <MX_UART4_Init>
  MX_ICACHE_Init();
 8001044:	f000 f9d2 	bl	80013ec <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001048:	4839      	ldr	r0, [pc, #228]	@ (8001130 <main+0x15c>)
 800104a:	f008 fadf 	bl	800960c <HAL_TIM_Base_Start>
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800104e:	4b39      	ldr	r3, [pc, #228]	@ (8001134 <main+0x160>)
 8001050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001054:	4a37      	ldr	r2, [pc, #220]	@ (8001134 <main+0x160>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800105e:	4b35      	ldr	r3, [pc, #212]	@ (8001134 <main+0x160>)
 8001060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
  __GPIOA_CLK_ENABLE();
 800106c:	4b31      	ldr	r3, [pc, #196]	@ (8001134 <main+0x160>)
 800106e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001072:	4a30      	ldr	r2, [pc, #192]	@ (8001134 <main+0x160>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800107c:	4b2d      	ldr	r3, [pc, #180]	@ (8001134 <main+0x160>)
 800107e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __GPIOB_CLK_ENABLE();
 800108a:	4b2a      	ldr	r3, [pc, #168]	@ (8001134 <main+0x160>)
 800108c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001090:	4a28      	ldr	r2, [pc, #160]	@ (8001134 <main+0x160>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800109a:	4b26      	ldr	r3, [pc, #152]	@ (8001134 <main+0x160>)
 800109c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	683b      	ldr	r3, [r7, #0]

  printf("Initializing...\n");
 80010a8:	4823      	ldr	r0, [pc, #140]	@ (8001138 <main+0x164>)
 80010aa:	f00d fc3d 	bl	800e928 <puts>

  ret = HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80010ae:	2100      	movs	r1, #0
 80010b0:	481f      	ldr	r0, [pc, #124]	@ (8001130 <main+0x15c>)
 80010b2:	f008 fb9b 	bl	80097ec <HAL_TIM_IC_Start_IT>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (ret != HAL_OK) {
 80010bc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d004      	beq.n	80010ce <main+0xfa>
	printf("Error setting mode for distance sensor.\n");
 80010c4:	481d      	ldr	r0, [pc, #116]	@ (800113c <main+0x168>)
 80010c6:	f00d fc2f 	bl	800e928 <puts>
	while (1) {}
 80010ca:	bf00      	nop
 80010cc:	e7fd      	b.n	80010ca <main+0xf6>
  }

  /* Initialize the BSP. */
  printf("BSP Initialization Started\n");
 80010ce:	481c      	ldr	r0, [pc, #112]	@ (8001140 <main+0x16c>)
 80010d0:	f00d fc2a 	bl	800e928 <puts>
  nm_bsp_init();
 80010d4:	f00a f84a 	bl	800b16c <nm_bsp_init>
  printf("BSP Initialization Completed!\n");
 80010d8:	481a      	ldr	r0, [pc, #104]	@ (8001144 <main+0x170>)
 80010da:	f00d fc25 	bl	800e928 <puts>

  /* Initialize socket structure */
  addr.sin_family = AF_INET;
 80010de:	2302      	movs	r3, #2
 80010e0:	81bb      	strh	r3, [r7, #12]
  addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
 80010e2:	f645 4311 	movw	r3, #23569	@ 0x5c11
 80010e6:	81fb      	strh	r3, [r7, #14]
  addr.sin_addr.s_addr = _htonl(MAIN_WIFI_M2M_SERVER_IP);
 80010e8:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <main+0x174>)
 80010ea:	613b      	str	r3, [r7, #16]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	2218      	movs	r2, #24
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00d fcf7 	bl	800eae8 <memset>

  /* Initialize Wi-Fi driver with data and status callbacks. */
  param.pfAppWifiCb = wifi_cb;
 80010fa:	4b14      	ldr	r3, [pc, #80]	@ (800114c <main+0x178>)
 80010fc:	61fb      	str	r3, [r7, #28]
  ret = m2m_wifi_init(&param);
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	4618      	mov	r0, r3
 8001104:	f00b f852 	bl	800c1ac <m2m_wifi_init>
 8001108:	4603      	mov	r3, r0
 800110a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (M2M_SUCCESS != ret) {
 800110e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001112:	2b00      	cmp	r3, #0
 8001114:	d007      	beq.n	8001126 <main+0x152>
      printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
 8001116:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800111a:	4619      	mov	r1, r3
 800111c:	480c      	ldr	r0, [pc, #48]	@ (8001150 <main+0x17c>)
 800111e:	f00d fb93 	bl	800e848 <iprintf>
      while (1) {}
 8001122:	bf00      	nop
 8001124:	e7fd      	b.n	8001122 <main+0x14e>

  SysTick_Config(SystemCoreClock/1000);
  wifi_connected = M2M_WIFI_CONNECTED;
*/

  while(1) {
 8001126:	e7fe      	b.n	8001126 <main+0x152>
 8001128:	200003f4 	.word	0x200003f4
 800112c:	40013800 	.word	0x40013800
 8001130:	20000314 	.word	0x20000314
 8001134:	46020c00 	.word	0x46020c00
 8001138:	0800f69c 	.word	0x0800f69c
 800113c:	0800f6ac 	.word	0x0800f6ac
 8001140:	0800f6d4 	.word	0x0800f6d4
 8001144:	0800f6f0 	.word	0x0800f6f0
 8001148:	1301a8c0 	.word	0x1301a8c0
 800114c:	08000e2d 	.word	0x08000e2d
 8001150:	0800f710 	.word	0x0800f710

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b09e      	sub	sp, #120	@ 0x78
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 0318 	add.w	r3, r7, #24
 800115e:	2260      	movs	r2, #96	@ 0x60
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f00d fcc0 	bl	800eae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	463b      	mov	r3, r7
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
 8001176:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001178:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800117c:	f003 fb0c 	bl	8004798 <HAL_PWREx_ControlVoltageScaling>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001186:	f000 fbdf 	bl	8001948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800118a:	2312      	movs	r3, #18
 800118c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800118e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001194:	2310      	movs	r3, #16
 8001196:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001198:	2301      	movs	r3, #1
 800119a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800119c:	2310      	movs	r3, #16
 800119e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a4:	2302      	movs	r3, #2
 80011a6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011a8:	2301      	movs	r3, #1
 80011aa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80011ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80011b2:	2303      	movs	r3, #3
 80011b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011b6:	230a      	movs	r3, #10
 80011b8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011be:	2302      	movs	r3, #2
 80011c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80011c2:	2301      	movs	r3, #1
 80011c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80011c6:	230c      	movs	r3, #12
 80011c8:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	4618      	mov	r0, r3
 80011d4:	f003 fb7c 	bl	80048d0 <HAL_RCC_OscConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011de:	f000 fbb3 	bl	8001948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e2:	231f      	movs	r3, #31
 80011e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e6:	2303      	movs	r3, #3
 80011e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	2104      	movs	r1, #4
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 fa42 	bl	8005688 <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800120a:	f000 fb9d 	bl	8001948 <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3778      	adds	r7, #120	@ 0x78
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800121e:	463b      	mov	r3, r7
 8001220:	2220      	movs	r2, #32
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f00d fc5f 	bl	800eae8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800122a:	4b30      	ldr	r3, [pc, #192]	@ (80012ec <MX_ADC1_Init+0xd4>)
 800122c:	4a30      	ldr	r2, [pc, #192]	@ (80012f0 <MX_ADC1_Init+0xd8>)
 800122e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001230:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <MX_ADC1_Init+0xd4>)
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8001236:	4b2d      	ldr	r3, [pc, #180]	@ (80012ec <MX_ADC1_Init+0xd4>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800123c:	4b2b      	ldr	r3, [pc, #172]	@ (80012ec <MX_ADC1_Init+0xd4>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001242:	4b2a      	ldr	r3, [pc, #168]	@ (80012ec <MX_ADC1_Init+0xd4>)
 8001244:	2200      	movs	r2, #0
 8001246:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001248:	4b28      	ldr	r3, [pc, #160]	@ (80012ec <MX_ADC1_Init+0xd4>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800124e:	4b27      	ldr	r3, [pc, #156]	@ (80012ec <MX_ADC1_Init+0xd4>)
 8001250:	2204      	movs	r2, #4
 8001252:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001254:	4b25      	ldr	r3, [pc, #148]	@ (80012ec <MX_ADC1_Init+0xd4>)
 8001256:	2200      	movs	r2, #0
 8001258:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800125a:	4b24      	ldr	r3, [pc, #144]	@ (80012ec <MX_ADC1_Init+0xd4>)
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 8001262:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <MX_ADC1_Init+0xd4>)
 8001264:	2201      	movs	r2, #1
 8001266:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001268:	4b20      	ldr	r3, [pc, #128]	@ (80012ec <MX_ADC1_Init+0xd4>)
 800126a:	2200      	movs	r2, #0
 800126c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001270:	4b1e      	ldr	r3, [pc, #120]	@ (80012ec <MX_ADC1_Init+0xd4>)
 8001272:	2200      	movs	r2, #0
 8001274:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001276:	4b1d      	ldr	r3, [pc, #116]	@ (80012ec <MX_ADC1_Init+0xd4>)
 8001278:	2200      	movs	r2, #0
 800127a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800127c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <MX_ADC1_Init+0xd4>)
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001284:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <MX_ADC1_Init+0xd4>)
 8001286:	2200      	movs	r2, #0
 8001288:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800128a:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <MX_ADC1_Init+0xd4>)
 800128c:	2200      	movs	r2, #0
 800128e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001290:	4b16      	ldr	r3, [pc, #88]	@ (80012ec <MX_ADC1_Init+0xd4>)
 8001292:	2200      	movs	r2, #0
 8001294:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <MX_ADC1_Init+0xd4>)
 8001298:	2200      	movs	r2, #0
 800129a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800129c:	4b13      	ldr	r3, [pc, #76]	@ (80012ec <MX_ADC1_Init+0xd4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012a4:	4811      	ldr	r0, [pc, #68]	@ (80012ec <MX_ADC1_Init+0xd4>)
 80012a6:	f001 fb51 	bl	800294c <HAL_ADC_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80012b0:	f000 fb4a 	bl	8001948 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <MX_ADC1_Init+0xdc>)
 80012b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b8:	2306      	movs	r3, #6
 80012ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012c6:	2304      	movs	r3, #4
 80012c8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ce:	463b      	mov	r3, r7
 80012d0:	4619      	mov	r1, r3
 80012d2:	4806      	ldr	r0, [pc, #24]	@ (80012ec <MX_ADC1_Init+0xd4>)
 80012d4:	f001 fe22 	bl	8002f1c <HAL_ADC_ConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80012de:	f000 fb33 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000008c 	.word	0x2000008c
 80012f0:	42028000 	.word	0x42028000
 80012f4:	10000010 	.word	0x10000010

080012f8 <MX_AES_Init>:
  * @brief AES Initialization Function
  * @param None
  * @retval None
  */
static void MX_AES_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 80012fc:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <MX_AES_Init+0x60>)
 80012fe:	4a17      	ldr	r2, [pc, #92]	@ (800135c <MX_AES_Init+0x64>)
 8001300:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_NO_SWAP;
 8001302:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <MX_AES_Init+0x60>)
 8001304:	2200      	movs	r2, #0
 8001306:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 8001308:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <MX_AES_Init+0x60>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 800130e:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <MX_AES_Init+0x60>)
 8001310:	4a13      	ldr	r2, [pc, #76]	@ (8001360 <MX_AES_Init+0x68>)
 8001312:	60da      	str	r2, [r3, #12]
  hcryp.Init.pInitVect = (uint32_t *)pInitVectAES;
 8001314:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <MX_AES_Init+0x60>)
 8001316:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <MX_AES_Init+0x6c>)
 8001318:	611a      	str	r2, [r3, #16]
  hcryp.Init.Algorithm = CRYP_AES_GCM_GMAC;
 800131a:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <MX_AES_Init+0x60>)
 800131c:	2260      	movs	r2, #96	@ 0x60
 800131e:	615a      	str	r2, [r3, #20]
  hcryp.Init.Header = (uint32_t *)HeaderAES;
 8001320:	4b0d      	ldr	r3, [pc, #52]	@ (8001358 <MX_AES_Init+0x60>)
 8001322:	4a11      	ldr	r2, [pc, #68]	@ (8001368 <MX_AES_Init+0x70>)
 8001324:	619a      	str	r2, [r3, #24]
  hcryp.Init.HeaderSize = 1;
 8001326:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <MX_AES_Init+0x60>)
 8001328:	2201      	movs	r2, #1
 800132a:	61da      	str	r2, [r3, #28]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 800132c:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <MX_AES_Init+0x60>)
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	@ 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_WORD;
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MX_AES_Init+0x60>)
 8001334:	2200      	movs	r2, #0
 8001336:	629a      	str	r2, [r3, #40]	@ 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 8001338:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <MX_AES_Init+0x60>)
 800133a:	2200      	movs	r2, #0
 800133c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hcryp.Init.KeyMode = CRYP_KEYMODE_NORMAL;
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <MX_AES_Init+0x60>)
 8001340:	2200      	movs	r2, #0
 8001342:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	@ (8001358 <MX_AES_Init+0x60>)
 8001346:	f002 fdcd 	bl	8003ee4 <HAL_CRYP_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_AES_Init+0x5c>
  {
    Error_Handler();
 8001350:	f000 fafa 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000118 	.word	0x20000118
 800135c:	420c0000 	.word	0x420c0000
 8001360:	20000180 	.word	0x20000180
 8001364:	20000190 	.word	0x20000190
 8001368:	0801062c 	.word	0x0801062c

0800136c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001370:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <MX_I2C2_Init+0x74>)
 8001372:	4a1c      	ldr	r2, [pc, #112]	@ (80013e4 <MX_I2C2_Init+0x78>)
 8001374:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8001376:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <MX_I2C2_Init+0x74>)
 8001378:	4a1b      	ldr	r2, [pc, #108]	@ (80013e8 <MX_I2C2_Init+0x7c>)
 800137a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800137c:	4b18      	ldr	r3, [pc, #96]	@ (80013e0 <MX_I2C2_Init+0x74>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001382:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <MX_I2C2_Init+0x74>)
 8001384:	2201      	movs	r2, #1
 8001386:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001388:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <MX_I2C2_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800138e:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <MX_I2C2_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <MX_I2C2_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_I2C2_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <MX_I2C2_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013a6:	480e      	ldr	r0, [pc, #56]	@ (80013e0 <MX_I2C2_Init+0x74>)
 80013a8:	f003 f893 	bl	80044d2 <HAL_I2C_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80013b2:	f000 fac9 	bl	8001948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013b6:	2100      	movs	r1, #0
 80013b8:	4809      	ldr	r0, [pc, #36]	@ (80013e0 <MX_I2C2_Init+0x74>)
 80013ba:	f003 f925 	bl	8004608 <HAL_I2CEx_ConfigAnalogFilter>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80013c4:	f000 fac0 	bl	8001948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013c8:	2100      	movs	r1, #0
 80013ca:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <MX_I2C2_Init+0x74>)
 80013cc:	f003 f967 	bl	800469e <HAL_I2CEx_ConfigDigitalFilter>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013d6:	f000 fab7 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200001a0 	.word	0x200001a0
 80013e4:	40005800 	.word	0x40005800
 80013e8:	30909dec 	.word	0x30909dec

080013ec <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80013f0:	2000      	movs	r0, #0
 80013f2:	f003 f9a1 	bl	8004738 <HAL_ICACHE_ConfigAssociativityMode>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80013fc:	f000 faa4 	bl	8001948 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001400:	f003 f9ba 	bl	8004778 <HAL_ICACHE_Enable>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800140a:	f000 fa9d 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001424:	4b30      	ldr	r3, [pc, #192]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 8001426:	4a31      	ldr	r2, [pc, #196]	@ (80014ec <MX_SPI1_Init+0xd8>)
 8001428:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800142a:	4b2f      	ldr	r3, [pc, #188]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 800142c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001430:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001432:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001438:	4b2b      	ldr	r3, [pc, #172]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 800143a:	2203      	movs	r2, #3
 800143c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143e:	4b2a      	ldr	r3, [pc, #168]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001444:	4b28      	ldr	r3, [pc, #160]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800144a:	4b27      	ldr	r3, [pc, #156]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 800144c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001450:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001452:	4b25      	ldr	r3, [pc, #148]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 8001454:	2200      	movs	r2, #0
 8001456:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001458:	4b23      	ldr	r3, [pc, #140]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 800145a:	2200      	movs	r2, #0
 800145c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800145e:	4b22      	ldr	r3, [pc, #136]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 8001460:	2200      	movs	r2, #0
 8001462:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001464:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 8001466:	2200      	movs	r2, #0
 8001468:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800146a:	4b1f      	ldr	r3, [pc, #124]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 800146c:	2207      	movs	r2, #7
 800146e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001470:	4b1d      	ldr	r3, [pc, #116]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 8001472:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001476:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001478:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 800147a:	2200      	movs	r2, #0
 800147c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800147e:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 8001480:	2200      	movs	r2, #0
 8001482:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001484:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 8001486:	2200      	movs	r2, #0
 8001488:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800148a:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 800148c:	2200      	movs	r2, #0
 800148e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001490:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 8001492:	2200      	movs	r2, #0
 8001494:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001496:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 8001498:	2200      	movs	r2, #0
 800149a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800149c:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014ae:	480e      	ldr	r0, [pc, #56]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 80014b0:	f007 fc12 	bl	8008cd8 <HAL_SPI_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 80014ba:	f000 fa45 	bl	8001948 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80014c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80014c6:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <MX_SPI1_Init+0xd4>)
 80014d2:	f008 f85a 	bl	800958a <HAL_SPIEx_SetConfigAutonomousMode>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 80014dc:	f000 fa34 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200001f4 	.word	0x200001f4
 80014ec:	40013000 	.word	0x40013000

080014f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001500:	4b30      	ldr	r3, [pc, #192]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 8001502:	4a31      	ldr	r2, [pc, #196]	@ (80015c8 <MX_SPI2_Init+0xd8>)
 8001504:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001506:	4b2f      	ldr	r3, [pc, #188]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 8001508:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800150c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800150e:	4b2d      	ldr	r3, [pc, #180]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001514:	4b2b      	ldr	r3, [pc, #172]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 8001516:	2203      	movs	r2, #3
 8001518:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800151a:	4b2a      	ldr	r3, [pc, #168]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001520:	4b28      	ldr	r3, [pc, #160]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001526:	4b27      	ldr	r3, [pc, #156]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 8001528:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800152c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800152e:	4b25      	ldr	r3, [pc, #148]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 8001530:	2200      	movs	r2, #0
 8001532:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001534:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 8001536:	2200      	movs	r2, #0
 8001538:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800153a:	4b22      	ldr	r3, [pc, #136]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 800153c:	2200      	movs	r2, #0
 800153e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001540:	4b20      	ldr	r3, [pc, #128]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 8001542:	2200      	movs	r2, #0
 8001544:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001546:	4b1f      	ldr	r3, [pc, #124]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 8001548:	2207      	movs	r2, #7
 800154a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800154c:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 800154e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001552:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001554:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 8001556:	2200      	movs	r2, #0
 8001558:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800155a:	4b1a      	ldr	r3, [pc, #104]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 800155c:	2200      	movs	r2, #0
 800155e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001560:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 8001562:	2200      	movs	r2, #0
 8001564:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001566:	4b17      	ldr	r3, [pc, #92]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 8001568:	2200      	movs	r2, #0
 800156a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800156c:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 800156e:	2200      	movs	r2, #0
 8001570:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001572:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 8001574:	2200      	movs	r2, #0
 8001576:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001578:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 800157a:	2200      	movs	r2, #0
 800157c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800157e:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 8001580:	2200      	movs	r2, #0
 8001582:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001584:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 8001586:	2200      	movs	r2, #0
 8001588:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800158a:	480e      	ldr	r0, [pc, #56]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 800158c:	f007 fba4 	bl	8008cd8 <HAL_SPI_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8001596:	f000 f9d7 	bl	8001948 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800159e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80015a2:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	4619      	mov	r1, r3
 80015ac:	4805      	ldr	r0, [pc, #20]	@ (80015c4 <MX_SPI2_Init+0xd4>)
 80015ae:	f007 ffec 	bl	800958a <HAL_SPIEx_SetConfigAutonomousMode>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 80015b8:	f000 f9c6 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000284 	.word	0x20000284
 80015c8:	40003800 	.word	0x40003800

080015cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015ea:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <MX_TIM1_Init+0xac>)
 80015ec:	4a23      	ldr	r2, [pc, #140]	@ (800167c <MX_TIM1_Init+0xb0>)
 80015ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 80015f0:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <MX_TIM1_Init+0xac>)
 80015f2:	229f      	movs	r2, #159	@ 0x9f
 80015f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f6:	4b20      	ldr	r3, [pc, #128]	@ (8001678 <MX_TIM1_Init+0xac>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 80015fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001678 <MX_TIM1_Init+0xac>)
 80015fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001602:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001604:	4b1c      	ldr	r3, [pc, #112]	@ (8001678 <MX_TIM1_Init+0xac>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800160a:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <MX_TIM1_Init+0xac>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001610:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <MX_TIM1_Init+0xac>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001616:	4818      	ldr	r0, [pc, #96]	@ (8001678 <MX_TIM1_Init+0xac>)
 8001618:	f008 f890 	bl	800973c <HAL_TIM_IC_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001622:	f000 f991 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	480f      	ldr	r0, [pc, #60]	@ (8001678 <MX_TIM1_Init+0xac>)
 800163a:	f008 ff1f 	bl	800a47c <HAL_TIMEx_MasterConfigSynchronization>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001644:	f000 f980 	bl	8001948 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001648:	2300      	movs	r3, #0
 800164a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800164c:	2301      	movs	r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2200      	movs	r2, #0
 800165c:	4619      	mov	r1, r3
 800165e:	4806      	ldr	r0, [pc, #24]	@ (8001678 <MX_TIM1_Init+0xac>)
 8001660:	f008 fb8b 	bl	8009d7a <HAL_TIM_IC_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800166a:	f000 f96d 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	3720      	adds	r7, #32
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000314 	.word	0x20000314
 800167c:	40012c00 	.word	0x40012c00

08001680 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001684:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <MX_UART4_Init+0x90>)
 8001686:	4a23      	ldr	r2, [pc, #140]	@ (8001714 <MX_UART4_Init+0x94>)
 8001688:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800168a:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <MX_UART4_Init+0x90>)
 800168c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001690:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b1f      	ldr	r3, [pc, #124]	@ (8001710 <MX_UART4_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <MX_UART4_Init+0x90>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800169e:	4b1c      	ldr	r3, [pc, #112]	@ (8001710 <MX_UART4_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001710 <MX_UART4_Init+0x90>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b19      	ldr	r3, [pc, #100]	@ (8001710 <MX_UART4_Init+0x90>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <MX_UART4_Init+0x90>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b6:	4b16      	ldr	r3, [pc, #88]	@ (8001710 <MX_UART4_Init+0x90>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016bc:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <MX_UART4_Init+0x90>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c2:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <MX_UART4_Init+0x90>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016c8:	4811      	ldr	r0, [pc, #68]	@ (8001710 <MX_UART4_Init+0x90>)
 80016ca:	f008 ffdf 	bl	800a68c <HAL_UART_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80016d4:	f000 f938 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d8:	2100      	movs	r1, #0
 80016da:	480d      	ldr	r0, [pc, #52]	@ (8001710 <MX_UART4_Init+0x90>)
 80016dc:	f009 fc2c 	bl	800af38 <HAL_UARTEx_SetTxFifoThreshold>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80016e6:	f000 f92f 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ea:	2100      	movs	r1, #0
 80016ec:	4808      	ldr	r0, [pc, #32]	@ (8001710 <MX_UART4_Init+0x90>)
 80016ee:	f009 fc61 	bl	800afb4 <HAL_UARTEx_SetRxFifoThreshold>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80016f8:	f000 f926 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80016fc:	4804      	ldr	r0, [pc, #16]	@ (8001710 <MX_UART4_Init+0x90>)
 80016fe:	f009 fbe2 	bl	800aec6 <HAL_UARTEx_DisableFifoMode>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001708:	f000 f91e 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000360 	.word	0x20000360
 8001714:	40004c00 	.word	0x40004c00

08001718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	@ 0x30
 800171c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800172e:	4b70      	ldr	r3, [pc, #448]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 8001730:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001734:	4a6e      	ldr	r2, [pc, #440]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 8001736:	f043 0310 	orr.w	r3, r3, #16
 800173a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800173e:	4b6c      	ldr	r3, [pc, #432]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 8001740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	61bb      	str	r3, [r7, #24]
 800174a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174c:	4b68      	ldr	r3, [pc, #416]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 800174e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001752:	4a67      	ldr	r2, [pc, #412]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800175c:	4b64      	ldr	r3, [pc, #400]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 800175e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	4b61      	ldr	r3, [pc, #388]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 800176c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001770:	4a5f      	ldr	r2, [pc, #380]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800177a:	4b5d      	ldr	r3, [pc, #372]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 800177c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001788:	4b59      	ldr	r3, [pc, #356]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 800178a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800178e:	4a58      	ldr	r2, [pc, #352]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001798:	4b55      	ldr	r3, [pc, #340]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 800179a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a6:	4b52      	ldr	r3, [pc, #328]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 80017a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ac:	4a50      	ldr	r2, [pc, #320]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 80017ae:	f043 0308 	orr.w	r3, r3, #8
 80017b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017b6:	4b4e      	ldr	r3, [pc, #312]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 80017b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017c4:	4b4a      	ldr	r3, [pc, #296]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 80017c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ca:	4a49      	ldr	r2, [pc, #292]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 80017cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017d4:	4b46      	ldr	r3, [pc, #280]	@ (80018f0 <MX_GPIO_Init+0x1d8>)
 80017d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DISP_RST_Pin|DISP_DC_Pin|DISP_CARD_CS_Pin|DISP_TFT_CS_Pin
 80017e2:	2200      	movs	r2, #0
 80017e4:	f240 413c 	movw	r1, #1084	@ 0x43c
 80017e8:	4842      	ldr	r0, [pc, #264]	@ (80018f4 <MX_GPIO_Init+0x1dc>)
 80017ea:	f002 fe0f 	bl	800440c <HAL_GPIO_WritePin>
                          |DIST_TRIG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_LITE_Pin|WIFI_WAKE_Pin, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2112      	movs	r1, #18
 80017f2:	4841      	ldr	r0, [pc, #260]	@ (80018f8 <MX_GPIO_Init+0x1e0>)
 80017f4:	f002 fe0a 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WIFI_EN_Pin|WIFI_CS_Pin, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80017fe:	483f      	ldr	r0, [pc, #252]	@ (80018fc <MX_GPIO_Init+0x1e4>)
 8001800:	f002 fe04 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	2104      	movs	r1, #4
 8001808:	483d      	ldr	r0, [pc, #244]	@ (8001900 <MX_GPIO_Init+0x1e8>)
 800180a:	f002 fdff 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	2180      	movs	r1, #128	@ 0x80
 8001812:	483c      	ldr	r0, [pc, #240]	@ (8001904 <MX_GPIO_Init+0x1ec>)
 8001814:	f002 fdfa 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WIFI_RST_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	2190      	movs	r1, #144	@ 0x90
 800181c:	483a      	ldr	r0, [pc, #232]	@ (8001908 <MX_GPIO_Init+0x1f0>)
 800181e:	f002 fdf5 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISP_RST_Pin DISP_DC_Pin DISP_CARD_CS_Pin DISP_TFT_CS_Pin
                           DIST_TRIG_Pin */
  GPIO_InitStruct.Pin = DISP_RST_Pin|DISP_DC_Pin|DISP_CARD_CS_Pin|DISP_TFT_CS_Pin
 8001822:	f240 433c 	movw	r3, #1084	@ 0x43c
 8001826:	61fb      	str	r3, [r7, #28]
                          |DIST_TRIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	4619      	mov	r1, r3
 800183a:	482e      	ldr	r0, [pc, #184]	@ (80018f4 <MX_GPIO_Init+0x1dc>)
 800183c:	f002 fc0e 	bl	800405c <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_LITE_Pin WIFI_WAKE_Pin */
  GPIO_InitStruct.Pin = DISP_LITE_Pin|WIFI_WAKE_Pin;
 8001840:	2312      	movs	r3, #18
 8001842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	4619      	mov	r1, r3
 8001856:	4828      	ldr	r0, [pc, #160]	@ (80018f8 <MX_GPIO_Init+0x1e0>)
 8001858:	f002 fc00 	bl	800405c <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_IRQ_Pin */
  GPIO_InitStruct.Pin = WIFI_IRQ_Pin;
 800185c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001862:	4b2a      	ldr	r3, [pc, #168]	@ (800190c <MX_GPIO_Init+0x1f4>)
 8001864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(WIFI_IRQ_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	4619      	mov	r1, r3
 8001870:	4822      	ldr	r0, [pc, #136]	@ (80018fc <MX_GPIO_Init+0x1e4>)
 8001872:	f002 fbf3 	bl	800405c <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_EN_Pin WIFI_CS_Pin */
  GPIO_InitStruct.Pin = WIFI_EN_Pin|WIFI_CS_Pin;
 8001876:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800187a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	4619      	mov	r1, r3
 800188e:	481b      	ldr	r0, [pc, #108]	@ (80018fc <MX_GPIO_Init+0x1e4>)
 8001890:	f002 fbe4 	bl	800405c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001894:	2304      	movs	r3, #4
 8001896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4619      	mov	r1, r3
 80018aa:	4815      	ldr	r0, [pc, #84]	@ (8001900 <MX_GPIO_Init+0x1e8>)
 80018ac:	f002 fbd6 	bl	800405c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80018b0:	2380      	movs	r3, #128	@ 0x80
 80018b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80018c0:	f107 031c 	add.w	r3, r7, #28
 80018c4:	4619      	mov	r1, r3
 80018c6:	480f      	ldr	r0, [pc, #60]	@ (8001904 <MX_GPIO_Init+0x1ec>)
 80018c8:	f002 fbc8 	bl	800405c <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_RST_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin|LED_BLUE_Pin;
 80018cc:	2390      	movs	r3, #144	@ 0x90
 80018ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4619      	mov	r1, r3
 80018e2:	4809      	ldr	r0, [pc, #36]	@ (8001908 <MX_GPIO_Init+0x1f0>)
 80018e4:	f002 fbba 	bl	800405c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018e8:	bf00      	nop
 80018ea:	3730      	adds	r7, #48	@ 0x30
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	46020c00 	.word	0x46020c00
 80018f4:	42021000 	.word	0x42021000
 80018f8:	42020000 	.word	0x42020000
 80018fc:	42020c00 	.word	0x42020c00
 8001900:	42021800 	.word	0x42021800
 8001904:	42020800 	.word	0x42020800
 8001908:	42020400 	.word	0x42020400
 800190c:	10110000 	.word	0x10110000

08001910 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	e009      	b.n	8001936 <_write+0x26>
		ITM_SendChar(*ptr++);
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	60ba      	str	r2, [r7, #8]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fa2a 	bl	8000d84 <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	429a      	cmp	r2, r3
 800193c:	dbf1      	blt.n	8001922 <_write+0x12>
	}
	return len;
 800193e:	687b      	ldr	r3, [r7, #4]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800194c:	b672      	cpsid	i
}
 800194e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <Error_Handler+0x8>

08001954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <HAL_MspInit+0x30>)
 800195c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001960:	4a08      	ldr	r2, [pc, #32]	@ (8001984 <HAL_MspInit+0x30>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <HAL_MspInit+0x30>)
 800196c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001978:	f002 ff9a 	bl	80048b0 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	46020c00 	.word	0x46020c00

08001988 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b0c0      	sub	sp, #256	@ 0x100
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	22d8      	movs	r2, #216	@ 0xd8
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f00d f89d 	bl	800eae8 <memset>
  if(hadc->Instance==ADC1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a24      	ldr	r2, [pc, #144]	@ (8001a44 <HAL_ADC_MspInit+0xbc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d140      	bne.n	8001a3a <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80019b8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80019c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	4618      	mov	r0, r3
 80019d2:	f004 fa29 	bl	8005e28 <HAL_RCCEx_PeriphCLKConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 80019dc:	f7ff ffb4 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80019e0:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <HAL_ADC_MspInit+0xc0>)
 80019e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019e6:	4a18      	ldr	r2, [pc, #96]	@ (8001a48 <HAL_ADC_MspInit+0xc0>)
 80019e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <HAL_ADC_MspInit+0xc0>)
 80019f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fe:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <HAL_ADC_MspInit+0xc0>)
 8001a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a04:	4a10      	ldr	r2, [pc, #64]	@ (8001a48 <HAL_ADC_MspInit+0xc0>)
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <HAL_ADC_MspInit+0xc0>)
 8001a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a22:	2303      	movs	r3, #3
 8001a24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	@ (8001a4c <HAL_ADC_MspInit+0xc4>)
 8001a36:	f002 fb11 	bl	800405c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	42028000 	.word	0x42028000
 8001a48:	46020c00 	.word	0x46020c00
 8001a4c:	42020800 	.word	0x42020800

08001a50 <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a8c <HAL_CRYP_MspInit+0x3c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d10e      	bne.n	8001a80 <HAL_CRYP_MspInit+0x30>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 8001a62:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <HAL_CRYP_MspInit+0x40>)
 8001a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a68:	4a09      	ldr	r2, [pc, #36]	@ (8001a90 <HAL_CRYP_MspInit+0x40>)
 8001a6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a72:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <HAL_CRYP_MspInit+0x40>)
 8001a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }

}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	420c0000 	.word	0x420c0000
 8001a90:	46020c00 	.word	0x46020c00

08001a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b0c0      	sub	sp, #256	@ 0x100
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	22d8      	movs	r2, #216	@ 0xd8
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f00d f817 	bl	800eae8 <memset>
  if(hi2c->Instance==I2C2)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a27      	ldr	r2, [pc, #156]	@ (8001b5c <HAL_I2C_MspInit+0xc8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d146      	bne.n	8001b52 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ac4:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	4618      	mov	r0, r3
 8001adc:	f004 f9a4 	bl	8005e28 <HAL_RCCEx_PeriphCLKConfig>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001ae6:	f7ff ff2f 	bl	8001948 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	4b1d      	ldr	r3, [pc, #116]	@ (8001b60 <HAL_I2C_MspInit+0xcc>)
 8001aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001af0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b60 <HAL_I2C_MspInit+0xcc>)
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001afa:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <HAL_I2C_MspInit+0xcc>)
 8001afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = PWR_SCL_Pin|PWR_SDA_Pin;
 8001b08:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001b0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b10:	2312      	movs	r3, #18
 8001b12:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b22:	2304      	movs	r3, #4
 8001b24:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b28:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	480d      	ldr	r0, [pc, #52]	@ (8001b64 <HAL_I2C_MspInit+0xd0>)
 8001b30:	f002 fa94 	bl	800405c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b34:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <HAL_I2C_MspInit+0xcc>)
 8001b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b3a:	4a09      	ldr	r2, [pc, #36]	@ (8001b60 <HAL_I2C_MspInit+0xcc>)
 8001b3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b40:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_I2C_MspInit+0xcc>)
 8001b46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b52:	bf00      	nop
 8001b54:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40005800 	.word	0x40005800
 8001b60:	46020c00 	.word	0x46020c00
 8001b64:	42020400 	.word	0x42020400

08001b68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b0c4      	sub	sp, #272	@ 0x110
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b76:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b88:	f107 0320 	add.w	r3, r7, #32
 8001b8c:	22d8      	movs	r2, #216	@ 0xd8
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f00c ffa9 	bl	800eae8 <memset>
  if(hspi->Instance==SPI1)
 8001b96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b9a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a75      	ldr	r2, [pc, #468]	@ (8001d78 <HAL_SPI_MspInit+0x210>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d147      	bne.n	8001c38 <HAL_SPI_MspInit+0xd0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001ba8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001bb4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001bb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bbc:	f107 0320 	add.w	r3, r7, #32
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f004 f931 	bl	8005e28 <HAL_RCCEx_PeriphCLKConfig>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8001bcc:	f7ff febc 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8001d7c <HAL_SPI_MspInit+0x214>)
 8001bd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001bd6:	4a69      	ldr	r2, [pc, #420]	@ (8001d7c <HAL_SPI_MspInit+0x214>)
 8001bd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bdc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001be0:	4b66      	ldr	r3, [pc, #408]	@ (8001d7c <HAL_SPI_MspInit+0x214>)
 8001be2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001be6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	4b63      	ldr	r3, [pc, #396]	@ (8001d7c <HAL_SPI_MspInit+0x214>)
 8001bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bf4:	4a61      	ldr	r2, [pc, #388]	@ (8001d7c <HAL_SPI_MspInit+0x214>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bfe:	4b5f      	ldr	r3, [pc, #380]	@ (8001d7c <HAL_SPI_MspInit+0x214>)
 8001c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = WIFI_SCK_Pin|WIFI_MISO_Pin|WIFI_MOSI_Pin;
 8001c0c:	23e0      	movs	r3, #224	@ 0xe0
 8001c0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c24:	2305      	movs	r3, #5
 8001c26:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4853      	ldr	r0, [pc, #332]	@ (8001d80 <HAL_SPI_MspInit+0x218>)
 8001c32:	f002 fa13 	bl	800405c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c36:	e09a      	b.n	8001d6e <HAL_SPI_MspInit+0x206>
  else if(hspi->Instance==SPI2)
 8001c38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a4f      	ldr	r2, [pc, #316]	@ (8001d84 <HAL_SPI_MspInit+0x21c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	f040 8091 	bne.w	8001d6e <HAL_SPI_MspInit+0x206>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001c4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8001c58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c5c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c60:	f107 0320 	add.w	r3, r7, #32
 8001c64:	4618      	mov	r0, r3
 8001c66:	f004 f8df 	bl	8005e28 <HAL_RCCEx_PeriphCLKConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_SPI_MspInit+0x10c>
      Error_Handler();
 8001c70:	f7ff fe6a 	bl	8001948 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c74:	4b41      	ldr	r3, [pc, #260]	@ (8001d7c <HAL_SPI_MspInit+0x214>)
 8001c76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c7a:	4a40      	ldr	r2, [pc, #256]	@ (8001d7c <HAL_SPI_MspInit+0x214>)
 8001c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c80:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001c84:	4b3d      	ldr	r3, [pc, #244]	@ (8001d7c <HAL_SPI_MspInit+0x214>)
 8001c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c92:	4b3a      	ldr	r3, [pc, #232]	@ (8001d7c <HAL_SPI_MspInit+0x214>)
 8001c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c98:	4a38      	ldr	r2, [pc, #224]	@ (8001d7c <HAL_SPI_MspInit+0x214>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ca2:	4b36      	ldr	r3, [pc, #216]	@ (8001d7c <HAL_SPI_MspInit+0x214>)
 8001ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ca8:	f003 0204 	and.w	r2, r3, #4
 8001cac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cb0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cba:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001cbe:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d7c <HAL_SPI_MspInit+0x214>)
 8001cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cc6:	4a2d      	ldr	r2, [pc, #180]	@ (8001d7c <HAL_SPI_MspInit+0x214>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <HAL_SPI_MspInit+0x214>)
 8001cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cd6:	f003 0202 	and.w	r2, r3, #2
 8001cda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ce8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cec:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = DISP_MOSI_Pin;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8001d06:	2303      	movs	r3, #3
 8001d08:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(DISP_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d10:	4619      	mov	r1, r3
 8001d12:	481d      	ldr	r0, [pc, #116]	@ (8001d88 <HAL_SPI_MspInit+0x220>)
 8001d14:	f002 f9a2 	bl	800405c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DISP_MISO_Pin;
 8001d18:	2304      	movs	r3, #4
 8001d1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d30:	2305      	movs	r3, #5
 8001d32:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(DISP_MISO_GPIO_Port, &GPIO_InitStruct);
 8001d36:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4812      	ldr	r0, [pc, #72]	@ (8001d88 <HAL_SPI_MspInit+0x220>)
 8001d3e:	f002 f98d 	bl	800405c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DISP_SCK_Pin;
 8001d42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d46:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d5c:	2305      	movs	r3, #5
 8001d5e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(DISP_SCK_GPIO_Port, &GPIO_InitStruct);
 8001d62:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d66:	4619      	mov	r1, r3
 8001d68:	4808      	ldr	r0, [pc, #32]	@ (8001d8c <HAL_SPI_MspInit+0x224>)
 8001d6a:	f002 f977 	bl	800405c <HAL_GPIO_Init>
}
 8001d6e:	bf00      	nop
 8001d70:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40013000 	.word	0x40013000
 8001d7c:	46020c00 	.word	0x46020c00
 8001d80:	42020000 	.word	0x42020000
 8001d84:	40003800 	.word	0x40003800
 8001d88:	42020800 	.word	0x42020800
 8001d8c:	42020400 	.word	0x42020400

08001d90 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	@ 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1e      	ldr	r2, [pc, #120]	@ (8001e28 <HAL_TIM_IC_MspInit+0x98>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d136      	bne.n	8001e20 <HAL_TIM_IC_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001db2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e2c <HAL_TIM_IC_MspInit+0x9c>)
 8001db4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001db8:	4a1c      	ldr	r2, [pc, #112]	@ (8001e2c <HAL_TIM_IC_MspInit+0x9c>)
 8001dba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dbe:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <HAL_TIM_IC_MspInit+0x9c>)
 8001dc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001dc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dd0:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <HAL_TIM_IC_MspInit+0x9c>)
 8001dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dd6:	4a15      	ldr	r2, [pc, #84]	@ (8001e2c <HAL_TIM_IC_MspInit+0x9c>)
 8001dd8:	f043 0310 	orr.w	r3, r3, #16
 8001ddc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001de0:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <HAL_TIM_IC_MspInit+0x9c>)
 8001de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DIST_ECHO_Pin;
 8001dee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e00:	2301      	movs	r3, #1
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIST_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4809      	ldr	r0, [pc, #36]	@ (8001e30 <HAL_TIM_IC_MspInit+0xa0>)
 8001e0c:	f002 f926 	bl	800405c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	202c      	movs	r0, #44	@ 0x2c
 8001e16:	f001 ff7b 	bl	8003d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001e1a:	202c      	movs	r0, #44	@ 0x2c
 8001e1c:	f001 ff92 	bl	8003d44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e20:	bf00      	nop
 8001e22:	3728      	adds	r7, #40	@ 0x28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40012c00 	.word	0x40012c00
 8001e2c:	46020c00 	.word	0x46020c00
 8001e30:	42021000 	.word	0x42021000

08001e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b0c2      	sub	sp, #264	@ 0x108
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e42:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e54:	f107 0318 	add.w	r3, r7, #24
 8001e58:	22d8      	movs	r2, #216	@ 0xd8
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f00c fe43 	bl	800eae8 <memset>
  if(huart->Instance==UART4)
 8001e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a39      	ldr	r2, [pc, #228]	@ (8001f54 <HAL_UART_MspInit+0x120>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d169      	bne.n	8001f48 <HAL_UART_MspInit+0x114>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e74:	f04f 0208 	mov.w	r2, #8
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e80:	2300      	movs	r3, #0
 8001e82:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e84:	f107 0318 	add.w	r3, r7, #24
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f003 ffcd 	bl	8005e28 <HAL_RCCEx_PeriphCLKConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8001e94:	f7ff fd58 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e98:	4b2f      	ldr	r3, [pc, #188]	@ (8001f58 <HAL_UART_MspInit+0x124>)
 8001e9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e9e:	4a2e      	ldr	r2, [pc, #184]	@ (8001f58 <HAL_UART_MspInit+0x124>)
 8001ea0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ea4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f58 <HAL_UART_MspInit+0x124>)
 8001eaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001eae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	4b28      	ldr	r3, [pc, #160]	@ (8001f58 <HAL_UART_MspInit+0x124>)
 8001eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ebc:	4a26      	ldr	r2, [pc, #152]	@ (8001f58 <HAL_UART_MspInit+0x124>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ec6:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <HAL_UART_MspInit+0x124>)
 8001ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed4:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <HAL_UART_MspInit+0x124>)
 8001ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eda:	4a1f      	ldr	r2, [pc, #124]	@ (8001f58 <HAL_UART_MspInit+0x124>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <HAL_UART_MspInit+0x124>)
 8001ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001f14:	4619      	mov	r1, r3
 8001f16:	4811      	ldr	r0, [pc, #68]	@ (8001f5c <HAL_UART_MspInit+0x128>)
 8001f18:	f002 f8a0 	bl	800405c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f36:	2308      	movs	r3, #8
 8001f38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001f40:	4619      	mov	r1, r3
 8001f42:	4807      	ldr	r0, [pc, #28]	@ (8001f60 <HAL_UART_MspInit+0x12c>)
 8001f44:	f002 f88a 	bl	800405c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001f48:	bf00      	nop
 8001f4a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40004c00 	.word	0x40004c00
 8001f58:	46020c00 	.word	0x46020c00
 8001f5c:	42020000 	.word	0x42020000
 8001f60:	42020800 	.word	0x42020800

08001f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <NMI_Handler+0x4>

08001f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001f70:	2104      	movs	r1, #4
 8001f72:	4802      	ldr	r0, [pc, #8]	@ (8001f7c <HardFault_Handler+0x10>)
 8001f74:	f002 fa62 	bl	800443c <HAL_GPIO_TogglePin>
 8001f78:	e7fa      	b.n	8001f70 <HardFault_Handler+0x4>
 8001f7a:	bf00      	nop
 8001f7c:	42021800 	.word	0x42021800

08001f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <MemManage_Handler+0x4>

08001f88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <BusFault_Handler+0x4>

08001f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <UsageFault_Handler+0x4>

08001f98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc6:	f000 f9a3 	bl	8002310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fd4:	4804      	ldr	r0, [pc, #16]	@ (8001fe8 <TIM1_CC_IRQHandler+0x18>)
 8001fd6:	f007 fd81 	bl	8009adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001fda:	2180      	movs	r1, #128	@ 0x80
 8001fdc:	4803      	ldr	r0, [pc, #12]	@ (8001fec <TIM1_CC_IRQHandler+0x1c>)
 8001fde:	f002 fa2d 	bl	800443c <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000314 	.word	0x20000314
 8001fec:	42020400 	.word	0x42020400

08001ff0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	e00a      	b.n	8002018 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002002:	f3af 8000 	nop.w
 8002006:	4601      	mov	r1, r0
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	60ba      	str	r2, [r7, #8]
 800200e:	b2ca      	uxtb	r2, r1
 8002010:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3301      	adds	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	dbf0      	blt.n	8002002 <_read+0x12>
  }

  return len;
 8002020:	687b      	ldr	r3, [r7, #4]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <_close>:
  }
  return len;
}

int _close(int file)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002052:	605a      	str	r2, [r3, #4]
  return 0;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <_isatty>:

int _isatty(int file)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800206a:	2301      	movs	r3, #1
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800209c:	4a14      	ldr	r2, [pc, #80]	@ (80020f0 <_sbrk+0x5c>)
 800209e:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <_sbrk+0x60>)
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a8:	4b13      	ldr	r3, [pc, #76]	@ (80020f8 <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <_sbrk+0x64>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	@ (80020fc <_sbrk+0x68>)
 80020b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020b6:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <_sbrk+0x64>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d207      	bcs.n	80020d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c4:	f00c fd6e 	bl	800eba4 <__errno>
 80020c8:	4603      	mov	r3, r0
 80020ca:	220c      	movs	r2, #12
 80020cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
 80020d2:	e009      	b.n	80020e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d4:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020da:	4b07      	ldr	r3, [pc, #28]	@ (80020f8 <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a05      	ldr	r2, [pc, #20]	@ (80020f8 <_sbrk+0x64>)
 80020e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20270000 	.word	0x20270000
 80020f4:	00000400 	.word	0x00000400
 80020f8:	2000049c 	.word	0x2000049c
 80020fc:	20000800 	.word	0x20000800

08002100 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002104:	4b18      	ldr	r3, [pc, #96]	@ (8002168 <SystemInit+0x68>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210a:	4a17      	ldr	r2, [pc, #92]	@ (8002168 <SystemInit+0x68>)
 800210c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002114:	4b15      	ldr	r3, [pc, #84]	@ (800216c <SystemInit+0x6c>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800211a:	4b14      	ldr	r3, [pc, #80]	@ (800216c <SystemInit+0x6c>)
 800211c:	2200      	movs	r2, #0
 800211e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <SystemInit+0x6c>)
 8002122:	2200      	movs	r2, #0
 8002124:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002126:	4b11      	ldr	r3, [pc, #68]	@ (800216c <SystemInit+0x6c>)
 8002128:	2200      	movs	r2, #0
 800212a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800212c:	4b0f      	ldr	r3, [pc, #60]	@ (800216c <SystemInit+0x6c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0e      	ldr	r2, [pc, #56]	@ (800216c <SystemInit+0x6c>)
 8002132:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002136:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800213a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <SystemInit+0x6c>)
 800213e:	2200      	movs	r2, #0
 8002140:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002142:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <SystemInit+0x6c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a09      	ldr	r2, [pc, #36]	@ (800216c <SystemInit+0x6c>)
 8002148:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800214c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800214e:	4b07      	ldr	r3, [pc, #28]	@ (800216c <SystemInit+0x6c>)
 8002150:	2200      	movs	r2, #0
 8002152:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002154:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <SystemInit+0x68>)
 8002156:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800215a:	609a      	str	r2, [r3, #8]
  #endif
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000ed00 	.word	0xe000ed00
 800216c:	46020c00 	.word	0x46020c00

08002170 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002170:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021a8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002174:	f7ff ffc4 	bl	8002100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002178:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800217a:	e003      	b.n	8002184 <LoopCopyDataInit>

0800217c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800217c:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800217e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002180:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002182:	3104      	adds	r1, #4

08002184 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002184:	480a      	ldr	r0, [pc, #40]	@ (80021b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002186:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002188:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800218a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800218c:	d3f6      	bcc.n	800217c <CopyDataInit>
	ldr	r2, =_sbss
 800218e:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002190:	e002      	b.n	8002198 <LoopFillZerobss>

08002192 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002192:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002194:	f842 3b04 	str.w	r3, [r2], #4

08002198 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002198:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <LoopForever+0x16>)
	cmp	r2, r3
 800219a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800219c:	d3f9      	bcc.n	8002192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800219e:	f00c fd07 	bl	800ebb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021a2:	f7fe ff17 	bl	8000fd4 <main>

080021a6 <LoopForever>:

LoopForever:
    b LoopForever
 80021a6:	e7fe      	b.n	80021a6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80021a8:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 80021ac:	080109fc 	.word	0x080109fc
	ldr	r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80021b4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80021b8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80021bc:	200007fe 	.word	0x200007fe

080021c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <ADC1_2_IRQHandler>
	...

080021c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c8:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <HAL_Init+0x50>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a11      	ldr	r2, [pc, #68]	@ (8002214 <HAL_Init+0x50>)
 80021ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f001 fd90 	bl	8003cfa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80021da:	f003 fc47 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 80021de:	4602      	mov	r2, r0
 80021e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <HAL_Init+0x54>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	490c      	ldr	r1, [pc, #48]	@ (800221c <HAL_Init+0x58>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
 80021f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002220 <HAL_Init+0x5c>)
 80021f2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80021f4:	2004      	movs	r0, #4
 80021f6:	f001 fde3 	bl	8003dc0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021fa:	200f      	movs	r0, #15
 80021fc:	f000 f812 	bl	8002224 <HAL_InitTick>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e002      	b.n	8002210 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800220a:	f7ff fba3 	bl	8001954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40022000 	.word	0x40022000
 8002218:	46020c00 	.word	0x46020c00
 800221c:	08010630 	.word	0x08010630
 8002220:	20000000 	.word	0x20000000

08002224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002230:	4b33      	ldr	r3, [pc, #204]	@ (8002300 <HAL_InitTick+0xdc>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e05c      	b.n	80022f6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800223c:	4b31      	ldr	r3, [pc, #196]	@ (8002304 <HAL_InitTick+0xe0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b04      	cmp	r3, #4
 8002246:	d10c      	bne.n	8002262 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002248:	4b2f      	ldr	r3, [pc, #188]	@ (8002308 <HAL_InitTick+0xe4>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b2c      	ldr	r3, [pc, #176]	@ (8002300 <HAL_InitTick+0xdc>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4619      	mov	r1, r3
 8002252:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002256:	fbb3 f3f1 	udiv	r3, r3, r1
 800225a:	fbb2 f3f3 	udiv	r3, r2, r3
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e037      	b.n	80022d2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002262:	f001 fe05 	bl	8003e70 <HAL_SYSTICK_GetCLKSourceConfig>
 8002266:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d023      	beq.n	80022b6 <HAL_InitTick+0x92>
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d82d      	bhi.n	80022d0 <HAL_InitTick+0xac>
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_InitTick+0x5e>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d00d      	beq.n	800229c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002280:	e026      	b.n	80022d0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002282:	4b21      	ldr	r3, [pc, #132]	@ (8002308 <HAL_InitTick+0xe4>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4b1e      	ldr	r3, [pc, #120]	@ (8002300 <HAL_InitTick+0xdc>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	4619      	mov	r1, r3
 800228c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002290:	fbb3 f3f1 	udiv	r3, r3, r1
 8002294:	fbb2 f3f3 	udiv	r3, r2, r3
 8002298:	60fb      	str	r3, [r7, #12]
        break;
 800229a:	e01a      	b.n	80022d2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800229c:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <HAL_InitTick+0xdc>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80022aa:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	60fb      	str	r3, [r7, #12]
        break;
 80022b4:	e00d      	b.n	80022d2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80022b6:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <HAL_InitTick+0xdc>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80022c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80022c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022cc:	60fb      	str	r3, [r7, #12]
        break;
 80022ce:	e000      	b.n	80022d2 <HAL_InitTick+0xae>
        break;
 80022d0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f001 fd52 	bl	8003d7c <HAL_SYSTICK_Config>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e009      	b.n	80022f6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e2:	2200      	movs	r2, #0
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	f04f 30ff 	mov.w	r0, #4294967295
 80022ea:	f001 fd11 	bl	8003d10 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80022ee:	4a07      	ldr	r2, [pc, #28]	@ (800230c <HAL_InitTick+0xe8>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000008 	.word	0x20000008
 8002304:	e000e010 	.word	0xe000e010
 8002308:	20000000 	.word	0x20000000
 800230c:	20000004 	.word	0x20000004

08002310 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_IncTick+0x20>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <HAL_IncTick+0x24>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4413      	add	r3, r2
 8002320:	4a04      	ldr	r2, [pc, #16]	@ (8002334 <HAL_IncTick+0x24>)
 8002322:	6013      	str	r3, [r2, #0]
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000008 	.word	0x20000008
 8002334:	200004a0 	.word	0x200004a0

08002338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return uwTick;
 800233c:	4b03      	ldr	r3, [pc, #12]	@ (800234c <HAL_GetTick+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	200004a0 	.word	0x200004a0

08002350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff ffee 	bl	8002338 <HAL_GetTick>
 800235c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d005      	beq.n	8002376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800236a:	4b0a      	ldr	r3, [pc, #40]	@ (8002394 <HAL_Delay+0x44>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002376:	bf00      	nop
 8002378:	f7ff ffde 	bl	8002338 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	429a      	cmp	r2, r3
 8002386:	d8f7      	bhi.n	8002378 <HAL_Delay+0x28>
  {
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000008 	.word	0x20000008

08002398 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	609a      	str	r2, [r3, #8]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	609a      	str	r2, [r3, #8]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <LL_ADC_SetResolution+0x3c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d104      	bne.n	8002420 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3b01      	subs	r3, #1
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f023 020c 	bic.w	r2, r3, #12
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	60da      	str	r2, [r3, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	46021000 	.word	0x46021000

08002440 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3360      	adds	r3, #96	@ 0x60
 8002452:	461a      	mov	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	430b      	orrs	r3, r1
 8002470:	431a      	orrs	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002476:	bf00      	nop
 8002478:	371c      	adds	r7, #28
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002482:	b480      	push	{r7}
 8002484:	b085      	sub	sp, #20
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3360      	adds	r3, #96	@ 0x60
 8002490:	461a      	mov	r2, r3
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b087      	sub	sp, #28
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3360      	adds	r3, #96	@ 0x60
 80024be:	461a      	mov	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	601a      	str	r2, [r3, #0]
}
 80024d8:	bf00      	nop
 80024da:	371c      	adds	r7, #28
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	3360      	adds	r3, #96	@ 0x60
 80024f4:	461a      	mov	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	431a      	orrs	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	601a      	str	r2, [r3, #0]
}
 800250e:	bf00      	nop
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800251a:	b480      	push	{r7}
 800251c:	b087      	sub	sp, #28
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	3360      	adds	r3, #96	@ 0x60
 800252a:	461a      	mov	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	431a      	orrs	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	601a      	str	r2, [r3, #0]
}
 8002544:	bf00      	nop
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002562:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002572:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	2a00      	cmp	r2, #0
 800257a:	d002      	beq.n	8002582 <LL_ADC_SetGainCompensation+0x32>
 800257c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002580:	e000      	b.n	8002584 <LL_ADC_SetGainCompensation+0x34>
 8002582:	2200      	movs	r2, #0
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	671a      	str	r2, [r3, #112]	@ 0x70
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002596:	b480      	push	{r7}
 8002598:	b085      	sub	sp, #20
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2107      	movs	r1, #7
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	401a      	ands	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	431a      	orrs	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	@ 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002690 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d020      	beq.n	800262a <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3330      	adds	r3, #48	@ 0x30
 80025ec:	461a      	mov	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	4413      	add	r3, r2
 80025fa:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	211f      	movs	r1, #31
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	401a      	ands	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	0e9b      	lsrs	r3, r3, #26
 8002614:	f003 011f 	and.w	r1, r3, #31
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	431a      	orrs	r2, r3
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002628:	e02b      	b.n	8002682 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	210f      	movs	r1, #15
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	401a      	ands	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d104      	bne.n	8002652 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	0e9b      	lsrs	r3, r3, #26
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	e010      	b.n	8002674 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	613b      	str	r3, [r7, #16]
  return result;
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002668:	2320      	movs	r3, #32
 800266a:	e003      	b.n	8002674 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	f001 011f 	and.w	r1, r1, #31
 800267a:	408b      	lsls	r3, r1
 800267c:	431a      	orrs	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002682:	bf00      	nop
 8002684:	3724      	adds	r7, #36	@ 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	46021000 	.word	0x46021000

08002694 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d107      	bne.n	80026b8 <LL_ADC_REG_SetSequencerChAdd+0x24>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	0e9b      	lsrs	r3, r3, #26
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	2201      	movs	r2, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	e015      	b.n	80026e4 <LL_ADC_REG_SetSequencerChAdd+0x50>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	60fb      	str	r3, [r7, #12]
  return result;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 80026ce:	2320      	movs	r3, #32
 80026d0:	e003      	b.n	80026da <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	fab3 f383 	clz	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f003 031f 	and.w	r3, r3, #31
 80026de:	2201      	movs	r2, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026ee:	bf00      	nop
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	0e9b      	lsrs	r3, r3, #26
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	2101      	movs	r1, #1
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	401a      	ands	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800272c:	b480      	push	{r7}
 800272e:	b08b      	sub	sp, #44	@ 0x2c
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a2d      	ldr	r2, [pc, #180]	@ (80027f0 <LL_ADC_SetChannelSamplingTime+0xc4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d042      	beq.n	80027c6 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d104      	bne.n	8002754 <LL_ADC_SetChannelSamplingTime+0x28>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	0e9b      	lsrs	r3, r3, #26
 800274e:	f003 021f 	and.w	r2, r3, #31
 8002752:	e011      	b.n	8002778 <LL_ADC_SetChannelSamplingTime+0x4c>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	617b      	str	r3, [r7, #20]
  return result;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 800276a:	2320      	movs	r3, #32
 800276c:	e003      	b.n	8002776 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	0e5b      	lsrs	r3, r3, #25
 800277c:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002780:	460b      	mov	r3, r1
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	1ad2      	subs	r2, r2, r3
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3314      	adds	r3, #20
 8002796:	461a      	mov	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	0e5b      	lsrs	r3, r3, #25
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	4413      	add	r3, r2
 80027a4:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	2107      	movs	r1, #7
 80027ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	401a      	ands	r2, r3
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	431a      	orrs	r2, r3
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 80027c4:	e00e      	b.n	80027e4 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	43db      	mvns	r3, r3
 80027d0:	401a      	ands	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	0219      	lsls	r1, r3, #8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	400b      	ands	r3, r1
 80027da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027de:	431a      	orrs	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	615a      	str	r2, [r3, #20]
}
 80027e4:	bf00      	nop
 80027e6:	372c      	adds	r7, #44	@ 0x2c
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	46021000 	.word	0x46021000

080027f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800280c:	43db      	mvns	r3, r3
 800280e:	401a      	ands	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f003 0318 	and.w	r3, r3, #24
 8002816:	4908      	ldr	r1, [pc, #32]	@ (8002838 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002818:	40d9      	lsrs	r1, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	400b      	ands	r3, r1
 800281e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002822:	431a      	orrs	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	000fffff 	.word	0x000fffff

0800283c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800284c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6093      	str	r3, [r2, #8]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002874:	d101      	bne.n	800287a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002898:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800289c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	609a      	str	r2, [r3, #8]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028c4:	d101      	bne.n	80028ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <LL_ADC_IsEnabled+0x18>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <LL_ADC_IsEnabled+0x1a>
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b04      	cmp	r3, #4
 8002910:	d101      	bne.n	8002916 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b08      	cmp	r3, #8
 8002936:	d101      	bne.n	800293c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b08b      	sub	sp, #44	@ 0x2c
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e2ce      	b.n	8002f0a <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a95      	ldr	r2, [pc, #596]	@ (8002bd0 <HAL_ADC_Init+0x284>)
 800297a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002980:	2b00      	cmp	r3, #0
 8002982:	d109      	bne.n	8002998 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7fe ffff 	bl	8001988 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff5f 	bl	8002860 <LL_ADC_IsDeepPowerDownEnabled>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d004      	beq.n	80029b2 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff45 	bl	800283c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ff7a 	bl	80028b0 <LL_ADC_IsInternalRegulatorEnabled>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d115      	bne.n	80029ee <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ff5e 	bl	8002888 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029cc:	4b81      	ldr	r3, [pc, #516]	@ (8002bd4 <HAL_ADC_Init+0x288>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	4a81      	ldr	r2, [pc, #516]	@ (8002bd8 <HAL_ADC_Init+0x28c>)
 80029d4:	fba2 2303 	umull	r2, r3, r2, r3
 80029d8:	099b      	lsrs	r3, r3, #6
 80029da:	3301      	adds	r3, #1
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029e0:	e002      	b.n	80029e8 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3b01      	subs	r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f9      	bne.n	80029e2 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ff5c 	bl	80028b0 <LL_ADC_IsInternalRegulatorEnabled>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10e      	bne.n	8002a1c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a02:	f043 0210 	orr.w	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff6c 	bl	80028fe <LL_ADC_REG_IsConversionOngoing>
 8002a26:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f040 825f 	bne.w	8002ef4 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f040 825b 	bne.w	8002ef4 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a42:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a46:	f043 0202 	orr.w	r2, r3, #2
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff ff40 	bl	80028d8 <LL_ADC_IsEnabled>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d14f      	bne.n	8002afe <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a5b      	ldr	r2, [pc, #364]	@ (8002bd0 <HAL_ADC_Init+0x284>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d037      	beq.n	8002ad8 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a5b      	ldr	r2, [pc, #364]	@ (8002bdc <HAL_ADC_Init+0x290>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d004      	beq.n	8002a7c <HAL_ADC_Init+0x130>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a5a      	ldr	r2, [pc, #360]	@ (8002be0 <HAL_ADC_Init+0x294>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d10e      	bne.n	8002a9a <HAL_ADC_Init+0x14e>
 8002a7c:	4857      	ldr	r0, [pc, #348]	@ (8002bdc <HAL_ADC_Init+0x290>)
 8002a7e:	f7ff ff2b 	bl	80028d8 <LL_ADC_IsEnabled>
 8002a82:	4604      	mov	r4, r0
 8002a84:	4856      	ldr	r0, [pc, #344]	@ (8002be0 <HAL_ADC_Init+0x294>)
 8002a86:	f7ff ff27 	bl	80028d8 <LL_ADC_IsEnabled>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4323      	orrs	r3, r4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bf0c      	ite	eq
 8002a92:	2301      	moveq	r3, #1
 8002a94:	2300      	movne	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	e008      	b.n	8002aac <HAL_ADC_Init+0x160>
 8002a9a:	484d      	ldr	r0, [pc, #308]	@ (8002bd0 <HAL_ADC_Init+0x284>)
 8002a9c:	f7ff ff1c 	bl	80028d8 <LL_ADC_IsEnabled>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	bf0c      	ite	eq
 8002aa6:	2301      	moveq	r3, #1
 8002aa8:	2300      	movne	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d026      	beq.n	8002afe <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a49      	ldr	r2, [pc, #292]	@ (8002bdc <HAL_ADC_Init+0x290>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d004      	beq.n	8002ac4 <HAL_ADC_Init+0x178>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a48      	ldr	r2, [pc, #288]	@ (8002be0 <HAL_ADC_Init+0x294>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d101      	bne.n	8002ac8 <HAL_ADC_Init+0x17c>
 8002ac4:	4a47      	ldr	r2, [pc, #284]	@ (8002be4 <HAL_ADC_Init+0x298>)
 8002ac6:	e000      	b.n	8002aca <HAL_ADC_Init+0x17e>
 8002ac8:	4a47      	ldr	r2, [pc, #284]	@ (8002be8 <HAL_ADC_Init+0x29c>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	f7ff fc61 	bl	8002398 <LL_ADC_SetCommonClock>
 8002ad6:	e012      	b.n	8002afe <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f7ff fc8c 	bl	8002400 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8002ae8:	4b3f      	ldr	r3, [pc, #252]	@ (8002be8 <HAL_ADC_Init+0x29c>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002af8:	493b      	ldr	r1, [pc, #236]	@ (8002be8 <HAL_ADC_Init+0x29c>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a33      	ldr	r2, [pc, #204]	@ (8002bd0 <HAL_ADC_Init+0x284>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d010      	beq.n	8002b2a <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b0e:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002b14:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002b1a:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002b22:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002b24:	4313      	orrs	r3, r2
 8002b26:	623b      	str	r3, [r7, #32]
 8002b28:	e035      	b.n	8002b96 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	7f1b      	ldrb	r3, [r3, #28]
 8002b2e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b36:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b38:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b3e:	2a00      	cmp	r2, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_ADC_Init+0x1fc>
 8002b42:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b46:	e000      	b.n	8002b4a <HAL_ADC_Init+0x1fe>
 8002b48:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b4a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002b50:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	da04      	bge.n	8002b64 <HAL_ADC_Init+0x218>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b62:	e001      	b.n	8002b68 <HAL_ADC_Init+0x21c>
 8002b64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8002b68:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	491b      	ldr	r1, [pc, #108]	@ (8002bdc <HAL_ADC_Init+0x290>)
 8002b70:	428b      	cmp	r3, r1
 8002b72:	d004      	beq.n	8002b7e <HAL_ADC_Init+0x232>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4919      	ldr	r1, [pc, #100]	@ (8002be0 <HAL_ADC_Init+0x294>)
 8002b7a:	428b      	cmp	r3, r1
 8002b7c:	d103      	bne.n	8002b86 <HAL_ADC_Init+0x23a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b84:	e003      	b.n	8002b8e <HAL_ADC_Init+0x242>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b8c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002b8e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b90:	6a3a      	ldr	r2, [r7, #32]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d131      	bne.n	8002c04 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <HAL_ADC_Init+0x284>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d007      	beq.n	8002bba <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	045b      	lsls	r3, r3, #17
 8002bb2:	6a3a      	ldr	r2, [r7, #32]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	623b      	str	r3, [r7, #32]
 8002bb8:	e024      	b.n	8002c04 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d113      	bne.n	8002bec <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bca:	623b      	str	r3, [r7, #32]
 8002bcc:	e01a      	b.n	8002c04 <HAL_ADC_Init+0x2b8>
 8002bce:	bf00      	nop
 8002bd0:	46021000 	.word	0x46021000
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	053e2d63 	.word	0x053e2d63
 8002bdc:	42028000 	.word	0x42028000
 8002be0:	42028100 	.word	0x42028100
 8002be4:	42028300 	.word	0x42028300
 8002be8:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bfc:	f043 0201 	orr.w	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a75      	ldr	r2, [pc, #468]	@ (8002de0 <HAL_ADC_Init+0x494>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d018      	beq.n	8002c40 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c22:	4313      	orrs	r3, r2
 8002c24:	6a3a      	ldr	r2, [r7, #32]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	4b6c      	ldr	r3, [pc, #432]	@ (8002de4 <HAL_ADC_Init+0x498>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	6a39      	ldr	r1, [r7, #32]
 8002c3a:	430b      	orrs	r3, r1
 8002c3c:	60d3      	str	r3, [r2, #12]
 8002c3e:	e031      	b.n	8002ca4 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d009      	beq.n	8002c5c <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c4c:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c54:	4313      	orrs	r3, r2
 8002c56:	6a3a      	ldr	r2, [r7, #32]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	4b61      	ldr	r3, [pc, #388]	@ (8002de8 <HAL_ADC_Init+0x49c>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	6a39      	ldr	r1, [r7, #32]
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1a      	ldr	r2, [r3, #32]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a4d      	ldr	r2, [pc, #308]	@ (8002de0 <HAL_ADC_Init+0x494>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	f000 80a4 	beq.w	8002df8 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fe22 	bl	80028fe <LL_ADC_REG_IsConversionOngoing>
 8002cba:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fe2f 	bl	8002924 <LL_ADC_INJ_IsConversionOngoing>
 8002cc6:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d166      	bne.n	8002d9c <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d163      	bne.n	8002d9c <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7f1b      	ldrb	r3, [r3, #28]
 8002cd8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4943      	ldr	r1, [pc, #268]	@ (8002dec <HAL_ADC_Init+0x4a0>)
 8002ce0:	428b      	cmp	r3, r1
 8002ce2:	d004      	beq.n	8002cee <HAL_ADC_Init+0x3a2>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4941      	ldr	r1, [pc, #260]	@ (8002df0 <HAL_ADC_Init+0x4a4>)
 8002cea:	428b      	cmp	r3, r1
 8002cec:	d102      	bne.n	8002cf4 <HAL_ADC_Init+0x3a8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf2:	e002      	b.n	8002cfa <HAL_ADC_Init+0x3ae>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf8:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d08:	f023 0303 	bic.w	r3, r3, #3
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	6a39      	ldr	r1, [r7, #32]
 8002d12:	430b      	orrs	r3, r1
 8002d14:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	4619      	mov	r1, r3
 8002d28:	4610      	mov	r0, r2
 8002d2a:	f7ff fc11 	bl	8002550 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d11e      	bne.n	8002d76 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3c:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	4b2b      	ldr	r3, [pc, #172]	@ (8002df4 <HAL_ADC_Init+0x4a8>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002d4c:	0411      	lsls	r1, r2, #16
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d52:	4311      	orrs	r1, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8002d58:	4311      	orrs	r1, r2
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002d5e:	4311      	orrs	r1, r2
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d64:	0892      	lsrs	r2, r2, #2
 8002d66:	430a      	orrs	r2, r1
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	611a      	str	r2, [r3, #16]
 8002d74:	e007      	b.n	8002d86 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0201 	bic.w	r2, r2, #1
 8002d84:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d10c      	bne.n	8002dbe <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	f023 010f 	bic.w	r1, r3, #15
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db2:	1e5a      	subs	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dbc:	e007      	b.n	8002dce <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 020f 	bic.w	r2, r2, #15
 8002dcc:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dd2:	f023 0303 	bic.w	r3, r3, #3
 8002dd6:	f043 0201 	orr.w	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002dde:	e092      	b.n	8002f06 <HAL_ADC_Init+0x5ba>
 8002de0:	46021000 	.word	0x46021000
 8002de4:	fff0c013 	.word	0xfff0c013
 8002de8:	ffde800d 	.word	0xffde800d
 8002dec:	42028000 	.word	0x42028000
 8002df0:	42028100 	.word	0x42028100
 8002df4:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d111      	bne.n	8002e26 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002e0a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002e10:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002e16:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	4b39      	ldr	r3, [pc, #228]	@ (8002f14 <HAL_ADC_Init+0x5c8>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	69f9      	ldr	r1, [r7, #28]
 8002e36:	430b      	orrs	r3, r1
 8002e38:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e42:	461a      	mov	r2, r3
 8002e44:	2100      	movs	r1, #0
 8002e46:	f7ff fba6 	bl	8002596 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e52:	461a      	mov	r2, r3
 8002e54:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8002e58:	f7ff fb9d 	bl	8002596 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d108      	bne.n	8002e76 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f062 020f 	orn	r2, r2, #15
 8002e72:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e74:	e018      	b.n	8002ea8 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e7e:	d113      	bne.n	8002ea8 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	f003 031c 	and.w	r3, r3, #28
 8002e92:	f06f 020f 	mvn.w	r2, #15
 8002e96:	fa02 f103 	lsl.w	r1, r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	4b1a      	ldr	r3, [pc, #104]	@ (8002f18 <HAL_ADC_Init+0x5cc>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	6a3a      	ldr	r2, [r7, #32]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ec2:	f023 0303 	bic.w	r3, r3, #3
 8002ec6:	f043 0201 	orr.w	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002ece:	e01a      	b.n	8002f06 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ed4:	f023 0312 	bic.w	r3, r3, #18
 8002ed8:	f043 0210 	orr.w	r2, r3, #16
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ee4:	f043 0201 	orr.w	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002ef2:	e008      	b.n	8002f06 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ef8:	f043 0210 	orr.w	r2, r3, #16
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002f06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	372c      	adds	r7, #44	@ 0x2c
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd90      	pop	{r4, r7, pc}
 8002f12:	bf00      	nop
 8002f14:	f7fffc02 	.word	0xf7fffc02
 8002f18:	833ffff3 	.word	0x833ffff3

08002f1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b0b7      	sub	sp, #220	@ 0xdc
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4aa8      	ldr	r2, [pc, #672]	@ (80031d8 <HAL_ADC_ConfigChannel+0x2bc>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d103      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d102      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x36>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	f000 bdfe 	b.w	8003b4e <HAL_ADC_ConfigChannel+0xc32>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fccd 	bl	80028fe <LL_ADC_REG_IsConversionOngoing>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f040 85c1 	bne.w	8003aee <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a99      	ldr	r2, [pc, #612]	@ (80031d8 <HAL_ADC_ConfigChannel+0x2bc>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	f000 8409 	beq.w	800378a <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d108      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x7a>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	0e9b      	lsrs	r3, r3, #26
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2201      	movs	r2, #1
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	e01d      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0xb6>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002faa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002fae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002fb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002fba:	2320      	movs	r3, #32
 8002fbc:	e004      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8002fbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	2201      	movs	r2, #1
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	69d1      	ldr	r1, [r2, #28]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	6859      	ldr	r1, [r3, #4]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	f7ff faf1 	bl	80025d4 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fc81 	bl	80028fe <LL_ADC_REG_IsConversionOngoing>
 8002ffc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fc8d 	bl	8002924 <LL_ADC_INJ_IsConversionOngoing>
 800300a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800300e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 81df 	bne.w	80033d6 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003018:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800301c:	2b00      	cmp	r3, #0
 800301e:	f040 81da 	bne.w	80033d6 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6819      	ldr	r1, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	461a      	mov	r2, r3
 8003030:	f7ff fb7c 	bl	800272c <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	089b      	lsrs	r3, r3, #2
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b04      	cmp	r3, #4
 8003054:	d046      	beq.n	80030e4 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6919      	ldr	r1, [r3, #16]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003066:	f7ff f9eb 	bl	8002440 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6919      	ldr	r1, [r3, #16]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	461a      	mov	r2, r3
 8003078:	f7ff fa19 	bl	80024ae <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	7e9b      	ldrb	r3, [r3, #26]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d11e      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003090:	2b00      	cmp	r3, #0
 8003092:	d102      	bne.n	800309a <HAL_ADC_ConfigChannel+0x17e>
 8003094:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003098:	e000      	b.n	800309c <HAL_ADC_ConfigChannel+0x180>
 800309a:	2300      	movs	r3, #0
 800309c:	461a      	mov	r2, r3
 800309e:	f7ff fa3c 	bl	800251a <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d102      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x19c>
 80030b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80030b6:	e000      	b.n	80030ba <HAL_ADC_ConfigChannel+0x19e>
 80030b8:	2300      	movs	r3, #0
 80030ba:	461a      	mov	r2, r3
 80030bc:	f7ff fa12 	bl	80024e4 <LL_ADC_SetOffsetSignedSaturation>
 80030c0:	e189      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2200      	movs	r2, #0
 80030cc:	4619      	mov	r1, r3
 80030ce:	f7ff fa24 	bl	800251a <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2200      	movs	r2, #0
 80030dc:	4619      	mov	r1, r3
 80030de:	f7ff fa01 	bl	80024e4 <LL_ADC_SetOffsetSignedSaturation>
 80030e2:	e178      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2100      	movs	r1, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff f9c9 	bl	8002482 <LL_ADC_GetOffsetChannel>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10a      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x1f4>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2100      	movs	r1, #0
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff f9be 	bl	8002482 <LL_ADC_GetOffsetChannel>
 8003106:	4603      	mov	r3, r0
 8003108:	0e9b      	lsrs	r3, r3, #26
 800310a:	f003 021f 	and.w	r2, r3, #31
 800310e:	e01e      	b.n	800314e <HAL_ADC_ConfigChannel+0x232>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff f9b3 	bl	8002482 <LL_ADC_GetOffsetChannel>
 800311c:	4603      	mov	r3, r0
 800311e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003126:	fa93 f3a3 	rbit	r3, r3
 800312a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800312e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003132:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003136:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 800313e:	2320      	movs	r3, #32
 8003140:	e004      	b.n	800314c <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8003142:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003146:	fab3 f383 	clz	r3, r3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d105      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x24a>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	0e9b      	lsrs	r3, r3, #26
 8003160:	f003 031f 	and.w	r3, r3, #31
 8003164:	e018      	b.n	8003198 <HAL_ADC_ConfigChannel+0x27c>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800317a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800317e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003182:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 800318a:	2320      	movs	r3, #32
 800318c:	e004      	b.n	8003198 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 800318e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003198:	429a      	cmp	r2, r3
 800319a:	d107      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	2300      	movs	r3, #0
 80031a6:	2100      	movs	r1, #0
 80031a8:	f7ff f94a 	bl	8002440 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2101      	movs	r1, #1
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff f965 	bl	8002482 <LL_ADC_GetOffsetChannel>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10c      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x2c0>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2101      	movs	r1, #1
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff f95a 	bl	8002482 <LL_ADC_GetOffsetChannel>
 80031ce:	4603      	mov	r3, r0
 80031d0:	0e9b      	lsrs	r3, r3, #26
 80031d2:	f003 021f 	and.w	r2, r3, #31
 80031d6:	e020      	b.n	800321a <HAL_ADC_ConfigChannel+0x2fe>
 80031d8:	46021000 	.word	0x46021000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2101      	movs	r1, #1
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff f94d 	bl	8002482 <LL_ADC_GetOffsetChannel>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031f2:	fa93 f3a3 	rbit	r3, r3
 80031f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80031fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003202:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800320a:	2320      	movs	r3, #32
 800320c:	e004      	b.n	8003218 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 800320e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003212:	fab3 f383 	clz	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d105      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x316>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	0e9b      	lsrs	r3, r3, #26
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	e018      	b.n	8003264 <HAL_ADC_ConfigChannel+0x348>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003246:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800324a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800324e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8003256:	2320      	movs	r3, #32
 8003258:	e004      	b.n	8003264 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 800325a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003264:	429a      	cmp	r2, r3
 8003266:	d107      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2300      	movs	r3, #0
 8003272:	2101      	movs	r1, #1
 8003274:	f7ff f8e4 	bl	8002440 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2102      	movs	r1, #2
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff f8ff 	bl	8002482 <LL_ADC_GetOffsetChannel>
 8003284:	4603      	mov	r3, r0
 8003286:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x388>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2102      	movs	r1, #2
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff f8f4 	bl	8002482 <LL_ADC_GetOffsetChannel>
 800329a:	4603      	mov	r3, r0
 800329c:	0e9b      	lsrs	r3, r3, #26
 800329e:	f003 021f 	and.w	r2, r3, #31
 80032a2:	e01a      	b.n	80032da <HAL_ADC_ConfigChannel+0x3be>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2102      	movs	r1, #2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff f8e9 	bl	8002482 <LL_ADC_GetOffsetChannel>
 80032b0:	4603      	mov	r3, r0
 80032b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80032bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80032c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80032ca:	2320      	movs	r3, #32
 80032cc:	e004      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80032ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d105      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x3d6>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	0e9b      	lsrs	r3, r3, #26
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	e011      	b.n	8003316 <HAL_ADC_ConfigChannel+0x3fa>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003300:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003302:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003304:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800330a:	2320      	movs	r3, #32
 800330c:	e003      	b.n	8003316 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800330e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003316:	429a      	cmp	r2, r3
 8003318:	d107      	bne.n	800332a <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	2300      	movs	r3, #0
 8003324:	2102      	movs	r1, #2
 8003326:	f7ff f88b 	bl	8002440 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2103      	movs	r1, #3
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff f8a6 	bl	8002482 <LL_ADC_GetOffsetChannel>
 8003336:	4603      	mov	r3, r0
 8003338:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x43a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2103      	movs	r1, #3
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff f89b 	bl	8002482 <LL_ADC_GetOffsetChannel>
 800334c:	4603      	mov	r3, r0
 800334e:	0e9b      	lsrs	r3, r3, #26
 8003350:	f003 021f 	and.w	r2, r3, #31
 8003354:	e017      	b.n	8003386 <HAL_ADC_ConfigChannel+0x46a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2103      	movs	r1, #3
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff f890 	bl	8002482 <LL_ADC_GetOffsetChannel>
 8003362:	4603      	mov	r3, r0
 8003364:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800336e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003370:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003372:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8003378:	2320      	movs	r3, #32
 800337a:	e003      	b.n	8003384 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 800337c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d105      	bne.n	800339e <HAL_ADC_ConfigChannel+0x482>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	0e9b      	lsrs	r3, r3, #26
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	e011      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x4a6>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033a6:	fa93 f3a3 	rbit	r3, r3
 80033aa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80033ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80033b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 80033b6:	2320      	movs	r3, #32
 80033b8:	e003      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 80033ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033bc:	fab3 f383 	clz	r3, r3
 80033c0:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d107      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	2300      	movs	r3, #0
 80033d0:	2103      	movs	r1, #3
 80033d2:	f7ff f835 	bl	8002440 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fa7c 	bl	80028d8 <LL_ADC_IsEnabled>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f040 83ad 	bne.w	8003b42 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6819      	ldr	r1, [r3, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	461a      	mov	r2, r3
 80033f6:	f7ff f9fd 	bl	80027f4 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003402:	f040 80d6 	bne.w	80035b2 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10b      	bne.n	800342a <HAL_ADC_ConfigChannel+0x50e>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	0e9b      	lsrs	r3, r3, #26
 8003418:	3301      	adds	r3, #1
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	2b09      	cmp	r3, #9
 8003420:	bf94      	ite	ls
 8003422:	2301      	movls	r3, #1
 8003424:	2300      	movhi	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	e019      	b.n	800345e <HAL_ADC_ConfigChannel+0x542>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003438:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800343a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800343c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003442:	2320      	movs	r3, #32
 8003444:	e003      	b.n	800344e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003448:	fab3 f383 	clz	r3, r3
 800344c:	b2db      	uxtb	r3, r3
 800344e:	3301      	adds	r3, #1
 8003450:	f003 031f 	and.w	r3, r3, #31
 8003454:	2b09      	cmp	r3, #9
 8003456:	bf94      	ite	ls
 8003458:	2301      	movls	r3, #1
 800345a:	2300      	movhi	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d04d      	beq.n	80034fe <HAL_ADC_ConfigChannel+0x5e2>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d107      	bne.n	800347e <HAL_ADC_ConfigChannel+0x562>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	0e9b      	lsrs	r3, r3, #26
 8003474:	3301      	adds	r3, #1
 8003476:	069b      	lsls	r3, r3, #26
 8003478:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800347c:	e015      	b.n	80034aa <HAL_ADC_ConfigChannel+0x58e>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800348c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800348e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003496:	2320      	movs	r3, #32
 8003498:	e003      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800349a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	3301      	adds	r3, #1
 80034a4:	069b      	lsls	r3, r3, #26
 80034a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x5ae>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	0e9b      	lsrs	r3, r3, #26
 80034bc:	3301      	adds	r3, #1
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	2101      	movs	r1, #1
 80034c4:	fa01 f303 	lsl.w	r3, r1, r3
 80034c8:	e017      	b.n	80034fa <HAL_ADC_ConfigChannel+0x5de>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80034d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034da:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80034dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 80034e2:	2320      	movs	r3, #32
 80034e4:	e003      	b.n	80034ee <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 80034e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e8:	fab3 f383 	clz	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	3301      	adds	r3, #1
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	2101      	movs	r1, #1
 80034f6:	fa01 f303 	lsl.w	r3, r1, r3
 80034fa:	4313      	orrs	r3, r2
 80034fc:	e04e      	b.n	800359c <HAL_ADC_ConfigChannel+0x680>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d107      	bne.n	800351a <HAL_ADC_ConfigChannel+0x5fe>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	0e9b      	lsrs	r3, r3, #26
 8003510:	3301      	adds	r3, #1
 8003512:	069b      	lsls	r3, r3, #26
 8003514:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003518:	e015      	b.n	8003546 <HAL_ADC_ConfigChannel+0x62a>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800352c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8003532:	2320      	movs	r3, #32
 8003534:	e003      	b.n	800353e <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8003536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	3301      	adds	r3, #1
 8003540:	069b      	lsls	r3, r3, #26
 8003542:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x64a>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	0e9b      	lsrs	r3, r3, #26
 8003558:	3301      	adds	r3, #1
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	2101      	movs	r1, #1
 8003560:	fa01 f303 	lsl.w	r3, r1, r3
 8003564:	e017      	b.n	8003596 <HAL_ADC_ConfigChannel+0x67a>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	fa93 f3a3 	rbit	r3, r3
 8003572:	61bb      	str	r3, [r7, #24]
  return result;
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 800357e:	2320      	movs	r3, #32
 8003580:	e003      	b.n	800358a <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	fab3 f383 	clz	r3, r3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	3301      	adds	r3, #1
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	2101      	movs	r1, #1
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	4313      	orrs	r3, r2
 8003598:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800359c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	461a      	mov	r2, r3
 80035aa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80035ae:	f7ff f8bd 	bl	800272c <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f280 82c3 	bge.w	8003b42 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a92      	ldr	r2, [pc, #584]	@ (800380c <HAL_ADC_ConfigChannel+0x8f0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d004      	beq.n	80035d0 <HAL_ADC_ConfigChannel+0x6b4>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a91      	ldr	r2, [pc, #580]	@ (8003810 <HAL_ADC_ConfigChannel+0x8f4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d101      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x6b8>
 80035d0:	4b90      	ldr	r3, [pc, #576]	@ (8003814 <HAL_ADC_ConfigChannel+0x8f8>)
 80035d2:	e000      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x6ba>
 80035d4:	4b90      	ldr	r3, [pc, #576]	@ (8003818 <HAL_ADC_ConfigChannel+0x8fc>)
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe ff04 	bl	80023e4 <LL_ADC_GetCommonPathInternalCh>
 80035dc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a89      	ldr	r2, [pc, #548]	@ (800380c <HAL_ADC_ConfigChannel+0x8f0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_ADC_ConfigChannel+0x6d8>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a88      	ldr	r2, [pc, #544]	@ (8003810 <HAL_ADC_ConfigChannel+0x8f4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d10e      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x6f6>
 80035f4:	4885      	ldr	r0, [pc, #532]	@ (800380c <HAL_ADC_ConfigChannel+0x8f0>)
 80035f6:	f7ff f96f 	bl	80028d8 <LL_ADC_IsEnabled>
 80035fa:	4604      	mov	r4, r0
 80035fc:	4884      	ldr	r0, [pc, #528]	@ (8003810 <HAL_ADC_ConfigChannel+0x8f4>)
 80035fe:	f7ff f96b 	bl	80028d8 <LL_ADC_IsEnabled>
 8003602:	4603      	mov	r3, r0
 8003604:	4323      	orrs	r3, r4
 8003606:	2b00      	cmp	r3, #0
 8003608:	bf0c      	ite	eq
 800360a:	2301      	moveq	r3, #1
 800360c:	2300      	movne	r3, #0
 800360e:	b2db      	uxtb	r3, r3
 8003610:	e008      	b.n	8003624 <HAL_ADC_ConfigChannel+0x708>
 8003612:	4882      	ldr	r0, [pc, #520]	@ (800381c <HAL_ADC_ConfigChannel+0x900>)
 8003614:	f7ff f960 	bl	80028d8 <LL_ADC_IsEnabled>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80a6 	beq.w	8003776 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a7c      	ldr	r2, [pc, #496]	@ (8003820 <HAL_ADC_ConfigChannel+0x904>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d13c      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003634:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003638:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d136      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a71      	ldr	r2, [pc, #452]	@ (800380c <HAL_ADC_ConfigChannel+0x8f0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00a      	beq.n	8003660 <HAL_ADC_ConfigChannel+0x744>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a70      	ldr	r2, [pc, #448]	@ (8003810 <HAL_ADC_ConfigChannel+0x8f4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d005      	beq.n	8003660 <HAL_ADC_ConfigChannel+0x744>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a70      	ldr	r2, [pc, #448]	@ (800381c <HAL_ADC_ConfigChannel+0x900>)
 800365a:	4293      	cmp	r3, r2
 800365c:	f040 826e 	bne.w	8003b3c <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a69      	ldr	r2, [pc, #420]	@ (800380c <HAL_ADC_ConfigChannel+0x8f0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d004      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x758>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a68      	ldr	r2, [pc, #416]	@ (8003810 <HAL_ADC_ConfigChannel+0x8f4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d101      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x75c>
 8003674:	4a67      	ldr	r2, [pc, #412]	@ (8003814 <HAL_ADC_ConfigChannel+0x8f8>)
 8003676:	e000      	b.n	800367a <HAL_ADC_ConfigChannel+0x75e>
 8003678:	4a67      	ldr	r2, [pc, #412]	@ (8003818 <HAL_ADC_ConfigChannel+0x8fc>)
 800367a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800367e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f7fe fe9a 	bl	80023be <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800368a:	4b66      	ldr	r3, [pc, #408]	@ (8003824 <HAL_ADC_ConfigChannel+0x908>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	099b      	lsrs	r3, r3, #6
 8003690:	4a65      	ldr	r2, [pc, #404]	@ (8003828 <HAL_ADC_ConfigChannel+0x90c>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	099b      	lsrs	r3, r3, #6
 8003698:	3301      	adds	r3, #1
 800369a:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 800369c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800369e:	e002      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f9      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ac:	e246      	b.n	8003b3c <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a5e      	ldr	r2, [pc, #376]	@ (800382c <HAL_ADC_ConfigChannel+0x910>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d12b      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d125      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a50      	ldr	r2, [pc, #320]	@ (800380c <HAL_ADC_ConfigChannel+0x8f0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00a      	beq.n	80036e4 <HAL_ADC_ConfigChannel+0x7c8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a4f      	ldr	r2, [pc, #316]	@ (8003810 <HAL_ADC_ConfigChannel+0x8f4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d005      	beq.n	80036e4 <HAL_ADC_ConfigChannel+0x7c8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a4f      	ldr	r2, [pc, #316]	@ (800381c <HAL_ADC_ConfigChannel+0x900>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	f040 822e 	bne.w	8003b40 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a48      	ldr	r2, [pc, #288]	@ (800380c <HAL_ADC_ConfigChannel+0x8f0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d004      	beq.n	80036f8 <HAL_ADC_ConfigChannel+0x7dc>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a47      	ldr	r2, [pc, #284]	@ (8003810 <HAL_ADC_ConfigChannel+0x8f4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d101      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x7e0>
 80036f8:	4a46      	ldr	r2, [pc, #280]	@ (8003814 <HAL_ADC_ConfigChannel+0x8f8>)
 80036fa:	e000      	b.n	80036fe <HAL_ADC_ConfigChannel+0x7e2>
 80036fc:	4a46      	ldr	r2, [pc, #280]	@ (8003818 <HAL_ADC_ConfigChannel+0x8fc>)
 80036fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003702:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	f7fe fe58 	bl	80023be <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800370e:	e217      	b.n	8003b40 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a46      	ldr	r2, [pc, #280]	@ (8003830 <HAL_ADC_ConfigChannel+0x914>)
 8003716:	4293      	cmp	r3, r2
 8003718:	f040 8213 	bne.w	8003b42 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800371c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003720:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003724:	2b00      	cmp	r3, #0
 8003726:	f040 820c 	bne.w	8003b42 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a37      	ldr	r2, [pc, #220]	@ (800380c <HAL_ADC_ConfigChannel+0x8f0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00a      	beq.n	800374a <HAL_ADC_ConfigChannel+0x82e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a35      	ldr	r2, [pc, #212]	@ (8003810 <HAL_ADC_ConfigChannel+0x8f4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d005      	beq.n	800374a <HAL_ADC_ConfigChannel+0x82e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a36      	ldr	r2, [pc, #216]	@ (800381c <HAL_ADC_ConfigChannel+0x900>)
 8003744:	4293      	cmp	r3, r2
 8003746:	f040 81fc 	bne.w	8003b42 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a2f      	ldr	r2, [pc, #188]	@ (800380c <HAL_ADC_ConfigChannel+0x8f0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_ADC_ConfigChannel+0x842>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a2d      	ldr	r2, [pc, #180]	@ (8003810 <HAL_ADC_ConfigChannel+0x8f4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x846>
 800375e:	4a2d      	ldr	r2, [pc, #180]	@ (8003814 <HAL_ADC_ConfigChannel+0x8f8>)
 8003760:	e000      	b.n	8003764 <HAL_ADC_ConfigChannel+0x848>
 8003762:	4a2d      	ldr	r2, [pc, #180]	@ (8003818 <HAL_ADC_ConfigChannel+0x8fc>)
 8003764:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003768:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800376c:	4619      	mov	r1, r3
 800376e:	4610      	mov	r0, r2
 8003770:	f7fe fe25 	bl	80023be <LL_ADC_SetCommonPathInternalCh>
 8003774:	e1e5      	b.n	8003b42 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800377a:	f043 0220 	orr.w	r2, r3, #32
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003788:	e1db      	b.n	8003b42 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b02      	cmp	r3, #2
 8003798:	f000 811b 	beq.w	80039d2 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037a4:	d004      	beq.n	80037b0 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80037aa:	4a22      	ldr	r2, [pc, #136]	@ (8003834 <HAL_ADC_ConfigChannel+0x918>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d107      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe ff6b 	bl	8002694 <LL_ADC_REG_SetSequencerChAdd>
 80037be:	e059      	b.n	8003874 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	210f      	movs	r1, #15
 80037d0:	fa01 f303 	lsl.w	r3, r1, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	401a      	ands	r2, r3
 80037d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80037dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d105      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x8d4>
 80037e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80037e8:	0e9b      	lsrs	r3, r3, #26
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	e027      	b.n	8003840 <HAL_ADC_ConfigChannel+0x924>
 80037f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80037f4:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	fa93 f3a3 	rbit	r3, r3
 80037fc:	60fb      	str	r3, [r7, #12]
  return result;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d117      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8003808:	2320      	movs	r3, #32
 800380a:	e019      	b.n	8003840 <HAL_ADC_ConfigChannel+0x924>
 800380c:	42028000 	.word	0x42028000
 8003810:	42028100 	.word	0x42028100
 8003814:	42028300 	.word	0x42028300
 8003818:	46021300 	.word	0x46021300
 800381c:	46021000 	.word	0x46021000
 8003820:	ce080000 	.word	0xce080000
 8003824:	20000000 	.word	0x20000000
 8003828:	053e2d63 	.word	0x053e2d63
 800382c:	ca040000 	.word	0xca040000
 8003830:	80000001 	.word	0x80000001
 8003834:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	fab3 f383 	clz	r3, r3
 800383e:	b2db      	uxtb	r3, r3
 8003840:	6839      	ldr	r1, [r7, #0]
 8003842:	6849      	ldr	r1, [r1, #4]
 8003844:	f001 011f 	and.w	r1, r1, #31
 8003848:	408b      	lsls	r3, r1
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385e:	429a      	cmp	r2, r3
 8003860:	d808      	bhi.n	8003874 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800386e:	4619      	mov	r1, r3
 8003870:	f7fe feb0 	bl	80025d4 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	461a      	mov	r2, r3
 800387e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003882:	f7fe ff53 	bl	800272c <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	f280 8159 	bge.w	8003b42 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a9b      	ldr	r2, [pc, #620]	@ (8003b04 <HAL_ADC_ConfigChannel+0xbe8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_ADC_ConfigChannel+0x988>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a9a      	ldr	r2, [pc, #616]	@ (8003b08 <HAL_ADC_ConfigChannel+0xbec>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d101      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x98c>
 80038a4:	4b99      	ldr	r3, [pc, #612]	@ (8003b0c <HAL_ADC_ConfigChannel+0xbf0>)
 80038a6:	e000      	b.n	80038aa <HAL_ADC_ConfigChannel+0x98e>
 80038a8:	4b99      	ldr	r3, [pc, #612]	@ (8003b10 <HAL_ADC_ConfigChannel+0xbf4>)
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe fd9a 	bl	80023e4 <LL_ADC_GetCommonPathInternalCh>
 80038b0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a96      	ldr	r2, [pc, #600]	@ (8003b14 <HAL_ADC_ConfigChannel+0xbf8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d12b      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d125      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a8d      	ldr	r2, [pc, #564]	@ (8003b04 <HAL_ADC_ConfigChannel+0xbe8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d004      	beq.n	80038de <HAL_ADC_ConfigChannel+0x9c2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a8b      	ldr	r2, [pc, #556]	@ (8003b08 <HAL_ADC_ConfigChannel+0xbec>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x9c6>
 80038de:	4a8b      	ldr	r2, [pc, #556]	@ (8003b0c <HAL_ADC_ConfigChannel+0xbf0>)
 80038e0:	e000      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x9c8>
 80038e2:	4a8b      	ldr	r2, [pc, #556]	@ (8003b10 <HAL_ADC_ConfigChannel+0xbf4>)
 80038e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038ec:	4619      	mov	r1, r3
 80038ee:	4610      	mov	r0, r2
 80038f0:	f7fe fd65 	bl	80023be <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80038f4:	4b88      	ldr	r3, [pc, #544]	@ (8003b18 <HAL_ADC_ConfigChannel+0xbfc>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	099b      	lsrs	r3, r3, #6
 80038fa:	4a88      	ldr	r2, [pc, #544]	@ (8003b1c <HAL_ADC_ConfigChannel+0xc00>)
 80038fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003900:	099b      	lsrs	r3, r3, #6
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8003906:	e002      	b.n	800390e <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	3b01      	subs	r3, #1
 800390c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f9      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8003914:	e045      	b.n	80039a2 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a81      	ldr	r2, [pc, #516]	@ (8003b20 <HAL_ADC_ConfigChannel+0xc04>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d11b      	bne.n	8003958 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003920:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003924:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003928:	2b00      	cmp	r3, #0
 800392a:	d115      	bne.n	8003958 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a74      	ldr	r2, [pc, #464]	@ (8003b04 <HAL_ADC_ConfigChannel+0xbe8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d004      	beq.n	8003940 <HAL_ADC_ConfigChannel+0xa24>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a73      	ldr	r2, [pc, #460]	@ (8003b08 <HAL_ADC_ConfigChannel+0xbec>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d101      	bne.n	8003944 <HAL_ADC_ConfigChannel+0xa28>
 8003940:	4a72      	ldr	r2, [pc, #456]	@ (8003b0c <HAL_ADC_ConfigChannel+0xbf0>)
 8003942:	e000      	b.n	8003946 <HAL_ADC_ConfigChannel+0xa2a>
 8003944:	4a72      	ldr	r2, [pc, #456]	@ (8003b10 <HAL_ADC_ConfigChannel+0xbf4>)
 8003946:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800394a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f7fe fd34 	bl	80023be <LL_ADC_SetCommonPathInternalCh>
 8003956:	e024      	b.n	80039a2 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a71      	ldr	r2, [pc, #452]	@ (8003b24 <HAL_ADC_ConfigChannel+0xc08>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d11f      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003962:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d115      	bne.n	800399a <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a64      	ldr	r2, [pc, #400]	@ (8003b04 <HAL_ADC_ConfigChannel+0xbe8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_ADC_ConfigChannel+0xa66>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a62      	ldr	r2, [pc, #392]	@ (8003b08 <HAL_ADC_ConfigChannel+0xbec>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d101      	bne.n	8003986 <HAL_ADC_ConfigChannel+0xa6a>
 8003982:	4a62      	ldr	r2, [pc, #392]	@ (8003b0c <HAL_ADC_ConfigChannel+0xbf0>)
 8003984:	e000      	b.n	8003988 <HAL_ADC_ConfigChannel+0xa6c>
 8003986:	4a62      	ldr	r2, [pc, #392]	@ (8003b10 <HAL_ADC_ConfigChannel+0xbf4>)
 8003988:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800398c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f7fe fd13 	bl	80023be <LL_ADC_SetCommonPathInternalCh>
 8003998:	e003      	b.n	80039a2 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a62      	ldr	r2, [pc, #392]	@ (8003b28 <HAL_ADC_ConfigChannel+0xc0c>)
 80039a0:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a61      	ldr	r2, [pc, #388]	@ (8003b2c <HAL_ADC_ConfigChannel+0xc10>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	f040 80ca 	bne.w	8003b42 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f040 80c3 	bne.w	8003b42 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0201 	orr.w	r2, r2, #1
 80039cc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80039d0:	e0b7      	b.n	8003b42 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039da:	d004      	beq.n	80039e6 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80039e0:	4a53      	ldr	r2, [pc, #332]	@ (8003b30 <HAL_ADC_ConfigChannel+0xc14>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d106      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fe83 	bl	80026fa <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f280 80a2 	bge.w	8003b42 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a40      	ldr	r2, [pc, #256]	@ (8003b04 <HAL_ADC_ConfigChannel+0xbe8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d004      	beq.n	8003a12 <HAL_ADC_ConfigChannel+0xaf6>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a3e      	ldr	r2, [pc, #248]	@ (8003b08 <HAL_ADC_ConfigChannel+0xbec>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d101      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0xafa>
 8003a12:	4b3e      	ldr	r3, [pc, #248]	@ (8003b0c <HAL_ADC_ConfigChannel+0xbf0>)
 8003a14:	e000      	b.n	8003a18 <HAL_ADC_ConfigChannel+0xafc>
 8003a16:	4b3e      	ldr	r3, [pc, #248]	@ (8003b10 <HAL_ADC_ConfigChannel+0xbf4>)
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fe fce3 	bl	80023e4 <LL_ADC_GetCommonPathInternalCh>
 8003a1e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a43      	ldr	r2, [pc, #268]	@ (8003b34 <HAL_ADC_ConfigChannel+0xc18>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d115      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a34      	ldr	r2, [pc, #208]	@ (8003b04 <HAL_ADC_ConfigChannel+0xbe8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d004      	beq.n	8003a40 <HAL_ADC_ConfigChannel+0xb24>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a33      	ldr	r2, [pc, #204]	@ (8003b08 <HAL_ADC_ConfigChannel+0xbec>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d101      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0xb28>
 8003a40:	4a32      	ldr	r2, [pc, #200]	@ (8003b0c <HAL_ADC_ConfigChannel+0xbf0>)
 8003a42:	e000      	b.n	8003a46 <HAL_ADC_ConfigChannel+0xb2a>
 8003a44:	4a32      	ldr	r2, [pc, #200]	@ (8003b10 <HAL_ADC_ConfigChannel+0xbf4>)
 8003a46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a4a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4610      	mov	r0, r2
 8003a52:	f7fe fcb4 	bl	80023be <LL_ADC_SetCommonPathInternalCh>
 8003a56:	e034      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a36      	ldr	r2, [pc, #216]	@ (8003b38 <HAL_ADC_ConfigChannel+0xc1c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d115      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a27      	ldr	r2, [pc, #156]	@ (8003b04 <HAL_ADC_ConfigChannel+0xbe8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d004      	beq.n	8003a76 <HAL_ADC_ConfigChannel+0xb5a>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a25      	ldr	r2, [pc, #148]	@ (8003b08 <HAL_ADC_ConfigChannel+0xbec>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d101      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0xb5e>
 8003a76:	4a25      	ldr	r2, [pc, #148]	@ (8003b0c <HAL_ADC_ConfigChannel+0xbf0>)
 8003a78:	e000      	b.n	8003a7c <HAL_ADC_ConfigChannel+0xb60>
 8003a7a:	4a25      	ldr	r2, [pc, #148]	@ (8003b10 <HAL_ADC_ConfigChannel+0xbf4>)
 8003a7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a84:	4619      	mov	r1, r3
 8003a86:	4610      	mov	r0, r2
 8003a88:	f7fe fc99 	bl	80023be <LL_ADC_SetCommonPathInternalCh>
 8003a8c:	e019      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a24      	ldr	r2, [pc, #144]	@ (8003b24 <HAL_ADC_ConfigChannel+0xc08>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d114      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a19      	ldr	r2, [pc, #100]	@ (8003b04 <HAL_ADC_ConfigChannel+0xbe8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d004      	beq.n	8003aac <HAL_ADC_ConfigChannel+0xb90>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a18      	ldr	r2, [pc, #96]	@ (8003b08 <HAL_ADC_ConfigChannel+0xbec>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d101      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0xb94>
 8003aac:	4a17      	ldr	r2, [pc, #92]	@ (8003b0c <HAL_ADC_ConfigChannel+0xbf0>)
 8003aae:	e000      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0xb96>
 8003ab0:	4a17      	ldr	r2, [pc, #92]	@ (8003b10 <HAL_ADC_ConfigChannel+0xbf4>)
 8003ab2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ab6:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003aba:	4619      	mov	r1, r3
 8003abc:	4610      	mov	r0, r2
 8003abe:	f7fe fc7e 	bl	80023be <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a19      	ldr	r2, [pc, #100]	@ (8003b2c <HAL_ADC_ConfigChannel+0xc10>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d13a      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003acc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ad0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d134      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8003aec:	e029      	b.n	8003b42 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003af2:	f043 0220 	orr.w	r2, r3, #32
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003b00:	e01f      	b.n	8003b42 <HAL_ADC_ConfigChannel+0xc26>
 8003b02:	bf00      	nop
 8003b04:	42028000 	.word	0x42028000
 8003b08:	42028100 	.word	0x42028100
 8003b0c:	42028300 	.word	0x42028300
 8003b10:	46021300 	.word	0x46021300
 8003b14:	b6002000 	.word	0xb6002000
 8003b18:	20000000 	.word	0x20000000
 8003b1c:	053e2d63 	.word	0x053e2d63
 8003b20:	ba004000 	.word	0xba004000
 8003b24:	80000001 	.word	0x80000001
 8003b28:	b2001000 	.word	0xb2001000
 8003b2c:	d7200000 	.word	0xd7200000
 8003b30:	80000010 	.word	0x80000010
 8003b34:	ce080000 	.word	0xce080000
 8003b38:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b3c:	bf00      	nop
 8003b3e:	e000      	b.n	8003b42 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b40:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8003b4a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	37dc      	adds	r7, #220	@ 0xdc
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd90      	pop	{r4, r7, pc}
 8003b56:	bf00      	nop

08003b58 <__NVIC_SetPriorityGrouping>:
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b68:	4b0c      	ldr	r3, [pc, #48]	@ (8003b9c <__NVIC_SetPriorityGrouping+0x44>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b74:	4013      	ands	r3, r2
 8003b76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b8a:	4a04      	ldr	r2, [pc, #16]	@ (8003b9c <__NVIC_SetPriorityGrouping+0x44>)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	60d3      	str	r3, [r2, #12]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <__NVIC_GetPriorityGrouping>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ba4:	4b04      	ldr	r3, [pc, #16]	@ (8003bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	f003 0307 	and.w	r3, r3, #7
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <__NVIC_EnableIRQ>:
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	db0b      	blt.n	8003be6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	f003 021f 	and.w	r2, r3, #31
 8003bd4:	4907      	ldr	r1, [pc, #28]	@ (8003bf4 <__NVIC_EnableIRQ+0x38>)
 8003bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	2001      	movs	r0, #1
 8003bde:	fa00 f202 	lsl.w	r2, r0, r2
 8003be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	e000e100 	.word	0xe000e100

08003bf8 <__NVIC_DisableIRQ>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	db12      	blt.n	8003c30 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	f003 021f 	and.w	r2, r3, #31
 8003c10:	490a      	ldr	r1, [pc, #40]	@ (8003c3c <__NVIC_DisableIRQ+0x44>)
 8003c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	2001      	movs	r0, #1
 8003c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c1e:	3320      	adds	r3, #32
 8003c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c24:	f3bf 8f4f 	dsb	sy
}
 8003c28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c2a:	f3bf 8f6f 	isb	sy
}
 8003c2e:	bf00      	nop
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000e100 	.word	0xe000e100

08003c40 <__NVIC_SetPriority>:
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	6039      	str	r1, [r7, #0]
 8003c4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	db0a      	blt.n	8003c6a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	490c      	ldr	r1, [pc, #48]	@ (8003c8c <__NVIC_SetPriority+0x4c>)
 8003c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c5e:	0112      	lsls	r2, r2, #4
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	440b      	add	r3, r1
 8003c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003c68:	e00a      	b.n	8003c80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	4908      	ldr	r1, [pc, #32]	@ (8003c90 <__NVIC_SetPriority+0x50>)
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	3b04      	subs	r3, #4
 8003c78:	0112      	lsls	r2, r2, #4
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	761a      	strb	r2, [r3, #24]
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	e000e100 	.word	0xe000e100
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <NVIC_EncodePriority>:
{
 8003c94:	b480      	push	{r7}
 8003c96:	b089      	sub	sp, #36	@ 0x24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f1c3 0307 	rsb	r3, r3, #7
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	bf28      	it	cs
 8003cb2:	2304      	movcs	r3, #4
 8003cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d902      	bls.n	8003cc4 <NVIC_EncodePriority+0x30>
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3b03      	subs	r3, #3
 8003cc2:	e000      	b.n	8003cc6 <NVIC_EncodePriority+0x32>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	401a      	ands	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	43d9      	mvns	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cec:	4313      	orrs	r3, r2
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3724      	adds	r7, #36	@ 0x24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff ff28 	bl	8003b58 <__NVIC_SetPriorityGrouping>
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d1e:	f7ff ff3f 	bl	8003ba0 <__NVIC_GetPriorityGrouping>
 8003d22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	6978      	ldr	r0, [r7, #20]
 8003d2a:	f7ff ffb3 	bl	8003c94 <NVIC_EncodePriority>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d34:	4611      	mov	r1, r2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ff82 	bl	8003c40 <__NVIC_SetPriority>
}
 8003d3c:	bf00      	nop
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff ff32 	bl	8003bbc <__NVIC_EnableIRQ>
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff ff42 	bl	8003bf8 <__NVIC_DisableIRQ>
}
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d8c:	d301      	bcc.n	8003d92 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e00d      	b.n	8003dae <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003d92:	4a0a      	ldr	r2, [pc, #40]	@ (8003dbc <HAL_SYSTICK_Config+0x40>)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003d9a:	4b08      	ldr	r3, [pc, #32]	@ (8003dbc <HAL_SYSTICK_Config+0x40>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003da0:	4b06      	ldr	r3, [pc, #24]	@ (8003dbc <HAL_SYSTICK_Config+0x40>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a05      	ldr	r2, [pc, #20]	@ (8003dbc <HAL_SYSTICK_Config+0x40>)
 8003da6:	f043 0303 	orr.w	r3, r3, #3
 8003daa:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	e000e010 	.word	0xe000e010

08003dc0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d844      	bhi.n	8003e58 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003dce:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003df7 	.word	0x08003df7
 8003dd8:	08003e15 	.word	0x08003e15
 8003ddc:	08003e37 	.word	0x08003e37
 8003de0:	08003e59 	.word	0x08003e59
 8003de4:	08003de9 	.word	0x08003de9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003de8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1e      	ldr	r2, [pc, #120]	@ (8003e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dee:	f043 0304 	orr.w	r3, r3, #4
 8003df2:	6013      	str	r3, [r2, #0]
      break;
 8003df4:	e031      	b.n	8003e5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003df6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8003e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8003e02:	4b1a      	ldr	r3, [pc, #104]	@ (8003e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e08:	4a18      	ldr	r2, [pc, #96]	@ (8003e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003e0a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003e12:	e022      	b.n	8003e5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003e14:	4b14      	ldr	r3, [pc, #80]	@ (8003e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a13      	ldr	r2, [pc, #76]	@ (8003e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003e1a:	f023 0304 	bic.w	r3, r3, #4
 8003e1e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8003e20:	4b12      	ldr	r3, [pc, #72]	@ (8003e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e26:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003e2a:	4a10      	ldr	r2, [pc, #64]	@ (8003e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003e2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003e34:	e011      	b.n	8003e5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003e36:	4b0c      	ldr	r3, [pc, #48]	@ (8003e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8003e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003e3c:	f023 0304 	bic.w	r3, r3, #4
 8003e40:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8003e42:	4b0a      	ldr	r3, [pc, #40]	@ (8003e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e48:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003e4c:	4a07      	ldr	r2, [pc, #28]	@ (8003e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003e4e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003e56:	e000      	b.n	8003e5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003e58:	bf00      	nop
  }
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	e000e010 	.word	0xe000e010
 8003e6c:	46020c00 	.word	0x46020c00

08003e70 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003e76:	4b19      	ldr	r3, [pc, #100]	@ (8003edc <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003e82:	2304      	movs	r3, #4
 8003e84:	607b      	str	r3, [r7, #4]
 8003e86:	e021      	b.n	8003ecc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8003e88:	4b15      	ldr	r3, [pc, #84]	@ (8003ee0 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8003e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e8e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003e92:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e9a:	d011      	beq.n	8003ec0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ea2:	d810      	bhi.n	8003ec6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d004      	beq.n	8003eb4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eb0:	d003      	beq.n	8003eba <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003eb2:	e008      	b.n	8003ec6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	607b      	str	r3, [r7, #4]
        break;
 8003eb8:	e008      	b.n	8003ecc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	607b      	str	r3, [r7, #4]
        break;
 8003ebe:	e005      	b.n	8003ecc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	607b      	str	r3, [r7, #4]
        break;
 8003ec4:	e002      	b.n	8003ecc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	607b      	str	r3, [r7, #4]
        break;
 8003eca:	bf00      	nop
    }
  }
  return systick_source;
 8003ecc:	687b      	ldr	r3, [r7, #4]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	e000e010 	.word	0xe000e010
 8003ee0:	46020c00 	.word	0x46020c00

08003ee4 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
#if defined(SAES)
  uint32_t tickstart;
#endif /* SAES */

  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e0a7      	b.n	8004046 <HAL_CRYP_Init+0x162>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fd fda0 	bl	8001a50 <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  if (hcryp->Instance == AES)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a4e      	ldr	r2, [pc, #312]	@ (8004050 <HAL_CRYP_Init+0x16c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d116      	bne.n	8003f48 <HAL_CRYP_Init+0x64>
  {
    /* Set the key size, data type and Algorithm */
    cr_value = (uint32_t)(hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm | hcryp->Init.KeyMode);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm and mode */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, cr_value);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4b46      	ldr	r3, [pc, #280]	@ (8004054 <HAL_CRYP_Init+0x170>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	430b      	orrs	r3, r1
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	e070      	b.n	800402a <HAL_CRYP_Init+0x146>
  }
  else
  {
    /* SAES is initializing, fetching random number from the RNG */
    tickstart = HAL_GetTick();
 8003f48:	f7fe f9f6 	bl	8002338 <HAL_GetTick>
 8003f4c:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8003f4e:	e01e      	b.n	8003f8e <HAL_CRYP_Init+0xaa>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8003f50:	f7fe f9f2 	bl	8002338 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b52      	cmp	r3, #82	@ 0x52
 8003f5c:	d917      	bls.n	8003f8e <HAL_CRYP_Init+0xaa>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0201 	bic.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f72:	f043 0210 	orr.w	r2, r3, #16
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e05b      	b.n	8004046 <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d0d9      	beq.n	8003f50 <HAL_CRYP_Init+0x6c>
      }
    }
    /* SAES is initializing, no random number fetching error flagged */
    tickstart = HAL_GetTick();
 8003f9c:	f7fe f9cc 	bl	8002338 <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8003fa2:	e01e      	b.n	8003fe2 <HAL_CRYP_Init+0xfe>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8003fa4:	f7fe f9c8 	bl	8002338 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b52      	cmp	r3, #82	@ 0x52
 8003fb0:	d917      	bls.n	8003fe2 <HAL_CRYP_Init+0xfe>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_RNG;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e031      	b.n	8004046 <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d0d8      	beq.n	8003fa4 <HAL_CRYP_Init+0xc0>
      }
    }
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8004006:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8004012:	4313      	orrs	r3, r2
 8004014:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm, Key selection and key protection */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD | AES_CR_KEYSEL |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4b0e      	ldr	r3, [pc, #56]	@ (8004058 <HAL_CRYP_Init+0x174>)
 800401e:	4013      	ands	r3, r2
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	430b      	orrs	r3, r1
 8004028:	6013      	str	r3, [r2, #0]
               AES_CR_KEYPROT, cr_value);
  }
  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	64da      	str	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	420c0000 	.word	0x420c0000
 8004054:	fcfaff99 	.word	0xfcfaff99
 8004058:	8cf2ff99 	.word	0x8cf2ff99

0800405c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800405c:	b480      	push	{r7}
 800405e:	b089      	sub	sp, #36	@ 0x24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800406e:	e1ba      	b.n	80043e6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	2101      	movs	r1, #1
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	fa01 f303 	lsl.w	r3, r1, r3
 800407c:	4013      	ands	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 81aa 	beq.w	80043e0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a55      	ldr	r2, [pc, #340]	@ (80041e4 <HAL_GPIO_Init+0x188>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d15d      	bne.n	8004150 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800409a:	2201      	movs	r2, #1
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43db      	mvns	r3, r3
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	4013      	ands	r3, r2
 80040a8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f003 0201 	and.w	r2, r3, #1
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69fa      	ldr	r2, [r7, #28]
 80040c2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80040c4:	4a48      	ldr	r2, [pc, #288]	@ (80041e8 <HAL_GPIO_Init+0x18c>)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040cc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80040ce:	4a46      	ldr	r2, [pc, #280]	@ (80041e8 <HAL_GPIO_Init+0x18c>)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4413      	add	r3, r2
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	08da      	lsrs	r2, r3, #3
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	3208      	adds	r2, #8
 80040e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	220f      	movs	r2, #15
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43db      	mvns	r3, r3
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	4013      	ands	r3, r2
 80040fc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	220b      	movs	r2, #11
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	4313      	orrs	r3, r2
 8004110:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	08da      	lsrs	r2, r3, #3
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	3208      	adds	r2, #8
 800411a:	69f9      	ldr	r1, [r7, #28]
 800411c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	2203      	movs	r2, #3
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	4013      	ands	r3, r2
 8004136:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	2202      	movs	r2, #2
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	4313      	orrs	r3, r2
 8004146:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	e067      	b.n	8004220 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x104>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b12      	cmp	r3, #18
 800415e:	d145      	bne.n	80041ec <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	08da      	lsrs	r2, r3, #3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3208      	adds	r2, #8
 8004168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800416c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	220f      	movs	r2, #15
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	43db      	mvns	r3, r3
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	4013      	ands	r3, r2
 8004182:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f003 020f 	and.w	r2, r3, #15
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	4313      	orrs	r3, r2
 800419c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	08da      	lsrs	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3208      	adds	r2, #8
 80041a6:	69f9      	ldr	r1, [r7, #28]
 80041a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	2203      	movs	r2, #3
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	4013      	ands	r3, r2
 80041c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0203 	and.w	r2, r3, #3
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	e01e      	b.n	8004220 <HAL_GPIO_Init+0x1c4>
 80041e2:	bf00      	nop
 80041e4:	46020000 	.word	0x46020000
 80041e8:	08010688 	.word	0x08010688
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	2203      	movs	r2, #3
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	43db      	mvns	r3, r3
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	4013      	ands	r3, r2
 8004202:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 0203 	and.w	r2, r3, #3
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	4313      	orrs	r3, r2
 8004218:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d00b      	beq.n	8004240 <HAL_GPIO_Init+0x1e4>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d007      	beq.n	8004240 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004234:	2b11      	cmp	r3, #17
 8004236:	d003      	beq.n	8004240 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b12      	cmp	r3, #18
 800423e:	d130      	bne.n	80042a2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	2203      	movs	r2, #3
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	4013      	ands	r3, r2
 8004256:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	4313      	orrs	r3, r2
 8004268:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004276:	2201      	movs	r2, #1
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	4013      	ands	r3, r2
 8004284:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	091b      	lsrs	r3, r3, #4
 800428c:	f003 0201 	and.w	r2, r3, #1
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	4313      	orrs	r3, r2
 800429a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d017      	beq.n	80042da <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	2203      	movs	r2, #3
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43db      	mvns	r3, r3
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	4013      	ands	r3, r2
 80042c0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d07c      	beq.n	80043e0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80042e6:	4a47      	ldr	r2, [pc, #284]	@ (8004404 <HAL_GPIO_Init+0x3a8>)
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	089b      	lsrs	r3, r3, #2
 80042ec:	3318      	adds	r3, #24
 80042ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	220f      	movs	r2, #15
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	43db      	mvns	r3, r3
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	4013      	ands	r3, r2
 8004308:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	0a9a      	lsrs	r2, r3, #10
 800430e:	4b3e      	ldr	r3, [pc, #248]	@ (8004408 <HAL_GPIO_Init+0x3ac>)
 8004310:	4013      	ands	r3, r2
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	f002 0203 	and.w	r2, r2, #3
 8004318:	00d2      	lsls	r2, r2, #3
 800431a:	4093      	lsls	r3, r2
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	4313      	orrs	r3, r2
 8004320:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004322:	4938      	ldr	r1, [pc, #224]	@ (8004404 <HAL_GPIO_Init+0x3a8>)
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	089b      	lsrs	r3, r3, #2
 8004328:	3318      	adds	r3, #24
 800432a:	69fa      	ldr	r2, [r7, #28]
 800432c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004330:	4b34      	ldr	r3, [pc, #208]	@ (8004404 <HAL_GPIO_Init+0x3a8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	43db      	mvns	r3, r3
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	4013      	ands	r3, r2
 800433e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004354:	4a2b      	ldr	r2, [pc, #172]	@ (8004404 <HAL_GPIO_Init+0x3a8>)
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800435a:	4b2a      	ldr	r3, [pc, #168]	@ (8004404 <HAL_GPIO_Init+0x3a8>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	43db      	mvns	r3, r3
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	4013      	ands	r3, r2
 8004368:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800437e:	4a21      	ldr	r2, [pc, #132]	@ (8004404 <HAL_GPIO_Init+0x3a8>)
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004384:	4b1f      	ldr	r3, [pc, #124]	@ (8004404 <HAL_GPIO_Init+0x3a8>)
 8004386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800438a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	43db      	mvns	r3, r3
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	4013      	ands	r3, r2
 8004394:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80043aa:	4a16      	ldr	r2, [pc, #88]	@ (8004404 <HAL_GPIO_Init+0x3a8>)
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80043b2:	4b14      	ldr	r3, [pc, #80]	@ (8004404 <HAL_GPIO_Init+0x3a8>)
 80043b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	43db      	mvns	r3, r3
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80043d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004404 <HAL_GPIO_Init+0x3a8>)
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	3301      	adds	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f47f ae3d 	bne.w	8004070 <HAL_GPIO_Init+0x14>
  }
}
 80043f6:	bf00      	nop
 80043f8:	bf00      	nop
 80043fa:	3724      	adds	r7, #36	@ 0x24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	46022000 	.word	0x46022000
 8004408:	002f7f7f 	.word	0x002f7f7f

0800440c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	807b      	strh	r3, [r7, #2]
 8004418:	4613      	mov	r3, r2
 800441a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800441c:	787b      	ldrb	r3, [r7, #1]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004422:	887a      	ldrh	r2, [r7, #2]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004428:	e002      	b.n	8004430 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800442a:	887a      	ldrh	r2, [r7, #2]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800444e:	887a      	ldrh	r2, [r7, #2]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4013      	ands	r3, r2
 8004454:	041a      	lsls	r2, r3, #16
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	43d9      	mvns	r1, r3
 800445a:	887b      	ldrh	r3, [r7, #2]
 800445c:	400b      	ands	r3, r1
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	619a      	str	r2, [r3, #24]
}
 8004464:	bf00      	nop
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800447a:	4b0f      	ldr	r3, [pc, #60]	@ (80044b8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	88fb      	ldrh	r3, [r7, #6]
 8004480:	4013      	ands	r3, r2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d006      	beq.n	8004494 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004486:	4a0c      	ldr	r2, [pc, #48]	@ (80044b8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004488:	88fb      	ldrh	r3, [r7, #6]
 800448a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fc fcbc 	bl	8000e0c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8004494:	4b08      	ldr	r3, [pc, #32]	@ (80044b8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	4013      	ands	r3, r2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d006      	beq.n	80044ae <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80044a0:	4a05      	ldr	r2, [pc, #20]	@ (80044b8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80044a2:	88fb      	ldrh	r3, [r7, #6]
 80044a4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 f807 	bl	80044bc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	46022000 	.word	0x46022000

080044bc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4603      	mov	r3, r0
 80044c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e08d      	b.n	8004600 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d106      	bne.n	80044fe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7fd facb 	bl	8001a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2224      	movs	r2, #36	@ 0x24
 8004502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0201 	bic.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004522:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004532:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d107      	bne.n	800454c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004548:	609a      	str	r2, [r3, #8]
 800454a:	e006      	b.n	800455a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004558:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d108      	bne.n	8004574 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	e007      	b.n	8004584 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004582:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6812      	ldr	r2, [r2, #0]
 800458e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004596:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69d9      	ldr	r1, [r3, #28]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1a      	ldr	r2, [r3, #32]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0201 	orr.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b20      	cmp	r3, #32
 800461c:	d138      	bne.n	8004690 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004628:	2302      	movs	r3, #2
 800462a:	e032      	b.n	8004692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2224      	movs	r2, #36	@ 0x24
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0201 	bic.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800465a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6819      	ldr	r1, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	e000      	b.n	8004692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004690:	2302      	movs	r3, #2
  }
}
 8004692:	4618      	mov	r0, r3
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d139      	bne.n	8004728 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046be:	2302      	movs	r3, #2
 80046c0:	e033      	b.n	800472a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2224      	movs	r2, #36	@ 0x24
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0201 	bic.w	r2, r2, #1
 80046e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80046f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	e000      	b.n	800472a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
  }
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004744:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
 8004754:	e007      	b.n	8004766 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004756:	4b07      	ldr	r3, [pc, #28]	@ (8004774 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 0204 	bic.w	r2, r3, #4
 800475e:	4905      	ldr	r1, [pc, #20]	@ (8004774 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4313      	orrs	r3, r2
 8004764:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004766:	7bfb      	ldrb	r3, [r7, #15]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	40030400 	.word	0x40030400

08004778 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800477c:	4b05      	ldr	r3, [pc, #20]	@ (8004794 <HAL_ICACHE_Enable+0x1c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a04      	ldr	r2, [pc, #16]	@ (8004794 <HAL_ICACHE_Enable+0x1c>)
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	40030400 	.word	0x40030400

08004798 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80047a0:	4b39      	ldr	r3, [pc, #228]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047a8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d10b      	bne.n	80047ca <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047b8:	d905      	bls.n	80047c6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80047ba:	4b33      	ldr	r3, [pc, #204]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	4a32      	ldr	r2, [pc, #200]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047c4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e057      	b.n	800487a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047d0:	d90a      	bls.n	80047e8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80047d2:	4b2d      	ldr	r3, [pc, #180]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4313      	orrs	r3, r2
 80047de:	4a2a      	ldr	r2, [pc, #168]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047e4:	60d3      	str	r3, [r2, #12]
 80047e6:	e007      	b.n	80047f8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80047e8:	4b27      	ldr	r3, [pc, #156]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80047f0:	4925      	ldr	r1, [pc, #148]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80047f8:	4b24      	ldr	r3, [pc, #144]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a24      	ldr	r2, [pc, #144]	@ (8004890 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	099b      	lsrs	r3, r3, #6
 8004804:	2232      	movs	r2, #50	@ 0x32
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	4a21      	ldr	r2, [pc, #132]	@ (8004890 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	099b      	lsrs	r3, r3, #6
 8004812:	3301      	adds	r3, #1
 8004814:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004816:	e002      	b.n	800481e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3b01      	subs	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800481e:	4b1a      	ldr	r3, [pc, #104]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d102      	bne.n	8004830 <HAL_PWREx_ControlVoltageScaling+0x98>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f3      	bne.n	8004818 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01b      	beq.n	800486e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004836:	4b15      	ldr	r3, [pc, #84]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a15      	ldr	r2, [pc, #84]	@ (8004890 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800483c:	fba2 2303 	umull	r2, r3, r2, r3
 8004840:	099b      	lsrs	r3, r3, #6
 8004842:	2232      	movs	r2, #50	@ 0x32
 8004844:	fb02 f303 	mul.w	r3, r2, r3
 8004848:	4a11      	ldr	r2, [pc, #68]	@ (8004890 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	099b      	lsrs	r3, r3, #6
 8004850:	3301      	adds	r3, #1
 8004852:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004854:	e002      	b.n	800485c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3b01      	subs	r3, #1
 800485a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800485c:	4b0a      	ldr	r3, [pc, #40]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800485e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d102      	bne.n	800486e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f3      	bne.n	8004856 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e000      	b.n	800487a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	46020800 	.word	0x46020800
 800488c:	20000000 	.word	0x20000000
 8004890:	10624dd3 	.word	0x10624dd3

08004894 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004898:	4b04      	ldr	r3, [pc, #16]	@ (80048ac <HAL_PWREx_GetVoltageRange+0x18>)
 800489a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800489c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	46020800 	.word	0x46020800

080048b0 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80048b4:	4b05      	ldr	r3, [pc, #20]	@ (80048cc <HAL_PWREx_EnableVddA+0x1c>)
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	4a04      	ldr	r2, [pc, #16]	@ (80048cc <HAL_PWREx_EnableVddA+0x1c>)
 80048ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048be:	6113      	str	r3, [r2, #16]
}
 80048c0:	bf00      	nop
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	46020800 	.word	0x46020800

080048d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08e      	sub	sp, #56	@ 0x38
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80048d8:	2300      	movs	r3, #0
 80048da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d102      	bne.n	80048ea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	f000 bec8 	b.w	800567a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ea:	4b99      	ldr	r3, [pc, #612]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048f4:	4b96      	ldr	r3, [pc, #600]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 80048f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 816c 	beq.w	8004be4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800490c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490e:	2b00      	cmp	r3, #0
 8004910:	d007      	beq.n	8004922 <HAL_RCC_OscConfig+0x52>
 8004912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004914:	2b0c      	cmp	r3, #12
 8004916:	f040 80de 	bne.w	8004ad6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800491a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491c:	2b01      	cmp	r3, #1
 800491e:	f040 80da 	bne.w	8004ad6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f000 bea5 	b.w	800567a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004934:	4b86      	ldr	r3, [pc, #536]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d004      	beq.n	800494a <HAL_RCC_OscConfig+0x7a>
 8004940:	4b83      	ldr	r3, [pc, #524]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004948:	e005      	b.n	8004956 <HAL_RCC_OscConfig+0x86>
 800494a:	4b81      	ldr	r3, [pc, #516]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 800494c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004950:	041b      	lsls	r3, r3, #16
 8004952:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004956:	4293      	cmp	r3, r2
 8004958:	d255      	bcs.n	8004a06 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	4618      	mov	r0, r3
 8004966:	f001 f9d9 	bl	8005d1c <RCC_SetFlashLatencyFromMSIRange>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	f000 be82 	b.w	800567a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004976:	4b76      	ldr	r3, [pc, #472]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	4a75      	ldr	r2, [pc, #468]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 800497c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004980:	6093      	str	r3, [r2, #8]
 8004982:	4b73      	ldr	r3, [pc, #460]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	4970      	ldr	r1, [pc, #448]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004990:	4313      	orrs	r3, r2
 8004992:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004998:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800499c:	d309      	bcc.n	80049b2 <HAL_RCC_OscConfig+0xe2>
 800499e:	4b6c      	ldr	r3, [pc, #432]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f023 021f 	bic.w	r2, r3, #31
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	4969      	ldr	r1, [pc, #420]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60cb      	str	r3, [r1, #12]
 80049b0:	e07e      	b.n	8004ab0 <HAL_RCC_OscConfig+0x1e0>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	da0a      	bge.n	80049d0 <HAL_RCC_OscConfig+0x100>
 80049ba:	4b65      	ldr	r3, [pc, #404]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	015b      	lsls	r3, r3, #5
 80049c8:	4961      	ldr	r1, [pc, #388]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60cb      	str	r3, [r1, #12]
 80049ce:	e06f      	b.n	8004ab0 <HAL_RCC_OscConfig+0x1e0>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d8:	d30a      	bcc.n	80049f0 <HAL_RCC_OscConfig+0x120>
 80049da:	4b5d      	ldr	r3, [pc, #372]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	029b      	lsls	r3, r3, #10
 80049e8:	4959      	ldr	r1, [pc, #356]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60cb      	str	r3, [r1, #12]
 80049ee:	e05f      	b.n	8004ab0 <HAL_RCC_OscConfig+0x1e0>
 80049f0:	4b57      	ldr	r3, [pc, #348]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	03db      	lsls	r3, r3, #15
 80049fe:	4954      	ldr	r1, [pc, #336]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60cb      	str	r3, [r1, #12]
 8004a04:	e054      	b.n	8004ab0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004a06:	4b52      	ldr	r3, [pc, #328]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	4a51      	ldr	r2, [pc, #324]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a10:	6093      	str	r3, [r2, #8]
 8004a12:	4b4f      	ldr	r3, [pc, #316]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1e:	494c      	ldr	r1, [pc, #304]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004a2c:	d309      	bcc.n	8004a42 <HAL_RCC_OscConfig+0x172>
 8004a2e:	4b48      	ldr	r3, [pc, #288]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f023 021f 	bic.w	r2, r3, #31
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	4945      	ldr	r1, [pc, #276]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60cb      	str	r3, [r1, #12]
 8004a40:	e028      	b.n	8004a94 <HAL_RCC_OscConfig+0x1c4>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	da0a      	bge.n	8004a60 <HAL_RCC_OscConfig+0x190>
 8004a4a:	4b41      	ldr	r3, [pc, #260]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	015b      	lsls	r3, r3, #5
 8004a58:	493d      	ldr	r1, [pc, #244]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60cb      	str	r3, [r1, #12]
 8004a5e:	e019      	b.n	8004a94 <HAL_RCC_OscConfig+0x1c4>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a68:	d30a      	bcc.n	8004a80 <HAL_RCC_OscConfig+0x1b0>
 8004a6a:	4b39      	ldr	r3, [pc, #228]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	029b      	lsls	r3, r3, #10
 8004a78:	4935      	ldr	r1, [pc, #212]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60cb      	str	r3, [r1, #12]
 8004a7e:	e009      	b.n	8004a94 <HAL_RCC_OscConfig+0x1c4>
 8004a80:	4b33      	ldr	r3, [pc, #204]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	03db      	lsls	r3, r3, #15
 8004a8e:	4930      	ldr	r1, [pc, #192]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10a      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f001 f93c 	bl	8005d1c <RCC_SetFlashLatencyFromMSIRange>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	f000 bde5 	b.w	800567a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004ab0:	f001 f8de 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ab4:	4b27      	ldr	r3, [pc, #156]	@ (8004b54 <HAL_RCC_OscConfig+0x284>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fd fbb3 	bl	8002224 <HAL_InitTick>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 808a 	beq.w	8004be2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004ace:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ad2:	f000 bdd2 	b.w	800567a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d066      	beq.n	8004bac <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004ade:	4b1c      	ldr	r3, [pc, #112]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1b      	ldr	r2, [pc, #108]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004aea:	f7fd fc25 	bl	8002338 <HAL_GetTick>
 8004aee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004af0:	e009      	b.n	8004b06 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004af2:	f7fd fc21 	bl	8002338 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d902      	bls.n	8004b06 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	f000 bdba 	b.w	800567a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004b06:	4b12      	ldr	r3, [pc, #72]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0ef      	beq.n	8004af2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004b12:	4b0f      	ldr	r3, [pc, #60]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	4a0e      	ldr	r2, [pc, #56]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004b18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b1c:	6093      	str	r3, [r2, #8]
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2a:	4909      	ldr	r1, [pc, #36]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b34:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004b38:	d30e      	bcc.n	8004b58 <HAL_RCC_OscConfig+0x288>
 8004b3a:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f023 021f 	bic.w	r2, r3, #31
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	4902      	ldr	r1, [pc, #8]	@ (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60cb      	str	r3, [r1, #12]
 8004b4c:	e04a      	b.n	8004be4 <HAL_RCC_OscConfig+0x314>
 8004b4e:	bf00      	nop
 8004b50:	46020c00 	.word	0x46020c00
 8004b54:	20000004 	.word	0x20000004
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	da0a      	bge.n	8004b76 <HAL_RCC_OscConfig+0x2a6>
 8004b60:	4b98      	ldr	r3, [pc, #608]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	015b      	lsls	r3, r3, #5
 8004b6e:	4995      	ldr	r1, [pc, #596]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60cb      	str	r3, [r1, #12]
 8004b74:	e036      	b.n	8004be4 <HAL_RCC_OscConfig+0x314>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b7e:	d30a      	bcc.n	8004b96 <HAL_RCC_OscConfig+0x2c6>
 8004b80:	4b90      	ldr	r3, [pc, #576]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	029b      	lsls	r3, r3, #10
 8004b8e:	498d      	ldr	r1, [pc, #564]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60cb      	str	r3, [r1, #12]
 8004b94:	e026      	b.n	8004be4 <HAL_RCC_OscConfig+0x314>
 8004b96:	4b8b      	ldr	r3, [pc, #556]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	03db      	lsls	r3, r3, #15
 8004ba4:	4987      	ldr	r1, [pc, #540]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60cb      	str	r3, [r1, #12]
 8004baa:	e01b      	b.n	8004be4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004bac:	4b85      	ldr	r3, [pc, #532]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a84      	ldr	r2, [pc, #528]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004bb2:	f023 0301 	bic.w	r3, r3, #1
 8004bb6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004bb8:	f7fd fbbe 	bl	8002338 <HAL_GetTick>
 8004bbc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004bbe:	e009      	b.n	8004bd4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bc0:	f7fd fbba 	bl	8002338 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d902      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	f000 bd53 	b.w	800567a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004bd4:	4b7b      	ldr	r3, [pc, #492]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1ef      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x2f0>
 8004be0:	e000      	b.n	8004be4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004be2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 808b 	beq.w	8004d08 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d005      	beq.n	8004c04 <HAL_RCC_OscConfig+0x334>
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfa:	2b0c      	cmp	r3, #12
 8004bfc:	d109      	bne.n	8004c12 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d106      	bne.n	8004c12 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d17d      	bne.n	8004d08 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f000 bd34 	b.w	800567a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c1a:	d106      	bne.n	8004c2a <HAL_RCC_OscConfig+0x35a>
 8004c1c:	4b69      	ldr	r3, [pc, #420]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a68      	ldr	r2, [pc, #416]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	e041      	b.n	8004cae <HAL_RCC_OscConfig+0x3de>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c32:	d112      	bne.n	8004c5a <HAL_RCC_OscConfig+0x38a>
 8004c34:	4b63      	ldr	r3, [pc, #396]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a62      	ldr	r2, [pc, #392]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	4b60      	ldr	r3, [pc, #384]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a5f      	ldr	r2, [pc, #380]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c46:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004c4a:	6013      	str	r3, [r2, #0]
 8004c4c:	4b5d      	ldr	r3, [pc, #372]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a5c      	ldr	r2, [pc, #368]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	e029      	b.n	8004cae <HAL_RCC_OscConfig+0x3de>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004c62:	d112      	bne.n	8004c8a <HAL_RCC_OscConfig+0x3ba>
 8004c64:	4b57      	ldr	r3, [pc, #348]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a56      	ldr	r2, [pc, #344]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	4b54      	ldr	r3, [pc, #336]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a53      	ldr	r2, [pc, #332]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	4b51      	ldr	r3, [pc, #324]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a50      	ldr	r2, [pc, #320]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	e011      	b.n	8004cae <HAL_RCC_OscConfig+0x3de>
 8004c8a:	4b4e      	ldr	r3, [pc, #312]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a4d      	ldr	r2, [pc, #308]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	4b4b      	ldr	r3, [pc, #300]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a4a      	ldr	r2, [pc, #296]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	4b48      	ldr	r3, [pc, #288]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a47      	ldr	r2, [pc, #284]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004ca8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004cac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d014      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004cb6:	f7fd fb3f 	bl	8002338 <HAL_GetTick>
 8004cba:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cbc:	e009      	b.n	8004cd2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cbe:	f7fd fb3b 	bl	8002338 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b64      	cmp	r3, #100	@ 0x64
 8004cca:	d902      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	f000 bcd4 	b.w	800567a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cd2:	4b3c      	ldr	r3, [pc, #240]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0ef      	beq.n	8004cbe <HAL_RCC_OscConfig+0x3ee>
 8004cde:	e013      	b.n	8004d08 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004ce0:	f7fd fb2a 	bl	8002338 <HAL_GetTick>
 8004ce4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ce6:	e009      	b.n	8004cfc <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce8:	f7fd fb26 	bl	8002338 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b64      	cmp	r3, #100	@ 0x64
 8004cf4:	d902      	bls.n	8004cfc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	f000 bcbf 	b.w	800567a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cfc:	4b31      	ldr	r3, [pc, #196]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1ef      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d05f      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d005      	beq.n	8004d26 <HAL_RCC_OscConfig+0x456>
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1c:	2b0c      	cmp	r3, #12
 8004d1e:	d114      	bne.n	8004d4a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d111      	bne.n	8004d4a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d102      	bne.n	8004d34 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f000 bca3 	b.w	800567a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004d34:	4b23      	ldr	r3, [pc, #140]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	041b      	lsls	r3, r3, #16
 8004d42:	4920      	ldr	r1, [pc, #128]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d48:	e044      	b.n	8004dd4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d024      	beq.n	8004d9c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004d52:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d5c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d5e:	f7fd faeb 	bl	8002338 <HAL_GetTick>
 8004d62:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d64:	e009      	b.n	8004d7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d66:	f7fd fae7 	bl	8002338 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d902      	bls.n	8004d7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	f000 bc80 	b.w	800567a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d7a:	4b12      	ldr	r3, [pc, #72]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0ef      	beq.n	8004d66 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004d86:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	041b      	lsls	r3, r3, #16
 8004d94:	490b      	ldr	r1, [pc, #44]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	610b      	str	r3, [r1, #16]
 8004d9a:	e01b      	b.n	8004dd4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004d9c:	4b09      	ldr	r3, [pc, #36]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a08      	ldr	r2, [pc, #32]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f4>)
 8004da2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004da6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004da8:	f7fd fac6 	bl	8002338 <HAL_GetTick>
 8004dac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dae:	e00b      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004db0:	f7fd fac2 	bl	8002338 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d904      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	f000 bc5b 	b.w	800567a <HAL_RCC_OscConfig+0xdaa>
 8004dc4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dc8:	4baf      	ldr	r3, [pc, #700]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1ed      	bne.n	8004db0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 80c8 	beq.w	8004f72 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004de2:	2300      	movs	r3, #0
 8004de4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004de8:	4ba7      	ldr	r3, [pc, #668]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d111      	bne.n	8004e1a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004df6:	4ba4      	ldr	r3, [pc, #656]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dfc:	4aa2      	ldr	r2, [pc, #648]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004dfe:	f043 0304 	orr.w	r3, r3, #4
 8004e02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004e06:	4ba0      	ldr	r3, [pc, #640]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e1a:	4b9c      	ldr	r3, [pc, #624]	@ (800508c <HAL_RCC_OscConfig+0x7bc>)
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d119      	bne.n	8004e5a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004e26:	4b99      	ldr	r3, [pc, #612]	@ (800508c <HAL_RCC_OscConfig+0x7bc>)
 8004e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2a:	4a98      	ldr	r2, [pc, #608]	@ (800508c <HAL_RCC_OscConfig+0x7bc>)
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e32:	f7fd fa81 	bl	8002338 <HAL_GetTick>
 8004e36:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e38:	e009      	b.n	8004e4e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3a:	f7fd fa7d 	bl	8002338 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d902      	bls.n	8004e4e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	f000 bc16 	b.w	800567a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e4e:	4b8f      	ldr	r3, [pc, #572]	@ (800508c <HAL_RCC_OscConfig+0x7bc>)
 8004e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0ef      	beq.n	8004e3a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d05f      	beq.n	8004f22 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004e62:	4b89      	ldr	r3, [pc, #548]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e68:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d037      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d006      	beq.n	8004e90 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e3f4      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d01b      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004e9a:	4b7b      	ldr	r3, [pc, #492]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ea0:	4a79      	ldr	r2, [pc, #484]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004ea2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004ea6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004eaa:	f7fd fa45 	bl	8002338 <HAL_GetTick>
 8004eae:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eb2:	f7fd fa41 	bl	8002338 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b05      	cmp	r3, #5
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e3da      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004ec4:	4b70      	ldr	r3, [pc, #448]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004ec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1ef      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004ed2:	4b6d      	ldr	r3, [pc, #436]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ed8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	4969      	ldr	r1, [pc, #420]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004ee8:	4b67      	ldr	r3, [pc, #412]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eee:	4a66      	ldr	r2, [pc, #408]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004ef0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ef4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004ef8:	f7fd fa1e 	bl	8002338 <HAL_GetTick>
 8004efc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f00:	f7fd fa1a 	bl	8002338 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b05      	cmp	r3, #5
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e3b3      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004f12:	4b5d      	ldr	r3, [pc, #372]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0ef      	beq.n	8004f00 <HAL_RCC_OscConfig+0x630>
 8004f20:	e01b      	b.n	8004f5a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004f22:	4b59      	ldr	r3, [pc, #356]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f28:	4a57      	ldr	r2, [pc, #348]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004f2a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004f2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004f32:	f7fd fa01 	bl	8002338 <HAL_GetTick>
 8004f36:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f3a:	f7fd f9fd 	bl	8002338 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b05      	cmp	r3, #5
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e396      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f4c:	4b4e      	ldr	r3, [pc, #312]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004f4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1ef      	bne.n	8004f3a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f5a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d107      	bne.n	8004f72 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f62:	4b49      	ldr	r3, [pc, #292]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f68:	4a47      	ldr	r2, [pc, #284]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004f6a:	f023 0304 	bic.w	r3, r3, #4
 8004f6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 8111 	beq.w	80051a2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f80:	2300      	movs	r3, #0
 8004f82:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f86:	4b40      	ldr	r3, [pc, #256]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d111      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f94:	4b3c      	ldr	r3, [pc, #240]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f9a:	4a3b      	ldr	r2, [pc, #236]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004f9c:	f043 0304 	orr.w	r3, r3, #4
 8004fa0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004fa4:	4b38      	ldr	r3, [pc, #224]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8004fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004fb8:	4b34      	ldr	r3, [pc, #208]	@ (800508c <HAL_RCC_OscConfig+0x7bc>)
 8004fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d118      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004fc4:	4b31      	ldr	r3, [pc, #196]	@ (800508c <HAL_RCC_OscConfig+0x7bc>)
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc8:	4a30      	ldr	r2, [pc, #192]	@ (800508c <HAL_RCC_OscConfig+0x7bc>)
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fd0:	f7fd f9b2 	bl	8002338 <HAL_GetTick>
 8004fd4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd8:	f7fd f9ae 	bl	8002338 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e347      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004fea:	4b28      	ldr	r3, [pc, #160]	@ (800508c <HAL_RCC_OscConfig+0x7bc>)
 8004fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f0      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01f      	beq.n	8005042 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b00      	cmp	r3, #0
 800500c:	d010      	beq.n	8005030 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800500e:	4b1e      	ldr	r3, [pc, #120]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8005010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005014:	4a1c      	ldr	r2, [pc, #112]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8005016:	f043 0304 	orr.w	r3, r3, #4
 800501a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800501e:	4b1a      	ldr	r3, [pc, #104]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8005020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005024:	4a18      	ldr	r2, [pc, #96]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8005026:	f043 0301 	orr.w	r3, r3, #1
 800502a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800502e:	e018      	b.n	8005062 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005030:	4b15      	ldr	r3, [pc, #84]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8005032:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005036:	4a14      	ldr	r2, [pc, #80]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8005038:	f043 0301 	orr.w	r3, r3, #1
 800503c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005040:	e00f      	b.n	8005062 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005042:	4b11      	ldr	r3, [pc, #68]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8005044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005048:	4a0f      	ldr	r2, [pc, #60]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005052:	4b0d      	ldr	r3, [pc, #52]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 8005054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005058:	4a0b      	ldr	r2, [pc, #44]	@ (8005088 <HAL_RCC_OscConfig+0x7b8>)
 800505a:	f023 0304 	bic.w	r3, r3, #4
 800505e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d057      	beq.n	800511a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800506a:	f7fd f965 	bl	8002338 <HAL_GetTick>
 800506e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005070:	e00e      	b.n	8005090 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005072:	f7fd f961 	bl	8002338 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005080:	4293      	cmp	r3, r2
 8005082:	d905      	bls.n	8005090 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e2f8      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
 8005088:	46020c00 	.word	0x46020c00
 800508c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005090:	4b9c      	ldr	r3, [pc, #624]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 8005092:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0e9      	beq.n	8005072 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d01b      	beq.n	80050e2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80050aa:	4b96      	ldr	r3, [pc, #600]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80050ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050b0:	4a94      	ldr	r2, [pc, #592]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80050b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050bc:	f7fd f93c 	bl	8002338 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e2d3      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80050d2:	4b8c      	ldr	r3, [pc, #560]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80050d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0ed      	beq.n	80050bc <HAL_RCC_OscConfig+0x7ec>
 80050e0:	e053      	b.n	800518a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80050e2:	4b88      	ldr	r3, [pc, #544]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80050e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050e8:	4a86      	ldr	r2, [pc, #536]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80050ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80050f2:	e00a      	b.n	800510a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f4:	f7fd f920 	bl	8002338 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e2b7      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800510a:	4b7e      	ldr	r3, [pc, #504]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 800510c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005110:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1ed      	bne.n	80050f4 <HAL_RCC_OscConfig+0x824>
 8005118:	e037      	b.n	800518a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800511a:	f7fd f90d 	bl	8002338 <HAL_GetTick>
 800511e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005120:	e00a      	b.n	8005138 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005122:	f7fd f909 	bl	8002338 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005130:	4293      	cmp	r3, r2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e2a0      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005138:	4b72      	ldr	r3, [pc, #456]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 800513a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1ed      	bne.n	8005122 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005146:	4b6f      	ldr	r3, [pc, #444]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 8005148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800514c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01a      	beq.n	800518a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005154:	4b6b      	ldr	r3, [pc, #428]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 8005156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800515a:	4a6a      	ldr	r2, [pc, #424]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 800515c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005160:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005164:	e00a      	b.n	800517c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005166:	f7fd f8e7 	bl	8002338 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005174:	4293      	cmp	r3, r2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e27e      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800517c:	4b61      	ldr	r3, [pc, #388]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 800517e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005182:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1ed      	bne.n	8005166 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800518a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800518e:	2b01      	cmp	r3, #1
 8005190:	d107      	bne.n	80051a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005192:	4b5c      	ldr	r3, [pc, #368]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 8005194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005198:	4a5a      	ldr	r2, [pc, #360]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 800519a:	f023 0304 	bic.w	r3, r3, #4
 800519e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d036      	beq.n	800521c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d019      	beq.n	80051ea <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80051b6:	4b53      	ldr	r3, [pc, #332]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a52      	ldr	r2, [pc, #328]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80051bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80051c0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80051c2:	f7fd f8b9 	bl	8002338 <HAL_GetTick>
 80051c6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80051c8:	e008      	b.n	80051dc <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051ca:	f7fd f8b5 	bl	8002338 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e24e      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80051dc:	4b49      	ldr	r3, [pc, #292]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f0      	beq.n	80051ca <HAL_RCC_OscConfig+0x8fa>
 80051e8:	e018      	b.n	800521c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80051ea:	4b46      	ldr	r3, [pc, #280]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a45      	ldr	r2, [pc, #276]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80051f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051f4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80051f6:	f7fd f89f 	bl	8002338 <HAL_GetTick>
 80051fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051fe:	f7fd f89b 	bl	8002338 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e234      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005210:	4b3c      	ldr	r3, [pc, #240]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1f0      	bne.n	80051fe <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005224:	2b00      	cmp	r3, #0
 8005226:	d036      	beq.n	8005296 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522c:	2b00      	cmp	r3, #0
 800522e:	d019      	beq.n	8005264 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005230:	4b34      	ldr	r3, [pc, #208]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a33      	ldr	r2, [pc, #204]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 8005236:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800523a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800523c:	f7fd f87c 	bl	8002338 <HAL_GetTick>
 8005240:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005244:	f7fd f878 	bl	8002338 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e211      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005256:	4b2b      	ldr	r3, [pc, #172]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCC_OscConfig+0x974>
 8005262:	e018      	b.n	8005296 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005264:	4b27      	ldr	r3, [pc, #156]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a26      	ldr	r2, [pc, #152]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 800526a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800526e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005270:	f7fd f862 	bl	8002338 <HAL_GetTick>
 8005274:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005278:	f7fd f85e 	bl	8002338 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e1f7      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800528a:	4b1e      	ldr	r3, [pc, #120]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d07f      	beq.n	80053a2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d062      	beq.n	8005370 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80052aa:	4b16      	ldr	r3, [pc, #88]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	4a15      	ldr	r2, [pc, #84]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80052b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80052b4:	6093      	str	r3, [r2, #8]
 80052b6:	4b13      	ldr	r3, [pc, #76]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c2:	4910      	ldr	r1, [pc, #64]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80052d0:	d309      	bcc.n	80052e6 <HAL_RCC_OscConfig+0xa16>
 80052d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f023 021f 	bic.w	r2, r3, #31
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	4909      	ldr	r1, [pc, #36]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60cb      	str	r3, [r1, #12]
 80052e4:	e02a      	b.n	800533c <HAL_RCC_OscConfig+0xa6c>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	da0c      	bge.n	8005308 <HAL_RCC_OscConfig+0xa38>
 80052ee:	4b05      	ldr	r3, [pc, #20]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	015b      	lsls	r3, r3, #5
 80052fc:	4901      	ldr	r1, [pc, #4]	@ (8005304 <HAL_RCC_OscConfig+0xa34>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	60cb      	str	r3, [r1, #12]
 8005302:	e01b      	b.n	800533c <HAL_RCC_OscConfig+0xa6c>
 8005304:	46020c00 	.word	0x46020c00
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005310:	d30a      	bcc.n	8005328 <HAL_RCC_OscConfig+0xa58>
 8005312:	4ba1      	ldr	r3, [pc, #644]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	029b      	lsls	r3, r3, #10
 8005320:	499d      	ldr	r1, [pc, #628]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 8005322:	4313      	orrs	r3, r2
 8005324:	60cb      	str	r3, [r1, #12]
 8005326:	e009      	b.n	800533c <HAL_RCC_OscConfig+0xa6c>
 8005328:	4b9b      	ldr	r3, [pc, #620]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	03db      	lsls	r3, r3, #15
 8005336:	4998      	ldr	r1, [pc, #608]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 8005338:	4313      	orrs	r3, r2
 800533a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800533c:	4b96      	ldr	r3, [pc, #600]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a95      	ldr	r2, [pc, #596]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 8005342:	f043 0310 	orr.w	r3, r3, #16
 8005346:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005348:	f7fc fff6 	bl	8002338 <HAL_GetTick>
 800534c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005350:	f7fc fff2 	bl	8002338 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e18b      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005362:	4b8d      	ldr	r3, [pc, #564]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0xa80>
 800536e:	e018      	b.n	80053a2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005370:	4b89      	ldr	r3, [pc, #548]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a88      	ldr	r2, [pc, #544]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 8005376:	f023 0310 	bic.w	r3, r3, #16
 800537a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800537c:	f7fc ffdc 	bl	8002338 <HAL_GetTick>
 8005380:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005384:	f7fc ffd8 	bl	8002338 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e171      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005396:	4b80      	ldr	r3, [pc, #512]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f0      	bne.n	8005384 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 8166 	beq.w	8005678 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80053ac:	2300      	movs	r3, #0
 80053ae:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053b2:	4b79      	ldr	r3, [pc, #484]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	f003 030c 	and.w	r3, r3, #12
 80053ba:	2b0c      	cmp	r3, #12
 80053bc:	f000 80f2 	beq.w	80055a4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	f040 80c5 	bne.w	8005554 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80053ca:	4b73      	ldr	r3, [pc, #460]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a72      	ldr	r2, [pc, #456]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 80053d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053d4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80053d6:	f7fc ffaf 	bl	8002338 <HAL_GetTick>
 80053da:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053de:	f7fc ffab 	bl	8002338 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e144      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80053f0:	4b69      	ldr	r3, [pc, #420]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f0      	bne.n	80053de <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053fc:	4b66      	ldr	r3, [pc, #408]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 80053fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d111      	bne.n	800542e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800540a:	4b63      	ldr	r3, [pc, #396]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 800540c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005410:	4a61      	ldr	r2, [pc, #388]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 8005412:	f043 0304 	orr.w	r3, r3, #4
 8005416:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800541a:	4b5f      	ldr	r3, [pc, #380]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 800541c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005428:	2301      	movs	r3, #1
 800542a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800542e:	4b5b      	ldr	r3, [pc, #364]	@ (800559c <HAL_RCC_OscConfig+0xccc>)
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005436:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800543a:	d102      	bne.n	8005442 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800543c:	2301      	movs	r3, #1
 800543e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005442:	4b56      	ldr	r3, [pc, #344]	@ (800559c <HAL_RCC_OscConfig+0xccc>)
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	4a55      	ldr	r2, [pc, #340]	@ (800559c <HAL_RCC_OscConfig+0xccc>)
 8005448:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800544c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800544e:	4b52      	ldr	r3, [pc, #328]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 8005450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005456:	f023 0303 	bic.w	r3, r3, #3
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005462:	3a01      	subs	r2, #1
 8005464:	0212      	lsls	r2, r2, #8
 8005466:	4311      	orrs	r1, r2
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800546c:	430a      	orrs	r2, r1
 800546e:	494a      	ldr	r1, [pc, #296]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 8005470:	4313      	orrs	r3, r2
 8005472:	628b      	str	r3, [r1, #40]	@ 0x28
 8005474:	4b48      	ldr	r3, [pc, #288]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 8005476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005478:	4b49      	ldr	r3, [pc, #292]	@ (80055a0 <HAL_RCC_OscConfig+0xcd0>)
 800547a:	4013      	ands	r3, r2
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005480:	3a01      	subs	r2, #1
 8005482:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800548a:	3a01      	subs	r2, #1
 800548c:	0252      	lsls	r2, r2, #9
 800548e:	b292      	uxth	r2, r2
 8005490:	4311      	orrs	r1, r2
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005496:	3a01      	subs	r2, #1
 8005498:	0412      	lsls	r2, r2, #16
 800549a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800549e:	4311      	orrs	r1, r2
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80054a4:	3a01      	subs	r2, #1
 80054a6:	0612      	lsls	r2, r2, #24
 80054a8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80054ac:	430a      	orrs	r2, r1
 80054ae:	493a      	ldr	r1, [pc, #232]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80054b4:	4b38      	ldr	r3, [pc, #224]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 80054b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b8:	4a37      	ldr	r2, [pc, #220]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 80054ba:	f023 0310 	bic.w	r3, r3, #16
 80054be:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c4:	4a34      	ldr	r2, [pc, #208]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80054ca:	4b33      	ldr	r3, [pc, #204]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 80054cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ce:	4a32      	ldr	r2, [pc, #200]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 80054d0:	f043 0310 	orr.w	r3, r3, #16
 80054d4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80054d6:	4b30      	ldr	r3, [pc, #192]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 80054d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054da:	f023 020c 	bic.w	r2, r3, #12
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e2:	492d      	ldr	r1, [pc, #180]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80054e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d105      	bne.n	80054fc <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80054f0:	4b2a      	ldr	r3, [pc, #168]	@ (800559c <HAL_RCC_OscConfig+0xccc>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4a29      	ldr	r2, [pc, #164]	@ (800559c <HAL_RCC_OscConfig+0xccc>)
 80054f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054fa:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80054fc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005500:	2b01      	cmp	r3, #1
 8005502:	d107      	bne.n	8005514 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005504:	4b24      	ldr	r3, [pc, #144]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 8005506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800550a:	4a23      	ldr	r2, [pc, #140]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 800550c:	f023 0304 	bic.w	r3, r3, #4
 8005510:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005514:	4b20      	ldr	r3, [pc, #128]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1f      	ldr	r2, [pc, #124]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 800551a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800551e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005520:	f7fc ff0a 	bl	8002338 <HAL_GetTick>
 8005524:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005528:	f7fc ff06 	bl	8002338 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e09f      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800553a:	4b17      	ldr	r3, [pc, #92]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005546:	4b14      	ldr	r3, [pc, #80]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 8005548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554a:	4a13      	ldr	r2, [pc, #76]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 800554c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005550:	6293      	str	r3, [r2, #40]	@ 0x28
 8005552:	e091      	b.n	8005678 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005554:	4b10      	ldr	r3, [pc, #64]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a0f      	ldr	r2, [pc, #60]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 800555a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800555e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005560:	f7fc feea 	bl	8002338 <HAL_GetTick>
 8005564:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005568:	f7fc fee6 	bl	8002338 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e07f      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800557a:	4b07      	ldr	r3, [pc, #28]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1f0      	bne.n	8005568 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005586:	4b04      	ldr	r3, [pc, #16]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 8005588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558a:	4a03      	ldr	r2, [pc, #12]	@ (8005598 <HAL_RCC_OscConfig+0xcc8>)
 800558c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005590:	f023 0303 	bic.w	r3, r3, #3
 8005594:	6293      	str	r3, [r2, #40]	@ 0x28
 8005596:	e06f      	b.n	8005678 <HAL_RCC_OscConfig+0xda8>
 8005598:	46020c00 	.word	0x46020c00
 800559c:	46020800 	.word	0x46020800
 80055a0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80055a4:	4b37      	ldr	r3, [pc, #220]	@ (8005684 <HAL_RCC_OscConfig+0xdb4>)
 80055a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80055aa:	4b36      	ldr	r3, [pc, #216]	@ (8005684 <HAL_RCC_OscConfig+0xdb4>)
 80055ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ae:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d039      	beq.n	800562c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f003 0203 	and.w	r2, r3, #3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d132      	bne.n	800562c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	0a1b      	lsrs	r3, r3, #8
 80055ca:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d129      	bne.n	800562c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d122      	bne.n	800562c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d11a      	bne.n	800562c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	0a5b      	lsrs	r3, r3, #9
 80055fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005602:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005604:	429a      	cmp	r2, r3
 8005606:	d111      	bne.n	800562c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	0c1b      	lsrs	r3, r3, #16
 800560c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005614:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005616:	429a      	cmp	r2, r3
 8005618:	d108      	bne.n	800562c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	0e1b      	lsrs	r3, r3, #24
 800561e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005626:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005628:	429a      	cmp	r2, r3
 800562a:	d001      	beq.n	8005630 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e024      	b.n	800567a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005630:	4b14      	ldr	r3, [pc, #80]	@ (8005684 <HAL_RCC_OscConfig+0xdb4>)
 8005632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005634:	08db      	lsrs	r3, r3, #3
 8005636:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800563e:	429a      	cmp	r2, r3
 8005640:	d01a      	beq.n	8005678 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005642:	4b10      	ldr	r3, [pc, #64]	@ (8005684 <HAL_RCC_OscConfig+0xdb4>)
 8005644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005646:	4a0f      	ldr	r2, [pc, #60]	@ (8005684 <HAL_RCC_OscConfig+0xdb4>)
 8005648:	f023 0310 	bic.w	r3, r3, #16
 800564c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564e:	f7fc fe73 	bl	8002338 <HAL_GetTick>
 8005652:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005654:	bf00      	nop
 8005656:	f7fc fe6f 	bl	8002338 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565e:	4293      	cmp	r3, r2
 8005660:	d0f9      	beq.n	8005656 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005666:	4a07      	ldr	r2, [pc, #28]	@ (8005684 <HAL_RCC_OscConfig+0xdb4>)
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800566c:	4b05      	ldr	r3, [pc, #20]	@ (8005684 <HAL_RCC_OscConfig+0xdb4>)
 800566e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005670:	4a04      	ldr	r2, [pc, #16]	@ (8005684 <HAL_RCC_OscConfig+0xdb4>)
 8005672:	f043 0310 	orr.w	r3, r3, #16
 8005676:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3738      	adds	r7, #56	@ 0x38
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	46020c00 	.word	0x46020c00

08005688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e1d9      	b.n	8005a50 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800569c:	4b9b      	ldr	r3, [pc, #620]	@ (800590c <HAL_RCC_ClockConfig+0x284>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d910      	bls.n	80056cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056aa:	4b98      	ldr	r3, [pc, #608]	@ (800590c <HAL_RCC_ClockConfig+0x284>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f023 020f 	bic.w	r2, r3, #15
 80056b2:	4996      	ldr	r1, [pc, #600]	@ (800590c <HAL_RCC_ClockConfig+0x284>)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ba:	4b94      	ldr	r3, [pc, #592]	@ (800590c <HAL_RCC_ClockConfig+0x284>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d001      	beq.n	80056cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e1c1      	b.n	8005a50 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d010      	beq.n	80056fa <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	695a      	ldr	r2, [r3, #20]
 80056dc:	4b8c      	ldr	r3, [pc, #560]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 80056de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d908      	bls.n	80056fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80056e8:	4b89      	ldr	r3, [pc, #548]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 80056ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	4986      	ldr	r1, [pc, #536]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	2b00      	cmp	r3, #0
 8005704:	d012      	beq.n	800572c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691a      	ldr	r2, [r3, #16]
 800570a:	4b81      	ldr	r3, [pc, #516]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	091b      	lsrs	r3, r3, #4
 8005710:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005714:	429a      	cmp	r2, r3
 8005716:	d909      	bls.n	800572c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005718:	4b7d      	ldr	r3, [pc, #500]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	497a      	ldr	r1, [pc, #488]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 8005728:	4313      	orrs	r3, r2
 800572a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d010      	beq.n	800575a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	4b74      	ldr	r3, [pc, #464]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005744:	429a      	cmp	r2, r3
 8005746:	d908      	bls.n	800575a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005748:	4b71      	ldr	r3, [pc, #452]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	496e      	ldr	r1, [pc, #440]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 8005756:	4313      	orrs	r3, r2
 8005758:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d010      	beq.n	8005788 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	4b69      	ldr	r3, [pc, #420]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	429a      	cmp	r2, r3
 8005774:	d908      	bls.n	8005788 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005776:	4b66      	ldr	r3, [pc, #408]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f023 020f 	bic.w	r2, r3, #15
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	4963      	ldr	r1, [pc, #396]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 8005784:	4313      	orrs	r3, r2
 8005786:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 80d2 	beq.w	800593a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d143      	bne.n	800582a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 80057a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d110      	bne.n	80057d2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80057b0:	4b57      	ldr	r3, [pc, #348]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 80057b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057b6:	4a56      	ldr	r2, [pc, #344]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 80057b8:	f043 0304 	orr.w	r3, r3, #4
 80057bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80057c0:	4b53      	ldr	r3, [pc, #332]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 80057c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	60bb      	str	r3, [r7, #8]
 80057cc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80057ce:	2301      	movs	r3, #1
 80057d0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80057d2:	f7fc fdb1 	bl	8002338 <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80057d8:	4b4e      	ldr	r3, [pc, #312]	@ (8005914 <HAL_RCC_ClockConfig+0x28c>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00f      	beq.n	8005804 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80057e6:	f7fc fda7 	bl	8002338 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e12b      	b.n	8005a50 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80057f8:	4b46      	ldr	r3, [pc, #280]	@ (8005914 <HAL_RCC_ClockConfig+0x28c>)
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0f0      	beq.n	80057e6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005804:	7dfb      	ldrb	r3, [r7, #23]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d107      	bne.n	800581a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800580a:	4b41      	ldr	r3, [pc, #260]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 800580c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005810:	4a3f      	ldr	r2, [pc, #252]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 8005812:	f023 0304 	bic.w	r3, r3, #4
 8005816:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800581a:	4b3d      	ldr	r3, [pc, #244]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d121      	bne.n	800586a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e112      	b.n	8005a50 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b02      	cmp	r3, #2
 8005830:	d107      	bne.n	8005842 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005832:	4b37      	ldr	r3, [pc, #220]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d115      	bne.n	800586a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e106      	b.n	8005a50 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d107      	bne.n	800585a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800584a:	4b31      	ldr	r3, [pc, #196]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e0fa      	b.n	8005a50 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800585a:	4b2d      	ldr	r3, [pc, #180]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e0f2      	b.n	8005a50 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800586a:	4b29      	ldr	r3, [pc, #164]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f023 0203 	bic.w	r2, r3, #3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	4926      	ldr	r1, [pc, #152]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 8005878:	4313      	orrs	r3, r2
 800587a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800587c:	f7fc fd5c 	bl	8002338 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2b03      	cmp	r3, #3
 8005888:	d112      	bne.n	80058b0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800588a:	e00a      	b.n	80058a2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800588c:	f7fc fd54 	bl	8002338 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800589a:	4293      	cmp	r3, r2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e0d6      	b.n	8005a50 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	f003 030c 	and.w	r3, r3, #12
 80058aa:	2b0c      	cmp	r3, #12
 80058ac:	d1ee      	bne.n	800588c <HAL_RCC_ClockConfig+0x204>
 80058ae:	e044      	b.n	800593a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d112      	bne.n	80058de <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058b8:	e00a      	b.n	80058d0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ba:	f7fc fd3d 	bl	8002338 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e0bf      	b.n	8005a50 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	f003 030c 	and.w	r3, r3, #12
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d1ee      	bne.n	80058ba <HAL_RCC_ClockConfig+0x232>
 80058dc:	e02d      	b.n	800593a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d123      	bne.n	800592e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80058e6:	e00a      	b.n	80058fe <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e8:	f7fc fd26 	bl	8002338 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e0a8      	b.n	8005a50 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80058fe:	4b04      	ldr	r3, [pc, #16]	@ (8005910 <HAL_RCC_ClockConfig+0x288>)
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	f003 030c 	and.w	r3, r3, #12
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1ee      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x260>
 800590a:	e016      	b.n	800593a <HAL_RCC_ClockConfig+0x2b2>
 800590c:	40022000 	.word	0x40022000
 8005910:	46020c00 	.word	0x46020c00
 8005914:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005918:	f7fc fd0e 	bl	8002338 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e090      	b.n	8005a50 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800592e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a58 <HAL_RCC_ClockConfig+0x3d0>)
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f003 030c 	and.w	r3, r3, #12
 8005936:	2b04      	cmp	r3, #4
 8005938:	d1ee      	bne.n	8005918 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d010      	beq.n	8005968 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	4b43      	ldr	r3, [pc, #268]	@ (8005a58 <HAL_RCC_ClockConfig+0x3d0>)
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	429a      	cmp	r2, r3
 8005954:	d208      	bcs.n	8005968 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005956:	4b40      	ldr	r3, [pc, #256]	@ (8005a58 <HAL_RCC_ClockConfig+0x3d0>)
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f023 020f 	bic.w	r2, r3, #15
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	493d      	ldr	r1, [pc, #244]	@ (8005a58 <HAL_RCC_ClockConfig+0x3d0>)
 8005964:	4313      	orrs	r3, r2
 8005966:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005968:	4b3c      	ldr	r3, [pc, #240]	@ (8005a5c <HAL_RCC_ClockConfig+0x3d4>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 030f 	and.w	r3, r3, #15
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d210      	bcs.n	8005998 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005976:	4b39      	ldr	r3, [pc, #228]	@ (8005a5c <HAL_RCC_ClockConfig+0x3d4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f023 020f 	bic.w	r2, r3, #15
 800597e:	4937      	ldr	r1, [pc, #220]	@ (8005a5c <HAL_RCC_ClockConfig+0x3d4>)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	4313      	orrs	r3, r2
 8005984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005986:	4b35      	ldr	r3, [pc, #212]	@ (8005a5c <HAL_RCC_ClockConfig+0x3d4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d001      	beq.n	8005998 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e05b      	b.n	8005a50 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d010      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a58 <HAL_RCC_ClockConfig+0x3d0>)
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d208      	bcs.n	80059c6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80059b4:	4b28      	ldr	r3, [pc, #160]	@ (8005a58 <HAL_RCC_ClockConfig+0x3d0>)
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	4925      	ldr	r1, [pc, #148]	@ (8005a58 <HAL_RCC_ClockConfig+0x3d0>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d012      	beq.n	80059f8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	4b20      	ldr	r3, [pc, #128]	@ (8005a58 <HAL_RCC_ClockConfig+0x3d0>)
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	091b      	lsrs	r3, r3, #4
 80059dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d209      	bcs.n	80059f8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80059e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005a58 <HAL_RCC_ClockConfig+0x3d0>)
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	4919      	ldr	r1, [pc, #100]	@ (8005a58 <HAL_RCC_ClockConfig+0x3d0>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d010      	beq.n	8005a26 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	695a      	ldr	r2, [r3, #20]
 8005a08:	4b13      	ldr	r3, [pc, #76]	@ (8005a58 <HAL_RCC_ClockConfig+0x3d0>)
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d208      	bcs.n	8005a26 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005a14:	4b10      	ldr	r3, [pc, #64]	@ (8005a58 <HAL_RCC_ClockConfig+0x3d0>)
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	490d      	ldr	r1, [pc, #52]	@ (8005a58 <HAL_RCC_ClockConfig+0x3d0>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005a26:	f000 f821 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a58 <HAL_RCC_ClockConfig+0x3d0>)
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	490a      	ldr	r1, [pc, #40]	@ (8005a60 <HAL_RCC_ClockConfig+0x3d8>)
 8005a36:	5ccb      	ldrb	r3, [r1, r3]
 8005a38:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3c:	4a09      	ldr	r2, [pc, #36]	@ (8005a64 <HAL_RCC_ClockConfig+0x3dc>)
 8005a3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a40:	4b09      	ldr	r3, [pc, #36]	@ (8005a68 <HAL_RCC_ClockConfig+0x3e0>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fc fbed 	bl	8002224 <HAL_InitTick>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	73fb      	strb	r3, [r7, #15]

  return status;
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	46020c00 	.word	0x46020c00
 8005a5c:	40022000 	.word	0x40022000
 8005a60:	08010630 	.word	0x08010630
 8005a64:	20000000 	.word	0x20000000
 8005a68:	20000004 	.word	0x20000004

08005a6c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b08b      	sub	sp, #44	@ 0x2c
 8005a70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a7a:	4b78      	ldr	r3, [pc, #480]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	f003 030c 	and.w	r3, r3, #12
 8005a82:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a84:	4b75      	ldr	r3, [pc, #468]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x34>
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	2b0c      	cmp	r3, #12
 8005a98:	d121      	bne.n	8005ade <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d11e      	bne.n	8005ade <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005aa0:	4b6e      	ldr	r3, [pc, #440]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d107      	bne.n	8005abc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005aac:	4b6b      	ldr	r3, [pc, #428]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005aae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ab2:	0b1b      	lsrs	r3, r3, #12
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aba:	e005      	b.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005abc:	4b67      	ldr	r3, [pc, #412]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	0f1b      	lsrs	r3, r3, #28
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ac8:	4a65      	ldr	r2, [pc, #404]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ad0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d110      	bne.n	8005afa <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005adc:	e00d      	b.n	8005afa <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ade:	4b5f      	ldr	r3, [pc, #380]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f003 030c 	and.w	r3, r3, #12
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d102      	bne.n	8005af0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005aea:	4b5e      	ldr	r3, [pc, #376]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005aec:	623b      	str	r3, [r7, #32]
 8005aee:	e004      	b.n	8005afa <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d101      	bne.n	8005afa <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005af6:	4b5b      	ldr	r3, [pc, #364]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005af8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b0c      	cmp	r3, #12
 8005afe:	f040 80a5 	bne.w	8005c4c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005b02:	4b56      	ldr	r3, [pc, #344]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b06:	f003 0303 	and.w	r3, r3, #3
 8005b0a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005b0c:	4b53      	ldr	r3, [pc, #332]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b10:	0a1b      	lsrs	r3, r3, #8
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	3301      	adds	r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005b1a:	4b50      	ldr	r3, [pc, #320]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1e:	091b      	lsrs	r3, r3, #4
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005b26:	4b4d      	ldr	r3, [pc, #308]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2a:	08db      	lsrs	r3, r3, #3
 8005b2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	fb02 f303 	mul.w	r3, r2, r3
 8005b36:	ee07 3a90 	vmov	s15, r3
 8005b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d003      	beq.n	8005b50 <HAL_RCC_GetSysClockFreq+0xe4>
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d022      	beq.n	8005b94 <HAL_RCC_GetSysClockFreq+0x128>
 8005b4e:	e043      	b.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005c68 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b62:	4b3e      	ldr	r3, [pc, #248]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b72:	ed97 6a01 	vldr	s12, [r7, #4]
 8005b76:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005c6c <HAL_RCC_GetSysClockFreq+0x200>
 8005b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b92:	e046      	b.n	8005c22 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	ee07 3a90 	vmov	s15, r3
 8005b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005c68 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005bb6:	ed97 6a01 	vldr	s12, [r7, #4]
 8005bba:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005c6c <HAL_RCC_GetSysClockFreq+0x200>
 8005bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005bc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bd6:	e024      	b.n	8005c22 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	ee07 3a90 	vmov	s15, r3
 8005be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf8:	ee07 3a90 	vmov	s15, r3
 8005bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c00:	ed97 6a01 	vldr	s12, [r7, #4]
 8005c04:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005c6c <HAL_RCC_GetSysClockFreq+0x200>
 8005c08:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c20:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005c22:	4b0e      	ldr	r3, [pc, #56]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c26:	0e1b      	lsrs	r3, r3, #24
 8005c28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c46:	ee17 3a90 	vmov	r3, s15
 8005c4a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	372c      	adds	r7, #44	@ 0x2c
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	46020c00 	.word	0x46020c00
 8005c60:	08010648 	.word	0x08010648
 8005c64:	00f42400 	.word	0x00f42400
 8005c68:	4b742400 	.word	0x4b742400
 8005c6c:	46000000 	.word	0x46000000

08005c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005c74:	f7ff fefa 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	4b07      	ldr	r3, [pc, #28]	@ (8005c98 <HAL_RCC_GetHCLKFreq+0x28>)
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	4906      	ldr	r1, [pc, #24]	@ (8005c9c <HAL_RCC_GetHCLKFreq+0x2c>)
 8005c84:	5ccb      	ldrb	r3, [r1, r3]
 8005c86:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8a:	4a05      	ldr	r2, [pc, #20]	@ (8005ca0 <HAL_RCC_GetHCLKFreq+0x30>)
 8005c8c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005c8e:	4b04      	ldr	r3, [pc, #16]	@ (8005ca0 <HAL_RCC_GetHCLKFreq+0x30>)
 8005c90:	681b      	ldr	r3, [r3, #0]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	46020c00 	.word	0x46020c00
 8005c9c:	08010630 	.word	0x08010630
 8005ca0:	20000000 	.word	0x20000000

08005ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005ca8:	f7ff ffe2 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005cac:	4602      	mov	r2, r0
 8005cae:	4b05      	ldr	r3, [pc, #20]	@ (8005cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	091b      	lsrs	r3, r3, #4
 8005cb4:	f003 0307 	and.w	r3, r3, #7
 8005cb8:	4903      	ldr	r1, [pc, #12]	@ (8005cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cba:	5ccb      	ldrb	r3, [r1, r3]
 8005cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	46020c00 	.word	0x46020c00
 8005cc8:	08010640 	.word	0x08010640

08005ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005cd0:	f7ff ffce 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	4b05      	ldr	r3, [pc, #20]	@ (8005cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	0a1b      	lsrs	r3, r3, #8
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	4903      	ldr	r1, [pc, #12]	@ (8005cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ce2:	5ccb      	ldrb	r3, [r1, r3]
 8005ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	46020c00 	.word	0x46020c00
 8005cf0:	08010640 	.word	0x08010640

08005cf4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005cf8:	f7ff ffba 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	4b05      	ldr	r3, [pc, #20]	@ (8005d14 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d02:	091b      	lsrs	r3, r3, #4
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	4903      	ldr	r1, [pc, #12]	@ (8005d18 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005d0a:	5ccb      	ldrb	r3, [r1, r3]
 8005d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	46020c00 	.word	0x46020c00
 8005d18:	08010640 	.word	0x08010640

08005d1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d24:	4b3e      	ldr	r3, [pc, #248]	@ (8005e20 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d32:	f7fe fdaf 	bl	8004894 <HAL_PWREx_GetVoltageRange>
 8005d36:	6178      	str	r0, [r7, #20]
 8005d38:	e019      	b.n	8005d6e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d3a:	4b39      	ldr	r3, [pc, #228]	@ (8005e20 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d40:	4a37      	ldr	r2, [pc, #220]	@ (8005e20 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d42:	f043 0304 	orr.w	r3, r3, #4
 8005d46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005d4a:	4b35      	ldr	r3, [pc, #212]	@ (8005e20 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d58:	f7fe fd9c 	bl	8004894 <HAL_PWREx_GetVoltageRange>
 8005d5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d5e:	4b30      	ldr	r3, [pc, #192]	@ (8005e20 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d64:	4a2e      	ldr	r2, [pc, #184]	@ (8005e20 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d66:	f023 0304 	bic.w	r3, r3, #4
 8005d6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d74:	d003      	beq.n	8005d7e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d7c:	d109      	bne.n	8005d92 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d84:	d202      	bcs.n	8005d8c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005d86:	2301      	movs	r3, #1
 8005d88:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005d8a:	e033      	b.n	8005df4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005d90:	e030      	b.n	8005df4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d98:	d208      	bcs.n	8005dac <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005da0:	d102      	bne.n	8005da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005da2:	2303      	movs	r3, #3
 8005da4:	613b      	str	r3, [r7, #16]
 8005da6:	e025      	b.n	8005df4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e035      	b.n	8005e18 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005db2:	d90f      	bls.n	8005dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d109      	bne.n	8005dce <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005dc0:	d902      	bls.n	8005dc8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	e015      	b.n	8005df4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005dc8:	2301      	movs	r3, #1
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	e012      	b.n	8005df4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005dce:	2300      	movs	r3, #0
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	e00f      	b.n	8005df4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dda:	d109      	bne.n	8005df0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005de2:	d102      	bne.n	8005dea <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005de4:	2301      	movs	r3, #1
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	e004      	b.n	8005df4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005dea:	2302      	movs	r3, #2
 8005dec:	613b      	str	r3, [r7, #16]
 8005dee:	e001      	b.n	8005df4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005df0:	2301      	movs	r3, #1
 8005df2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005df4:	4b0b      	ldr	r3, [pc, #44]	@ (8005e24 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f023 020f 	bic.w	r2, r3, #15
 8005dfc:	4909      	ldr	r1, [pc, #36]	@ (8005e24 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005e04:	4b07      	ldr	r3, [pc, #28]	@ (8005e24 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 030f 	and.w	r3, r3, #15
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d001      	beq.n	8005e16 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	46020c00 	.word	0x46020c00
 8005e24:	40022000 	.word	0x40022000

08005e28 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e2c:	b0c4      	sub	sp, #272	@ 0x110
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e34:	2300      	movs	r3, #0
 8005e36:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	f002 0401 	and.w	r4, r2, #1
 8005e4c:	2500      	movs	r5, #0
 8005e4e:	ea54 0305 	orrs.w	r3, r4, r5
 8005e52:	d00b      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005e54:	4bd5      	ldr	r3, [pc, #852]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e5a:	f023 0103 	bic.w	r1, r3, #3
 8005e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e64:	4ad1      	ldr	r2, [pc, #836]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005e66:	430b      	orrs	r3, r1
 8005e68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	f002 0802 	and.w	r8, r2, #2
 8005e78:	f04f 0900 	mov.w	r9, #0
 8005e7c:	ea58 0309 	orrs.w	r3, r8, r9
 8005e80:	d00b      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005e82:	4bca      	ldr	r3, [pc, #808]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e88:	f023 010c 	bic.w	r1, r3, #12
 8005e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e92:	4ac6      	ldr	r2, [pc, #792]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005e94:	430b      	orrs	r3, r1
 8005e96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea2:	f002 0a04 	and.w	sl, r2, #4
 8005ea6:	f04f 0b00 	mov.w	fp, #0
 8005eaa:	ea5a 030b 	orrs.w	r3, sl, fp
 8005eae:	d00b      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005eb0:	4bbe      	ldr	r3, [pc, #760]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005eb6:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec0:	4aba      	ldr	r2, [pc, #744]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005ec2:	430b      	orrs	r3, r1
 8005ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f002 0308 	and.w	r3, r2, #8
 8005ed4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ede:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	d00b      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005ee8:	4bb0      	ldr	r3, [pc, #704]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005eee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ef8:	4aac      	ldr	r2, [pc, #688]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005efa:	430b      	orrs	r3, r1
 8005efc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	f002 0310 	and.w	r3, r2, #16
 8005f0c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f10:	2300      	movs	r3, #0
 8005f12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f16:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	d00b      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005f20:	4ba2      	ldr	r3, [pc, #648]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f30:	4a9e      	ldr	r2, [pc, #632]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005f32:	430b      	orrs	r3, r1
 8005f34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005f44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f4e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4313      	orrs	r3, r2
 8005f56:	d00b      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005f58:	4b94      	ldr	r3, [pc, #592]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005f5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f5e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f68:	4a90      	ldr	r2, [pc, #576]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005f6a:	430b      	orrs	r3, r1
 8005f6c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f002 0320 	and.w	r3, r2, #32
 8005f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f80:	2300      	movs	r3, #0
 8005f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005f86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	d00b      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005f90:	4b86      	ldr	r3, [pc, #536]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f96:	f023 0107 	bic.w	r1, r3, #7
 8005f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fa0:	4a82      	ldr	r2, [pc, #520]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005fbe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	d00b      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005fc8:	4b78      	ldr	r3, [pc, #480]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fce:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fd8:	4a74      	ldr	r2, [pc, #464]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005fec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ff6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	d00b      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006000:	4b6a      	ldr	r3, [pc, #424]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006006:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800600a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800600e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006010:	4a66      	ldr	r2, [pc, #408]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006012:	430b      	orrs	r3, r1
 8006014:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006024:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006028:	2300      	movs	r3, #0
 800602a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800602e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006032:	460b      	mov	r3, r1
 8006034:	4313      	orrs	r3, r2
 8006036:	d00b      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006038:	4b5c      	ldr	r3, [pc, #368]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800603a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800603e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006046:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006048:	4a58      	ldr	r2, [pc, #352]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800604a:	430b      	orrs	r3, r1
 800604c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800605c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006060:	2300      	movs	r3, #0
 8006062:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006066:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800606a:	460b      	mov	r3, r1
 800606c:	4313      	orrs	r3, r2
 800606e:	d00b      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006070:	4b4e      	ldr	r3, [pc, #312]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006076:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800607a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800607e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006080:	4a4a      	ldr	r2, [pc, #296]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006082:	430b      	orrs	r3, r1
 8006084:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8006088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800608c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006090:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006094:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006098:	2300      	movs	r3, #0
 800609a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800609e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4313      	orrs	r3, r2
 80060a6:	d00b      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 80060a8:	4b40      	ldr	r3, [pc, #256]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80060aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060ae:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80060b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060b8:	4a3c      	ldr	r2, [pc, #240]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80060ba:	430b      	orrs	r3, r1
 80060bc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 80060c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80060cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060d0:	2300      	movs	r3, #0
 80060d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060d6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060da:	460b      	mov	r3, r1
 80060dc:	4313      	orrs	r3, r2
 80060de:	d00c      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 80060e0:	4b32      	ldr	r3, [pc, #200]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80060e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060e6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80060ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060f2:	4a2e      	ldr	r2, [pc, #184]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80060f4:	430b      	orrs	r3, r1
 80060f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006102:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006106:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800610a:	2300      	movs	r3, #0
 800610c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006110:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006114:	460b      	mov	r3, r1
 8006116:	4313      	orrs	r3, r2
 8006118:	d00c      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800611a:	4b24      	ldr	r3, [pc, #144]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800611c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006120:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800612c:	4a1f      	ldr	r2, [pc, #124]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800612e:	430b      	orrs	r3, r1
 8006130:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006140:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006144:	2300      	movs	r3, #0
 8006146:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800614a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800614e:	460b      	mov	r3, r1
 8006150:	4313      	orrs	r3, r2
 8006152:	d00c      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006154:	4b15      	ldr	r3, [pc, #84]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800615a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800615e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006166:	4a11      	ldr	r2, [pc, #68]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006168:	430b      	orrs	r3, r1
 800616a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800616e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800617a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800617e:	2300      	movs	r3, #0
 8006180:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006184:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006188:	460b      	mov	r3, r1
 800618a:	4313      	orrs	r3, r2
 800618c:	d010      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800618e:	4b07      	ldr	r3, [pc, #28]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006194:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800619c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061a0:	4a02      	ldr	r2, [pc, #8]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80061a2:	430b      	orrs	r3, r1
 80061a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80061a8:	e002      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80061aa:	bf00      	nop
 80061ac:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80061bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061c0:	2300      	movs	r3, #0
 80061c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061c6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80061ca:	460b      	mov	r3, r1
 80061cc:	4313      	orrs	r3, r2
 80061ce:	d04c      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80061d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061d8:	2b80      	cmp	r3, #128	@ 0x80
 80061da:	d02d      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80061dc:	2b80      	cmp	r3, #128	@ 0x80
 80061de:	d827      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80061e0:	2b60      	cmp	r3, #96	@ 0x60
 80061e2:	d02b      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80061e4:	2b60      	cmp	r3, #96	@ 0x60
 80061e6:	d823      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80061e8:	2b40      	cmp	r3, #64	@ 0x40
 80061ea:	d006      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80061ec:	2b40      	cmp	r3, #64	@ 0x40
 80061ee:	d81f      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d009      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80061f4:	2b20      	cmp	r3, #32
 80061f6:	d011      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80061f8:	e01a      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80061fa:	4bbe      	ldr	r3, [pc, #760]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fe:	4abd      	ldr	r2, [pc, #756]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006204:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006206:	e01a      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800620c:	3308      	adds	r3, #8
 800620e:	4618      	mov	r0, r3
 8006210:	f002 fc32 	bl	8008a78 <RCCEx_PLL2_Config>
 8006214:	4603      	mov	r3, r0
 8006216:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800621a:	e010      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800621c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006220:	332c      	adds	r3, #44	@ 0x2c
 8006222:	4618      	mov	r0, r3
 8006224:	f002 fcc0 	bl	8008ba8 <RCCEx_PLL3_Config>
 8006228:	4603      	mov	r3, r0
 800622a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800622e:	e006      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006236:	e002      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8006238:	bf00      	nop
 800623a:	e000      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800623c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800623e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10d      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006246:	4bab      	ldr	r3, [pc, #684]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006248:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800624c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8006250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006254:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006258:	4aa6      	ldr	r2, [pc, #664]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800625a:	430b      	orrs	r3, r1
 800625c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006260:	e003      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006262:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006266:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800626a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800626e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006272:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006276:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800627a:	2300      	movs	r3, #0
 800627c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006280:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006284:	460b      	mov	r3, r1
 8006286:	4313      	orrs	r3, r2
 8006288:	d053      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800628a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800628e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006296:	d033      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8006298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800629c:	d82c      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800629e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062a2:	d02f      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 80062a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062a8:	d826      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80062aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062ae:	d008      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 80062b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062b4:	d820      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80062ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062be:	d011      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80062c0:	e01a      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80062c2:	4b8c      	ldr	r3, [pc, #560]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c6:	4a8b      	ldr	r2, [pc, #556]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062cc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80062ce:	e01a      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062d4:	3308      	adds	r3, #8
 80062d6:	4618      	mov	r0, r3
 80062d8:	f002 fbce 	bl	8008a78 <RCCEx_PLL2_Config>
 80062dc:	4603      	mov	r3, r0
 80062de:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80062e2:	e010      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062e8:	332c      	adds	r3, #44	@ 0x2c
 80062ea:	4618      	mov	r0, r3
 80062ec:	f002 fc5c 	bl	8008ba8 <RCCEx_PLL3_Config>
 80062f0:	4603      	mov	r3, r0
 80062f2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80062f6:	e006      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80062fe:	e002      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8006300:	bf00      	nop
 8006302:	e000      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8006304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006306:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10d      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800630e:	4b79      	ldr	r3, [pc, #484]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006310:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006314:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800631c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006320:	4a74      	ldr	r2, [pc, #464]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006322:	430b      	orrs	r3, r1
 8006324:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006328:	e003      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800632a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800632e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800633e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006340:	2300      	movs	r3, #0
 8006342:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006344:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006348:	460b      	mov	r3, r1
 800634a:	4313      	orrs	r3, r2
 800634c:	d046      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800634e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006352:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006356:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800635a:	d028      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x586>
 800635c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006360:	d821      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8006362:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006366:	d022      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006368:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800636c:	d81b      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800636e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006372:	d01c      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006374:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006378:	d815      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800637a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800637e:	d008      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8006380:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006384:	d80f      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d011      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x586>
 800638a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800638e:	d00e      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006390:	e009      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006396:	3308      	adds	r3, #8
 8006398:	4618      	mov	r0, r3
 800639a:	f002 fb6d 	bl	8008a78 <RCCEx_PLL2_Config>
 800639e:	4603      	mov	r3, r0
 80063a0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80063a4:	e004      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80063ac:	e000      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 80063ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10d      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80063b8:	4b4e      	ldr	r3, [pc, #312]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063be:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80063c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80063ca:	4a4a      	ldr	r2, [pc, #296]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063cc:	430b      	orrs	r3, r1
 80063ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80063d2:	e003      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80063d8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80063dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80063e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80063ea:	2300      	movs	r3, #0
 80063ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80063ee:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80063f2:	460b      	mov	r3, r1
 80063f4:	4313      	orrs	r3, r2
 80063f6:	d03f      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80063f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006400:	2b04      	cmp	r3, #4
 8006402:	d81e      	bhi.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8006404:	a201      	add	r2, pc, #4	@ (adr r2, 800640c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640a:	bf00      	nop
 800640c:	0800644b 	.word	0x0800644b
 8006410:	08006421 	.word	0x08006421
 8006414:	0800642f 	.word	0x0800642f
 8006418:	0800644b 	.word	0x0800644b
 800641c:	0800644b 	.word	0x0800644b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006420:	4b34      	ldr	r3, [pc, #208]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006424:	4a33      	ldr	r2, [pc, #204]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800642a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800642c:	e00e      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800642e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006432:	332c      	adds	r3, #44	@ 0x2c
 8006434:	4618      	mov	r0, r3
 8006436:	f002 fbb7 	bl	8008ba8 <RCCEx_PLL3_Config>
 800643a:	4603      	mov	r3, r0
 800643c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006440:	e004      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006448:	e000      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 800644a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800644c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10d      	bne.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006454:	4b27      	ldr	r3, [pc, #156]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006456:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800645a:	f023 0107 	bic.w	r1, r3, #7
 800645e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006466:	4a23      	ldr	r2, [pc, #140]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006468:	430b      	orrs	r3, r1
 800646a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800646e:	e003      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006470:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006474:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006484:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006486:	2300      	movs	r3, #0
 8006488:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800648a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800648e:	460b      	mov	r3, r1
 8006490:	4313      	orrs	r3, r2
 8006492:	d04c      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006498:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800649c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064a0:	d02a      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80064a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064a6:	d821      	bhi.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80064a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064ac:	d026      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 80064ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064b2:	d81b      	bhi.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80064b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064b8:	d00e      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80064ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064be:	d815      	bhi.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d01d      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80064c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064c8:	d110      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064ca:	4b0a      	ldr	r3, [pc, #40]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ce:	4a09      	ldr	r2, [pc, #36]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064d4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80064d6:	e014      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064dc:	332c      	adds	r3, #44	@ 0x2c
 80064de:	4618      	mov	r0, r3
 80064e0:	f002 fb62 	bl	8008ba8 <RCCEx_PLL3_Config>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80064ea:	e00a      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80064f2:	e006      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80064f4:	46020c00 	.word	0x46020c00
        break;
 80064f8:	bf00      	nop
 80064fa:	e002      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 80064fc:	bf00      	nop
 80064fe:	e000      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8006500:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006502:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10d      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800650a:	4baf      	ldr	r3, [pc, #700]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800650c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006510:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006518:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800651c:	4aaa      	ldr	r2, [pc, #680]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800651e:	430b      	orrs	r3, r1
 8006520:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006524:	e003      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006526:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800652a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800652e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800653a:	663b      	str	r3, [r7, #96]	@ 0x60
 800653c:	2300      	movs	r3, #0
 800653e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006540:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006544:	460b      	mov	r3, r1
 8006546:	4313      	orrs	r3, r2
 8006548:	f000 80b5 	beq.w	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800654c:	2300      	movs	r3, #0
 800654e:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006552:	4b9d      	ldr	r3, [pc, #628]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	d113      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006560:	4b99      	ldr	r3, [pc, #612]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006566:	4a98      	ldr	r2, [pc, #608]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006568:	f043 0304 	orr.w	r3, r3, #4
 800656c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006570:	4b95      	ldr	r3, [pc, #596]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800657e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 8006582:	2301      	movs	r3, #1
 8006584:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006588:	4b90      	ldr	r3, [pc, #576]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800658a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658c:	4a8f      	ldr	r2, [pc, #572]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800658e:	f043 0301 	orr.w	r3, r3, #1
 8006592:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006594:	f7fb fed0 	bl	8002338 <HAL_GetTick>
 8006598:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800659c:	e00b      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800659e:	f7fb fecb 	bl	8002338 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d903      	bls.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80065b4:	e005      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80065b6:	4b85      	ldr	r3, [pc, #532]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80065b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0ed      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 80065c2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d165      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065ca:	4b7f      	ldr	r3, [pc, #508]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80065cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80065d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d023      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x800>
 80065e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065e4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80065e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d01b      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065f0:	4b75      	ldr	r3, [pc, #468]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80065f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065fa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065fe:	4b72      	ldr	r3, [pc, #456]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006604:	4a70      	ldr	r2, [pc, #448]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006606:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800660a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800660e:	4b6e      	ldr	r3, [pc, #440]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006614:	4a6c      	ldr	r2, [pc, #432]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800661a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800661e:	4a6a      	ldr	r2, [pc, #424]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006624:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006628:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d019      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006634:	f7fb fe80 	bl	8002338 <HAL_GetTick>
 8006638:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800663c:	e00d      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800663e:	f7fb fe7b 	bl	8002338 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006648:	1ad2      	subs	r2, r2, r3
 800664a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800664e:	429a      	cmp	r2, r3
 8006650:	d903      	bls.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8006658:	e006      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800665a:	4b5b      	ldr	r3, [pc, #364]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800665c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0ea      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8006668:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10d      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006670:	4b55      	ldr	r3, [pc, #340]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006676:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800667a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800667e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006682:	4a51      	ldr	r2, [pc, #324]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006684:	430b      	orrs	r3, r1
 8006686:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800668a:	e008      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800668c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006690:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8006694:	e003      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006696:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800669a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800669e:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d107      	bne.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066a6:	4b48      	ldr	r3, [pc, #288]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80066a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ac:	4a46      	ldr	r2, [pc, #280]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80066ae:	f023 0304 	bic.w	r3, r3, #4
 80066b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80066b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80066c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066c4:	2300      	movs	r3, #0
 80066c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066c8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80066cc:	460b      	mov	r3, r1
 80066ce:	4313      	orrs	r3, r2
 80066d0:	d042      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80066d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80066da:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80066de:	d022      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80066e0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80066e4:	d81b      	bhi.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80066e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066ea:	d011      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 80066ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066f0:	d815      	bhi.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d019      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x902>
 80066f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066fa:	d110      	bne.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006700:	3308      	adds	r3, #8
 8006702:	4618      	mov	r0, r3
 8006704:	f002 f9b8 	bl	8008a78 <RCCEx_PLL2_Config>
 8006708:	4603      	mov	r3, r0
 800670a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800670e:	e00d      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006710:	4b2d      	ldr	r3, [pc, #180]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006714:	4a2c      	ldr	r2, [pc, #176]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800671a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800671c:	e006      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006724:	e002      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8006726:	bf00      	nop
 8006728:	e000      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 800672a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800672c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10d      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006734:	4b24      	ldr	r3, [pc, #144]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800673a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800673e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006742:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006746:	4a20      	ldr	r2, [pc, #128]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006748:	430b      	orrs	r3, r1
 800674a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800674e:	e003      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006750:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006754:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006764:	653b      	str	r3, [r7, #80]	@ 0x50
 8006766:	2300      	movs	r3, #0
 8006768:	657b      	str	r3, [r7, #84]	@ 0x54
 800676a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800676e:	460b      	mov	r3, r1
 8006770:	4313      	orrs	r3, r2
 8006772:	d031      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006778:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800677c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006780:	d00b      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006782:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006786:	d804      	bhi.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d008      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800678c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006790:	d007      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006798:	e004      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800679a:	bf00      	nop
 800679c:	e002      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800679e:	bf00      	nop
 80067a0:	e000      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80067a2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80067a4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d111      	bne.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80067ac:	4b06      	ldr	r3, [pc, #24]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80067ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80067be:	4a02      	ldr	r2, [pc, #8]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80067c0:	430b      	orrs	r3, r1
 80067c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80067c6:	e007      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 80067c8:	46020c00 	.word	0x46020c00
 80067cc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80067d4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80067d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e0:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80067e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067e6:	2300      	movs	r3, #0
 80067e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067ea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80067ee:	460b      	mov	r3, r1
 80067f0:	4313      	orrs	r3, r2
 80067f2:	d00c      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80067f4:	4bb2      	ldr	r3, [pc, #712]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80067f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067fa:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80067fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006802:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006806:	4aae      	ldr	r2, [pc, #696]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006808:	430b      	orrs	r3, r1
 800680a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800680e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006816:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800681a:	643b      	str	r3, [r7, #64]	@ 0x40
 800681c:	2300      	movs	r3, #0
 800681e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006820:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006824:	460b      	mov	r3, r1
 8006826:	4313      	orrs	r3, r2
 8006828:	d019      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800682a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800682e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006832:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006836:	d105      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006838:	4ba1      	ldr	r3, [pc, #644]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800683a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683c:	4aa0      	ldr	r2, [pc, #640]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800683e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006842:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006844:	4b9e      	ldr	r3, [pc, #632]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006846:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800684a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800684e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006852:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006856:	4a9a      	ldr	r2, [pc, #616]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006858:	430b      	orrs	r3, r1
 800685a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800685e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800686a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800686c:	2300      	movs	r3, #0
 800686e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006870:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006874:	460b      	mov	r3, r1
 8006876:	4313      	orrs	r3, r2
 8006878:	d00c      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800687a:	4b91      	ldr	r3, [pc, #580]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800687c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006880:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006888:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800688c:	4a8c      	ldr	r2, [pc, #560]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800688e:	430b      	orrs	r3, r1
 8006890:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80068a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80068a2:	2300      	movs	r3, #0
 80068a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80068aa:	460b      	mov	r3, r1
 80068ac:	4313      	orrs	r3, r2
 80068ae:	d00c      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80068b0:	4b83      	ldr	r3, [pc, #524]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80068b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80068ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80068c2:	4a7f      	ldr	r2, [pc, #508]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80068c4:	430b      	orrs	r3, r1
 80068c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80068ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80068d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068d8:	2300      	movs	r3, #0
 80068da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80068e0:	460b      	mov	r3, r1
 80068e2:	4313      	orrs	r3, r2
 80068e4:	d00c      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80068e6:	4b76      	ldr	r3, [pc, #472]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80068e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068ec:	f023 0218 	bic.w	r2, r3, #24
 80068f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068f4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80068f8:	4971      	ldr	r1, [pc, #452]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800690c:	623b      	str	r3, [r7, #32]
 800690e:	2300      	movs	r3, #0
 8006910:	627b      	str	r3, [r7, #36]	@ 0x24
 8006912:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006916:	460b      	mov	r3, r1
 8006918:	4313      	orrs	r3, r2
 800691a:	d032      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800691c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006920:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006924:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006928:	d105      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800692a:	4b65      	ldr	r3, [pc, #404]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800692c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692e:	4a64      	ldr	r2, [pc, #400]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006934:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800693a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800693e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006942:	d108      	bne.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006948:	3308      	adds	r3, #8
 800694a:	4618      	mov	r0, r3
 800694c:	f002 f894 	bl	8008a78 <RCCEx_PLL2_Config>
 8006950:	4603      	mov	r3, r0
 8006952:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 8006956:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10d      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800695e:	4b58      	ldr	r3, [pc, #352]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006960:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006964:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800696c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006970:	4953      	ldr	r1, [pc, #332]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006972:	4313      	orrs	r3, r2
 8006974:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006978:	e003      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800697e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8006982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698a:	2100      	movs	r1, #0
 800698c:	61b9      	str	r1, [r7, #24]
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	61fb      	str	r3, [r7, #28]
 8006994:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006998:	460b      	mov	r3, r1
 800699a:	4313      	orrs	r3, r2
 800699c:	d04a      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800699e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80069a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80069aa:	d01e      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 80069ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80069b0:	d825      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80069b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069b6:	d00e      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80069b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069bc:	d81f      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d021      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80069c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069c6:	d11a      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c8:	4b3d      	ldr	r3, [pc, #244]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80069ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069cc:	4a3c      	ldr	r2, [pc, #240]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80069ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069d2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80069d4:	e018      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069da:	3308      	adds	r3, #8
 80069dc:	4618      	mov	r0, r3
 80069de:	f002 f84b 	bl	8008a78 <RCCEx_PLL2_Config>
 80069e2:	4603      	mov	r3, r0
 80069e4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80069e8:	e00e      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ee:	332c      	adds	r3, #44	@ 0x2c
 80069f0:	4618      	mov	r0, r3
 80069f2:	f002 f8d9 	bl	8008ba8 <RCCEx_PLL3_Config>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80069fc:	e004      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006a04:	e000      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 8006a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a08:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10d      	bne.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8006a10:	4b2b      	ldr	r3, [pc, #172]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006a12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a16:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a1e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006a22:	4927      	ldr	r1, [pc, #156]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006a2a:	e003      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006a30:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006a40:	613b      	str	r3, [r7, #16]
 8006a42:	2300      	movs	r3, #0
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	d03d      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a5c:	d00e      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006a5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a62:	d815      	bhi.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d017      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006a68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a6c:	d110      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a6e:	4b14      	ldr	r3, [pc, #80]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a72:	4a13      	ldr	r2, [pc, #76]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a78:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006a7a:	e00e      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a80:	3308      	adds	r3, #8
 8006a82:	4618      	mov	r0, r3
 8006a84:	f001 fff8 	bl	8008a78 <RCCEx_PLL2_Config>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006a8e:	e004      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006a96:	e000      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8006a98:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006a9a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d110      	bne.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006aa2:	4b07      	ldr	r3, [pc, #28]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006aa8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ab4:	4902      	ldr	r1, [pc, #8]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006abc:	e006      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8006abe:	bf00      	nop
 8006ac0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006ac8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006ad8:	60bb      	str	r3, [r7, #8]
 8006ada:	2300      	movs	r3, #0
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	d00c      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8006b9c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006aee:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006af6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006afa:	4928      	ldr	r1, [pc, #160]	@ (8006b9c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8006b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	6039      	str	r1, [r7, #0]
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	607b      	str	r3, [r7, #4]
 8006b14:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	d036      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8006b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006b26:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006b2a:	d00d      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006b2c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006b30:	d811      	bhi.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8006b32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b36:	d012      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b3c:	d80b      	bhi.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00d      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b46:	d106      	bne.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b48:	4b14      	ldr	r3, [pc, #80]	@ (8006b9c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4c:	4a13      	ldr	r2, [pc, #76]	@ (8006b9c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b52:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8006b54:	e004      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006b5c:	e000      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8006b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b60:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10d      	bne.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8006b68:	4b0c      	ldr	r3, [pc, #48]	@ (8006b9c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006b6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b6e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006b7a:	4908      	ldr	r1, [pc, #32]	@ (8006b9c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006b82:	e003      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b84:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006b88:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006b8c:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8006b96:	46bd      	mov	sp, r7
 8006b98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b9c:	46020c00 	.word	0x46020c00

08006ba0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b089      	sub	sp, #36	@ 0x24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006ba8:	4ba6      	ldr	r3, [pc, #664]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006bb2:	4ba4      	ldr	r3, [pc, #656]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006bbc:	4ba1      	ldr	r3, [pc, #644]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc0:	0a1b      	lsrs	r3, r3, #8
 8006bc2:	f003 030f 	and.w	r3, r3, #15
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006bca:	4b9e      	ldr	r3, [pc, #632]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bce:	091b      	lsrs	r3, r3, #4
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006bd6:	4b9b      	ldr	r3, [pc, #620]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bda:	08db      	lsrs	r3, r3, #3
 8006bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	fb02 f303 	mul.w	r3, r2, r3
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bee:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d062      	beq.n	8006cbe <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	f200 8081 	bhi.w	8006d02 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d024      	beq.n	8006c50 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d17a      	bne.n	8006d02 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c16:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006e48 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c1e:	4b89      	ldr	r3, [pc, #548]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c26:	ee07 3a90 	vmov	s15, r3
 8006c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c32:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c4e:	e08f      	b.n	8006d70 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006c50:	4b7c      	ldr	r3, [pc, #496]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006c5c:	4b79      	ldr	r3, [pc, #484]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	0f1b      	lsrs	r3, r3, #28
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	e006      	b.n	8006c76 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006c68:	4b76      	ldr	r3, [pc, #472]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c6e:	041b      	lsls	r3, r3, #16
 8006c70:	0f1b      	lsrs	r3, r3, #28
 8006c72:	f003 030f 	and.w	r3, r3, #15
 8006c76:	4a76      	ldr	r2, [pc, #472]	@ (8006e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c7c:	ee07 3a90 	vmov	s15, r3
 8006c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	ee07 3a90 	vmov	s15, r3
 8006c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ca0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006ca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cbc:	e058      	b.n	8006d70 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	ee07 3a90 	vmov	s15, r3
 8006cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006e48 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006ccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd0:	4b5c      	ldr	r3, [pc, #368]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd8:	ee07 3a90 	vmov	s15, r3
 8006cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ce0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ce4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006ce8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cf0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d00:	e036      	b.n	8006d70 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006d02:	4b50      	ldr	r3, [pc, #320]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006d0e:	4b4d      	ldr	r3, [pc, #308]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	0f1b      	lsrs	r3, r3, #28
 8006d14:	f003 030f 	and.w	r3, r3, #15
 8006d18:	e006      	b.n	8006d28 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8006d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d20:	041b      	lsls	r3, r3, #16
 8006d22:	0f1b      	lsrs	r3, r3, #28
 8006d24:	f003 030f 	and.w	r3, r3, #15
 8006d28:	4a49      	ldr	r2, [pc, #292]	@ (8006e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	ee07 3a90 	vmov	s15, r3
 8006d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d52:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d6e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006d70:	4b34      	ldr	r3, [pc, #208]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d017      	beq.n	8006dac <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d7c:	4b31      	ldr	r3, [pc, #196]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d80:	0a5b      	lsrs	r3, r3, #9
 8006d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006d8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d92:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d96:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da2:	ee17 2a90 	vmov	r2, s15
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	e002      	b.n	8006db2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006db2:	4b24      	ldr	r3, [pc, #144]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d017      	beq.n	8006dee <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006dbe:	4b21      	ldr	r3, [pc, #132]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dc2:	0c1b      	lsrs	r3, r3, #16
 8006dc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dc8:	ee07 3a90 	vmov	s15, r3
 8006dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006dd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dd4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006dd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006de4:	ee17 2a90 	vmov	r2, s15
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	605a      	str	r2, [r3, #4]
 8006dec:	e002      	b.n	8006df4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006df4:	4b13      	ldr	r3, [pc, #76]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d017      	beq.n	8006e30 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006e00:	4b10      	ldr	r3, [pc, #64]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e04:	0e1b      	lsrs	r3, r3, #24
 8006e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e0a:	ee07 3a90 	vmov	s15, r3
 8006e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006e12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e16:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006e1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e26:	ee17 2a90 	vmov	r2, s15
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006e2e:	e002      	b.n	8006e36 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	609a      	str	r2, [r3, #8]
}
 8006e36:	bf00      	nop
 8006e38:	3724      	adds	r7, #36	@ 0x24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	46020c00 	.word	0x46020c00
 8006e48:	4b742400 	.word	0x4b742400
 8006e4c:	46000000 	.word	0x46000000
 8006e50:	08010648 	.word	0x08010648

08006e54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b089      	sub	sp, #36	@ 0x24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006e5c:	4ba6      	ldr	r3, [pc, #664]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e64:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006e66:	4ba4      	ldr	r3, [pc, #656]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6a:	f003 0303 	and.w	r3, r3, #3
 8006e6e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006e70:	4ba1      	ldr	r3, [pc, #644]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e74:	0a1b      	lsrs	r3, r3, #8
 8006e76:	f003 030f 	and.w	r3, r3, #15
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006e7e:	4b9e      	ldr	r3, [pc, #632]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e82:	091b      	lsrs	r3, r3, #4
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006e8a:	4b9b      	ldr	r3, [pc, #620]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8e:	08db      	lsrs	r3, r3, #3
 8006e90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	fb02 f303 	mul.w	r3, r2, r3
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d062      	beq.n	8006f72 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	f200 8081 	bhi.w	8006fb6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d024      	beq.n	8006f04 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d17a      	bne.n	8006fb6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	ee07 3a90 	vmov	s15, r3
 8006ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eca:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80070fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed2:	4b89      	ldr	r3, [pc, #548]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ee6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007100 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f02:	e08f      	b.n	8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006f04:	4b7c      	ldr	r3, [pc, #496]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d005      	beq.n	8006f1c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006f10:	4b79      	ldr	r3, [pc, #484]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	0f1b      	lsrs	r3, r3, #28
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	e006      	b.n	8006f2a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006f1c:	4b76      	ldr	r3, [pc, #472]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f22:	041b      	lsls	r3, r3, #16
 8006f24:	0f1b      	lsrs	r3, r3, #28
 8006f26:	f003 030f 	and.w	r3, r3, #15
 8006f2a:	4a76      	ldr	r2, [pc, #472]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f30:	ee07 3a90 	vmov	s15, r3
 8006f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	ee07 3a90 	vmov	s15, r3
 8006f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f50:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f54:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007100 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006f58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f70:	e058      	b.n	8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	ee07 3a90 	vmov	s15, r3
 8006f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80070fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006f80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f84:	4b5c      	ldr	r3, [pc, #368]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8c:	ee07 3a90 	vmov	s15, r3
 8006f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f94:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f98:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007100 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006f9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006fa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fa4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fb0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fb4:	e036      	b.n	8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006fb6:	4b50      	ldr	r3, [pc, #320]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d005      	beq.n	8006fce <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006fc2:	4b4d      	ldr	r3, [pc, #308]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	0f1b      	lsrs	r3, r3, #28
 8006fc8:	f003 030f 	and.w	r3, r3, #15
 8006fcc:	e006      	b.n	8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8006fce:	4b4a      	ldr	r3, [pc, #296]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006fd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fd4:	041b      	lsls	r3, r3, #16
 8006fd6:	0f1b      	lsrs	r3, r3, #28
 8006fd8:	f003 030f 	and.w	r3, r3, #15
 8006fdc:	4a49      	ldr	r2, [pc, #292]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	ee07 3a90 	vmov	s15, r3
 8006ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007002:	ed97 6a02 	vldr	s12, [r7, #8]
 8007006:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007100 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800700a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007016:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800701a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007022:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007024:	4b34      	ldr	r3, [pc, #208]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d017      	beq.n	8007060 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007030:	4b31      	ldr	r3, [pc, #196]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007034:	0a5b      	lsrs	r3, r3, #9
 8007036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8007042:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007046:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800704a:	edd7 6a07 	vldr	s13, [r7, #28]
 800704e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007056:	ee17 2a90 	vmov	r2, s15
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	e002      	b.n	8007066 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007066:	4b24      	ldr	r3, [pc, #144]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d017      	beq.n	80070a2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007072:	4b21      	ldr	r3, [pc, #132]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007076:	0c1b      	lsrs	r3, r3, #16
 8007078:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800707c:	ee07 3a90 	vmov	s15, r3
 8007080:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007084:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007088:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800708c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007098:	ee17 2a90 	vmov	r2, s15
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	605a      	str	r2, [r3, #4]
 80070a0:	e002      	b.n	80070a8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80070a8:	4b13      	ldr	r3, [pc, #76]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80070aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d017      	beq.n	80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80070b4:	4b10      	ldr	r3, [pc, #64]	@ (80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80070b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b8:	0e1b      	lsrs	r3, r3, #24
 80070ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80070c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070ca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80070ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80070d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070da:	ee17 2a90 	vmov	r2, s15
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070e2:	e002      	b.n	80070ea <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	609a      	str	r2, [r3, #8]
}
 80070ea:	bf00      	nop
 80070ec:	3724      	adds	r7, #36	@ 0x24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	46020c00 	.word	0x46020c00
 80070fc:	4b742400 	.word	0x4b742400
 8007100:	46000000 	.word	0x46000000
 8007104:	08010648 	.word	0x08010648

08007108 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007108:	b480      	push	{r7}
 800710a:	b089      	sub	sp, #36	@ 0x24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007110:	4ba6      	ldr	r3, [pc, #664]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007118:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800711a:	4ba4      	ldr	r3, [pc, #656]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800711c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007124:	4ba1      	ldr	r3, [pc, #644]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007128:	0a1b      	lsrs	r3, r3, #8
 800712a:	f003 030f 	and.w	r3, r3, #15
 800712e:	3301      	adds	r3, #1
 8007130:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007132:	4b9e      	ldr	r3, [pc, #632]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007136:	091b      	lsrs	r3, r3, #4
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800713e:	4b9b      	ldr	r3, [pc, #620]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007142:	08db      	lsrs	r3, r3, #3
 8007144:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	fb02 f303 	mul.w	r3, r2, r3
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007156:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b03      	cmp	r3, #3
 800715e:	d062      	beq.n	8007226 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2b03      	cmp	r3, #3
 8007164:	f200 8081 	bhi.w	800726a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d024      	beq.n	80071b8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2b02      	cmp	r3, #2
 8007172:	d17a      	bne.n	800726a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8007182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007186:	4b89      	ldr	r3, [pc, #548]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007196:	ed97 6a02 	vldr	s12, [r7, #8]
 800719a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800719e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80071a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80071a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80071ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80071b6:	e08f      	b.n	80072d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80071b8:	4b7c      	ldr	r3, [pc, #496]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d005      	beq.n	80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80071c4:	4b79      	ldr	r3, [pc, #484]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	0f1b      	lsrs	r3, r3, #28
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	e006      	b.n	80071de <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80071d0:	4b76      	ldr	r3, [pc, #472]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071d6:	041b      	lsls	r3, r3, #16
 80071d8:	0f1b      	lsrs	r3, r3, #28
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	4a76      	ldr	r2, [pc, #472]	@ (80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80071e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071e4:	ee07 3a90 	vmov	s15, r3
 80071e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	ee07 3a90 	vmov	s15, r3
 8007200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007204:	ed97 6a02 	vldr	s12, [r7, #8]
 8007208:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800720c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007210:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007214:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007218:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800721c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007220:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007224:	e058      	b.n	80072d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	ee07 3a90 	vmov	s15, r3
 800722c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007230:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8007234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007238:	4b5c      	ldr	r3, [pc, #368]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800723a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800723c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007240:	ee07 3a90 	vmov	s15, r3
 8007244:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007248:	ed97 6a02 	vldr	s12, [r7, #8]
 800724c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007250:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007254:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007258:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800725c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007264:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007268:	e036      	b.n	80072d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800726a:	4b50      	ldr	r3, [pc, #320]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d005      	beq.n	8007282 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8007276:	4b4d      	ldr	r3, [pc, #308]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	0f1b      	lsrs	r3, r3, #28
 800727c:	f003 030f 	and.w	r3, r3, #15
 8007280:	e006      	b.n	8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8007282:	4b4a      	ldr	r3, [pc, #296]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007284:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007288:	041b      	lsls	r3, r3, #16
 800728a:	0f1b      	lsrs	r3, r3, #28
 800728c:	f003 030f 	and.w	r3, r3, #15
 8007290:	4a49      	ldr	r2, [pc, #292]	@ (80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8007292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	ee07 3a90 	vmov	s15, r3
 80072a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80072ba:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80072be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80072ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072d6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80072d8:	4b34      	ldr	r3, [pc, #208]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80072da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d017      	beq.n	8007314 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072e4:	4b31      	ldr	r3, [pc, #196]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80072e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072e8:	0a5b      	lsrs	r3, r3, #9
 80072ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80072f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800730a:	ee17 2a90 	vmov	r2, s15
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	e002      	b.n	800731a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800731a:	4b24      	ldr	r3, [pc, #144]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800731c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d017      	beq.n	8007356 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007326:	4b21      	ldr	r3, [pc, #132]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800732a:	0c1b      	lsrs	r3, r3, #16
 800732c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007330:	ee07 3a90 	vmov	s15, r3
 8007334:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007338:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800733c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007340:	edd7 6a07 	vldr	s13, [r7, #28]
 8007344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800734c:	ee17 2a90 	vmov	r2, s15
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	605a      	str	r2, [r3, #4]
 8007354:	e002      	b.n	800735c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800735c:	4b13      	ldr	r3, [pc, #76]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800735e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007360:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d017      	beq.n	8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007368:	4b10      	ldr	r3, [pc, #64]	@ (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800736a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800736c:	0e1b      	lsrs	r3, r3, #24
 800736e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800737a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800737e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007382:	edd7 6a07 	vldr	s13, [r7, #28]
 8007386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800738a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800738e:	ee17 2a90 	vmov	r2, s15
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007396:	e002      	b.n	800739e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	609a      	str	r2, [r3, #8]
}
 800739e:	bf00      	nop
 80073a0:	3724      	adds	r7, #36	@ 0x24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	46020c00 	.word	0x46020c00
 80073b0:	4b742400 	.word	0x4b742400
 80073b4:	46000000 	.word	0x46000000
 80073b8:	08010648 	.word	0x08010648

080073bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08e      	sub	sp, #56	@ 0x38
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80073c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ca:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80073ce:	430b      	orrs	r3, r1
 80073d0:	d145      	bne.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80073d2:	4ba7      	ldr	r3, [pc, #668]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073dc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80073de:	4ba4      	ldr	r3, [pc, #656]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d108      	bne.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80073ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073f2:	d104      	bne.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80073f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073fa:	f001 bb31 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80073fe:	4b9c      	ldr	r3, [pc, #624]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007400:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800740c:	d114      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800740e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007414:	d110      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007416:	4b96      	ldr	r3, [pc, #600]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800741c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007420:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007424:	d103      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007426:	23fa      	movs	r3, #250	@ 0xfa
 8007428:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800742a:	f001 bb19 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800742e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007432:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007434:	f001 bb14 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007438:	4b8d      	ldr	r3, [pc, #564]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007444:	d107      	bne.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800744c:	d103      	bne.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800744e:	4b89      	ldr	r3, [pc, #548]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007450:	637b      	str	r3, [r7, #52]	@ 0x34
 8007452:	f001 bb05 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	637b      	str	r3, [r7, #52]	@ 0x34
 800745a:	f001 bb01 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800745e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007462:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007466:	430b      	orrs	r3, r1
 8007468:	d151      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800746a:	4b81      	ldr	r3, [pc, #516]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800746c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007470:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8007474:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007478:	2b80      	cmp	r3, #128	@ 0x80
 800747a:	d035      	beq.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800747c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747e:	2b80      	cmp	r3, #128	@ 0x80
 8007480:	d841      	bhi.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007484:	2b60      	cmp	r3, #96	@ 0x60
 8007486:	d02a      	beq.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748a:	2b60      	cmp	r3, #96	@ 0x60
 800748c:	d83b      	bhi.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800748e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007490:	2b40      	cmp	r3, #64	@ 0x40
 8007492:	d009      	beq.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007496:	2b40      	cmp	r3, #64	@ 0x40
 8007498:	d835      	bhi.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00c      	beq.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80074a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a2:	2b20      	cmp	r3, #32
 80074a4:	d012      	beq.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80074a6:	e02e      	b.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff fb77 	bl	8006ba0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80074b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074b6:	f001 bad3 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ba:	f107 0318 	add.w	r3, r7, #24
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff fcc8 	bl	8006e54 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074c8:	f001 baca 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074cc:	f107 030c 	add.w	r3, r7, #12
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff fe19 	bl	8007108 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074da:	f001 bac1 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80074de:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80074e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074e4:	f001 babc 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074e8:	4b61      	ldr	r3, [pc, #388]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074f4:	d103      	bne.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80074f6:	4b60      	ldr	r3, [pc, #384]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80074f8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074fa:	f001 bab1 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007502:	f001 baad 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 8007506:	2300      	movs	r3, #0
 8007508:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800750a:	f001 baa9 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800750e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007512:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007516:	430b      	orrs	r3, r1
 8007518:	d158      	bne.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800751a:	4b55      	ldr	r3, [pc, #340]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800751c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007520:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007524:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800752c:	d03b      	beq.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800752e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007534:	d846      	bhi.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007538:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800753c:	d02e      	beq.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800753e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007540:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007544:	d83e      	bhi.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800754c:	d00b      	beq.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800754e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007554:	d836      	bhi.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00d      	beq.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800755c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007562:	d012      	beq.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007564:	e02e      	b.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007566:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff fb18 	bl	8006ba0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007572:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007574:	f001 ba74 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007578:	f107 0318 	add.w	r3, r7, #24
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff fc69 	bl	8006e54 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007586:	f001 ba6b 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800758a:	f107 030c 	add.w	r3, r7, #12
 800758e:	4618      	mov	r0, r3
 8007590:	f7ff fdba 	bl	8007108 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007598:	f001 ba62 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800759c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80075a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075a2:	f001 ba5d 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075a6:	4b32      	ldr	r3, [pc, #200]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075b2:	d103      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80075b4:	4b30      	ldr	r3, [pc, #192]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80075b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075b8:	f001 ba52 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075c0:	f001 ba4e 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075c8:	f001 ba4a 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80075cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075d0:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80075d4:	430b      	orrs	r3, r1
 80075d6:	d126      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80075d8:	4b25      	ldr	r3, [pc, #148]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075e2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80075e4:	4b22      	ldr	r3, [pc, #136]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075f0:	d106      	bne.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80075f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d103      	bne.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80075f8:	4b1f      	ldr	r3, [pc, #124]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80075fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80075fc:	f001 ba30 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007600:	4b1b      	ldr	r3, [pc, #108]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800760c:	d107      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800760e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007610:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007614:	d103      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8007616:	4b19      	ldr	r3, [pc, #100]	@ (800767c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007618:	637b      	str	r3, [r7, #52]	@ 0x34
 800761a:	f001 ba21 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	637b      	str	r3, [r7, #52]	@ 0x34
 8007622:	f001 ba1d 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800762a:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800762e:	430b      	orrs	r3, r1
 8007630:	d16e      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007632:	4b0f      	ldr	r3, [pc, #60]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007638:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800763c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007640:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007644:	d03d      	beq.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007648:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800764c:	d85c      	bhi.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800764e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007650:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007654:	d014      	beq.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800765c:	d854      	bhi.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800765e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01f      	beq.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007666:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800766a:	d012      	beq.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800766c:	e04c      	b.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800766e:	bf00      	nop
 8007670:	46020c00 	.word	0x46020c00
 8007674:	0007a120 	.word	0x0007a120
 8007678:	00f42400 	.word	0x00f42400
 800767c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007684:	4618      	mov	r0, r3
 8007686:	f7ff fa8b 	bl	8006ba0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800768a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800768e:	f001 b9e7 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007692:	f107 0318 	add.w	r3, r7, #24
 8007696:	4618      	mov	r0, r3
 8007698:	f7ff fbdc 	bl	8006e54 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076a0:	f001 b9de 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80076a4:	4ba7      	ldr	r3, [pc, #668]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076b0:	d103      	bne.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80076b2:	4ba5      	ldr	r3, [pc, #660]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80076b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076b6:	f001 b9d3 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076be:	f001 b9cf 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80076c2:	4ba0      	ldr	r3, [pc, #640]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0320 	and.w	r3, r3, #32
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	d118      	bne.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076ce:	4b9d      	ldr	r3, [pc, #628]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d005      	beq.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80076da:	4b9a      	ldr	r3, [pc, #616]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	0e1b      	lsrs	r3, r3, #24
 80076e0:	f003 030f 	and.w	r3, r3, #15
 80076e4:	e006      	b.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80076e6:	4b97      	ldr	r3, [pc, #604]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80076e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076ec:	041b      	lsls	r3, r3, #16
 80076ee:	0e1b      	lsrs	r3, r3, #24
 80076f0:	f003 030f 	and.w	r3, r3, #15
 80076f4:	4a95      	ldr	r2, [pc, #596]	@ (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80076f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076fa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076fc:	f001 b9b0 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007704:	f001 b9ac 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8007708:	2300      	movs	r3, #0
 800770a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800770c:	f001 b9a8 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007714:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8007718:	430b      	orrs	r3, r1
 800771a:	d17f      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800771c:	4b89      	ldr	r3, [pc, #548]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800771e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007726:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772a:	2b00      	cmp	r3, #0
 800772c:	d165      	bne.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800772e:	4b85      	ldr	r3, [pc, #532]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007734:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007738:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800773a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007740:	d034      	beq.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007748:	d853      	bhi.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800774a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007750:	d00b      	beq.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8007752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007758:	d84b      	bhi.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800775a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775c:	2b00      	cmp	r3, #0
 800775e:	d016      	beq.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8007760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007762:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007766:	d009      	beq.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007768:	e043      	b.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800776a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff fa16 	bl	8006ba0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007776:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007778:	f001 b972 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800777c:	f107 0318 	add.w	r3, r7, #24
 8007780:	4618      	mov	r0, r3
 8007782:	f7ff fb67 	bl	8006e54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800778a:	f001 b969 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800778e:	4b6d      	ldr	r3, [pc, #436]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800779a:	d103      	bne.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800779c:	4b6a      	ldr	r3, [pc, #424]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800779e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80077a0:	f001 b95e 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80077a8:	f001 b95a 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80077ac:	4b65      	ldr	r3, [pc, #404]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0320 	and.w	r3, r3, #32
 80077b4:	2b20      	cmp	r3, #32
 80077b6:	d118      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80077b8:	4b62      	ldr	r3, [pc, #392]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d005      	beq.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80077c4:	4b5f      	ldr	r3, [pc, #380]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	0e1b      	lsrs	r3, r3, #24
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	e006      	b.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80077d0:	4b5c      	ldr	r3, [pc, #368]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80077d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077d6:	041b      	lsls	r3, r3, #16
 80077d8:	0e1b      	lsrs	r3, r3, #24
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	4a5b      	ldr	r2, [pc, #364]	@ (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80077e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077e4:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80077e6:	f001 b93b 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80077ee:	f001 b937 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80077f6:	f001 b933 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007800:	d108      	bne.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007806:	4618      	mov	r0, r3
 8007808:	f7ff f9ca 	bl	8006ba0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800780c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007810:	f001 b926 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	637b      	str	r3, [r7, #52]	@ 0x34
 8007818:	f001 b922 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800781c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007820:	1e51      	subs	r1, r2, #1
 8007822:	430b      	orrs	r3, r1
 8007824:	d136      	bne.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007826:	4b47      	ldr	r3, [pc, #284]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800782c:	f003 0303 	and.w	r3, r3, #3
 8007830:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	2b00      	cmp	r3, #0
 8007836:	d104      	bne.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007838:	f7fe fa48 	bl	8005ccc <HAL_RCC_GetPCLK2Freq>
 800783c:	6378      	str	r0, [r7, #52]	@ 0x34
 800783e:	f001 b90f 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007844:	2b01      	cmp	r3, #1
 8007846:	d104      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007848:	f7fe f910 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 800784c:	6378      	str	r0, [r7, #52]	@ 0x34
 800784e:	f001 b907 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007852:	4b3c      	ldr	r3, [pc, #240]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800785a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800785e:	d106      	bne.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007862:	2b02      	cmp	r3, #2
 8007864:	d103      	bne.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8007866:	4b3a      	ldr	r3, [pc, #232]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007868:	637b      	str	r3, [r7, #52]	@ 0x34
 800786a:	f001 b8f9 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800786e:	4b35      	ldr	r3, [pc, #212]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b02      	cmp	r3, #2
 800787a:	d107      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800787c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787e:	2b03      	cmp	r3, #3
 8007880:	d104      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8007882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007886:	637b      	str	r3, [r7, #52]	@ 0x34
 8007888:	f001 b8ea 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800788c:	2300      	movs	r3, #0
 800788e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007890:	f001 b8e6 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007898:	1e91      	subs	r1, r2, #2
 800789a:	430b      	orrs	r3, r1
 800789c:	d136      	bne.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800789e:	4b29      	ldr	r3, [pc, #164]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80078a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078a4:	f003 030c 	and.w	r3, r3, #12
 80078a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80078aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d104      	bne.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80078b0:	f7fe f9f8 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 80078b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80078b6:	f001 b8d3 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80078ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d104      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078c0:	f7fe f8d4 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 80078c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80078c6:	f001 b8cb 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80078ca:	4b1e      	ldr	r3, [pc, #120]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078d6:	d106      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80078d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078da:	2b08      	cmp	r3, #8
 80078dc:	d103      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80078de:	4b1c      	ldr	r3, [pc, #112]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80078e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078e2:	f001 b8bd 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80078e6:	4b17      	ldr	r3, [pc, #92]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80078e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d107      	bne.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80078f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f6:	2b0c      	cmp	r3, #12
 80078f8:	d104      	bne.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80078fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007900:	f001 b8ae 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007904:	2300      	movs	r3, #0
 8007906:	637b      	str	r3, [r7, #52]	@ 0x34
 8007908:	f001 b8aa 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800790c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007910:	1f11      	subs	r1, r2, #4
 8007912:	430b      	orrs	r3, r1
 8007914:	d13f      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007916:	4b0b      	ldr	r3, [pc, #44]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800791c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007920:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007924:	2b00      	cmp	r3, #0
 8007926:	d104      	bne.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007928:	f7fe f9bc 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 800792c:	6378      	str	r0, [r7, #52]	@ 0x34
 800792e:	f001 b897 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007934:	2b10      	cmp	r3, #16
 8007936:	d10d      	bne.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007938:	f7fe f898 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 800793c:	6378      	str	r0, [r7, #52]	@ 0x34
 800793e:	f001 b88f 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007942:	bf00      	nop
 8007944:	46020c00 	.word	0x46020c00
 8007948:	02dc6c00 	.word	0x02dc6c00
 800794c:	08010648 	.word	0x08010648
 8007950:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007954:	4ba8      	ldr	r3, [pc, #672]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800795c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007960:	d106      	bne.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8007962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007964:	2b20      	cmp	r3, #32
 8007966:	d103      	bne.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8007968:	4ba4      	ldr	r3, [pc, #656]	@ (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800796a:	637b      	str	r3, [r7, #52]	@ 0x34
 800796c:	f001 b878 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007970:	4ba1      	ldr	r3, [pc, #644]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007976:	f003 0302 	and.w	r3, r3, #2
 800797a:	2b02      	cmp	r3, #2
 800797c:	d107      	bne.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800797e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007980:	2b30      	cmp	r3, #48	@ 0x30
 8007982:	d104      	bne.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8007984:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007988:	637b      	str	r3, [r7, #52]	@ 0x34
 800798a:	f001 b869 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800798e:	2300      	movs	r3, #0
 8007990:	637b      	str	r3, [r7, #52]	@ 0x34
 8007992:	f001 b865 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007996:	e9d7 2300 	ldrd	r2, r3, [r7]
 800799a:	f1a2 0108 	sub.w	r1, r2, #8
 800799e:	430b      	orrs	r3, r1
 80079a0:	d136      	bne.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80079a2:	4b95      	ldr	r3, [pc, #596]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079a8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80079ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80079ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d104      	bne.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80079b4:	f7fe f976 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 80079b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80079ba:	f001 b851 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	2b40      	cmp	r3, #64	@ 0x40
 80079c2:	d104      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80079c4:	f7fe f852 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 80079c8:	6378      	str	r0, [r7, #52]	@ 0x34
 80079ca:	f001 b849 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80079ce:	4b8a      	ldr	r3, [pc, #552]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079da:	d106      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80079dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079de:	2b80      	cmp	r3, #128	@ 0x80
 80079e0:	d103      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80079e2:	4b86      	ldr	r3, [pc, #536]	@ (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80079e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079e6:	f001 b83b 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80079ea:	4b83      	ldr	r3, [pc, #524]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d107      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80079f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80079fc:	d104      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80079fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a04:	f001 b82c 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a0c:	f001 b828 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a14:	f1a2 0110 	sub.w	r1, r2, #16
 8007a18:	430b      	orrs	r3, r1
 8007a1a:	d139      	bne.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007a1c:	4b76      	ldr	r3, [pc, #472]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a26:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d104      	bne.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007a2e:	f7fe f939 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 8007a32:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a34:	f001 b814 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a3e:	d104      	bne.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a40:	f7fe f814 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8007a44:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a46:	f001 b80b 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a56:	d107      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8007a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a5e:	d103      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8007a60:	4b66      	ldr	r3, [pc, #408]	@ (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a64:	f000 bffc 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007a68:	4b63      	ldr	r3, [pc, #396]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d108      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a7c:	d104      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8007a7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a84:	f000 bfec 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a8c:	f000 bfe8 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8007a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a94:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	d139      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007a9c:	4b56      	ldr	r3, [pc, #344]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007aa2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007aa6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d104      	bne.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007aae:	f7fe f8f9 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 8007ab2:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ab4:	f000 bfd4 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007abe:	d104      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007ac0:	f7fd ffd4 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8007ac4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ac6:	f000 bfcb 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007aca:	4b4b      	ldr	r3, [pc, #300]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ad6:	d107      	bne.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ada:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ade:	d103      	bne.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8007ae0:	4b46      	ldr	r3, [pc, #280]	@ (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ae4:	f000 bfbc 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007ae8:	4b43      	ldr	r3, [pc, #268]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d108      	bne.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8007af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007afc:	d104      	bne.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8007afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b04:	f000 bfac 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b0c:	f000 bfa8 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b14:	f1a2 0120 	sub.w	r1, r2, #32
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	d158      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007b1c:	4b36      	ldr	r3, [pc, #216]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b22:	f003 0307 	and.w	r3, r3, #7
 8007b26:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d104      	bne.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007b2e:	f7fe f8e1 	bl	8005cf4 <HAL_RCC_GetPCLK3Freq>
 8007b32:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b34:	f000 bf94 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d104      	bne.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b3e:	f7fd ff95 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8007b42:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b44:	f000 bf8c 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007b48:	4b2b      	ldr	r3, [pc, #172]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b54:	d106      	bne.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8007b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d103      	bne.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8007b5c:	4b27      	ldr	r3, [pc, #156]	@ (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b60:	f000 bf7e 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007b64:	4b24      	ldr	r3, [pc, #144]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b6a:	f003 0302 	and.w	r3, r3, #2
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d107      	bne.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8007b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d104      	bne.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8007b78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b7e:	f000 bf6f 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007b82:	4b1d      	ldr	r3, [pc, #116]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	d11b      	bne.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b90:	2b04      	cmp	r3, #4
 8007b92:	d118      	bne.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b94:	4b18      	ldr	r3, [pc, #96]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d005      	beq.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8007ba0:	4b15      	ldr	r3, [pc, #84]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	0e1b      	lsrs	r3, r3, #24
 8007ba6:	f003 030f 	and.w	r3, r3, #15
 8007baa:	e006      	b.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8007bac:	4b12      	ldr	r3, [pc, #72]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007bae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007bb2:	041b      	lsls	r3, r3, #16
 8007bb4:	0e1b      	lsrs	r3, r3, #24
 8007bb6:	f003 030f 	and.w	r3, r3, #15
 8007bba:	4a11      	ldr	r2, [pc, #68]	@ (8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bc2:	f000 bf4d 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bca:	f000 bf49 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007bce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bd2:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	d172      	bne.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007bda:	4b07      	ldr	r3, [pc, #28]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007be0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007be4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bec:	d10a      	bne.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007bee:	f7fd ff3d 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8007bf2:	6378      	str	r0, [r7, #52]	@ 0x34
 8007bf4:	f000 bf34 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007bf8:	46020c00 	.word	0x46020c00
 8007bfc:	00f42400 	.word	0x00f42400
 8007c00:	08010648 	.word	0x08010648
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c0a:	d108      	bne.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c0c:	f107 0318 	add.w	r3, r7, #24
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7ff f91f 	bl	8006e54 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c1a:	f000 bf21 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d104      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007c24:	f7fe f824 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8007c28:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c2a:	f000 bf19 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c30:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007c34:	d122      	bne.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c36:	4bb0      	ldr	r3, [pc, #704]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b20      	cmp	r3, #32
 8007c40:	d118      	bne.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c42:	4bad      	ldr	r3, [pc, #692]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d005      	beq.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8007c4e:	4baa      	ldr	r3, [pc, #680]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	0e1b      	lsrs	r3, r3, #24
 8007c54:	f003 030f 	and.w	r3, r3, #15
 8007c58:	e006      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8007c5a:	4ba7      	ldr	r3, [pc, #668]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c60:	041b      	lsls	r3, r3, #16
 8007c62:	0e1b      	lsrs	r3, r3, #24
 8007c64:	f003 030f 	and.w	r3, r3, #15
 8007c68:	4aa4      	ldr	r2, [pc, #656]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c70:	f000 bef6 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8007c74:	2300      	movs	r3, #0
 8007c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c78:	f000 bef2 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007c7c:	4b9e      	ldr	r3, [pc, #632]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c88:	d107      	bne.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c90:	d103      	bne.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8007c92:	4b9b      	ldr	r3, [pc, #620]	@ (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8007c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c96:	f000 bee3 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007c9a:	4b97      	ldr	r3, [pc, #604]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ca6:	d107      	bne.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007caa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cae:	d103      	bne.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8007cb0:	4b93      	ldr	r3, [pc, #588]	@ (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8007cb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cb4:	f000 bed4 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cbc:	f000 bed0 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cc4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007cc8:	430b      	orrs	r3, r1
 8007cca:	d158      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007ccc:	4b8a      	ldr	r3, [pc, #552]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007cce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cda:	2b04      	cmp	r3, #4
 8007cdc:	d84b      	bhi.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8007cde:	a201      	add	r2, pc, #4	@ (adr r2, 8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8007ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce4:	08007d1d 	.word	0x08007d1d
 8007ce8:	08007cf9 	.word	0x08007cf9
 8007cec:	08007d0b 	.word	0x08007d0b
 8007cf0:	08007d27 	.word	0x08007d27
 8007cf4:	08007d31 	.word	0x08007d31
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7fe ff4f 	bl	8006ba0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d06:	f000 beab 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d0a:	f107 030c 	add.w	r3, r7, #12
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff f9fa 	bl	8007108 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d18:	f000 bea2 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007d1c:	f7fd ffa8 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8007d20:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007d22:	f000 be9d 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007d26:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007d2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d2c:	f000 be98 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007d30:	4b71      	ldr	r3, [pc, #452]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0320 	and.w	r3, r3, #32
 8007d38:	2b20      	cmp	r3, #32
 8007d3a:	d118      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d3c:	4b6e      	ldr	r3, [pc, #440]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d005      	beq.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007d48:	4b6b      	ldr	r3, [pc, #428]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	0e1b      	lsrs	r3, r3, #24
 8007d4e:	f003 030f 	and.w	r3, r3, #15
 8007d52:	e006      	b.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8007d54:	4b68      	ldr	r3, [pc, #416]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007d56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d5a:	041b      	lsls	r3, r3, #16
 8007d5c:	0e1b      	lsrs	r3, r3, #24
 8007d5e:	f003 030f 	and.w	r3, r3, #15
 8007d62:	4a66      	ldr	r2, [pc, #408]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d68:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007d6a:	f000 be79 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d72:	f000 be75 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d7a:	f000 be71 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d82:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007d86:	430b      	orrs	r3, r1
 8007d88:	d167      	bne.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007d8a:	4b5b      	ldr	r3, [pc, #364]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d90:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007d94:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d9c:	d036      	beq.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007da4:	d855      	bhi.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007dac:	d029      	beq.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8007dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007db4:	d84d      	bhi.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dbc:	d013      	beq.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dc4:	d845      	bhi.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d015      	beq.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dd2:	d13e      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fe fee1 	bl	8006ba0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007de2:	f000 be3d 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007de6:	f107 030c 	add.w	r3, r7, #12
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7ff f98c 	bl	8007108 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007df4:	f000 be34 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007df8:	f7fd ff3a 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8007dfc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007dfe:	f000 be2f 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007e02:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007e06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e08:	f000 be2a 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0320 	and.w	r3, r3, #32
 8007e14:	2b20      	cmp	r3, #32
 8007e16:	d118      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e18:	4b37      	ldr	r3, [pc, #220]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d005      	beq.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8007e24:	4b34      	ldr	r3, [pc, #208]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	0e1b      	lsrs	r3, r3, #24
 8007e2a:	f003 030f 	and.w	r3, r3, #15
 8007e2e:	e006      	b.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007e30:	4b31      	ldr	r3, [pc, #196]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007e32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e36:	041b      	lsls	r3, r3, #16
 8007e38:	0e1b      	lsrs	r3, r3, #24
 8007e3a:	f003 030f 	and.w	r3, r3, #15
 8007e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e44:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e46:	f000 be0b 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e4e:	f000 be07 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e56:	f000 be03 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e5e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007e62:	430b      	orrs	r3, r1
 8007e64:	d152      	bne.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007e66:	4b24      	ldr	r3, [pc, #144]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007e70:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d104      	bne.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e78:	f7fd ff14 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 8007e7c:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e7e:	f000 bdef 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e88:	d104      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e8a:	f7fd fdef 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8007e8e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e90:	f000 bde6 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007e94:	4b18      	ldr	r3, [pc, #96]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ea0:	d107      	bne.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ea8:	d103      	bne.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8007eaa:	4b15      	ldr	r3, [pc, #84]	@ (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8007eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eae:	f000 bdd7 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007eb2:	4b11      	ldr	r3, [pc, #68]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0320 	and.w	r3, r3, #32
 8007eba:	2b20      	cmp	r3, #32
 8007ebc:	d122      	bne.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ec4:	d11e      	bne.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d005      	beq.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8007ed2:	4b09      	ldr	r3, [pc, #36]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	0e1b      	lsrs	r3, r3, #24
 8007ed8:	f003 030f 	and.w	r3, r3, #15
 8007edc:	e006      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8007ede:	4b06      	ldr	r3, [pc, #24]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007ee0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ee4:	041b      	lsls	r3, r3, #16
 8007ee6:	0e1b      	lsrs	r3, r3, #24
 8007ee8:	f003 030f 	and.w	r3, r3, #15
 8007eec:	4a03      	ldr	r2, [pc, #12]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef4:	f000 bdb4 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007ef8:	46020c00 	.word	0x46020c00
 8007efc:	08010648 	.word	0x08010648
 8007f00:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f08:	f000 bdaa 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f10:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007f14:	430b      	orrs	r3, r1
 8007f16:	d14c      	bne.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007f18:	4ba8      	ldr	r3, [pc, #672]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f1e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007f22:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d104      	bne.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007f2a:	f7fd febb 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 8007f2e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f30:	f000 bd96 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f3a:	d104      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f3c:	f7fd fd96 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8007f40:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f42:	f000 bd8d 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007f46:	4b9d      	ldr	r3, [pc, #628]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f52:	d107      	bne.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8007f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f5a:	d103      	bne.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 8007f5c:	4b98      	ldr	r3, [pc, #608]	@ (80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f60:	f000 bd7e 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007f64:	4b95      	ldr	r3, [pc, #596]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b20      	cmp	r3, #32
 8007f6e:	d11c      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8007f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f76:	d118      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f78:	4b90      	ldr	r3, [pc, #576]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d005      	beq.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8007f84:	4b8d      	ldr	r3, [pc, #564]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	0e1b      	lsrs	r3, r3, #24
 8007f8a:	f003 030f 	and.w	r3, r3, #15
 8007f8e:	e006      	b.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8007f90:	4b8a      	ldr	r3, [pc, #552]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007f92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f96:	041b      	lsls	r3, r3, #16
 8007f98:	0e1b      	lsrs	r3, r3, #24
 8007f9a:	f003 030f 	and.w	r3, r3, #15
 8007f9e:	4a89      	ldr	r2, [pc, #548]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fa6:	f000 bd5b 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fae:	f000 bd57 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007fb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fb6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007fba:	430b      	orrs	r3, r1
 8007fbc:	d158      	bne.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fc4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007fc8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fcc:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fce:	d028      	beq.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fd4:	d848      	bhi.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd8:	2b80      	cmp	r3, #128	@ 0x80
 8007fda:	d00e      	beq.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fde:	2b80      	cmp	r3, #128	@ 0x80
 8007fe0:	d842      	bhi.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d003      	beq.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fea:	2b40      	cmp	r3, #64	@ 0x40
 8007fec:	d014      	beq.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8007fee:	e03b      	b.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007ff0:	f7fd fe80 	bl	8005cf4 <HAL_RCC_GetPCLK3Freq>
 8007ff4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007ff6:	f000 bd33 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ffa:	4b70      	ldr	r3, [pc, #448]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008006:	d103      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8008008:	4b6d      	ldr	r3, [pc, #436]	@ (80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800800a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800800c:	f000 bd28 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008014:	f000 bd24 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8008018:	f7fd fd28 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 800801c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800801e:	f000 bd1f 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008022:	4b66      	ldr	r3, [pc, #408]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b20      	cmp	r3, #32
 800802c:	d118      	bne.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800802e:	4b63      	ldr	r3, [pc, #396]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d005      	beq.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800803a:	4b60      	ldr	r3, [pc, #384]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	0e1b      	lsrs	r3, r3, #24
 8008040:	f003 030f 	and.w	r3, r3, #15
 8008044:	e006      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8008046:	4b5d      	ldr	r3, [pc, #372]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008048:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800804c:	041b      	lsls	r3, r3, #16
 800804e:	0e1b      	lsrs	r3, r3, #24
 8008050:	f003 030f 	and.w	r3, r3, #15
 8008054:	4a5b      	ldr	r2, [pc, #364]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8008056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800805a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800805c:	f000 bd00 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008064:	f000 bcfc 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 8008068:	2300      	movs	r3, #0
 800806a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800806c:	f000 bcf8 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008074:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8008078:	430b      	orrs	r3, r1
 800807a:	d14c      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800807c:	4b4f      	ldr	r3, [pc, #316]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800807e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008082:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008086:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8008088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808a:	2b00      	cmp	r3, #0
 800808c:	d104      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800808e:	f7fd fe09 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 8008092:	6378      	str	r0, [r7, #52]	@ 0x34
 8008094:	f000 bce4 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8008098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800809e:	d104      	bne.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80080a0:	f7fd fce4 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 80080a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80080a6:	f000 bcdb 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80080aa:	4b44      	ldr	r3, [pc, #272]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080b6:	d107      	bne.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 80080b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080be:	d103      	bne.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 80080c0:	4b3f      	ldr	r3, [pc, #252]	@ (80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80080c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80080c4:	f000 bccc 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80080c8:	4b3c      	ldr	r3, [pc, #240]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0320 	and.w	r3, r3, #32
 80080d0:	2b20      	cmp	r3, #32
 80080d2:	d11c      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80080d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80080da:	d118      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080dc:	4b37      	ldr	r3, [pc, #220]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d005      	beq.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80080e8:	4b34      	ldr	r3, [pc, #208]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	0e1b      	lsrs	r3, r3, #24
 80080ee:	f003 030f 	and.w	r3, r3, #15
 80080f2:	e006      	b.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80080f4:	4b31      	ldr	r3, [pc, #196]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80080f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080fa:	041b      	lsls	r3, r3, #16
 80080fc:	0e1b      	lsrs	r3, r3, #24
 80080fe:	f003 030f 	and.w	r3, r3, #15
 8008102:	4a30      	ldr	r2, [pc, #192]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8008104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008108:	637b      	str	r3, [r7, #52]	@ 0x34
 800810a:	f000 bca9 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800810e:	2300      	movs	r3, #0
 8008110:	637b      	str	r3, [r7, #52]	@ 0x34
 8008112:	f000 bca5 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8008116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800811a:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800811e:	430b      	orrs	r3, r1
 8008120:	d152      	bne.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8008122:	4b26      	ldr	r3, [pc, #152]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008124:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008128:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800812c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800812e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008130:	2b00      	cmp	r3, #0
 8008132:	d104      	bne.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008134:	f7fd fdb6 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 8008138:	6378      	str	r0, [r7, #52]	@ 0x34
 800813a:	f000 bc91 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800813e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008144:	d104      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008146:	f7fd fc91 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 800814a:	6378      	str	r0, [r7, #52]	@ 0x34
 800814c:	f000 bc88 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8008150:	4b1a      	ldr	r3, [pc, #104]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800815c:	d107      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800815e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008160:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008164:	d103      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8008166:	4b16      	ldr	r3, [pc, #88]	@ (80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008168:	637b      	str	r3, [r7, #52]	@ 0x34
 800816a:	f000 bc79 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800816e:	4b13      	ldr	r3, [pc, #76]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0320 	and.w	r3, r3, #32
 8008176:	2b20      	cmp	r3, #32
 8008178:	d11c      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800817a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008180:	d118      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008182:	4b0e      	ldr	r3, [pc, #56]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d005      	beq.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800818e:	4b0b      	ldr	r3, [pc, #44]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	0e1b      	lsrs	r3, r3, #24
 8008194:	f003 030f 	and.w	r3, r3, #15
 8008198:	e006      	b.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800819a:	4b08      	ldr	r3, [pc, #32]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800819c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081a0:	041b      	lsls	r3, r3, #16
 80081a2:	0e1b      	lsrs	r3, r3, #24
 80081a4:	f003 030f 	and.w	r3, r3, #15
 80081a8:	4a06      	ldr	r2, [pc, #24]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80081aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b0:	f000 bc56 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b8:	f000 bc52 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80081bc:	46020c00 	.word	0x46020c00
 80081c0:	00f42400 	.word	0x00f42400
 80081c4:	08010648 	.word	0x08010648
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 80081c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081cc:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 80081d0:	430b      	orrs	r3, r1
 80081d2:	d14a      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 80081d4:	4ba5      	ldr	r3, [pc, #660]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80081d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80081da:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80081de:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 80081e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d104      	bne.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80081e6:	f7fd fd5d 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 80081ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80081ec:	f000 bc38 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 80081f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081f6:	d104      	bne.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80081f8:	f7fd fc38 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 80081fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80081fe:	f000 bc2f 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8008202:	4b9a      	ldr	r3, [pc, #616]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800820a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800820e:	d107      	bne.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008212:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008216:	d103      	bne.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8008218:	4b95      	ldr	r3, [pc, #596]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800821a:	637b      	str	r3, [r7, #52]	@ 0x34
 800821c:	f000 bc20 	b.w	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8008220:	4b92      	ldr	r3, [pc, #584]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0320 	and.w	r3, r3, #32
 8008228:	2b20      	cmp	r3, #32
 800822a:	d11b      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 800822c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008232:	d117      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008234:	4b8d      	ldr	r3, [pc, #564]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d005      	beq.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 8008240:	4b8a      	ldr	r3, [pc, #552]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	0e1b      	lsrs	r3, r3, #24
 8008246:	f003 030f 	and.w	r3, r3, #15
 800824a:	e006      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800824c:	4b87      	ldr	r3, [pc, #540]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800824e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008252:	041b      	lsls	r3, r3, #16
 8008254:	0e1b      	lsrs	r3, r3, #24
 8008256:	f003 030f 	and.w	r3, r3, #15
 800825a:	4a86      	ldr	r2, [pc, #536]	@ (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800825c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008260:	637b      	str	r3, [r7, #52]	@ 0x34
 8008262:	e3fd      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	637b      	str	r3, [r7, #52]	@ 0x34
 8008268:	e3fa      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800826a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800826e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008272:	430b      	orrs	r3, r1
 8008274:	d164      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8008276:	4b7d      	ldr	r3, [pc, #500]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800827c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008280:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8008282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008284:	2b00      	cmp	r3, #0
 8008286:	d120      	bne.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008288:	4b78      	ldr	r3, [pc, #480]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0320 	and.w	r3, r3, #32
 8008290:	2b20      	cmp	r3, #32
 8008292:	d117      	bne.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008294:	4b75      	ldr	r3, [pc, #468]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d005      	beq.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 80082a0:	4b72      	ldr	r3, [pc, #456]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	0e1b      	lsrs	r3, r3, #24
 80082a6:	f003 030f 	and.w	r3, r3, #15
 80082aa:	e006      	b.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 80082ac:	4b6f      	ldr	r3, [pc, #444]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80082ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082b2:	041b      	lsls	r3, r3, #16
 80082b4:	0e1b      	lsrs	r3, r3, #24
 80082b6:	f003 030f 	and.w	r3, r3, #15
 80082ba:	4a6e      	ldr	r2, [pc, #440]	@ (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80082bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80082c2:	e3cd      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80082c4:	2300      	movs	r3, #0
 80082c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80082c8:	e3ca      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80082ca:	4b68      	ldr	r3, [pc, #416]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80082cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082d8:	d112      	bne.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 80082da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082e0:	d10e      	bne.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80082e2:	4b62      	ldr	r3, [pc, #392]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80082e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082f0:	d102      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 80082f2:	23fa      	movs	r3, #250	@ 0xfa
 80082f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80082f6:	e3b3      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80082f8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80082fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80082fe:	e3af      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8008300:	4b5a      	ldr	r3, [pc, #360]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800830c:	d106      	bne.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800830e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008310:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008314:	d102      	bne.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 8008316:	4b56      	ldr	r3, [pc, #344]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008318:	637b      	str	r3, [r7, #52]	@ 0x34
 800831a:	e3a1      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800831c:	4b53      	ldr	r3, [pc, #332]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800831e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	2b02      	cmp	r3, #2
 8008328:	d107      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 800832a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008330:	d103      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 8008332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008336:	637b      	str	r3, [r7, #52]	@ 0x34
 8008338:	e392      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	637b      	str	r3, [r7, #52]	@ 0x34
 800833e:	e38f      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008344:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008348:	430b      	orrs	r3, r1
 800834a:	d164      	bne.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800834c:	4b47      	ldr	r3, [pc, #284]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800834e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008352:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008356:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8008358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835a:	2b00      	cmp	r3, #0
 800835c:	d120      	bne.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800835e:	4b43      	ldr	r3, [pc, #268]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0320 	and.w	r3, r3, #32
 8008366:	2b20      	cmp	r3, #32
 8008368:	d117      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800836a:	4b40      	ldr	r3, [pc, #256]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 8008376:	4b3d      	ldr	r3, [pc, #244]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	0e1b      	lsrs	r3, r3, #24
 800837c:	f003 030f 	and.w	r3, r3, #15
 8008380:	e006      	b.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8008382:	4b3a      	ldr	r3, [pc, #232]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008384:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008388:	041b      	lsls	r3, r3, #16
 800838a:	0e1b      	lsrs	r3, r3, #24
 800838c:	f003 030f 	and.w	r3, r3, #15
 8008390:	4a38      	ldr	r2, [pc, #224]	@ (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8008392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008396:	637b      	str	r3, [r7, #52]	@ 0x34
 8008398:	e362      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	637b      	str	r3, [r7, #52]	@ 0x34
 800839e:	e35f      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80083a0:	4b32      	ldr	r3, [pc, #200]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80083a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083ae:	d112      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 80083b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083b6:	d10e      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083b8:	4b2c      	ldr	r3, [pc, #176]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80083ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083c6:	d102      	bne.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 80083c8:	23fa      	movs	r3, #250	@ 0xfa
 80083ca:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083cc:	e348      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80083ce:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80083d2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083d4:	e344      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80083d6:	4b25      	ldr	r3, [pc, #148]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083e2:	d106      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 80083e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083ea:	d102      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 80083ec:	4b20      	ldr	r3, [pc, #128]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80083ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80083f0:	e336      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80083f2:	4b1e      	ldr	r3, [pc, #120]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80083f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d107      	bne.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 8008400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008402:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008406:	d103      	bne.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 8008408:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800840c:	637b      	str	r3, [r7, #52]	@ 0x34
 800840e:	e327      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	637b      	str	r3, [r7, #52]	@ 0x34
 8008414:	e324      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8008416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800841a:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800841e:	430b      	orrs	r3, r1
 8008420:	d14e      	bne.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008422:	4b12      	ldr	r3, [pc, #72]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008428:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800842c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800842e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008430:	2b00      	cmp	r3, #0
 8008432:	d103      	bne.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008434:	f7fd fc36 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 8008438:	6378      	str	r0, [r7, #52]	@ 0x34
 800843a:	e311      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800843c:	4b0b      	ldr	r3, [pc, #44]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800843e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008442:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008446:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800844a:	d119      	bne.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 800844c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008452:	d115      	bne.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008454:	4b05      	ldr	r3, [pc, #20]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008456:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800845a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800845e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008462:	d109      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 8008464:	23fa      	movs	r3, #250	@ 0xfa
 8008466:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008468:	e2fa      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800846a:	bf00      	nop
 800846c:	46020c00 	.word	0x46020c00
 8008470:	00f42400 	.word	0x00f42400
 8008474:	08010648 	.word	0x08010648
      }
      else
      {
        frequency = LSI_VALUE;
 8008478:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800847c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800847e:	e2ef      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008480:	4ba8      	ldr	r3, [pc, #672]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800848c:	d106      	bne.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 800848e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008490:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008494:	d102      	bne.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 8008496:	4ba4      	ldr	r3, [pc, #656]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008498:	637b      	str	r3, [r7, #52]	@ 0x34
 800849a:	e2e1      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800849c:	4ba1      	ldr	r3, [pc, #644]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800849e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084a2:	f003 0302 	and.w	r3, r3, #2
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d107      	bne.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 80084aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80084b0:	d103      	bne.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 80084b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80084b8:	e2d2      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80084be:	e2cf      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80084c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084c4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80084c8:	430b      	orrs	r3, r1
 80084ca:	d12d      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80084cc:	4b95      	ldr	r3, [pc, #596]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80084ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084d2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80084d6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80084d8:	4b92      	ldr	r3, [pc, #584]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084e4:	d105      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 80084e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d102      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 80084ec:	4b8e      	ldr	r3, [pc, #568]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80084ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f0:	e2b6      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80084f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084f8:	d107      	bne.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fe fb4e 	bl	8006ba0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008506:	637b      	str	r3, [r7, #52]	@ 0x34
 8008508:	e2aa      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800850a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008510:	d107      	bne.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008512:	f107 0318 	add.w	r3, r7, #24
 8008516:	4618      	mov	r0, r3
 8008518:	f7fe fc9c 	bl	8006e54 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008520:	e29e      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8008522:	2300      	movs	r3, #0
 8008524:	637b      	str	r3, [r7, #52]	@ 0x34
 8008526:	e29b      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800852c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8008530:	430b      	orrs	r3, r1
 8008532:	d156      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008534:	4b7b      	ldr	r3, [pc, #492]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800853a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800853e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008542:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008546:	d028      	beq.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 8008548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800854e:	d845      	bhi.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8008550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008552:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008556:	d013      	beq.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 8008558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800855e:	d83d      	bhi.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8008560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008562:	2b00      	cmp	r3, #0
 8008564:	d004      	beq.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 8008566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008568:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800856c:	d004      	beq.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 800856e:	e035      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008570:	f7fd fbac 	bl	8005ccc <HAL_RCC_GetPCLK2Freq>
 8008574:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008576:	e273      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008578:	f7fd fa78 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 800857c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800857e:	e26f      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008580:	4b68      	ldr	r3, [pc, #416]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800858c:	d102      	bne.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 800858e:	4b66      	ldr	r3, [pc, #408]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008590:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008592:	e265      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008594:	2300      	movs	r3, #0
 8008596:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008598:	e262      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800859a:	4b62      	ldr	r3, [pc, #392]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0320 	and.w	r3, r3, #32
 80085a2:	2b20      	cmp	r3, #32
 80085a4:	d117      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80085a6:	4b5f      	ldr	r3, [pc, #380]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d005      	beq.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 80085b2:	4b5c      	ldr	r3, [pc, #368]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	0e1b      	lsrs	r3, r3, #24
 80085b8:	f003 030f 	and.w	r3, r3, #15
 80085bc:	e006      	b.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 80085be:	4b59      	ldr	r3, [pc, #356]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80085c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80085c4:	041b      	lsls	r3, r3, #16
 80085c6:	0e1b      	lsrs	r3, r3, #24
 80085c8:	f003 030f 	and.w	r3, r3, #15
 80085cc:	4a57      	ldr	r2, [pc, #348]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80085ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085d2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80085d4:	e244      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085da:	e241      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80085dc:	2300      	movs	r3, #0
 80085de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085e0:	e23e      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80085e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085e6:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80085ea:	430b      	orrs	r3, r1
 80085ec:	d156      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80085ee:	4b4d      	ldr	r3, [pc, #308]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80085f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80085f8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008600:	d028      	beq.n	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 8008602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008604:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008608:	d845      	bhi.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008610:	d013      	beq.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8008612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008618:	d83d      	bhi.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800861a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861c:	2b00      	cmp	r3, #0
 800861e:	d004      	beq.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8008620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008626:	d004      	beq.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8008628:	e035      	b.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800862a:	f7fd fb3b 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 800862e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008630:	e216      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008632:	f7fd fa1b 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8008636:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008638:	e212      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800863a:	4b3a      	ldr	r3, [pc, #232]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008646:	d102      	bne.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 8008648:	4b37      	ldr	r3, [pc, #220]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800864a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800864c:	e208      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800864e:	2300      	movs	r3, #0
 8008650:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008652:	e205      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008654:	4b33      	ldr	r3, [pc, #204]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0320 	and.w	r3, r3, #32
 800865c:	2b20      	cmp	r3, #32
 800865e:	d117      	bne.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008660:	4b30      	ldr	r3, [pc, #192]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d005      	beq.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 800866c:	4b2d      	ldr	r3, [pc, #180]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	0e1b      	lsrs	r3, r3, #24
 8008672:	f003 030f 	and.w	r3, r3, #15
 8008676:	e006      	b.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 8008678:	4b2a      	ldr	r3, [pc, #168]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800867a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800867e:	041b      	lsls	r3, r3, #16
 8008680:	0e1b      	lsrs	r3, r3, #24
 8008682:	f003 030f 	and.w	r3, r3, #15
 8008686:	4a29      	ldr	r2, [pc, #164]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8008688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800868c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800868e:	e1e7      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008690:	2300      	movs	r3, #0
 8008692:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008694:	e1e4      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8008696:	2300      	movs	r3, #0
 8008698:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800869a:	e1e1      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800869c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086a0:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80086a4:	430b      	orrs	r3, r1
 80086a6:	d17c      	bne.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80086a8:	4b1e      	ldr	r3, [pc, #120]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80086aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086ae:	f003 0318 	and.w	r3, r3, #24
 80086b2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80086b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b6:	2b18      	cmp	r3, #24
 80086b8:	d870      	bhi.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 80086ba:	a201      	add	r2, pc, #4	@ (adr r2, 80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 80086bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c0:	08008731 	.word	0x08008731
 80086c4:	0800879d 	.word	0x0800879d
 80086c8:	0800879d 	.word	0x0800879d
 80086cc:	0800879d 	.word	0x0800879d
 80086d0:	0800879d 	.word	0x0800879d
 80086d4:	0800879d 	.word	0x0800879d
 80086d8:	0800879d 	.word	0x0800879d
 80086dc:	0800879d 	.word	0x0800879d
 80086e0:	08008739 	.word	0x08008739
 80086e4:	0800879d 	.word	0x0800879d
 80086e8:	0800879d 	.word	0x0800879d
 80086ec:	0800879d 	.word	0x0800879d
 80086f0:	0800879d 	.word	0x0800879d
 80086f4:	0800879d 	.word	0x0800879d
 80086f8:	0800879d 	.word	0x0800879d
 80086fc:	0800879d 	.word	0x0800879d
 8008700:	08008741 	.word	0x08008741
 8008704:	0800879d 	.word	0x0800879d
 8008708:	0800879d 	.word	0x0800879d
 800870c:	0800879d 	.word	0x0800879d
 8008710:	0800879d 	.word	0x0800879d
 8008714:	0800879d 	.word	0x0800879d
 8008718:	0800879d 	.word	0x0800879d
 800871c:	0800879d 	.word	0x0800879d
 8008720:	0800875b 	.word	0x0800875b
 8008724:	46020c00 	.word	0x46020c00
 8008728:	00f42400 	.word	0x00f42400
 800872c:	08010648 	.word	0x08010648
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008730:	f7fd fae0 	bl	8005cf4 <HAL_RCC_GetPCLK3Freq>
 8008734:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008736:	e193      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008738:	f7fd f998 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 800873c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800873e:	e18f      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008740:	4b9f      	ldr	r3, [pc, #636]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800874c:	d102      	bne.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 800874e:	4b9d      	ldr	r3, [pc, #628]	@ (80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8008750:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008752:	e185      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008754:	2300      	movs	r3, #0
 8008756:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008758:	e182      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800875a:	4b99      	ldr	r3, [pc, #612]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0320 	and.w	r3, r3, #32
 8008762:	2b20      	cmp	r3, #32
 8008764:	d117      	bne.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008766:	4b96      	ldr	r3, [pc, #600]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d005      	beq.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 8008772:	4b93      	ldr	r3, [pc, #588]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	0e1b      	lsrs	r3, r3, #24
 8008778:	f003 030f 	and.w	r3, r3, #15
 800877c:	e006      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 800877e:	4b90      	ldr	r3, [pc, #576]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008780:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008784:	041b      	lsls	r3, r3, #16
 8008786:	0e1b      	lsrs	r3, r3, #24
 8008788:	f003 030f 	and.w	r3, r3, #15
 800878c:	4a8e      	ldr	r2, [pc, #568]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800878e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008792:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008794:	e164      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800879a:	e161      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087a0:	e15e      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80087a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80087aa:	430b      	orrs	r3, r1
 80087ac:	d155      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80087ae:	4b84      	ldr	r3, [pc, #528]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80087b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80087b4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80087b8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80087ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087c0:	d013      	beq.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 80087c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087c8:	d844      	bhi.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 80087ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087d0:	d013      	beq.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087d8:	d83c      	bhi.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 80087da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d014      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 80087e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087e6:	d014      	beq.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 80087e8:	e034      	b.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ea:	f107 0318 	add.w	r3, r7, #24
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fe fb30 	bl	8006e54 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087f8:	e132      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe f9ce 	bl	8006ba0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008806:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008808:	e12a      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800880a:	f7fd f92f 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 800880e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008810:	e126      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008812:	4b6b      	ldr	r3, [pc, #428]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0320 	and.w	r3, r3, #32
 800881a:	2b20      	cmp	r3, #32
 800881c:	d117      	bne.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800881e:	4b68      	ldr	r3, [pc, #416]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d005      	beq.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 800882a:	4b65      	ldr	r3, [pc, #404]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	0e1b      	lsrs	r3, r3, #24
 8008830:	f003 030f 	and.w	r3, r3, #15
 8008834:	e006      	b.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 8008836:	4b62      	ldr	r3, [pc, #392]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008838:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800883c:	041b      	lsls	r3, r3, #16
 800883e:	0e1b      	lsrs	r3, r3, #24
 8008840:	f003 030f 	and.w	r3, r3, #15
 8008844:	4a60      	ldr	r2, [pc, #384]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800884a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800884c:	e108      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800884e:	2300      	movs	r3, #0
 8008850:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008852:	e105      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8008854:	2300      	movs	r3, #0
 8008856:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008858:	e102      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800885a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800885e:	1e59      	subs	r1, r3, #1
 8008860:	ea52 0301 	orrs.w	r3, r2, r1
 8008864:	d13c      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8008866:	4b56      	ldr	r3, [pc, #344]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008868:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800886c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008870:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008874:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008878:	d027      	beq.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 800887a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008880:	d82b      	bhi.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8008882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008884:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008888:	d017      	beq.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 800888a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008890:	d823      	bhi.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8008892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008894:	2b00      	cmp	r3, #0
 8008896:	d004      	beq.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 8008898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800889e:	d004      	beq.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 80088a0:	e01b      	b.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80088a2:	f7fd f8e3 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 80088a6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80088a8:	e0da      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe f976 	bl	8006ba0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80088b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088b8:	e0d2      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ba:	f107 0318 	add.w	r3, r7, #24
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe fac8 	bl	8006e54 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088c8:	e0ca      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ca:	f107 030c 	add.w	r3, r7, #12
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe fc1a 	bl	8007108 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088d8:	e0c2      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80088da:	2300      	movs	r3, #0
 80088dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088de:	e0bf      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80088e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088e4:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80088e8:	430b      	orrs	r3, r1
 80088ea:	d131      	bne.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80088ec:	4b34      	ldr	r3, [pc, #208]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80088ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088f6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80088f8:	4b31      	ldr	r3, [pc, #196]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80088fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b02      	cmp	r3, #2
 8008904:	d106      	bne.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 8008906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008908:	2b00      	cmp	r3, #0
 800890a:	d103      	bne.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 800890c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008910:	637b      	str	r3, [r7, #52]	@ 0x34
 8008912:	e0a5      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008914:	4b2a      	ldr	r3, [pc, #168]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008916:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800891a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800891e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008922:	d112      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 8008924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008926:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800892a:	d10e      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800892c:	4b24      	ldr	r3, [pc, #144]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800892e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008936:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800893a:	d102      	bne.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 800893c:	23fa      	movs	r3, #250	@ 0xfa
 800893e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008940:	e08e      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8008942:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008946:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008948:	e08a      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800894a:	2300      	movs	r3, #0
 800894c:	637b      	str	r3, [r7, #52]	@ 0x34
 800894e:	e087      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008954:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008958:	430b      	orrs	r3, r1
 800895a:	d13b      	bne.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800895c:	4b18      	ldr	r3, [pc, #96]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800895e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008962:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008966:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008968:	4b15      	ldr	r3, [pc, #84]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008974:	d105      	bne.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 8008976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008978:	2b00      	cmp	r3, #0
 800897a:	d102      	bne.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 800897c:	4b13      	ldr	r3, [pc, #76]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800897e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008980:	e06e      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008982:	4b0f      	ldr	r3, [pc, #60]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800898a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800898e:	d106      	bne.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 8008990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008996:	d102      	bne.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008998:	4b0d      	ldr	r3, [pc, #52]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800899a:	637b      	str	r3, [r7, #52]	@ 0x34
 800899c:	e060      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800899e:	4b08      	ldr	r3, [pc, #32]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089aa:	d106      	bne.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 80089ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089b2:	d102      	bne.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 80089b4:	4b03      	ldr	r3, [pc, #12]	@ (80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80089b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80089b8:	e052      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80089be:	e04f      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80089c0:	46020c00 	.word	0x46020c00
 80089c4:	00f42400 	.word	0x00f42400
 80089c8:	08010648 	.word	0x08010648
 80089cc:	02dc6c00 	.word	0x02dc6c00
 80089d0:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 80089d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089d8:	f1a3 0108 	sub.w	r1, r3, #8
 80089dc:	ea52 0301 	orrs.w	r3, r2, r1
 80089e0:	d13c      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 80089e2:	4b22      	ldr	r3, [pc, #136]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80089e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80089e8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80089ec:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 80089ee:	4b1f      	ldr	r3, [pc, #124]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089fa:	d105      	bne.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 80089fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d102      	bne.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 8008a02:	4b1b      	ldr	r3, [pc, #108]	@ (8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 8008a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a06:	e02b      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8008a08:	4b18      	ldr	r3, [pc, #96]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a14:	d106      	bne.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 8008a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a1c:	d102      	bne.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 8008a1e:	4b15      	ldr	r3, [pc, #84]	@ (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8008a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a22:	e01d      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8008a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a2a:	d107      	bne.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe f8b5 	bl	8006ba0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a3a:	e011      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008a42:	d108      	bne.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7fe f8a9 	bl	8006ba0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a50:	085b      	lsrs	r3, r3, #1
 8008a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a54:	e004      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a5a:	e001      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8008a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3738      	adds	r7, #56	@ 0x38
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	46020c00 	.word	0x46020c00
 8008a70:	00f42400 	.word	0x00f42400
 8008a74:	007a1200 	.word	0x007a1200

08008a78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008a80:	4b47      	ldr	r3, [pc, #284]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a46      	ldr	r2, [pc, #280]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008a86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008a8a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a8c:	f7f9 fc54 	bl	8002338 <HAL_GetTick>
 8008a90:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a92:	e008      	b.n	8008aa6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a94:	f7f9 fc50 	bl	8002338 <HAL_GetTick>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d901      	bls.n	8008aa6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e077      	b.n	8008b96 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1f0      	bne.n	8008a94 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008aba:	f023 0303 	bic.w	r3, r3, #3
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	6811      	ldr	r1, [r2, #0]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	6852      	ldr	r2, [r2, #4]
 8008ac6:	3a01      	subs	r2, #1
 8008ac8:	0212      	lsls	r2, r2, #8
 8008aca:	430a      	orrs	r2, r1
 8008acc:	4934      	ldr	r1, [pc, #208]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008ad2:	4b33      	ldr	r3, [pc, #204]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008ad4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ad6:	4b33      	ldr	r3, [pc, #204]	@ (8008ba4 <RCCEx_PLL2_Config+0x12c>)
 8008ad8:	4013      	ands	r3, r2
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	6892      	ldr	r2, [r2, #8]
 8008ade:	3a01      	subs	r2, #1
 8008ae0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	68d2      	ldr	r2, [r2, #12]
 8008ae8:	3a01      	subs	r2, #1
 8008aea:	0252      	lsls	r2, r2, #9
 8008aec:	b292      	uxth	r2, r2
 8008aee:	4311      	orrs	r1, r2
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	6912      	ldr	r2, [r2, #16]
 8008af4:	3a01      	subs	r2, #1
 8008af6:	0412      	lsls	r2, r2, #16
 8008af8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008afc:	4311      	orrs	r1, r2
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6952      	ldr	r2, [r2, #20]
 8008b02:	3a01      	subs	r2, #1
 8008b04:	0612      	lsls	r2, r2, #24
 8008b06:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	4924      	ldr	r1, [pc, #144]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008b12:	4b23      	ldr	r3, [pc, #140]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b16:	f023 020c 	bic.w	r2, r3, #12
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	4920      	ldr	r1, [pc, #128]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008b24:	4b1e      	ldr	r3, [pc, #120]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a1b      	ldr	r3, [r3, #32]
 8008b2c:	491c      	ldr	r1, [pc, #112]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008b32:	4b1b      	ldr	r3, [pc, #108]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b36:	4a1a      	ldr	r2, [pc, #104]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008b38:	f023 0310 	bic.w	r3, r3, #16
 8008b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b3e:	4b18      	ldr	r3, [pc, #96]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b46:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	69d2      	ldr	r2, [r2, #28]
 8008b4e:	00d2      	lsls	r2, r2, #3
 8008b50:	4913      	ldr	r1, [pc, #76]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008b52:	4313      	orrs	r3, r2
 8008b54:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008b56:	4b12      	ldr	r3, [pc, #72]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b5a:	4a11      	ldr	r2, [pc, #68]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008b5c:	f043 0310 	orr.w	r3, r3, #16
 8008b60:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008b62:	4b0f      	ldr	r3, [pc, #60]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a0e      	ldr	r2, [pc, #56]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008b68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b6c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b6e:	f7f9 fbe3 	bl	8002338 <HAL_GetTick>
 8008b72:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b74:	e008      	b.n	8008b88 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b76:	f7f9 fbdf 	bl	8002338 <HAL_GetTick>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d901      	bls.n	8008b88 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e006      	b.n	8008b96 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b88:	4b05      	ldr	r3, [pc, #20]	@ (8008ba0 <RCCEx_PLL2_Config+0x128>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d0f0      	beq.n	8008b76 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008b94:	2300      	movs	r3, #0

}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	46020c00 	.word	0x46020c00
 8008ba4:	80800000 	.word	0x80800000

08008ba8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008bb0:	4b47      	ldr	r3, [pc, #284]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a46      	ldr	r2, [pc, #280]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008bbc:	f7f9 fbbc 	bl	8002338 <HAL_GetTick>
 8008bc0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bc2:	e008      	b.n	8008bd6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008bc4:	f7f9 fbb8 	bl	8002338 <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d901      	bls.n	8008bd6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e077      	b.n	8008cc6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1f0      	bne.n	8008bc4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008be2:	4b3b      	ldr	r3, [pc, #236]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008be6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008bea:	f023 0303 	bic.w	r3, r3, #3
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	6811      	ldr	r1, [r2, #0]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	6852      	ldr	r2, [r2, #4]
 8008bf6:	3a01      	subs	r2, #1
 8008bf8:	0212      	lsls	r2, r2, #8
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	4934      	ldr	r1, [pc, #208]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	630b      	str	r3, [r1, #48]	@ 0x30
 8008c02:	4b33      	ldr	r3, [pc, #204]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008c04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c06:	4b33      	ldr	r3, [pc, #204]	@ (8008cd4 <RCCEx_PLL3_Config+0x12c>)
 8008c08:	4013      	ands	r3, r2
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	6892      	ldr	r2, [r2, #8]
 8008c0e:	3a01      	subs	r2, #1
 8008c10:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	68d2      	ldr	r2, [r2, #12]
 8008c18:	3a01      	subs	r2, #1
 8008c1a:	0252      	lsls	r2, r2, #9
 8008c1c:	b292      	uxth	r2, r2
 8008c1e:	4311      	orrs	r1, r2
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	6912      	ldr	r2, [r2, #16]
 8008c24:	3a01      	subs	r2, #1
 8008c26:	0412      	lsls	r2, r2, #16
 8008c28:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008c2c:	4311      	orrs	r1, r2
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	6952      	ldr	r2, [r2, #20]
 8008c32:	3a01      	subs	r2, #1
 8008c34:	0612      	lsls	r2, r2, #24
 8008c36:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	4924      	ldr	r1, [pc, #144]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008c42:	4b23      	ldr	r3, [pc, #140]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c46:	f023 020c 	bic.w	r2, r3, #12
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	4920      	ldr	r1, [pc, #128]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008c50:	4313      	orrs	r3, r2
 8008c52:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008c54:	4b1e      	ldr	r3, [pc, #120]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008c56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a1b      	ldr	r3, [r3, #32]
 8008c5c:	491c      	ldr	r1, [pc, #112]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008c62:	4b1b      	ldr	r3, [pc, #108]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c66:	4a1a      	ldr	r2, [pc, #104]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008c68:	f023 0310 	bic.w	r3, r3, #16
 8008c6c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c6e:	4b18      	ldr	r3, [pc, #96]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c76:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	69d2      	ldr	r2, [r2, #28]
 8008c7e:	00d2      	lsls	r2, r2, #3
 8008c80:	4913      	ldr	r1, [pc, #76]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008c82:	4313      	orrs	r3, r2
 8008c84:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008c86:	4b12      	ldr	r3, [pc, #72]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c8a:	4a11      	ldr	r2, [pc, #68]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008c8c:	f043 0310 	orr.w	r3, r3, #16
 8008c90:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008c92:	4b0f      	ldr	r3, [pc, #60]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a0e      	ldr	r2, [pc, #56]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c9c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008c9e:	f7f9 fb4b 	bl	8002338 <HAL_GetTick>
 8008ca2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ca4:	e008      	b.n	8008cb8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ca6:	f7f9 fb47 	bl	8002338 <HAL_GetTick>
 8008caa:	4602      	mov	r2, r0
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d901      	bls.n	8008cb8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e006      	b.n	8008cc6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cb8:	4b05      	ldr	r3, [pc, #20]	@ (8008cd0 <RCCEx_PLL3_Config+0x128>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d0f0      	beq.n	8008ca6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	46020c00 	.word	0x46020c00
 8008cd4:	80800000 	.word	0x80800000

08008cd8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e0fb      	b.n	8008ee2 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a7f      	ldr	r2, [pc, #508]	@ (8008eec <HAL_SPI_Init+0x214>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d004      	beq.n	8008cfe <HAL_SPI_Init+0x26>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a7d      	ldr	r2, [pc, #500]	@ (8008ef0 <HAL_SPI_Init+0x218>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	e000      	b.n	8008d00 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008cfe:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a78      	ldr	r2, [pc, #480]	@ (8008eec <HAL_SPI_Init+0x214>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d004      	beq.n	8008d1a <HAL_SPI_Init+0x42>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a76      	ldr	r2, [pc, #472]	@ (8008ef0 <HAL_SPI_Init+0x218>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d105      	bne.n	8008d26 <HAL_SPI_Init+0x4e>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	2b0f      	cmp	r3, #15
 8008d20:	d901      	bls.n	8008d26 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e0dd      	b.n	8008ee2 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fc14 	bl	8009554 <SPI_GetPacketSize>
 8008d2c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a6e      	ldr	r2, [pc, #440]	@ (8008eec <HAL_SPI_Init+0x214>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d004      	beq.n	8008d42 <HAL_SPI_Init+0x6a>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a6c      	ldr	r2, [pc, #432]	@ (8008ef0 <HAL_SPI_Init+0x218>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d102      	bne.n	8008d48 <HAL_SPI_Init+0x70>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b08      	cmp	r3, #8
 8008d46:	d816      	bhi.n	8008d76 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008d4c:	4a69      	ldr	r2, [pc, #420]	@ (8008ef4 <HAL_SPI_Init+0x21c>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d00e      	beq.n	8008d70 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a68      	ldr	r2, [pc, #416]	@ (8008ef8 <HAL_SPI_Init+0x220>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d009      	beq.n	8008d70 <HAL_SPI_Init+0x98>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a66      	ldr	r2, [pc, #408]	@ (8008efc <HAL_SPI_Init+0x224>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d004      	beq.n	8008d70 <HAL_SPI_Init+0x98>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a65      	ldr	r2, [pc, #404]	@ (8008f00 <HAL_SPI_Init+0x228>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d104      	bne.n	8008d7a <HAL_SPI_Init+0xa2>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2b10      	cmp	r3, #16
 8008d74:	d901      	bls.n	8008d7a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e0b3      	b.n	8008ee2 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d106      	bne.n	8008d94 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7f8 feea 	bl	8001b68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2202      	movs	r2, #2
 8008d98:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f022 0201 	bic.w	r2, r2, #1
 8008daa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008db6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008dc0:	d119      	bne.n	8008df6 <HAL_SPI_Init+0x11e>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008dca:	d103      	bne.n	8008dd4 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d008      	beq.n	8008de6 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10c      	bne.n	8008df6 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008de0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008de4:	d107      	bne.n	8008df6 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008df4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00f      	beq.n	8008e22 <HAL_SPI_Init+0x14a>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	2b06      	cmp	r3, #6
 8008e08:	d90b      	bls.n	8008e22 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	e007      	b.n	8008e32 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	69da      	ldr	r2, [r3, #28]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e3a:	431a      	orrs	r2, r3
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	431a      	orrs	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e44:	ea42 0103 	orr.w	r1, r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68da      	ldr	r2, [r3, #12]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	430a      	orrs	r2, r1
 8008e52:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e5c:	431a      	orrs	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e62:	431a      	orrs	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	691b      	ldr	r3, [r3, #16]
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	695b      	ldr	r3, [r3, #20]
 8008e74:	431a      	orrs	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	431a      	orrs	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e86:	431a      	orrs	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	431a      	orrs	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e92:	431a      	orrs	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e98:	431a      	orrs	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e9e:	ea42 0103 	orr.w	r1, r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00a      	beq.n	8008ed0 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	46002000 	.word	0x46002000
 8008ef0:	56002000 	.word	0x56002000
 8008ef4:	40013000 	.word	0x40013000
 8008ef8:	50013000 	.word	0x50013000
 8008efc:	40003800 	.word	0x40003800
 8008f00:	50003800 	.word	0x50003800

08008f04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b08c      	sub	sp, #48	@ 0x30
 8008f08:	af02      	add	r7, sp, #8
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
 8008f10:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3320      	adds	r3, #32
 8008f18:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3330      	adds	r3, #48	@ 0x30
 8008f20:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f22:	f7f9 fa09 	bl	8002338 <HAL_GetTick>
 8008f26:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8008f28:	887b      	ldrh	r3, [r7, #2]
 8008f2a:	847b      	strh	r3, [r7, #34]	@ 0x22
  initial_RxXferCount = Size;
 8008f2c:	887b      	ldrh	r3, [r7, #2]
 8008f2e:	843b      	strh	r3, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d001      	beq.n	8008f40 <HAL_SPI_TransmitReceive+0x3c>
  {
    return HAL_BUSY;
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	e237      	b.n	80093b0 <HAL_SPI_TransmitReceive+0x4ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d005      	beq.n	8008f52 <HAL_SPI_TransmitReceive+0x4e>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d002      	beq.n	8008f52 <HAL_SPI_TransmitReceive+0x4e>
 8008f4c:	887b      	ldrh	r3, [r7, #2]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d101      	bne.n	8008f56 <HAL_SPI_TransmitReceive+0x52>
  {
    return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e22c      	b.n	80093b0 <HAL_SPI_TransmitReceive+0x4ac>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d101      	bne.n	8008f64 <HAL_SPI_TransmitReceive+0x60>
 8008f60:	2302      	movs	r3, #2
 8008f62:	e225      	b.n	80093b0 <HAL_SPI_TransmitReceive+0x4ac>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2205      	movs	r2, #5
 8008f70:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	887a      	ldrh	r2, [r7, #2]
 8008f86:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	887a      	ldrh	r2, [r7, #2]
 8008f8e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	887a      	ldrh	r2, [r7, #2]
 8008f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	887a      	ldrh	r2, [r7, #2]
 8008fa4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68da      	ldr	r2, [r3, #12]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8008fc2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a6c      	ldr	r2, [pc, #432]	@ (800917c <HAL_SPI_TransmitReceive+0x278>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d00e      	beq.n	8008fec <HAL_SPI_TransmitReceive+0xe8>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a6b      	ldr	r2, [pc, #428]	@ (8009180 <HAL_SPI_TransmitReceive+0x27c>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d009      	beq.n	8008fec <HAL_SPI_TransmitReceive+0xe8>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a69      	ldr	r2, [pc, #420]	@ (8009184 <HAL_SPI_TransmitReceive+0x280>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d004      	beq.n	8008fec <HAL_SPI_TransmitReceive+0xe8>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a68      	ldr	r2, [pc, #416]	@ (8009188 <HAL_SPI_TransmitReceive+0x284>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d102      	bne.n	8008ff2 <HAL_SPI_TransmitReceive+0xee>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8008fec:	2310      	movs	r3, #16
 8008fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ff0:	e001      	b.n	8008ff6 <HAL_SPI_TransmitReceive+0xf2>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8008ff2:	2308      	movs	r3, #8
 8008ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	0c1b      	lsrs	r3, r3, #16
 8008ffe:	041b      	lsls	r3, r3, #16
 8009000:	8879      	ldrh	r1, [r7, #2]
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	6812      	ldr	r2, [r2, #0]
 8009006:	430b      	orrs	r3, r1
 8009008:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f042 0201 	orr.w	r2, r2, #1
 8009018:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	69db      	ldr	r3, [r3, #28]
 8009020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10c      	bne.n	8009042 <HAL_SPI_TransmitReceive+0x13e>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009030:	d107      	bne.n	8009042 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009040:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	2b0f      	cmp	r3, #15
 8009048:	f240 808e 	bls.w	8009168 <HAL_SPI_TransmitReceive+0x264>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a4a      	ldr	r2, [pc, #296]	@ (800917c <HAL_SPI_TransmitReceive+0x278>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d00e      	beq.n	8009074 <HAL_SPI_TransmitReceive+0x170>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a49      	ldr	r2, [pc, #292]	@ (8009180 <HAL_SPI_TransmitReceive+0x27c>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d009      	beq.n	8009074 <HAL_SPI_TransmitReceive+0x170>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a47      	ldr	r2, [pc, #284]	@ (8009184 <HAL_SPI_TransmitReceive+0x280>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d004      	beq.n	8009074 <HAL_SPI_TransmitReceive+0x170>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a46      	ldr	r2, [pc, #280]	@ (8009188 <HAL_SPI_TransmitReceive+0x284>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d179      	bne.n	8009168 <HAL_SPI_TransmitReceive+0x264>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8009074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009076:	089b      	lsrs	r3, r3, #2
 8009078:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800907a:	e06e      	b.n	800915a <HAL_SPI_TransmitReceive+0x256>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	695b      	ldr	r3, [r3, #20]
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	2b02      	cmp	r3, #2
 8009088:	d120      	bne.n	80090cc <HAL_SPI_TransmitReceive+0x1c8>
 800908a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800908c:	2b00      	cmp	r3, #0
 800908e:	d01d      	beq.n	80090cc <HAL_SPI_TransmitReceive+0x1c8>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009090:	8c3a      	ldrh	r2, [r7, #32]
 8009092:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8009094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009096:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009098:	429a      	cmp	r2, r3
 800909a:	d217      	bcs.n	80090cc <HAL_SPI_TransmitReceive+0x1c8>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6812      	ldr	r2, [r2, #0]
 80090a6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090ac:	1d1a      	adds	r2, r3, #4
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	3b01      	subs	r3, #1
 80090bc:	b29a      	uxth	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80090ca:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	695a      	ldr	r2, [r3, #20]
 80090d2:	f248 0308 	movw	r3, #32776	@ 0x8008
 80090d6:	4013      	ands	r3, r2
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d01a      	beq.n	8009112 <HAL_SPI_TransmitReceive+0x20e>
 80090dc:	8c3b      	ldrh	r3, [r7, #32]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d017      	beq.n	8009112 <HAL_SPI_TransmitReceive+0x20e>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090ea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80090ec:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090f2:	1d1a      	adds	r2, r3, #4
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount --;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80090fe:	b29b      	uxth	r3, r3
 8009100:	3b01      	subs	r3, #1
 8009102:	b29a      	uxth	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009110:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009112:	f7f9 f911 	bl	8002338 <HAL_GetTick>
 8009116:	4602      	mov	r2, r0
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800911e:	429a      	cmp	r2, r3
 8009120:	d803      	bhi.n	800912a <HAL_SPI_TransmitReceive+0x226>
 8009122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009128:	d102      	bne.n	8009130 <HAL_SPI_TransmitReceive+0x22c>
 800912a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912c:	2b00      	cmp	r3, #0
 800912e:	d114      	bne.n	800915a <HAL_SPI_TransmitReceive+0x256>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f000 f941 	bl	80093b8 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800913c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e12a      	b.n	80093b0 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800915a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800915c:	2b00      	cmp	r3, #0
 800915e:	d18d      	bne.n	800907c <HAL_SPI_TransmitReceive+0x178>
 8009160:	8c3b      	ldrh	r3, [r7, #32]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d18a      	bne.n	800907c <HAL_SPI_TransmitReceive+0x178>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009166:	e0fd      	b.n	8009364 <HAL_SPI_TransmitReceive+0x460>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	2b07      	cmp	r3, #7
 800916e:	f240 80f3 	bls.w	8009358 <HAL_SPI_TransmitReceive+0x454>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8009172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009174:	085b      	lsrs	r3, r3, #1
 8009176:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009178:	e075      	b.n	8009266 <HAL_SPI_TransmitReceive+0x362>
 800917a:	bf00      	nop
 800917c:	40013000 	.word	0x40013000
 8009180:	50013000 	.word	0x50013000
 8009184:	40003800 	.word	0x40003800
 8009188:	50003800 	.word	0x50003800
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	f003 0302 	and.w	r3, r3, #2
 8009196:	2b02      	cmp	r3, #2
 8009198:	d11f      	bne.n	80091da <HAL_SPI_TransmitReceive+0x2d6>
 800919a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800919c:	2b00      	cmp	r3, #0
 800919e:	d01c      	beq.n	80091da <HAL_SPI_TransmitReceive+0x2d6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80091a0:	8c3a      	ldrh	r2, [r7, #32]
 80091a2:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80091a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d216      	bcs.n	80091da <HAL_SPI_TransmitReceive+0x2d6>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091b0:	881a      	ldrh	r2, [r3, #0]
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091ba:	1c9a      	adds	r2, r3, #2
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	3b01      	subs	r3, #1
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80091d8:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	695b      	ldr	r3, [r3, #20]
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d11a      	bne.n	800921e <HAL_SPI_TransmitReceive+0x31a>
 80091e8:	8c3b      	ldrh	r3, [r7, #32]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d017      	beq.n	800921e <HAL_SPI_TransmitReceive+0x31a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	8812      	ldrh	r2, [r2, #0]
 80091f6:	b292      	uxth	r2, r2
 80091f8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091fe:	1c9a      	adds	r2, r3, #2
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800920a:	b29b      	uxth	r3, r3
 800920c:	3b01      	subs	r3, #1
 800920e:	b29a      	uxth	r2, r3
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800921c:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800921e:	f7f9 f88b 	bl	8002338 <HAL_GetTick>
 8009222:	4602      	mov	r2, r0
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800922a:	429a      	cmp	r2, r3
 800922c:	d803      	bhi.n	8009236 <HAL_SPI_TransmitReceive+0x332>
 800922e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009234:	d102      	bne.n	800923c <HAL_SPI_TransmitReceive+0x338>
 8009236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009238:	2b00      	cmp	r3, #0
 800923a:	d114      	bne.n	8009266 <HAL_SPI_TransmitReceive+0x362>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f000 f8bb 	bl	80093b8 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009248:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e0a4      	b.n	80093b0 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009266:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009268:	2b00      	cmp	r3, #0
 800926a:	d18f      	bne.n	800918c <HAL_SPI_TransmitReceive+0x288>
 800926c:	8c3b      	ldrh	r3, [r7, #32]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d18c      	bne.n	800918c <HAL_SPI_TransmitReceive+0x288>
 8009272:	e077      	b.n	8009364 <HAL_SPI_TransmitReceive+0x460>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	695b      	ldr	r3, [r3, #20]
 800927a:	f003 0302 	and.w	r3, r3, #2
 800927e:	2b02      	cmp	r3, #2
 8009280:	d121      	bne.n	80092c6 <HAL_SPI_TransmitReceive+0x3c2>
 8009282:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009284:	2b00      	cmp	r3, #0
 8009286:	d01e      	beq.n	80092c6 <HAL_SPI_TransmitReceive+0x3c2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009288:	8c3a      	ldrh	r2, [r7, #32]
 800928a:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800928c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009290:	429a      	cmp	r2, r3
 8009292:	d218      	bcs.n	80092c6 <HAL_SPI_TransmitReceive+0x3c2>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3320      	adds	r3, #32
 800929e:	7812      	ldrb	r2, [r2, #0]
 80092a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092a6:	1c5a      	adds	r2, r3, #1
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	3b01      	subs	r3, #1
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092c4:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	f003 0301 	and.w	r3, r3, #1
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d11d      	bne.n	8009310 <HAL_SPI_TransmitReceive+0x40c>
 80092d4:	8c3b      	ldrh	r3, [r7, #32]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d01a      	beq.n	8009310 <HAL_SPI_TransmitReceive+0x40c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092e6:	7812      	ldrb	r2, [r2, #0]
 80092e8:	b2d2      	uxtb	r2, r2
 80092ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092f0:	1c5a      	adds	r2, r3, #1
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	3b01      	subs	r3, #1
 8009300:	b29a      	uxth	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800930e:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009310:	f7f9 f812 	bl	8002338 <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800931c:	429a      	cmp	r2, r3
 800931e:	d803      	bhi.n	8009328 <HAL_SPI_TransmitReceive+0x424>
 8009320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009326:	d102      	bne.n	800932e <HAL_SPI_TransmitReceive+0x42a>
 8009328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932a:	2b00      	cmp	r3, #0
 800932c:	d114      	bne.n	8009358 <HAL_SPI_TransmitReceive+0x454>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f000 f842 	bl	80093b8 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800933a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	e02b      	b.n	80093b0 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009358:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800935a:	2b00      	cmp	r3, #0
 800935c:	d18a      	bne.n	8009274 <HAL_SPI_TransmitReceive+0x370>
 800935e:	8c3b      	ldrh	r3, [r7, #32]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d187      	bne.n	8009274 <HAL_SPI_TransmitReceive+0x370>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936a:	2200      	movs	r2, #0
 800936c:	2108      	movs	r1, #8
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 f8c2 	bl	80094f8 <SPI_WaitOnFlagUntilTimeout>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d007      	beq.n	800938a <HAL_SPI_TransmitReceive+0x486>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009380:	f043 0220 	orr.w	r2, r3, #32
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f000 f814 	bl	80093b8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <HAL_SPI_TransmitReceive+0x4aa>
  {
    return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e000      	b.n	80093b0 <HAL_SPI_TransmitReceive+0x4ac>
  }
  else
  {
    return HAL_OK;
 80093ae:	2300      	movs	r3, #0
  }
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3728      	adds	r7, #40	@ 0x28
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	699a      	ldr	r2, [r3, #24]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f042 0208 	orr.w	r2, r2, #8
 80093d6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	699a      	ldr	r2, [r3, #24]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f042 0210 	orr.w	r2, r2, #16
 80093e6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f022 0201 	bic.w	r2, r2, #1
 80093f6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	6812      	ldr	r2, [r2, #0]
 8009402:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8009406:	f023 0303 	bic.w	r3, r3, #3
 800940a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	689a      	ldr	r2, [r3, #8]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800941a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2b04      	cmp	r3, #4
 8009426:	d014      	beq.n	8009452 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f003 0320 	and.w	r3, r3, #32
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00f      	beq.n	8009452 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009438:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	699a      	ldr	r2, [r3, #24]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f042 0220 	orr.w	r2, r2, #32
 8009450:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b03      	cmp	r3, #3
 800945c:	d014      	beq.n	8009488 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00f      	beq.n	8009488 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800946e:	f043 0204 	orr.w	r2, r3, #4
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	699a      	ldr	r2, [r3, #24]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009486:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00f      	beq.n	80094b2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009498:	f043 0201 	orr.w	r2, r3, #1
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	699a      	ldr	r2, [r3, #24]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094b0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00f      	beq.n	80094dc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094c2:	f043 0208 	orr.w	r2, r3, #8
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	699a      	ldr	r2, [r3, #24]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094da:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80094ec:	bf00      	nop
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	603b      	str	r3, [r7, #0]
 8009504:	4613      	mov	r3, r2
 8009506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009508:	e010      	b.n	800952c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800950a:	f7f8 ff15 	bl	8002338 <HAL_GetTick>
 800950e:	4602      	mov	r2, r0
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	1ad3      	subs	r3, r2, r3
 8009514:	683a      	ldr	r2, [r7, #0]
 8009516:	429a      	cmp	r2, r3
 8009518:	d803      	bhi.n	8009522 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009520:	d102      	bne.n	8009528 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	e00f      	b.n	800954c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	695a      	ldr	r2, [r3, #20]
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	4013      	ands	r3, r2
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	429a      	cmp	r2, r3
 800953a:	bf0c      	ite	eq
 800953c:	2301      	moveq	r3, #1
 800953e:	2300      	movne	r3, #0
 8009540:	b2db      	uxtb	r3, r3
 8009542:	461a      	mov	r2, r3
 8009544:	79fb      	ldrb	r3, [r7, #7]
 8009546:	429a      	cmp	r2, r3
 8009548:	d0df      	beq.n	800950a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009560:	095b      	lsrs	r3, r3, #5
 8009562:	3301      	adds	r3, #1
 8009564:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	3301      	adds	r3, #1
 800956c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	3307      	adds	r3, #7
 8009572:	08db      	lsrs	r3, r3, #3
 8009574:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	fb02 f303 	mul.w	r3, r2, r3
}
 800957e:	4618      	mov	r0, r3
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr

0800958a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800958a:	b480      	push	{r7}
 800958c:	b083      	sub	sp, #12
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b01      	cmp	r3, #1
 800959e:	d12e      	bne.n	80095fe <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d101      	bne.n	80095ae <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80095aa:	2302      	movs	r3, #2
 80095ac:	e028      	b.n	8009600 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2202      	movs	r2, #2
 80095ba:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f022 0201 	bic.w	r2, r2, #1
 80095cc:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80095da:	ea42 0103 	orr.w	r1, r2, r3
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	689a      	ldr	r2, [r3, #8]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	e000      	b.n	8009600 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
  }
}
 8009600:	4618      	mov	r0, r3
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800961a:	b2db      	uxtb	r3, r3
 800961c:	2b01      	cmp	r3, #1
 800961e:	d001      	beq.n	8009624 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	e06a      	b.n	80096fa <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2202      	movs	r2, #2
 8009628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a35      	ldr	r2, [pc, #212]	@ (8009708 <HAL_TIM_Base_Start+0xfc>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d040      	beq.n	80096b8 <HAL_TIM_Base_Start+0xac>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a34      	ldr	r2, [pc, #208]	@ (800970c <HAL_TIM_Base_Start+0x100>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d03b      	beq.n	80096b8 <HAL_TIM_Base_Start+0xac>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009648:	d036      	beq.n	80096b8 <HAL_TIM_Base_Start+0xac>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009652:	d031      	beq.n	80096b8 <HAL_TIM_Base_Start+0xac>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a2d      	ldr	r2, [pc, #180]	@ (8009710 <HAL_TIM_Base_Start+0x104>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d02c      	beq.n	80096b8 <HAL_TIM_Base_Start+0xac>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a2c      	ldr	r2, [pc, #176]	@ (8009714 <HAL_TIM_Base_Start+0x108>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d027      	beq.n	80096b8 <HAL_TIM_Base_Start+0xac>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a2a      	ldr	r2, [pc, #168]	@ (8009718 <HAL_TIM_Base_Start+0x10c>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d022      	beq.n	80096b8 <HAL_TIM_Base_Start+0xac>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a29      	ldr	r2, [pc, #164]	@ (800971c <HAL_TIM_Base_Start+0x110>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d01d      	beq.n	80096b8 <HAL_TIM_Base_Start+0xac>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a27      	ldr	r2, [pc, #156]	@ (8009720 <HAL_TIM_Base_Start+0x114>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d018      	beq.n	80096b8 <HAL_TIM_Base_Start+0xac>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a26      	ldr	r2, [pc, #152]	@ (8009724 <HAL_TIM_Base_Start+0x118>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d013      	beq.n	80096b8 <HAL_TIM_Base_Start+0xac>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a24      	ldr	r2, [pc, #144]	@ (8009728 <HAL_TIM_Base_Start+0x11c>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d00e      	beq.n	80096b8 <HAL_TIM_Base_Start+0xac>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a23      	ldr	r2, [pc, #140]	@ (800972c <HAL_TIM_Base_Start+0x120>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d009      	beq.n	80096b8 <HAL_TIM_Base_Start+0xac>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a21      	ldr	r2, [pc, #132]	@ (8009730 <HAL_TIM_Base_Start+0x124>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d004      	beq.n	80096b8 <HAL_TIM_Base_Start+0xac>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a20      	ldr	r2, [pc, #128]	@ (8009734 <HAL_TIM_Base_Start+0x128>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d115      	bne.n	80096e4 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	689a      	ldr	r2, [r3, #8]
 80096be:	4b1e      	ldr	r3, [pc, #120]	@ (8009738 <HAL_TIM_Base_Start+0x12c>)
 80096c0:	4013      	ands	r3, r2
 80096c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2b06      	cmp	r3, #6
 80096c8:	d015      	beq.n	80096f6 <HAL_TIM_Base_Start+0xea>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096d0:	d011      	beq.n	80096f6 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f042 0201 	orr.w	r2, r2, #1
 80096e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096e2:	e008      	b.n	80096f6 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f042 0201 	orr.w	r2, r2, #1
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	e000      	b.n	80096f8 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	40012c00 	.word	0x40012c00
 800970c:	50012c00 	.word	0x50012c00
 8009710:	40000400 	.word	0x40000400
 8009714:	50000400 	.word	0x50000400
 8009718:	40000800 	.word	0x40000800
 800971c:	50000800 	.word	0x50000800
 8009720:	40000c00 	.word	0x40000c00
 8009724:	50000c00 	.word	0x50000c00
 8009728:	40013400 	.word	0x40013400
 800972c:	50013400 	.word	0x50013400
 8009730:	40014000 	.word	0x40014000
 8009734:	50014000 	.word	0x50014000
 8009738:	00010007 	.word	0x00010007

0800973c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e049      	b.n	80097e2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d106      	bne.n	8009768 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7f8 fb14 	bl	8001d90 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3304      	adds	r3, #4
 8009778:	4619      	mov	r1, r3
 800977a:	4610      	mov	r0, r2
 800977c:	f000 fc06 	bl	8009f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
	...

080097ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d104      	bne.n	800980a <HAL_TIM_IC_Start_IT+0x1e>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009806:	b2db      	uxtb	r3, r3
 8009808:	e023      	b.n	8009852 <HAL_TIM_IC_Start_IT+0x66>
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2b04      	cmp	r3, #4
 800980e:	d104      	bne.n	800981a <HAL_TIM_IC_Start_IT+0x2e>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009816:	b2db      	uxtb	r3, r3
 8009818:	e01b      	b.n	8009852 <HAL_TIM_IC_Start_IT+0x66>
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	2b08      	cmp	r3, #8
 800981e:	d104      	bne.n	800982a <HAL_TIM_IC_Start_IT+0x3e>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009826:	b2db      	uxtb	r3, r3
 8009828:	e013      	b.n	8009852 <HAL_TIM_IC_Start_IT+0x66>
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2b0c      	cmp	r3, #12
 800982e:	d104      	bne.n	800983a <HAL_TIM_IC_Start_IT+0x4e>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009836:	b2db      	uxtb	r3, r3
 8009838:	e00b      	b.n	8009852 <HAL_TIM_IC_Start_IT+0x66>
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	2b10      	cmp	r3, #16
 800983e:	d104      	bne.n	800984a <HAL_TIM_IC_Start_IT+0x5e>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009846:	b2db      	uxtb	r3, r3
 8009848:	e003      	b.n	8009852 <HAL_TIM_IC_Start_IT+0x66>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009850:	b2db      	uxtb	r3, r3
 8009852:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d104      	bne.n	8009864 <HAL_TIM_IC_Start_IT+0x78>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009860:	b2db      	uxtb	r3, r3
 8009862:	e013      	b.n	800988c <HAL_TIM_IC_Start_IT+0xa0>
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	2b04      	cmp	r3, #4
 8009868:	d104      	bne.n	8009874 <HAL_TIM_IC_Start_IT+0x88>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009870:	b2db      	uxtb	r3, r3
 8009872:	e00b      	b.n	800988c <HAL_TIM_IC_Start_IT+0xa0>
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	2b08      	cmp	r3, #8
 8009878:	d104      	bne.n	8009884 <HAL_TIM_IC_Start_IT+0x98>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009880:	b2db      	uxtb	r3, r3
 8009882:	e003      	b.n	800988c <HAL_TIM_IC_Start_IT+0xa0>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800988a:	b2db      	uxtb	r3, r3
 800988c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800988e:	7bbb      	ldrb	r3, [r7, #14]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d102      	bne.n	800989a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009894:	7b7b      	ldrb	r3, [r7, #13]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d001      	beq.n	800989e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e100      	b.n	8009aa0 <HAL_TIM_IC_Start_IT+0x2b4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d104      	bne.n	80098ae <HAL_TIM_IC_Start_IT+0xc2>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2202      	movs	r2, #2
 80098a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098ac:	e023      	b.n	80098f6 <HAL_TIM_IC_Start_IT+0x10a>
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b04      	cmp	r3, #4
 80098b2:	d104      	bne.n	80098be <HAL_TIM_IC_Start_IT+0xd2>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2202      	movs	r2, #2
 80098b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098bc:	e01b      	b.n	80098f6 <HAL_TIM_IC_Start_IT+0x10a>
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	2b08      	cmp	r3, #8
 80098c2:	d104      	bne.n	80098ce <HAL_TIM_IC_Start_IT+0xe2>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2202      	movs	r2, #2
 80098c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80098cc:	e013      	b.n	80098f6 <HAL_TIM_IC_Start_IT+0x10a>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2b0c      	cmp	r3, #12
 80098d2:	d104      	bne.n	80098de <HAL_TIM_IC_Start_IT+0xf2>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2202      	movs	r2, #2
 80098d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80098dc:	e00b      	b.n	80098f6 <HAL_TIM_IC_Start_IT+0x10a>
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	2b10      	cmp	r3, #16
 80098e2:	d104      	bne.n	80098ee <HAL_TIM_IC_Start_IT+0x102>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2202      	movs	r2, #2
 80098e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80098ec:	e003      	b.n	80098f6 <HAL_TIM_IC_Start_IT+0x10a>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2202      	movs	r2, #2
 80098f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d104      	bne.n	8009906 <HAL_TIM_IC_Start_IT+0x11a>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2202      	movs	r2, #2
 8009900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009904:	e013      	b.n	800992e <HAL_TIM_IC_Start_IT+0x142>
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2b04      	cmp	r3, #4
 800990a:	d104      	bne.n	8009916 <HAL_TIM_IC_Start_IT+0x12a>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2202      	movs	r2, #2
 8009910:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009914:	e00b      	b.n	800992e <HAL_TIM_IC_Start_IT+0x142>
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b08      	cmp	r3, #8
 800991a:	d104      	bne.n	8009926 <HAL_TIM_IC_Start_IT+0x13a>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2202      	movs	r2, #2
 8009920:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009924:	e003      	b.n	800992e <HAL_TIM_IC_Start_IT+0x142>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2202      	movs	r2, #2
 800992a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	2b0c      	cmp	r3, #12
 8009932:	d841      	bhi.n	80099b8 <HAL_TIM_IC_Start_IT+0x1cc>
 8009934:	a201      	add	r2, pc, #4	@ (adr r2, 800993c <HAL_TIM_IC_Start_IT+0x150>)
 8009936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993a:	bf00      	nop
 800993c:	08009971 	.word	0x08009971
 8009940:	080099b9 	.word	0x080099b9
 8009944:	080099b9 	.word	0x080099b9
 8009948:	080099b9 	.word	0x080099b9
 800994c:	08009983 	.word	0x08009983
 8009950:	080099b9 	.word	0x080099b9
 8009954:	080099b9 	.word	0x080099b9
 8009958:	080099b9 	.word	0x080099b9
 800995c:	08009995 	.word	0x08009995
 8009960:	080099b9 	.word	0x080099b9
 8009964:	080099b9 	.word	0x080099b9
 8009968:	080099b9 	.word	0x080099b9
 800996c:	080099a7 	.word	0x080099a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68da      	ldr	r2, [r3, #12]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f042 0202 	orr.w	r2, r2, #2
 800997e:	60da      	str	r2, [r3, #12]
      break;
 8009980:	e01d      	b.n	80099be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68da      	ldr	r2, [r3, #12]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f042 0204 	orr.w	r2, r2, #4
 8009990:	60da      	str	r2, [r3, #12]
      break;
 8009992:	e014      	b.n	80099be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68da      	ldr	r2, [r3, #12]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f042 0208 	orr.w	r2, r2, #8
 80099a2:	60da      	str	r2, [r3, #12]
      break;
 80099a4:	e00b      	b.n	80099be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68da      	ldr	r2, [r3, #12]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f042 0210 	orr.w	r2, r2, #16
 80099b4:	60da      	str	r2, [r3, #12]
      break;
 80099b6:	e002      	b.n	80099be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	73fb      	strb	r3, [r7, #15]
      break;
 80099bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d16c      	bne.n	8009a9e <HAL_TIM_IC_Start_IT+0x2b2>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2201      	movs	r2, #1
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f000 fd2f 	bl	800a430 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a34      	ldr	r2, [pc, #208]	@ (8009aa8 <HAL_TIM_IC_Start_IT+0x2bc>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d040      	beq.n	8009a5e <HAL_TIM_IC_Start_IT+0x272>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a32      	ldr	r2, [pc, #200]	@ (8009aac <HAL_TIM_IC_Start_IT+0x2c0>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d03b      	beq.n	8009a5e <HAL_TIM_IC_Start_IT+0x272>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ee:	d036      	beq.n	8009a5e <HAL_TIM_IC_Start_IT+0x272>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099f8:	d031      	beq.n	8009a5e <HAL_TIM_IC_Start_IT+0x272>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a2c      	ldr	r2, [pc, #176]	@ (8009ab0 <HAL_TIM_IC_Start_IT+0x2c4>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d02c      	beq.n	8009a5e <HAL_TIM_IC_Start_IT+0x272>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a2a      	ldr	r2, [pc, #168]	@ (8009ab4 <HAL_TIM_IC_Start_IT+0x2c8>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d027      	beq.n	8009a5e <HAL_TIM_IC_Start_IT+0x272>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a29      	ldr	r2, [pc, #164]	@ (8009ab8 <HAL_TIM_IC_Start_IT+0x2cc>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d022      	beq.n	8009a5e <HAL_TIM_IC_Start_IT+0x272>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a27      	ldr	r2, [pc, #156]	@ (8009abc <HAL_TIM_IC_Start_IT+0x2d0>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d01d      	beq.n	8009a5e <HAL_TIM_IC_Start_IT+0x272>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a26      	ldr	r2, [pc, #152]	@ (8009ac0 <HAL_TIM_IC_Start_IT+0x2d4>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d018      	beq.n	8009a5e <HAL_TIM_IC_Start_IT+0x272>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a24      	ldr	r2, [pc, #144]	@ (8009ac4 <HAL_TIM_IC_Start_IT+0x2d8>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d013      	beq.n	8009a5e <HAL_TIM_IC_Start_IT+0x272>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a23      	ldr	r2, [pc, #140]	@ (8009ac8 <HAL_TIM_IC_Start_IT+0x2dc>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d00e      	beq.n	8009a5e <HAL_TIM_IC_Start_IT+0x272>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a21      	ldr	r2, [pc, #132]	@ (8009acc <HAL_TIM_IC_Start_IT+0x2e0>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d009      	beq.n	8009a5e <HAL_TIM_IC_Start_IT+0x272>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a20      	ldr	r2, [pc, #128]	@ (8009ad0 <HAL_TIM_IC_Start_IT+0x2e4>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d004      	beq.n	8009a5e <HAL_TIM_IC_Start_IT+0x272>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a1e      	ldr	r2, [pc, #120]	@ (8009ad4 <HAL_TIM_IC_Start_IT+0x2e8>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d115      	bne.n	8009a8a <HAL_TIM_IC_Start_IT+0x29e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	4b1c      	ldr	r3, [pc, #112]	@ (8009ad8 <HAL_TIM_IC_Start_IT+0x2ec>)
 8009a66:	4013      	ands	r3, r2
 8009a68:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	2b06      	cmp	r3, #6
 8009a6e:	d015      	beq.n	8009a9c <HAL_TIM_IC_Start_IT+0x2b0>
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a76:	d011      	beq.n	8009a9c <HAL_TIM_IC_Start_IT+0x2b0>
      {
        __HAL_TIM_ENABLE(htim);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f042 0201 	orr.w	r2, r2, #1
 8009a86:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a88:	e008      	b.n	8009a9c <HAL_TIM_IC_Start_IT+0x2b0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f042 0201 	orr.w	r2, r2, #1
 8009a98:	601a      	str	r2, [r3, #0]
 8009a9a:	e000      	b.n	8009a9e <HAL_TIM_IC_Start_IT+0x2b2>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a9c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	40012c00 	.word	0x40012c00
 8009aac:	50012c00 	.word	0x50012c00
 8009ab0:	40000400 	.word	0x40000400
 8009ab4:	50000400 	.word	0x50000400
 8009ab8:	40000800 	.word	0x40000800
 8009abc:	50000800 	.word	0x50000800
 8009ac0:	40000c00 	.word	0x40000c00
 8009ac4:	50000c00 	.word	0x50000c00
 8009ac8:	40013400 	.word	0x40013400
 8009acc:	50013400 	.word	0x50013400
 8009ad0:	40014000 	.word	0x40014000
 8009ad4:	50014000 	.word	0x50014000
 8009ad8:	00010007 	.word	0x00010007

08009adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	f003 0302 	and.w	r3, r3, #2
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d020      	beq.n	8009b40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f003 0302 	and.w	r3, r3, #2
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d01b      	beq.n	8009b40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f06f 0202 	mvn.w	r2, #2
 8009b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	f003 0303 	and.w	r3, r3, #3
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d003      	beq.n	8009b2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7f7 f9d6 	bl	8000ed8 <HAL_TIM_IC_CaptureCallback>
 8009b2c:	e005      	b.n	8009b3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fa0e 	bl	8009f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fa15 	bl	8009f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	f003 0304 	and.w	r3, r3, #4
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d020      	beq.n	8009b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f003 0304 	and.w	r3, r3, #4
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d01b      	beq.n	8009b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f06f 0204 	mvn.w	r2, #4
 8009b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2202      	movs	r2, #2
 8009b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d003      	beq.n	8009b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f7f7 f9b0 	bl	8000ed8 <HAL_TIM_IC_CaptureCallback>
 8009b78:	e005      	b.n	8009b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f9e8 	bl	8009f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f9ef 	bl	8009f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	f003 0308 	and.w	r3, r3, #8
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d020      	beq.n	8009bd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f003 0308 	and.w	r3, r3, #8
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d01b      	beq.n	8009bd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f06f 0208 	mvn.w	r2, #8
 8009ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2204      	movs	r2, #4
 8009bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	69db      	ldr	r3, [r3, #28]
 8009bb6:	f003 0303 	and.w	r3, r3, #3
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d003      	beq.n	8009bc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7f7 f98a 	bl	8000ed8 <HAL_TIM_IC_CaptureCallback>
 8009bc4:	e005      	b.n	8009bd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f9c2 	bl	8009f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 f9c9 	bl	8009f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	f003 0310 	and.w	r3, r3, #16
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d020      	beq.n	8009c24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f003 0310 	and.w	r3, r3, #16
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d01b      	beq.n	8009c24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f06f 0210 	mvn.w	r2, #16
 8009bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2208      	movs	r2, #8
 8009bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	69db      	ldr	r3, [r3, #28]
 8009c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d003      	beq.n	8009c12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7f7 f964 	bl	8000ed8 <HAL_TIM_IC_CaptureCallback>
 8009c10:	e005      	b.n	8009c1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f99c 	bl	8009f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f9a3 	bl	8009f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00c      	beq.n	8009c48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f003 0301 	and.w	r3, r3, #1
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d007      	beq.n	8009c48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f06f 0201 	mvn.w	r2, #1
 8009c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f97a 	bl	8009f3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d104      	bne.n	8009c5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00c      	beq.n	8009c76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d007      	beq.n	8009c76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fccf 	bl	800a614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00c      	beq.n	8009c9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d007      	beq.n	8009c9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fcc7 	bl	800a628 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00c      	beq.n	8009cbe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d007      	beq.n	8009cbe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f95d 	bl	8009f78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	f003 0320 	and.w	r3, r3, #32
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00c      	beq.n	8009ce2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f003 0320 	and.w	r3, r3, #32
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d007      	beq.n	8009ce2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f06f 0220 	mvn.w	r2, #32
 8009cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fc8f 	bl	800a600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00c      	beq.n	8009d06 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d007      	beq.n	8009d06 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fc9b 	bl	800a63c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00c      	beq.n	8009d2a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d007      	beq.n	8009d2a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fc93 	bl	800a650 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00c      	beq.n	8009d4e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d007      	beq.n	8009d4e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fc8b 	bl	800a664 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00c      	beq.n	8009d72 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d007      	beq.n	8009d72 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fc83 	bl	800a678 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d72:	bf00      	nop
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b086      	sub	sp, #24
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	60f8      	str	r0, [r7, #12]
 8009d82:	60b9      	str	r1, [r7, #8]
 8009d84:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d101      	bne.n	8009d98 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009d94:	2302      	movs	r3, #2
 8009d96:	e088      	b.n	8009eaa <HAL_TIM_IC_ConfigChannel+0x130>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d11b      	bne.n	8009dde <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009db6:	f000 f9ef 	bl	800a198 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	699a      	ldr	r2, [r3, #24]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f022 020c 	bic.w	r2, r2, #12
 8009dc8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	6999      	ldr	r1, [r3, #24]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	689a      	ldr	r2, [r3, #8]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	430a      	orrs	r2, r1
 8009dda:	619a      	str	r2, [r3, #24]
 8009ddc:	e060      	b.n	8009ea0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2b04      	cmp	r3, #4
 8009de2:	d11c      	bne.n	8009e1e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009df4:	f000 fa66 	bl	800a2c4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	699a      	ldr	r2, [r3, #24]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009e06:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6999      	ldr	r1, [r3, #24]
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	021a      	lsls	r2, r3, #8
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	619a      	str	r2, [r3, #24]
 8009e1c:	e040      	b.n	8009ea0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2b08      	cmp	r3, #8
 8009e22:	d11b      	bne.n	8009e5c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009e34:	f000 fa83 	bl	800a33e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	69da      	ldr	r2, [r3, #28]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f022 020c 	bic.w	r2, r2, #12
 8009e46:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	69d9      	ldr	r1, [r3, #28]
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	689a      	ldr	r2, [r3, #8]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	430a      	orrs	r2, r1
 8009e58:	61da      	str	r2, [r3, #28]
 8009e5a:	e021      	b.n	8009ea0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b0c      	cmp	r3, #12
 8009e60:	d11c      	bne.n	8009e9c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009e72:	f000 faa0 	bl	800a3b6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	69da      	ldr	r2, [r3, #28]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009e84:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	69d9      	ldr	r1, [r3, #28]
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	021a      	lsls	r2, r3, #8
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	430a      	orrs	r2, r1
 8009e98:	61da      	str	r2, [r3, #28]
 8009e9a:	e001      	b.n	8009ea0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3718      	adds	r7, #24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
	...

08009eb4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	2b0c      	cmp	r3, #12
 8009ec6:	d831      	bhi.n	8009f2c <HAL_TIM_ReadCapturedValue+0x78>
 8009ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ed0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ece:	bf00      	nop
 8009ed0:	08009f05 	.word	0x08009f05
 8009ed4:	08009f2d 	.word	0x08009f2d
 8009ed8:	08009f2d 	.word	0x08009f2d
 8009edc:	08009f2d 	.word	0x08009f2d
 8009ee0:	08009f0f 	.word	0x08009f0f
 8009ee4:	08009f2d 	.word	0x08009f2d
 8009ee8:	08009f2d 	.word	0x08009f2d
 8009eec:	08009f2d 	.word	0x08009f2d
 8009ef0:	08009f19 	.word	0x08009f19
 8009ef4:	08009f2d 	.word	0x08009f2d
 8009ef8:	08009f2d 	.word	0x08009f2d
 8009efc:	08009f2d 	.word	0x08009f2d
 8009f00:	08009f23 	.word	0x08009f23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f0a:	60fb      	str	r3, [r7, #12]

      break;
 8009f0c:	e00f      	b.n	8009f2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f14:	60fb      	str	r3, [r7, #12]

      break;
 8009f16:	e00a      	b.n	8009f2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f1e:	60fb      	str	r3, [r7, #12]

      break;
 8009f20:	e005      	b.n	8009f2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f28:	60fb      	str	r3, [r7, #12]

      break;
 8009f2a:	e000      	b.n	8009f2e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009f2c:	bf00      	nop
  }

  return tmpreg;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a6e      	ldr	r2, [pc, #440]	@ (800a158 <TIM_Base_SetConfig+0x1cc>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d02b      	beq.n	8009ffc <TIM_Base_SetConfig+0x70>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a6d      	ldr	r2, [pc, #436]	@ (800a15c <TIM_Base_SetConfig+0x1d0>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d027      	beq.n	8009ffc <TIM_Base_SetConfig+0x70>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fb2:	d023      	beq.n	8009ffc <TIM_Base_SetConfig+0x70>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009fba:	d01f      	beq.n	8009ffc <TIM_Base_SetConfig+0x70>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a68      	ldr	r2, [pc, #416]	@ (800a160 <TIM_Base_SetConfig+0x1d4>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d01b      	beq.n	8009ffc <TIM_Base_SetConfig+0x70>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a67      	ldr	r2, [pc, #412]	@ (800a164 <TIM_Base_SetConfig+0x1d8>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d017      	beq.n	8009ffc <TIM_Base_SetConfig+0x70>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a66      	ldr	r2, [pc, #408]	@ (800a168 <TIM_Base_SetConfig+0x1dc>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d013      	beq.n	8009ffc <TIM_Base_SetConfig+0x70>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a65      	ldr	r2, [pc, #404]	@ (800a16c <TIM_Base_SetConfig+0x1e0>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d00f      	beq.n	8009ffc <TIM_Base_SetConfig+0x70>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a64      	ldr	r2, [pc, #400]	@ (800a170 <TIM_Base_SetConfig+0x1e4>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d00b      	beq.n	8009ffc <TIM_Base_SetConfig+0x70>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a63      	ldr	r2, [pc, #396]	@ (800a174 <TIM_Base_SetConfig+0x1e8>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d007      	beq.n	8009ffc <TIM_Base_SetConfig+0x70>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a62      	ldr	r2, [pc, #392]	@ (800a178 <TIM_Base_SetConfig+0x1ec>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d003      	beq.n	8009ffc <TIM_Base_SetConfig+0x70>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a61      	ldr	r2, [pc, #388]	@ (800a17c <TIM_Base_SetConfig+0x1f0>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d108      	bne.n	800a00e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a51      	ldr	r2, [pc, #324]	@ (800a158 <TIM_Base_SetConfig+0x1cc>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d043      	beq.n	800a09e <TIM_Base_SetConfig+0x112>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4a50      	ldr	r2, [pc, #320]	@ (800a15c <TIM_Base_SetConfig+0x1d0>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d03f      	beq.n	800a09e <TIM_Base_SetConfig+0x112>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a024:	d03b      	beq.n	800a09e <TIM_Base_SetConfig+0x112>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a02c:	d037      	beq.n	800a09e <TIM_Base_SetConfig+0x112>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a4b      	ldr	r2, [pc, #300]	@ (800a160 <TIM_Base_SetConfig+0x1d4>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d033      	beq.n	800a09e <TIM_Base_SetConfig+0x112>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a4a      	ldr	r2, [pc, #296]	@ (800a164 <TIM_Base_SetConfig+0x1d8>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d02f      	beq.n	800a09e <TIM_Base_SetConfig+0x112>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a49      	ldr	r2, [pc, #292]	@ (800a168 <TIM_Base_SetConfig+0x1dc>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d02b      	beq.n	800a09e <TIM_Base_SetConfig+0x112>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a48      	ldr	r2, [pc, #288]	@ (800a16c <TIM_Base_SetConfig+0x1e0>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d027      	beq.n	800a09e <TIM_Base_SetConfig+0x112>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a47      	ldr	r2, [pc, #284]	@ (800a170 <TIM_Base_SetConfig+0x1e4>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d023      	beq.n	800a09e <TIM_Base_SetConfig+0x112>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a46      	ldr	r2, [pc, #280]	@ (800a174 <TIM_Base_SetConfig+0x1e8>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d01f      	beq.n	800a09e <TIM_Base_SetConfig+0x112>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a45      	ldr	r2, [pc, #276]	@ (800a178 <TIM_Base_SetConfig+0x1ec>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d01b      	beq.n	800a09e <TIM_Base_SetConfig+0x112>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a44      	ldr	r2, [pc, #272]	@ (800a17c <TIM_Base_SetConfig+0x1f0>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d017      	beq.n	800a09e <TIM_Base_SetConfig+0x112>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a43      	ldr	r2, [pc, #268]	@ (800a180 <TIM_Base_SetConfig+0x1f4>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d013      	beq.n	800a09e <TIM_Base_SetConfig+0x112>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a42      	ldr	r2, [pc, #264]	@ (800a184 <TIM_Base_SetConfig+0x1f8>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d00f      	beq.n	800a09e <TIM_Base_SetConfig+0x112>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a41      	ldr	r2, [pc, #260]	@ (800a188 <TIM_Base_SetConfig+0x1fc>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d00b      	beq.n	800a09e <TIM_Base_SetConfig+0x112>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a40      	ldr	r2, [pc, #256]	@ (800a18c <TIM_Base_SetConfig+0x200>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d007      	beq.n	800a09e <TIM_Base_SetConfig+0x112>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4a3f      	ldr	r2, [pc, #252]	@ (800a190 <TIM_Base_SetConfig+0x204>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d003      	beq.n	800a09e <TIM_Base_SetConfig+0x112>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4a3e      	ldr	r2, [pc, #248]	@ (800a194 <TIM_Base_SetConfig+0x208>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d108      	bne.n	800a0b0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	695b      	ldr	r3, [r3, #20]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	689a      	ldr	r2, [r3, #8]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a20      	ldr	r2, [pc, #128]	@ (800a158 <TIM_Base_SetConfig+0x1cc>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d023      	beq.n	800a124 <TIM_Base_SetConfig+0x198>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a1f      	ldr	r2, [pc, #124]	@ (800a15c <TIM_Base_SetConfig+0x1d0>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d01f      	beq.n	800a124 <TIM_Base_SetConfig+0x198>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a24      	ldr	r2, [pc, #144]	@ (800a178 <TIM_Base_SetConfig+0x1ec>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d01b      	beq.n	800a124 <TIM_Base_SetConfig+0x198>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a23      	ldr	r2, [pc, #140]	@ (800a17c <TIM_Base_SetConfig+0x1f0>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d017      	beq.n	800a124 <TIM_Base_SetConfig+0x198>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a22      	ldr	r2, [pc, #136]	@ (800a180 <TIM_Base_SetConfig+0x1f4>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d013      	beq.n	800a124 <TIM_Base_SetConfig+0x198>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a21      	ldr	r2, [pc, #132]	@ (800a184 <TIM_Base_SetConfig+0x1f8>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d00f      	beq.n	800a124 <TIM_Base_SetConfig+0x198>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a20      	ldr	r2, [pc, #128]	@ (800a188 <TIM_Base_SetConfig+0x1fc>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d00b      	beq.n	800a124 <TIM_Base_SetConfig+0x198>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a1f      	ldr	r2, [pc, #124]	@ (800a18c <TIM_Base_SetConfig+0x200>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d007      	beq.n	800a124 <TIM_Base_SetConfig+0x198>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a1e      	ldr	r2, [pc, #120]	@ (800a190 <TIM_Base_SetConfig+0x204>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d003      	beq.n	800a124 <TIM_Base_SetConfig+0x198>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a1d      	ldr	r2, [pc, #116]	@ (800a194 <TIM_Base_SetConfig+0x208>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d103      	bne.n	800a12c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	691a      	ldr	r2, [r3, #16]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	f003 0301 	and.w	r3, r3, #1
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d105      	bne.n	800a14a <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	f023 0201 	bic.w	r2, r3, #1
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	611a      	str	r2, [r3, #16]
  }
}
 800a14a:	bf00      	nop
 800a14c:	3714      	adds	r7, #20
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	40012c00 	.word	0x40012c00
 800a15c:	50012c00 	.word	0x50012c00
 800a160:	40000400 	.word	0x40000400
 800a164:	50000400 	.word	0x50000400
 800a168:	40000800 	.word	0x40000800
 800a16c:	50000800 	.word	0x50000800
 800a170:	40000c00 	.word	0x40000c00
 800a174:	50000c00 	.word	0x50000c00
 800a178:	40013400 	.word	0x40013400
 800a17c:	50013400 	.word	0x50013400
 800a180:	40014000 	.word	0x40014000
 800a184:	50014000 	.word	0x50014000
 800a188:	40014400 	.word	0x40014400
 800a18c:	50014400 	.word	0x50014400
 800a190:	40014800 	.word	0x40014800
 800a194:	50014800 	.word	0x50014800

0800a198 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a198:	b480      	push	{r7}
 800a19a:	b087      	sub	sp, #28
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6a1b      	ldr	r3, [r3, #32]
 800a1aa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6a1b      	ldr	r3, [r3, #32]
 800a1b0:	f023 0201 	bic.w	r2, r3, #1
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	4a34      	ldr	r2, [pc, #208]	@ (800a294 <TIM_TI1_SetConfig+0xfc>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d033      	beq.n	800a22e <TIM_TI1_SetConfig+0x96>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	4a33      	ldr	r2, [pc, #204]	@ (800a298 <TIM_TI1_SetConfig+0x100>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d02f      	beq.n	800a22e <TIM_TI1_SetConfig+0x96>
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1d4:	d02b      	beq.n	800a22e <TIM_TI1_SetConfig+0x96>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a1dc:	d027      	beq.n	800a22e <TIM_TI1_SetConfig+0x96>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	4a2e      	ldr	r2, [pc, #184]	@ (800a29c <TIM_TI1_SetConfig+0x104>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d023      	beq.n	800a22e <TIM_TI1_SetConfig+0x96>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	4a2d      	ldr	r2, [pc, #180]	@ (800a2a0 <TIM_TI1_SetConfig+0x108>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d01f      	beq.n	800a22e <TIM_TI1_SetConfig+0x96>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	4a2c      	ldr	r2, [pc, #176]	@ (800a2a4 <TIM_TI1_SetConfig+0x10c>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d01b      	beq.n	800a22e <TIM_TI1_SetConfig+0x96>
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	4a2b      	ldr	r2, [pc, #172]	@ (800a2a8 <TIM_TI1_SetConfig+0x110>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d017      	beq.n	800a22e <TIM_TI1_SetConfig+0x96>
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	4a2a      	ldr	r2, [pc, #168]	@ (800a2ac <TIM_TI1_SetConfig+0x114>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d013      	beq.n	800a22e <TIM_TI1_SetConfig+0x96>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	4a29      	ldr	r2, [pc, #164]	@ (800a2b0 <TIM_TI1_SetConfig+0x118>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d00f      	beq.n	800a22e <TIM_TI1_SetConfig+0x96>
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	4a28      	ldr	r2, [pc, #160]	@ (800a2b4 <TIM_TI1_SetConfig+0x11c>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d00b      	beq.n	800a22e <TIM_TI1_SetConfig+0x96>
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4a27      	ldr	r2, [pc, #156]	@ (800a2b8 <TIM_TI1_SetConfig+0x120>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d007      	beq.n	800a22e <TIM_TI1_SetConfig+0x96>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	4a26      	ldr	r2, [pc, #152]	@ (800a2bc <TIM_TI1_SetConfig+0x124>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d003      	beq.n	800a22e <TIM_TI1_SetConfig+0x96>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	4a25      	ldr	r2, [pc, #148]	@ (800a2c0 <TIM_TI1_SetConfig+0x128>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d101      	bne.n	800a232 <TIM_TI1_SetConfig+0x9a>
 800a22e:	2301      	movs	r3, #1
 800a230:	e000      	b.n	800a234 <TIM_TI1_SetConfig+0x9c>
 800a232:	2300      	movs	r3, #0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d008      	beq.n	800a24a <TIM_TI1_SetConfig+0xb2>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	f023 0303 	bic.w	r3, r3, #3
 800a23e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a240:	697a      	ldr	r2, [r7, #20]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4313      	orrs	r3, r2
 800a246:	617b      	str	r3, [r7, #20]
 800a248:	e003      	b.n	800a252 <TIM_TI1_SetConfig+0xba>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f043 0301 	orr.w	r3, r3, #1
 800a250:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a258:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	011b      	lsls	r3, r3, #4
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	697a      	ldr	r2, [r7, #20]
 800a262:	4313      	orrs	r3, r2
 800a264:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	f023 030a 	bic.w	r3, r3, #10
 800a26c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	f003 030a 	and.w	r3, r3, #10
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	4313      	orrs	r3, r2
 800a278:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	693a      	ldr	r2, [r7, #16]
 800a284:	621a      	str	r2, [r3, #32]
}
 800a286:	bf00      	nop
 800a288:	371c      	adds	r7, #28
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	40012c00 	.word	0x40012c00
 800a298:	50012c00 	.word	0x50012c00
 800a29c:	40000400 	.word	0x40000400
 800a2a0:	50000400 	.word	0x50000400
 800a2a4:	40000800 	.word	0x40000800
 800a2a8:	50000800 	.word	0x50000800
 800a2ac:	40000c00 	.word	0x40000c00
 800a2b0:	50000c00 	.word	0x50000c00
 800a2b4:	40013400 	.word	0x40013400
 800a2b8:	50013400 	.word	0x50013400
 800a2bc:	40014000 	.word	0x40014000
 800a2c0:	50014000 	.word	0x50014000

0800a2c4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b087      	sub	sp, #28
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6a1b      	ldr	r3, [r3, #32]
 800a2d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6a1b      	ldr	r3, [r3, #32]
 800a2dc:	f023 0210 	bic.w	r2, r3, #16
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	021b      	lsls	r3, r3, #8
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	031b      	lsls	r3, r3, #12
 800a308:	b29b      	uxth	r3, r3
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a316:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	011b      	lsls	r3, r3, #4
 800a31c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a320:	697a      	ldr	r2, [r7, #20]
 800a322:	4313      	orrs	r3, r2
 800a324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	693a      	ldr	r2, [r7, #16]
 800a32a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	621a      	str	r2, [r3, #32]
}
 800a332:	bf00      	nop
 800a334:	371c      	adds	r7, #28
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a33e:	b480      	push	{r7}
 800a340:	b087      	sub	sp, #28
 800a342:	af00      	add	r7, sp, #0
 800a344:	60f8      	str	r0, [r7, #12]
 800a346:	60b9      	str	r1, [r7, #8]
 800a348:	607a      	str	r2, [r7, #4]
 800a34a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6a1b      	ldr	r3, [r3, #32]
 800a350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6a1b      	ldr	r3, [r3, #32]
 800a356:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	69db      	ldr	r3, [r3, #28]
 800a362:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	f023 0303 	bic.w	r3, r3, #3
 800a36a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4313      	orrs	r3, r2
 800a372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a37a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	011b      	lsls	r3, r3, #4
 800a380:	b2db      	uxtb	r3, r3
 800a382:	693a      	ldr	r2, [r7, #16]
 800a384:	4313      	orrs	r3, r2
 800a386:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a38e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	021b      	lsls	r3, r3, #8
 800a394:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a398:	697a      	ldr	r2, [r7, #20]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	621a      	str	r2, [r3, #32]
}
 800a3aa:	bf00      	nop
 800a3ac:	371c      	adds	r7, #28
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a3b6:	b480      	push	{r7}
 800a3b8:	b087      	sub	sp, #28
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	60b9      	str	r1, [r7, #8]
 800a3c0:	607a      	str	r2, [r7, #4]
 800a3c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6a1b      	ldr	r3, [r3, #32]
 800a3c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	69db      	ldr	r3, [r3, #28]
 800a3da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3e2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	021b      	lsls	r3, r3, #8
 800a3e8:	693a      	ldr	r2, [r7, #16]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a3f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	031b      	lsls	r3, r3, #12
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	693a      	ldr	r2, [r7, #16]
 800a3fe:	4313      	orrs	r3, r2
 800a400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a408:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	031b      	lsls	r3, r3, #12
 800a40e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a412:	697a      	ldr	r2, [r7, #20]
 800a414:	4313      	orrs	r3, r2
 800a416:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	697a      	ldr	r2, [r7, #20]
 800a422:	621a      	str	r2, [r3, #32]
}
 800a424:	bf00      	nop
 800a426:	371c      	adds	r7, #28
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a430:	b480      	push	{r7}
 800a432:	b087      	sub	sp, #28
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	f003 031f 	and.w	r3, r3, #31
 800a442:	2201      	movs	r2, #1
 800a444:	fa02 f303 	lsl.w	r3, r2, r3
 800a448:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6a1a      	ldr	r2, [r3, #32]
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	43db      	mvns	r3, r3
 800a452:	401a      	ands	r2, r3
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6a1a      	ldr	r2, [r3, #32]
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	f003 031f 	and.w	r3, r3, #31
 800a462:	6879      	ldr	r1, [r7, #4]
 800a464:	fa01 f303 	lsl.w	r3, r1, r3
 800a468:	431a      	orrs	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	621a      	str	r2, [r3, #32]
}
 800a46e:	bf00      	nop
 800a470:	371c      	adds	r7, #28
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
	...

0800a47c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d101      	bne.n	800a494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a490:	2302      	movs	r3, #2
 800a492:	e097      	b.n	800a5c4 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2202      	movs	r2, #2
 800a4a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a45      	ldr	r2, [pc, #276]	@ (800a5d0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d00e      	beq.n	800a4dc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a44      	ldr	r2, [pc, #272]	@ (800a5d4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d009      	beq.n	800a4dc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a42      	ldr	r2, [pc, #264]	@ (800a5d8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d004      	beq.n	800a4dc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a41      	ldr	r2, [pc, #260]	@ (800a5dc <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d108      	bne.n	800a4ee <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a4e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a4f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	4313      	orrs	r3, r2
 800a502:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a2f      	ldr	r2, [pc, #188]	@ (800a5d0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d040      	beq.n	800a598 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a2e      	ldr	r2, [pc, #184]	@ (800a5d4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d03b      	beq.n	800a598 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a528:	d036      	beq.n	800a598 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a532:	d031      	beq.n	800a598 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a29      	ldr	r2, [pc, #164]	@ (800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d02c      	beq.n	800a598 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a28      	ldr	r2, [pc, #160]	@ (800a5e4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d027      	beq.n	800a598 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a26      	ldr	r2, [pc, #152]	@ (800a5e8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d022      	beq.n	800a598 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a25      	ldr	r2, [pc, #148]	@ (800a5ec <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d01d      	beq.n	800a598 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a23      	ldr	r2, [pc, #140]	@ (800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d018      	beq.n	800a598 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a22      	ldr	r2, [pc, #136]	@ (800a5f4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d013      	beq.n	800a598 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a18      	ldr	r2, [pc, #96]	@ (800a5d8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d00e      	beq.n	800a598 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a17      	ldr	r2, [pc, #92]	@ (800a5dc <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d009      	beq.n	800a598 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a1b      	ldr	r2, [pc, #108]	@ (800a5f8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d004      	beq.n	800a598 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a1a      	ldr	r2, [pc, #104]	@ (800a5fc <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d10c      	bne.n	800a5b2 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a59e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	68ba      	ldr	r2, [r7, #8]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a5c2:	2300      	movs	r3, #0
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3714      	adds	r7, #20
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr
 800a5d0:	40012c00 	.word	0x40012c00
 800a5d4:	50012c00 	.word	0x50012c00
 800a5d8:	40013400 	.word	0x40013400
 800a5dc:	50013400 	.word	0x50013400
 800a5e0:	40000400 	.word	0x40000400
 800a5e4:	50000400 	.word	0x50000400
 800a5e8:	40000800 	.word	0x40000800
 800a5ec:	50000800 	.word	0x50000800
 800a5f0:	40000c00 	.word	0x40000c00
 800a5f4:	50000c00 	.word	0x50000c00
 800a5f8:	40014000 	.word	0x40014000
 800a5fc:	50014000 	.word	0x50014000

0800a600 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a658:	bf00      	nop
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a66c:	bf00      	nop
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d101      	bne.n	800a69e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	e042      	b.n	800a724 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d106      	bne.n	800a6b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f7f7 fbbf 	bl	8001e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2224      	movs	r2, #36	@ 0x24
 800a6ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f022 0201 	bic.w	r2, r2, #1
 800a6cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d002      	beq.n	800a6dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f9d6 	bl	800aa88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f825 	bl	800a72c <UART_SetConfig>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d101      	bne.n	800a6ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e01b      	b.n	800a724 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	685a      	ldr	r2, [r3, #4]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a6fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	689a      	ldr	r2, [r3, #8]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a70a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f042 0201 	orr.w	r2, r2, #1
 800a71a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 fa55 	bl	800abcc <UART_CheckIdleState>
 800a722:	4603      	mov	r3, r0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a72c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a730:	b094      	sub	sp, #80	@ 0x50
 800a732:	af00      	add	r7, sp, #0
 800a734:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	4b83      	ldr	r3, [pc, #524]	@ (800a950 <UART_SetConfig+0x224>)
 800a742:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a746:	689a      	ldr	r2, [r3, #8]
 800a748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	431a      	orrs	r2, r3
 800a74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a750:	695b      	ldr	r3, [r3, #20]
 800a752:	431a      	orrs	r2, r3
 800a754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a756:	69db      	ldr	r3, [r3, #28]
 800a758:	4313      	orrs	r3, r2
 800a75a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	497c      	ldr	r1, [pc, #496]	@ (800a954 <UART_SetConfig+0x228>)
 800a764:	4019      	ands	r1, r3
 800a766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a76c:	430b      	orrs	r3, r1
 800a76e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a77c:	68d9      	ldr	r1, [r3, #12]
 800a77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	ea40 0301 	orr.w	r3, r0, r1
 800a786:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a78a:	699b      	ldr	r3, [r3, #24]
 800a78c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	4b6f      	ldr	r3, [pc, #444]	@ (800a950 <UART_SetConfig+0x224>)
 800a794:	429a      	cmp	r2, r3
 800a796:	d009      	beq.n	800a7ac <UART_SetConfig+0x80>
 800a798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	4b6e      	ldr	r3, [pc, #440]	@ (800a958 <UART_SetConfig+0x22c>)
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d004      	beq.n	800a7ac <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7a4:	6a1a      	ldr	r2, [r3, #32]
 800a7a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a7b6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7c0:	430b      	orrs	r3, r1
 800a7c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ca:	f023 000f 	bic.w	r0, r3, #15
 800a7ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	ea40 0301 	orr.w	r3, r0, r1
 800a7da:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	4b5e      	ldr	r3, [pc, #376]	@ (800a95c <UART_SetConfig+0x230>)
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d102      	bne.n	800a7ec <UART_SetConfig+0xc0>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7ea:	e032      	b.n	800a852 <UART_SetConfig+0x126>
 800a7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	4b5b      	ldr	r3, [pc, #364]	@ (800a960 <UART_SetConfig+0x234>)
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d102      	bne.n	800a7fc <UART_SetConfig+0xd0>
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7fa:	e02a      	b.n	800a852 <UART_SetConfig+0x126>
 800a7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	4b58      	ldr	r3, [pc, #352]	@ (800a964 <UART_SetConfig+0x238>)
 800a802:	429a      	cmp	r2, r3
 800a804:	d102      	bne.n	800a80c <UART_SetConfig+0xe0>
 800a806:	2304      	movs	r3, #4
 800a808:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a80a:	e022      	b.n	800a852 <UART_SetConfig+0x126>
 800a80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	4b55      	ldr	r3, [pc, #340]	@ (800a968 <UART_SetConfig+0x23c>)
 800a812:	429a      	cmp	r2, r3
 800a814:	d102      	bne.n	800a81c <UART_SetConfig+0xf0>
 800a816:	2308      	movs	r3, #8
 800a818:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a81a:	e01a      	b.n	800a852 <UART_SetConfig+0x126>
 800a81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	4b52      	ldr	r3, [pc, #328]	@ (800a96c <UART_SetConfig+0x240>)
 800a822:	429a      	cmp	r2, r3
 800a824:	d102      	bne.n	800a82c <UART_SetConfig+0x100>
 800a826:	2310      	movs	r3, #16
 800a828:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a82a:	e012      	b.n	800a852 <UART_SetConfig+0x126>
 800a82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	4b4f      	ldr	r3, [pc, #316]	@ (800a970 <UART_SetConfig+0x244>)
 800a832:	429a      	cmp	r2, r3
 800a834:	d103      	bne.n	800a83e <UART_SetConfig+0x112>
 800a836:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800a83a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a83c:	e009      	b.n	800a852 <UART_SetConfig+0x126>
 800a83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	4b43      	ldr	r3, [pc, #268]	@ (800a950 <UART_SetConfig+0x224>)
 800a844:	429a      	cmp	r2, r3
 800a846:	d102      	bne.n	800a84e <UART_SetConfig+0x122>
 800a848:	2320      	movs	r3, #32
 800a84a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a84c:	e001      	b.n	800a852 <UART_SetConfig+0x126>
 800a84e:	2300      	movs	r3, #0
 800a850:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	4b3e      	ldr	r3, [pc, #248]	@ (800a950 <UART_SetConfig+0x224>)
 800a858:	429a      	cmp	r2, r3
 800a85a:	d005      	beq.n	800a868 <UART_SetConfig+0x13c>
 800a85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	4b3d      	ldr	r3, [pc, #244]	@ (800a958 <UART_SetConfig+0x22c>)
 800a862:	429a      	cmp	r2, r3
 800a864:	f040 8088 	bne.w	800a978 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a868:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a86a:	2200      	movs	r2, #0
 800a86c:	623b      	str	r3, [r7, #32]
 800a86e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a870:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a874:	f7fc fda2 	bl	80073bc <HAL_RCCEx_GetPeriphCLKFreq>
 800a878:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a87a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f000 80eb 	beq.w	800aa58 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a886:	4a3b      	ldr	r2, [pc, #236]	@ (800a974 <UART_SetConfig+0x248>)
 800a888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a88c:	461a      	mov	r2, r3
 800a88e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a890:	fbb3 f3f2 	udiv	r3, r3, r2
 800a894:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a898:	685a      	ldr	r2, [r3, #4]
 800a89a:	4613      	mov	r3, r2
 800a89c:	005b      	lsls	r3, r3, #1
 800a89e:	4413      	add	r3, r2
 800a8a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d305      	bcc.n	800a8b2 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d903      	bls.n	800a8ba <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a8b8:	e048      	b.n	800a94c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8bc:	2200      	movs	r2, #0
 800a8be:	61bb      	str	r3, [r7, #24]
 800a8c0:	61fa      	str	r2, [r7, #28]
 800a8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c6:	4a2b      	ldr	r2, [pc, #172]	@ (800a974 <UART_SetConfig+0x248>)
 800a8c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	613b      	str	r3, [r7, #16]
 800a8d2:	617a      	str	r2, [r7, #20]
 800a8d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a8d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a8dc:	f7f6 f8c6 	bl	8000a6c <__aeabi_uldivmod>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	f04f 0200 	mov.w	r2, #0
 800a8ec:	f04f 0300 	mov.w	r3, #0
 800a8f0:	020b      	lsls	r3, r1, #8
 800a8f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a8f6:	0202      	lsls	r2, r0, #8
 800a8f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8fa:	6849      	ldr	r1, [r1, #4]
 800a8fc:	0849      	lsrs	r1, r1, #1
 800a8fe:	2000      	movs	r0, #0
 800a900:	460c      	mov	r4, r1
 800a902:	4605      	mov	r5, r0
 800a904:	eb12 0804 	adds.w	r8, r2, r4
 800a908:	eb43 0905 	adc.w	r9, r3, r5
 800a90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	60bb      	str	r3, [r7, #8]
 800a914:	60fa      	str	r2, [r7, #12]
 800a916:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a91a:	4640      	mov	r0, r8
 800a91c:	4649      	mov	r1, r9
 800a91e:	f7f6 f8a5 	bl	8000a6c <__aeabi_uldivmod>
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	4613      	mov	r3, r2
 800a928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a92a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a92c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a930:	d308      	bcc.n	800a944 <UART_SetConfig+0x218>
 800a932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a934:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a938:	d204      	bcs.n	800a944 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800a93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a940:	60da      	str	r2, [r3, #12]
 800a942:	e003      	b.n	800a94c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800a94a:	e085      	b.n	800aa58 <UART_SetConfig+0x32c>
 800a94c:	e084      	b.n	800aa58 <UART_SetConfig+0x32c>
 800a94e:	bf00      	nop
 800a950:	46002400 	.word	0x46002400
 800a954:	cfff69f3 	.word	0xcfff69f3
 800a958:	56002400 	.word	0x56002400
 800a95c:	40013800 	.word	0x40013800
 800a960:	40004400 	.word	0x40004400
 800a964:	40004800 	.word	0x40004800
 800a968:	40004c00 	.word	0x40004c00
 800a96c:	40005000 	.word	0x40005000
 800a970:	40006400 	.word	0x40006400
 800a974:	08010708 	.word	0x08010708
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a97a:	69db      	ldr	r3, [r3, #28]
 800a97c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a980:	d13c      	bne.n	800a9fc <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a984:	2200      	movs	r2, #0
 800a986:	603b      	str	r3, [r7, #0]
 800a988:	607a      	str	r2, [r7, #4]
 800a98a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a98e:	f7fc fd15 	bl	80073bc <HAL_RCCEx_GetPeriphCLKFreq>
 800a992:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a994:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a996:	2b00      	cmp	r3, #0
 800a998:	d05e      	beq.n	800aa58 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a99e:	4a39      	ldr	r2, [pc, #228]	@ (800aa84 <UART_SetConfig+0x358>)
 800a9a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9ac:	005a      	lsls	r2, r3, #1
 800a9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	085b      	lsrs	r3, r3, #1
 800a9b4:	441a      	add	r2, r3
 800a9b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9c2:	2b0f      	cmp	r3, #15
 800a9c4:	d916      	bls.n	800a9f4 <UART_SetConfig+0x2c8>
 800a9c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9cc:	d212      	bcs.n	800a9f4 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	f023 030f 	bic.w	r3, r3, #15
 800a9d6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9da:	085b      	lsrs	r3, r3, #1
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	f003 0307 	and.w	r3, r3, #7
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a9f0:	60da      	str	r2, [r3, #12]
 800a9f2:	e031      	b.n	800aa58 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a9fa:	e02d      	b.n	800aa58 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a9fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9fe:	2200      	movs	r2, #0
 800aa00:	469a      	mov	sl, r3
 800aa02:	4693      	mov	fp, r2
 800aa04:	4650      	mov	r0, sl
 800aa06:	4659      	mov	r1, fp
 800aa08:	f7fc fcd8 	bl	80073bc <HAL_RCCEx_GetPeriphCLKFreq>
 800aa0c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800aa0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d021      	beq.n	800aa58 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa18:	4a1a      	ldr	r2, [pc, #104]	@ (800aa84 <UART_SetConfig+0x358>)
 800aa1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa1e:	461a      	mov	r2, r3
 800aa20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa22:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	085b      	lsrs	r3, r3, #1
 800aa2c:	441a      	add	r2, r3
 800aa2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa3a:	2b0f      	cmp	r3, #15
 800aa3c:	d909      	bls.n	800aa52 <UART_SetConfig+0x326>
 800aa3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa44:	d205      	bcs.n	800aa52 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	60da      	str	r2, [r3, #12]
 800aa50:	e002      	b.n	800aa58 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aa60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa62:	2201      	movs	r2, #1
 800aa64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aa6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa70:	2200      	movs	r2, #0
 800aa72:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aa74:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3750      	adds	r7, #80	@ 0x50
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa82:	bf00      	nop
 800aa84:	08010708 	.word	0x08010708

0800aa88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa94:	f003 0308 	and.w	r3, r3, #8
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00a      	beq.n	800aab2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	430a      	orrs	r2, r1
 800aab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aab6:	f003 0301 	and.w	r3, r3, #1
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00a      	beq.n	800aad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	430a      	orrs	r2, r1
 800aad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad8:	f003 0302 	and.w	r3, r3, #2
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00a      	beq.n	800aaf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	430a      	orrs	r2, r1
 800aaf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aafa:	f003 0304 	and.w	r3, r3, #4
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00a      	beq.n	800ab18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	430a      	orrs	r2, r1
 800ab16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab1c:	f003 0310 	and.w	r3, r3, #16
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00a      	beq.n	800ab3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	430a      	orrs	r2, r1
 800ab38:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab3e:	f003 0320 	and.w	r3, r3, #32
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00a      	beq.n	800ab5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	430a      	orrs	r2, r1
 800ab5a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d01a      	beq.n	800ab9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	430a      	orrs	r2, r1
 800ab7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab86:	d10a      	bne.n	800ab9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	430a      	orrs	r2, r1
 800ab9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00a      	beq.n	800abc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	430a      	orrs	r2, r1
 800abbe:	605a      	str	r2, [r3, #4]
  }
}
 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b098      	sub	sp, #96	@ 0x60
 800abd0:	af02      	add	r7, sp, #8
 800abd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800abdc:	f7f7 fbac 	bl	8002338 <HAL_GetTick>
 800abe0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 0308 	and.w	r3, r3, #8
 800abec:	2b08      	cmp	r3, #8
 800abee:	d12f      	bne.n	800ac50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abf0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abf8:	2200      	movs	r2, #0
 800abfa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 f88e 	bl	800ad20 <UART_WaitOnFlagUntilTimeout>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d022      	beq.n	800ac50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac12:	e853 3f00 	ldrex	r3, [r3]
 800ac16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac1e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	461a      	mov	r2, r3
 800ac26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac28:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac30:	e841 2300 	strex	r3, r2, [r1]
 800ac34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1e6      	bne.n	800ac0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2220      	movs	r2, #32
 800ac40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e063      	b.n	800ad18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f003 0304 	and.w	r3, r3, #4
 800ac5a:	2b04      	cmp	r3, #4
 800ac5c:	d149      	bne.n	800acf2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac5e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac66:	2200      	movs	r2, #0
 800ac68:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 f857 	bl	800ad20 <UART_WaitOnFlagUntilTimeout>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d03c      	beq.n	800acf2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac80:	e853 3f00 	ldrex	r3, [r3]
 800ac84:	623b      	str	r3, [r7, #32]
   return(result);
 800ac86:	6a3b      	ldr	r3, [r7, #32]
 800ac88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	461a      	mov	r2, r3
 800ac94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac96:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac98:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac9e:	e841 2300 	strex	r3, r2, [r1]
 800aca2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1e6      	bne.n	800ac78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	3308      	adds	r3, #8
 800acb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	e853 3f00 	ldrex	r3, [r3]
 800acb8:	60fb      	str	r3, [r7, #12]
   return(result);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f023 0301 	bic.w	r3, r3, #1
 800acc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3308      	adds	r3, #8
 800acc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800acca:	61fa      	str	r2, [r7, #28]
 800accc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acce:	69b9      	ldr	r1, [r7, #24]
 800acd0:	69fa      	ldr	r2, [r7, #28]
 800acd2:	e841 2300 	strex	r3, r2, [r1]
 800acd6:	617b      	str	r3, [r7, #20]
   return(result);
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d1e5      	bne.n	800acaa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2220      	movs	r2, #32
 800ace2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acee:	2303      	movs	r3, #3
 800acf0:	e012      	b.n	800ad18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2220      	movs	r2, #32
 800acf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2220      	movs	r2, #32
 800acfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3758      	adds	r7, #88	@ 0x58
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	603b      	str	r3, [r7, #0]
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad30:	e04f      	b.n	800add2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad38:	d04b      	beq.n	800add2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad3a:	f7f7 fafd 	bl	8002338 <HAL_GetTick>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	69ba      	ldr	r2, [r7, #24]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d302      	bcc.n	800ad50 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d101      	bne.n	800ad54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad50:	2303      	movs	r3, #3
 800ad52:	e04e      	b.n	800adf2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f003 0304 	and.w	r3, r3, #4
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d037      	beq.n	800add2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	2b80      	cmp	r3, #128	@ 0x80
 800ad66:	d034      	beq.n	800add2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	2b40      	cmp	r3, #64	@ 0x40
 800ad6c:	d031      	beq.n	800add2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	69db      	ldr	r3, [r3, #28]
 800ad74:	f003 0308 	and.w	r3, r3, #8
 800ad78:	2b08      	cmp	r3, #8
 800ad7a:	d110      	bne.n	800ad9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2208      	movs	r2, #8
 800ad82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	f000 f838 	bl	800adfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2208      	movs	r2, #8
 800ad8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e029      	b.n	800adf2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	69db      	ldr	r3, [r3, #28]
 800ada4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ada8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800adac:	d111      	bne.n	800add2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800adb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f000 f81e 	bl	800adfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2220      	movs	r2, #32
 800adc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800adce:	2303      	movs	r3, #3
 800add0:	e00f      	b.n	800adf2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	69da      	ldr	r2, [r3, #28]
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	4013      	ands	r3, r2
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	429a      	cmp	r2, r3
 800ade0:	bf0c      	ite	eq
 800ade2:	2301      	moveq	r3, #1
 800ade4:	2300      	movne	r3, #0
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	461a      	mov	r2, r3
 800adea:	79fb      	ldrb	r3, [r7, #7]
 800adec:	429a      	cmp	r2, r3
 800adee:	d0a0      	beq.n	800ad32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800adfa:	b480      	push	{r7}
 800adfc:	b095      	sub	sp, #84	@ 0x54
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae0a:	e853 3f00 	ldrex	r3, [r3]
 800ae0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae20:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae22:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae28:	e841 2300 	strex	r3, r2, [r1]
 800ae2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d1e6      	bne.n	800ae02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	3308      	adds	r3, #8
 800ae3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3c:	6a3b      	ldr	r3, [r7, #32]
 800ae3e:	e853 3f00 	ldrex	r3, [r3]
 800ae42:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae4a:	f023 0301 	bic.w	r3, r3, #1
 800ae4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	3308      	adds	r3, #8
 800ae56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae60:	e841 2300 	strex	r3, r2, [r1]
 800ae64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d1e3      	bne.n	800ae34 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d118      	bne.n	800aea6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	e853 3f00 	ldrex	r3, [r3]
 800ae80:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	f023 0310 	bic.w	r3, r3, #16
 800ae88:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae92:	61bb      	str	r3, [r7, #24]
 800ae94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae96:	6979      	ldr	r1, [r7, #20]
 800ae98:	69ba      	ldr	r2, [r7, #24]
 800ae9a:	e841 2300 	strex	r3, r2, [r1]
 800ae9e:	613b      	str	r3, [r7, #16]
   return(result);
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1e6      	bne.n	800ae74 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2220      	movs	r2, #32
 800aeaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aeba:	bf00      	nop
 800aebc:	3754      	adds	r7, #84	@ 0x54
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aec6:	b480      	push	{r7}
 800aec8:	b085      	sub	sp, #20
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d101      	bne.n	800aedc <HAL_UARTEx_DisableFifoMode+0x16>
 800aed8:	2302      	movs	r3, #2
 800aeda:	e027      	b.n	800af2c <HAL_UARTEx_DisableFifoMode+0x66>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2224      	movs	r2, #36	@ 0x24
 800aee8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f022 0201 	bic.w	r2, r2, #1
 800af02:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800af0a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2220      	movs	r2, #32
 800af1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d101      	bne.n	800af50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af4c:	2302      	movs	r3, #2
 800af4e:	e02d      	b.n	800afac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2224      	movs	r2, #36	@ 0x24
 800af5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f022 0201 	bic.w	r2, r2, #1
 800af76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	683a      	ldr	r2, [r7, #0]
 800af88:	430a      	orrs	r2, r1
 800af8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f84f 	bl	800b030 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2220      	movs	r2, #32
 800af9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d101      	bne.n	800afcc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800afc8:	2302      	movs	r3, #2
 800afca:	e02d      	b.n	800b028 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2224      	movs	r2, #36	@ 0x24
 800afd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f022 0201 	bic.w	r2, r2, #1
 800aff2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	683a      	ldr	r2, [r7, #0]
 800b004:	430a      	orrs	r2, r1
 800b006:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f811 	bl	800b030 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2220      	movs	r2, #32
 800b01a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3710      	adds	r7, #16
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d108      	bne.n	800b052 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2201      	movs	r2, #1
 800b04c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b050:	e031      	b.n	800b0b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b052:	2308      	movs	r3, #8
 800b054:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b056:	2308      	movs	r3, #8
 800b058:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	0e5b      	lsrs	r3, r3, #25
 800b062:	b2db      	uxtb	r3, r3
 800b064:	f003 0307 	and.w	r3, r3, #7
 800b068:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	0f5b      	lsrs	r3, r3, #29
 800b072:	b2db      	uxtb	r3, r3
 800b074:	f003 0307 	and.w	r3, r3, #7
 800b078:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b07a:	7bbb      	ldrb	r3, [r7, #14]
 800b07c:	7b3a      	ldrb	r2, [r7, #12]
 800b07e:	4911      	ldr	r1, [pc, #68]	@ (800b0c4 <UARTEx_SetNbDataToProcess+0x94>)
 800b080:	5c8a      	ldrb	r2, [r1, r2]
 800b082:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b086:	7b3a      	ldrb	r2, [r7, #12]
 800b088:	490f      	ldr	r1, [pc, #60]	@ (800b0c8 <UARTEx_SetNbDataToProcess+0x98>)
 800b08a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b08c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b090:	b29a      	uxth	r2, r3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b098:	7bfb      	ldrb	r3, [r7, #15]
 800b09a:	7b7a      	ldrb	r2, [r7, #13]
 800b09c:	4909      	ldr	r1, [pc, #36]	@ (800b0c4 <UARTEx_SetNbDataToProcess+0x94>)
 800b09e:	5c8a      	ldrb	r2, [r1, r2]
 800b0a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b0a4:	7b7a      	ldrb	r2, [r7, #13]
 800b0a6:	4908      	ldr	r1, [pc, #32]	@ (800b0c8 <UARTEx_SetNbDataToProcess+0x98>)
 800b0a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b0b6:	bf00      	nop
 800b0b8:	3714      	adds	r7, #20
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	08010720 	.word	0x08010720
 800b0c8:	08010728 	.word	0x08010728

0800b0cc <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b086      	sub	sp, #24
 800b0d0:	af00      	add	r7, sp, #0
    /* Initialize WiFi GPIO pins */
    GPIO_InitTypeDef GPIO_InitStruct;

    /* Configure GPIO pins : PA1 PA2 PA0 - we are using ST GPIO definitions for winc1500 */
    GPIO_InitStruct.Pin   = CONF_WINC_PIN_RESET;
 800b0d2:	2310      	movs	r3, #16
 800b0d4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;    // GPIO_PULLDOWN;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = 0;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CONF_WINC_PORT_RESET, &GPIO_InitStruct);
 800b0e6:	1d3b      	adds	r3, r7, #4
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	481d      	ldr	r0, [pc, #116]	@ (800b160 <init_chip_pins+0x94>)
 800b0ec:	f7f8 ffb6 	bl	800405c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_CHIP_ENABLE;
 800b0f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0f4:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(CONF_WINC_PORT_CHIP_ENABLE, &GPIO_InitStruct);
 800b0f6:	1d3b      	adds	r3, r7, #4
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	481a      	ldr	r0, [pc, #104]	@ (800b164 <init_chip_pins+0x98>)
 800b0fc:	f7f8 ffae 	bl	800405c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_WAKE;
 800b100:	2310      	movs	r3, #16
 800b102:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CONF_WINC_PORT_WAKE, &GPIO_InitStruct);
 800b104:	1d3b      	adds	r3, r7, #4
 800b106:	4619      	mov	r1, r3
 800b108:	4817      	ldr	r0, [pc, #92]	@ (800b168 <init_chip_pins+0x9c>)
 800b10a:	f7f8 ffa7 	bl	800405c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_POWER_ENABLE;
 800b10e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b112:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CONF_WINC_PORT_POWER_ENABLE, &GPIO_InitStruct);
 800b114:	1d3b      	adds	r3, r7, #4
 800b116:	4619      	mov	r1, r3
 800b118:	4813      	ldr	r0, [pc, #76]	@ (800b168 <init_chip_pins+0x9c>)
 800b11a:	f7f8 ff9f 	bl	800405c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE;
 800b11e:	2340      	movs	r3, #64	@ 0x40
 800b120:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE, &GPIO_InitStruct);
 800b122:	1d3b      	adds	r3, r7, #4
 800b124:	4619      	mov	r1, r3
 800b126:	480e      	ldr	r0, [pc, #56]	@ (800b160 <init_chip_pins+0x94>)
 800b128:	f7f8 ff98 	bl	800405c <HAL_GPIO_Init>

    /* Set INIT value */
    HAL_GPIO_WritePin(CONF_WINC_PORT_POWER_ENABLE,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_RESET);
 800b12c:	2200      	movs	r2, #0
 800b12e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b132:	480d      	ldr	r0, [pc, #52]	@ (800b168 <init_chip_pins+0x9c>)
 800b134:	f7f9 f96a 	bl	800440c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_SET);
 800b138:	2201      	movs	r2, #1
 800b13a:	2140      	movs	r1, #64	@ 0x40
 800b13c:	4808      	ldr	r0, [pc, #32]	@ (800b160 <init_chip_pins+0x94>)
 800b13e:	f7f9 f965 	bl	800440c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_CHIP_ENABLE,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_RESET);
 800b142:	2200      	movs	r2, #0
 800b144:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b148:	4806      	ldr	r0, [pc, #24]	@ (800b164 <init_chip_pins+0x98>)
 800b14a:	f7f9 f95f 	bl	800440c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_RESET,CONF_WINC_PIN_RESET,GPIO_PIN_RESET);
 800b14e:	2200      	movs	r2, #0
 800b150:	2110      	movs	r1, #16
 800b152:	4803      	ldr	r0, [pc, #12]	@ (800b160 <init_chip_pins+0x94>)
 800b154:	f7f9 f95a 	bl	800440c <HAL_GPIO_WritePin>

}
 800b158:	bf00      	nop
 800b15a:	3718      	adds	r7, #24
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	42020400 	.word	0x42020400
 800b164:	42020c00 	.word	0x42020c00
 800b168:	42020000 	.word	0x42020000

0800b16c <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	af00      	add	r7, sp, #0
	/* Initialize chip IOs. */
	init_chip_pins();
 800b170:	f7ff ffac 	bl	800b0cc <init_chip_pins>

	/* Perform chip reset. */
	nm_bsp_reset();
 800b174:	f000 f804 	bl	800b180 <nm_bsp_reset>

	return M2M_SUCCESS;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	bd80      	pop	{r7, pc}
	...

0800b180 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	af00      	add	r7, sp, #0
    /* Set Power sequence of GPIO lines */
    /* -------------------------------- */

    /* Power enable (3.3V) - 3V3_DC2DC_EN output */
    HAL_GPIO_WritePin(CONF_WINC_PORT_POWER_ENABLE,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_SET);
 800b184:	2201      	movs	r2, #1
 800b186:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b18a:	4810      	ldr	r0, [pc, #64]	@ (800b1cc <nm_bsp_reset+0x4c>)
 800b18c:	f7f9 f93e 	bl	800440c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800b190:	2064      	movs	r0, #100	@ 0x64
 800b192:	f7f7 f8dd 	bl	8002350 <HAL_Delay>

    /* Level Shifter Translate enable - LEVEL_TRNSLT_EN output */
    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_RESET);
 800b196:	2200      	movs	r2, #0
 800b198:	2140      	movs	r1, #64	@ 0x40
 800b19a:	480d      	ldr	r0, [pc, #52]	@ (800b1d0 <nm_bsp_reset+0x50>)
 800b19c:	f7f9 f936 	bl	800440c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800b1a0:	2064      	movs	r0, #100	@ 0x64
 800b1a2:	f7f7 f8d5 	bl	8002350 <HAL_Delay>

    /* Set CHIP enable */
	HAL_GPIO_WritePin(CONF_WINC_PORT_CHIP_ENABLE,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b1ac:	4809      	ldr	r0, [pc, #36]	@ (800b1d4 <nm_bsp_reset+0x54>)
 800b1ae:	f7f9 f92d 	bl	800440c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800b1b2:	2064      	movs	r0, #100	@ 0x64
 800b1b4:	f7f7 f8cc 	bl	8002350 <HAL_Delay>

    /* Set RSTN 1.8V */
    HAL_GPIO_WritePin(CONF_WINC_PORT_RESET,CONF_WINC_PIN_RESET,GPIO_PIN_SET);
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	2110      	movs	r1, #16
 800b1bc:	4804      	ldr	r0, [pc, #16]	@ (800b1d0 <nm_bsp_reset+0x50>)
 800b1be:	f7f9 f925 	bl	800440c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800b1c2:	2064      	movs	r0, #100	@ 0x64
 800b1c4:	f7f7 f8c4 	bl	8002350 <HAL_Delay>

}
 800b1c8:	bf00      	nop
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	42020000 	.word	0x42020000
 800b1d0:	42020400 	.word	0x42020400
 800b1d4:	42020c00 	.word	0x42020c00

0800b1d8 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
    /* use FreeRTOS delay */
    HAL_Delay(u32TimeMsec);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7f7 f8b5 	bl	8002350 <HAL_Delay>
}
 800b1e6:	bf00      	nop
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
	...

0800b1f0 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b088      	sub	sp, #32
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    /* EXTI2 init ISR function - called from nm_bsp_register_isr() */

     __GPIOC_CLK_ENABLE();
 800b1f8:	4b13      	ldr	r3, [pc, #76]	@ (800b248 <nm_bsp_register_isr+0x58>)
 800b1fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1fe:	4a12      	ldr	r2, [pc, #72]	@ (800b248 <nm_bsp_register_isr+0x58>)
 800b200:	f043 0304 	orr.w	r3, r3, #4
 800b204:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b208:	4b0f      	ldr	r3, [pc, #60]	@ (800b248 <nm_bsp_register_isr+0x58>)
 800b20a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b20e:	f003 0304 	and.w	r3, r3, #4
 800b212:	60bb      	str	r3, [r7, #8]
 800b214:	68bb      	ldr	r3, [r7, #8]
	 //__GPIOA_CLK_ENABLE();

    /*Configure GPIO pin : PA2 */
    GPIO_InitStruct.Pin   = CONF_WINC_SPI_INT_PIN;
 800b216:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b21a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800b21c:	4b0b      	ldr	r3, [pc, #44]	@ (800b24c <nm_bsp_register_isr+0x5c>)
 800b21e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800b220:	2300      	movs	r3, #0
 800b222:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CONF_WINC_SPI_INT_PORT, &GPIO_InitStruct);
 800b224:	f107 030c 	add.w	r3, r7, #12
 800b228:	4619      	mov	r1, r3
 800b22a:	4809      	ldr	r0, [pc, #36]	@ (800b250 <nm_bsp_register_isr+0x60>)
 800b22c:	f7f8 ff16 	bl	800405c <HAL_GPIO_Init>

    /* EXTI 2 (PA2) interrupt init*/
    HAL_NVIC_SetPriority(CONF_WINC_EXTI_IRQN, 0x00, 0);
 800b230:	2200      	movs	r2, #0
 800b232:	2100      	movs	r1, #0
 800b234:	2013      	movs	r0, #19
 800b236:	f7f8 fd6b 	bl	8003d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CONF_WINC_EXTI_IRQN);
 800b23a:	2013      	movs	r0, #19
 800b23c:	f7f8 fd82 	bl	8003d44 <HAL_NVIC_EnableIRQ>
	/* Enable and set EXTI line 15_10 Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
#endif

}
 800b240:	bf00      	nop
 800b242:	3720      	adds	r7, #32
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	46020c00 	.word	0x46020c00
 800b24c:	10210000 	.word	0x10210000
 800b250:	42020c00 	.word	0x42020c00

0800b254 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	4603      	mov	r3, r0
 800b25c:	71fb      	strb	r3, [r7, #7]
    if (1 == u8Enable)
 800b25e:	79fb      	ldrb	r3, [r7, #7]
 800b260:	2b01      	cmp	r3, #1
 800b262:	d108      	bne.n	800b276 <nm_bsp_interrupt_ctrl+0x22>
    {
        HAL_NVIC_SetPriority((IRQn_Type)(CONF_WINC_EXTI_IRQN), 0x01, 0);
 800b264:	2200      	movs	r2, #0
 800b266:	2101      	movs	r1, #1
 800b268:	2013      	movs	r0, #19
 800b26a:	f7f8 fd51 	bl	8003d10 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 800b26e:	2013      	movs	r0, #19
 800b270:	f7f8 fd68 	bl	8003d44 <HAL_NVIC_EnableIRQ>
    }
    else
    {
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
    }
}
 800b274:	e002      	b.n	800b27c <nm_bsp_interrupt_ctrl+0x28>
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 800b276:	2013      	movs	r0, #19
 800b278:	f7f8 fd72 	bl	8003d60 <HAL_NVIC_DisableIRQ>
}
 800b27c:	bf00      	nop
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <spi_select_slave>:
*	@fn		spi_select_slave
*	@brief	Select slave chip select: true - select, false - deselect
*	@return	None
*/
static void spi_select_slave(const uint8_t select)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	4603      	mov	r3, r0
 800b28c:	71fb      	strb	r3, [r7, #7]
    if (select)
 800b28e:	79fb      	ldrb	r3, [r7, #7]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d006      	beq.n	800b2a2 <spi_select_slave+0x1e>
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_RESET);
 800b294:	2200      	movs	r2, #0
 800b296:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b29a:	4807      	ldr	r0, [pc, #28]	@ (800b2b8 <spi_select_slave+0x34>)
 800b29c:	f7f9 f8b6 	bl	800440c <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
    }
}
 800b2a0:	e005      	b.n	800b2ae <spi_select_slave+0x2a>
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b2a8:	4803      	ldr	r0, [pc, #12]	@ (800b2b8 <spi_select_slave+0x34>)
 800b2aa:	f7f9 f8af 	bl	800440c <HAL_GPIO_WritePin>
}
 800b2ae:	bf00      	nop
 800b2b0:	3708      	adds	r7, #8
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	42020c00 	.word	0x42020c00

0800b2bc <nm_spi_rw>:
	return M2M_SUCCESS;
}
#else

sint8 nm_spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b088      	sub	sp, #32
 800b2c0:	af02      	add	r7, sp, #8
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	80fb      	strh	r3, [r7, #6]
   HAL_StatusTypeDef status;

    /* Start SPI transaction - polling method */
  	spi_select_slave(true);
 800b2ca:	2001      	movs	r0, #1
 800b2cc:	f7ff ffda 	bl	800b284 <spi_select_slave>


    /* Transmit/Recieve */
    if (pu8Mosi == NULL)
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10b      	bne.n	800b2ee <nm_spi_rw+0x32>
	{
		status = HAL_SPI_TransmitReceive(&hspiWifi,spiDummyBuf,pu8Miso,u16Sz,1000);
 800b2d6:	88fb      	ldrh	r3, [r7, #6]
 800b2d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b2dc:	9200      	str	r2, [sp, #0]
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	4921      	ldr	r1, [pc, #132]	@ (800b368 <nm_spi_rw+0xac>)
 800b2e2:	4822      	ldr	r0, [pc, #136]	@ (800b36c <nm_spi_rw+0xb0>)
 800b2e4:	f7fd fe0e 	bl	8008f04 <HAL_SPI_TransmitReceive>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	75fb      	strb	r3, [r7, #23]
 800b2ec:	e01f      	b.n	800b32e <nm_spi_rw+0x72>
    }
    else if(pu8Miso == NULL)
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d111      	bne.n	800b318 <nm_spi_rw+0x5c>
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,spiDummyBuf,u16Sz,1000);
 800b2f4:	88fb      	ldrh	r3, [r7, #6]
 800b2f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b2fa:	9200      	str	r2, [sp, #0]
 800b2fc:	4a1a      	ldr	r2, [pc, #104]	@ (800b368 <nm_spi_rw+0xac>)
 800b2fe:	68f9      	ldr	r1, [r7, #12]
 800b300:	481a      	ldr	r0, [pc, #104]	@ (800b36c <nm_spi_rw+0xb0>)
 800b302:	f7fd fdff 	bl	8008f04 <HAL_SPI_TransmitReceive>
 800b306:	4603      	mov	r3, r0
 800b308:	75fb      	strb	r3, [r7, #23]
        memset(spiDummyBuf,0, u16Sz);
 800b30a:	88fb      	ldrh	r3, [r7, #6]
 800b30c:	461a      	mov	r2, r3
 800b30e:	2100      	movs	r1, #0
 800b310:	4815      	ldr	r0, [pc, #84]	@ (800b368 <nm_spi_rw+0xac>)
 800b312:	f003 fbe9 	bl	800eae8 <memset>
 800b316:	e00a      	b.n	800b32e <nm_spi_rw+0x72>
    }
    else
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,pu8Miso,u16Sz,1000);
 800b318:	88fb      	ldrh	r3, [r7, #6]
 800b31a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b31e:	9200      	str	r2, [sp, #0]
 800b320:	68ba      	ldr	r2, [r7, #8]
 800b322:	68f9      	ldr	r1, [r7, #12]
 800b324:	4811      	ldr	r0, [pc, #68]	@ (800b36c <nm_spi_rw+0xb0>)
 800b326:	f7fd fded 	bl	8008f04 <HAL_SPI_TransmitReceive>
 800b32a:	4603      	mov	r3, r0
 800b32c:	75fb      	strb	r3, [r7, #23]
    }

    /* Handle Transmit/Recieve error */
    if (status != HAL_OK)
 800b32e:	7dfb      	ldrb	r3, [r7, #23]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d010      	beq.n	800b356 <nm_spi_rw+0x9a>
    {
        M2M_ERR("%s: HAL_SPI_TransmitReceive failed. error (%d)\n",__FUNCTION__,status);
 800b334:	22b2      	movs	r2, #178	@ 0xb2
 800b336:	490e      	ldr	r1, [pc, #56]	@ (800b370 <nm_spi_rw+0xb4>)
 800b338:	480e      	ldr	r0, [pc, #56]	@ (800b374 <nm_spi_rw+0xb8>)
 800b33a:	f003 fa85 	bl	800e848 <iprintf>
 800b33e:	7dfb      	ldrb	r3, [r7, #23]
 800b340:	461a      	mov	r2, r3
 800b342:	490b      	ldr	r1, [pc, #44]	@ (800b370 <nm_spi_rw+0xb4>)
 800b344:	480c      	ldr	r0, [pc, #48]	@ (800b378 <nm_spi_rw+0xbc>)
 800b346:	f003 fa7f 	bl	800e848 <iprintf>
 800b34a:	200d      	movs	r0, #13
 800b34c:	f003 fa8e 	bl	800e86c <putchar>
        return status;
 800b350:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b354:	e003      	b.n	800b35e <nm_spi_rw+0xa2>
    }

  	spi_select_slave(false);
 800b356:	2000      	movs	r0, #0
 800b358:	f7ff ff94 	bl	800b284 <spi_select_slave>

	return M2M_SUCCESS;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3718      	adds	r7, #24
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	20000534 	.word	0x20000534
 800b36c:	200004a4 	.word	0x200004a4
 800b370:	08010730 	.word	0x08010730
 800b374:	0800f738 	.word	0x0800f738
 800b378:	0800f74c 	.word	0x0800f74c

0800b37c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
 800b384:	2300      	movs	r3, #0
 800b386:	73fb      	strb	r3, [r7, #15]

	 /* WiFi SPI init function - called from nm_bus_init() */

	hspiWifi.Instance			   = SPI_WIFI;
 800b388:	4b20      	ldr	r3, [pc, #128]	@ (800b40c <nm_bus_init+0x90>)
 800b38a:	4a21      	ldr	r2, [pc, #132]	@ (800b410 <nm_bus_init+0x94>)
 800b38c:	601a      	str	r2, [r3, #0]
	hspiWifi.Init.Mode			   = SPI_MODE_MASTER;
 800b38e:	4b1f      	ldr	r3, [pc, #124]	@ (800b40c <nm_bus_init+0x90>)
 800b390:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800b394:	605a      	str	r2, [r3, #4]
	hspiWifi.Init.Direction 	   = SPI_DIRECTION_2LINES;
 800b396:	4b1d      	ldr	r3, [pc, #116]	@ (800b40c <nm_bus_init+0x90>)
 800b398:	2200      	movs	r2, #0
 800b39a:	609a      	str	r2, [r3, #8]
	hspiWifi.Init.DataSize		   = SPI_DATASIZE_8BIT;
 800b39c:	4b1b      	ldr	r3, [pc, #108]	@ (800b40c <nm_bus_init+0x90>)
 800b39e:	2207      	movs	r2, #7
 800b3a0:	60da      	str	r2, [r3, #12]
	hspiWifi.Init.CLKPolarity	   = SPI_POLARITY_LOW;
 800b3a2:	4b1a      	ldr	r3, [pc, #104]	@ (800b40c <nm_bus_init+0x90>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	611a      	str	r2, [r3, #16]
	hspiWifi.Init.CLKPhase		   = SPI_PHASE_1EDGE;
 800b3a8:	4b18      	ldr	r3, [pc, #96]	@ (800b40c <nm_bus_init+0x90>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	615a      	str	r2, [r3, #20]
	hspiWifi.Init.NSS			   = SPI_NSS_SOFT;
 800b3ae:	4b17      	ldr	r3, [pc, #92]	@ (800b40c <nm_bus_init+0x90>)
 800b3b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800b3b4:	619a      	str	r2, [r3, #24]
	hspiWifi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800b3b6:	4b15      	ldr	r3, [pc, #84]	@ (800b40c <nm_bus_init+0x90>)
 800b3b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b3bc:	61da      	str	r2, [r3, #28]
	hspiWifi.Init.FirstBit		   = SPI_FIRSTBIT_MSB;
 800b3be:	4b13      	ldr	r3, [pc, #76]	@ (800b40c <nm_bus_init+0x90>)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	621a      	str	r2, [r3, #32]
	hspiWifi.Init.TIMode		   = SPI_TIMODE_DISABLE;
 800b3c4:	4b11      	ldr	r3, [pc, #68]	@ (800b40c <nm_bus_init+0x90>)
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	625a      	str	r2, [r3, #36]	@ 0x24
	hspiWifi.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 800b3ca:	4b10      	ldr	r3, [pc, #64]	@ (800b40c <nm_bus_init+0x90>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	629a      	str	r2, [r3, #40]	@ 0x28
	hspiWifi.Init.CRCPolynomial    = 10;
 800b3d0:	4b0e      	ldr	r3, [pc, #56]	@ (800b40c <nm_bus_init+0x90>)
 800b3d2:	220a      	movs	r2, #10
 800b3d4:	62da      	str	r2, [r3, #44]	@ 0x2c
//	  hspiWifi.Init.CRCLength		 = SPI_CRC_LENGTH_DATASIZE;
//	  hspiWifi.Init.NSSPMode		 = SPI_NSS_PULSE_DISABLE;
	if (HAL_SPI_Init(&hspiWifi) != HAL_OK)
 800b3d6:	480d      	ldr	r0, [pc, #52]	@ (800b40c <nm_bus_init+0x90>)
 800b3d8:	f7fd fc7e 	bl	8008cd8 <HAL_SPI_Init>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00a      	beq.n	800b3f8 <nm_bus_init+0x7c>
	{
		M2M_ERR("SPI bus Initialization error\r\n");
 800b3e2:	22f6      	movs	r2, #246	@ 0xf6
 800b3e4:	490b      	ldr	r1, [pc, #44]	@ (800b414 <nm_bus_init+0x98>)
 800b3e6:	480c      	ldr	r0, [pc, #48]	@ (800b418 <nm_bus_init+0x9c>)
 800b3e8:	f003 fa2e 	bl	800e848 <iprintf>
 800b3ec:	480b      	ldr	r0, [pc, #44]	@ (800b41c <nm_bus_init+0xa0>)
 800b3ee:	f003 fa9b 	bl	800e928 <puts>
 800b3f2:	200d      	movs	r0, #13
 800b3f4:	f003 fa3a 	bl	800e86c <putchar>
	}

	HAL_SPI_MspInit(&hspiWifi);
 800b3f8:	4804      	ldr	r0, [pc, #16]	@ (800b40c <nm_bus_init+0x90>)
 800b3fa:	f7f6 fbb5 	bl	8001b68 <HAL_SPI_MspInit>
	return result;
 800b3fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	200004a4 	.word	0x200004a4
 800b410:	40013000 	.word	0x40013000
 800b414:	0801073c 	.word	0x0801073c
 800b418:	0800f738 	.word	0x0800f738
 800b41c:	0800f77c 	.word	0x0800f77c

0800b420 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
 800b420:	b480      	push	{r7}
 800b422:	af00      	add	r7, sp, #0
	return M2M_SUCCESS;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8 *pDst, uint8 *pSrc, uint32 sz)
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
    if(sz == 0) return;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d010      	beq.n	800b464 <m2m_memcpy+0x34>
    do
    {
        *pDst = *pSrc;
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	781a      	ldrb	r2, [r3, #0]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	701a      	strb	r2, [r3, #0]
        pDst++;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	3301      	adds	r3, #1
 800b44e:	60fb      	str	r3, [r7, #12]
        pSrc++;
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	3301      	adds	r3, #1
 800b454:	60bb      	str	r3, [r7, #8]
    } while(--sz);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	3b01      	subs	r3, #1
 800b45a:	607b      	str	r3, [r7, #4]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d1ef      	bne.n	800b442 <m2m_memcpy+0x12>
 800b462:	e000      	b.n	800b466 <m2m_memcpy+0x36>
    if(sz == 0) return;
 800b464:	bf00      	nop
}
 800b466:	3714      	adds	r7, #20
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <m2m_memset>:

    return cs;
}

void m2m_memset(uint8 *pBuf, uint8 val, uint32 sz)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	460b      	mov	r3, r1
 800b47a:	607a      	str	r2, [r7, #4]
 800b47c:	72fb      	strb	r3, [r7, #11]
    if(sz == 0) return;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d00c      	beq.n	800b49e <m2m_memset+0x2e>
    do
    {
        *pBuf = val;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	7afa      	ldrb	r2, [r7, #11]
 800b488:	701a      	strb	r2, [r3, #0]
        pBuf++;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3301      	adds	r3, #1
 800b48e:	60fb      	str	r3, [r7, #12]
    } while(--sz);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	3b01      	subs	r3, #1
 800b494:	607b      	str	r3, [r7, #4]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1f3      	bne.n	800b484 <m2m_memset+0x14>
 800b49c:	e000      	b.n	800b4a0 <m2m_memset+0x30>
    if(sz == 0) return;
 800b49e:	bf00      	nop
}
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr

0800b4aa <m2m_strlen>:

uint16 m2m_strlen(uint8 *pcStr)
{
 800b4aa:	b480      	push	{r7}
 800b4ac:	b085      	sub	sp, #20
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
    uint16  u16StrLen = 0;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	81fb      	strh	r3, [r7, #14]
    while(*pcStr)
 800b4b6:	e005      	b.n	800b4c4 <m2m_strlen+0x1a>
    {
        u16StrLen ++;
 800b4b8:	89fb      	ldrh	r3, [r7, #14]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	81fb      	strh	r3, [r7, #14]
        pcStr++;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	607b      	str	r3, [r7, #4]
    while(*pcStr)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1f5      	bne.n	800b4b8 <m2m_strlen+0xe>
    }
    return u16StrLen;
 800b4cc:	89fb      	ldrh	r3, [r7, #14]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3714      	adds	r7, #20
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <hexchar_2_val>:
    return s8Result;
}

/* Convert hexchar to value 0-15 */
static uint8 hexchar_2_val(uint8 ch)
{
 800b4da:	b480      	push	{r7}
 800b4dc:	b083      	sub	sp, #12
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	71fb      	strb	r3, [r7, #7]
    /* ch -= '0' */
    ch -= 0x30;
 800b4e4:	79fb      	ldrb	r3, [r7, #7]
 800b4e6:	3b30      	subs	r3, #48	@ 0x30
 800b4e8:	71fb      	strb	r3, [r7, #7]
    if(ch <= 9)
 800b4ea:	79fb      	ldrb	r3, [r7, #7]
 800b4ec:	2b09      	cmp	r3, #9
 800b4ee:	d801      	bhi.n	800b4f4 <hexchar_2_val+0x1a>
        return ch;
 800b4f0:	79fb      	ldrb	r3, [r7, #7]
 800b4f2:	e00e      	b.n	800b512 <hexchar_2_val+0x38>
    /* OR with 0x20 to convert upper case to lower case. */
    ch |= 0x20;
 800b4f4:	79fb      	ldrb	r3, [r7, #7]
 800b4f6:	f043 0320 	orr.w	r3, r3, #32
 800b4fa:	71fb      	strb	r3, [r7, #7]
    /* ch -= ('a'-'0') */
    ch -= 0x31;
 800b4fc:	79fb      	ldrb	r3, [r7, #7]
 800b4fe:	3b31      	subs	r3, #49	@ 0x31
 800b500:	71fb      	strb	r3, [r7, #7]
    if(ch <= 5)
 800b502:	79fb      	ldrb	r3, [r7, #7]
 800b504:	2b05      	cmp	r3, #5
 800b506:	d803      	bhi.n	800b510 <hexchar_2_val+0x36>
        return ch + 10;
 800b508:	79fb      	ldrb	r3, [r7, #7]
 800b50a:	330a      	adds	r3, #10
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	e000      	b.n	800b512 <hexchar_2_val+0x38>
    return 0xFF;
 800b510:	23ff      	movs	r3, #255	@ 0xff
}
 800b512:	4618      	mov	r0, r3
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <hexstr_2_bytes>:

/* Convert hexstring to bytes */
sint8 hexstr_2_bytes(uint8 *pu8Out, uint8 *pu8In, uint8 u8SizeOut)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b086      	sub	sp, #24
 800b522:	af00      	add	r7, sp, #0
 800b524:	60f8      	str	r0, [r7, #12]
 800b526:	60b9      	str	r1, [r7, #8]
 800b528:	4613      	mov	r3, r2
 800b52a:	71fb      	strb	r3, [r7, #7]
    while(u8SizeOut--)
 800b52c:	e02c      	b.n	800b588 <hexstr_2_bytes+0x6a>
    {
        uint8   u8Out = hexchar_2_val(*pu8In++);
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	1c5a      	adds	r2, r3, #1
 800b532:	60ba      	str	r2, [r7, #8]
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	4618      	mov	r0, r3
 800b538:	f7ff ffcf 	bl	800b4da <hexchar_2_val>
 800b53c:	4603      	mov	r3, r0
 800b53e:	75fb      	strb	r3, [r7, #23]
        if(u8Out > 0xF)
 800b540:	7dfb      	ldrb	r3, [r7, #23]
 800b542:	2b0f      	cmp	r3, #15
 800b544:	d902      	bls.n	800b54c <hexstr_2_bytes+0x2e>
            return M2M_ERR_INVALID_ARG;
 800b546:	f06f 030e 	mvn.w	r3, #14
 800b54a:	e023      	b.n	800b594 <hexstr_2_bytes+0x76>
        *pu8Out = u8Out * 0x10;
 800b54c:	7dfb      	ldrb	r3, [r7, #23]
 800b54e:	011b      	lsls	r3, r3, #4
 800b550:	b2da      	uxtb	r2, r3
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	701a      	strb	r2, [r3, #0]
        u8Out = hexchar_2_val(*pu8In++);
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	1c5a      	adds	r2, r3, #1
 800b55a:	60ba      	str	r2, [r7, #8]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	4618      	mov	r0, r3
 800b560:	f7ff ffbb 	bl	800b4da <hexchar_2_val>
 800b564:	4603      	mov	r3, r0
 800b566:	75fb      	strb	r3, [r7, #23]
        if(u8Out > 0xF)
 800b568:	7dfb      	ldrb	r3, [r7, #23]
 800b56a:	2b0f      	cmp	r3, #15
 800b56c:	d902      	bls.n	800b574 <hexstr_2_bytes+0x56>
            return M2M_ERR_INVALID_ARG;
 800b56e:	f06f 030e 	mvn.w	r3, #14
 800b572:	e00f      	b.n	800b594 <hexstr_2_bytes+0x76>
        *pu8Out += u8Out;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	781a      	ldrb	r2, [r3, #0]
 800b578:	7dfb      	ldrb	r3, [r7, #23]
 800b57a:	4413      	add	r3, r2
 800b57c:	b2da      	uxtb	r2, r3
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	701a      	strb	r2, [r3, #0]
        pu8Out++;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	3301      	adds	r3, #1
 800b586:	60fb      	str	r3, [r7, #12]
    while(u8SizeOut--)
 800b588:	79fb      	ldrb	r3, [r7, #7]
 800b58a:	1e5a      	subs	r2, r3, #1
 800b58c:	71fa      	strb	r2, [r7, #7]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1cd      	bne.n	800b52e <hexstr_2_bytes+0x10>
    }
    return M2M_SUCCESS;
 800b592:	2300      	movs	r3, #0
}
 800b594:	4618      	mov	r0, r3
 800b596:	3718      	adds	r7, #24
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

void isr(void)
{
 800b59c:	b480      	push	{r7}
 800b59e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
 800b5a0:	4b05      	ldr	r3, [pc, #20]	@ (800b5b8 <isr+0x1c>)
 800b5a2:	78db      	ldrb	r3, [r3, #3]
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	b2da      	uxtb	r2, r3
 800b5aa:	4b03      	ldr	r3, [pc, #12]	@ (800b5b8 <isr+0x1c>)
 800b5ac:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
 800b5ae:	bf00      	nop
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr
 800b5b8:	20000660 	.word	0x20000660

0800b5bc <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	71fb      	strb	r3, [r7, #7]

	gstrHifCxt.u8HifRXDone = 0;
 800b5c6:	4b14      	ldr	r3, [pc, #80]	@ (800b618 <hif_set_rx_done+0x5c>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
 800b5cc:	2001      	movs	r0, #1
 800b5ce:	f7ff fe41 	bl	800b254 <nm_bsp_interrupt_ctrl>
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
 800b5d2:	463b      	mov	r3, r7
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	f241 0070 	movw	r0, #4208	@ 0x1070
 800b5da:	f001 fce3 	bl	800cfa4 <nm_read_reg_with_ret>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800b5e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d10f      	bne.n	800b60a <hif_set_rx_done+0x4e>
	/* Set RX Done */
	reg |= NBIT1;
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	f043 0302 	orr.w	r3, r3, #2
 800b5f0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	f241 0070 	movw	r0, #4208	@ 0x1070
 800b5fa:	f001 fce1 	bl	800cfc0 <nm_write_reg>
 800b5fe:	4603      	mov	r3, r0
 800b600:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800b602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b606:	2b00      	cmp	r3, #0
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
 800b608:	e000      	b.n	800b60c <hif_set_rx_done+0x50>
	if(ret != M2M_SUCCESS)goto ERR1;
 800b60a:	bf00      	nop
	return ret;
 800b60c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	20000660 	.word	0x20000660

0800b61c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	4603      	mov	r3, r0
 800b624:	603a      	str	r2, [r7, #0]
 800b626:	71fb      	strb	r3, [r7, #7]
 800b628:	460b      	mov	r3, r1
 800b62a:	80bb      	strh	r3, [r7, #4]


}
 800b62c:	bf00      	nop
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800b63e:	2300      	movs	r3, #0
 800b640:	71fb      	strb	r3, [r7, #7]
	if(gstrHifCxt.u8HifRXDone)
 800b642:	4b14      	ldr	r3, [pc, #80]	@ (800b694 <hif_chip_wake+0x5c>)
 800b644:	789b      	ldrb	r3, [r3, #2]
 800b646:	b2db      	uxtb	r3, r3
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d002      	beq.n	800b652 <hif_chip_wake+0x1a>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
 800b64c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b650:	e01c      	b.n	800b68c <hif_chip_wake+0x54>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
 800b652:	4b10      	ldr	r3, [pc, #64]	@ (800b694 <hif_chip_wake+0x5c>)
 800b654:	785b      	ldrb	r3, [r3, #1]
 800b656:	b2db      	uxtb	r3, r3
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10c      	bne.n	800b676 <hif_chip_wake+0x3e>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 800b65c:	4b0d      	ldr	r3, [pc, #52]	@ (800b694 <hif_chip_wake+0x5c>)
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	b2db      	uxtb	r3, r3
 800b662:	2b00      	cmp	r3, #0
 800b664:	d007      	beq.n	800b676 <hif_chip_wake+0x3e>
		{
			ret = chip_wake();
 800b666:	f001 fa51 	bl	800cb0c <chip_wake>
 800b66a:	4603      	mov	r3, r0
 800b66c:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 800b66e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d107      	bne.n	800b686 <hif_chip_wake+0x4e>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
 800b676:	4b07      	ldr	r3, [pc, #28]	@ (800b694 <hif_chip_wake+0x5c>)
 800b678:	785b      	ldrb	r3, [r3, #1]
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	3301      	adds	r3, #1
 800b67e:	b2da      	uxtb	r2, r3
 800b680:	4b04      	ldr	r3, [pc, #16]	@ (800b694 <hif_chip_wake+0x5c>)
 800b682:	705a      	strb	r2, [r3, #1]
 800b684:	e000      	b.n	800b688 <hif_chip_wake+0x50>
			if(ret != M2M_SUCCESS)goto ERR1;
 800b686:	bf00      	nop
ERR1:
	return ret;
 800b688:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	20000660 	.word	0x20000660

0800b698 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
 800b698:	b480      	push	{r7}
 800b69a:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
 800b69c:	4b08      	ldr	r3, [pc, #32]	@ (800b6c0 <hif_chip_sleep_sc+0x28>)
 800b69e:	785b      	ldrb	r3, [r3, #1]
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d006      	beq.n	800b6b4 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
 800b6a6:	4b06      	ldr	r3, [pc, #24]	@ (800b6c0 <hif_chip_sleep_sc+0x28>)
 800b6a8:	785b      	ldrb	r3, [r3, #1]
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	4b03      	ldr	r3, [pc, #12]	@ (800b6c0 <hif_chip_sleep_sc+0x28>)
 800b6b2:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr
 800b6c0:	20000660 	.word	0x20000660

0800b6c4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	71fb      	strb	r3, [r7, #7]

	if(gstrHifCxt.u8ChipSleep >= 1)
 800b6ce:	4b12      	ldr	r3, [pc, #72]	@ (800b718 <hif_chip_sleep+0x54>)
 800b6d0:	785b      	ldrb	r3, [r3, #1]
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d006      	beq.n	800b6e6 <hif_chip_sleep+0x22>
	{
		gstrHifCxt.u8ChipSleep--;
 800b6d8:	4b0f      	ldr	r3, [pc, #60]	@ (800b718 <hif_chip_sleep+0x54>)
 800b6da:	785b      	ldrb	r3, [r3, #1]
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	b2da      	uxtb	r2, r3
 800b6e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b718 <hif_chip_sleep+0x54>)
 800b6e4:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
 800b6e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b718 <hif_chip_sleep+0x54>)
 800b6e8:	785b      	ldrb	r3, [r3, #1]
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d10c      	bne.n	800b70a <hif_chip_sleep+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 800b6f0:	4b09      	ldr	r3, [pc, #36]	@ (800b718 <hif_chip_sleep+0x54>)
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d007      	beq.n	800b70a <hif_chip_sleep+0x46>
		{
			ret = chip_sleep();
 800b6fa:	f001 f9a3 	bl	800ca44 <chip_sleep>
 800b6fe:	4603      	mov	r3, r0
 800b700:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 800b702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b706:	2b00      	cmp	r3, #0
 800b708:	e000      	b.n	800b70c <hif_chip_sleep+0x48>
		}
		else
		{
		}
	}
ERR1:
 800b70a:	bf00      	nop
	return ret;
 800b70c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	20000660 	.word	0x20000660

0800b71c <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
 800b724:	222c      	movs	r2, #44	@ 0x2c
 800b726:	2100      	movs	r1, #0
 800b728:	4807      	ldr	r0, [pc, #28]	@ (800b748 <hif_init+0x2c>)
 800b72a:	f7ff fea1 	bl	800b470 <m2m_memset>
	nm_bsp_register_isr(isr);
 800b72e:	4807      	ldr	r0, [pc, #28]	@ (800b74c <hif_init+0x30>)
 800b730:	f7ff fd5e 	bl	800b1f0 <nm_bsp_register_isr>
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
 800b734:	4906      	ldr	r1, [pc, #24]	@ (800b750 <hif_init+0x34>)
 800b736:	2003      	movs	r0, #3
 800b738:	f000 fa10 	bl	800bb5c <hif_register_cb>
	return M2M_SUCCESS;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	20000660 	.word	0x20000660
 800b74c:	0800b59d 	.word	0x0800b59d
 800b750:	0800b61d 	.word	0x0800b61d

0800b754 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b088      	sub	sp, #32
 800b758:	af00      	add	r7, sp, #0
 800b75a:	603a      	str	r2, [r7, #0]
 800b75c:	461a      	mov	r2, r3
 800b75e:	4603      	mov	r3, r0
 800b760:	71fb      	strb	r3, [r7, #7]
 800b762:	460b      	mov	r3, r1
 800b764:	71bb      	strb	r3, [r7, #6]
 800b766:	4613      	mov	r3, r2
 800b768:	80bb      	strh	r3, [r7, #4]
	sint8		ret = M2M_ERR_SEND;
 800b76a:	23ff      	movs	r3, #255	@ 0xff
 800b76c:	77fb      	strb	r3, [r7, #31]
	tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
 800b76e:	79bb      	ldrb	r3, [r7, #6]
 800b770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b774:	b2db      	uxtb	r3, r3
 800b776:	767b      	strb	r3, [r7, #25]
	strHif.u8Gid		= u8Gid;
 800b778:	79fb      	ldrb	r3, [r7, #7]
 800b77a:	763b      	strb	r3, [r7, #24]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 800b77c:	2308      	movs	r3, #8
 800b77e:	837b      	strh	r3, [r7, #26]
	if(pu8DataBuf != NULL)
 800b780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b782:	2b00      	cmp	r3, #0
 800b784:	d008      	beq.n	800b798 <hif_send+0x44>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
 800b786:	8b7a      	ldrh	r2, [r7, #26]
 800b788:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 800b78a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b78c:	440b      	add	r3, r1
 800b78e:	b29b      	uxth	r3, r3
 800b790:	4413      	add	r3, r2
 800b792:	b29b      	uxth	r3, r3
 800b794:	837b      	strh	r3, [r7, #26]
 800b796:	e004      	b.n	800b7a2 <hif_send+0x4e>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
 800b798:	8b7a      	ldrh	r2, [r7, #26]
 800b79a:	88bb      	ldrh	r3, [r7, #4]
 800b79c:	4413      	add	r3, r2
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	837b      	strh	r3, [r7, #26]
	}
    if (strHif.u16Length <= M2M_HIF_MAX_PACKET_SIZE)
 800b7a2:	8b7b      	ldrh	r3, [r7, #26]
 800b7a4:	f240 623c 	movw	r2, #1596	@ 0x63c
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	f200 8103 	bhi.w	800b9b4 <hif_send+0x260>
    {
	ret = hif_chip_wake();
 800b7ae:	f7ff ff43 	bl	800b638 <hif_chip_wake>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	77fb      	strb	r3, [r7, #31]
	if(ret == M2M_SUCCESS)
 800b7b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f040 80ed 	bne.w	800b99a <hif_send+0x246>
	{
		volatile uint32 reg, dma_addr = 0;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	81fb      	strh	r3, [r7, #14]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
 800b7cc:	79fa      	ldrb	r2, [r7, #7]
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
 800b7d4:	79bb      	ldrb	r3, [r7, #6]
 800b7d6:	021a      	lsls	r2, r3, #8
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
 800b7de:	8b7b      	ldrh	r3, [r7, #26]
 800b7e0:	041a      	lsls	r2, r3, #16
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b7f0:	f001 fbe6 	bl	800cfc0 <nm_write_reg>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 800b7f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	f040 80f3 	bne.w	800b9e8 <hif_send+0x294>

		reg = 0UL;
 800b802:	2300      	movs	r3, #0
 800b804:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	f043 0302 	orr.w	r3, r3, #2
 800b80c:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	4619      	mov	r1, r3
 800b812:	f241 0078 	movw	r0, #4216	@ 0x1078
 800b816:	f001 fbd3 	bl	800cfc0 <nm_write_reg>
 800b81a:	4603      	mov	r3, r0
 800b81c:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 800b81e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b822:	2b00      	cmp	r3, #0
 800b824:	f040 80e2 	bne.w	800b9ec <hif_send+0x298>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
 800b828:	2300      	movs	r3, #0
 800b82a:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
 800b82c:	2300      	movs	r3, #0
 800b82e:	81fb      	strh	r3, [r7, #14]
 800b830:	e03b      	b.n	800b8aa <hif_send+0x156>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
 800b832:	f107 0314 	add.w	r3, r7, #20
 800b836:	4619      	mov	r1, r3
 800b838:	f241 0078 	movw	r0, #4216	@ 0x1078
 800b83c:	f001 fbb2 	bl	800cfa4 <nm_read_reg_with_ret>
 800b840:	4603      	mov	r3, r0
 800b842:	77fb      	strb	r3, [r7, #31]
			if(ret != M2M_SUCCESS) break;
 800b844:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d134      	bne.n	800b8b6 <hif_send+0x162>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
 800b84c:	89fb      	ldrh	r3, [r7, #14]
 800b84e:	b29b      	uxth	r3, r3
 800b850:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b854:	d310      	bcc.n	800b878 <hif_send+0x124>
				if(cnt < 501) {
 800b856:	89fb      	ldrh	r3, [r7, #14]
 800b858:	b29b      	uxth	r3, r3
 800b85a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b85e:	d808      	bhi.n	800b872 <hif_send+0x11e>
					M2M_INFO("Slowing down...\n");
 800b860:	486a      	ldr	r0, [pc, #424]	@ (800ba0c <hif_send+0x2b8>)
 800b862:	f002 fff1 	bl	800e848 <iprintf>
 800b866:	486a      	ldr	r0, [pc, #424]	@ (800ba10 <hif_send+0x2bc>)
 800b868:	f003 f85e 	bl	800e928 <puts>
 800b86c:	200d      	movs	r0, #13
 800b86e:	f002 fffd 	bl	800e86c <putchar>
				}
				nm_bsp_sleep(1);
 800b872:	2001      	movs	r0, #1
 800b874:	f7ff fcb0 	bl	800b1d8 <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	f003 0302 	and.w	r3, r3, #2
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10e      	bne.n	800b8a0 <hif_send+0x14c>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
 800b882:	f107 0310 	add.w	r3, r7, #16
 800b886:	4619      	mov	r1, r3
 800b888:	4862      	ldr	r0, [pc, #392]	@ (800ba14 <hif_send+0x2c0>)
 800b88a:	f001 fb8b 	bl	800cfa4 <nm_read_reg_with_ret>
 800b88e:	4603      	mov	r3, r0
 800b890:	77fb      	strb	r3, [r7, #31]
				if(ret != M2M_SUCCESS) {
 800b892:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00f      	beq.n	800b8ba <hif_send+0x166>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	613b      	str	r3, [r7, #16]
					goto ERR1;
 800b89e:	e0ac      	b.n	800b9fa <hif_send+0x2a6>
		for(cnt = 0; cnt < 1000; cnt ++)
 800b8a0:	89fb      	ldrh	r3, [r7, #14]
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	81fb      	strh	r3, [r7, #14]
 800b8aa:	89fb      	ldrh	r3, [r7, #14]
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b8b2:	d3be      	bcc.n	800b832 <hif_send+0xde>
 800b8b4:	e002      	b.n	800b8bc <hif_send+0x168>
			if(ret != M2M_SUCCESS) break;
 800b8b6:	bf00      	nop
 800b8b8:	e000      	b.n	800b8bc <hif_send+0x168>
				}
				/*in case of success break */
				break;
 800b8ba:	bf00      	nop
			}
		}

		if (dma_addr != 0)
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d055      	beq.n	800b96e <hif_send+0x21a>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 800b8c6:	8b7b      	ldrh	r3, [r7, #26]
 800b8c8:	837b      	strh	r3, [r7, #26]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	f107 0118 	add.w	r1, r7, #24
 800b8d0:	2208      	movs	r2, #8
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f001 fbf0 	bl	800d0b8 <nm_write_block>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 800b8dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f040 8085 	bne.w	800b9f0 <hif_send+0x29c>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	3308      	adds	r3, #8
 800b8ea:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00f      	beq.n	800b912 <hif_send+0x1be>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	88ba      	ldrh	r2, [r7, #4]
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f001 fbdd 	bl	800d0b8 <nm_write_block>
 800b8fe:	4603      	mov	r3, r0
 800b900:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 800b902:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d174      	bne.n	800b9f4 <hif_send+0x2a0>
				u32CurrAddr += u16CtrlBufSize;
 800b90a:	88ba      	ldrh	r2, [r7, #4]
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	4413      	add	r3, r2
 800b910:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
 800b912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b914:	2b00      	cmp	r3, #0
 800b916:	d016      	beq.n	800b946 <hif_send+0x1f2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
 800b918:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800b91a:	88bb      	ldrh	r3, [r7, #4]
 800b91c:	1ad3      	subs	r3, r2, r3
 800b91e:	461a      	mov	r2, r3
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	4413      	add	r3, r2
 800b924:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800b92a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b92c:	4618      	mov	r0, r3
 800b92e:	f001 fbc3 	bl	800d0b8 <nm_write_block>
 800b932:	4603      	mov	r3, r0
 800b934:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 800b936:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d15c      	bne.n	800b9f8 <hif_send+0x2a4>
				u32CurrAddr += u16DataSize;
 800b93e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	4413      	add	r3, r2
 800b944:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	f043 0302 	orr.w	r3, r3, #2
 800b952:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	4619      	mov	r1, r3
 800b958:	f241 006c 	movw	r0, #4204	@ 0x106c
 800b95c:	f001 fb30 	bl	800cfc0 <nm_write_reg>
 800b960:	4603      	mov	r3, r0
 800b962:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 800b964:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d036      	beq.n	800b9da <hif_send+0x286>
 800b96c:	e045      	b.n	800b9fa <hif_send+0x2a6>
		}
		else
		{
			ret = hif_chip_sleep();
 800b96e:	f7ff fea9 	bl	800b6c4 <hif_chip_sleep>
 800b972:	4603      	mov	r3, r0
 800b974:	77fb      	strb	r3, [r7, #31]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
 800b976:	f240 128f 	movw	r2, #399	@ 0x18f
 800b97a:	4927      	ldr	r1, [pc, #156]	@ (800ba18 <hif_send+0x2c4>)
 800b97c:	4827      	ldr	r0, [pc, #156]	@ (800ba1c <hif_send+0x2c8>)
 800b97e:	f002 ff63 	bl	800e848 <iprintf>
 800b982:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b986:	4619      	mov	r1, r3
 800b988:	4825      	ldr	r0, [pc, #148]	@ (800ba20 <hif_send+0x2cc>)
 800b98a:	f002 ff5d 	bl	800e848 <iprintf>
 800b98e:	200d      	movs	r0, #13
 800b990:	f002 ff6c 	bl	800e86c <putchar>
			ret = M2M_ERR_MEM_ALLOC;
 800b994:	23fd      	movs	r3, #253	@ 0xfd
 800b996:	77fb      	strb	r3, [r7, #31]
			goto ERR2;
 800b998:	e031      	b.n	800b9fe <hif_send+0x2aa>
		}
	}
	else
	{
            M2M_ERR("(HIF)Failed to wakeup the chip\n");
 800b99a:	f44f 72cb 	mov.w	r2, #406	@ 0x196
 800b99e:	491e      	ldr	r1, [pc, #120]	@ (800ba18 <hif_send+0x2c4>)
 800b9a0:	4820      	ldr	r0, [pc, #128]	@ (800ba24 <hif_send+0x2d0>)
 800b9a2:	f002 ff51 	bl	800e848 <iprintf>
 800b9a6:	4820      	ldr	r0, [pc, #128]	@ (800ba28 <hif_send+0x2d4>)
 800b9a8:	f002 ffbe 	bl	800e928 <puts>
 800b9ac:	200d      	movs	r0, #13
 800b9ae:	f002 ff5d 	bl	800e86c <putchar>
            goto ERR2;
 800b9b2:	e024      	b.n	800b9fe <hif_send+0x2aa>
        }
	}
	else
	{
        M2M_ERR("HIF message length (%d) exceeds max length (%d)\n",strHif.u16Length, M2M_HIF_MAX_PACKET_SIZE);
 800b9b4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800b9b8:	4917      	ldr	r1, [pc, #92]	@ (800ba18 <hif_send+0x2c4>)
 800b9ba:	481a      	ldr	r0, [pc, #104]	@ (800ba24 <hif_send+0x2d0>)
 800b9bc:	f002 ff44 	bl	800e848 <iprintf>
 800b9c0:	8b7b      	ldrh	r3, [r7, #26]
 800b9c2:	f240 623c 	movw	r2, #1596	@ 0x63c
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	4818      	ldr	r0, [pc, #96]	@ (800ba2c <hif_send+0x2d8>)
 800b9ca:	f002 ff3d 	bl	800e848 <iprintf>
 800b9ce:	200d      	movs	r0, #13
 800b9d0:	f002 ff4c 	bl	800e86c <putchar>
        ret = M2M_ERR_SEND;
 800b9d4:	23ff      	movs	r3, #255	@ 0xff
 800b9d6:	77fb      	strb	r3, [r7, #31]
		goto ERR2;
 800b9d8:	e011      	b.n	800b9fe <hif_send+0x2aa>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
 800b9da:	f7ff fe73 	bl	800b6c4 <hif_chip_sleep>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	77fb      	strb	r3, [r7, #31]
	return ret;
 800b9e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b9e6:	e00c      	b.n	800ba02 <hif_send+0x2ae>
		if(M2M_SUCCESS != ret) goto ERR1;
 800b9e8:	bf00      	nop
 800b9ea:	e006      	b.n	800b9fa <hif_send+0x2a6>
		if(M2M_SUCCESS != ret) goto ERR1;
 800b9ec:	bf00      	nop
 800b9ee:	e004      	b.n	800b9fa <hif_send+0x2a6>
			if(M2M_SUCCESS != ret) goto ERR1;
 800b9f0:	bf00      	nop
 800b9f2:	e002      	b.n	800b9fa <hif_send+0x2a6>
				if(M2M_SUCCESS != ret) goto ERR1;
 800b9f4:	bf00      	nop
 800b9f6:	e000      	b.n	800b9fa <hif_send+0x2a6>
				if(M2M_SUCCESS != ret) goto ERR1;
 800b9f8:	bf00      	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
 800b9fa:	f7ff fe4d 	bl	800b698 <hif_chip_sleep_sc>
ERR2:
	/*logical error*/
	return ret;
 800b9fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3720      	adds	r7, #32
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	0800f7b0 	.word	0x0800f7b0
 800ba10:	0800f7bc 	.word	0x0800f7bc
 800ba14:	00150400 	.word	0x00150400
 800ba18:	08010748 	.word	0x08010748
 800ba1c:	0800f7cc 	.word	0x0800f7cc
 800ba20:	0800f7e0 	.word	0x0800f7e0
 800ba24:	0800f7fc 	.word	0x0800f7fc
 800ba28:	0800f810 	.word	0x0800f810
 800ba2c:	0800f830 	.word	0x0800f830

0800ba30 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	4611      	mov	r1, r2
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	460b      	mov	r3, r1
 800ba40:	80fb      	strh	r3, [r7, #6]
 800ba42:	4613      	mov	r3, r2
 800ba44:	717b      	strb	r3, [r7, #5]
	sint8 ret = M2M_SUCCESS;
 800ba46:	2300      	movs	r3, #0
 800ba48:	75fb      	strb	r3, [r7, #23]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d005      	beq.n	800ba5c <hif_receive+0x2c>
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d002      	beq.n	800ba5c <hif_receive+0x2c>
 800ba56:	88fb      	ldrh	r3, [r7, #6]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d116      	bne.n	800ba8a <hif_receive+0x5a>
	{
		if(isDone)
 800ba5c:	797b      	ldrb	r3, [r7, #5]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d004      	beq.n	800ba6c <hif_receive+0x3c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
 800ba62:	f7ff fdab 	bl	800b5bc <hif_set_rx_done>
 800ba66:	4603      	mov	r3, r0
 800ba68:	75fb      	strb	r3, [r7, #23]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
 800ba6a:	e065      	b.n	800bb38 <hif_receive+0x108>
			ret = M2M_ERR_FAIL;
 800ba6c:	23f4      	movs	r3, #244	@ 0xf4
 800ba6e:	75fb      	strb	r3, [r7, #23]
			M2M_ERR(" hif_receive: Invalid argument\n");
 800ba70:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800ba74:	4933      	ldr	r1, [pc, #204]	@ (800bb44 <hif_receive+0x114>)
 800ba76:	4834      	ldr	r0, [pc, #208]	@ (800bb48 <hif_receive+0x118>)
 800ba78:	f002 fee6 	bl	800e848 <iprintf>
 800ba7c:	4833      	ldr	r0, [pc, #204]	@ (800bb4c <hif_receive+0x11c>)
 800ba7e:	f002 ff53 	bl	800e928 <puts>
 800ba82:	200d      	movs	r0, #13
 800ba84:	f002 fef2 	bl	800e86c <putchar>
		goto ERR1;
 800ba88:	e056      	b.n	800bb38 <hif_receive+0x108>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
 800ba8a:	88fa      	ldrh	r2, [r7, #6]
 800ba8c:	4b30      	ldr	r3, [pc, #192]	@ (800bb50 <hif_receive+0x120>)
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d912      	bls.n	800baba <hif_receive+0x8a>
	{
		ret = M2M_ERR_FAIL;
 800ba94:	23f4      	movs	r3, #244	@ 0xf4
 800ba96:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Size is larger than the received buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
 800ba98:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800ba9c:	4929      	ldr	r1, [pc, #164]	@ (800bb44 <hif_receive+0x114>)
 800ba9e:	482a      	ldr	r0, [pc, #168]	@ (800bb48 <hif_receive+0x118>)
 800baa0:	f002 fed2 	bl	800e848 <iprintf>
 800baa4:	88fb      	ldrh	r3, [r7, #6]
 800baa6:	4a2a      	ldr	r2, [pc, #168]	@ (800bb50 <hif_receive+0x120>)
 800baa8:	68d2      	ldr	r2, [r2, #12]
 800baaa:	4619      	mov	r1, r3
 800baac:	4829      	ldr	r0, [pc, #164]	@ (800bb54 <hif_receive+0x124>)
 800baae:	f002 fecb 	bl	800e848 <iprintf>
 800bab2:	200d      	movs	r0, #13
 800bab4:	f002 feda 	bl	800e86c <putchar>
		goto ERR1;
 800bab8:	e03e      	b.n	800bb38 <hif_receive+0x108>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
 800baba:	4b25      	ldr	r3, [pc, #148]	@ (800bb50 <hif_receive+0x120>)
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d309      	bcc.n	800bad8 <hif_receive+0xa8>
 800bac4:	88fa      	ldrh	r2, [r7, #6]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	441a      	add	r2, r3
 800baca:	4b21      	ldr	r3, [pc, #132]	@ (800bb50 <hif_receive+0x120>)
 800bacc:	6899      	ldr	r1, [r3, #8]
 800bace:	4b20      	ldr	r3, [pc, #128]	@ (800bb50 <hif_receive+0x120>)
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	440b      	add	r3, r1
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d90e      	bls.n	800baf6 <hif_receive+0xc6>
	{
		ret = M2M_ERR_FAIL;
 800bad8:	23f4      	movs	r3, #244	@ 0xf4
 800bada:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Address beyond the received buffer address and length\n");
 800badc:	f240 229a 	movw	r2, #666	@ 0x29a
 800bae0:	4918      	ldr	r1, [pc, #96]	@ (800bb44 <hif_receive+0x114>)
 800bae2:	4819      	ldr	r0, [pc, #100]	@ (800bb48 <hif_receive+0x118>)
 800bae4:	f002 feb0 	bl	800e848 <iprintf>
 800bae8:	481b      	ldr	r0, [pc, #108]	@ (800bb58 <hif_receive+0x128>)
 800baea:	f002 ff1d 	bl	800e928 <puts>
 800baee:	200d      	movs	r0, #13
 800baf0:	f002 febc 	bl	800e86c <putchar>
		goto ERR1;
 800baf4:	e020      	b.n	800bb38 <hif_receive+0x108>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
 800baf6:	88fb      	ldrh	r3, [r7, #6]
 800baf8:	461a      	mov	r2, r3
 800bafa:	68b9      	ldr	r1, [r7, #8]
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f001 fa7f 	bl	800d000 <nm_read_block>
 800bb02:	4603      	mov	r3, r0
 800bb04:	75fb      	strb	r3, [r7, #23]
	if(ret != M2M_SUCCESS)goto ERR1;
 800bb06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d111      	bne.n	800bb32 <hif_receive+0x102>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
 800bb0e:	4b10      	ldr	r3, [pc, #64]	@ (800bb50 <hif_receive+0x120>)
 800bb10:	689a      	ldr	r2, [r3, #8]
 800bb12:	4b0f      	ldr	r3, [pc, #60]	@ (800bb50 <hif_receive+0x120>)
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	441a      	add	r2, r3
 800bb18:	88f9      	ldrh	r1, [r7, #6]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	440b      	add	r3, r1
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d002      	beq.n	800bb28 <hif_receive+0xf8>
 800bb22:	797b      	ldrb	r3, [r7, #5]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d006      	beq.n	800bb36 <hif_receive+0x106>
	{
		/* set RX done */
		ret = hif_set_rx_done();
 800bb28:	f7ff fd48 	bl	800b5bc <hif_set_rx_done>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	75fb      	strb	r3, [r7, #23]
 800bb30:	e002      	b.n	800bb38 <hif_receive+0x108>
	if(ret != M2M_SUCCESS)goto ERR1;
 800bb32:	bf00      	nop
 800bb34:	e000      	b.n	800bb38 <hif_receive+0x108>
	}

ERR1:
 800bb36:	bf00      	nop
	return ret;
 800bb38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3718      	adds	r7, #24
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	08010754 	.word	0x08010754
 800bb48:	0800f7fc 	.word	0x0800f7fc
 800bb4c:	0800fac4 	.word	0x0800fac4
 800bb50:	20000660 	.word	0x20000660
 800bb54:	0800fae4 	.word	0x0800fae4
 800bb58:	0800fb2c 	.word	0x0800fb2c

0800bb5c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	4603      	mov	r3, r0
 800bb64:	6039      	str	r1, [r7, #0]
 800bb66:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	73fb      	strb	r3, [r7, #15]
	switch(u8Grp)
 800bb6c:	79fb      	ldrb	r3, [r7, #7]
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	2b06      	cmp	r3, #6
 800bb72:	d82d      	bhi.n	800bbd0 <hif_register_cb+0x74>
 800bb74:	a201      	add	r2, pc, #4	@ (adr r2, 800bb7c <hif_register_cb+0x20>)
 800bb76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb7a:	bf00      	nop
 800bb7c:	0800bba1 	.word	0x0800bba1
 800bb80:	0800bb99 	.word	0x0800bb99
 800bb84:	0800bbb1 	.word	0x0800bbb1
 800bb88:	0800bba9 	.word	0x0800bba9
 800bb8c:	0800bbc9 	.word	0x0800bbc9
 800bb90:	0800bbb9 	.word	0x0800bbb9
 800bb94:	0800bbc1 	.word	0x0800bbc1
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
 800bb98:	4a19      	ldr	r2, [pc, #100]	@ (800bc00 <hif_register_cb+0xa4>)
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	6153      	str	r3, [r2, #20]
			break;
 800bb9e:	e028      	b.n	800bbf2 <hif_register_cb+0x96>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
 800bba0:	4a17      	ldr	r2, [pc, #92]	@ (800bc00 <hif_register_cb+0xa4>)
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	6113      	str	r3, [r2, #16]
			break;
 800bba6:	e024      	b.n	800bbf2 <hif_register_cb+0x96>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
 800bba8:	4a15      	ldr	r2, [pc, #84]	@ (800bc00 <hif_register_cb+0xa4>)
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	6193      	str	r3, [r2, #24]
			break;
 800bbae:	e020      	b.n	800bbf2 <hif_register_cb+0x96>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
 800bbb0:	4a13      	ldr	r2, [pc, #76]	@ (800bc00 <hif_register_cb+0xa4>)
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	6213      	str	r3, [r2, #32]
			break;
 800bbb6:	e01c      	b.n	800bbf2 <hif_register_cb+0x96>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
 800bbb8:	4a11      	ldr	r2, [pc, #68]	@ (800bc00 <hif_register_cb+0xa4>)
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	6253      	str	r3, [r2, #36]	@ 0x24
			break;
 800bbbe:	e018      	b.n	800bbf2 <hif_register_cb+0x96>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
 800bbc0:	4a0f      	ldr	r2, [pc, #60]	@ (800bc00 <hif_register_cb+0xa4>)
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	61d3      	str	r3, [r2, #28]
			break;
 800bbc6:	e014      	b.n	800bbf2 <hif_register_cb+0x96>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
 800bbc8:	4a0d      	ldr	r2, [pc, #52]	@ (800bc00 <hif_register_cb+0xa4>)
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	6293      	str	r3, [r2, #40]	@ 0x28
			break;
 800bbce:	e010      	b.n	800bbf2 <hif_register_cb+0x96>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
 800bbd0:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800bbd4:	490b      	ldr	r1, [pc, #44]	@ (800bc04 <hif_register_cb+0xa8>)
 800bbd6:	480c      	ldr	r0, [pc, #48]	@ (800bc08 <hif_register_cb+0xac>)
 800bbd8:	f002 fe36 	bl	800e848 <iprintf>
 800bbdc:	79fb      	ldrb	r3, [r7, #7]
 800bbde:	4619      	mov	r1, r3
 800bbe0:	480a      	ldr	r0, [pc, #40]	@ (800bc0c <hif_register_cb+0xb0>)
 800bbe2:	f002 fe31 	bl	800e848 <iprintf>
 800bbe6:	200d      	movs	r0, #13
 800bbe8:	f002 fe40 	bl	800e86c <putchar>
			ret = M2M_ERR_FAIL;
 800bbec:	23f4      	movs	r3, #244	@ 0xf4
 800bbee:	73fb      	strb	r3, [r7, #15]
			break;
 800bbf0:	bf00      	nop
	}
	return ret;
 800bbf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	20000660 	.word	0x20000660
 800bc04:	08010760 	.word	0x08010760
 800bc08:	0800f7fc 	.word	0x0800f7fc
 800bc0c:	0800fb70 	.word	0x0800fb70

0800bc10 <m2m_wifi_cb>:
                HIF address.
@param[in]  grp
                HIF group type.
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b0ae      	sub	sp, #184	@ 0xb8
 800bc14:	af02      	add	r7, sp, #8
 800bc16:	4603      	mov	r3, r0
 800bc18:	603a      	str	r2, [r7, #0]
 800bc1a:	71fb      	strb	r3, [r7, #7]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	80bb      	strh	r3, [r7, #4]
    uint8 rx_buf[8];
    if(u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 800bc20:	79fb      	ldrb	r3, [r7, #7]
 800bc22:	2b2c      	cmp	r3, #44	@ 0x2c
 800bc24:	d117      	bne.n	800bc56 <m2m_wifi_cb+0x46>
    {
        tstrM2mWifiStateChanged strState;
        if(hif_receive(u32Addr, (uint8 *) &strState, sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
 800bc26:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	2204      	movs	r2, #4
 800bc2e:	6838      	ldr	r0, [r7, #0]
 800bc30:	f7ff fefe 	bl	800ba30 <hif_receive>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f040 81cd 	bne.w	800bfd6 <m2m_wifi_cb+0x3c6>
        {
            if(gpfAppWifiCb)
 800bc3c:	4bae      	ldr	r3, [pc, #696]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	f000 81c8 	beq.w	800bfd6 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
 800bc46:	4bac      	ldr	r3, [pc, #688]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800bc4e:	4611      	mov	r1, r2
 800bc50:	202c      	movs	r0, #44	@ 0x2c
 800bc52:	4798      	blx	r3
#endif  /* ETH_MODE */
    else
    {
        M2M_ERR("REQ Not defined %d\n", u8OpCode);
    }
}
 800bc54:	e1bf      	b.n	800bfd6 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
 800bc56:	79fb      	ldrb	r3, [r7, #7]
 800bc58:	2b1b      	cmp	r3, #27
 800bc5a:	d117      	bne.n	800bc8c <m2m_wifi_cb+0x7c>
        if(hif_receive(u32Addr, (uint8 *) &strSysTime, sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
 800bc5c:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 800bc60:	2300      	movs	r3, #0
 800bc62:	2208      	movs	r2, #8
 800bc64:	6838      	ldr	r0, [r7, #0]
 800bc66:	f7ff fee3 	bl	800ba30 <hif_receive>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f040 81b2 	bne.w	800bfd6 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800bc72:	4ba1      	ldr	r3, [pc, #644]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f000 81ad 	beq.w	800bfd6 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
 800bc7c:	4b9e      	ldr	r3, [pc, #632]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800bc84:	4611      	mov	r1, r2
 800bc86:	201b      	movs	r0, #27
 800bc88:	4798      	blx	r3
}
 800bc8a:	e1a4      	b.n	800bfd6 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
 800bc8c:	79fb      	ldrb	r3, [r7, #7]
 800bc8e:	2b06      	cmp	r3, #6
 800bc90:	d117      	bne.n	800bcc2 <m2m_wifi_cb+0xb2>
        if(hif_receive(u32Addr, (uint8 *)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
 800bc92:	f107 0108 	add.w	r1, r7, #8
 800bc96:	2301      	movs	r3, #1
 800bc98:	2230      	movs	r2, #48	@ 0x30
 800bc9a:	6838      	ldr	r0, [r7, #0]
 800bc9c:	f7ff fec8 	bl	800ba30 <hif_receive>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f040 8197 	bne.w	800bfd6 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800bca8:	4b93      	ldr	r3, [pc, #588]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f000 8192 	beq.w	800bfd6 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
 800bcb2:	4b91      	ldr	r3, [pc, #580]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f107 0208 	add.w	r2, r7, #8
 800bcba:	4611      	mov	r1, r2
 800bcbc:	2006      	movs	r0, #6
 800bcbe:	4798      	blx	r3
}
 800bcc0:	e189      	b.n	800bfd6 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
 800bcc2:	79fb      	ldrb	r3, [r7, #7]
 800bcc4:	2b0e      	cmp	r3, #14
 800bcc6:	f000 8186 	beq.w	800bfd6 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
 800bcca:	79fb      	ldrb	r3, [r7, #7]
 800bccc:	2b32      	cmp	r3, #50	@ 0x32
 800bcce:	d117      	bne.n	800bd00 <m2m_wifi_cb+0xf0>
        if(hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
 800bcd0:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	2218      	movs	r2, #24
 800bcd8:	6838      	ldr	r0, [r7, #0]
 800bcda:	f7ff fea9 	bl	800ba30 <hif_receive>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f040 8178 	bne.w	800bfd6 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800bce6:	4b84      	ldr	r3, [pc, #528]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f000 8173 	beq.w	800bfd6 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
 800bcf0:	4b81      	ldr	r3, [pc, #516]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 800bcf8:	4611      	mov	r1, r2
 800bcfa:	2032      	movs	r0, #50	@ 0x32
 800bcfc:	4798      	blx	r3
}
 800bcfe:	e16a      	b.n	800bfd6 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_REQ_DHCP_FAILURE)
 800bd00:	79fb      	ldrb	r3, [r7, #7]
 800bd02:	2b3d      	cmp	r3, #61	@ 0x3d
 800bd04:	d114      	bne.n	800bd30 <m2m_wifi_cb+0x120>
        if(hif_receive(u32Addr, NULL, 0, 1) == M2M_SUCCESS)
 800bd06:	2301      	movs	r3, #1
 800bd08:	2200      	movs	r2, #0
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	6838      	ldr	r0, [r7, #0]
 800bd0e:	f7ff fe8f 	bl	800ba30 <hif_receive>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f040 815e 	bne.w	800bfd6 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800bd1a:	4b77      	ldr	r3, [pc, #476]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f000 8159 	beq.w	800bfd6 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_REQ_DHCP_FAILURE, NULL);
 800bd24:	4b74      	ldr	r3, [pc, #464]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2100      	movs	r1, #0
 800bd2a:	203d      	movs	r0, #61	@ 0x3d
 800bd2c:	4798      	blx	r3
}
 800bd2e:	e152      	b.n	800bfd6 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_REQ_WPS)
 800bd30:	79fb      	ldrb	r3, [r7, #7]
 800bd32:	2b2f      	cmp	r3, #47	@ 0x2f
 800bd34:	d11e      	bne.n	800bd74 <m2m_wifi_cb+0x164>
        m2m_memset((uint8 *)&strWps, 0, sizeof(tstrM2MWPSInfo));
 800bd36:	f107 0308 	add.w	r3, r7, #8
 800bd3a:	2264      	movs	r2, #100	@ 0x64
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7ff fb96 	bl	800b470 <m2m_memset>
        if(hif_receive(u32Addr, (uint8 *)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
 800bd44:	f107 0108 	add.w	r1, r7, #8
 800bd48:	2300      	movs	r3, #0
 800bd4a:	2264      	movs	r2, #100	@ 0x64
 800bd4c:	6838      	ldr	r0, [r7, #0]
 800bd4e:	f7ff fe6f 	bl	800ba30 <hif_receive>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f040 813e 	bne.w	800bfd6 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800bd5a:	4b67      	ldr	r3, [pc, #412]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	f000 8139 	beq.w	800bfd6 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
 800bd64:	4b64      	ldr	r3, [pc, #400]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f107 0208 	add.w	r2, r7, #8
 800bd6c:	4611      	mov	r1, r2
 800bd6e:	202f      	movs	r0, #47	@ 0x2f
 800bd70:	4798      	blx	r3
}
 800bd72:	e130      	b.n	800bfd6 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
 800bd74:	79fb      	ldrb	r3, [r7, #7]
 800bd76:	2b34      	cmp	r3, #52	@ 0x34
 800bd78:	d132      	bne.n	800bde0 <m2m_wifi_cb+0x1d0>
        if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
 800bd7a:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800bd7e:	2300      	movs	r3, #0
 800bd80:	2204      	movs	r2, #4
 800bd82:	6838      	ldr	r0, [r7, #0]
 800bd84:	f7ff fe54 	bl	800ba30 <hif_receive>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f040 8123 	bne.w	800bfd6 <m2m_wifi_cb+0x3c6>
            M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n",
 800bd90:	485a      	ldr	r0, [pc, #360]	@ (800befc <m2m_wifi_cb+0x2ec>)
 800bd92:	f002 fd59 	bl	800e848 <iprintf>
 800bd96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bda2:	0a1b      	lsrs	r3, r3, #8
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	461a      	mov	r2, r3
 800bda8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bdac:	0c1b      	lsrs	r3, r3, #16
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bdb6:	0e1b      	lsrs	r3, r3, #24
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	4850      	ldr	r0, [pc, #320]	@ (800bf00 <m2m_wifi_cb+0x2f0>)
 800bdc0:	f002 fd42 	bl	800e848 <iprintf>
 800bdc4:	200d      	movs	r0, #13
 800bdc6:	f002 fd51 	bl	800e86c <putchar>
            if(gpfAppWifiCb)
 800bdca:	4b4b      	ldr	r3, [pc, #300]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f000 8101 	beq.w	800bfd6 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
 800bdd4:	4b48      	ldr	r3, [pc, #288]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2100      	movs	r1, #0
 800bdda:	2034      	movs	r0, #52	@ 0x34
 800bddc:	4798      	blx	r3
}
 800bdde:	e0fa      	b.n	800bfd6 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
 800bde0:	79fb      	ldrb	r3, [r7, #7]
 800bde2:	2b11      	cmp	r3, #17
 800bde4:	d11e      	bne.n	800be24 <m2m_wifi_cb+0x214>
        gu8scanInProgress = 0;
 800bde6:	4b47      	ldr	r3, [pc, #284]	@ (800bf04 <m2m_wifi_cb+0x2f4>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	701a      	strb	r2, [r3, #0]
        if(hif_receive(u32Addr, (uint8 *)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 800bdec:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	2204      	movs	r2, #4
 800bdf4:	6838      	ldr	r0, [r7, #0]
 800bdf6:	f7ff fe1b 	bl	800ba30 <hif_receive>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f040 80ea 	bne.w	800bfd6 <m2m_wifi_cb+0x3c6>
            gu8ChNum = strState.u8NumofCh;
 800be02:	f897 207c 	ldrb.w	r2, [r7, #124]	@ 0x7c
 800be06:	4b40      	ldr	r3, [pc, #256]	@ (800bf08 <m2m_wifi_cb+0x2f8>)
 800be08:	701a      	strb	r2, [r3, #0]
            if(gpfAppWifiCb)
 800be0a:	4b3b      	ldr	r3, [pc, #236]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	f000 80e1 	beq.w	800bfd6 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
 800be14:	4b38      	ldr	r3, [pc, #224]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800be1c:	4611      	mov	r1, r2
 800be1e:	2011      	movs	r0, #17
 800be20:	4798      	blx	r3
}
 800be22:	e0d8      	b.n	800bfd6 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
 800be24:	79fb      	ldrb	r3, [r7, #7]
 800be26:	2b13      	cmp	r3, #19
 800be28:	d117      	bne.n	800be5a <m2m_wifi_cb+0x24a>
        if(hif_receive(u32Addr, (uint8 *)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
 800be2a:	f107 0108 	add.w	r1, r7, #8
 800be2e:	2300      	movs	r3, #0
 800be30:	222c      	movs	r2, #44	@ 0x2c
 800be32:	6838      	ldr	r0, [r7, #0]
 800be34:	f7ff fdfc 	bl	800ba30 <hif_receive>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f040 80cb 	bne.w	800bfd6 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800be40:	4b2d      	ldr	r3, [pc, #180]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	f000 80c6 	beq.w	800bfd6 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
 800be4a:	4b2b      	ldr	r3, [pc, #172]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f107 0208 	add.w	r2, r7, #8
 800be52:	4611      	mov	r1, r2
 800be54:	2013      	movs	r0, #19
 800be56:	4798      	blx	r3
}
 800be58:	e0bd      	b.n	800bfd6 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
 800be5a:	79fb      	ldrb	r3, [r7, #7]
 800be5c:	2b04      	cmp	r3, #4
 800be5e:	d117      	bne.n	800be90 <m2m_wifi_cb+0x280>
        if(hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800be60:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800be64:	2300      	movs	r3, #0
 800be66:	2204      	movs	r2, #4
 800be68:	6838      	ldr	r0, [r7, #0]
 800be6a:	f7ff fde1 	bl	800ba30 <hif_receive>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	f040 80b0 	bne.w	800bfd6 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800be76:	4b20      	ldr	r3, [pc, #128]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f000 80ab 	beq.w	800bfd6 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
 800be80:	4b1d      	ldr	r3, [pc, #116]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800be88:	4611      	mov	r1, r2
 800be8a:	2004      	movs	r0, #4
 800be8c:	4798      	blx	r3
}
 800be8e:	e0a2      	b.n	800bfd6 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
 800be90:	79fb      	ldrb	r3, [r7, #7]
 800be92:	2b65      	cmp	r3, #101	@ 0x65
 800be94:	d117      	bne.n	800bec6 <m2m_wifi_cb+0x2b6>
        if(hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800be96:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800be9a:	2300      	movs	r3, #0
 800be9c:	2204      	movs	r2, #4
 800be9e:	6838      	ldr	r0, [r7, #0]
 800bea0:	f7ff fdc6 	bl	800ba30 <hif_receive>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	f040 8095 	bne.w	800bfd6 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800beac:	4b12      	ldr	r3, [pc, #72]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 8090 	beq.w	800bfd6 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
 800beb6:	4b10      	ldr	r3, [pc, #64]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800bebe:	4611      	mov	r1, r2
 800bec0:	2065      	movs	r0, #101	@ 0x65
 800bec2:	4798      	blx	r3
}
 800bec4:	e087      	b.n	800bfd6 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
 800bec6:	79fb      	ldrb	r3, [r7, #7]
 800bec8:	2b09      	cmp	r3, #9
 800beca:	d11f      	bne.n	800bf0c <m2m_wifi_cb+0x2fc>
        if(hif_receive(u32Addr, (uint8 *)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
 800becc:	f107 0108 	add.w	r1, r7, #8
 800bed0:	2301      	movs	r3, #1
 800bed2:	2264      	movs	r2, #100	@ 0x64
 800bed4:	6838      	ldr	r0, [r7, #0]
 800bed6:	f7ff fdab 	bl	800ba30 <hif_receive>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d17a      	bne.n	800bfd6 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800bee0:	4b05      	ldr	r3, [pc, #20]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d076      	beq.n	800bfd6 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
 800bee8:	4b03      	ldr	r3, [pc, #12]	@ (800bef8 <m2m_wifi_cb+0x2e8>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f107 0208 	add.w	r2, r7, #8
 800bef0:	4611      	mov	r1, r2
 800bef2:	2009      	movs	r0, #9
 800bef4:	4798      	blx	r3
}
 800bef6:	e06e      	b.n	800bfd6 <m2m_wifi_cb+0x3c6>
 800bef8:	20000690 	.word	0x20000690
 800befc:	0800fb7c 	.word	0x0800fb7c
 800bf00:	0800fb88 	.word	0x0800fb88
 800bf04:	20000694 	.word	0x20000694
 800bf08:	2000068c 	.word	0x2000068c
    else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
 800bf0c:	79fb      	ldrb	r3, [r7, #7]
 800bf0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf10:	d115      	bne.n	800bf3e <m2m_wifi_cb+0x32e>
        if(hif_receive(u32Addr, (uint8 *)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
 800bf12:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800bf16:	2301      	movs	r3, #1
 800bf18:	2204      	movs	r2, #4
 800bf1a:	6838      	ldr	r0, [r7, #0]
 800bf1c:	f7ff fd88 	bl	800ba30 <hif_receive>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d157      	bne.n	800bfd6 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800bf26:	4b2e      	ldr	r3, [pc, #184]	@ (800bfe0 <m2m_wifi_cb+0x3d0>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d053      	beq.n	800bfd6 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
 800bf2e:	4b2c      	ldr	r3, [pc, #176]	@ (800bfe0 <m2m_wifi_cb+0x3d0>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800bf36:	4611      	mov	r1, r2
 800bf38:	202a      	movs	r0, #42	@ 0x2a
 800bf3a:	4798      	blx	r3
}
 800bf3c:	e04b      	b.n	800bfd6 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_REQRSP_DELETE_APID)
 800bf3e:	79fb      	ldrb	r3, [r7, #7]
 800bf40:	2b27      	cmp	r3, #39	@ 0x27
 800bf42:	d115      	bne.n	800bf70 <m2m_wifi_cb+0x360>
        if(hif_receive(u32Addr, (uint8 *)&strResp, sizeof(tstrM2MGenericResp), 0) == M2M_SUCCESS)
 800bf44:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800bf48:	2300      	movs	r3, #0
 800bf4a:	2204      	movs	r2, #4
 800bf4c:	6838      	ldr	r0, [r7, #0]
 800bf4e:	f7ff fd6f 	bl	800ba30 <hif_receive>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d13e      	bne.n	800bfd6 <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800bf58:	4b21      	ldr	r3, [pc, #132]	@ (800bfe0 <m2m_wifi_cb+0x3d0>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d03a      	beq.n	800bfd6 <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_REQRSP_DELETE_APID, &strResp);
 800bf60:	4b1f      	ldr	r3, [pc, #124]	@ (800bfe0 <m2m_wifi_cb+0x3d0>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800bf68:	4611      	mov	r1, r2
 800bf6a:	2027      	movs	r0, #39	@ 0x27
 800bf6c:	4798      	blx	r3
}
 800bf6e:	e032      	b.n	800bfd6 <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
 800bf70:	79fb      	ldrb	r3, [r7, #7]
 800bf72:	2b20      	cmp	r3, #32
 800bf74:	d121      	bne.n	800bfba <m2m_wifi_cb+0x3aa>
        if(hif_receive(u32Addr, (uint8 *)&strPrng, sizeof(tstrPrng), 0) == M2M_SUCCESS)
 800bf76:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	2208      	movs	r2, #8
 800bf7e:	6838      	ldr	r0, [r7, #0]
 800bf80:	f7ff fd56 	bl	800ba30 <hif_receive>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d125      	bne.n	800bfd6 <m2m_wifi_cb+0x3c6>
            if(hif_receive(u32Addr + sizeof(tstrPrng), strPrng.pu8RngBuff, strPrng.u16PrngSize, 1) == M2M_SUCCESS)
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	f103 0008 	add.w	r0, r3, #8
 800bf90:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bf92:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 800bf96:	2301      	movs	r3, #1
 800bf98:	f7ff fd4a 	bl	800ba30 <hif_receive>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d119      	bne.n	800bfd6 <m2m_wifi_cb+0x3c6>
                if(gpfAppWifiCb)
 800bfa2:	4b0f      	ldr	r3, [pc, #60]	@ (800bfe0 <m2m_wifi_cb+0x3d0>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d015      	beq.n	800bfd6 <m2m_wifi_cb+0x3c6>
                    gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG, &strPrng);
 800bfaa:	4b0d      	ldr	r3, [pc, #52]	@ (800bfe0 <m2m_wifi_cb+0x3d0>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800bfb2:	4611      	mov	r1, r2
 800bfb4:	2020      	movs	r0, #32
 800bfb6:	4798      	blx	r3
}
 800bfb8:	e00d      	b.n	800bfd6 <m2m_wifi_cb+0x3c6>
        M2M_ERR("REQ Not defined %d\n", u8OpCode);
 800bfba:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 800bfbe:	4909      	ldr	r1, [pc, #36]	@ (800bfe4 <m2m_wifi_cb+0x3d4>)
 800bfc0:	4809      	ldr	r0, [pc, #36]	@ (800bfe8 <m2m_wifi_cb+0x3d8>)
 800bfc2:	f002 fc41 	bl	800e848 <iprintf>
 800bfc6:	79fb      	ldrb	r3, [r7, #7]
 800bfc8:	4619      	mov	r1, r3
 800bfca:	4808      	ldr	r0, [pc, #32]	@ (800bfec <m2m_wifi_cb+0x3dc>)
 800bfcc:	f002 fc3c 	bl	800e848 <iprintf>
 800bfd0:	200d      	movs	r0, #13
 800bfd2:	f002 fc4b 	bl	800e86c <putchar>
}
 800bfd6:	bf00      	nop
 800bfd8:	37b0      	adds	r7, #176	@ 0xb0
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	20000690 	.word	0x20000690
 800bfe4:	08010770 	.word	0x08010770
 800bfe8:	0800fba8 	.word	0x0800fba8
 800bfec:	0800fbbc 	.word	0x0800fbbc

0800bff0 <m2m_wifi_init_hold>:
    s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8 *)pCRL, sizeof(tstrTlsCrlInfo), 0);
    return s8Ret;
}

sint8 m2m_wifi_init_hold(void)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
    sint8 ret = M2M_ERR_FAIL;
 800bff6:	23f4      	movs	r3, #244	@ 0xf4
 800bff8:	71fb      	strb	r3, [r7, #7]

    /* Apply device specific initialization. */
    ret = nm_drv_init_hold();
 800bffa:	f001 f947 	bl	800d28c <nm_drv_init_hold>
 800bffe:	4603      	mov	r3, r0
 800c000:	71fb      	strb	r3, [r7, #7]

    if(M2M_SUCCESS == ret)
 800c002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d102      	bne.n	800c010 <m2m_wifi_init_hold+0x20>
        gu8WifiState = WIFI_STATE_INIT;
 800c00a:	4b04      	ldr	r3, [pc, #16]	@ (800c01c <m2m_wifi_init_hold+0x2c>)
 800c00c:	2201      	movs	r2, #1
 800c00e:	701a      	strb	r2, [r3, #0]

    return ret;
 800c010:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3708      	adds	r7, #8
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	2000068d 	.word	0x2000068d

0800c020 <m2m_wifi_init_start>:

sint8 m2m_wifi_init_start(tstrWifiInitParam *pWifiInitParam)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b090      	sub	sp, #64	@ 0x40
 800c024:	af02      	add	r7, sp, #8
 800c026:	6078      	str	r0, [r7, #4]
    tstrM2mRev strtmp;
    sint8 ret = M2M_SUCCESS;
 800c028:	2300      	movs	r3, #0
 800c02a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
 800c02e:	2301      	movs	r3, #1
 800c030:	72fb      	strb	r3, [r7, #11]

    if(pWifiInitParam == NULL) {
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d103      	bne.n	800c040 <m2m_wifi_init_start+0x20>
        ret = M2M_ERR_FAIL;
 800c038:	23f4      	movs	r3, #244	@ 0xf4
 800c03a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        goto _EXIT0;
 800c03e:	e090      	b.n	800c162 <m2m_wifi_init_start+0x142>
    }

    gpfAppWifiCb = pWifiInitParam->pfAppWifiCb;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4a4a      	ldr	r2, [pc, #296]	@ (800c170 <m2m_wifi_init_start+0x150>)
 800c046:	6013      	str	r3, [r2, #0]
    gu16ethRcvBufSize = pWifiInitParam->strEthInitParam.u16ethRcvBufSize;
	if (pWifiInitParam->strEthInitParam.u8EthernetEnable)		
		u8WifiMode = M2M_WIFI_MODE_ETHERNET;
#endif /* ETH_MODE */

    gu8scanInProgress = 0;
 800c048:	4b4a      	ldr	r3, [pc, #296]	@ (800c174 <m2m_wifi_init_start+0x154>)
 800c04a:	2200      	movs	r2, #0
 800c04c:	701a      	strb	r2, [r3, #0]
    /* Apply device specific initialization. */
    ret = nm_drv_init_start(&u8WifiMode);
 800c04e:	f107 030b 	add.w	r3, r7, #11
 800c052:	4618      	mov	r0, r3
 800c054:	f001 f958 	bl	800d308 <nm_drv_init_start>
 800c058:	4603      	mov	r3, r0
 800c05a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if(ret != M2M_SUCCESS) goto _EXIT0;
 800c05e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800c062:	2b00      	cmp	r3, #0
 800c064:	d17a      	bne.n	800c15c <m2m_wifi_init_start+0x13c>

    gu8WifiState = WIFI_STATE_START;
 800c066:	4b44      	ldr	r3, [pc, #272]	@ (800c178 <m2m_wifi_init_start+0x158>)
 800c068:	2202      	movs	r2, #2
 800c06a:	701a      	strb	r2, [r3, #0]

    /* Initialize host interface module */
    ret = hif_init(NULL);
 800c06c:	2000      	movs	r0, #0
 800c06e:	f7ff fb55 	bl	800b71c <hif_init>
 800c072:	4603      	mov	r3, r0
 800c074:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if(ret != M2M_SUCCESS) goto _EXIT1;
 800c078:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d165      	bne.n	800c14c <m2m_wifi_init_start+0x12c>

    hif_register_cb(M2M_REQ_GROUP_WIFI, m2m_wifi_cb);
 800c080:	493e      	ldr	r1, [pc, #248]	@ (800c17c <m2m_wifi_init_start+0x15c>)
 800c082:	2001      	movs	r0, #1
 800c084:	f7ff fd6a 	bl	800bb5c <hif_register_cb>

    ret = nm_get_firmware_full_info(&strtmp);
 800c088:	f107 030c 	add.w	r3, r7, #12
 800c08c:	4618      	mov	r0, r3
 800c08e:	f001 f85d 	bl	800d14c <nm_get_firmware_full_info>
 800c092:	4603      	mov	r3, r0
 800c094:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
 800c098:	4839      	ldr	r0, [pc, #228]	@ (800c180 <m2m_wifi_init_start+0x160>)
 800c09a:	f002 fbd5 	bl	800e848 <iprintf>
 800c09e:	7c3b      	ldrb	r3, [r7, #16]
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	7c7b      	ldrb	r3, [r7, #17]
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	7cbb      	ldrb	r3, [r7, #18]
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	4834      	ldr	r0, [pc, #208]	@ (800c184 <m2m_wifi_init_start+0x164>)
 800c0b2:	f002 fbc9 	bl	800e848 <iprintf>
 800c0b6:	200d      	movs	r0, #13
 800c0b8:	f002 fbd8 	bl	800e86c <putchar>
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
 800c0bc:	4830      	ldr	r0, [pc, #192]	@ (800c180 <m2m_wifi_init_start+0x160>)
 800c0be:	f002 fbc3 	bl	800e848 <iprintf>
 800c0c2:	f107 030c 	add.w	r3, r7, #12
 800c0c6:	f103 0216 	add.w	r2, r3, #22
 800c0ca:	f107 030c 	add.w	r3, r7, #12
 800c0ce:	330a      	adds	r3, #10
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	482d      	ldr	r0, [pc, #180]	@ (800c188 <m2m_wifi_init_start+0x168>)
 800c0d4:	f002 fbb8 	bl	800e848 <iprintf>
 800c0d8:	200d      	movs	r0, #13
 800c0da:	f002 fbc7 	bl	800e86c <putchar>
	M2M_INFO("Firmware Min driver ver : %u.%u.%u \n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
 800c0de:	4828      	ldr	r0, [pc, #160]	@ (800c180 <m2m_wifi_init_start+0x160>)
 800c0e0:	f002 fbb2 	bl	800e848 <iprintf>
 800c0e4:	7cfb      	ldrb	r3, [r7, #19]
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	7d3b      	ldrb	r3, [r7, #20]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	7d7b      	ldrb	r3, [r7, #21]
 800c0ee:	4827      	ldr	r0, [pc, #156]	@ (800c18c <m2m_wifi_init_start+0x16c>)
 800c0f0:	f002 fbaa 	bl	800e848 <iprintf>
 800c0f4:	200d      	movs	r0, #13
 800c0f6:	f002 fbb9 	bl	800e86c <putchar>
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 800c0fa:	4821      	ldr	r0, [pc, #132]	@ (800c180 <m2m_wifi_init_start+0x160>)
 800c0fc:	f002 fba4 	bl	800e848 <iprintf>
 800c100:	2307      	movs	r3, #7
 800c102:	2207      	movs	r2, #7
 800c104:	2113      	movs	r1, #19
 800c106:	4822      	ldr	r0, [pc, #136]	@ (800c190 <m2m_wifi_init_start+0x170>)
 800c108:	f002 fb9e 	bl	800e848 <iprintf>
 800c10c:	200d      	movs	r0, #13
 800c10e:	f002 fbad 	bl	800e86c <putchar>
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
 800c112:	481b      	ldr	r0, [pc, #108]	@ (800c180 <m2m_wifi_init_start+0x160>)
 800c114:	f002 fb98 	bl	800e848 <iprintf>
 800c118:	4a1e      	ldr	r2, [pc, #120]	@ (800c194 <m2m_wifi_init_start+0x174>)
 800c11a:	491f      	ldr	r1, [pc, #124]	@ (800c198 <m2m_wifi_init_start+0x178>)
 800c11c:	481f      	ldr	r0, [pc, #124]	@ (800c19c <m2m_wifi_init_start+0x17c>)
 800c11e:	f002 fb93 	bl	800e848 <iprintf>
 800c122:	200d      	movs	r0, #13
 800c124:	f002 fba2 	bl	800e86c <putchar>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
 800c128:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800c12c:	f113 0f0d 	cmn.w	r3, #13
 800c130:	d116      	bne.n	800c160 <m2m_wifi_init_start+0x140>
	{
		M2M_ERR("Mismatch Firmware Version\n");
 800c132:	f240 12db 	movw	r2, #475	@ 0x1db
 800c136:	491a      	ldr	r1, [pc, #104]	@ (800c1a0 <m2m_wifi_init_start+0x180>)
 800c138:	481a      	ldr	r0, [pc, #104]	@ (800c1a4 <m2m_wifi_init_start+0x184>)
 800c13a:	f002 fb85 	bl	800e848 <iprintf>
 800c13e:	481a      	ldr	r0, [pc, #104]	@ (800c1a8 <m2m_wifi_init_start+0x188>)
 800c140:	f002 fbf2 	bl	800e928 <puts>
 800c144:	200d      	movs	r0, #13
 800c146:	f002 fb91 	bl	800e86c <putchar>
	}

    goto _EXIT0;
 800c14a:	e009      	b.n	800c160 <m2m_wifi_init_start+0x140>
    if(ret != M2M_SUCCESS) goto _EXIT1;
 800c14c:	bf00      	nop

_EXIT1:
    gu8WifiState = WIFI_STATE_DEINIT;
 800c14e:	4b0a      	ldr	r3, [pc, #40]	@ (800c178 <m2m_wifi_init_start+0x158>)
 800c150:	2200      	movs	r2, #0
 800c152:	701a      	strb	r2, [r3, #0]
    nm_drv_deinit(NULL);
 800c154:	2000      	movs	r0, #0
 800c156:	f001 f935 	bl	800d3c4 <nm_drv_deinit>
 800c15a:	e002      	b.n	800c162 <m2m_wifi_init_start+0x142>
    if(ret != M2M_SUCCESS) goto _EXIT0;
 800c15c:	bf00      	nop
 800c15e:	e000      	b.n	800c162 <m2m_wifi_init_start+0x142>
    goto _EXIT0;
 800c160:	bf00      	nop
_EXIT0:

    return ret;
 800c162:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800c166:	4618      	mov	r0, r3
 800c168:	3738      	adds	r7, #56	@ 0x38
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	20000690 	.word	0x20000690
 800c174:	20000694 	.word	0x20000694
 800c178:	2000068d 	.word	0x2000068d
 800c17c:	0800bc11 	.word	0x0800bc11
 800c180:	0800fb7c 	.word	0x0800fb7c
 800c184:	0800fcd0 	.word	0x0800fcd0
 800c188:	0800fcf8 	.word	0x0800fcf8
 800c18c:	0800fd14 	.word	0x0800fd14
 800c190:	0800fd3c 	.word	0x0800fd3c
 800c194:	0800fd54 	.word	0x0800fd54
 800c198:	0800fd60 	.word	0x0800fd60
 800c19c:	0800fd6c 	.word	0x0800fd6c
 800c1a0:	0801077c 	.word	0x0801077c
 800c1a4:	0800fba8 	.word	0x0800fba8
 800c1a8:	0800fd84 	.word	0x0800fd84

0800c1ac <m2m_wifi_init>:

sint8 m2m_wifi_init(tstrWifiInitParam *pWifiInitParam)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	73fb      	strb	r3, [r7, #15]

    ret = m2m_wifi_init_hold();
 800c1b8:	f7ff ff1a 	bl	800bff0 <m2m_wifi_init_hold>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 800c1c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d104      	bne.n	800c1d2 <m2m_wifi_init+0x26>
    {
        ret = m2m_wifi_init_start(pWifiInitParam);
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f7ff ff29 	bl	800c020 <m2m_wifi_init_start>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 800c1d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <m2m_wifi_connect_prepare_msg>:
    tenuM2mSecType      enuAuthType,
    uint16              u16AuthSize,
    tstrNetworkId       *pstrNetworkId,
    tstrM2mWifiConnHdr  *pstrWifiConn
)
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b086      	sub	sp, #24
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	603b      	str	r3, [r7, #0]
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	71fb      	strb	r3, [r7, #7]
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	71bb      	strb	r3, [r7, #6]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	80bb      	strh	r3, [r7, #4]
    sint8   ret = M2M_ERR_FAIL;
 800c1f2:	23f4      	movs	r3, #244	@ 0xf4
 800c1f4:	75fb      	strb	r3, [r7, #23]
    uint16  u16CredSize = sizeof(tstrM2mConnCredCmn) + u16AuthSize;
 800c1f6:	88bb      	ldrh	r3, [r7, #4]
 800c1f8:	332c      	adds	r3, #44	@ 0x2c
 800c1fa:	82bb      	strh	r3, [r7, #20]

    /* Check application params. */
    if(
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d074      	beq.n	800c2ec <m2m_wifi_connect_prepare_msg+0x10e>
        (pstrNetworkId == NULL)
        || (pstrNetworkId->pu8Ssid == NULL)
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d070      	beq.n	800c2ec <m2m_wifi_connect_prepare_msg+0x10e>
        || (pstrNetworkId->u8SsidLen >= M2M_MAX_SSID_LEN)
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	7a1b      	ldrb	r3, [r3, #8]
 800c20e:	2b20      	cmp	r3, #32
 800c210:	d86c      	bhi.n	800c2ec <m2m_wifi_connect_prepare_msg+0x10e>
    )
        goto INVALID_ARG;

    if(pstrWifiConn != NULL)
 800c212:	6a3b      	ldr	r3, [r7, #32]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d066      	beq.n	800c2e6 <m2m_wifi_connect_prepare_msg+0x108>
    {
        tstrM2mConnCredHdr  *pstrHdr = &pstrWifiConn->strConnCredHdr;
 800c218:	6a3b      	ldr	r3, [r7, #32]
 800c21a:	613b      	str	r3, [r7, #16]
        tstrM2mConnCredCmn  *pstrCmn = &pstrWifiConn->strConnCredCmn;
 800c21c:	6a3b      	ldr	r3, [r7, #32]
 800c21e:	3304      	adds	r3, #4
 800c220:	60fb      	str	r3, [r7, #12]

        m2m_memset((uint8 *)pstrWifiConn, 0, sizeof(tstrM2mWifiConnHdr));
 800c222:	2230      	movs	r2, #48	@ 0x30
 800c224:	2100      	movs	r1, #0
 800c226:	6a38      	ldr	r0, [r7, #32]
 800c228:	f7ff f922 	bl	800b470 <m2m_memset>

        pstrHdr->u16CredSize = u16CredSize;
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	8aba      	ldrh	r2, [r7, #20]
 800c230:	801a      	strh	r2, [r3, #0]
        switch(enuCredStoreOption)
 800c232:	79fb      	ldrb	r3, [r7, #7]
 800c234:	2b02      	cmp	r3, #2
 800c236:	d006      	beq.n	800c246 <m2m_wifi_connect_prepare_msg+0x68>
 800c238:	2b02      	cmp	r3, #2
 800c23a:	dc59      	bgt.n	800c2f0 <m2m_wifi_connect_prepare_msg+0x112>
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d010      	beq.n	800c262 <m2m_wifi_connect_prepare_msg+0x84>
 800c240:	2b01      	cmp	r3, #1
 800c242:	d007      	beq.n	800c254 <m2m_wifi_connect_prepare_msg+0x76>
            pstrHdr->u8CredStoreFlags |= M2M_CRED_STORE_FLAG;
        // intentional fall through...
        case WIFI_CRED_DONTSAVE:
            break;
        default:
            goto INVALID_ARG;
 800c244:	e054      	b.n	800c2f0 <m2m_wifi_connect_prepare_msg+0x112>
            pstrHdr->u8CredStoreFlags |= M2M_CRED_ENCRYPT_FLAG;
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	789b      	ldrb	r3, [r3, #2]
 800c24a:	f043 0302 	orr.w	r3, r3, #2
 800c24e:	b2da      	uxtb	r2, r3
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	709a      	strb	r2, [r3, #2]
            pstrHdr->u8CredStoreFlags |= M2M_CRED_STORE_FLAG;
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	789b      	ldrb	r3, [r3, #2]
 800c258:	f043 0301 	orr.w	r3, r3, #1
 800c25c:	b2da      	uxtb	r2, r3
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	709a      	strb	r2, [r3, #2]
            break;
 800c262:	bf00      	nop
        }

        if(pstrNetworkId->enuChannel == M2M_WIFI_CH_ALL)
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	7a5b      	ldrb	r3, [r3, #9]
 800c268:	2bff      	cmp	r3, #255	@ 0xff
 800c26a:	d104      	bne.n	800c276 <m2m_wifi_connect_prepare_msg+0x98>
            pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel);
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	7a5a      	ldrb	r2, [r3, #9]
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	70da      	strb	r2, [r3, #3]
 800c274:	e00d      	b.n	800c292 <m2m_wifi_connect_prepare_msg+0xb4>
        else if((pstrNetworkId->enuChannel <= M2M_WIFI_CH_14) && (pstrNetworkId->enuChannel >= M2M_WIFI_CH_1))
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	7a5b      	ldrb	r3, [r3, #9]
 800c27a:	2b0e      	cmp	r3, #14
 800c27c:	d83a      	bhi.n	800c2f4 <m2m_wifi_connect_prepare_msg+0x116>
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	7a5b      	ldrb	r3, [r3, #9]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d036      	beq.n	800c2f4 <m2m_wifi_connect_prepare_msg+0x116>
            pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel) - 1;
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	7a5b      	ldrb	r3, [r3, #9]
 800c28a:	3b01      	subs	r3, #1
 800c28c:	b2da      	uxtb	r2, r3
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	70da      	strb	r2, [r3, #3]
        else
            goto INVALID_ARG;

        if((enuAuthType == M2M_WIFI_SEC_INVALID) || (enuAuthType >= M2M_WIFI_NUM_AUTH_TYPES))
 800c292:	79bb      	ldrb	r3, [r7, #6]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d02f      	beq.n	800c2f8 <m2m_wifi_connect_prepare_msg+0x11a>
 800c298:	79bb      	ldrb	r3, [r7, #6]
 800c29a:	2b04      	cmp	r3, #4
 800c29c:	d82c      	bhi.n	800c2f8 <m2m_wifi_connect_prepare_msg+0x11a>
            goto INVALID_ARG;
        pstrCmn->u8AuthType = (uint8)enuAuthType;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	79ba      	ldrb	r2, [r7, #6]
 800c2a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

        pstrCmn->u8SsidLen = pstrNetworkId->u8SsidLen;
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	7a1a      	ldrb	r2, [r3, #8]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	701a      	strb	r2, [r3, #0]
        m2m_memcpy(pstrCmn->au8Ssid, pstrNetworkId->pu8Ssid, pstrNetworkId->u8SsidLen);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	1c58      	adds	r0, r3, #1
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	6859      	ldr	r1, [r3, #4]
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	7a1b      	ldrb	r3, [r3, #8]
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	f7ff f8b8 	bl	800b430 <m2m_memcpy>
        if(pstrNetworkId->pu8Bssid != NULL)
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00c      	beq.n	800c2e2 <m2m_wifi_connect_prepare_msg+0x104>
        {
            pstrCmn->u8Options = M2M_WIFI_CONN_BSSID_FLAG;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            m2m_memcpy(pstrCmn->au8Bssid, pstrNetworkId->pu8Bssid, M2M_MAC_ADDRES_LEN);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f103 0022 	add.w	r0, r3, #34	@ 0x22
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2206      	movs	r2, #6
 800c2dc:	4619      	mov	r1, r3
 800c2de:	f7ff f8a7 	bl	800b430 <m2m_memcpy>
        }
        /* Everything is ok, set return value. */
        ret = M2M_SUCCESS;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 800c2e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2ea:	e008      	b.n	800c2fe <m2m_wifi_connect_prepare_msg+0x120>
        goto INVALID_ARG;
 800c2ec:	bf00      	nop
 800c2ee:	e004      	b.n	800c2fa <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 800c2f0:	bf00      	nop
 800c2f2:	e002      	b.n	800c2fa <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 800c2f4:	bf00      	nop
 800c2f6:	e000      	b.n	800c2fa <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 800c2f8:	bf00      	nop
INVALID_ARG:
    return M2M_ERR_INVALID_ARG;
 800c2fa:	f06f 030e 	mvn.w	r3, #14
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3718      	adds	r7, #24
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <m2m_wifi_connect_open>:
/*************************************************************************************************/
sint8 m2m_wifi_connect_open(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId      *pstrNetworkId
)
{
 800c306:	b580      	push	{r7, lr}
 800c308:	b094      	sub	sp, #80	@ 0x50
 800c30a:	af04      	add	r7, sp, #16
 800c30c:	4603      	mov	r3, r0
 800c30e:	6039      	str	r1, [r7, #0]
 800c310:	71fb      	strb	r3, [r7, #7]
    sint8               ret = M2M_ERR_INVALID_ARG;
 800c312:	23f1      	movs	r3, #241	@ 0xf1
 800c314:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    tstrM2mWifiConnHdr  strConnHdr;

    ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption, M2M_WIFI_SEC_OPEN, 0, pstrNetworkId, &strConnHdr);
 800c318:	79f8      	ldrb	r0, [r7, #7]
 800c31a:	f107 030c 	add.w	r3, r7, #12
 800c31e:	9300      	str	r3, [sp, #0]
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	2200      	movs	r2, #0
 800c324:	2101      	movs	r1, #1
 800c326:	f7ff ff5a 	bl	800c1de <m2m_wifi_connect_prepare_msg>
 800c32a:	4603      	mov	r3, r0
 800c32c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if(ret == M2M_SUCCESS)
 800c330:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10f      	bne.n	800c358 <m2m_wifi_connect_open+0x52>
    {
        ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN,
 800c338:	f107 020c 	add.w	r2, r7, #12
 800c33c:	2300      	movs	r3, #0
 800c33e:	9302      	str	r3, [sp, #8]
 800c340:	2300      	movs	r3, #0
 800c342:	9301      	str	r3, [sp, #4]
 800c344:	2300      	movs	r3, #0
 800c346:	9300      	str	r3, [sp, #0]
 800c348:	2330      	movs	r3, #48	@ 0x30
 800c34a:	213b      	movs	r1, #59	@ 0x3b
 800c34c:	2001      	movs	r0, #1
 800c34e:	f7ff fa01 	bl	800b754 <hif_send>
 800c352:	4603      	mov	r3, r0
 800c354:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                       (uint8 *)&strConnHdr, sizeof(strConnHdr),
                       NULL, 0, 0);
    }
    return ret;
 800c358:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3740      	adds	r7, #64	@ 0x40
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <m2m_wifi_connect_wep>:
sint8 m2m_wifi_connect_wep(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuthWep         *pstrAuthWep
)
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	4603      	mov	r3, r0
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
 800c370:	73fb      	strb	r3, [r7, #15]
    /* As of 19.7.5 the WEP protocol is deprecated */
    return M2M_ERR_INVALID;
 800c372:	f06f 030f 	mvn.w	r3, #15
}
 800c376:	4618      	mov	r0, r3
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr

0800c382 <m2m_wifi_connect_psk>:
sint8 m2m_wifi_connect_psk(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuthPsk         *pstrAuthPsk
)
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b096      	sub	sp, #88	@ 0x58
 800c386:	af04      	add	r7, sp, #16
 800c388:	4603      	mov	r3, r0
 800c38a:	60b9      	str	r1, [r7, #8]
 800c38c:	607a      	str	r2, [r7, #4]
 800c38e:	73fb      	strb	r3, [r7, #15]
    sint8   ret = M2M_ERR_INVALID_ARG;
 800c390:	23f1      	movs	r3, #241	@ 0xf1
 800c392:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if(pstrAuthPsk != NULL)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d07e      	beq.n	800c49a <m2m_wifi_connect_psk+0x118>
    {
        tstrM2mWifiConnHdr  strConnHdr;

        ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption,
 800c39c:	7bf8      	ldrb	r0, [r7, #15]
 800c39e:	f107 0310 	add.w	r3, r7, #16
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	226c      	movs	r2, #108	@ 0x6c
 800c3a8:	2102      	movs	r1, #2
 800c3aa:	f7ff ff18 	bl	800c1de <m2m_wifi_connect_prepare_msg>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                           M2M_WIFI_SEC_WPA_PSK,
                                           sizeof(tstrM2mWifiPsk),
                                           pstrNetworkId,
                                           &strConnHdr);

        if(ret == M2M_SUCCESS)
 800c3b4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d16e      	bne.n	800c49a <m2m_wifi_connect_psk+0x118>
        {
            tstrM2mWifiPsk  *pstrPsk = (tstrM2mWifiPsk *)malloc(sizeof(tstrM2mWifiPsk));
 800c3bc:	206c      	movs	r0, #108	@ 0x6c
 800c3be:	f002 f8c3 	bl	800e548 <malloc>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	643b      	str	r3, [r7, #64]	@ 0x40
            if(pstrPsk != NULL)
 800c3c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d063      	beq.n	800c494 <m2m_wifi_connect_psk+0x112>
            {
                m2m_memset((uint8 *)pstrPsk, 0, sizeof(tstrM2mWifiPsk));
 800c3cc:	226c      	movs	r2, #108	@ 0x6c
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800c3d2:	f7ff f84d 	bl	800b470 <m2m_memset>
                if(pstrAuthPsk->pu8Psk != NULL)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d025      	beq.n	800c42a <m2m_wifi_connect_psk+0xa8>
                {
                    if(pstrAuthPsk->pu8Passphrase != NULL)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d003      	beq.n	800c3ee <m2m_wifi_connect_psk+0x6c>
                        ret = M2M_ERR_INVALID_ARG;
 800c3e6:	23f1      	movs	r3, #241	@ 0xf1
 800c3e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c3ec:	e03a      	b.n	800c464 <m2m_wifi_connect_psk+0xe2>
                    else
                    {
                        pstrPsk->u8PassphraseLen = M2M_MAX_PSK_LEN-1;
 800c3ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3f0:	2240      	movs	r2, #64	@ 0x40
 800c3f2:	701a      	strb	r2, [r3, #0]
                        /* Use hexstr_2_bytes to verify pu8Psk input. */
                        if(M2M_SUCCESS != hexstr_2_bytes(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen/2))
 800c3f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3f6:	1c58      	adds	r0, r3, #1
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6819      	ldr	r1, [r3, #0]
 800c3fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	085b      	lsrs	r3, r3, #1
 800c402:	b2db      	uxtb	r3, r3
 800c404:	461a      	mov	r2, r3
 800c406:	f7ff f88a 	bl	800b51e <hexstr_2_bytes>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d002      	beq.n	800c416 <m2m_wifi_connect_psk+0x94>
                            ret = M2M_ERR_INVALID_ARG;
 800c410:	23f1      	movs	r3, #241	@ 0xf1
 800c412:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                        m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen);
 800c416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c418:	1c58      	adds	r0, r3, #1
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6819      	ldr	r1, [r3, #0]
 800c41e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	461a      	mov	r2, r3
 800c424:	f7ff f804 	bl	800b430 <m2m_memcpy>
 800c428:	e01c      	b.n	800c464 <m2m_wifi_connect_psk+0xe2>
                    }
                }
                else if(pstrAuthPsk->pu8Passphrase != NULL)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d015      	beq.n	800c45e <m2m_wifi_connect_psk+0xdc>
                {
                    if(pstrAuthPsk->u8PassphraseLen > M2M_MAX_PSK_LEN-1)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	7a1b      	ldrb	r3, [r3, #8]
 800c436:	2b40      	cmp	r3, #64	@ 0x40
 800c438:	d903      	bls.n	800c442 <m2m_wifi_connect_psk+0xc0>
                        ret = M2M_ERR_INVALID_ARG;
 800c43a:	23f1      	movs	r3, #241	@ 0xf1
 800c43c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c440:	e010      	b.n	800c464 <m2m_wifi_connect_psk+0xe2>
                    else
                    {
                        pstrPsk->u8PassphraseLen = pstrAuthPsk->u8PassphraseLen;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	7a1a      	ldrb	r2, [r3, #8]
 800c446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c448:	701a      	strb	r2, [r3, #0]
                        m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Passphrase, pstrPsk->u8PassphraseLen);
 800c44a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c44c:	1c58      	adds	r0, r3, #1
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6859      	ldr	r1, [r3, #4]
 800c452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	461a      	mov	r2, r3
 800c458:	f7fe ffea 	bl	800b430 <m2m_memcpy>
 800c45c:	e002      	b.n	800c464 <m2m_wifi_connect_psk+0xe2>
                    }
                }
                else
                    ret = M2M_ERR_INVALID_ARG;
 800c45e:	23f1      	movs	r3, #241	@ 0xf1
 800c460:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                if(ret == M2M_SUCCESS)
 800c464:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d10f      	bne.n	800c48c <m2m_wifi_connect_psk+0x10a>
                {
                    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
 800c46c:	f107 0210 	add.w	r2, r7, #16
 800c470:	2330      	movs	r3, #48	@ 0x30
 800c472:	9302      	str	r3, [sp, #8]
 800c474:	236c      	movs	r3, #108	@ 0x6c
 800c476:	9301      	str	r3, [sp, #4]
 800c478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c47a:	9300      	str	r3, [sp, #0]
 800c47c:	2330      	movs	r3, #48	@ 0x30
 800c47e:	21bb      	movs	r1, #187	@ 0xbb
 800c480:	2001      	movs	r0, #1
 800c482:	f7ff f967 	bl	800b754 <hif_send>
 800c486:	4603      	mov	r3, r0
 800c488:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                   (uint8 *)&strConnHdr, sizeof(tstrM2mWifiConnHdr),
                                   (uint8 *)pstrPsk, sizeof(tstrM2mWifiPsk), sizeof(tstrM2mWifiConnHdr));
                }
                free(pstrPsk);
 800c48c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800c48e:	f002 f863 	bl	800e558 <free>
 800c492:	e002      	b.n	800c49a <m2m_wifi_connect_psk+0x118>
            }
            else
                ret = M2M_ERR_MEM_ALLOC;
 800c494:	23fd      	movs	r3, #253	@ 0xfd
 800c496:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }
    return ret;
 800c49a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3748      	adds	r7, #72	@ 0x48
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
	...

0800c4a8 <m2m_wifi_connect_1x_mschap2>:
sint8 m2m_wifi_connect_1x_mschap2(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuth1xMschap2   *pstrAuth1xMschap2
)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b098      	sub	sp, #96	@ 0x60
 800c4ac:	af04      	add	r7, sp, #16
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
 800c4b4:	73fb      	strb	r3, [r7, #15]
    sint8 ret = M2M_ERR_INVALID_ARG;
 800c4b6:	23f1      	movs	r3, #241	@ 0xf1
 800c4b8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if(pstrAuth1xMschap2 != NULL)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f000 80d3 	beq.w	800c66a <m2m_wifi_connect_1x_mschap2+0x1c2>
    {
        if(pstrAuth1xMschap2->pu8Domain == NULL)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d102      	bne.n	800c4d2 <m2m_wifi_connect_1x_mschap2+0x2a>
            pstrAuth1xMschap2->u16DomainLen = 0;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	819a      	strh	r2, [r3, #12]
        if(
            (pstrAuth1xMschap2->pu8UserName != NULL)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	685b      	ldr	r3, [r3, #4]
        if(
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f000 80c7 	beq.w	800c66a <m2m_wifi_connect_1x_mschap2+0x1c2>
            && (pstrAuth1xMschap2->pu8Password != NULL)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f000 80c2 	beq.w	800c66a <m2m_wifi_connect_1x_mschap2+0x1c2>
            && ((uint32)(pstrAuth1xMschap2->u16DomainLen) + pstrAuth1xMschap2->u16UserNameLen <= M2M_AUTH_1X_USER_LEN_MAX)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	899b      	ldrh	r3, [r3, #12]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	89db      	ldrh	r3, [r3, #14]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	2b64      	cmp	r3, #100	@ 0x64
 800c4f4:	f200 80b9 	bhi.w	800c66a <m2m_wifi_connect_1x_mschap2+0x1c2>
            && (pstrAuth1xMschap2->u16PasswordLen <= M2M_AUTH_1X_PASSWORD_LEN_MAX)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	8a1b      	ldrh	r3, [r3, #16]
 800c4fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c500:	f200 80b3 	bhi.w	800c66a <m2m_wifi_connect_1x_mschap2+0x1c2>
        )
        {
            tstrM2mWifiConnHdr  strConnHdr;
            uint16              u16AuthSize =   sizeof(tstrM2mWifi1xHdr) +
                                                pstrAuth1xMschap2->u16DomainLen +
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	899a      	ldrh	r2, [r3, #12]
                                                pstrAuth1xMschap2->u16UserNameLen +
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	89db      	ldrh	r3, [r3, #14]
                                                pstrAuth1xMschap2->u16DomainLen +
 800c50c:	4413      	add	r3, r2
 800c50e:	b29a      	uxth	r2, r3
                                                pstrAuth1xMschap2->u16PasswordLen;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	8a1b      	ldrh	r3, [r3, #16]
                                                pstrAuth1xMschap2->u16UserNameLen +
 800c514:	4413      	add	r3, r2
 800c516:	b29b      	uxth	r3, r3
            uint16              u16AuthSize =   sizeof(tstrM2mWifi1xHdr) +
 800c518:	332c      	adds	r3, #44	@ 0x2c
 800c51a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

            ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption,
 800c51e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800c522:	7bf8      	ldrb	r0, [r7, #15]
 800c524:	f107 0310 	add.w	r3, r7, #16
 800c528:	9300      	str	r3, [sp, #0]
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	2104      	movs	r1, #4
 800c52e:	f7ff fe56 	bl	800c1de <m2m_wifi_connect_prepare_msg>
 800c532:	4603      	mov	r3, r0
 800c534:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                                               M2M_WIFI_SEC_802_1X,
                                               u16AuthSize,
                                               pstrNetworkId,
                                               &strConnHdr);

            if(ret == M2M_SUCCESS)
 800c538:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f040 8094 	bne.w	800c66a <m2m_wifi_connect_1x_mschap2+0x1c2>
            {
                tstrM2mWifi1xHdr    *pstr1xHdr = (tstrM2mWifi1xHdr *)malloc(u16AuthSize);
 800c542:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c546:	4618      	mov	r0, r3
 800c548:	f001 fffe 	bl	800e548 <malloc>
 800c54c:	4603      	mov	r3, r0
 800c54e:	643b      	str	r3, [r7, #64]	@ 0x40
                if(pstr1xHdr != NULL)
 800c550:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c552:	2b00      	cmp	r3, #0
 800c554:	f000 8086 	beq.w	800c664 <m2m_wifi_connect_1x_mschap2+0x1bc>
                {
                    uint8   *pu8AuthPtr = pstr1xHdr->au81xAuthDetails;
 800c558:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c55a:	332c      	adds	r3, #44	@ 0x2c
 800c55c:	64bb      	str	r3, [r7, #72]	@ 0x48
                    m2m_memset((uint8 *)pstr1xHdr, 0, u16AuthSize);
 800c55e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c562:	461a      	mov	r2, r3
 800c564:	2100      	movs	r1, #0
 800c566:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800c568:	f7fe ff82 	bl	800b470 <m2m_memset>

                    pstr1xHdr->u8Flags = M2M_802_1X_MSCHAP2_FLAG;
 800c56c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c56e:	2201      	movs	r2, #1
 800c570:	701a      	strb	r2, [r3, #0]
                    if(pstrAuth1xMschap2->bUnencryptedUserName == true)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	7c9b      	ldrb	r3, [r3, #18]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d006      	beq.n	800c588 <m2m_wifi_connect_1x_mschap2+0xe0>
                        pstr1xHdr->u8Flags |= M2M_802_1X_UNENCRYPTED_USERNAME_FLAG;
 800c57a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c582:	b2da      	uxtb	r2, r3
 800c584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c586:	701a      	strb	r2, [r3, #0]
                    if(pstrAuth1xMschap2->bPrependDomain == true)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	7cdb      	ldrb	r3, [r3, #19]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d006      	beq.n	800c59e <m2m_wifi_connect_1x_mschap2+0xf6>
                        pstr1xHdr->u8Flags |= M2M_802_1X_PREPEND_DOMAIN_FLAG;
 800c590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c598:	b2da      	uxtb	r2, r3
 800c59a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c59c:	701a      	strb	r2, [r3, #0]

                    pstr1xHdr->u8HdrLength = sizeof(tstrM2mWifi1xHdr);
 800c59e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5a0:	222c      	movs	r2, #44	@ 0x2c
 800c5a2:	70da      	strb	r2, [r3, #3]
                    pstr1xHdr->u32TlsHsFlags = gu321xTlsHsFlags;
 800c5a4:	4b34      	ldr	r3, [pc, #208]	@ (800c678 <m2m_wifi_connect_1x_mschap2+0x1d0>)
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5aa:	625a      	str	r2, [r3, #36]	@ 0x24
                    m2m_memcpy(pstr1xHdr->au8TlsSpecificRootNameSha1, gau81xRootSha1, sizeof(gau81xRootSha1));
 800c5ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5ae:	330c      	adds	r3, #12
 800c5b0:	2214      	movs	r2, #20
 800c5b2:	4932      	ldr	r1, [pc, #200]	@ (800c67c <m2m_wifi_connect_1x_mschap2+0x1d4>)
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fe ff3b 	bl	800b430 <m2m_memcpy>

                    pstr1xHdr->u8DomainLength = 0;
 800c5ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5bc:	2200      	movs	r2, #0
 800c5be:	705a      	strb	r2, [r3, #1]
                    if(pstrAuth1xMschap2->pu8Domain != NULL)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d012      	beq.n	800c5ee <m2m_wifi_connect_1x_mschap2+0x146>
                    {
                        pstr1xHdr->u8DomainLength = (uint8)(pstrAuth1xMschap2->u16DomainLen);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	899b      	ldrh	r3, [r3, #12]
 800c5cc:	b2da      	uxtb	r2, r3
 800c5ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5d0:	705a      	strb	r2, [r3, #1]
                        m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8Domain, pstr1xHdr->u8DomainLength);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6819      	ldr	r1, [r3, #0]
 800c5d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5d8:	785b      	ldrb	r3, [r3, #1]
 800c5da:	461a      	mov	r2, r3
 800c5dc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c5de:	f7fe ff27 	bl	800b430 <m2m_memcpy>
                        pu8AuthPtr += pstr1xHdr->u8DomainLength;
 800c5e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5e4:	785b      	ldrb	r3, [r3, #1]
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5ea:	4413      	add	r3, r2
 800c5ec:	64bb      	str	r3, [r7, #72]	@ 0x48
                    }

                    pstr1xHdr->u8UserNameLength = (pstrAuth1xMschap2->u16UserNameLen);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	89db      	ldrh	r3, [r3, #14]
 800c5f2:	b2da      	uxtb	r2, r3
 800c5f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5f6:	709a      	strb	r2, [r3, #2]
                    m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8UserName, pstr1xHdr->u8UserNameLength);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6859      	ldr	r1, [r3, #4]
 800c5fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5fe:	789b      	ldrb	r3, [r3, #2]
 800c600:	461a      	mov	r2, r3
 800c602:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c604:	f7fe ff14 	bl	800b430 <m2m_memcpy>
                    pu8AuthPtr += pstr1xHdr->u8UserNameLength;
 800c608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c60a:	789b      	ldrb	r3, [r3, #2]
 800c60c:	461a      	mov	r2, r3
 800c60e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c610:	4413      	add	r3, r2
 800c612:	64bb      	str	r3, [r7, #72]	@ 0x48

                    pstr1xHdr->u16PrivateKeyOffset = pu8AuthPtr - pstr1xHdr->au81xAuthDetails;
 800c614:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c616:	332c      	adds	r3, #44	@ 0x2c
 800c618:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c61a:	1ad3      	subs	r3, r2, r3
 800c61c:	b29a      	uxth	r2, r3
 800c61e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c620:	809a      	strh	r2, [r3, #4]
                    pstr1xHdr->u16PrivateKeyLength = pstrAuth1xMschap2->u16PasswordLen;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	8a1a      	ldrh	r2, [r3, #16]
 800c626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c628:	80da      	strh	r2, [r3, #6]
                    m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8Password, pstr1xHdr->u16PrivateKeyLength);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6899      	ldr	r1, [r3, #8]
 800c62e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c630:	88db      	ldrh	r3, [r3, #6]
 800c632:	461a      	mov	r2, r3
 800c634:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c636:	f7fe fefb 	bl	800b430 <m2m_memcpy>

                    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
 800c63a:	f107 0210 	add.w	r2, r7, #16
 800c63e:	2330      	movs	r3, #48	@ 0x30
 800c640:	9302      	str	r3, [sp, #8]
 800c642:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c646:	9301      	str	r3, [sp, #4]
 800c648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c64a:	9300      	str	r3, [sp, #0]
 800c64c:	2330      	movs	r3, #48	@ 0x30
 800c64e:	21bb      	movs	r1, #187	@ 0xbb
 800c650:	2001      	movs	r0, #1
 800c652:	f7ff f87f 	bl	800b754 <hif_send>
 800c656:	4603      	mov	r3, r0
 800c658:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                                   (uint8 *)&strConnHdr, sizeof(tstrM2mWifiConnHdr),
                                   (uint8 *)pstr1xHdr, u16AuthSize,
                                   sizeof(tstrM2mWifiConnHdr));
                    free(pstr1xHdr);
 800c65c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800c65e:	f001 ff7b 	bl	800e558 <free>
 800c662:	e002      	b.n	800c66a <m2m_wifi_connect_1x_mschap2+0x1c2>
                }
                else
                    ret = M2M_ERR_MEM_ALLOC;
 800c664:	23fd      	movs	r3, #253	@ 0xfd
 800c666:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            }
        }
    }
    return ret;
 800c66a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3750      	adds	r7, #80	@ 0x50
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	20000010 	.word	0x20000010
 800c67c:	20000698 	.word	0x20000698

0800c680 <m2m_wifi_connect>:
    }
    return ret;
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af02      	add	r7, sp, #8
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	607b      	str	r3, [r7, #4]
 800c68a:	460b      	mov	r3, r1
 800c68c:	72fb      	strb	r3, [r7, #11]
 800c68e:	4613      	mov	r3, r2
 800c690:	72bb      	strb	r3, [r7, #10]
    return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch, 0);
 800c692:	7aba      	ldrb	r2, [r7, #10]
 800c694:	7af9      	ldrb	r1, [r7, #11]
 800c696:	2300      	movs	r3, #0
 800c698:	9301      	str	r3, [sp, #4]
 800c69a:	8b3b      	ldrh	r3, [r7, #24]
 800c69c:	9300      	str	r3, [sp, #0]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f000 f805 	bl	800c6b0 <m2m_wifi_connect_sc>
 800c6a6:	4603      	mov	r3, r0
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3710      	adds	r7, #16
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <m2m_wifi_connect_sc>:

sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b096      	sub	sp, #88	@ 0x58
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	607b      	str	r3, [r7, #4]
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	72fb      	strb	r3, [r7, #11]
 800c6be:	4613      	mov	r3, r2
 800c6c0:	72bb      	strb	r3, [r7, #10]
    sint8               s8Ret              = M2M_ERR_INVALID_ARG;
 800c6c2:	23f1      	movs	r3, #241	@ 0xf1
 800c6c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    tstrNetworkId       strNetworkId       = {NULL, (uint8 *)pcSsid, u8SsidLen, (tenuM2mScanCh)u16Ch};
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6d0:	7afb      	ldrb	r3, [r7, #11]
 800c6d2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800c6d6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    tenuCredStoreOption enuCredStoreOption = u8NoSaveCred ? WIFI_CRED_DONTSAVE : WIFI_CRED_SAVE_ENCRYPTED;
 800c6e0:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d001      	beq.n	800c6ec <m2m_wifi_connect_sc+0x3c>
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	e000      	b.n	800c6ee <m2m_wifi_connect_sc+0x3e>
 800c6ec:	2302      	movs	r3, #2
 800c6ee:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    /* This API does not support SSIDs which contain '\0'. If there is a '\0' character within the
     * first u8SsidLen characters, then assume that the input u8SsidLen was incorrect - set length
     * to strlen(pcSsid) and continue. This is to avoid a change from the behaviour of previously
     * released drivers. */
    if(u8SsidLen < M2M_MAX_SSID_LEN)
 800c6f2:	7afb      	ldrb	r3, [r7, #11]
 800c6f4:	2b20      	cmp	r3, #32
 800c6f6:	d80e      	bhi.n	800c716 <m2m_wifi_connect_sc+0x66>
        while(u8SsidLen--)
 800c6f8:	e008      	b.n	800c70c <m2m_wifi_connect_sc+0x5c>
            if(strNetworkId.pu8Ssid[u8SsidLen] == 0)
 800c6fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c6fc:	7afb      	ldrb	r3, [r7, #11]
 800c6fe:	4413      	add	r3, r2
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d102      	bne.n	800c70c <m2m_wifi_connect_sc+0x5c>
                strNetworkId.u8SsidLen = u8SsidLen;
 800c706:	7afb      	ldrb	r3, [r7, #11]
 800c708:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        while(u8SsidLen--)
 800c70c:	7afb      	ldrb	r3, [r7, #11]
 800c70e:	1e5a      	subs	r2, r3, #1
 800c710:	72fa      	strb	r2, [r7, #11]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1f1      	bne.n	800c6fa <m2m_wifi_connect_sc+0x4a>

    switch((tenuM2mSecType)u8SecType)
 800c716:	7abb      	ldrb	r3, [r7, #10]
 800c718:	3b01      	subs	r3, #1
 800c71a:	2b03      	cmp	r3, #3
 800c71c:	f200 808e 	bhi.w	800c83c <m2m_wifi_connect_sc+0x18c>
 800c720:	a201      	add	r2, pc, #4	@ (adr r2, 800c728 <m2m_wifi_connect_sc+0x78>)
 800c722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c726:	bf00      	nop
 800c728:	0800c739 	.word	0x0800c739
 800c72c:	0800c751 	.word	0x0800c751
 800c730:	0800c7a7 	.word	0x0800c7a7
 800c734:	0800c7e5 	.word	0x0800c7e5
    {
    case M2M_WIFI_SEC_OPEN:
        s8Ret = m2m_wifi_connect_open(enuCredStoreOption, &strNetworkId);
 800c738:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800c73c:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800c740:	4611      	mov	r1, r2
 800c742:	4618      	mov	r0, r3
 800c744:	f7ff fddf 	bl	800c306 <m2m_wifi_connect_open>
 800c748:	4603      	mov	r3, r0
 800c74a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        break;
 800c74e:	e07c      	b.n	800c84a <m2m_wifi_connect_sc+0x19a>
    case M2M_WIFI_SEC_WPA_PSK:
        if(pvAuthInfo != NULL)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d074      	beq.n	800c840 <m2m_wifi_connect_sc+0x190>
        {
            tstrAuthPsk strAuthPsk = {NULL, NULL, 0};
 800c756:	2300      	movs	r3, #0
 800c758:	633b      	str	r3, [r7, #48]	@ 0x30
 800c75a:	2300      	movs	r3, #0
 800c75c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c75e:	2300      	movs	r3, #0
 800c760:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            uint16      len        = m2m_strlen((uint8 *)pvAuthInfo);
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f7fe fea0 	bl	800b4aa <m2m_strlen>
 800c76a:	4603      	mov	r3, r0
 800c76c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

            if(len == M2M_MAX_PSK_LEN-1)
 800c770:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c774:	2b40      	cmp	r3, #64	@ 0x40
 800c776:	d102      	bne.n	800c77e <m2m_wifi_connect_sc+0xce>
            {
                strAuthPsk.pu8Psk = (uint8 *)pvAuthInfo;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c77c:	e006      	b.n	800c78c <m2m_wifi_connect_sc+0xdc>
            }
            else
            {
                strAuthPsk.pu8Passphrase   = (uint8 *)pvAuthInfo;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	637b      	str	r3, [r7, #52]	@ 0x34
                strAuthPsk.u8PassphraseLen = len;
 800c782:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c786:	b2db      	uxtb	r3, r3
 800c788:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            }
            s8Ret = m2m_wifi_connect_psk(enuCredStoreOption, &strNetworkId, &strAuthPsk);
 800c78c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800c790:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800c794:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800c798:	4618      	mov	r0, r3
 800c79a:	f7ff fdf2 	bl	800c382 <m2m_wifi_connect_psk>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        }
        break;
 800c7a4:	e04c      	b.n	800c840 <m2m_wifi_connect_sc+0x190>
    case M2M_WIFI_SEC_WEP:
        if(pvAuthInfo != NULL)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d04b      	beq.n	800c844 <m2m_wifi_connect_sc+0x194>
        {
            tstrM2mWifiWepParams    *pstrWepParams = (tstrM2mWifiWepParams *)pvAuthInfo;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
            tstrAuthWep             strAuthWep     = {pstrWepParams->au8WepKey, pstrWepParams->u8KeySz-1, pstrWepParams->u8KeyIndx};
 800c7b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7b2:	3302      	adds	r3, #2
 800c7b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7b8:	785b      	ldrb	r3, [r3, #1]
 800c7ba:	3b01      	subs	r3, #1
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800c7c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

            s8Ret = m2m_wifi_connect_wep(enuCredStoreOption, &strNetworkId, &strAuthWep);
 800c7ca:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800c7ce:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800c7d2:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7ff fdc4 	bl	800c364 <m2m_wifi_connect_wep>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        }
        break;
 800c7e2:	e02f      	b.n	800c844 <m2m_wifi_connect_sc+0x194>
    case M2M_WIFI_SEC_802_1X:
        if(pvAuthInfo != NULL)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d02e      	beq.n	800c848 <m2m_wifi_connect_sc+0x198>
        {
            tstr1xAuthCredentials   *pstr1xParams    = (tstr1xAuthCredentials *)pvAuthInfo;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	653b      	str	r3, [r7, #80]	@ 0x50
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800c7ee:	f107 0314 	add.w	r3, r7, #20
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	601a      	str	r2, [r3, #0]
 800c7f6:	605a      	str	r2, [r3, #4]
 800c7f8:	609a      	str	r2, [r3, #8]
 800c7fa:	60da      	str	r2, [r3, #12]
 800c7fc:	611a      	str	r2, [r3, #16]
                                                        pstr1xParams->au8UserName,
 800c7fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800c800:	61bb      	str	r3, [r7, #24]
                                                        pstr1xParams->au8Passwd,
 800c802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c804:	3315      	adds	r3, #21
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800c806:	61fb      	str	r3, [r7, #28]
                                                        0,
                                                        m2m_strlen(pstr1xParams->au8UserName),
 800c808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fe fe4d 	bl	800b4aa <m2m_strlen>
 800c810:	4603      	mov	r3, r0
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800c812:	847b      	strh	r3, [r7, #34]	@ 0x22
                                                        m2m_strlen(pstr1xParams->au8Passwd),
 800c814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c816:	3315      	adds	r3, #21
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fe fe46 	bl	800b4aa <m2m_strlen>
 800c81e:	4603      	mov	r3, r0
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800c820:	84bb      	strh	r3, [r7, #36]	@ 0x24
                                                        false};

            s8Ret = m2m_wifi_connect_1x_mschap2(enuCredStoreOption, &strNetworkId, &strAuth1xMschap2);
 800c822:	f107 0214 	add.w	r2, r7, #20
 800c826:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800c82a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800c82e:	4618      	mov	r0, r3
 800c830:	f7ff fe3a 	bl	800c4a8 <m2m_wifi_connect_1x_mschap2>
 800c834:	4603      	mov	r3, r0
 800c836:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        }
        break;
 800c83a:	e005      	b.n	800c848 <m2m_wifi_connect_sc+0x198>
    default:
        break;
 800c83c:	bf00      	nop
 800c83e:	e004      	b.n	800c84a <m2m_wifi_connect_sc+0x19a>
        break;
 800c840:	bf00      	nop
 800c842:	e002      	b.n	800c84a <m2m_wifi_connect_sc+0x19a>
        break;
 800c844:	bf00      	nop
 800c846:	e000      	b.n	800c84a <m2m_wifi_connect_sc+0x19a>
        break;
 800c848:	bf00      	nop
    }
    return s8Ret;
 800c84a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3758      	adds	r7, #88	@ 0x58
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop

0800c858 <m2m_wifi_request_dhcp_client>:
    return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
                    (uint8 *) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0, 0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
 800c858:	b480      	push	{r7}
 800c85a:	af00      	add	r7, sp, #0
    /*legacy API should be removed */
    return 0;
 800c85c:	2300      	movs	r3, #0
}
 800c85e:	4618      	mov	r0, r3
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr

0800c868 <chip_apply_conf>:

#define TIMEOUT						(20000) // ITCO: replace (0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800c870:	2300      	movs	r3, #0
 800c872:	75fb      	strb	r3, [r7, #23]
	uint32 val32 = u32Conf;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c87e:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
 800c880:	6939      	ldr	r1, [r7, #16]
 800c882:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 800c886:	f000 fb9b 	bl	800cfc0 <nm_write_reg>
		if(val32 != 0) {
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d013      	beq.n	800c8b8 <chip_apply_conf+0x50>
			uint32 reg = 0;
 800c890:	2300      	movs	r3, #0
 800c892:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
 800c894:	f107 030c 	add.w	r3, r7, #12
 800c898:	4619      	mov	r1, r3
 800c89a:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 800c89e:	f000 fb81 	bl	800cfa4 <nm_read_reg_with_ret>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	75fb      	strb	r3, [r7, #23]
			if(ret == M2M_SUCCESS) {
 800c8a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1e8      	bne.n	800c880 <chip_apply_conf+0x18>
				if(reg == val32)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	693a      	ldr	r2, [r7, #16]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d002      	beq.n	800c8bc <chip_apply_conf+0x54>
		nm_write_reg(rNMI_GP_REG_1, val32);
 800c8b6:	e7e3      	b.n	800c880 <chip_apply_conf+0x18>
					break;
			}
		} else {
			break;
 800c8b8:	bf00      	nop
 800c8ba:	e000      	b.n	800c8be <chip_apply_conf+0x56>
					break;
 800c8bc:	bf00      	nop
		}
	} while(1);

	return M2M_SUCCESS;
 800c8be:	2300      	movs	r3, #0
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3718      	adds	r7, #24
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	71fb      	strb	r3, [r7, #7]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
 800c8d6:	463b      	mov	r3, r7
 800c8d8:	4619      	mov	r1, r3
 800c8da:	f241 4008 	movw	r0, #5128	@ 0x1408
 800c8de:	f000 fb61 	bl	800cfa4 <nm_read_reg_with_ret>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800c8e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d12b      	bne.n	800c946 <enable_interrupts+0x7e>

	reg |= ((uint32) 1 << 8);
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c8f4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	f241 4008 	movw	r0, #5128	@ 0x1408
 800c8fe:	f000 fb5f 	bl	800cfc0 <nm_write_reg>
 800c902:	4603      	mov	r3, r0
 800c904:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800c906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d11d      	bne.n	800c94a <enable_interrupts+0x82>

	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
 800c90e:	463b      	mov	r3, r7
 800c910:	4619      	mov	r1, r3
 800c912:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800c916:	f000 fb45 	bl	800cfa4 <nm_read_reg_with_ret>
 800c91a:	4603      	mov	r3, r0
 800c91c:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800c91e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d113      	bne.n	800c94e <enable_interrupts+0x86>

	reg |= ((uint32) 1 << 16);
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c92c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	4619      	mov	r1, r3
 800c932:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800c936:	f000 fb43 	bl	800cfc0 <nm_write_reg>
 800c93a:	4603      	mov	r3, r0
 800c93c:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800c93e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c942:	2b00      	cmp	r3, #0
ERR1:
 800c944:	e004      	b.n	800c950 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800c946:	bf00      	nop
 800c948:	e002      	b.n	800c950 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800c94a:	bf00      	nop
 800c94c:	e000      	b.n	800c950 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800c94e:	bf00      	nop
	return ret;
 800c950:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800c954:	4618      	mov	r0, r3
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
 800c962:	4b31      	ldr	r3, [pc, #196]	@ (800ca28 <nmi_get_chipid+0xcc>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d157      	bne.n	800ca1a <nmi_get_chipid+0xbe>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
 800c96a:	492f      	ldr	r1, [pc, #188]	@ (800ca28 <nmi_get_chipid+0xcc>)
 800c96c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800c970:	f000 fb18 	bl	800cfa4 <nm_read_reg_with_ret>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d004      	beq.n	800c984 <nmi_get_chipid+0x28>
			chipid = 0;
 800c97a:	4b2b      	ldr	r3, [pc, #172]	@ (800ca28 <nmi_get_chipid+0xcc>)
 800c97c:	2200      	movs	r2, #0
 800c97e:	601a      	str	r2, [r3, #0]
			return 0;
 800c980:	2300      	movs	r3, #0
 800c982:	e04c      	b.n	800ca1e <nmi_get_chipid+0xc2>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 800c984:	1d3b      	adds	r3, r7, #4
 800c986:	4619      	mov	r1, r3
 800c988:	f241 30f4 	movw	r0, #5108	@ 0x13f4
 800c98c:	f000 fb0a 	bl	800cfa4 <nm_read_reg_with_ret>
 800c990:	4603      	mov	r3, r0
 800c992:	2b00      	cmp	r3, #0
 800c994:	d004      	beq.n	800c9a0 <nmi_get_chipid+0x44>
			chipid = 0;
 800c996:	4b24      	ldr	r3, [pc, #144]	@ (800ca28 <nmi_get_chipid+0xcc>)
 800c998:	2200      	movs	r2, #0
 800c99a:	601a      	str	r2, [r3, #0]
			return 0;
 800c99c:	2300      	movs	r3, #0
 800c99e:	e03e      	b.n	800ca1e <nmi_get_chipid+0xc2>
		}

		if (chipid == 0x1002a0)  {
 800c9a0:	4b21      	ldr	r3, [pc, #132]	@ (800ca28 <nmi_get_chipid+0xcc>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a21      	ldr	r2, [pc, #132]	@ (800ca2c <nmi_get_chipid+0xd0>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d106      	bne.n	800c9b8 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d028      	beq.n	800ca02 <nmi_get_chipid+0xa6>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
 800c9b0:	4b1d      	ldr	r3, [pc, #116]	@ (800ca28 <nmi_get_chipid+0xcc>)
 800c9b2:	4a1f      	ldr	r2, [pc, #124]	@ (800ca30 <nmi_get_chipid+0xd4>)
 800c9b4:	601a      	str	r2, [r3, #0]
 800c9b6:	e024      	b.n	800ca02 <nmi_get_chipid+0xa6>
			}
		} else if(chipid == 0x1002b0) {
 800c9b8:	4b1b      	ldr	r3, [pc, #108]	@ (800ca28 <nmi_get_chipid+0xcc>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a1d      	ldr	r2, [pc, #116]	@ (800ca34 <nmi_get_chipid+0xd8>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d10d      	bne.n	800c9de <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2b03      	cmp	r3, #3
 800c9c6:	d01c      	beq.n	800ca02 <nmi_get_chipid+0xa6>
			} else if(rfrevid == 4) { /* 1002B1 */
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b04      	cmp	r3, #4
 800c9cc:	d103      	bne.n	800c9d6 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
 800c9ce:	4b16      	ldr	r3, [pc, #88]	@ (800ca28 <nmi_get_chipid+0xcc>)
 800c9d0:	4a19      	ldr	r2, [pc, #100]	@ (800ca38 <nmi_get_chipid+0xdc>)
 800c9d2:	601a      	str	r2, [r3, #0]
 800c9d4:	e015      	b.n	800ca02 <nmi_get_chipid+0xa6>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
 800c9d6:	4b14      	ldr	r3, [pc, #80]	@ (800ca28 <nmi_get_chipid+0xcc>)
 800c9d8:	4a18      	ldr	r2, [pc, #96]	@ (800ca3c <nmi_get_chipid+0xe0>)
 800c9da:	601a      	str	r2, [r3, #0]
 800c9dc:	e011      	b.n	800ca02 <nmi_get_chipid+0xa6>
			}
		}else if(chipid == 0x1000F0) {
 800c9de:	4b12      	ldr	r3, [pc, #72]	@ (800ca28 <nmi_get_chipid+0xcc>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4a17      	ldr	r2, [pc, #92]	@ (800ca40 <nmi_get_chipid+0xe4>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d10c      	bne.n	800ca02 <nmi_get_chipid+0xa6>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
 800c9e8:	490f      	ldr	r1, [pc, #60]	@ (800ca28 <nmi_get_chipid+0xcc>)
 800c9ea:	f44f 106c 	mov.w	r0, #3866624	@ 0x3b0000
 800c9ee:	f000 fad9 	bl	800cfa4 <nm_read_reg_with_ret>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d004      	beq.n	800ca02 <nmi_get_chipid+0xa6>
			chipid = 0;
 800c9f8:	4b0b      	ldr	r3, [pc, #44]	@ (800ca28 <nmi_get_chipid+0xcc>)
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	601a      	str	r2, [r3, #0]
			return 0;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	e00d      	b.n	800ca1e <nmi_get_chipid+0xc2>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
 800ca02:	4b09      	ldr	r3, [pc, #36]	@ (800ca28 <nmi_get_chipid+0xcc>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800ca0a:	4a07      	ldr	r2, [pc, #28]	@ (800ca28 <nmi_get_chipid+0xcc>)
 800ca0c:	6013      	str	r3, [r2, #0]
		chipid |= 0x050000;
 800ca0e:	4b06      	ldr	r3, [pc, #24]	@ (800ca28 <nmi_get_chipid+0xcc>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800ca16:	4a04      	ldr	r2, [pc, #16]	@ (800ca28 <nmi_get_chipid+0xcc>)
 800ca18:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
 800ca1a:	4b03      	ldr	r3, [pc, #12]	@ (800ca28 <nmi_get_chipid+0xcc>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3708      	adds	r7, #8
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	200006ac 	.word	0x200006ac
 800ca2c:	001002a0 	.word	0x001002a0
 800ca30:	001002a1 	.word	0x001002a1
 800ca34:	001002b0 	.word	0x001002b0
 800ca38:	001002b1 	.word	0x001002b1
 800ca3c:	001002b2 	.word	0x001002b2
 800ca40:	001000f0 	.word	0x001000f0

0800ca44 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800ca4e:	463b      	mov	r3, r7
 800ca50:	4619      	mov	r1, r3
 800ca52:	2010      	movs	r0, #16
 800ca54:	f000 faa6 	bl	800cfa4 <nm_read_reg_with_ret>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS) goto ERR1;
 800ca5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d144      	bne.n	800caee <chip_sleep+0xaa>
		if((reg & NBIT0) == 0) break;
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	f003 0301 	and.w	r3, r3, #1
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d000      	beq.n	800ca70 <chip_sleep+0x2c>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800ca6e:	e7ee      	b.n	800ca4e <chip_sleep+0xa>
		if((reg & NBIT0) == 0) break;
 800ca70:	bf00      	nop
	}

	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800ca72:	463b      	mov	r3, r7
 800ca74:	4619      	mov	r1, r3
 800ca76:	2001      	movs	r0, #1
 800ca78:	f000 fa94 	bl	800cfa4 <nm_read_reg_with_ret>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800ca80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d134      	bne.n	800caf2 <chip_sleep+0xae>
	if(reg & NBIT1)
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	f003 0302 	and.w	r3, r3, #2
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d00e      	beq.n	800cab0 <chip_sleep+0x6c>
	{
		reg &=~NBIT1;
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	f023 0302 	bic.w	r3, r3, #2
 800ca98:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	2001      	movs	r0, #1
 800caa0:	f000 fa8e 	bl	800cfc0 <nm_write_reg>
 800caa4:	4603      	mov	r3, r0
 800caa6:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800caa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d122      	bne.n	800caf6 <chip_sleep+0xb2>
	}

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800cab0:	463b      	mov	r3, r7
 800cab2:	4619      	mov	r1, r3
 800cab4:	200b      	movs	r0, #11
 800cab6:	f000 fa75 	bl	800cfa4 <nm_read_reg_with_ret>
 800caba:	4603      	mov	r3, r0
 800cabc:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800cabe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d119      	bne.n	800cafa <chip_sleep+0xb6>
	if(reg & NBIT0)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	f003 0301 	and.w	r3, r3, #1
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d016      	beq.n	800cafe <chip_sleep+0xba>
	{
		reg &= ~NBIT0;
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	f023 0301 	bic.w	r3, r3, #1
 800cad6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	4619      	mov	r1, r3
 800cadc:	200b      	movs	r0, #11
 800cade:	f000 fa6f 	bl	800cfc0 <nm_write_reg>
 800cae2:	4603      	mov	r3, r0
 800cae4:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800cae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800caea:	2b00      	cmp	r3, #0
	}

ERR1:
 800caec:	e007      	b.n	800cafe <chip_sleep+0xba>
		if(ret != M2M_SUCCESS) goto ERR1;
 800caee:	bf00      	nop
 800caf0:	e006      	b.n	800cb00 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800caf2:	bf00      	nop
 800caf4:	e004      	b.n	800cb00 <chip_sleep+0xbc>
		if(ret != M2M_SUCCESS)goto ERR1;
 800caf6:	bf00      	nop
 800caf8:	e002      	b.n	800cb00 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800cafa:	bf00      	nop
 800cafc:	e000      	b.n	800cb00 <chip_sleep+0xbc>
ERR1:
 800cafe:	bf00      	nop
	return ret;
 800cb00:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3708      	adds	r7, #8
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <chip_wake>:
sint8 chip_wake(void)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800cb12:	2300      	movs	r3, #0
 800cb14:	73fb      	strb	r3, [r7, #15]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	607b      	str	r3, [r7, #4]
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	603b      	str	r3, [r7, #0]
 800cb1e:	2300      	movs	r3, #0
 800cb20:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800cb22:	1d3b      	adds	r3, r7, #4
 800cb24:	4619      	mov	r1, r3
 800cb26:	200b      	movs	r0, #11
 800cb28:	f000 fa3c 	bl	800cfa4 <nm_read_reg_with_ret>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800cb30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d16d      	bne.n	800cc14 <chip_wake+0x108>

	if(!(reg & NBIT0))
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f003 0301 	and.w	r3, r3, #1
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10c      	bne.n	800cb5c <chip_wake+0x50>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f043 0301 	orr.w	r3, r3, #1
 800cb48:	4619      	mov	r1, r3
 800cb4a:	200b      	movs	r0, #11
 800cb4c:	f000 fa38 	bl	800cfc0 <nm_write_reg>
 800cb50:	4603      	mov	r3, r0
 800cb52:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800cb54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d15d      	bne.n	800cc18 <chip_wake+0x10c>
	}

	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800cb5c:	1d3b      	adds	r3, r7, #4
 800cb5e:	4619      	mov	r1, r3
 800cb60:	2001      	movs	r0, #1
 800cb62:	f000 fa1f 	bl	800cfa4 <nm_read_reg_with_ret>
 800cb66:	4603      	mov	r3, r0
 800cb68:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800cb6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d154      	bne.n	800cc1c <chip_wake+0x110>
	/* Set bit 1 */
	if(!(reg & NBIT1))
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f003 0302 	and.w	r3, r3, #2
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d000      	beq.n	800cb7e <chip_wake+0x72>
 800cb7c:	e00d      	b.n	800cb9a <chip_wake+0x8e>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f043 0302 	orr.w	r3, r3, #2
 800cb84:	4619      	mov	r1, r3
 800cb86:	2001      	movs	r0, #1
 800cb88:	f000 fa1a 	bl	800cfc0 <nm_write_reg>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 800cb90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d000      	beq.n	800cb9a <chip_wake+0x8e>
 800cb98:	e041      	b.n	800cc1e <chip_wake+0x112>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 800cb9a:	463b      	mov	r3, r7
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	200f      	movs	r0, #15
 800cba0:	f000 fa00 	bl	800cfa4 <nm_read_reg_with_ret>
 800cba4:	4603      	mov	r3, r0
 800cba6:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) {
 800cba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d010      	beq.n	800cbd2 <chip_wake+0xc6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
 800cbb0:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 800cbb4:	491d      	ldr	r1, [pc, #116]	@ (800cc2c <chip_wake+0x120>)
 800cbb6:	481e      	ldr	r0, [pc, #120]	@ (800cc30 <chip_wake+0x124>)
 800cbb8:	f001 fe46 	bl	800e848 <iprintf>
 800cbbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbc0:	683a      	ldr	r2, [r7, #0]
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	481b      	ldr	r0, [pc, #108]	@ (800cc34 <chip_wake+0x128>)
 800cbc6:	f001 fe3f 	bl	800e848 <iprintf>
 800cbca:	200d      	movs	r0, #13
 800cbcc:	f001 fe4e 	bl	800e86c <putchar>
			goto _WAKE_EXIT;
 800cbd0:	e025      	b.n	800cc1e <chip_wake+0x112>
		}
		if(clk_status_reg & NBIT2) {
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	f003 0304 	and.w	r3, r3, #4
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d117      	bne.n	800cc0c <chip_wake+0x100>
			break;
		}
		nm_bsp_sleep(2);
 800cbdc:	2002      	movs	r0, #2
 800cbde:	f7fe fafb 	bl	800b1d8 <nm_bsp_sleep>
		trials++;
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	2b04      	cmp	r3, #4
 800cbec:	d9d5      	bls.n	800cb9a <chip_wake+0x8e>
		{
			M2M_ERR("Failed to wakup the chip\n");
 800cbee:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800cbf2:	490e      	ldr	r1, [pc, #56]	@ (800cc2c <chip_wake+0x120>)
 800cbf4:	480e      	ldr	r0, [pc, #56]	@ (800cc30 <chip_wake+0x124>)
 800cbf6:	f001 fe27 	bl	800e848 <iprintf>
 800cbfa:	480f      	ldr	r0, [pc, #60]	@ (800cc38 <chip_wake+0x12c>)
 800cbfc:	f001 fe94 	bl	800e928 <puts>
 800cc00:	200d      	movs	r0, #13
 800cc02:	f001 fe33 	bl	800e86c <putchar>
			ret = M2M_ERR_TIME_OUT;
 800cc06:	23fc      	movs	r3, #252	@ 0xfc
 800cc08:	73fb      	strb	r3, [r7, #15]
			goto _WAKE_EXIT;
 800cc0a:	e008      	b.n	800cc1e <chip_wake+0x112>
			break;
 800cc0c:	bf00      	nop
		}
	}while(1);

	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
 800cc0e:	f000 f9b1 	bl	800cf74 <nm_bus_reset>
 800cc12:	e004      	b.n	800cc1e <chip_wake+0x112>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800cc14:	bf00      	nop
 800cc16:	e002      	b.n	800cc1e <chip_wake+0x112>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800cc18:	bf00      	nop
 800cc1a:	e000      	b.n	800cc1e <chip_wake+0x112>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800cc1c:	bf00      	nop

_WAKE_EXIT:
	return ret;
 800cc1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	08010790 	.word	0x08010790
 800cc30:	0800fe78 	.word	0x0800fe78
 800cc34:	0800fe8c 	.word	0x0800fe8c
 800cc38:	0800fea4 	.word	0x0800fea4

0800cc3c <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b088      	sub	sp, #32
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4603      	mov	r3, r0
 800cc44:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800cc46:	2300      	movs	r3, #0
 800cc48:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	61bb      	str	r3, [r7, #24]
 800cc4e:	2300      	movs	r3, #0
 800cc50:	617b      	str	r3, [r7, #20]
	uint32 u32GpReg1 = 0;
 800cc52:	2300      	movs	r3, #0
 800cc54:	613b      	str	r3, [r7, #16]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
 800cc56:	4b4a      	ldr	r3, [pc, #296]	@ (800cd80 <wait_for_bootrom+0x144>)
 800cc58:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	61bb      	str	r3, [r7, #24]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800cc5e:	f241 0014 	movw	r0, #4116	@ 0x1014
 800cc62:	f000 f993 	bl	800cf8c <nm_read_reg>
 800cc66:	61b8      	str	r0, [r7, #24]
		if (reg & 0x80000000) {
 800cc68:	69bb      	ldr	r3, [r7, #24]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	db03      	blt.n	800cc76 <wait_for_bootrom+0x3a>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
 800cc6e:	2001      	movs	r0, #1
 800cc70:	f7fe fab2 	bl	800b1d8 <nm_bsp_sleep>
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800cc74:	e7f3      	b.n	800cc5e <wait_for_bootrom+0x22>
			break;
 800cc76:	bf00      	nop
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
 800cc78:	4842      	ldr	r0, [pc, #264]	@ (800cd84 <wait_for_bootrom+0x148>)
 800cc7a:	f000 f987 	bl	800cf8c <nm_read_reg>
 800cc7e:	61b8      	str	r0, [r7, #24]
	reg &= 0x1;
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	f003 0301 	and.w	r3, r3, #1
 800cc86:	61bb      	str	r3, [r7, #24]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
 800cc88:	69bb      	ldr	r3, [r7, #24]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d125      	bne.n	800ccda <wait_for_bootrom+0x9e>
	{
		reg = 0;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
 800cc92:	e01e      	b.n	800ccd2 <wait_for_bootrom+0x96>
		{
			nm_bsp_sleep(1);
 800cc94:	2001      	movs	r0, #1
 800cc96:	f7fe fa9f 	bl	800b1d8 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
 800cc9a:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 800cc9e:	f000 f975 	bl	800cf8c <nm_read_reg>
 800cca2:	61b8      	str	r0, [r7, #24]

			if(++cnt > (uint32)TIMEOUT)
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	3301      	adds	r3, #1
 800cca8:	617b      	str	r3, [r7, #20]
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d90e      	bls.n	800ccd2 <wait_for_bootrom+0x96>
			{
				M2M_DBG("failed to load firmware from flash.\n");
 800ccb4:	f240 12b1 	movw	r2, #433	@ 0x1b1
 800ccb8:	4933      	ldr	r1, [pc, #204]	@ (800cd88 <wait_for_bootrom+0x14c>)
 800ccba:	4834      	ldr	r0, [pc, #208]	@ (800cd8c <wait_for_bootrom+0x150>)
 800ccbc:	f001 fdc4 	bl	800e848 <iprintf>
 800ccc0:	4833      	ldr	r0, [pc, #204]	@ (800cd90 <wait_for_bootrom+0x154>)
 800ccc2:	f001 fe31 	bl	800e928 <puts>
 800ccc6:	200d      	movs	r0, #13
 800ccc8:	f001 fdd0 	bl	800e86c <putchar>
				ret = M2M_ERR_INIT;
 800cccc:	23fb      	movs	r3, #251	@ 0xfb
 800ccce:	77fb      	strb	r3, [r7, #31]
				goto ERR2;
 800ccd0:	e04f      	b.n	800cd72 <wait_for_bootrom+0x136>
		while(reg != M2M_FINISH_BOOT_ROM)
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	4a2f      	ldr	r2, [pc, #188]	@ (800cd94 <wait_for_bootrom+0x158>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d1dc      	bne.n	800cc94 <wait_for_bootrom+0x58>
			}
		}
	}

	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
 800ccda:	79fb      	ldrb	r3, [r7, #7]
 800ccdc:	2b02      	cmp	r3, #2
 800ccde:	d10a      	bne.n	800ccf6 <wait_for_bootrom+0xba>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800cce0:	492d      	ldr	r1, [pc, #180]	@ (800cd98 <wait_for_bootrom+0x15c>)
 800cce2:	482e      	ldr	r0, [pc, #184]	@ (800cd9c <wait_for_bootrom+0x160>)
 800cce4:	f000 f96c 	bl	800cfc0 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
 800cce8:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 800ccec:	f241 008c 	movw	r0, #4236	@ 0x108c
 800ccf0:	f000 f966 	bl	800cfc0 <nm_write_reg>
 800ccf4:	e01c      	b.n	800cd30 <wait_for_bootrom+0xf4>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
 800ccf6:	79fb      	ldrb	r3, [r7, #7]
 800ccf8:	2b03      	cmp	r3, #3
 800ccfa:	d109      	bne.n	800cd10 <wait_for_bootrom+0xd4>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800ccfc:	4926      	ldr	r1, [pc, #152]	@ (800cd98 <wait_for_bootrom+0x15c>)
 800ccfe:	4827      	ldr	r0, [pc, #156]	@ (800cd9c <wait_for_bootrom+0x160>)
 800cd00:	f000 f95e 	bl	800cfc0 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
 800cd04:	2100      	movs	r1, #0
 800cd06:	f241 008c 	movw	r0, #4236	@ 0x108c
 800cd0a:	f000 f959 	bl	800cfc0 <nm_write_reg>
 800cd0e:	e00f      	b.n	800cd30 <wait_for_bootrom+0xf4>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
 800cd10:	79fb      	ldrb	r3, [r7, #7]
 800cd12:	2b04      	cmp	r3, #4
 800cd14:	d107      	bne.n	800cd26 <wait_for_bootrom+0xea>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
 800cd16:	2380      	movs	r3, #128	@ 0x80
 800cd18:	613b      	str	r3, [r7, #16]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800cd1a:	68f9      	ldr	r1, [r7, #12]
 800cd1c:	f241 008c 	movw	r0, #4236	@ 0x108c
 800cd20:	f000 f94e 	bl	800cfc0 <nm_write_reg>
 800cd24:	e004      	b.n	800cd30 <wait_for_bootrom+0xf4>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800cd26:	68f9      	ldr	r1, [r7, #12]
 800cd28:	f241 008c 	movw	r0, #4236	@ 0x108c
 800cd2c:	f000 f948 	bl	800cfc0 <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
 800cd30:	f7ff fe14 	bl	800c95c <nmi_get_chipid>
 800cd34:	4603      	mov	r3, r0
 800cd36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd3a:	f5b3 7f68 	cmp.w	r3, #928	@ 0x3a0
 800cd3e:	d306      	bcc.n	800cd4e <wait_for_bootrom+0x112>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	f043 0302 	orr.w	r3, r3, #2
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7ff fd8e 	bl	800c868 <chip_apply_conf>
 800cd4c:	e002      	b.n	800cd54 <wait_for_bootrom+0x118>
	} else {
		chip_apply_conf(u32GpReg1);
 800cd4e:	6938      	ldr	r0, [r7, #16]
 800cd50:	f7ff fd8a 	bl	800c868 <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
 800cd54:	4812      	ldr	r0, [pc, #72]	@ (800cda0 <wait_for_bootrom+0x164>)
 800cd56:	f001 fd77 	bl	800e848 <iprintf>
 800cd5a:	68f9      	ldr	r1, [r7, #12]
 800cd5c:	4811      	ldr	r0, [pc, #68]	@ (800cda4 <wait_for_bootrom+0x168>)
 800cd5e:	f001 fd73 	bl	800e848 <iprintf>
 800cd62:	200d      	movs	r0, #13
 800cd64:	f001 fd82 	bl	800e86c <putchar>

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
 800cd68:	490f      	ldr	r1, [pc, #60]	@ (800cda8 <wait_for_bootrom+0x16c>)
 800cd6a:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 800cd6e:	f000 f927 	bl	800cfc0 <nm_write_reg>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
 800cd72:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3720      	adds	r7, #32
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	13771377 	.word	0x13771377
 800cd84:	000207bc 	.word	0x000207bc
 800cd88:	0801079c 	.word	0x0801079c
 800cd8c:	0800fec0 	.word	0x0800fec0
 800cd90:	0800fed4 	.word	0x0800fed4
 800cd94:	10add09e 	.word	0x10add09e
 800cd98:	3c1cd57d 	.word	0x3c1cd57d
 800cd9c:	000207ac 	.word	0x000207ac
 800cda0:	0800fef8 	.word	0x0800fef8
 800cda4:	0800ff04 	.word	0x0800ff04
 800cda8:	ef522f61 	.word	0xef522f61

0800cdac <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
 800cdac:	b5b0      	push	{r4, r5, r7, lr}
 800cdae:	b088      	sub	sp, #32
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	61bb      	str	r3, [r7, #24]
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
 800cdc2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800cdc6:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
 800cdc8:	f241 038c 	movw	r3, #4236	@ 0x108c
 800cdcc:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 800cdce:	4b2e      	ldr	r3, [pc, #184]	@ (800ce88 <wait_for_firmware_start+0xdc>)
 800cdd0:	60bb      	str	r3, [r7, #8]

	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
 800cdd2:	79fb      	ldrb	r3, [r7, #7]
 800cdd4:	2b02      	cmp	r3, #2
 800cdd6:	d002      	beq.n	800cdde <wait_for_firmware_start+0x32>
 800cdd8:	79fb      	ldrb	r3, [r7, #7]
 800cdda:	2b03      	cmp	r3, #3
 800cddc:	d13f      	bne.n	800ce5e <wait_for_firmware_start+0xb2>
		regAddress = NMI_REV_REG;
 800cdde:	4b2b      	ldr	r3, [pc, #172]	@ (800ce8c <wait_for_firmware_start+0xe0>)
 800cde0:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
 800cde2:	4b2b      	ldr	r3, [pc, #172]	@ (800ce90 <wait_for_firmware_start+0xe4>)
 800cde4:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}


	while (checkValue != reg)
 800cde6:	e03a      	b.n	800ce5e <wait_for_firmware_start+0xb2>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
 800cde8:	2002      	movs	r0, #2
 800cdea:	f7fe f9f5 	bl	800b1d8 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
 800cdee:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 800cdf2:	4928      	ldr	r1, [pc, #160]	@ (800ce94 <wait_for_firmware_start+0xe8>)
 800cdf4:	4828      	ldr	r0, [pc, #160]	@ (800ce98 <wait_for_firmware_start+0xec>)
 800cdf6:	f001 fd27 	bl	800e848 <iprintf>
 800cdfa:	f241 008c 	movw	r0, #4236	@ 0x108c
 800cdfe:	f000 f8c5 	bl	800cf8c <nm_read_reg>
 800ce02:	4604      	mov	r4, r0
 800ce04:	f241 008c 	movw	r0, #4236	@ 0x108c
 800ce08:	f000 f8c0 	bl	800cf8c <nm_read_reg>
 800ce0c:	4605      	mov	r5, r0
 800ce0e:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 800ce12:	f000 f8bb 	bl	800cf8c <nm_read_reg>
 800ce16:	4603      	mov	r3, r0
 800ce18:	462a      	mov	r2, r5
 800ce1a:	4621      	mov	r1, r4
 800ce1c:	481f      	ldr	r0, [pc, #124]	@ (800ce9c <wait_for_firmware_start+0xf0>)
 800ce1e:	f001 fd13 	bl	800e848 <iprintf>
 800ce22:	200d      	movs	r0, #13
 800ce24:	f001 fd22 	bl	800e86c <putchar>
		reg = nm_read_reg(regAddress);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 f8ae 	bl	800cf8c <nm_read_reg>
 800ce30:	61b8      	str	r0, [r7, #24]
		if(++cnt >= u32Timeout)
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	3301      	adds	r3, #1
 800ce36:	617b      	str	r3, [r7, #20]
 800ce38:	697a      	ldr	r2, [r7, #20]
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d30e      	bcc.n	800ce5e <wait_for_firmware_start+0xb2>
		{
			M2M_DBG("Time out for wait firmware Run\n");
 800ce40:	f44f 72f7 	mov.w	r2, #494	@ 0x1ee
 800ce44:	4913      	ldr	r1, [pc, #76]	@ (800ce94 <wait_for_firmware_start+0xe8>)
 800ce46:	4814      	ldr	r0, [pc, #80]	@ (800ce98 <wait_for_firmware_start+0xec>)
 800ce48:	f001 fcfe 	bl	800e848 <iprintf>
 800ce4c:	4814      	ldr	r0, [pc, #80]	@ (800cea0 <wait_for_firmware_start+0xf4>)
 800ce4e:	f001 fd6b 	bl	800e928 <puts>
 800ce52:	200d      	movs	r0, #13
 800ce54:	f001 fd0a 	bl	800e86c <putchar>
			ret = M2M_ERR_INIT;
 800ce58:	23fb      	movs	r3, #251	@ 0xfb
 800ce5a:	77fb      	strb	r3, [r7, #31]
			goto ERR;
 800ce5c:	e00e      	b.n	800ce7c <wait_for_firmware_start+0xd0>
	while (checkValue != reg)
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	69ba      	ldr	r2, [r7, #24]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d1c0      	bne.n	800cde8 <wait_for_firmware_start+0x3c>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	4a07      	ldr	r2, [pc, #28]	@ (800ce88 <wait_for_firmware_start+0xdc>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d105      	bne.n	800ce7a <wait_for_firmware_start+0xce>
	{
		nm_write_reg(NMI_STATE_REG, 0);
 800ce6e:	2100      	movs	r1, #0
 800ce70:	f241 008c 	movw	r0, #4236	@ 0x108c
 800ce74:	f000 f8a4 	bl	800cfc0 <nm_write_reg>
 800ce78:	e000      	b.n	800ce7c <wait_for_firmware_start+0xd0>
	}
ERR:
 800ce7a:	bf00      	nop
	return ret;
 800ce7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3720      	adds	r7, #32
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bdb0      	pop	{r4, r5, r7, pc}
 800ce88:	02532636 	.word	0x02532636
 800ce8c:	000207ac 	.word	0x000207ac
 800ce90:	d75dc1c3 	.word	0xd75dc1c3
 800ce94:	080107b0 	.word	0x080107b0
 800ce98:	0800fec0 	.word	0x0800fec0
 800ce9c:	0800ff1c 	.word	0x0800ff1c
 800cea0:	0800ff28 	.word	0x0800ff28

0800cea4 <chip_deinit>:

sint8 chip_deinit(void)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 800ceae:	463b      	mov	r3, r7
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800ceb6:	f000 f875 	bl	800cfa4 <nm_read_reg_with_ret>
 800ceba:	4603      	mov	r3, r0
 800cebc:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800cebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00c      	beq.n	800cee0 <chip_deinit+0x3c>
		M2M_ERR("failed to de-initialize\n");
 800cec6:	f240 2205 	movw	r2, #517	@ 0x205
 800ceca:	4917      	ldr	r1, [pc, #92]	@ (800cf28 <chip_deinit+0x84>)
 800cecc:	4817      	ldr	r0, [pc, #92]	@ (800cf2c <chip_deinit+0x88>)
 800cece:	f001 fcbb 	bl	800e848 <iprintf>
 800ced2:	4817      	ldr	r0, [pc, #92]	@ (800cf30 <chip_deinit+0x8c>)
 800ced4:	f001 fd28 	bl	800e928 <puts>
 800ced8:	200d      	movs	r0, #13
 800ceda:	f001 fcc7 	bl	800e86c <putchar>
		goto ERR1;
 800cede:	e01d      	b.n	800cf1c <chip_deinit+0x78>
	}
	reg &= ~(1 << 10);
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cee6:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	4619      	mov	r1, r3
 800ceec:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800cef0:	f000 f866 	bl	800cfc0 <nm_write_reg>
 800cef4:	4603      	mov	r3, r0
 800cef6:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800cef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d00c      	beq.n	800cf1a <chip_deinit+0x76>
		M2M_ERR("failed to de-initialize\n");
 800cf00:	f240 220b 	movw	r2, #523	@ 0x20b
 800cf04:	4908      	ldr	r1, [pc, #32]	@ (800cf28 <chip_deinit+0x84>)
 800cf06:	4809      	ldr	r0, [pc, #36]	@ (800cf2c <chip_deinit+0x88>)
 800cf08:	f001 fc9e 	bl	800e848 <iprintf>
 800cf0c:	4808      	ldr	r0, [pc, #32]	@ (800cf30 <chip_deinit+0x8c>)
 800cf0e:	f001 fd0b 	bl	800e928 <puts>
 800cf12:	200d      	movs	r0, #13
 800cf14:	f001 fcaa 	bl	800e86c <putchar>
		goto ERR1;
 800cf18:	e000      	b.n	800cf1c <chip_deinit+0x78>
	}

ERR1:
 800cf1a:	bf00      	nop
	return ret;
 800cf1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	080107c8 	.word	0x080107c8
 800cf2c:	0800fe78 	.word	0x0800fe78
 800cf30:	0800ff48 	.word	0x0800ff48

0800cf34 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	73fb      	strb	r3, [r7, #15]
	ret = nm_bus_init(pvInitVal);
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f7fe fa1b 	bl	800b37c <nm_bus_init>
 800cf46:	4603      	mov	r3, r0
 800cf48:	73fb      	strb	r3, [r7, #15]
	return ret;
 800cf4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b082      	sub	sp, #8
 800cf5a:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	71fb      	strb	r3, [r7, #7]
	ret = nm_bus_deinit();
 800cf60:	f7fe fa5e 	bl	800b420 <nm_bus_deinit>
 800cf64:	4603      	mov	r3, r0
 800cf66:	71fb      	strb	r3, [r7, #7]

	return ret;
 800cf68:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	71fb      	strb	r3, [r7, #7]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
 800cf7e:	f000 fce5 	bl	800d94c <nm_spi_reset>
 800cf82:	4603      	mov	r3, r0
#else
#error "Please define bus usage"
#endif

	return ret;
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f001 f9d5 	bl	800e344 <nm_spi_read_reg>
 800cf9a:	4603      	mov	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Please define bus usage"
#endif

}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 800cfae:	6839      	ldr	r1, [r7, #0]
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 ffa1 	bl	800def8 <nm_spi_read_reg_with_ret>
 800cfb6:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Please define bus usage"
#endif
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
 800cfca:	6839      	ldr	r1, [r7, #0]
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 fe5d 	bl	800dc8c <nm_spi_write_reg>
 800cfd2:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Please define bus usage"
#endif
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
 800cfea:	88fb      	ldrh	r3, [r7, #6]
 800cfec:	461a      	mov	r2, r3
 800cfee:	68b9      	ldr	r1, [r7, #8]
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f001 f9b6 	bl	800e362 <nm_spi_read_block>
 800cff6:	4603      	mov	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Please define bus usage"
#endif

}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3710      	adds	r7, #16
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b086      	sub	sp, #24
 800d004:	af00      	add	r7, sp, #0
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	60b9      	str	r1, [r7, #8]
 800d00a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800d00c:	4b20      	ldr	r3, [pc, #128]	@ (800d090 <nm_read_block+0x90>)
 800d00e:	881b      	ldrh	r3, [r3, #0]
 800d010:	3b08      	subs	r3, #8
 800d012:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800d014:	2300      	movs	r3, #0
 800d016:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800d018:	2300      	movs	r3, #0
 800d01a:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800d01c:	8a3b      	ldrh	r3, [r7, #16]
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	429a      	cmp	r2, r3
 800d022:	d80f      	bhi.n	800d044 <nm_read_block+0x44>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
 800d024:	68ba      	ldr	r2, [r7, #8]
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	4413      	add	r3, r2
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	b292      	uxth	r2, r2
 800d02e:	4619      	mov	r1, r3
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f7ff ffd3 	bl	800cfdc <p_nm_read_block>
 800d036:	4603      	mov	r3, r0
 800d038:	b2da      	uxtb	r2, r3
 800d03a:	7cfb      	ldrb	r3, [r7, #19]
 800d03c:	4413      	add	r3, r2
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	74fb      	strb	r3, [r7, #19]
			break;
 800d042:	e01f      	b.n	800d084 <nm_read_block+0x84>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800d044:	68ba      	ldr	r2, [r7, #8]
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	4413      	add	r3, r2
 800d04a:	8a3a      	ldrh	r2, [r7, #16]
 800d04c:	4619      	mov	r1, r3
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	f7ff ffc4 	bl	800cfdc <p_nm_read_block>
 800d054:	4603      	mov	r3, r0
 800d056:	b2da      	uxtb	r2, r3
 800d058:	7cfb      	ldrb	r3, [r7, #19]
 800d05a:	4413      	add	r3, r2
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800d060:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d10c      	bne.n	800d082 <nm_read_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800d068:	8a3b      	ldrh	r3, [r7, #16]
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	1ad3      	subs	r3, r2, r3
 800d06e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800d070:	8a3b      	ldrh	r3, [r7, #16]
 800d072:	697a      	ldr	r2, [r7, #20]
 800d074:	4413      	add	r3, r2
 800d076:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800d078:	8a3b      	ldrh	r3, [r7, #16]
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	4413      	add	r3, r2
 800d07e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800d080:	e7cc      	b.n	800d01c <nm_read_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800d082:	bf00      	nop
		}
	}

	return s8Ret;
 800d084:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3718      	adds	r7, #24
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	2000000c 	.word	0x2000000c

0800d094 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	4613      	mov	r3, r2
 800d0a0:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
 800d0a2:	88fb      	ldrh	r3, [r7, #6]
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	68b9      	ldr	r1, [r7, #8]
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f001 f978 	bl	800e39e <nm_spi_write_block>
 800d0ae:	4603      	mov	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Please define bus usage"
#endif

}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3710      	adds	r7, #16
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b086      	sub	sp, #24
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800d0c4:	4b20      	ldr	r3, [pc, #128]	@ (800d148 <nm_write_block+0x90>)
 800d0c6:	881b      	ldrh	r3, [r3, #0]
 800d0c8:	3b08      	subs	r3, #8
 800d0ca:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800d0d4:	8a3b      	ldrh	r3, [r7, #16]
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d80f      	bhi.n	800d0fc <nm_write_block+0x44>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
 800d0dc:	68ba      	ldr	r2, [r7, #8]
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	b292      	uxth	r2, r2
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f7ff ffd3 	bl	800d094 <p_nm_write_block>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	b2da      	uxtb	r2, r3
 800d0f2:	7cfb      	ldrb	r3, [r7, #19]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	74fb      	strb	r3, [r7, #19]
			break;
 800d0fa:	e01f      	b.n	800d13c <nm_write_block+0x84>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800d0fc:	68ba      	ldr	r2, [r7, #8]
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	4413      	add	r3, r2
 800d102:	8a3a      	ldrh	r2, [r7, #16]
 800d104:	4619      	mov	r1, r3
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	f7ff ffc4 	bl	800d094 <p_nm_write_block>
 800d10c:	4603      	mov	r3, r0
 800d10e:	b2da      	uxtb	r2, r3
 800d110:	7cfb      	ldrb	r3, [r7, #19]
 800d112:	4413      	add	r3, r2
 800d114:	b2db      	uxtb	r3, r3
 800d116:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800d118:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d10c      	bne.n	800d13a <nm_write_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800d120:	8a3b      	ldrh	r3, [r7, #16]
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	1ad3      	subs	r3, r2, r3
 800d126:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800d128:	8a3b      	ldrh	r3, [r7, #16]
 800d12a:	697a      	ldr	r2, [r7, #20]
 800d12c:	4413      	add	r3, r2
 800d12e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800d130:	8a3b      	ldrh	r3, [r7, #16]
 800d132:	68fa      	ldr	r2, [r7, #12]
 800d134:	4413      	add	r3, r2
 800d136:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800d138:	e7cc      	b.n	800d0d4 <nm_write_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800d13a:	bf00      	nop
		}
	}

	return s8Ret;
 800d13c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d140:	4618      	mov	r0, r3
 800d142:	3718      	adds	r7, #24
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	2000000c 	.word	0x2000000c

0800d14c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b088      	sub	sp, #32
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
 800d154:	2300      	movs	r3, #0
 800d156:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
 800d158:	2300      	movs	r3, #0
 800d15a:	77fb      	strb	r3, [r7, #31]
	tstrGpRegs strgp = {0};
 800d15c:	f107 030c 	add.w	r3, r7, #12
 800d160:	2200      	movs	r2, #0
 800d162:	601a      	str	r2, [r3, #0]
 800d164:	605a      	str	r2, [r3, #4]
	if (pstrRev != NULL)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	f000 8086 	beq.w	800d27a <nm_get_firmware_full_info+0x12e>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
 800d16e:	2228      	movs	r2, #40	@ 0x28
 800d170:	2100      	movs	r1, #0
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f7fe f97c 	bl	800b470 <m2m_memset>
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
 800d178:	f107 0314 	add.w	r3, r7, #20
 800d17c:	4619      	mov	r1, r3
 800d17e:	4842      	ldr	r0, [pc, #264]	@ (800d288 <nm_get_firmware_full_info+0x13c>)
 800d180:	f7ff ff10 	bl	800cfa4 <nm_read_reg_with_ret>
 800d184:	4603      	mov	r3, r0
 800d186:	77fb      	strb	r3, [r7, #31]
		if(ret == M2M_SUCCESS)
 800d188:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d174      	bne.n	800d27a <nm_get_firmware_full_info+0x12e>
		{
			if(reg != 0)
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d06e      	beq.n	800d274 <nm_get_firmware_full_info+0x128>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800d19c:	f107 010c 	add.w	r1, r7, #12
 800d1a0:	2208      	movs	r2, #8
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7ff ff2c 	bl	800d000 <nm_read_block>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	77fb      	strb	r3, [r7, #31]
				if(ret == M2M_SUCCESS)
 800d1ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d163      	bne.n	800d27c <nm_get_firmware_full_info+0x130>
				{
					reg = strgp.u32Firmware_Ota_rev;
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	617b      	str	r3, [r7, #20]
					if(reg != 0)
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d054      	beq.n	800d26e <nm_get_firmware_full_info+0x122>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800d1ca:	2228      	movs	r2, #40	@ 0x28
 800d1cc:	6879      	ldr	r1, [r7, #4]
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7ff ff16 	bl	800d000 <nm_read_block>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	77fb      	strb	r3, [r7, #31]
						if(ret == M2M_SUCCESS)
 800d1d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d14d      	bne.n	800d27c <nm_get_firmware_full_info+0x130>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	791b      	ldrb	r3, [r3, #4]
 800d1e4:	021b      	lsls	r3, r3, #8
 800d1e6:	b21a      	sxth	r2, r3
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	795b      	ldrb	r3, [r3, #5]
 800d1ec:	011b      	lsls	r3, r3, #4
 800d1ee:	b21b      	sxth	r3, r3
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	b21b      	sxth	r3, r3
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	b21a      	sxth	r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	799b      	ldrb	r3, [r3, #6]
 800d1fc:	b21b      	sxth	r3, r3
 800d1fe:	f003 030f 	and.w	r3, r3, #15
 800d202:	b21b      	sxth	r3, r3
 800d204:	4313      	orrs	r3, r2
 800d206:	b21b      	sxth	r3, r3
 800d208:	83bb      	strh	r3, [r7, #28]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 800d20a:	f241 3377 	movw	r3, #4983	@ 0x1377
 800d20e:	837b      	strh	r3, [r7, #26]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	79db      	ldrb	r3, [r3, #7]
 800d214:	021b      	lsls	r3, r3, #8
 800d216:	b21a      	sxth	r2, r3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	7a1b      	ldrb	r3, [r3, #8]
 800d21c:	011b      	lsls	r3, r3, #4
 800d21e:	b21b      	sxth	r3, r3
 800d220:	b2db      	uxtb	r3, r3
 800d222:	b21b      	sxth	r3, r3
 800d224:	4313      	orrs	r3, r2
 800d226:	b21a      	sxth	r2, r3
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	7a5b      	ldrb	r3, [r3, #9]
 800d22c:	b21b      	sxth	r3, r3
 800d22e:	f003 030f 	and.w	r3, r3, #15
 800d232:	b21b      	sxth	r3, r3
 800d234:	4313      	orrs	r3, r2
 800d236:	b21b      	sxth	r3, r3
 800d238:	833b      	strh	r3, [r7, #24]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
 800d23a:	8bbb      	ldrh	r3, [r7, #28]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d005      	beq.n	800d24c <nm_get_firmware_full_info+0x100>
 800d240:	8b3b      	ldrh	r3, [r7, #24]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d002      	beq.n	800d24c <nm_get_firmware_full_info+0x100>
 800d246:	8b3b      	ldrh	r3, [r7, #24]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d102      	bne.n	800d252 <nm_get_firmware_full_info+0x106>
								ret = M2M_ERR_FAIL;
 800d24c:	23f4      	movs	r3, #244	@ 0xf4
 800d24e:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800d250:	e014      	b.n	800d27c <nm_get_firmware_full_info+0x130>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
 800d252:	8b7a      	ldrh	r2, [r7, #26]
 800d254:	8b3b      	ldrh	r3, [r7, #24]
 800d256:	429a      	cmp	r2, r3
 800d258:	d202      	bcs.n	800d260 <nm_get_firmware_full_info+0x114>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
 800d25a:	23f3      	movs	r3, #243	@ 0xf3
 800d25c:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800d25e:	e00d      	b.n	800d27c <nm_get_firmware_full_info+0x130>
							}
							if(curr_drv_ver >  curr_firm_ver) {
 800d260:	8b7a      	ldrh	r2, [r7, #26]
 800d262:	8bbb      	ldrh	r3, [r7, #28]
 800d264:	429a      	cmp	r2, r3
 800d266:	d909      	bls.n	800d27c <nm_get_firmware_full_info+0x130>
								/*The current driver should be equal or less than the firmware version*/

								/* Testing since firmware has been upgraded to newest version */
								ret = M2M_ERR_FW_VER_MISMATCH;
 800d268:	23f3      	movs	r3, #243	@ 0xf3
 800d26a:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800d26c:	e006      	b.n	800d27c <nm_get_firmware_full_info+0x130>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
 800d26e:	23f4      	movs	r3, #244	@ 0xf4
 800d270:	77fb      	strb	r3, [r7, #31]
 800d272:	e003      	b.n	800d27c <nm_get_firmware_full_info+0x130>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
 800d274:	23f4      	movs	r3, #244	@ 0xf4
 800d276:	77fb      	strb	r3, [r7, #31]
 800d278:	e000      	b.n	800d27c <nm_get_firmware_full_info+0x130>
			}
		}
	}
EXIT:
 800d27a:	bf00      	nop
	return ret;
 800d27c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3720      	adds	r7, #32
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	000c0008 	.word	0x000c0008

0800d28c <nm_drv_init_hold>:
ERR1:
	return ret;
}

sint8 nm_drv_init_hold(void)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800d292:	2300      	movs	r3, #0
 800d294:	71fb      	strb	r3, [r7, #7]

	ret = nm_bus_iface_init(NULL);
 800d296:	2000      	movs	r0, #0
 800d298:	f7ff fe4c 	bl	800cf34 <nm_bus_iface_init>
 800d29c:	4603      	mov	r3, r0
 800d29e:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) {
 800d2a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d00f      	beq.n	800d2c8 <nm_drv_init_hold+0x3c>
		M2M_ERR("[nmi start]: fail init bus\n");
 800d2a8:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 800d2ac:	4911      	ldr	r1, [pc, #68]	@ (800d2f4 <nm_drv_init_hold+0x68>)
 800d2ae:	4812      	ldr	r0, [pc, #72]	@ (800d2f8 <nm_drv_init_hold+0x6c>)
 800d2b0:	f001 faca 	bl	800e848 <iprintf>
 800d2b4:	4811      	ldr	r0, [pc, #68]	@ (800d2fc <nm_drv_init_hold+0x70>)
 800d2b6:	f001 fb37 	bl	800e928 <puts>
 800d2ba:	200d      	movs	r0, #13
 800d2bc:	f001 fad6 	bl	800e86c <putchar>
		goto ERR1;
 800d2c0:	bf00      	nop

	return ret;
ERR2:
	nm_bus_iface_deinit();
ERR1:
	return ret;
 800d2c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2c6:	e010      	b.n	800d2ea <nm_drv_init_hold+0x5e>
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
 800d2c8:	480d      	ldr	r0, [pc, #52]	@ (800d300 <nm_drv_init_hold+0x74>)
 800d2ca:	f001 fabd 	bl	800e848 <iprintf>
 800d2ce:	f7ff fb45 	bl	800c95c <nmi_get_chipid>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	480b      	ldr	r0, [pc, #44]	@ (800d304 <nm_drv_init_hold+0x78>)
 800d2d8:	f001 fab6 	bl	800e848 <iprintf>
 800d2dc:	200d      	movs	r0, #13
 800d2de:	f001 fac5 	bl	800e86c <putchar>
	nm_spi_init();
 800d2e2:	f000 ff7f 	bl	800e1e4 <nm_spi_init>
	return ret;
 800d2e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	080107d4 	.word	0x080107d4
 800d2f8:	0800ff74 	.word	0x0800ff74
 800d2fc:	0800ff88 	.word	0x0800ff88
 800d300:	0800ffa4 	.word	0x0800ffa4
 800d304:	0800ffb0 	.word	0x0800ffb0

0800d308 <nm_drv_init_start>:

sint8 nm_drv_init_start(void * arg)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800d310:	2300      	movs	r3, #0
 800d312:	73fb      	strb	r3, [r7, #15]
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;
 800d314:	2301      	movs	r3, #1
 800d316:	73bb      	strb	r3, [r7, #14]

	if(NULL != arg) {
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d00a      	beq.n	800d334 <nm_drv_init_start+0x2c>
		u8Mode = *((uint8 *)arg);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	73bb      	strb	r3, [r7, #14]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
 800d324:	7bbb      	ldrb	r3, [r7, #14]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d002      	beq.n	800d330 <nm_drv_init_start+0x28>
 800d32a:	7bbb      	ldrb	r3, [r7, #14]
 800d32c:	2b04      	cmp	r3, #4
 800d32e:	d901      	bls.n	800d334 <nm_drv_init_start+0x2c>
			u8Mode = M2M_WIFI_MODE_NORMAL;
 800d330:	2301      	movs	r3, #1
 800d332:	73bb      	strb	r3, [r7, #14]
		}
	}

	ret = wait_for_bootrom(u8Mode);
 800d334:	7bbb      	ldrb	r3, [r7, #14]
 800d336:	4618      	mov	r0, r3
 800d338:	f7ff fc80 	bl	800cc3c <wait_for_bootrom>
 800d33c:	4603      	mov	r3, r0
 800d33e:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800d340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d127      	bne.n	800d398 <nm_drv_init_start+0x90>
		goto ERR2;
	}

	ret = wait_for_firmware_start(u8Mode);
 800d348:	7bbb      	ldrb	r3, [r7, #14]
 800d34a:	4618      	mov	r0, r3
 800d34c:	f7ff fd2e 	bl	800cdac <wait_for_firmware_start>
 800d350:	4603      	mov	r3, r0
 800d352:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800d354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d11f      	bne.n	800d39c <nm_drv_init_start+0x94>
		goto ERR2;
	}

	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
 800d35c:	7bbb      	ldrb	r3, [r7, #14]
 800d35e:	2b02      	cmp	r3, #2
 800d360:	d022      	beq.n	800d3a8 <nm_drv_init_start+0xa0>
 800d362:	7bbb      	ldrb	r3, [r7, #14]
 800d364:	2b03      	cmp	r3, #3
 800d366:	d01f      	beq.n	800d3a8 <nm_drv_init_start+0xa0>
		goto ERR1;
	} else {
		/*continue running*/
	}

	ret = enable_interrupts();
 800d368:	f7ff faae 	bl	800c8c8 <enable_interrupts>
 800d36c:	4603      	mov	r3, r0
 800d36e:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800d370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d00c      	beq.n	800d392 <nm_drv_init_start+0x8a>
		M2M_ERR("failed to enable interrupts..\n");
 800d378:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 800d37c:	490e      	ldr	r1, [pc, #56]	@ (800d3b8 <nm_drv_init_start+0xb0>)
 800d37e:	480f      	ldr	r0, [pc, #60]	@ (800d3bc <nm_drv_init_start+0xb4>)
 800d380:	f001 fa62 	bl	800e848 <iprintf>
 800d384:	480e      	ldr	r0, [pc, #56]	@ (800d3c0 <nm_drv_init_start+0xb8>)
 800d386:	f001 facf 	bl	800e928 <puts>
 800d38a:	200d      	movs	r0, #13
 800d38c:	f001 fa6e 	bl	800e86c <putchar>
		goto ERR2;
 800d390:	e005      	b.n	800d39e <nm_drv_init_start+0x96>
	}

	return ret;
 800d392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d396:	e00a      	b.n	800d3ae <nm_drv_init_start+0xa6>
		goto ERR2;
 800d398:	bf00      	nop
 800d39a:	e000      	b.n	800d39e <nm_drv_init_start+0x96>
		goto ERR2;
 800d39c:	bf00      	nop
ERR2:
	nm_bus_iface_deinit();
 800d39e:	f7ff fdda 	bl	800cf56 <nm_bus_iface_deinit>
#ifdef CONF_WINC_USE_SPI
	nm_spi_deinit();
 800d3a2:	f000 ffc1 	bl	800e328 <nm_spi_deinit>
 800d3a6:	e000      	b.n	800d3aa <nm_drv_init_start+0xa2>
		goto ERR1;
 800d3a8:	bf00      	nop
#endif
ERR1:
	return ret;
 800d3aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	080107e8 	.word	0x080107e8
 800d3bc:	0800ff74 	.word	0x0800ff74
 800d3c0:	0800ffc0 	.word	0x0800ffc0

0800d3c4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b084      	sub	sp, #16
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
 800d3cc:	f7ff fd6a 	bl	800cea4 <chip_deinit>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800d3d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d00c      	beq.n	800d3f6 <nm_drv_deinit+0x32>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
 800d3dc:	f240 1281 	movw	r2, #385	@ 0x181
 800d3e0:	491e      	ldr	r1, [pc, #120]	@ (800d45c <nm_drv_deinit+0x98>)
 800d3e2:	481f      	ldr	r0, [pc, #124]	@ (800d460 <nm_drv_deinit+0x9c>)
 800d3e4:	f001 fa30 	bl	800e848 <iprintf>
 800d3e8:	481e      	ldr	r0, [pc, #120]	@ (800d464 <nm_drv_deinit+0xa0>)
 800d3ea:	f001 fa9d 	bl	800e928 <puts>
 800d3ee:	200d      	movs	r0, #13
 800d3f0:	f001 fa3c 	bl	800e86c <putchar>
		goto ERR1;
 800d3f4:	e02c      	b.n	800d450 <nm_drv_deinit+0x8c>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
 800d3f6:	2000      	movs	r0, #0
 800d3f8:	f001 f85c 	bl	800e4b4 <spi_flash_enable>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800d400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d00c      	beq.n	800d422 <nm_drv_deinit+0x5e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
 800d408:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 800d40c:	4913      	ldr	r1, [pc, #76]	@ (800d45c <nm_drv_deinit+0x98>)
 800d40e:	4814      	ldr	r0, [pc, #80]	@ (800d460 <nm_drv_deinit+0x9c>)
 800d410:	f001 fa1a 	bl	800e848 <iprintf>
 800d414:	4814      	ldr	r0, [pc, #80]	@ (800d468 <nm_drv_deinit+0xa4>)
 800d416:	f001 fa87 	bl	800e928 <puts>
 800d41a:	200d      	movs	r0, #13
 800d41c:	f001 fa26 	bl	800e86c <putchar>
		goto ERR1;
 800d420:	e016      	b.n	800d450 <nm_drv_deinit+0x8c>
	}

	ret = nm_bus_iface_deinit();
 800d422:	f7ff fd98 	bl	800cf56 <nm_bus_iface_deinit>
 800d426:	4603      	mov	r3, r0
 800d428:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800d42a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d00c      	beq.n	800d44c <nm_drv_deinit+0x88>
		M2M_ERR("[nmi stop]: fail init bus\n");
 800d432:	f44f 72c7 	mov.w	r2, #398	@ 0x18e
 800d436:	4909      	ldr	r1, [pc, #36]	@ (800d45c <nm_drv_deinit+0x98>)
 800d438:	4809      	ldr	r0, [pc, #36]	@ (800d460 <nm_drv_deinit+0x9c>)
 800d43a:	f001 fa05 	bl	800e848 <iprintf>
 800d43e:	480b      	ldr	r0, [pc, #44]	@ (800d46c <nm_drv_deinit+0xa8>)
 800d440:	f001 fa72 	bl	800e928 <puts>
 800d444:	200d      	movs	r0, #13
 800d446:	f001 fa11 	bl	800e86c <putchar>
		goto ERR1;
 800d44a:	e001      	b.n	800d450 <nm_drv_deinit+0x8c>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
 800d44c:	f000 ff6c 	bl	800e328 <nm_spi_deinit>
#endif

ERR1:
	return ret;
 800d450:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d454:	4618      	mov	r0, r3
 800d456:	3710      	adds	r7, #16
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	080107fc 	.word	0x080107fc
 800d460:	0800ff74 	.word	0x0800ff74
 800d464:	0800ffe0 	.word	0x0800ffe0
 800d468:	08010000 	.word	0x08010000
 800d46c:	08010024 	.word	0x08010024

0800d470 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static inline sint8 nmi_spi_read(uint8 *b, uint16 sz)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	460b      	mov	r3, r1
 800d47a:	807b      	strh	r3, [r7, #2]
    return nm_spi_rw(NULL, b, sz);
 800d47c:	887b      	ldrh	r3, [r7, #2]
 800d47e:	461a      	mov	r2, r3
 800d480:	6879      	ldr	r1, [r7, #4]
 800d482:	2000      	movs	r0, #0
 800d484:	f7fd ff1a 	bl	800b2bc <nm_spi_rw>
 800d488:	4603      	mov	r3, r0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3708      	adds	r7, #8
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}

0800d492 <nmi_spi_write>:
static inline sint8 nmi_spi_write(uint8 *b, uint16 sz)
{
 800d492:	b580      	push	{r7, lr}
 800d494:	b082      	sub	sp, #8
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
 800d49a:	460b      	mov	r3, r1
 800d49c:	807b      	strh	r3, [r7, #2]
    return nm_spi_rw(b, NULL, sz);
 800d49e:	887b      	ldrh	r3, [r7, #2]
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f7fd ff09 	bl	800b2bc <nm_spi_rw>
 800d4aa:	4603      	mov	r3, r0
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3708      	adds	r7, #8
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <nmi_spi_writeread>:
static sint8 nmi_spi_writeread(uint8 *bw, uint8 *br, uint16 sz)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	4613      	mov	r3, r2
 800d4c0:	80fb      	strh	r3, [r7, #6]
    return nm_spi_rw(bw, br, sz);
 800d4c2:	88fb      	ldrh	r3, [r7, #6]
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	68b9      	ldr	r1, [r7, #8]
 800d4c8:	68f8      	ldr	r0, [r7, #12]
 800d4ca:	f7fd fef7 	bl	800b2bc <nm_spi_rw>
 800d4ce:	4603      	mov	r3, r0
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3710      	adds	r7, #16
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static inline uint8 crc7_byte(uint8 crc, uint8 data)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b083      	sub	sp, #12
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	4603      	mov	r3, r0
 800d4e0:	460a      	mov	r2, r1
 800d4e2:	71fb      	strb	r3, [r7, #7]
 800d4e4:	4613      	mov	r3, r2
 800d4e6:	71bb      	strb	r3, [r7, #6]
	return crc7_syndrome_table[(crc << 1) ^ data];
 800d4e8:	79fb      	ldrb	r3, [r7, #7]
 800d4ea:	005a      	lsls	r2, r3, #1
 800d4ec:	79bb      	ldrb	r3, [r7, #6]
 800d4ee:	4053      	eors	r3, r2
 800d4f0:	4a03      	ldr	r2, [pc, #12]	@ (800d500 <crc7_byte+0x28>)
 800d4f2:	5cd3      	ldrb	r3, [r2, r3]
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr
 800d500:	0801080c 	.word	0x0801080c

0800d504 <crc7>:

static inline uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	4603      	mov	r3, r0
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	607a      	str	r2, [r7, #4]
 800d510:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800d512:	e00a      	b.n	800d52a <crc7+0x26>
		crc = crc7_byte(crc, *buffer++);
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	1c5a      	adds	r2, r3, #1
 800d518:	60ba      	str	r2, [r7, #8]
 800d51a:	781a      	ldrb	r2, [r3, #0]
 800d51c:	7bfb      	ldrb	r3, [r7, #15]
 800d51e:	4611      	mov	r1, r2
 800d520:	4618      	mov	r0, r3
 800d522:	f7ff ffd9 	bl	800d4d8 <crc7_byte>
 800d526:	4603      	mov	r3, r0
 800d528:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	1e5a      	subs	r2, r3, #1
 800d52e:	607a      	str	r2, [r7, #4]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d1ef      	bne.n	800d514 <crc7+0x10>
	return crc;
 800d534:	7bfb      	ldrb	r3, [r7, #15]
}
 800d536:	4618      	mov	r0, r3
 800d538:	3710      	adds	r7, #16
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
	...

0800d540 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b088      	sub	sp, #32
 800d544:	af00      	add	r7, sp, #0
 800d546:	60b9      	str	r1, [r7, #8]
 800d548:	607a      	str	r2, [r7, #4]
 800d54a:	603b      	str	r3, [r7, #0]
 800d54c:	4603      	mov	r3, r0
 800d54e:	73fb      	strb	r3, [r7, #15]
	uint8 bc[9];
	uint8 len = 5;
 800d550:	2305      	movs	r3, #5
 800d552:	77fb      	strb	r3, [r7, #31]
	sint8 result = N_OK;
 800d554:	2300      	movs	r3, #0
 800d556:	77bb      	strb	r3, [r7, #30]

	bc[0] = cmd;
 800d558:	7bfb      	ldrb	r3, [r7, #15]
 800d55a:	753b      	strb	r3, [r7, #20]
	switch (cmd) {
 800d55c:	7bfb      	ldrb	r3, [r7, #15]
 800d55e:	3bc1      	subs	r3, #193	@ 0xc1
 800d560:	2b0e      	cmp	r3, #14
 800d562:	f200 80cc 	bhi.w	800d6fe <spi_cmd+0x1be>
 800d566:	a201      	add	r2, pc, #4	@ (adr r2, 800d56c <spi_cmd+0x2c>)
 800d568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d56c:	0800d625 	.word	0x0800d625
 800d570:	0800d625 	.word	0x0800d625
 800d574:	0800d681 	.word	0x0800d681
 800d578:	0800d5c5 	.word	0x0800d5c5
 800d57c:	0800d5ef 	.word	0x0800d5ef
 800d580:	0800d601 	.word	0x0800d601
 800d584:	0800d64f 	.word	0x0800d64f
 800d588:	0800d64f 	.word	0x0800d64f
 800d58c:	0800d6c5 	.word	0x0800d6c5
 800d590:	0800d5a9 	.word	0x0800d5a9
 800d594:	0800d6ff 	.word	0x0800d6ff
 800d598:	0800d6ff 	.word	0x0800d6ff
 800d59c:	0800d6ff 	.word	0x0800d6ff
 800d5a0:	0800d6ff 	.word	0x0800d6ff
 800d5a4:	0800d613 	.word	0x0800d613
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	0c1b      	lsrs	r3, r3, #16
 800d5ac:	b2db      	uxtb	r3, r3
 800d5ae:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	0a1b      	lsrs	r3, r3, #8
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	b2db      	uxtb	r3, r3
 800d5bc:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800d5be:	2305      	movs	r3, #5
 800d5c0:	77fb      	strb	r3, [r7, #31]
		break;
 800d5c2:	e09f      	b.n	800d704 <spi_cmd+0x1c4>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	0a1b      	lsrs	r3, r3, #8
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800d5cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d004      	beq.n	800d5de <spi_cmd+0x9e>
 800d5d4:	7d7b      	ldrb	r3, [r7, #21]
 800d5d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)adr;
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800d5e8:	2305      	movs	r3, #5
 800d5ea:	77fb      	strb	r3, [r7, #31]
		break;
 800d5ec:	e08a      	b.n	800d704 <spi_cmd+0x1c4>
#if defined(CMD_TERMINATE)
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800d5fa:	2305      	movs	r3, #5
 800d5fc:	77fb      	strb	r3, [r7, #31]
		break;
 800d5fe:	e081      	b.n	800d704 <spi_cmd+0x1c4>
#endif
#if defined(CMD_REPEAT)
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
 800d600:	2300      	movs	r3, #0
 800d602:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800d604:	2300      	movs	r3, #0
 800d606:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800d608:	2300      	movs	r3, #0
 800d60a:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800d60c:	2305      	movs	r3, #5
 800d60e:	77fb      	strb	r3, [r7, #31]
		break;
 800d610:	e078      	b.n	800d704 <spi_cmd+0x1c4>
#endif
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
 800d612:	23ff      	movs	r3, #255	@ 0xff
 800d614:	757b      	strb	r3, [r7, #21]
		bc[2] = 0xff;
 800d616:	23ff      	movs	r3, #255	@ 0xff
 800d618:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0xff;
 800d61a:	23ff      	movs	r3, #255	@ 0xff
 800d61c:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800d61e:	2305      	movs	r3, #5
 800d620:	77fb      	strb	r3, [r7, #31]
		break;
 800d622:	e06f      	b.n	800d704 <spi_cmd+0x1c4>
#if defined(CMD_DMA_WRITE) || defined(CMD_DMA_READ)
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	0c1b      	lsrs	r3, r3, #16
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	0a1b      	lsrs	r3, r3, #8
 800d630:	b2db      	uxtb	r3, r3
 800d632:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	b2db      	uxtb	r3, r3
 800d638:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 8);
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	0a1b      	lsrs	r3, r3, #8
 800d63e:	b2db      	uxtb	r3, r3
 800d640:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz);
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	b2db      	uxtb	r3, r3
 800d646:	767b      	strb	r3, [r7, #25]
		len = 7;
 800d648:	2307      	movs	r3, #7
 800d64a:	77fb      	strb	r3, [r7, #31]
		break;
 800d64c:	e05a      	b.n	800d704 <spi_cmd+0x1c4>
#endif
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	0c1b      	lsrs	r3, r3, #16
 800d652:	b2db      	uxtb	r3, r3
 800d654:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	0a1b      	lsrs	r3, r3, #8
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	b2db      	uxtb	r3, r3
 800d662:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 16);
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	0c1b      	lsrs	r3, r3, #16
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz >> 8);
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	0a1b      	lsrs	r3, r3, #8
 800d670:	b2db      	uxtb	r3, r3
 800d672:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(sz);
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	b2db      	uxtb	r3, r3
 800d678:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800d67a:	2308      	movs	r3, #8
 800d67c:	77fb      	strb	r3, [r7, #31]
		break;
 800d67e:	e041      	b.n	800d704 <spi_cmd+0x1c4>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	0a1b      	lsrs	r3, r3, #8
 800d684:	b2db      	uxtb	r3, r3
 800d686:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800d688:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d004      	beq.n	800d69a <spi_cmd+0x15a>
 800d690:	7d7b      	ldrb	r3, [r7, #21]
 800d692:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d696:	b2db      	uxtb	r3, r3
 800d698:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr);
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	b2db      	uxtb	r3, r3
 800d69e:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(u32data >> 24);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	0e1b      	lsrs	r3, r3, #24
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 16);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	0c1b      	lsrs	r3, r3, #16
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 8);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	0a1b      	lsrs	r3, r3, #8
 800d6b4:	b2db      	uxtb	r3, r3
 800d6b6:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800d6be:	2308      	movs	r3, #8
 800d6c0:	77fb      	strb	r3, [r7, #31]
		break;
 800d6c2:	e01f      	b.n	800d704 <spi_cmd+0x1c4>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	0c1b      	lsrs	r3, r3, #16
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	0a1b      	lsrs	r3, r3, #8
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(adr);
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 24);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	0e1b      	lsrs	r3, r3, #24
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 16);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	0c1b      	lsrs	r3, r3, #16
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data >> 8);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	0a1b      	lsrs	r3, r3, #8
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	76bb      	strb	r3, [r7, #26]
		bc[7] = (uint8)(u32data);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	76fb      	strb	r3, [r7, #27]
		len = 9;
 800d6f8:	2309      	movs	r3, #9
 800d6fa:	77fb      	strb	r3, [r7, #31]
		break;
 800d6fc:	e002      	b.n	800d704 <spi_cmd+0x1c4>
	default:
		result = N_FAIL;
 800d6fe:	23ff      	movs	r3, #255	@ 0xff
 800d700:	77bb      	strb	r3, [r7, #30]
		break;
 800d702:	bf00      	nop
	}

    if(result == N_OK) {
 800d704:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d133      	bne.n	800d774 <spi_cmd+0x234>
		if (!gu8Crc_off)
 800d70c:	4b1c      	ldr	r3, [pc, #112]	@ (800d780 <spi_cmd+0x240>)
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d113      	bne.n	800d73c <spi_cmd+0x1fc>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 800d714:	7ffb      	ldrb	r3, [r7, #31]
 800d716:	3b01      	subs	r3, #1
 800d718:	461a      	mov	r2, r3
 800d71a:	f107 0314 	add.w	r3, r7, #20
 800d71e:	4619      	mov	r1, r3
 800d720:	207f      	movs	r0, #127	@ 0x7f
 800d722:	f7ff feef 	bl	800d504 <crc7>
 800d726:	4603      	mov	r3, r0
 800d728:	461a      	mov	r2, r3
 800d72a:	7ffb      	ldrb	r3, [r7, #31]
 800d72c:	3b01      	subs	r3, #1
 800d72e:	0052      	lsls	r2, r2, #1
 800d730:	b2d2      	uxtb	r2, r2
 800d732:	3320      	adds	r3, #32
 800d734:	443b      	add	r3, r7
 800d736:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800d73a:	e002      	b.n	800d742 <spi_cmd+0x202>
		else
			len-=1;
 800d73c:	7ffb      	ldrb	r3, [r7, #31]
 800d73e:	3b01      	subs	r3, #1
 800d740:	77fb      	strb	r3, [r7, #31]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 800d742:	7ffb      	ldrb	r3, [r7, #31]
 800d744:	b29a      	uxth	r2, r3
 800d746:	f107 0314 	add.w	r3, r7, #20
 800d74a:	4611      	mov	r1, r2
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7ff fea0 	bl	800d492 <nmi_spi_write>
 800d752:	4603      	mov	r3, r0
 800d754:	2b00      	cmp	r3, #0
 800d756:	d00d      	beq.n	800d774 <spi_cmd+0x234>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
 800d758:	f240 1203 	movw	r2, #259	@ 0x103
 800d75c:	4909      	ldr	r1, [pc, #36]	@ (800d784 <spi_cmd+0x244>)
 800d75e:	480a      	ldr	r0, [pc, #40]	@ (800d788 <spi_cmd+0x248>)
 800d760:	f001 f872 	bl	800e848 <iprintf>
 800d764:	4809      	ldr	r0, [pc, #36]	@ (800d78c <spi_cmd+0x24c>)
 800d766:	f001 f8df 	bl	800e928 <puts>
 800d76a:	200d      	movs	r0, #13
 800d76c:	f001 f87e 	bl	800e86c <putchar>
			result = N_FAIL;
 800d770:	23ff      	movs	r3, #255	@ 0xff
 800d772:	77bb      	strb	r3, [r7, #30]
		}
	}

	return result;
 800d774:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3720      	adds	r7, #32
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	200006b0 	.word	0x200006b0
 800d784:	0801090c 	.word	0x0801090c
 800d788:	08010040 	.word	0x08010040
 800d78c:	08010054 	.word	0x08010054

0800d790 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b084      	sub	sp, #16
 800d794:	af00      	add	r7, sp, #0
 800d796:	4603      	mov	r3, r0
 800d798:	71fb      	strb	r3, [r7, #7]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
 800d79a:	2300      	movs	r3, #0
 800d79c:	73bb      	strb	r3, [r7, #14]

    if (!gu8Crc_off)
 800d79e:	4b27      	ldr	r3, [pc, #156]	@ (800d83c <spi_data_rsp+0xac>)
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d102      	bne.n	800d7ac <spi_data_rsp+0x1c>
		len = 2;
 800d7a6:	2302      	movs	r3, #2
 800d7a8:	73fb      	strb	r3, [r7, #15]
 800d7aa:	e001      	b.n	800d7b0 <spi_data_rsp+0x20>
	else
		len = 3;
 800d7ac:	2303      	movs	r3, #3
 800d7ae:	73fb      	strb	r3, [r7, #15]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
 800d7b0:	7bfb      	ldrb	r3, [r7, #15]
 800d7b2:	b29a      	uxth	r2, r3
 800d7b4:	f107 0308 	add.w	r3, r7, #8
 800d7b8:	4611      	mov	r1, r2
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7ff fe58 	bl	800d470 <nmi_spi_read>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d00e      	beq.n	800d7e4 <spi_data_rsp+0x54>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
 800d7c6:	f240 1217 	movw	r2, #279	@ 0x117
 800d7ca:	491d      	ldr	r1, [pc, #116]	@ (800d840 <spi_data_rsp+0xb0>)
 800d7cc:	481d      	ldr	r0, [pc, #116]	@ (800d844 <spi_data_rsp+0xb4>)
 800d7ce:	f001 f83b 	bl	800e848 <iprintf>
 800d7d2:	481d      	ldr	r0, [pc, #116]	@ (800d848 <spi_data_rsp+0xb8>)
 800d7d4:	f001 f8a8 	bl	800e928 <puts>
 800d7d8:	200d      	movs	r0, #13
 800d7da:	f001 f847 	bl	800e86c <putchar>
		result = N_FAIL;
 800d7de:	23ff      	movs	r3, #255	@ 0xff
 800d7e0:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800d7e2:	e024      	b.n	800d82e <spi_data_rsp+0x9e>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
 800d7e4:	7bfb      	ldrb	r3, [r7, #15]
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	3310      	adds	r3, #16
 800d7ea:	443b      	add	r3, r7
 800d7ec:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d107      	bne.n	800d804 <spi_data_rsp+0x74>
 800d7f4:	7bfb      	ldrb	r3, [r7, #15]
 800d7f6:	3b02      	subs	r3, #2
 800d7f8:	3310      	adds	r3, #16
 800d7fa:	443b      	add	r3, r7
 800d7fc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800d800:	2bc3      	cmp	r3, #195	@ 0xc3
 800d802:	d013      	beq.n	800d82c <spi_data_rsp+0x9c>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
 800d804:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 800d808:	490d      	ldr	r1, [pc, #52]	@ (800d840 <spi_data_rsp+0xb0>)
 800d80a:	480e      	ldr	r0, [pc, #56]	@ (800d844 <spi_data_rsp+0xb4>)
 800d80c:	f001 f81c 	bl	800e848 <iprintf>
 800d810:	7a3b      	ldrb	r3, [r7, #8]
 800d812:	4619      	mov	r1, r3
 800d814:	7a7b      	ldrb	r3, [r7, #9]
 800d816:	461a      	mov	r2, r3
 800d818:	7abb      	ldrb	r3, [r7, #10]
 800d81a:	480c      	ldr	r0, [pc, #48]	@ (800d84c <spi_data_rsp+0xbc>)
 800d81c:	f001 f814 	bl	800e848 <iprintf>
 800d820:	200d      	movs	r0, #13
 800d822:	f001 f823 	bl	800e86c <putchar>
		result = N_FAIL;
 800d826:	23ff      	movs	r3, #255	@ 0xff
 800d828:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800d82a:	e000      	b.n	800d82e <spi_data_rsp+0x9e>
	}
_fail_:
 800d82c:	bf00      	nop

	return result;
 800d82e:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800d832:	4618      	mov	r0, r3
 800d834:	3710      	adds	r7, #16
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	200006b0 	.word	0x200006b0
 800d840:	08010914 	.word	0x08010914
 800d844:	08010040 	.word	0x08010040
 800d848:	08010080 	.word	0x08010080
 800d84c:	080100a0 	.word	0x080100a0

0800d850 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	4603      	mov	r3, r0
 800d858:	71fb      	strb	r3, [r7, #7]
	uint8 rsp;
	sint8 result = N_OK;
 800d85a:	2300      	movs	r3, #0
 800d85c:	73fb      	strb	r3, [r7, #15]

	/**
		Command/Control response
	**/
#if defined(CMD_TERMINATE)
    if(cmd == CMD_TERMINATE) {
 800d85e:	79fb      	ldrb	r3, [r7, #7]
 800d860:	2bc5      	cmp	r3, #197	@ 0xc5
 800d862:	d10b      	bne.n	800d87c <spi_cmd_rsp+0x2c>
        if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800d864:	f107 030d 	add.w	r3, r7, #13
 800d868:	2101      	movs	r1, #1
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7ff fe00 	bl	800d470 <nmi_spi_read>
 800d870:	4603      	mov	r3, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	d002      	beq.n	800d87c <spi_cmd_rsp+0x2c>
            result = N_FAIL;
 800d876:	23ff      	movs	r3, #255	@ 0xff
 800d878:	73fb      	strb	r3, [r7, #15]
            goto _fail_;
 800d87a:	e05a      	b.n	800d932 <spi_cmd_rsp+0xe2>
        }
    }
#endif
#if defined(CMD_REPEAT)
    if(cmd == CMD_REPEAT) {
 800d87c:	79fb      	ldrb	r3, [r7, #7]
 800d87e:	2bc6      	cmp	r3, #198	@ 0xc6
 800d880:	d10b      	bne.n	800d89a <spi_cmd_rsp+0x4a>
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800d882:	f107 030d 	add.w	r3, r7, #13
 800d886:	2101      	movs	r1, #1
 800d888:	4618      	mov	r0, r3
 800d88a:	f7ff fdf1 	bl	800d470 <nmi_spi_read>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d002      	beq.n	800d89a <spi_cmd_rsp+0x4a>
			result = N_FAIL;
 800d894:	23ff      	movs	r3, #255	@ 0xff
 800d896:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800d898:	e04b      	b.n	800d932 <spi_cmd_rsp+0xe2>
		}
	}
#endif

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800d89a:	230a      	movs	r3, #10
 800d89c:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800d89e:	f107 030d 	add.w	r3, r7, #13
 800d8a2:	2101      	movs	r1, #1
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7ff fde3 	bl	800d470 <nmi_spi_read>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d00e      	beq.n	800d8ce <spi_cmd_rsp+0x7e>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
 800d8b0:	f44f 72a3 	mov.w	r2, #326	@ 0x146
 800d8b4:	4922      	ldr	r1, [pc, #136]	@ (800d940 <spi_cmd_rsp+0xf0>)
 800d8b6:	4823      	ldr	r0, [pc, #140]	@ (800d944 <spi_cmd_rsp+0xf4>)
 800d8b8:	f000 ffc6 	bl	800e848 <iprintf>
 800d8bc:	4822      	ldr	r0, [pc, #136]	@ (800d948 <spi_cmd_rsp+0xf8>)
 800d8be:	f001 f833 	bl	800e928 <puts>
 800d8c2:	200d      	movs	r0, #13
 800d8c4:	f000 ffd2 	bl	800e86c <putchar>
			result = N_FAIL;
 800d8c8:	23ff      	movs	r3, #255	@ 0xff
 800d8ca:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800d8cc:	e031      	b.n	800d932 <spi_cmd_rsp+0xe2>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 800d8ce:	7b7b      	ldrb	r3, [r7, #13]
 800d8d0:	79fa      	ldrb	r2, [r7, #7]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d007      	beq.n	800d8e6 <spi_cmd_rsp+0x96>
 800d8d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8da:	b2da      	uxtb	r2, r3
 800d8dc:	3a01      	subs	r2, #1
 800d8de:	b2d2      	uxtb	r2, r2
 800d8e0:	73ba      	strb	r2, [r7, #14]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	dcdb      	bgt.n	800d89e <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800d8e6:	230a      	movs	r3, #10
 800d8e8:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800d8ea:	f107 030d 	add.w	r3, r7, #13
 800d8ee:	2101      	movs	r1, #1
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7ff fdbd 	bl	800d470 <nmi_spi_read>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00e      	beq.n	800d91a <spi_cmd_rsp+0xca>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
 800d8fc:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 800d900:	490f      	ldr	r1, [pc, #60]	@ (800d940 <spi_cmd_rsp+0xf0>)
 800d902:	4810      	ldr	r0, [pc, #64]	@ (800d944 <spi_cmd_rsp+0xf4>)
 800d904:	f000 ffa0 	bl	800e848 <iprintf>
 800d908:	480f      	ldr	r0, [pc, #60]	@ (800d948 <spi_cmd_rsp+0xf8>)
 800d90a:	f001 f80d 	bl	800e928 <puts>
 800d90e:	200d      	movs	r0, #13
 800d910:	f000 ffac 	bl	800e86c <putchar>
			result = N_FAIL;
 800d914:	23ff      	movs	r3, #255	@ 0xff
 800d916:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800d918:	e00b      	b.n	800d932 <spi_cmd_rsp+0xe2>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 800d91a:	7b7b      	ldrb	r3, [r7, #13]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d007      	beq.n	800d930 <spi_cmd_rsp+0xe0>
 800d920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d924:	b2da      	uxtb	r2, r3
 800d926:	3a01      	subs	r2, #1
 800d928:	b2d2      	uxtb	r2, r2
 800d92a:	73ba      	strb	r2, [r7, #14]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	dcdc      	bgt.n	800d8ea <spi_cmd_rsp+0x9a>

_fail_:
 800d930:	bf00      	nop

	return result;
 800d932:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d936:	4618      	mov	r0, r3
 800d938:	3710      	adds	r7, #16
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	08010924 	.word	0x08010924
 800d944:	08010040 	.word	0x08010040
 800d948:	080100d0 	.word	0x080100d0

0800d94c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b086      	sub	sp, #24
 800d950:	af02      	add	r7, sp, #8
	//M2M_INFO("Reset Spi\n");
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800d952:	2300      	movs	r3, #0
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	2300      	movs	r3, #0
 800d958:	2200      	movs	r2, #0
 800d95a:	2100      	movs	r1, #0
 800d95c:	20cf      	movs	r0, #207	@ 0xcf
 800d95e:	f7ff fdef 	bl	800d540 <spi_cmd>

	if(spi_cmd_rsp(CMD_RESET) != N_OK) {
 800d962:	20cf      	movs	r0, #207	@ 0xcf
 800d964:	f7ff ff74 	bl	800d850 <spi_cmd_rsp>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d028      	beq.n	800d9c0 <nm_spi_reset+0x74>
		// Reset command failed, need to send repeated 1's until reset occurs
		uint8 w_buf[8] = {0xFF};
 800d96e:	23ff      	movs	r3, #255	@ 0xff
 800d970:	60bb      	str	r3, [r7, #8]
 800d972:	2300      	movs	r3, #0
 800d974:	60fb      	str	r3, [r7, #12]
		uint8 r_buf[8];
		M2M_ERR("[nmi spi]: Failed rst cmd response\n");
 800d976:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800d97a:	4914      	ldr	r1, [pc, #80]	@ (800d9cc <nm_spi_reset+0x80>)
 800d97c:	4814      	ldr	r0, [pc, #80]	@ (800d9d0 <nm_spi_reset+0x84>)
 800d97e:	f000 ff63 	bl	800e848 <iprintf>
 800d982:	4814      	ldr	r0, [pc, #80]	@ (800d9d4 <nm_spi_reset+0x88>)
 800d984:	f000 ffd0 	bl	800e928 <puts>
 800d988:	200d      	movs	r0, #13
 800d98a:	f000 ff6f 	bl	800e86c <putchar>
		nmi_spi_writeread(w_buf, r_buf, 8);
 800d98e:	4639      	mov	r1, r7
 800d990:	f107 0308 	add.w	r3, r7, #8
 800d994:	2208      	movs	r2, #8
 800d996:	4618      	mov	r0, r3
 800d998:	f7ff fd8c 	bl	800d4b4 <nmi_spi_writeread>
		if(r_buf[7] != 0xFF)
 800d99c:	79fb      	ldrb	r3, [r7, #7]
 800d99e:	2bff      	cmp	r3, #255	@ 0xff
 800d9a0:	d00e      	beq.n	800d9c0 <nm_spi_reset+0x74>
		{
			M2M_ERR("[nmi spi]: Failed repeated reset\n");
 800d9a2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800d9a6:	4909      	ldr	r1, [pc, #36]	@ (800d9cc <nm_spi_reset+0x80>)
 800d9a8:	4809      	ldr	r0, [pc, #36]	@ (800d9d0 <nm_spi_reset+0x84>)
 800d9aa:	f000 ff4d 	bl	800e848 <iprintf>
 800d9ae:	480a      	ldr	r0, [pc, #40]	@ (800d9d8 <nm_spi_reset+0x8c>)
 800d9b0:	f000 ffba 	bl	800e928 <puts>
 800d9b4:	200d      	movs	r0, #13
 800d9b6:	f000 ff59 	bl	800e86c <putchar>
			return N_FAIL;
 800d9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d9be:	e000      	b.n	800d9c2 <nm_spi_reset+0x76>
		}
	}
	return N_OK;
 800d9c0:	2300      	movs	r3, #0
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3710      	adds	r7, #16
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	08010930 	.word	0x08010930
 800d9d0:	08010040 	.word	0x08010040
 800d9d4:	08010104 	.word	0x08010104
 800d9d8:	08010128 	.word	0x08010128

0800d9dc <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b086      	sub	sp, #24
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	807b      	strh	r3, [r7, #2]
 800d9e8:	4613      	mov	r3, r2
 800d9ea:	707b      	strb	r3, [r7, #1]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	747b      	strb	r3, [r7, #17]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	82bb      	strh	r3, [r7, #20]
	do {
		if (sz <= DATA_PKT_SZ)
 800d9f4:	887b      	ldrh	r3, [r7, #2]
 800d9f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d9fa:	d802      	bhi.n	800da02 <spi_data_read+0x26>
			nbytes = sz;
 800d9fc:	887b      	ldrh	r3, [r7, #2]
 800d9fe:	827b      	strh	r3, [r7, #18]
 800da00:	e002      	b.n	800da08 <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800da02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800da06:	827b      	strh	r3, [r7, #18]

		/**
			Data Response header
		**/
		retry = SPI_RESP_RETRY_COUNT;
 800da08:	230a      	movs	r3, #10
 800da0a:	82fb      	strh	r3, [r7, #22]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800da0c:	f107 030b 	add.w	r3, r7, #11
 800da10:	2101      	movs	r1, #1
 800da12:	4618      	mov	r0, r3
 800da14:	f7ff fd2c 	bl	800d470 <nmi_spi_read>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00e      	beq.n	800da3c <spi_data_read+0x60>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
 800da1e:	f44f 72c5 	mov.w	r2, #394	@ 0x18a
 800da22:	4942      	ldr	r1, [pc, #264]	@ (800db2c <spi_data_read+0x150>)
 800da24:	4842      	ldr	r0, [pc, #264]	@ (800db30 <spi_data_read+0x154>)
 800da26:	f000 ff0f 	bl	800e848 <iprintf>
 800da2a:	4842      	ldr	r0, [pc, #264]	@ (800db34 <spi_data_read+0x158>)
 800da2c:	f000 ff7c 	bl	800e928 <puts>
 800da30:	200d      	movs	r0, #13
 800da32:	f000 ff1b 	bl	800e86c <putchar>
				result = N_FAIL;
 800da36:	23ff      	movs	r3, #255	@ 0xff
 800da38:	747b      	strb	r3, [r7, #17]
				break;
 800da3a:	e00e      	b.n	800da5a <spi_data_read+0x7e>
			}
            if((rsp & 0xf0) == 0xf0)
 800da3c:	7afb      	ldrb	r3, [r7, #11]
 800da3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800da42:	2bf0      	cmp	r3, #240	@ 0xf0
 800da44:	d008      	beq.n	800da58 <spi_data_read+0x7c>
				break;
		} while (retry--);
 800da46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	3a01      	subs	r2, #1
 800da4e:	b292      	uxth	r2, r2
 800da50:	82fa      	strh	r2, [r7, #22]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d1da      	bne.n	800da0c <spi_data_read+0x30>
 800da56:	e000      	b.n	800da5a <spi_data_read+0x7e>
				break;
 800da58:	bf00      	nop

		if (result == N_FAIL)
 800da5a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800da5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da62:	d05c      	beq.n	800db1e <spi_data_read+0x142>
			break;

		if (retry <= 0) {
 800da64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	dc10      	bgt.n	800da8e <spi_data_read+0xb2>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
 800da6c:	f44f 72cb 	mov.w	r2, #406	@ 0x196
 800da70:	492e      	ldr	r1, [pc, #184]	@ (800db2c <spi_data_read+0x150>)
 800da72:	482f      	ldr	r0, [pc, #188]	@ (800db30 <spi_data_read+0x154>)
 800da74:	f000 fee8 	bl	800e848 <iprintf>
 800da78:	7afb      	ldrb	r3, [r7, #11]
 800da7a:	4619      	mov	r1, r3
 800da7c:	482e      	ldr	r0, [pc, #184]	@ (800db38 <spi_data_read+0x15c>)
 800da7e:	f000 fee3 	bl	800e848 <iprintf>
 800da82:	200d      	movs	r0, #13
 800da84:	f000 fef2 	bl	800e86c <putchar>
			result = N_FAIL;
 800da88:	23ff      	movs	r3, #255	@ 0xff
 800da8a:	747b      	strb	r3, [r7, #17]
			break;
 800da8c:	e048      	b.n	800db20 <spi_data_read+0x144>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 800da8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	4413      	add	r3, r2
 800da96:	8a7a      	ldrh	r2, [r7, #18]
 800da98:	4611      	mov	r1, r2
 800da9a:	4618      	mov	r0, r3
 800da9c:	f7ff fce8 	bl	800d470 <nmi_spi_read>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00e      	beq.n	800dac4 <spi_data_read+0xe8>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
 800daa6:	f240 129f 	movw	r2, #415	@ 0x19f
 800daaa:	4920      	ldr	r1, [pc, #128]	@ (800db2c <spi_data_read+0x150>)
 800daac:	4820      	ldr	r0, [pc, #128]	@ (800db30 <spi_data_read+0x154>)
 800daae:	f000 fecb 	bl	800e848 <iprintf>
 800dab2:	4822      	ldr	r0, [pc, #136]	@ (800db3c <spi_data_read+0x160>)
 800dab4:	f000 ff38 	bl	800e928 <puts>
 800dab8:	200d      	movs	r0, #13
 800daba:	f000 fed7 	bl	800e86c <putchar>
			result = N_FAIL;
 800dabe:	23ff      	movs	r3, #255	@ 0xff
 800dac0:	747b      	strb	r3, [r7, #17]
			break;
 800dac2:	e02d      	b.n	800db20 <spi_data_read+0x144>
		}
		if(!clockless)
 800dac4:	787b      	ldrb	r3, [r7, #1]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d11b      	bne.n	800db02 <spi_data_read+0x126>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
 800daca:	4b1d      	ldr	r3, [pc, #116]	@ (800db40 <spi_data_read+0x164>)
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d117      	bne.n	800db02 <spi_data_read+0x126>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 800dad2:	f107 030c 	add.w	r3, r7, #12
 800dad6:	2102      	movs	r1, #2
 800dad8:	4618      	mov	r0, r3
 800dada:	f7ff fcc9 	bl	800d470 <nmi_spi_read>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00e      	beq.n	800db02 <spi_data_read+0x126>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
 800dae4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800dae8:	4910      	ldr	r1, [pc, #64]	@ (800db2c <spi_data_read+0x150>)
 800daea:	4811      	ldr	r0, [pc, #68]	@ (800db30 <spi_data_read+0x154>)
 800daec:	f000 feac 	bl	800e848 <iprintf>
 800daf0:	4814      	ldr	r0, [pc, #80]	@ (800db44 <spi_data_read+0x168>)
 800daf2:	f000 ff19 	bl	800e928 <puts>
 800daf6:	200d      	movs	r0, #13
 800daf8:	f000 feb8 	bl	800e86c <putchar>
					result = N_FAIL;
 800dafc:	23ff      	movs	r3, #255	@ 0xff
 800dafe:	747b      	strb	r3, [r7, #17]
					break;
 800db00:	e00e      	b.n	800db20 <spi_data_read+0x144>
				}
			}
		}
		ix += nbytes;
 800db02:	8aba      	ldrh	r2, [r7, #20]
 800db04:	8a7b      	ldrh	r3, [r7, #18]
 800db06:	4413      	add	r3, r2
 800db08:	b29b      	uxth	r3, r3
 800db0a:	82bb      	strh	r3, [r7, #20]
		sz -= nbytes;
 800db0c:	8a7b      	ldrh	r3, [r7, #18]
 800db0e:	887a      	ldrh	r2, [r7, #2]
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	807b      	strh	r3, [r7, #2]

	} while (sz);
 800db14:	887b      	ldrh	r3, [r7, #2]
 800db16:	2b00      	cmp	r3, #0
 800db18:	f47f af6c 	bne.w	800d9f4 <spi_data_read+0x18>
 800db1c:	e000      	b.n	800db20 <spi_data_read+0x144>
			break;
 800db1e:	bf00      	nop

	return result;
 800db20:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800db24:	4618      	mov	r0, r3
 800db26:	3718      	adds	r7, #24
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	08010940 	.word	0x08010940
 800db30:	08010040 	.word	0x08010040
 800db34:	0801014c 	.word	0x0801014c
 800db38:	08010180 	.word	0x08010180
 800db3c:	080101b0 	.word	0x080101b0
 800db40:	200006b0 	.word	0x200006b0
 800db44:	080101e0 	.word	0x080101e0

0800db48 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b086      	sub	sp, #24
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	460b      	mov	r3, r1
 800db52:	807b      	strh	r3, [r7, #2]
    sint16 ix = 0;
 800db54:	2300      	movs	r3, #0
 800db56:	82fb      	strh	r3, [r7, #22]
	uint16 nbytes;
    sint8 result = N_OK;
 800db58:	2300      	movs	r3, #0
 800db5a:	74fb      	strb	r3, [r7, #19]
	uint8 cmd, order, crc[2] = {0};
 800db5c:	2300      	movs	r3, #0
 800db5e:	81bb      	strh	r3, [r7, #12]

	/**
		Data
	**/
	do {
		if (sz <= DATA_PKT_SZ)
 800db60:	887b      	ldrh	r3, [r7, #2]
 800db62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db66:	d802      	bhi.n	800db6e <spi_data_write+0x26>
			nbytes = sz;
 800db68:	887b      	ldrh	r3, [r7, #2]
 800db6a:	82bb      	strh	r3, [r7, #20]
 800db6c:	e002      	b.n	800db74 <spi_data_write+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800db6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800db72:	82bb      	strh	r3, [r7, #20]

		/**
			Write command
		**/
		cmd = 0xf0;
 800db74:	23f0      	movs	r3, #240	@ 0xf0
 800db76:	747b      	strb	r3, [r7, #17]
		if (ix == 0)  {
 800db78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d109      	bne.n	800db94 <spi_data_write+0x4c>
			if (sz <= DATA_PKT_SZ)
 800db80:	887b      	ldrh	r3, [r7, #2]
 800db82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db86:	d802      	bhi.n	800db8e <spi_data_write+0x46>
				order = 0x3;
 800db88:	2303      	movs	r3, #3
 800db8a:	74bb      	strb	r3, [r7, #18]
 800db8c:	e00b      	b.n	800dba6 <spi_data_write+0x5e>
			else
				order = 0x1;
 800db8e:	2301      	movs	r3, #1
 800db90:	74bb      	strb	r3, [r7, #18]
 800db92:	e008      	b.n	800dba6 <spi_data_write+0x5e>
		} else {
			if (sz <= DATA_PKT_SZ)
 800db94:	887b      	ldrh	r3, [r7, #2]
 800db96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db9a:	d802      	bhi.n	800dba2 <spi_data_write+0x5a>
				order = 0x3;
 800db9c:	2303      	movs	r3, #3
 800db9e:	74bb      	strb	r3, [r7, #18]
 800dba0:	e001      	b.n	800dba6 <spi_data_write+0x5e>
			else
				order = 0x2;
 800dba2:	2302      	movs	r3, #2
 800dba4:	74bb      	strb	r3, [r7, #18]
		}
		cmd |= order;
 800dba6:	7c7a      	ldrb	r2, [r7, #17]
 800dba8:	7cbb      	ldrb	r3, [r7, #18]
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	747b      	strb	r3, [r7, #17]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 800dbb0:	f107 0311 	add.w	r3, r7, #17
 800dbb4:	2101      	movs	r1, #1
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7ff fc6b 	bl	800d492 <nmi_spi_write>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d00e      	beq.n	800dbe0 <spi_data_write+0x98>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
 800dbc2:	f44f 72ed 	mov.w	r2, #474	@ 0x1da
 800dbc6:	492b      	ldr	r1, [pc, #172]	@ (800dc74 <spi_data_write+0x12c>)
 800dbc8:	482b      	ldr	r0, [pc, #172]	@ (800dc78 <spi_data_write+0x130>)
 800dbca:	f000 fe3d 	bl	800e848 <iprintf>
 800dbce:	482b      	ldr	r0, [pc, #172]	@ (800dc7c <spi_data_write+0x134>)
 800dbd0:	f000 feaa 	bl	800e928 <puts>
 800dbd4:	200d      	movs	r0, #13
 800dbd6:	f000 fe49 	bl	800e86c <putchar>
			result = N_FAIL;
 800dbda:	23ff      	movs	r3, #255	@ 0xff
 800dbdc:	74fb      	strb	r3, [r7, #19]
			break;
 800dbde:	e043      	b.n	800dc68 <spi_data_write+0x120>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 800dbe0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	4413      	add	r3, r2
 800dbe8:	8aba      	ldrh	r2, [r7, #20]
 800dbea:	4611      	mov	r1, r2
 800dbec:	4618      	mov	r0, r3
 800dbee:	f7ff fc50 	bl	800d492 <nmi_spi_write>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d00e      	beq.n	800dc16 <spi_data_write+0xce>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
 800dbf8:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800dbfc:	491d      	ldr	r1, [pc, #116]	@ (800dc74 <spi_data_write+0x12c>)
 800dbfe:	481e      	ldr	r0, [pc, #120]	@ (800dc78 <spi_data_write+0x130>)
 800dc00:	f000 fe22 	bl	800e848 <iprintf>
 800dc04:	481e      	ldr	r0, [pc, #120]	@ (800dc80 <spi_data_write+0x138>)
 800dc06:	f000 fe8f 	bl	800e928 <puts>
 800dc0a:	200d      	movs	r0, #13
 800dc0c:	f000 fe2e 	bl	800e86c <putchar>
			result = N_FAIL;
 800dc10:	23ff      	movs	r3, #255	@ 0xff
 800dc12:	74fb      	strb	r3, [r7, #19]
			break;
 800dc14:	e028      	b.n	800dc68 <spi_data_write+0x120>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
 800dc16:	4b1b      	ldr	r3, [pc, #108]	@ (800dc84 <spi_data_write+0x13c>)
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d117      	bne.n	800dc4e <spi_data_write+0x106>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 800dc1e:	f107 030c 	add.w	r3, r7, #12
 800dc22:	2102      	movs	r1, #2
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7ff fc34 	bl	800d492 <nmi_spi_write>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d00e      	beq.n	800dc4e <spi_data_write+0x106>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
 800dc30:	f240 12ed 	movw	r2, #493	@ 0x1ed
 800dc34:	490f      	ldr	r1, [pc, #60]	@ (800dc74 <spi_data_write+0x12c>)
 800dc36:	4810      	ldr	r0, [pc, #64]	@ (800dc78 <spi_data_write+0x130>)
 800dc38:	f000 fe06 	bl	800e848 <iprintf>
 800dc3c:	4812      	ldr	r0, [pc, #72]	@ (800dc88 <spi_data_write+0x140>)
 800dc3e:	f000 fe73 	bl	800e928 <puts>
 800dc42:	200d      	movs	r0, #13
 800dc44:	f000 fe12 	bl	800e86c <putchar>
				result = N_FAIL;
 800dc48:	23ff      	movs	r3, #255	@ 0xff
 800dc4a:	74fb      	strb	r3, [r7, #19]
				break;
 800dc4c:	e00c      	b.n	800dc68 <spi_data_write+0x120>
			}
		}

		ix += nbytes;
 800dc4e:	8afa      	ldrh	r2, [r7, #22]
 800dc50:	8abb      	ldrh	r3, [r7, #20]
 800dc52:	4413      	add	r3, r2
 800dc54:	b29b      	uxth	r3, r3
 800dc56:	82fb      	strh	r3, [r7, #22]
		sz -= nbytes;
 800dc58:	887a      	ldrh	r2, [r7, #2]
 800dc5a:	8abb      	ldrh	r3, [r7, #20]
 800dc5c:	1ad3      	subs	r3, r2, r3
 800dc5e:	807b      	strh	r3, [r7, #2]
	} while (sz);
 800dc60:	887b      	ldrh	r3, [r7, #2]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	f47f af7c 	bne.w	800db60 <spi_data_write+0x18>


	return result;
 800dc68:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3718      	adds	r7, #24
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	08010950 	.word	0x08010950
 800dc78:	08010040 	.word	0x08010040
 800dc7c:	08010214 	.word	0x08010214
 800dc80:	0801024c 	.word	0x0801024c
 800dc84:	200006b0 	.word	0x200006b0
 800dc88:	08010280 	.word	0x08010280

0800dc8c <nm_spi_write_reg>:
 *  @param[in]  u32Val
 *                  Value to be written to the register
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_write_reg(uint32 addr, uint32 u32data)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b086      	sub	sp, #24
 800dc90:	af02      	add	r7, sp, #8
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800dc96:	230a      	movs	r3, #10
 800dc98:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_WRITE;
 800dc9e:	23c9      	movs	r3, #201	@ 0xc9
 800dca0:	737b      	strb	r3, [r7, #13]
	uint8 clockless = 0;
 800dca2:	2300      	movs	r3, #0
 800dca4:	733b      	strb	r3, [r7, #12]
	
_RETRY_:	
	if (addr <= 0x30)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2b30      	cmp	r3, #48	@ 0x30
 800dcaa:	d803      	bhi.n	800dcb4 <nm_spi_write_reg+0x28>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
 800dcac:	23c3      	movs	r3, #195	@ 0xc3
 800dcae:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	733b      	strb	r3, [r7, #12]
	}

	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 800dcb4:	7b78      	ldrb	r0, [r7, #13]
 800dcb6:	7b3b      	ldrb	r3, [r7, #12]
 800dcb8:	9300      	str	r3, [sp, #0]
 800dcba:	2304      	movs	r3, #4
 800dcbc:	683a      	ldr	r2, [r7, #0]
 800dcbe:	6879      	ldr	r1, [r7, #4]
 800dcc0:	f7ff fc3e 	bl	800d540 <spi_cmd>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800dcc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d00d      	beq.n	800dcec <nm_spi_write_reg+0x60>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
 800dcd0:	f240 2223 	movw	r2, #547	@ 0x223
 800dcd4:	492a      	ldr	r1, [pc, #168]	@ (800dd80 <nm_spi_write_reg+0xf4>)
 800dcd6:	482b      	ldr	r0, [pc, #172]	@ (800dd84 <nm_spi_write_reg+0xf8>)
 800dcd8:	f000 fdb6 	bl	800e848 <iprintf>
 800dcdc:	6879      	ldr	r1, [r7, #4]
 800dcde:	482a      	ldr	r0, [pc, #168]	@ (800dd88 <nm_spi_write_reg+0xfc>)
 800dce0:	f000 fdb2 	bl	800e848 <iprintf>
 800dce4:	200d      	movs	r0, #13
 800dce6:	f000 fdc1 	bl	800e86c <putchar>
		goto _FAIL_;
 800dcea:	e018      	b.n	800dd1e <nm_spi_write_reg+0x92>
	}

	result = spi_cmd_rsp(cmd);
 800dcec:	7b7b      	ldrb	r3, [r7, #13]
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7ff fdae 	bl	800d850 <spi_cmd_rsp>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800dcf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d00d      	beq.n	800dd1c <nm_spi_write_reg+0x90>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
 800dd00:	f240 2229 	movw	r2, #553	@ 0x229
 800dd04:	491e      	ldr	r1, [pc, #120]	@ (800dd80 <nm_spi_write_reg+0xf4>)
 800dd06:	481f      	ldr	r0, [pc, #124]	@ (800dd84 <nm_spi_write_reg+0xf8>)
 800dd08:	f000 fd9e 	bl	800e848 <iprintf>
 800dd0c:	6879      	ldr	r1, [r7, #4]
 800dd0e:	481f      	ldr	r0, [pc, #124]	@ (800dd8c <nm_spi_write_reg+0x100>)
 800dd10:	f000 fd9a 	bl	800e848 <iprintf>
 800dd14:	200d      	movs	r0, #13
 800dd16:	f000 fda9 	bl	800e86c <putchar>
		goto _FAIL_;
 800dd1a:	e000      	b.n	800dd1e <nm_spi_write_reg+0x92>
	}
_FAIL_:
 800dd1c:	bf00      	nop
	if(result != N_OK)
 800dd1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d026      	beq.n	800dd74 <nm_spi_write_reg+0xe8>
	{
		nm_bsp_sleep(1);
 800dd26:	2001      	movs	r0, #1
 800dd28:	f7fd fa56 	bl	800b1d8 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	2300      	movs	r3, #0
 800dd32:	2200      	movs	r2, #0
 800dd34:	2100      	movs	r1, #0
 800dd36:	20cf      	movs	r0, #207	@ 0xcf
 800dd38:	f7ff fc02 	bl	800d540 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800dd3c:	20cf      	movs	r0, #207	@ 0xcf
 800dd3e:	f7ff fd87 	bl	800d850 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %x %x\n",retry,addr,u32data);
 800dd42:	f240 2232 	movw	r2, #562	@ 0x232
 800dd46:	490e      	ldr	r1, [pc, #56]	@ (800dd80 <nm_spi_write_reg+0xf4>)
 800dd48:	480e      	ldr	r0, [pc, #56]	@ (800dd84 <nm_spi_write_reg+0xf8>)
 800dd4a:	f000 fd7d 	bl	800e848 <iprintf>
 800dd4e:	7bf9      	ldrb	r1, [r7, #15]
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	480e      	ldr	r0, [pc, #56]	@ (800dd90 <nm_spi_write_reg+0x104>)
 800dd56:	f000 fd77 	bl	800e848 <iprintf>
 800dd5a:	200d      	movs	r0, #13
 800dd5c:	f000 fd86 	bl	800e86c <putchar>
		nm_bsp_sleep(1);
 800dd60:	2001      	movs	r0, #1
 800dd62:	f7fd fa39 	bl	800b1d8 <nm_bsp_sleep>
		retry--;
 800dd66:	7bfb      	ldrb	r3, [r7, #15]
 800dd68:	3b01      	subs	r3, #1
 800dd6a:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d000      	beq.n	800dd74 <nm_spi_write_reg+0xe8>
 800dd72:	e798      	b.n	800dca6 <nm_spi_write_reg+0x1a>
	}

	return result;
 800dd74:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3710      	adds	r7, #16
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	08010960 	.word	0x08010960
 800dd84:	08010040 	.word	0x08010040
 800dd88:	080102b8 	.word	0x080102b8
 800dd8c:	080102e4 	.word	0x080102e4
 800dd90:	0801031c 	.word	0x0801031c

0800dd94 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b088      	sub	sp, #32
 800dd98:	af02      	add	r7, sp, #8
 800dd9a:	60f8      	str	r0, [r7, #12]
 800dd9c:	60b9      	str	r1, [r7, #8]
 800dd9e:	4613      	mov	r3, r2
 800dda0:	80fb      	strh	r3, [r7, #6]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800dda2:	230a      	movs	r3, #10
 800dda4:	75bb      	strb	r3, [r7, #22]
	uint8 cmd = CMD_DMA_EXT_WRITE;
 800dda6:	23c7      	movs	r3, #199	@ 0xc7
 800dda8:	757b      	strb	r3, [r7, #21]
_RETRY_:
	/**
		Command
	**/
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
 800ddaa:	88fb      	ldrh	r3, [r7, #6]
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d101      	bne.n	800ddb4 <nm_spi_write+0x20>
		size = 2;
 800ddb0:	2302      	movs	r3, #2
 800ddb2:	80fb      	strh	r3, [r7, #6]

	result = spi_cmd(cmd, addr, 0, size,0);
 800ddb4:	88fb      	ldrh	r3, [r7, #6]
 800ddb6:	7d78      	ldrb	r0, [r7, #21]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	9200      	str	r2, [sp, #0]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	68f9      	ldr	r1, [r7, #12]
 800ddc0:	f7ff fbbe 	bl	800d540 <spi_cmd>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800ddc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d00d      	beq.n	800ddec <nm_spi_write+0x58>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
 800ddd0:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 800ddd4:	4942      	ldr	r1, [pc, #264]	@ (800dee0 <nm_spi_write+0x14c>)
 800ddd6:	4843      	ldr	r0, [pc, #268]	@ (800dee4 <nm_spi_write+0x150>)
 800ddd8:	f000 fd36 	bl	800e848 <iprintf>
 800dddc:	68f9      	ldr	r1, [r7, #12]
 800ddde:	4842      	ldr	r0, [pc, #264]	@ (800dee8 <nm_spi_write+0x154>)
 800dde0:	f000 fd32 	bl	800e848 <iprintf>
 800dde4:	200d      	movs	r0, #13
 800dde6:	f000 fd41 	bl	800e86c <putchar>
		goto _FAIL_;
 800ddea:	e047      	b.n	800de7c <nm_spi_write+0xe8>
	}

	result = spi_cmd_rsp(cmd);
 800ddec:	7d7b      	ldrb	r3, [r7, #21]
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7ff fd2e 	bl	800d850 <spi_cmd_rsp>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800ddf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d00d      	beq.n	800de1c <nm_spi_write+0x88>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
 800de00:	f240 2252 	movw	r2, #594	@ 0x252
 800de04:	4936      	ldr	r1, [pc, #216]	@ (800dee0 <nm_spi_write+0x14c>)
 800de06:	4837      	ldr	r0, [pc, #220]	@ (800dee4 <nm_spi_write+0x150>)
 800de08:	f000 fd1e 	bl	800e848 <iprintf>
 800de0c:	68f9      	ldr	r1, [r7, #12]
 800de0e:	4837      	ldr	r0, [pc, #220]	@ (800deec <nm_spi_write+0x158>)
 800de10:	f000 fd1a 	bl	800e848 <iprintf>
 800de14:	200d      	movs	r0, #13
 800de16:	f000 fd29 	bl	800e86c <putchar>
		goto _FAIL_;
 800de1a:	e02f      	b.n	800de7c <nm_spi_write+0xe8>
	}

	/**
		Data
	**/
	result = spi_data_write(buf, size);
 800de1c:	88fb      	ldrh	r3, [r7, #6]
 800de1e:	4619      	mov	r1, r3
 800de20:	68b8      	ldr	r0, [r7, #8]
 800de22:	f7ff fe91 	bl	800db48 <spi_data_write>
 800de26:	4603      	mov	r3, r0
 800de28:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800de2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d00c      	beq.n	800de4c <nm_spi_write+0xb8>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
 800de32:	f240 225b 	movw	r2, #603	@ 0x25b
 800de36:	492a      	ldr	r1, [pc, #168]	@ (800dee0 <nm_spi_write+0x14c>)
 800de38:	482a      	ldr	r0, [pc, #168]	@ (800dee4 <nm_spi_write+0x150>)
 800de3a:	f000 fd05 	bl	800e848 <iprintf>
 800de3e:	482c      	ldr	r0, [pc, #176]	@ (800def0 <nm_spi_write+0x15c>)
 800de40:	f000 fd72 	bl	800e928 <puts>
 800de44:	200d      	movs	r0, #13
 800de46:	f000 fd11 	bl	800e86c <putchar>
		goto _FAIL_;
 800de4a:	e017      	b.n	800de7c <nm_spi_write+0xe8>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
 800de4c:	7d7b      	ldrb	r3, [r7, #21]
 800de4e:	4618      	mov	r0, r3
 800de50:	f7ff fc9e 	bl	800d790 <spi_data_rsp>
 800de54:	4603      	mov	r3, r0
 800de56:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800de58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d00c      	beq.n	800de7a <nm_spi_write+0xe6>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
 800de60:	f240 2263 	movw	r2, #611	@ 0x263
 800de64:	491e      	ldr	r1, [pc, #120]	@ (800dee0 <nm_spi_write+0x14c>)
 800de66:	481f      	ldr	r0, [pc, #124]	@ (800dee4 <nm_spi_write+0x150>)
 800de68:	f000 fcee 	bl	800e848 <iprintf>
 800de6c:	4820      	ldr	r0, [pc, #128]	@ (800def0 <nm_spi_write+0x15c>)
 800de6e:	f000 fd5b 	bl	800e928 <puts>
 800de72:	200d      	movs	r0, #13
 800de74:	f000 fcfa 	bl	800e86c <putchar>
		goto _FAIL_;
 800de78:	e000      	b.n	800de7c <nm_spi_write+0xe8>
	}
	
_FAIL_:
 800de7a:	bf00      	nop
	if(result != N_OK)
 800de7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d026      	beq.n	800ded2 <nm_spi_write+0x13e>
	{
		nm_bsp_sleep(1);
 800de84:	2001      	movs	r0, #1
 800de86:	f7fd f9a7 	bl	800b1d8 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800de8a:	2300      	movs	r3, #0
 800de8c:	9300      	str	r3, [sp, #0]
 800de8e:	2300      	movs	r3, #0
 800de90:	2200      	movs	r2, #0
 800de92:	2100      	movs	r1, #0
 800de94:	20cf      	movs	r0, #207	@ 0xcf
 800de96:	f7ff fb53 	bl	800d540 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800de9a:	20cf      	movs	r0, #207	@ 0xcf
 800de9c:	f7ff fcd8 	bl	800d850 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %x %d\n",retry,addr,size);
 800dea0:	f240 226d 	movw	r2, #621	@ 0x26d
 800dea4:	490e      	ldr	r1, [pc, #56]	@ (800dee0 <nm_spi_write+0x14c>)
 800dea6:	480f      	ldr	r0, [pc, #60]	@ (800dee4 <nm_spi_write+0x150>)
 800dea8:	f000 fcce 	bl	800e848 <iprintf>
 800deac:	7db9      	ldrb	r1, [r7, #22]
 800deae:	88fb      	ldrh	r3, [r7, #6]
 800deb0:	68fa      	ldr	r2, [r7, #12]
 800deb2:	4810      	ldr	r0, [pc, #64]	@ (800def4 <nm_spi_write+0x160>)
 800deb4:	f000 fcc8 	bl	800e848 <iprintf>
 800deb8:	200d      	movs	r0, #13
 800deba:	f000 fcd7 	bl	800e86c <putchar>
		nm_bsp_sleep(1);
 800debe:	2001      	movs	r0, #1
 800dec0:	f7fd f98a 	bl	800b1d8 <nm_bsp_sleep>
		retry--;
 800dec4:	7dbb      	ldrb	r3, [r7, #22]
 800dec6:	3b01      	subs	r3, #1
 800dec8:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800deca:	7dbb      	ldrb	r3, [r7, #22]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d000      	beq.n	800ded2 <nm_spi_write+0x13e>
 800ded0:	e76b      	b.n	800ddaa <nm_spi_write+0x16>
	}


	return result;
 800ded2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3718      	adds	r7, #24
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	08010974 	.word	0x08010974
 800dee4:	08010040 	.word	0x08010040
 800dee8:	08010338 	.word	0x08010338
 800deec:	08010368 	.word	0x08010368
 800def0:	080103a0 	.word	0x080103a0
 800def4:	080103c8 	.word	0x080103c8

0800def8 <nm_spi_read_reg_with_ret>:
 *  @param[out] pu32RetVal
 *                  Pointer to u32 variable used to return the read value
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_read_reg_with_ret(uint32 addr, uint32 *u32data)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b086      	sub	sp, #24
 800defc:	af02      	add	r7, sp, #8
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800df02:	230a      	movs	r3, #10
 800df04:	73fb      	strb	r3, [r7, #15]
	volatile sint8 result = N_OK;
 800df06:	2300      	movs	r3, #0
 800df08:	733b      	strb	r3, [r7, #12]
	uint8 cmd = CMD_SINGLE_READ;
 800df0a:	23ca      	movs	r3, #202	@ 0xca
 800df0c:	73bb      	strb	r3, [r7, #14]
	uint8 tmp[4];
	uint8 clockless = 0;
 800df0e:	2300      	movs	r3, #0
 800df10:	737b      	strb	r3, [r7, #13]

_RETRY_:

	if (addr <= 0xff)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2bff      	cmp	r3, #255	@ 0xff
 800df16:	d803      	bhi.n	800df20 <nm_spi_read_reg_with_ret+0x28>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
 800df18:	23c4      	movs	r3, #196	@ 0xc4
 800df1a:	73bb      	strb	r3, [r7, #14]
		clockless = 1;
 800df1c:	2301      	movs	r3, #1
 800df1e:	737b      	strb	r3, [r7, #13]
	}

	result = spi_cmd(cmd, addr, 0, 4, clockless);
 800df20:	7bb8      	ldrb	r0, [r7, #14]
 800df22:	7b7b      	ldrb	r3, [r7, #13]
 800df24:	9300      	str	r3, [sp, #0]
 800df26:	2304      	movs	r3, #4
 800df28:	2200      	movs	r2, #0
 800df2a:	6879      	ldr	r1, [r7, #4]
 800df2c:	f7ff fb08 	bl	800d540 <spi_cmd>
 800df30:	4603      	mov	r3, r0
 800df32:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800df34:	7b3b      	ldrb	r3, [r7, #12]
 800df36:	b25b      	sxtb	r3, r3
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d00d      	beq.n	800df58 <nm_spi_read_reg_with_ret+0x60>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
 800df3c:	f240 2295 	movw	r2, #661	@ 0x295
 800df40:	493d      	ldr	r1, [pc, #244]	@ (800e038 <nm_spi_read_reg_with_ret+0x140>)
 800df42:	483e      	ldr	r0, [pc, #248]	@ (800e03c <nm_spi_read_reg_with_ret+0x144>)
 800df44:	f000 fc80 	bl	800e848 <iprintf>
 800df48:	6879      	ldr	r1, [r7, #4]
 800df4a:	483d      	ldr	r0, [pc, #244]	@ (800e040 <nm_spi_read_reg_with_ret+0x148>)
 800df4c:	f000 fc7c 	bl	800e848 <iprintf>
 800df50:	200d      	movs	r0, #13
 800df52:	f000 fc8b 	bl	800e86c <putchar>
		goto _FAIL_;
 800df56:	e03e      	b.n	800dfd6 <nm_spi_read_reg_with_ret+0xde>
	}

	result = spi_cmd_rsp(cmd);
 800df58:	7bbb      	ldrb	r3, [r7, #14]
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7ff fc78 	bl	800d850 <spi_cmd_rsp>
 800df60:	4603      	mov	r3, r0
 800df62:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800df64:	7b3b      	ldrb	r3, [r7, #12]
 800df66:	b25b      	sxtb	r3, r3
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d00d      	beq.n	800df88 <nm_spi_read_reg_with_ret+0x90>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
 800df6c:	f240 229b 	movw	r2, #667	@ 0x29b
 800df70:	4931      	ldr	r1, [pc, #196]	@ (800e038 <nm_spi_read_reg_with_ret+0x140>)
 800df72:	4832      	ldr	r0, [pc, #200]	@ (800e03c <nm_spi_read_reg_with_ret+0x144>)
 800df74:	f000 fc68 	bl	800e848 <iprintf>
 800df78:	6879      	ldr	r1, [r7, #4]
 800df7a:	4832      	ldr	r0, [pc, #200]	@ (800e044 <nm_spi_read_reg_with_ret+0x14c>)
 800df7c:	f000 fc64 	bl	800e848 <iprintf>
 800df80:	200d      	movs	r0, #13
 800df82:	f000 fc73 	bl	800e86c <putchar>
		goto _FAIL_;
 800df86:	e026      	b.n	800dfd6 <nm_spi_read_reg_with_ret+0xde>
	}

	/* to avoid endianness issues */
	result = spi_data_read(&tmp[0], 4, clockless);
 800df88:	7b7a      	ldrb	r2, [r7, #13]
 800df8a:	f107 0308 	add.w	r3, r7, #8
 800df8e:	2104      	movs	r1, #4
 800df90:	4618      	mov	r0, r3
 800df92:	f7ff fd23 	bl	800d9dc <spi_data_read>
 800df96:	4603      	mov	r3, r0
 800df98:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800df9a:	7b3b      	ldrb	r3, [r7, #12]
 800df9c:	b25b      	sxtb	r3, r3
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d00c      	beq.n	800dfbc <nm_spi_read_reg_with_ret+0xc4>
		M2M_ERR("[nmi spi]: Failed data read...\n");
 800dfa2:	f240 22a2 	movw	r2, #674	@ 0x2a2
 800dfa6:	4924      	ldr	r1, [pc, #144]	@ (800e038 <nm_spi_read_reg_with_ret+0x140>)
 800dfa8:	4824      	ldr	r0, [pc, #144]	@ (800e03c <nm_spi_read_reg_with_ret+0x144>)
 800dfaa:	f000 fc4d 	bl	800e848 <iprintf>
 800dfae:	4826      	ldr	r0, [pc, #152]	@ (800e048 <nm_spi_read_reg_with_ret+0x150>)
 800dfb0:	f000 fcba 	bl	800e928 <puts>
 800dfb4:	200d      	movs	r0, #13
 800dfb6:	f000 fc59 	bl	800e86c <putchar>
		goto _FAIL_;
 800dfba:	e00c      	b.n	800dfd6 <nm_spi_read_reg_with_ret+0xde>
	}

	*u32data = tmp[0] |
 800dfbc:	7a3b      	ldrb	r3, [r7, #8]
 800dfbe:	461a      	mov	r2, r3
		((uint32)tmp[1] << 8) |
 800dfc0:	7a7b      	ldrb	r3, [r7, #9]
 800dfc2:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
 800dfc4:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
 800dfc6:	7abb      	ldrb	r3, [r7, #10]
 800dfc8:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
 800dfca:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
 800dfcc:	7afb      	ldrb	r3, [r7, #11]
 800dfce:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
 800dfd0:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
 800dfd6:	7b3b      	ldrb	r3, [r7, #12]
 800dfd8:	b25b      	sxtb	r3, r3
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d026      	beq.n	800e02c <nm_spi_read_reg_with_ret+0x134>
	{
		nm_bsp_sleep(1);
 800dfde:	2001      	movs	r0, #1
 800dfe0:	f7fd f8fa 	bl	800b1d8 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	9300      	str	r3, [sp, #0]
 800dfe8:	2300      	movs	r3, #0
 800dfea:	2200      	movs	r2, #0
 800dfec:	2100      	movs	r1, #0
 800dfee:	20cf      	movs	r0, #207	@ 0xcf
 800dff0:	f7ff faa6 	bl	800d540 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800dff4:	20cf      	movs	r0, #207	@ 0xcf
 800dff6:	f7ff fc2b 	bl	800d850 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
 800dffa:	f240 22b1 	movw	r2, #689	@ 0x2b1
 800dffe:	490e      	ldr	r1, [pc, #56]	@ (800e038 <nm_spi_read_reg_with_ret+0x140>)
 800e000:	480e      	ldr	r0, [pc, #56]	@ (800e03c <nm_spi_read_reg_with_ret+0x144>)
 800e002:	f000 fc21 	bl	800e848 <iprintf>
 800e006:	7bfb      	ldrb	r3, [r7, #15]
 800e008:	687a      	ldr	r2, [r7, #4]
 800e00a:	4619      	mov	r1, r3
 800e00c:	480f      	ldr	r0, [pc, #60]	@ (800e04c <nm_spi_read_reg_with_ret+0x154>)
 800e00e:	f000 fc1b 	bl	800e848 <iprintf>
 800e012:	200d      	movs	r0, #13
 800e014:	f000 fc2a 	bl	800e86c <putchar>
		nm_bsp_sleep(1);
 800e018:	2001      	movs	r0, #1
 800e01a:	f7fd f8dd 	bl	800b1d8 <nm_bsp_sleep>
		retry--;
 800e01e:	7bfb      	ldrb	r3, [r7, #15]
 800e020:	3b01      	subs	r3, #1
 800e022:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800e024:	7bfb      	ldrb	r3, [r7, #15]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d000      	beq.n	800e02c <nm_spi_read_reg_with_ret+0x134>
 800e02a:	e772      	b.n	800df12 <nm_spi_read_reg_with_ret+0x1a>
	}
		
	return result;
 800e02c:	7b3b      	ldrb	r3, [r7, #12]
 800e02e:	b25b      	sxtb	r3, r3
}
 800e030:	4618      	mov	r0, r3
 800e032:	3710      	adds	r7, #16
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	08010984 	.word	0x08010984
 800e03c:	08010040 	.word	0x08010040
 800e040:	080103e4 	.word	0x080103e4
 800e044:	08010410 	.word	0x08010410
 800e048:	08010444 	.word	0x08010444
 800e04c:	08010464 	.word	0x08010464

0800e050 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b088      	sub	sp, #32
 800e054:	af02      	add	r7, sp, #8
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	4613      	mov	r3, r2
 800e05c:	80fb      	strh	r3, [r7, #6]
	uint8 cmd = CMD_DMA_EXT_READ;
 800e05e:	23c8      	movs	r3, #200	@ 0xc8
 800e060:	753b      	strb	r3, [r7, #20]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800e062:	230a      	movs	r3, #10
 800e064:	75bb      	strb	r3, [r7, #22]
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
 800e066:	2300      	movs	r3, #0
 800e068:	757b      	strb	r3, [r7, #21]
_RETRY_:

	/**
		Command
	**/
	if (size == 1)
 800e06a:	88fb      	ldrh	r3, [r7, #6]
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d103      	bne.n	800e078 <nm_spi_read+0x28>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
 800e070:	2302      	movs	r3, #2
 800e072:	80fb      	strh	r3, [r7, #6]
		single_byte_workaround = 1;
 800e074:	2301      	movs	r3, #1
 800e076:	757b      	strb	r3, [r7, #21]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
 800e078:	88fb      	ldrh	r3, [r7, #6]
 800e07a:	7d38      	ldrb	r0, [r7, #20]
 800e07c:	2200      	movs	r2, #0
 800e07e:	9200      	str	r2, [sp, #0]
 800e080:	2200      	movs	r2, #0
 800e082:	68f9      	ldr	r1, [r7, #12]
 800e084:	f7ff fa5c 	bl	800d540 <spi_cmd>
 800e088:	4603      	mov	r3, r0
 800e08a:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e08c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d00d      	beq.n	800e0b0 <nm_spi_read+0x60>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
 800e094:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800e098:	493f      	ldr	r1, [pc, #252]	@ (800e198 <nm_spi_read+0x148>)
 800e09a:	4840      	ldr	r0, [pc, #256]	@ (800e19c <nm_spi_read+0x14c>)
 800e09c:	f000 fbd4 	bl	800e848 <iprintf>
 800e0a0:	68f9      	ldr	r1, [r7, #12]
 800e0a2:	483f      	ldr	r0, [pc, #252]	@ (800e1a0 <nm_spi_read+0x150>)
 800e0a4:	f000 fbd0 	bl	800e848 <iprintf>
 800e0a8:	200d      	movs	r0, #13
 800e0aa:	f000 fbdf 	bl	800e86c <putchar>
		goto _FAIL_;
 800e0ae:	e041      	b.n	800e134 <nm_spi_read+0xe4>
	}

	result = spi_cmd_rsp(cmd);
 800e0b0:	7d3b      	ldrb	r3, [r7, #20]
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7ff fbcc 	bl	800d850 <spi_cmd_rsp>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e0bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d00d      	beq.n	800e0e0 <nm_spi_read+0x90>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
 800e0c4:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800e0c8:	4933      	ldr	r1, [pc, #204]	@ (800e198 <nm_spi_read+0x148>)
 800e0ca:	4834      	ldr	r0, [pc, #208]	@ (800e19c <nm_spi_read+0x14c>)
 800e0cc:	f000 fbbc 	bl	800e848 <iprintf>
 800e0d0:	68f9      	ldr	r1, [r7, #12]
 800e0d2:	4834      	ldr	r0, [pc, #208]	@ (800e1a4 <nm_spi_read+0x154>)
 800e0d4:	f000 fbb8 	bl	800e848 <iprintf>
 800e0d8:	200d      	movs	r0, #13
 800e0da:	f000 fbc7 	bl	800e86c <putchar>
		goto _FAIL_;
 800e0de:	e029      	b.n	800e134 <nm_spi_read+0xe4>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
 800e0e0:	7d7b      	ldrb	r3, [r7, #21]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00c      	beq.n	800e100 <nm_spi_read+0xb0>
	{
		result = spi_data_read(tmp, size,0);
 800e0e6:	88f9      	ldrh	r1, [r7, #6]
 800e0e8:	f107 0310 	add.w	r3, r7, #16
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7ff fc74 	bl	800d9dc <spi_data_read>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	75fb      	strb	r3, [r7, #23]
		buf[0] = tmp[0];
 800e0f8:	7c3a      	ldrb	r2, [r7, #16]
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	701a      	strb	r2, [r3, #0]
 800e0fe:	e007      	b.n	800e110 <nm_spi_read+0xc0>
	}
	else
		result = spi_data_read(buf, size,0);
 800e100:	88fb      	ldrh	r3, [r7, #6]
 800e102:	2200      	movs	r2, #0
 800e104:	4619      	mov	r1, r3
 800e106:	68b8      	ldr	r0, [r7, #8]
 800e108:	f7ff fc68 	bl	800d9dc <spi_data_read>
 800e10c:	4603      	mov	r3, r0
 800e10e:	75fb      	strb	r3, [r7, #23]

	if (result != N_OK) {
 800e110:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d00c      	beq.n	800e132 <nm_spi_read+0xe2>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
 800e118:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800e11c:	491e      	ldr	r1, [pc, #120]	@ (800e198 <nm_spi_read+0x148>)
 800e11e:	481f      	ldr	r0, [pc, #124]	@ (800e19c <nm_spi_read+0x14c>)
 800e120:	f000 fb92 	bl	800e848 <iprintf>
 800e124:	4820      	ldr	r0, [pc, #128]	@ (800e1a8 <nm_spi_read+0x158>)
 800e126:	f000 fbff 	bl	800e928 <puts>
 800e12a:	200d      	movs	r0, #13
 800e12c:	f000 fb9e 	bl	800e86c <putchar>
		goto _FAIL_;
 800e130:	e000      	b.n	800e134 <nm_spi_read+0xe4>
	}

_FAIL_:
 800e132:	bf00      	nop
	if(result != N_OK)
 800e134:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d026      	beq.n	800e18a <nm_spi_read+0x13a>
	{
		nm_bsp_sleep(1);
 800e13c:	2001      	movs	r0, #1
 800e13e:	f7fd f84b 	bl	800b1d8 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e142:	2300      	movs	r3, #0
 800e144:	9300      	str	r3, [sp, #0]
 800e146:	2300      	movs	r3, #0
 800e148:	2200      	movs	r2, #0
 800e14a:	2100      	movs	r1, #0
 800e14c:	20cf      	movs	r0, #207	@ 0xcf
 800e14e:	f7ff f9f7 	bl	800d540 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800e152:	20cf      	movs	r0, #207	@ 0xcf
 800e154:	f7ff fb7c 	bl	800d850 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
 800e158:	f240 22ef 	movw	r2, #751	@ 0x2ef
 800e15c:	490e      	ldr	r1, [pc, #56]	@ (800e198 <nm_spi_read+0x148>)
 800e15e:	480f      	ldr	r0, [pc, #60]	@ (800e19c <nm_spi_read+0x14c>)
 800e160:	f000 fb72 	bl	800e848 <iprintf>
 800e164:	7db9      	ldrb	r1, [r7, #22]
 800e166:	88fb      	ldrh	r3, [r7, #6]
 800e168:	68fa      	ldr	r2, [r7, #12]
 800e16a:	4810      	ldr	r0, [pc, #64]	@ (800e1ac <nm_spi_read+0x15c>)
 800e16c:	f000 fb6c 	bl	800e848 <iprintf>
 800e170:	200d      	movs	r0, #13
 800e172:	f000 fb7b 	bl	800e86c <putchar>
		nm_bsp_sleep(1);
 800e176:	2001      	movs	r0, #1
 800e178:	f7fd f82e 	bl	800b1d8 <nm_bsp_sleep>
		retry--;
 800e17c:	7dbb      	ldrb	r3, [r7, #22]
 800e17e:	3b01      	subs	r3, #1
 800e180:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800e182:	7dbb      	ldrb	r3, [r7, #22]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d000      	beq.n	800e18a <nm_spi_read+0x13a>
 800e188:	e76f      	b.n	800e06a <nm_spi_read+0x1a>
	}

	return result;
 800e18a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3718      	adds	r7, #24
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	080109a0 	.word	0x080109a0
 800e19c:	08010040 	.word	0x08010040
 800e1a0:	0801047c 	.word	0x0801047c
 800e1a4:	080104ac 	.word	0x080104ac
 800e1a8:	080104e4 	.word	0x080104e4
 800e1ac:	0801050c 	.word	0x0801050c

0800e1b0 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
 800e1b6:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800e1ba:	f000 f8c3 	bl	800e344 <nm_spi_read_reg>
 800e1be:	6078      	str	r0, [r7, #4]
	val32 &= ~(0x7 << 4);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1c6:	607b      	str	r3, [r7, #4]
            break;
        case 4096:
            val32 |= (4 << 4);
            break;
        case 8192:
            val32 |= (5 << 4);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800e1ce:	607b      	str	r3, [r7, #4]
            break;
 800e1d0:	bf00      	nop
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
 800e1d2:	6879      	ldr	r1, [r7, #4]
 800e1d4:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800e1d8:	f7ff fd58 	bl	800dc8c <nm_spi_write_reg>
}
 800e1dc:	bf00      	nop
 800e1de:	3708      	adds	r7, #8
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <nm_spi_init>:
*	@fn		nm_spi_init
*	@brief	Initialize the SPI
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_spi_init(void)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
 800e1ee:	4b45      	ldr	r3, [pc, #276]	@ (800e304 <nm_spi_init+0x120>)
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	701a      	strb	r2, [r3, #0]

    if(nm_spi_read_reg_with_ret(NMI_SPI_PROTOCOL_CONFIG, &reg) != M2M_SUCCESS) {
 800e1f4:	463b      	mov	r3, r7
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800e1fc:	f7ff fe7c 	bl	800def8 <nm_spi_read_reg_with_ret>
 800e200:	4603      	mov	r3, r0
 800e202:	2b00      	cmp	r3, #0
 800e204:	d026      	beq.n	800e254 <nm_spi_init+0x70>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
 800e206:	4b3f      	ldr	r3, [pc, #252]	@ (800e304 <nm_spi_init+0x120>)
 800e208:	2201      	movs	r2, #1
 800e20a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retrying with CRC off...\n");
 800e20c:	f240 3231 	movw	r2, #817	@ 0x331
 800e210:	493d      	ldr	r1, [pc, #244]	@ (800e308 <nm_spi_init+0x124>)
 800e212:	483e      	ldr	r0, [pc, #248]	@ (800e30c <nm_spi_init+0x128>)
 800e214:	f000 fb18 	bl	800e848 <iprintf>
 800e218:	483d      	ldr	r0, [pc, #244]	@ (800e310 <nm_spi_init+0x12c>)
 800e21a:	f000 fb85 	bl	800e928 <puts>
 800e21e:	200d      	movs	r0, #13
 800e220:	f000 fb24 	bl	800e86c <putchar>
        if(nm_spi_read_reg_with_ret(NMI_SPI_PROTOCOL_CONFIG, &reg) != M2M_SUCCESS) {
 800e224:	463b      	mov	r3, r7
 800e226:	4619      	mov	r1, r3
 800e228:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800e22c:	f7ff fe64 	bl	800def8 <nm_spi_read_reg_with_ret>
 800e230:	4603      	mov	r3, r0
 800e232:	2b00      	cmp	r3, #0
 800e234:	d00e      	beq.n	800e254 <nm_spi_init+0x70>
			// Read failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
 800e236:	f44f 724d 	mov.w	r2, #820	@ 0x334
 800e23a:	4933      	ldr	r1, [pc, #204]	@ (800e308 <nm_spi_init+0x124>)
 800e23c:	4833      	ldr	r0, [pc, #204]	@ (800e30c <nm_spi_init+0x128>)
 800e23e:	f000 fb03 	bl	800e848 <iprintf>
 800e242:	4834      	ldr	r0, [pc, #208]	@ (800e314 <nm_spi_init+0x130>)
 800e244:	f000 fb70 	bl	800e928 <puts>
 800e248:	200d      	movs	r0, #13
 800e24a:	f000 fb0f 	bl	800e86c <putchar>
            return M2M_ERR_BUS_FAIL;
 800e24e:	f06f 0305 	mvn.w	r3, #5
 800e252:	e053      	b.n	800e2fc <nm_spi_init+0x118>
		}
	}
	if(gu8Crc_off == 0)
 800e254:	4b2b      	ldr	r3, [pc, #172]	@ (800e304 <nm_spi_init+0x120>)
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d126      	bne.n	800e2aa <nm_spi_init+0xc6>
	{
		reg &= ~0xc;	/* disable crc checking */
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	f023 030c 	bic.w	r3, r3, #12
 800e262:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e26a:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800e272:	603b      	str	r3, [r7, #0]
        if(nm_spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg) != M2M_SUCCESS) {
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	4619      	mov	r1, r3
 800e278:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800e27c:	f7ff fd06 	bl	800dc8c <nm_spi_write_reg>
 800e280:	4603      	mov	r3, r0
 800e282:	2b00      	cmp	r3, #0
 800e284:	d00e      	beq.n	800e2a4 <nm_spi_init+0xc0>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
 800e286:	f240 323e 	movw	r2, #830	@ 0x33e
 800e28a:	491f      	ldr	r1, [pc, #124]	@ (800e308 <nm_spi_init+0x124>)
 800e28c:	481f      	ldr	r0, [pc, #124]	@ (800e30c <nm_spi_init+0x128>)
 800e28e:	f000 fadb 	bl	800e848 <iprintf>
 800e292:	4821      	ldr	r0, [pc, #132]	@ (800e318 <nm_spi_init+0x134>)
 800e294:	f000 fb48 	bl	800e928 <puts>
 800e298:	200d      	movs	r0, #13
 800e29a:	f000 fae7 	bl	800e86c <putchar>
            return M2M_ERR_BUS_FAIL;
 800e29e:	f06f 0305 	mvn.w	r3, #5
 800e2a2:	e02b      	b.n	800e2fc <nm_spi_init+0x118>
		}
		gu8Crc_off = 1;
 800e2a4:	4b17      	ldr	r3, [pc, #92]	@ (800e304 <nm_spi_init+0x120>)
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
    if(nm_spi_read_reg_with_ret(0x1000, &chipid) != M2M_SUCCESS) {
 800e2aa:	1d3b      	adds	r3, r7, #4
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e2b2:	f7ff fe21 	bl	800def8 <nm_spi_read_reg_with_ret>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d00e      	beq.n	800e2da <nm_spi_init+0xf6>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
 800e2bc:	f44f 7252 	mov.w	r2, #840	@ 0x348
 800e2c0:	4911      	ldr	r1, [pc, #68]	@ (800e308 <nm_spi_init+0x124>)
 800e2c2:	4812      	ldr	r0, [pc, #72]	@ (800e30c <nm_spi_init+0x128>)
 800e2c4:	f000 fac0 	bl	800e848 <iprintf>
 800e2c8:	4814      	ldr	r0, [pc, #80]	@ (800e31c <nm_spi_init+0x138>)
 800e2ca:	f000 fb2d 	bl	800e928 <puts>
 800e2ce:	200d      	movs	r0, #13
 800e2d0:	f000 facc 	bl	800e86c <putchar>
		return M2M_ERR_BUS_FAIL;
 800e2d4:	f06f 0305 	mvn.w	r3, #5
 800e2d8:	e010      	b.n	800e2fc <nm_spi_init+0x118>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
 800e2da:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 800e2de:	490a      	ldr	r1, [pc, #40]	@ (800e308 <nm_spi_init+0x124>)
 800e2e0:	480f      	ldr	r0, [pc, #60]	@ (800e320 <nm_spi_init+0x13c>)
 800e2e2:	f000 fab1 	bl	800e848 <iprintf>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	480e      	ldr	r0, [pc, #56]	@ (800e324 <nm_spi_init+0x140>)
 800e2ec:	f000 faac 	bl	800e848 <iprintf>
 800e2f0:	200d      	movs	r0, #13
 800e2f2:	f000 fabb 	bl	800e86c <putchar>
	spi_init_pkt_sz();
 800e2f6:	f7ff ff5b 	bl	800e1b0 <spi_init_pkt_sz>


	return M2M_SUCCESS;
 800e2fa:	2300      	movs	r3, #0
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3708      	adds	r7, #8
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}
 800e304:	200006b0 	.word	0x200006b0
 800e308:	080109ac 	.word	0x080109ac
 800e30c:	08010040 	.word	0x08010040
 800e310:	08010528 	.word	0x08010528
 800e314:	08010578 	.word	0x08010578
 800e318:	080105a4 	.word	0x080105a4
 800e31c:	080105d8 	.word	0x080105d8
 800e320:	080105fc 	.word	0x080105fc
 800e324:	08010610 	.word	0x08010610

0800e328 <nm_spi_deinit>:
*	@fn		nm_spi_init
*	@brief	DeInitialize the SPI 
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
*/ 
sint8 nm_spi_deinit(void)
{
 800e328:	b480      	push	{r7}
 800e32a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
 800e32c:	4b04      	ldr	r3, [pc, #16]	@ (800e340 <nm_spi_deinit+0x18>)
 800e32e:	2200      	movs	r2, #0
 800e330:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
 800e332:	2300      	movs	r3, #0
}
 800e334:	4618      	mov	r0, r3
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr
 800e33e:	bf00      	nop
 800e340:	200006b0 	.word	0x200006b0

0800e344 <nm_spi_read_reg>:
*	@param [in]	u32Addr
*				Register address
*	@return	Register value
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

    nm_spi_read_reg_with_ret(u32Addr, &u32Val);
 800e34c:	f107 030c 	add.w	r3, r7, #12
 800e350:	4619      	mov	r1, r3
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f7ff fdd0 	bl	800def8 <nm_spi_read_reg_with_ret>

	return u32Val;
 800e358:	68fb      	ldr	r3, [r7, #12]
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3710      	adds	r7, #16
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b086      	sub	sp, #24
 800e366:	af00      	add	r7, sp, #0
 800e368:	60f8      	str	r0, [r7, #12]
 800e36a:	60b9      	str	r1, [r7, #8]
 800e36c:	4613      	mov	r3, r2
 800e36e:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 800e370:	88fb      	ldrh	r3, [r7, #6]
 800e372:	461a      	mov	r2, r3
 800e374:	68b9      	ldr	r1, [r7, #8]
 800e376:	68f8      	ldr	r0, [r7, #12]
 800e378:	f7ff fe6a 	bl	800e050 <nm_spi_read>
 800e37c:	4603      	mov	r3, r0
 800e37e:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800e380:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d102      	bne.n	800e38e <nm_spi_read_block+0x2c>
 800e388:	2300      	movs	r3, #0
 800e38a:	75fb      	strb	r3, [r7, #23]
 800e38c:	e001      	b.n	800e392 <nm_spi_read_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800e38e:	23fa      	movs	r3, #250	@ 0xfa
 800e390:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800e392:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e396:	4618      	mov	r0, r3
 800e398:	3718      	adds	r7, #24
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}

0800e39e <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800e39e:	b580      	push	{r7, lr}
 800e3a0:	b086      	sub	sp, #24
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	60f8      	str	r0, [r7, #12]
 800e3a6:	60b9      	str	r1, [r7, #8]
 800e3a8:	4613      	mov	r3, r2
 800e3aa:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 800e3ac:	88fb      	ldrh	r3, [r7, #6]
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	68b9      	ldr	r1, [r7, #8]
 800e3b2:	68f8      	ldr	r0, [r7, #12]
 800e3b4:	f7ff fcee 	bl	800dd94 <nm_spi_write>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800e3bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d102      	bne.n	800e3ca <nm_spi_write_block+0x2c>
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	75fb      	strb	r3, [r7, #23]
 800e3c8:	e001      	b.n	800e3ce <nm_spi_write_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800e3ca:	23fa      	movs	r3, #250	@ 0xfa
 800e3cc:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800e3ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3718      	adds	r7, #24
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
	...

0800e3dc <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800e3e2:	463b      	mov	r3, r7
 800e3e4:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	22b9      	movs	r2, #185	@ 0xb9
 800e3ea:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	4810      	ldr	r0, [pc, #64]	@ (800e430 <spi_flash_enter_low_power_mode+0x54>)
 800e3f0:	f7fe fde6 	bl	800cfc0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	480e      	ldr	r0, [pc, #56]	@ (800e434 <spi_flash_enter_low_power_mode+0x58>)
 800e3fc:	f7fe fde0 	bl	800cfc0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800e400:	2101      	movs	r1, #1
 800e402:	480d      	ldr	r0, [pc, #52]	@ (800e438 <spi_flash_enter_low_power_mode+0x5c>)
 800e404:	f7fe fddc 	bl	800cfc0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800e408:	2100      	movs	r1, #0
 800e40a:	480c      	ldr	r0, [pc, #48]	@ (800e43c <spi_flash_enter_low_power_mode+0x60>)
 800e40c:	f7fe fdd8 	bl	800cfc0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
 800e410:	2181      	movs	r1, #129	@ 0x81
 800e412:	480b      	ldr	r0, [pc, #44]	@ (800e440 <spi_flash_enter_low_power_mode+0x64>)
 800e414:	f7fe fdd4 	bl	800cfc0 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800e418:	bf00      	nop
 800e41a:	480a      	ldr	r0, [pc, #40]	@ (800e444 <spi_flash_enter_low_power_mode+0x68>)
 800e41c:	f7fe fdb6 	bl	800cf8c <nm_read_reg>
 800e420:	4603      	mov	r3, r0
 800e422:	2b01      	cmp	r3, #1
 800e424:	d1f9      	bne.n	800e41a <spi_flash_enter_low_power_mode+0x3e>
}
 800e426:	bf00      	nop
 800e428:	bf00      	nop
 800e42a:	3708      	adds	r7, #8
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	00010208 	.word	0x00010208
 800e434:	0001020c 	.word	0x0001020c
 800e438:	00010214 	.word	0x00010214
 800e43c:	0001021c 	.word	0x0001021c
 800e440:	00010204 	.word	0x00010204
 800e444:	00010218 	.word	0x00010218

0800e448 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800e44e:	463b      	mov	r3, r7
 800e450:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	22ab      	movs	r2, #171	@ 0xab
 800e456:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800e458:	2100      	movs	r1, #0
 800e45a:	4810      	ldr	r0, [pc, #64]	@ (800e49c <spi_flash_leave_low_power_mode+0x54>)
 800e45c:	f7fe fdb0 	bl	800cfc0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	4619      	mov	r1, r3
 800e466:	480e      	ldr	r0, [pc, #56]	@ (800e4a0 <spi_flash_leave_low_power_mode+0x58>)
 800e468:	f7fe fdaa 	bl	800cfc0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800e46c:	2101      	movs	r1, #1
 800e46e:	480d      	ldr	r0, [pc, #52]	@ (800e4a4 <spi_flash_leave_low_power_mode+0x5c>)
 800e470:	f7fe fda6 	bl	800cfc0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800e474:	2100      	movs	r1, #0
 800e476:	480c      	ldr	r0, [pc, #48]	@ (800e4a8 <spi_flash_leave_low_power_mode+0x60>)
 800e478:	f7fe fda2 	bl	800cfc0 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
 800e47c:	2181      	movs	r1, #129	@ 0x81
 800e47e:	480b      	ldr	r0, [pc, #44]	@ (800e4ac <spi_flash_leave_low_power_mode+0x64>)
 800e480:	f7fe fd9e 	bl	800cfc0 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800e484:	bf00      	nop
 800e486:	480a      	ldr	r0, [pc, #40]	@ (800e4b0 <spi_flash_leave_low_power_mode+0x68>)
 800e488:	f7fe fd80 	bl	800cf8c <nm_read_reg>
 800e48c:	4603      	mov	r3, r0
 800e48e:	2b01      	cmp	r3, #1
 800e490:	d1f9      	bne.n	800e486 <spi_flash_leave_low_power_mode+0x3e>
}
 800e492:	bf00      	nop
 800e494:	bf00      	nop
 800e496:	3708      	adds	r7, #8
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}
 800e49c:	00010208 	.word	0x00010208
 800e4a0:	0001020c 	.word	0x0001020c
 800e4a4:	00010214 	.word	0x00010214
 800e4a8:	0001021c 	.word	0x0001021c
 800e4ac:	00010204 	.word	0x00010204
 800e4b0:	00010218 	.word	0x00010218

0800e4b4 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b084      	sub	sp, #16
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = M2M_SUCCESS;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	73fb      	strb	r3, [r7, #15]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
 800e4c2:	f7fe fa4b 	bl	800c95c <nmi_get_chipid>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e4cc:	f5b3 7f68 	cmp.w	r3, #928	@ 0x3a0
 800e4d0:	d331      	bcc.n	800e536 <spi_flash_enable+0x82>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
 800e4d2:	f107 0308 	add.w	r3, r7, #8
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	f241 4010 	movw	r0, #5136	@ 0x1410
 800e4dc:	f7fe fd62 	bl	800cfa4 <nm_read_reg_with_ret>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != M2M_SUCCESS) {
 800e4e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d126      	bne.n	800e53a <spi_flash_enable+0x86>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	f023 63ee 	bic.w	r3, r3, #124780544	@ 0x7700000
 800e4f2:	f423 23ee 	bic.w	r3, r3, #487424	@ 0x77000
 800e4f6:	60bb      	str	r3, [r7, #8]
		if(enable) {
 800e4f8:	79fb      	ldrb	r3, [r7, #7]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d00e      	beq.n	800e51c <spi_flash_enable+0x68>
			u32Val |= ((0x1111ul) << 12);
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	f043 7388 	orr.w	r3, r3, #17825792	@ 0x1100000
 800e504:	f443 3388 	orr.w	r3, r3, #69632	@ 0x11000
 800e508:	60bb      	str	r3, [r7, #8]
			nm_write_reg(0x1410, u32Val);
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	4619      	mov	r1, r3
 800e50e:	f241 4010 	movw	r0, #5136	@ 0x1410
 800e512:	f7fe fd55 	bl	800cfc0 <nm_write_reg>
			spi_flash_leave_low_power_mode();
 800e516:	f7ff ff97 	bl	800e448 <spi_flash_leave_low_power_mode>
 800e51a:	e00f      	b.n	800e53c <spi_flash_enable+0x88>
		} else {
			spi_flash_enter_low_power_mode();
 800e51c:	f7ff ff5e 	bl	800e3dc <spi_flash_enter_low_power_mode>
			/* Disable pinmux to SPI flash to minimize leakage. */
			u32Val |= ((0x0010ul) << 12);
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e526:	60bb      	str	r3, [r7, #8]
			nm_write_reg(0x1410, u32Val);
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	4619      	mov	r1, r3
 800e52c:	f241 4010 	movw	r0, #5136	@ 0x1410
 800e530:	f7fe fd46 	bl	800cfc0 <nm_write_reg>
 800e534:	e002      	b.n	800e53c <spi_flash_enable+0x88>
		}
	}
ERR1:
 800e536:	bf00      	nop
 800e538:	e000      	b.n	800e53c <spi_flash_enable+0x88>
			goto ERR1;
 800e53a:	bf00      	nop
	return s8Ret;
 800e53c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e540:	4618      	mov	r0, r3
 800e542:	3710      	adds	r7, #16
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <malloc>:
 800e548:	4b02      	ldr	r3, [pc, #8]	@ (800e554 <malloc+0xc>)
 800e54a:	4601      	mov	r1, r0
 800e54c:	6818      	ldr	r0, [r3, #0]
 800e54e:	f000 b82d 	b.w	800e5ac <_malloc_r>
 800e552:	bf00      	nop
 800e554:	20000020 	.word	0x20000020

0800e558 <free>:
 800e558:	4b02      	ldr	r3, [pc, #8]	@ (800e564 <free+0xc>)
 800e55a:	4601      	mov	r1, r0
 800e55c:	6818      	ldr	r0, [r3, #0]
 800e55e:	f000 bb4f 	b.w	800ec00 <_free_r>
 800e562:	bf00      	nop
 800e564:	20000020 	.word	0x20000020

0800e568 <sbrk_aligned>:
 800e568:	b570      	push	{r4, r5, r6, lr}
 800e56a:	4e0f      	ldr	r6, [pc, #60]	@ (800e5a8 <sbrk_aligned+0x40>)
 800e56c:	460c      	mov	r4, r1
 800e56e:	4605      	mov	r5, r0
 800e570:	6831      	ldr	r1, [r6, #0]
 800e572:	b911      	cbnz	r1, 800e57a <sbrk_aligned+0x12>
 800e574:	f000 faf4 	bl	800eb60 <_sbrk_r>
 800e578:	6030      	str	r0, [r6, #0]
 800e57a:	4621      	mov	r1, r4
 800e57c:	4628      	mov	r0, r5
 800e57e:	f000 faef 	bl	800eb60 <_sbrk_r>
 800e582:	1c43      	adds	r3, r0, #1
 800e584:	d103      	bne.n	800e58e <sbrk_aligned+0x26>
 800e586:	f04f 34ff 	mov.w	r4, #4294967295
 800e58a:	4620      	mov	r0, r4
 800e58c:	bd70      	pop	{r4, r5, r6, pc}
 800e58e:	1cc4      	adds	r4, r0, #3
 800e590:	f024 0403 	bic.w	r4, r4, #3
 800e594:	42a0      	cmp	r0, r4
 800e596:	d0f8      	beq.n	800e58a <sbrk_aligned+0x22>
 800e598:	1a21      	subs	r1, r4, r0
 800e59a:	4628      	mov	r0, r5
 800e59c:	f000 fae0 	bl	800eb60 <_sbrk_r>
 800e5a0:	3001      	adds	r0, #1
 800e5a2:	d1f2      	bne.n	800e58a <sbrk_aligned+0x22>
 800e5a4:	e7ef      	b.n	800e586 <sbrk_aligned+0x1e>
 800e5a6:	bf00      	nop
 800e5a8:	200006b4 	.word	0x200006b4

0800e5ac <_malloc_r>:
 800e5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5b0:	1ccd      	adds	r5, r1, #3
 800e5b2:	4606      	mov	r6, r0
 800e5b4:	f025 0503 	bic.w	r5, r5, #3
 800e5b8:	3508      	adds	r5, #8
 800e5ba:	2d0c      	cmp	r5, #12
 800e5bc:	bf38      	it	cc
 800e5be:	250c      	movcc	r5, #12
 800e5c0:	2d00      	cmp	r5, #0
 800e5c2:	db01      	blt.n	800e5c8 <_malloc_r+0x1c>
 800e5c4:	42a9      	cmp	r1, r5
 800e5c6:	d904      	bls.n	800e5d2 <_malloc_r+0x26>
 800e5c8:	230c      	movs	r3, #12
 800e5ca:	6033      	str	r3, [r6, #0]
 800e5cc:	2000      	movs	r0, #0
 800e5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e6a8 <_malloc_r+0xfc>
 800e5d6:	f000 f869 	bl	800e6ac <__malloc_lock>
 800e5da:	f8d8 3000 	ldr.w	r3, [r8]
 800e5de:	461c      	mov	r4, r3
 800e5e0:	bb44      	cbnz	r4, 800e634 <_malloc_r+0x88>
 800e5e2:	4629      	mov	r1, r5
 800e5e4:	4630      	mov	r0, r6
 800e5e6:	f7ff ffbf 	bl	800e568 <sbrk_aligned>
 800e5ea:	1c43      	adds	r3, r0, #1
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	d158      	bne.n	800e6a2 <_malloc_r+0xf6>
 800e5f0:	f8d8 4000 	ldr.w	r4, [r8]
 800e5f4:	4627      	mov	r7, r4
 800e5f6:	2f00      	cmp	r7, #0
 800e5f8:	d143      	bne.n	800e682 <_malloc_r+0xd6>
 800e5fa:	2c00      	cmp	r4, #0
 800e5fc:	d04b      	beq.n	800e696 <_malloc_r+0xea>
 800e5fe:	6823      	ldr	r3, [r4, #0]
 800e600:	4639      	mov	r1, r7
 800e602:	4630      	mov	r0, r6
 800e604:	eb04 0903 	add.w	r9, r4, r3
 800e608:	f000 faaa 	bl	800eb60 <_sbrk_r>
 800e60c:	4581      	cmp	r9, r0
 800e60e:	d142      	bne.n	800e696 <_malloc_r+0xea>
 800e610:	6821      	ldr	r1, [r4, #0]
 800e612:	4630      	mov	r0, r6
 800e614:	1a6d      	subs	r5, r5, r1
 800e616:	4629      	mov	r1, r5
 800e618:	f7ff ffa6 	bl	800e568 <sbrk_aligned>
 800e61c:	3001      	adds	r0, #1
 800e61e:	d03a      	beq.n	800e696 <_malloc_r+0xea>
 800e620:	6823      	ldr	r3, [r4, #0]
 800e622:	442b      	add	r3, r5
 800e624:	6023      	str	r3, [r4, #0]
 800e626:	f8d8 3000 	ldr.w	r3, [r8]
 800e62a:	685a      	ldr	r2, [r3, #4]
 800e62c:	bb62      	cbnz	r2, 800e688 <_malloc_r+0xdc>
 800e62e:	f8c8 7000 	str.w	r7, [r8]
 800e632:	e00f      	b.n	800e654 <_malloc_r+0xa8>
 800e634:	6822      	ldr	r2, [r4, #0]
 800e636:	1b52      	subs	r2, r2, r5
 800e638:	d420      	bmi.n	800e67c <_malloc_r+0xd0>
 800e63a:	2a0b      	cmp	r2, #11
 800e63c:	d917      	bls.n	800e66e <_malloc_r+0xc2>
 800e63e:	1961      	adds	r1, r4, r5
 800e640:	42a3      	cmp	r3, r4
 800e642:	6025      	str	r5, [r4, #0]
 800e644:	bf18      	it	ne
 800e646:	6059      	strne	r1, [r3, #4]
 800e648:	6863      	ldr	r3, [r4, #4]
 800e64a:	bf08      	it	eq
 800e64c:	f8c8 1000 	streq.w	r1, [r8]
 800e650:	5162      	str	r2, [r4, r5]
 800e652:	604b      	str	r3, [r1, #4]
 800e654:	4630      	mov	r0, r6
 800e656:	f000 f82f 	bl	800e6b8 <__malloc_unlock>
 800e65a:	f104 000b 	add.w	r0, r4, #11
 800e65e:	1d23      	adds	r3, r4, #4
 800e660:	f020 0007 	bic.w	r0, r0, #7
 800e664:	1ac2      	subs	r2, r0, r3
 800e666:	bf1c      	itt	ne
 800e668:	1a1b      	subne	r3, r3, r0
 800e66a:	50a3      	strne	r3, [r4, r2]
 800e66c:	e7af      	b.n	800e5ce <_malloc_r+0x22>
 800e66e:	6862      	ldr	r2, [r4, #4]
 800e670:	42a3      	cmp	r3, r4
 800e672:	bf0c      	ite	eq
 800e674:	f8c8 2000 	streq.w	r2, [r8]
 800e678:	605a      	strne	r2, [r3, #4]
 800e67a:	e7eb      	b.n	800e654 <_malloc_r+0xa8>
 800e67c:	4623      	mov	r3, r4
 800e67e:	6864      	ldr	r4, [r4, #4]
 800e680:	e7ae      	b.n	800e5e0 <_malloc_r+0x34>
 800e682:	463c      	mov	r4, r7
 800e684:	687f      	ldr	r7, [r7, #4]
 800e686:	e7b6      	b.n	800e5f6 <_malloc_r+0x4a>
 800e688:	461a      	mov	r2, r3
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	42a3      	cmp	r3, r4
 800e68e:	d1fb      	bne.n	800e688 <_malloc_r+0xdc>
 800e690:	2300      	movs	r3, #0
 800e692:	6053      	str	r3, [r2, #4]
 800e694:	e7de      	b.n	800e654 <_malloc_r+0xa8>
 800e696:	230c      	movs	r3, #12
 800e698:	4630      	mov	r0, r6
 800e69a:	6033      	str	r3, [r6, #0]
 800e69c:	f000 f80c 	bl	800e6b8 <__malloc_unlock>
 800e6a0:	e794      	b.n	800e5cc <_malloc_r+0x20>
 800e6a2:	6005      	str	r5, [r0, #0]
 800e6a4:	e7d6      	b.n	800e654 <_malloc_r+0xa8>
 800e6a6:	bf00      	nop
 800e6a8:	200006b8 	.word	0x200006b8

0800e6ac <__malloc_lock>:
 800e6ac:	4801      	ldr	r0, [pc, #4]	@ (800e6b4 <__malloc_lock+0x8>)
 800e6ae:	f000 baa4 	b.w	800ebfa <__retarget_lock_acquire_recursive>
 800e6b2:	bf00      	nop
 800e6b4:	200007fc 	.word	0x200007fc

0800e6b8 <__malloc_unlock>:
 800e6b8:	4801      	ldr	r0, [pc, #4]	@ (800e6c0 <__malloc_unlock+0x8>)
 800e6ba:	f000 ba9f 	b.w	800ebfc <__retarget_lock_release_recursive>
 800e6be:	bf00      	nop
 800e6c0:	200007fc 	.word	0x200007fc

0800e6c4 <std>:
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	b510      	push	{r4, lr}
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	6083      	str	r3, [r0, #8]
 800e6cc:	8181      	strh	r1, [r0, #12]
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	6643      	str	r3, [r0, #100]	@ 0x64
 800e6d2:	81c2      	strh	r2, [r0, #14]
 800e6d4:	2208      	movs	r2, #8
 800e6d6:	6183      	str	r3, [r0, #24]
 800e6d8:	e9c0 3300 	strd	r3, r3, [r0]
 800e6dc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e6e0:	305c      	adds	r0, #92	@ 0x5c
 800e6e2:	f000 fa01 	bl	800eae8 <memset>
 800e6e6:	4b0d      	ldr	r3, [pc, #52]	@ (800e71c <std+0x58>)
 800e6e8:	6224      	str	r4, [r4, #32]
 800e6ea:	6263      	str	r3, [r4, #36]	@ 0x24
 800e6ec:	4b0c      	ldr	r3, [pc, #48]	@ (800e720 <std+0x5c>)
 800e6ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e6f0:	4b0c      	ldr	r3, [pc, #48]	@ (800e724 <std+0x60>)
 800e6f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e6f4:	4b0c      	ldr	r3, [pc, #48]	@ (800e728 <std+0x64>)
 800e6f6:	6323      	str	r3, [r4, #48]	@ 0x30
 800e6f8:	4b0c      	ldr	r3, [pc, #48]	@ (800e72c <std+0x68>)
 800e6fa:	429c      	cmp	r4, r3
 800e6fc:	d006      	beq.n	800e70c <std+0x48>
 800e6fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e702:	4294      	cmp	r4, r2
 800e704:	d002      	beq.n	800e70c <std+0x48>
 800e706:	33d0      	adds	r3, #208	@ 0xd0
 800e708:	429c      	cmp	r4, r3
 800e70a:	d105      	bne.n	800e718 <std+0x54>
 800e70c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e714:	f000 ba70 	b.w	800ebf8 <__retarget_lock_init_recursive>
 800e718:	bd10      	pop	{r4, pc}
 800e71a:	bf00      	nop
 800e71c:	0800e939 	.word	0x0800e939
 800e720:	0800e95b 	.word	0x0800e95b
 800e724:	0800e993 	.word	0x0800e993
 800e728:	0800e9b7 	.word	0x0800e9b7
 800e72c:	200006bc 	.word	0x200006bc

0800e730 <stdio_exit_handler>:
 800e730:	4a02      	ldr	r2, [pc, #8]	@ (800e73c <stdio_exit_handler+0xc>)
 800e732:	4903      	ldr	r1, [pc, #12]	@ (800e740 <stdio_exit_handler+0x10>)
 800e734:	4803      	ldr	r0, [pc, #12]	@ (800e744 <stdio_exit_handler+0x14>)
 800e736:	f000 b869 	b.w	800e80c <_fwalk_sglue>
 800e73a:	bf00      	nop
 800e73c:	20000014 	.word	0x20000014
 800e740:	0800f345 	.word	0x0800f345
 800e744:	20000024 	.word	0x20000024

0800e748 <cleanup_stdio>:
 800e748:	6841      	ldr	r1, [r0, #4]
 800e74a:	4b0c      	ldr	r3, [pc, #48]	@ (800e77c <cleanup_stdio+0x34>)
 800e74c:	4299      	cmp	r1, r3
 800e74e:	b510      	push	{r4, lr}
 800e750:	4604      	mov	r4, r0
 800e752:	d001      	beq.n	800e758 <cleanup_stdio+0x10>
 800e754:	f000 fdf6 	bl	800f344 <_fflush_r>
 800e758:	68a1      	ldr	r1, [r4, #8]
 800e75a:	4b09      	ldr	r3, [pc, #36]	@ (800e780 <cleanup_stdio+0x38>)
 800e75c:	4299      	cmp	r1, r3
 800e75e:	d002      	beq.n	800e766 <cleanup_stdio+0x1e>
 800e760:	4620      	mov	r0, r4
 800e762:	f000 fdef 	bl	800f344 <_fflush_r>
 800e766:	68e1      	ldr	r1, [r4, #12]
 800e768:	4b06      	ldr	r3, [pc, #24]	@ (800e784 <cleanup_stdio+0x3c>)
 800e76a:	4299      	cmp	r1, r3
 800e76c:	d004      	beq.n	800e778 <cleanup_stdio+0x30>
 800e76e:	4620      	mov	r0, r4
 800e770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e774:	f000 bde6 	b.w	800f344 <_fflush_r>
 800e778:	bd10      	pop	{r4, pc}
 800e77a:	bf00      	nop
 800e77c:	200006bc 	.word	0x200006bc
 800e780:	20000724 	.word	0x20000724
 800e784:	2000078c 	.word	0x2000078c

0800e788 <global_stdio_init.part.0>:
 800e788:	b510      	push	{r4, lr}
 800e78a:	4b0b      	ldr	r3, [pc, #44]	@ (800e7b8 <global_stdio_init.part.0+0x30>)
 800e78c:	2104      	movs	r1, #4
 800e78e:	4c0b      	ldr	r4, [pc, #44]	@ (800e7bc <global_stdio_init.part.0+0x34>)
 800e790:	4a0b      	ldr	r2, [pc, #44]	@ (800e7c0 <global_stdio_init.part.0+0x38>)
 800e792:	4620      	mov	r0, r4
 800e794:	601a      	str	r2, [r3, #0]
 800e796:	2200      	movs	r2, #0
 800e798:	f7ff ff94 	bl	800e6c4 <std>
 800e79c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	2109      	movs	r1, #9
 800e7a4:	f7ff ff8e 	bl	800e6c4 <std>
 800e7a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e7ac:	2202      	movs	r2, #2
 800e7ae:	2112      	movs	r1, #18
 800e7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7b4:	f7ff bf86 	b.w	800e6c4 <std>
 800e7b8:	200007f4 	.word	0x200007f4
 800e7bc:	200006bc 	.word	0x200006bc
 800e7c0:	0800e731 	.word	0x0800e731

0800e7c4 <__sfp_lock_acquire>:
 800e7c4:	4801      	ldr	r0, [pc, #4]	@ (800e7cc <__sfp_lock_acquire+0x8>)
 800e7c6:	f000 ba18 	b.w	800ebfa <__retarget_lock_acquire_recursive>
 800e7ca:	bf00      	nop
 800e7cc:	200007fd 	.word	0x200007fd

0800e7d0 <__sfp_lock_release>:
 800e7d0:	4801      	ldr	r0, [pc, #4]	@ (800e7d8 <__sfp_lock_release+0x8>)
 800e7d2:	f000 ba13 	b.w	800ebfc <__retarget_lock_release_recursive>
 800e7d6:	bf00      	nop
 800e7d8:	200007fd 	.word	0x200007fd

0800e7dc <__sinit>:
 800e7dc:	b510      	push	{r4, lr}
 800e7de:	4604      	mov	r4, r0
 800e7e0:	f7ff fff0 	bl	800e7c4 <__sfp_lock_acquire>
 800e7e4:	6a23      	ldr	r3, [r4, #32]
 800e7e6:	b11b      	cbz	r3, 800e7f0 <__sinit+0x14>
 800e7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7ec:	f7ff bff0 	b.w	800e7d0 <__sfp_lock_release>
 800e7f0:	4b04      	ldr	r3, [pc, #16]	@ (800e804 <__sinit+0x28>)
 800e7f2:	6223      	str	r3, [r4, #32]
 800e7f4:	4b04      	ldr	r3, [pc, #16]	@ (800e808 <__sinit+0x2c>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d1f5      	bne.n	800e7e8 <__sinit+0xc>
 800e7fc:	f7ff ffc4 	bl	800e788 <global_stdio_init.part.0>
 800e800:	e7f2      	b.n	800e7e8 <__sinit+0xc>
 800e802:	bf00      	nop
 800e804:	0800e749 	.word	0x0800e749
 800e808:	200007f4 	.word	0x200007f4

0800e80c <_fwalk_sglue>:
 800e80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e810:	4607      	mov	r7, r0
 800e812:	4688      	mov	r8, r1
 800e814:	4614      	mov	r4, r2
 800e816:	2600      	movs	r6, #0
 800e818:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e81c:	f1b9 0901 	subs.w	r9, r9, #1
 800e820:	d505      	bpl.n	800e82e <_fwalk_sglue+0x22>
 800e822:	6824      	ldr	r4, [r4, #0]
 800e824:	2c00      	cmp	r4, #0
 800e826:	d1f7      	bne.n	800e818 <_fwalk_sglue+0xc>
 800e828:	4630      	mov	r0, r6
 800e82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e82e:	89ab      	ldrh	r3, [r5, #12]
 800e830:	2b01      	cmp	r3, #1
 800e832:	d907      	bls.n	800e844 <_fwalk_sglue+0x38>
 800e834:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e838:	3301      	adds	r3, #1
 800e83a:	d003      	beq.n	800e844 <_fwalk_sglue+0x38>
 800e83c:	4629      	mov	r1, r5
 800e83e:	4638      	mov	r0, r7
 800e840:	47c0      	blx	r8
 800e842:	4306      	orrs	r6, r0
 800e844:	3568      	adds	r5, #104	@ 0x68
 800e846:	e7e9      	b.n	800e81c <_fwalk_sglue+0x10>

0800e848 <iprintf>:
 800e848:	b40f      	push	{r0, r1, r2, r3}
 800e84a:	b507      	push	{r0, r1, r2, lr}
 800e84c:	4906      	ldr	r1, [pc, #24]	@ (800e868 <iprintf+0x20>)
 800e84e:	ab04      	add	r3, sp, #16
 800e850:	6808      	ldr	r0, [r1, #0]
 800e852:	f853 2b04 	ldr.w	r2, [r3], #4
 800e856:	6881      	ldr	r1, [r0, #8]
 800e858:	9301      	str	r3, [sp, #4]
 800e85a:	f000 fa45 	bl	800ece8 <_vfiprintf_r>
 800e85e:	b003      	add	sp, #12
 800e860:	f85d eb04 	ldr.w	lr, [sp], #4
 800e864:	b004      	add	sp, #16
 800e866:	4770      	bx	lr
 800e868:	20000020 	.word	0x20000020

0800e86c <putchar>:
 800e86c:	4b02      	ldr	r3, [pc, #8]	@ (800e878 <putchar+0xc>)
 800e86e:	4601      	mov	r1, r0
 800e870:	6818      	ldr	r0, [r3, #0]
 800e872:	6882      	ldr	r2, [r0, #8]
 800e874:	f000 bdef 	b.w	800f456 <_putc_r>
 800e878:	20000020 	.word	0x20000020

0800e87c <_puts_r>:
 800e87c:	6a03      	ldr	r3, [r0, #32]
 800e87e:	b570      	push	{r4, r5, r6, lr}
 800e880:	4605      	mov	r5, r0
 800e882:	460e      	mov	r6, r1
 800e884:	6884      	ldr	r4, [r0, #8]
 800e886:	b90b      	cbnz	r3, 800e88c <_puts_r+0x10>
 800e888:	f7ff ffa8 	bl	800e7dc <__sinit>
 800e88c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e88e:	07db      	lsls	r3, r3, #31
 800e890:	d405      	bmi.n	800e89e <_puts_r+0x22>
 800e892:	89a3      	ldrh	r3, [r4, #12]
 800e894:	0598      	lsls	r0, r3, #22
 800e896:	d402      	bmi.n	800e89e <_puts_r+0x22>
 800e898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e89a:	f000 f9ae 	bl	800ebfa <__retarget_lock_acquire_recursive>
 800e89e:	89a3      	ldrh	r3, [r4, #12]
 800e8a0:	0719      	lsls	r1, r3, #28
 800e8a2:	d502      	bpl.n	800e8aa <_puts_r+0x2e>
 800e8a4:	6923      	ldr	r3, [r4, #16]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d135      	bne.n	800e916 <_puts_r+0x9a>
 800e8aa:	4621      	mov	r1, r4
 800e8ac:	4628      	mov	r0, r5
 800e8ae:	f000 f8c5 	bl	800ea3c <__swsetup_r>
 800e8b2:	b380      	cbz	r0, 800e916 <_puts_r+0x9a>
 800e8b4:	f04f 35ff 	mov.w	r5, #4294967295
 800e8b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e8ba:	07da      	lsls	r2, r3, #31
 800e8bc:	d405      	bmi.n	800e8ca <_puts_r+0x4e>
 800e8be:	89a3      	ldrh	r3, [r4, #12]
 800e8c0:	059b      	lsls	r3, r3, #22
 800e8c2:	d402      	bmi.n	800e8ca <_puts_r+0x4e>
 800e8c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e8c6:	f000 f999 	bl	800ebfc <__retarget_lock_release_recursive>
 800e8ca:	4628      	mov	r0, r5
 800e8cc:	bd70      	pop	{r4, r5, r6, pc}
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	da04      	bge.n	800e8dc <_puts_r+0x60>
 800e8d2:	69a2      	ldr	r2, [r4, #24]
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	dc17      	bgt.n	800e908 <_puts_r+0x8c>
 800e8d8:	290a      	cmp	r1, #10
 800e8da:	d015      	beq.n	800e908 <_puts_r+0x8c>
 800e8dc:	6823      	ldr	r3, [r4, #0]
 800e8de:	1c5a      	adds	r2, r3, #1
 800e8e0:	6022      	str	r2, [r4, #0]
 800e8e2:	7019      	strb	r1, [r3, #0]
 800e8e4:	68a3      	ldr	r3, [r4, #8]
 800e8e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	60a3      	str	r3, [r4, #8]
 800e8ee:	2900      	cmp	r1, #0
 800e8f0:	d1ed      	bne.n	800e8ce <_puts_r+0x52>
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	da11      	bge.n	800e91a <_puts_r+0x9e>
 800e8f6:	4622      	mov	r2, r4
 800e8f8:	210a      	movs	r1, #10
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	f000 f85f 	bl	800e9be <__swbuf_r>
 800e900:	3001      	adds	r0, #1
 800e902:	d0d7      	beq.n	800e8b4 <_puts_r+0x38>
 800e904:	250a      	movs	r5, #10
 800e906:	e7d7      	b.n	800e8b8 <_puts_r+0x3c>
 800e908:	4622      	mov	r2, r4
 800e90a:	4628      	mov	r0, r5
 800e90c:	f000 f857 	bl	800e9be <__swbuf_r>
 800e910:	3001      	adds	r0, #1
 800e912:	d1e7      	bne.n	800e8e4 <_puts_r+0x68>
 800e914:	e7ce      	b.n	800e8b4 <_puts_r+0x38>
 800e916:	3e01      	subs	r6, #1
 800e918:	e7e4      	b.n	800e8e4 <_puts_r+0x68>
 800e91a:	6823      	ldr	r3, [r4, #0]
 800e91c:	1c5a      	adds	r2, r3, #1
 800e91e:	6022      	str	r2, [r4, #0]
 800e920:	220a      	movs	r2, #10
 800e922:	701a      	strb	r2, [r3, #0]
 800e924:	e7ee      	b.n	800e904 <_puts_r+0x88>
	...

0800e928 <puts>:
 800e928:	4b02      	ldr	r3, [pc, #8]	@ (800e934 <puts+0xc>)
 800e92a:	4601      	mov	r1, r0
 800e92c:	6818      	ldr	r0, [r3, #0]
 800e92e:	f7ff bfa5 	b.w	800e87c <_puts_r>
 800e932:	bf00      	nop
 800e934:	20000020 	.word	0x20000020

0800e938 <__sread>:
 800e938:	b510      	push	{r4, lr}
 800e93a:	460c      	mov	r4, r1
 800e93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e940:	f000 f8fc 	bl	800eb3c <_read_r>
 800e944:	2800      	cmp	r0, #0
 800e946:	bfab      	itete	ge
 800e948:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e94a:	89a3      	ldrhlt	r3, [r4, #12]
 800e94c:	181b      	addge	r3, r3, r0
 800e94e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e952:	bfac      	ite	ge
 800e954:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e956:	81a3      	strhlt	r3, [r4, #12]
 800e958:	bd10      	pop	{r4, pc}

0800e95a <__swrite>:
 800e95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e95e:	461f      	mov	r7, r3
 800e960:	898b      	ldrh	r3, [r1, #12]
 800e962:	4605      	mov	r5, r0
 800e964:	460c      	mov	r4, r1
 800e966:	05db      	lsls	r3, r3, #23
 800e968:	4616      	mov	r6, r2
 800e96a:	d505      	bpl.n	800e978 <__swrite+0x1e>
 800e96c:	2302      	movs	r3, #2
 800e96e:	2200      	movs	r2, #0
 800e970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e974:	f000 f8d0 	bl	800eb18 <_lseek_r>
 800e978:	89a3      	ldrh	r3, [r4, #12]
 800e97a:	4632      	mov	r2, r6
 800e97c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e980:	4628      	mov	r0, r5
 800e982:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e986:	81a3      	strh	r3, [r4, #12]
 800e988:	463b      	mov	r3, r7
 800e98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e98e:	f000 b8f7 	b.w	800eb80 <_write_r>

0800e992 <__sseek>:
 800e992:	b510      	push	{r4, lr}
 800e994:	460c      	mov	r4, r1
 800e996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e99a:	f000 f8bd 	bl	800eb18 <_lseek_r>
 800e99e:	1c43      	adds	r3, r0, #1
 800e9a0:	89a3      	ldrh	r3, [r4, #12]
 800e9a2:	bf15      	itete	ne
 800e9a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e9a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e9aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e9ae:	81a3      	strheq	r3, [r4, #12]
 800e9b0:	bf18      	it	ne
 800e9b2:	81a3      	strhne	r3, [r4, #12]
 800e9b4:	bd10      	pop	{r4, pc}

0800e9b6 <__sclose>:
 800e9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9ba:	f000 b89d 	b.w	800eaf8 <_close_r>

0800e9be <__swbuf_r>:
 800e9be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9c0:	460e      	mov	r6, r1
 800e9c2:	4614      	mov	r4, r2
 800e9c4:	4605      	mov	r5, r0
 800e9c6:	b118      	cbz	r0, 800e9d0 <__swbuf_r+0x12>
 800e9c8:	6a03      	ldr	r3, [r0, #32]
 800e9ca:	b90b      	cbnz	r3, 800e9d0 <__swbuf_r+0x12>
 800e9cc:	f7ff ff06 	bl	800e7dc <__sinit>
 800e9d0:	69a3      	ldr	r3, [r4, #24]
 800e9d2:	60a3      	str	r3, [r4, #8]
 800e9d4:	89a3      	ldrh	r3, [r4, #12]
 800e9d6:	071a      	lsls	r2, r3, #28
 800e9d8:	d501      	bpl.n	800e9de <__swbuf_r+0x20>
 800e9da:	6923      	ldr	r3, [r4, #16]
 800e9dc:	b943      	cbnz	r3, 800e9f0 <__swbuf_r+0x32>
 800e9de:	4621      	mov	r1, r4
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	f000 f82b 	bl	800ea3c <__swsetup_r>
 800e9e6:	b118      	cbz	r0, 800e9f0 <__swbuf_r+0x32>
 800e9e8:	f04f 37ff 	mov.w	r7, #4294967295
 800e9ec:	4638      	mov	r0, r7
 800e9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9f0:	6823      	ldr	r3, [r4, #0]
 800e9f2:	b2f6      	uxtb	r6, r6
 800e9f4:	6922      	ldr	r2, [r4, #16]
 800e9f6:	4637      	mov	r7, r6
 800e9f8:	1a98      	subs	r0, r3, r2
 800e9fa:	6963      	ldr	r3, [r4, #20]
 800e9fc:	4283      	cmp	r3, r0
 800e9fe:	dc05      	bgt.n	800ea0c <__swbuf_r+0x4e>
 800ea00:	4621      	mov	r1, r4
 800ea02:	4628      	mov	r0, r5
 800ea04:	f000 fc9e 	bl	800f344 <_fflush_r>
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	d1ed      	bne.n	800e9e8 <__swbuf_r+0x2a>
 800ea0c:	68a3      	ldr	r3, [r4, #8]
 800ea0e:	3b01      	subs	r3, #1
 800ea10:	60a3      	str	r3, [r4, #8]
 800ea12:	6823      	ldr	r3, [r4, #0]
 800ea14:	1c5a      	adds	r2, r3, #1
 800ea16:	6022      	str	r2, [r4, #0]
 800ea18:	701e      	strb	r6, [r3, #0]
 800ea1a:	1c43      	adds	r3, r0, #1
 800ea1c:	6962      	ldr	r2, [r4, #20]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d004      	beq.n	800ea2c <__swbuf_r+0x6e>
 800ea22:	89a3      	ldrh	r3, [r4, #12]
 800ea24:	07db      	lsls	r3, r3, #31
 800ea26:	d5e1      	bpl.n	800e9ec <__swbuf_r+0x2e>
 800ea28:	2e0a      	cmp	r6, #10
 800ea2a:	d1df      	bne.n	800e9ec <__swbuf_r+0x2e>
 800ea2c:	4621      	mov	r1, r4
 800ea2e:	4628      	mov	r0, r5
 800ea30:	f000 fc88 	bl	800f344 <_fflush_r>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	d0d9      	beq.n	800e9ec <__swbuf_r+0x2e>
 800ea38:	e7d6      	b.n	800e9e8 <__swbuf_r+0x2a>
	...

0800ea3c <__swsetup_r>:
 800ea3c:	b538      	push	{r3, r4, r5, lr}
 800ea3e:	4b29      	ldr	r3, [pc, #164]	@ (800eae4 <__swsetup_r+0xa8>)
 800ea40:	4605      	mov	r5, r0
 800ea42:	460c      	mov	r4, r1
 800ea44:	6818      	ldr	r0, [r3, #0]
 800ea46:	b118      	cbz	r0, 800ea50 <__swsetup_r+0x14>
 800ea48:	6a03      	ldr	r3, [r0, #32]
 800ea4a:	b90b      	cbnz	r3, 800ea50 <__swsetup_r+0x14>
 800ea4c:	f7ff fec6 	bl	800e7dc <__sinit>
 800ea50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea54:	0719      	lsls	r1, r3, #28
 800ea56:	d422      	bmi.n	800ea9e <__swsetup_r+0x62>
 800ea58:	06da      	lsls	r2, r3, #27
 800ea5a:	d407      	bmi.n	800ea6c <__swsetup_r+0x30>
 800ea5c:	2209      	movs	r2, #9
 800ea5e:	602a      	str	r2, [r5, #0]
 800ea60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea64:	f04f 30ff 	mov.w	r0, #4294967295
 800ea68:	81a3      	strh	r3, [r4, #12]
 800ea6a:	e033      	b.n	800ead4 <__swsetup_r+0x98>
 800ea6c:	0758      	lsls	r0, r3, #29
 800ea6e:	d512      	bpl.n	800ea96 <__swsetup_r+0x5a>
 800ea70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea72:	b141      	cbz	r1, 800ea86 <__swsetup_r+0x4a>
 800ea74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea78:	4299      	cmp	r1, r3
 800ea7a:	d002      	beq.n	800ea82 <__swsetup_r+0x46>
 800ea7c:	4628      	mov	r0, r5
 800ea7e:	f000 f8bf 	bl	800ec00 <_free_r>
 800ea82:	2300      	movs	r3, #0
 800ea84:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea86:	89a3      	ldrh	r3, [r4, #12]
 800ea88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ea8c:	81a3      	strh	r3, [r4, #12]
 800ea8e:	2300      	movs	r3, #0
 800ea90:	6063      	str	r3, [r4, #4]
 800ea92:	6923      	ldr	r3, [r4, #16]
 800ea94:	6023      	str	r3, [r4, #0]
 800ea96:	89a3      	ldrh	r3, [r4, #12]
 800ea98:	f043 0308 	orr.w	r3, r3, #8
 800ea9c:	81a3      	strh	r3, [r4, #12]
 800ea9e:	6923      	ldr	r3, [r4, #16]
 800eaa0:	b94b      	cbnz	r3, 800eab6 <__swsetup_r+0x7a>
 800eaa2:	89a3      	ldrh	r3, [r4, #12]
 800eaa4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eaa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eaac:	d003      	beq.n	800eab6 <__swsetup_r+0x7a>
 800eaae:	4621      	mov	r1, r4
 800eab0:	4628      	mov	r0, r5
 800eab2:	f000 fc94 	bl	800f3de <__smakebuf_r>
 800eab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaba:	f013 0201 	ands.w	r2, r3, #1
 800eabe:	d00a      	beq.n	800ead6 <__swsetup_r+0x9a>
 800eac0:	2200      	movs	r2, #0
 800eac2:	60a2      	str	r2, [r4, #8]
 800eac4:	6962      	ldr	r2, [r4, #20]
 800eac6:	4252      	negs	r2, r2
 800eac8:	61a2      	str	r2, [r4, #24]
 800eaca:	6922      	ldr	r2, [r4, #16]
 800eacc:	b942      	cbnz	r2, 800eae0 <__swsetup_r+0xa4>
 800eace:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ead2:	d1c5      	bne.n	800ea60 <__swsetup_r+0x24>
 800ead4:	bd38      	pop	{r3, r4, r5, pc}
 800ead6:	0799      	lsls	r1, r3, #30
 800ead8:	bf58      	it	pl
 800eada:	6962      	ldrpl	r2, [r4, #20]
 800eadc:	60a2      	str	r2, [r4, #8]
 800eade:	e7f4      	b.n	800eaca <__swsetup_r+0x8e>
 800eae0:	2000      	movs	r0, #0
 800eae2:	e7f7      	b.n	800ead4 <__swsetup_r+0x98>
 800eae4:	20000020 	.word	0x20000020

0800eae8 <memset>:
 800eae8:	4402      	add	r2, r0
 800eaea:	4603      	mov	r3, r0
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d100      	bne.n	800eaf2 <memset+0xa>
 800eaf0:	4770      	bx	lr
 800eaf2:	f803 1b01 	strb.w	r1, [r3], #1
 800eaf6:	e7f9      	b.n	800eaec <memset+0x4>

0800eaf8 <_close_r>:
 800eaf8:	b538      	push	{r3, r4, r5, lr}
 800eafa:	2300      	movs	r3, #0
 800eafc:	4d05      	ldr	r5, [pc, #20]	@ (800eb14 <_close_r+0x1c>)
 800eafe:	4604      	mov	r4, r0
 800eb00:	4608      	mov	r0, r1
 800eb02:	602b      	str	r3, [r5, #0]
 800eb04:	f7f3 fa91 	bl	800202a <_close>
 800eb08:	1c43      	adds	r3, r0, #1
 800eb0a:	d102      	bne.n	800eb12 <_close_r+0x1a>
 800eb0c:	682b      	ldr	r3, [r5, #0]
 800eb0e:	b103      	cbz	r3, 800eb12 <_close_r+0x1a>
 800eb10:	6023      	str	r3, [r4, #0]
 800eb12:	bd38      	pop	{r3, r4, r5, pc}
 800eb14:	200007f8 	.word	0x200007f8

0800eb18 <_lseek_r>:
 800eb18:	b538      	push	{r3, r4, r5, lr}
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	4d06      	ldr	r5, [pc, #24]	@ (800eb38 <_lseek_r+0x20>)
 800eb1e:	4608      	mov	r0, r1
 800eb20:	4611      	mov	r1, r2
 800eb22:	2200      	movs	r2, #0
 800eb24:	602a      	str	r2, [r5, #0]
 800eb26:	461a      	mov	r2, r3
 800eb28:	f7f3 faa6 	bl	8002078 <_lseek>
 800eb2c:	1c43      	adds	r3, r0, #1
 800eb2e:	d102      	bne.n	800eb36 <_lseek_r+0x1e>
 800eb30:	682b      	ldr	r3, [r5, #0]
 800eb32:	b103      	cbz	r3, 800eb36 <_lseek_r+0x1e>
 800eb34:	6023      	str	r3, [r4, #0]
 800eb36:	bd38      	pop	{r3, r4, r5, pc}
 800eb38:	200007f8 	.word	0x200007f8

0800eb3c <_read_r>:
 800eb3c:	b538      	push	{r3, r4, r5, lr}
 800eb3e:	4604      	mov	r4, r0
 800eb40:	4d06      	ldr	r5, [pc, #24]	@ (800eb5c <_read_r+0x20>)
 800eb42:	4608      	mov	r0, r1
 800eb44:	4611      	mov	r1, r2
 800eb46:	2200      	movs	r2, #0
 800eb48:	602a      	str	r2, [r5, #0]
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	f7f3 fa50 	bl	8001ff0 <_read>
 800eb50:	1c43      	adds	r3, r0, #1
 800eb52:	d102      	bne.n	800eb5a <_read_r+0x1e>
 800eb54:	682b      	ldr	r3, [r5, #0]
 800eb56:	b103      	cbz	r3, 800eb5a <_read_r+0x1e>
 800eb58:	6023      	str	r3, [r4, #0]
 800eb5a:	bd38      	pop	{r3, r4, r5, pc}
 800eb5c:	200007f8 	.word	0x200007f8

0800eb60 <_sbrk_r>:
 800eb60:	b538      	push	{r3, r4, r5, lr}
 800eb62:	2300      	movs	r3, #0
 800eb64:	4d05      	ldr	r5, [pc, #20]	@ (800eb7c <_sbrk_r+0x1c>)
 800eb66:	4604      	mov	r4, r0
 800eb68:	4608      	mov	r0, r1
 800eb6a:	602b      	str	r3, [r5, #0]
 800eb6c:	f7f3 fa92 	bl	8002094 <_sbrk>
 800eb70:	1c43      	adds	r3, r0, #1
 800eb72:	d102      	bne.n	800eb7a <_sbrk_r+0x1a>
 800eb74:	682b      	ldr	r3, [r5, #0]
 800eb76:	b103      	cbz	r3, 800eb7a <_sbrk_r+0x1a>
 800eb78:	6023      	str	r3, [r4, #0]
 800eb7a:	bd38      	pop	{r3, r4, r5, pc}
 800eb7c:	200007f8 	.word	0x200007f8

0800eb80 <_write_r>:
 800eb80:	b538      	push	{r3, r4, r5, lr}
 800eb82:	4604      	mov	r4, r0
 800eb84:	4d06      	ldr	r5, [pc, #24]	@ (800eba0 <_write_r+0x20>)
 800eb86:	4608      	mov	r0, r1
 800eb88:	4611      	mov	r1, r2
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	602a      	str	r2, [r5, #0]
 800eb8e:	461a      	mov	r2, r3
 800eb90:	f7f2 febe 	bl	8001910 <_write>
 800eb94:	1c43      	adds	r3, r0, #1
 800eb96:	d102      	bne.n	800eb9e <_write_r+0x1e>
 800eb98:	682b      	ldr	r3, [r5, #0]
 800eb9a:	b103      	cbz	r3, 800eb9e <_write_r+0x1e>
 800eb9c:	6023      	str	r3, [r4, #0]
 800eb9e:	bd38      	pop	{r3, r4, r5, pc}
 800eba0:	200007f8 	.word	0x200007f8

0800eba4 <__errno>:
 800eba4:	4b01      	ldr	r3, [pc, #4]	@ (800ebac <__errno+0x8>)
 800eba6:	6818      	ldr	r0, [r3, #0]
 800eba8:	4770      	bx	lr
 800ebaa:	bf00      	nop
 800ebac:	20000020 	.word	0x20000020

0800ebb0 <__libc_init_array>:
 800ebb0:	b570      	push	{r4, r5, r6, lr}
 800ebb2:	4d0d      	ldr	r5, [pc, #52]	@ (800ebe8 <__libc_init_array+0x38>)
 800ebb4:	2600      	movs	r6, #0
 800ebb6:	4c0d      	ldr	r4, [pc, #52]	@ (800ebec <__libc_init_array+0x3c>)
 800ebb8:	1b64      	subs	r4, r4, r5
 800ebba:	10a4      	asrs	r4, r4, #2
 800ebbc:	42a6      	cmp	r6, r4
 800ebbe:	d109      	bne.n	800ebd4 <__libc_init_array+0x24>
 800ebc0:	4d0b      	ldr	r5, [pc, #44]	@ (800ebf0 <__libc_init_array+0x40>)
 800ebc2:	2600      	movs	r6, #0
 800ebc4:	4c0b      	ldr	r4, [pc, #44]	@ (800ebf4 <__libc_init_array+0x44>)
 800ebc6:	f000 fcab 	bl	800f520 <_init>
 800ebca:	1b64      	subs	r4, r4, r5
 800ebcc:	10a4      	asrs	r4, r4, #2
 800ebce:	42a6      	cmp	r6, r4
 800ebd0:	d105      	bne.n	800ebde <__libc_init_array+0x2e>
 800ebd2:	bd70      	pop	{r4, r5, r6, pc}
 800ebd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebd8:	3601      	adds	r6, #1
 800ebda:	4798      	blx	r3
 800ebdc:	e7ee      	b.n	800ebbc <__libc_init_array+0xc>
 800ebde:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebe2:	3601      	adds	r6, #1
 800ebe4:	4798      	blx	r3
 800ebe6:	e7f2      	b.n	800ebce <__libc_init_array+0x1e>
 800ebe8:	080109f4 	.word	0x080109f4
 800ebec:	080109f4 	.word	0x080109f4
 800ebf0:	080109f4 	.word	0x080109f4
 800ebf4:	080109f8 	.word	0x080109f8

0800ebf8 <__retarget_lock_init_recursive>:
 800ebf8:	4770      	bx	lr

0800ebfa <__retarget_lock_acquire_recursive>:
 800ebfa:	4770      	bx	lr

0800ebfc <__retarget_lock_release_recursive>:
 800ebfc:	4770      	bx	lr
	...

0800ec00 <_free_r>:
 800ec00:	b538      	push	{r3, r4, r5, lr}
 800ec02:	4605      	mov	r5, r0
 800ec04:	2900      	cmp	r1, #0
 800ec06:	d041      	beq.n	800ec8c <_free_r+0x8c>
 800ec08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec0c:	1f0c      	subs	r4, r1, #4
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	bfb8      	it	lt
 800ec12:	18e4      	addlt	r4, r4, r3
 800ec14:	f7ff fd4a 	bl	800e6ac <__malloc_lock>
 800ec18:	4a1d      	ldr	r2, [pc, #116]	@ (800ec90 <_free_r+0x90>)
 800ec1a:	6813      	ldr	r3, [r2, #0]
 800ec1c:	b933      	cbnz	r3, 800ec2c <_free_r+0x2c>
 800ec1e:	6063      	str	r3, [r4, #4]
 800ec20:	6014      	str	r4, [r2, #0]
 800ec22:	4628      	mov	r0, r5
 800ec24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec28:	f7ff bd46 	b.w	800e6b8 <__malloc_unlock>
 800ec2c:	42a3      	cmp	r3, r4
 800ec2e:	d908      	bls.n	800ec42 <_free_r+0x42>
 800ec30:	6820      	ldr	r0, [r4, #0]
 800ec32:	1821      	adds	r1, r4, r0
 800ec34:	428b      	cmp	r3, r1
 800ec36:	bf01      	itttt	eq
 800ec38:	6819      	ldreq	r1, [r3, #0]
 800ec3a:	685b      	ldreq	r3, [r3, #4]
 800ec3c:	1809      	addeq	r1, r1, r0
 800ec3e:	6021      	streq	r1, [r4, #0]
 800ec40:	e7ed      	b.n	800ec1e <_free_r+0x1e>
 800ec42:	461a      	mov	r2, r3
 800ec44:	685b      	ldr	r3, [r3, #4]
 800ec46:	b10b      	cbz	r3, 800ec4c <_free_r+0x4c>
 800ec48:	42a3      	cmp	r3, r4
 800ec4a:	d9fa      	bls.n	800ec42 <_free_r+0x42>
 800ec4c:	6811      	ldr	r1, [r2, #0]
 800ec4e:	1850      	adds	r0, r2, r1
 800ec50:	42a0      	cmp	r0, r4
 800ec52:	d10b      	bne.n	800ec6c <_free_r+0x6c>
 800ec54:	6820      	ldr	r0, [r4, #0]
 800ec56:	4401      	add	r1, r0
 800ec58:	1850      	adds	r0, r2, r1
 800ec5a:	6011      	str	r1, [r2, #0]
 800ec5c:	4283      	cmp	r3, r0
 800ec5e:	d1e0      	bne.n	800ec22 <_free_r+0x22>
 800ec60:	6818      	ldr	r0, [r3, #0]
 800ec62:	685b      	ldr	r3, [r3, #4]
 800ec64:	4408      	add	r0, r1
 800ec66:	6053      	str	r3, [r2, #4]
 800ec68:	6010      	str	r0, [r2, #0]
 800ec6a:	e7da      	b.n	800ec22 <_free_r+0x22>
 800ec6c:	d902      	bls.n	800ec74 <_free_r+0x74>
 800ec6e:	230c      	movs	r3, #12
 800ec70:	602b      	str	r3, [r5, #0]
 800ec72:	e7d6      	b.n	800ec22 <_free_r+0x22>
 800ec74:	6820      	ldr	r0, [r4, #0]
 800ec76:	1821      	adds	r1, r4, r0
 800ec78:	428b      	cmp	r3, r1
 800ec7a:	bf02      	ittt	eq
 800ec7c:	6819      	ldreq	r1, [r3, #0]
 800ec7e:	685b      	ldreq	r3, [r3, #4]
 800ec80:	1809      	addeq	r1, r1, r0
 800ec82:	6063      	str	r3, [r4, #4]
 800ec84:	bf08      	it	eq
 800ec86:	6021      	streq	r1, [r4, #0]
 800ec88:	6054      	str	r4, [r2, #4]
 800ec8a:	e7ca      	b.n	800ec22 <_free_r+0x22>
 800ec8c:	bd38      	pop	{r3, r4, r5, pc}
 800ec8e:	bf00      	nop
 800ec90:	200006b8 	.word	0x200006b8

0800ec94 <__sfputc_r>:
 800ec94:	6893      	ldr	r3, [r2, #8]
 800ec96:	3b01      	subs	r3, #1
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	6093      	str	r3, [r2, #8]
 800ec9c:	b410      	push	{r4}
 800ec9e:	da08      	bge.n	800ecb2 <__sfputc_r+0x1e>
 800eca0:	6994      	ldr	r4, [r2, #24]
 800eca2:	42a3      	cmp	r3, r4
 800eca4:	db01      	blt.n	800ecaa <__sfputc_r+0x16>
 800eca6:	290a      	cmp	r1, #10
 800eca8:	d103      	bne.n	800ecb2 <__sfputc_r+0x1e>
 800ecaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecae:	f7ff be86 	b.w	800e9be <__swbuf_r>
 800ecb2:	6813      	ldr	r3, [r2, #0]
 800ecb4:	1c58      	adds	r0, r3, #1
 800ecb6:	6010      	str	r0, [r2, #0]
 800ecb8:	4608      	mov	r0, r1
 800ecba:	7019      	strb	r1, [r3, #0]
 800ecbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecc0:	4770      	bx	lr

0800ecc2 <__sfputs_r>:
 800ecc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecc4:	4606      	mov	r6, r0
 800ecc6:	460f      	mov	r7, r1
 800ecc8:	4614      	mov	r4, r2
 800ecca:	18d5      	adds	r5, r2, r3
 800eccc:	42ac      	cmp	r4, r5
 800ecce:	d101      	bne.n	800ecd4 <__sfputs_r+0x12>
 800ecd0:	2000      	movs	r0, #0
 800ecd2:	e007      	b.n	800ece4 <__sfputs_r+0x22>
 800ecd4:	463a      	mov	r2, r7
 800ecd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecda:	4630      	mov	r0, r6
 800ecdc:	f7ff ffda 	bl	800ec94 <__sfputc_r>
 800ece0:	1c43      	adds	r3, r0, #1
 800ece2:	d1f3      	bne.n	800eccc <__sfputs_r+0xa>
 800ece4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ece8 <_vfiprintf_r>:
 800ece8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecec:	460d      	mov	r5, r1
 800ecee:	b09d      	sub	sp, #116	@ 0x74
 800ecf0:	4614      	mov	r4, r2
 800ecf2:	4698      	mov	r8, r3
 800ecf4:	4606      	mov	r6, r0
 800ecf6:	b118      	cbz	r0, 800ed00 <_vfiprintf_r+0x18>
 800ecf8:	6a03      	ldr	r3, [r0, #32]
 800ecfa:	b90b      	cbnz	r3, 800ed00 <_vfiprintf_r+0x18>
 800ecfc:	f7ff fd6e 	bl	800e7dc <__sinit>
 800ed00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed02:	07d9      	lsls	r1, r3, #31
 800ed04:	d405      	bmi.n	800ed12 <_vfiprintf_r+0x2a>
 800ed06:	89ab      	ldrh	r3, [r5, #12]
 800ed08:	059a      	lsls	r2, r3, #22
 800ed0a:	d402      	bmi.n	800ed12 <_vfiprintf_r+0x2a>
 800ed0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed0e:	f7ff ff74 	bl	800ebfa <__retarget_lock_acquire_recursive>
 800ed12:	89ab      	ldrh	r3, [r5, #12]
 800ed14:	071b      	lsls	r3, r3, #28
 800ed16:	d501      	bpl.n	800ed1c <_vfiprintf_r+0x34>
 800ed18:	692b      	ldr	r3, [r5, #16]
 800ed1a:	b99b      	cbnz	r3, 800ed44 <_vfiprintf_r+0x5c>
 800ed1c:	4629      	mov	r1, r5
 800ed1e:	4630      	mov	r0, r6
 800ed20:	f7ff fe8c 	bl	800ea3c <__swsetup_r>
 800ed24:	b170      	cbz	r0, 800ed44 <_vfiprintf_r+0x5c>
 800ed26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed28:	07dc      	lsls	r4, r3, #31
 800ed2a:	d504      	bpl.n	800ed36 <_vfiprintf_r+0x4e>
 800ed2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed30:	b01d      	add	sp, #116	@ 0x74
 800ed32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed36:	89ab      	ldrh	r3, [r5, #12]
 800ed38:	0598      	lsls	r0, r3, #22
 800ed3a:	d4f7      	bmi.n	800ed2c <_vfiprintf_r+0x44>
 800ed3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed3e:	f7ff ff5d 	bl	800ebfc <__retarget_lock_release_recursive>
 800ed42:	e7f3      	b.n	800ed2c <_vfiprintf_r+0x44>
 800ed44:	2300      	movs	r3, #0
 800ed46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed4a:	f04f 0901 	mov.w	r9, #1
 800ed4e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800ef04 <_vfiprintf_r+0x21c>
 800ed52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed54:	2320      	movs	r3, #32
 800ed56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ed5a:	2330      	movs	r3, #48	@ 0x30
 800ed5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ed60:	4623      	mov	r3, r4
 800ed62:	469a      	mov	sl, r3
 800ed64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed68:	b10a      	cbz	r2, 800ed6e <_vfiprintf_r+0x86>
 800ed6a:	2a25      	cmp	r2, #37	@ 0x25
 800ed6c:	d1f9      	bne.n	800ed62 <_vfiprintf_r+0x7a>
 800ed6e:	ebba 0b04 	subs.w	fp, sl, r4
 800ed72:	d00b      	beq.n	800ed8c <_vfiprintf_r+0xa4>
 800ed74:	465b      	mov	r3, fp
 800ed76:	4622      	mov	r2, r4
 800ed78:	4629      	mov	r1, r5
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	f7ff ffa1 	bl	800ecc2 <__sfputs_r>
 800ed80:	3001      	adds	r0, #1
 800ed82:	f000 80a7 	beq.w	800eed4 <_vfiprintf_r+0x1ec>
 800ed86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed88:	445a      	add	r2, fp
 800ed8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	f000 809f 	beq.w	800eed4 <_vfiprintf_r+0x1ec>
 800ed96:	2300      	movs	r3, #0
 800ed98:	f04f 32ff 	mov.w	r2, #4294967295
 800ed9c:	f10a 0a01 	add.w	sl, sl, #1
 800eda0:	9304      	str	r3, [sp, #16]
 800eda2:	9307      	str	r3, [sp, #28]
 800eda4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eda8:	931a      	str	r3, [sp, #104]	@ 0x68
 800edaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edae:	4654      	mov	r4, sl
 800edb0:	2205      	movs	r2, #5
 800edb2:	4854      	ldr	r0, [pc, #336]	@ (800ef04 <_vfiprintf_r+0x21c>)
 800edb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edb8:	f000 fba4 	bl	800f504 <memchr>
 800edbc:	9a04      	ldr	r2, [sp, #16]
 800edbe:	b9d8      	cbnz	r0, 800edf8 <_vfiprintf_r+0x110>
 800edc0:	06d1      	lsls	r1, r2, #27
 800edc2:	bf44      	itt	mi
 800edc4:	2320      	movmi	r3, #32
 800edc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edca:	0713      	lsls	r3, r2, #28
 800edcc:	bf44      	itt	mi
 800edce:	232b      	movmi	r3, #43	@ 0x2b
 800edd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edd4:	f89a 3000 	ldrb.w	r3, [sl]
 800edd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800edda:	d015      	beq.n	800ee08 <_vfiprintf_r+0x120>
 800eddc:	9a07      	ldr	r2, [sp, #28]
 800edde:	4654      	mov	r4, sl
 800ede0:	2000      	movs	r0, #0
 800ede2:	f04f 0c0a 	mov.w	ip, #10
 800ede6:	4621      	mov	r1, r4
 800ede8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edec:	3b30      	subs	r3, #48	@ 0x30
 800edee:	2b09      	cmp	r3, #9
 800edf0:	d94b      	bls.n	800ee8a <_vfiprintf_r+0x1a2>
 800edf2:	b1b0      	cbz	r0, 800ee22 <_vfiprintf_r+0x13a>
 800edf4:	9207      	str	r2, [sp, #28]
 800edf6:	e014      	b.n	800ee22 <_vfiprintf_r+0x13a>
 800edf8:	eba0 0308 	sub.w	r3, r0, r8
 800edfc:	46a2      	mov	sl, r4
 800edfe:	fa09 f303 	lsl.w	r3, r9, r3
 800ee02:	4313      	orrs	r3, r2
 800ee04:	9304      	str	r3, [sp, #16]
 800ee06:	e7d2      	b.n	800edae <_vfiprintf_r+0xc6>
 800ee08:	9b03      	ldr	r3, [sp, #12]
 800ee0a:	1d19      	adds	r1, r3, #4
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	9103      	str	r1, [sp, #12]
 800ee12:	bfbb      	ittet	lt
 800ee14:	425b      	neglt	r3, r3
 800ee16:	f042 0202 	orrlt.w	r2, r2, #2
 800ee1a:	9307      	strge	r3, [sp, #28]
 800ee1c:	9307      	strlt	r3, [sp, #28]
 800ee1e:	bfb8      	it	lt
 800ee20:	9204      	strlt	r2, [sp, #16]
 800ee22:	7823      	ldrb	r3, [r4, #0]
 800ee24:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee26:	d10a      	bne.n	800ee3e <_vfiprintf_r+0x156>
 800ee28:	7863      	ldrb	r3, [r4, #1]
 800ee2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee2c:	d132      	bne.n	800ee94 <_vfiprintf_r+0x1ac>
 800ee2e:	9b03      	ldr	r3, [sp, #12]
 800ee30:	3402      	adds	r4, #2
 800ee32:	1d1a      	adds	r2, r3, #4
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ee3a:	9203      	str	r2, [sp, #12]
 800ee3c:	9305      	str	r3, [sp, #20]
 800ee3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ef14 <_vfiprintf_r+0x22c>
 800ee42:	2203      	movs	r2, #3
 800ee44:	7821      	ldrb	r1, [r4, #0]
 800ee46:	4650      	mov	r0, sl
 800ee48:	f000 fb5c 	bl	800f504 <memchr>
 800ee4c:	b138      	cbz	r0, 800ee5e <_vfiprintf_r+0x176>
 800ee4e:	eba0 000a 	sub.w	r0, r0, sl
 800ee52:	2240      	movs	r2, #64	@ 0x40
 800ee54:	9b04      	ldr	r3, [sp, #16]
 800ee56:	3401      	adds	r4, #1
 800ee58:	4082      	lsls	r2, r0
 800ee5a:	4313      	orrs	r3, r2
 800ee5c:	9304      	str	r3, [sp, #16]
 800ee5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee62:	2206      	movs	r2, #6
 800ee64:	4828      	ldr	r0, [pc, #160]	@ (800ef08 <_vfiprintf_r+0x220>)
 800ee66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee6a:	f000 fb4b 	bl	800f504 <memchr>
 800ee6e:	2800      	cmp	r0, #0
 800ee70:	d03f      	beq.n	800eef2 <_vfiprintf_r+0x20a>
 800ee72:	4b26      	ldr	r3, [pc, #152]	@ (800ef0c <_vfiprintf_r+0x224>)
 800ee74:	bb1b      	cbnz	r3, 800eebe <_vfiprintf_r+0x1d6>
 800ee76:	9b03      	ldr	r3, [sp, #12]
 800ee78:	3307      	adds	r3, #7
 800ee7a:	f023 0307 	bic.w	r3, r3, #7
 800ee7e:	3308      	adds	r3, #8
 800ee80:	9303      	str	r3, [sp, #12]
 800ee82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee84:	443b      	add	r3, r7
 800ee86:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee88:	e76a      	b.n	800ed60 <_vfiprintf_r+0x78>
 800ee8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee8e:	460c      	mov	r4, r1
 800ee90:	2001      	movs	r0, #1
 800ee92:	e7a8      	b.n	800ede6 <_vfiprintf_r+0xfe>
 800ee94:	2300      	movs	r3, #0
 800ee96:	3401      	adds	r4, #1
 800ee98:	f04f 0c0a 	mov.w	ip, #10
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	9305      	str	r3, [sp, #20]
 800eea0:	4620      	mov	r0, r4
 800eea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eea6:	3a30      	subs	r2, #48	@ 0x30
 800eea8:	2a09      	cmp	r2, #9
 800eeaa:	d903      	bls.n	800eeb4 <_vfiprintf_r+0x1cc>
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d0c6      	beq.n	800ee3e <_vfiprintf_r+0x156>
 800eeb0:	9105      	str	r1, [sp, #20]
 800eeb2:	e7c4      	b.n	800ee3e <_vfiprintf_r+0x156>
 800eeb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800eeb8:	4604      	mov	r4, r0
 800eeba:	2301      	movs	r3, #1
 800eebc:	e7f0      	b.n	800eea0 <_vfiprintf_r+0x1b8>
 800eebe:	ab03      	add	r3, sp, #12
 800eec0:	462a      	mov	r2, r5
 800eec2:	a904      	add	r1, sp, #16
 800eec4:	4630      	mov	r0, r6
 800eec6:	9300      	str	r3, [sp, #0]
 800eec8:	4b11      	ldr	r3, [pc, #68]	@ (800ef10 <_vfiprintf_r+0x228>)
 800eeca:	f3af 8000 	nop.w
 800eece:	4607      	mov	r7, r0
 800eed0:	1c78      	adds	r0, r7, #1
 800eed2:	d1d6      	bne.n	800ee82 <_vfiprintf_r+0x19a>
 800eed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eed6:	07d9      	lsls	r1, r3, #31
 800eed8:	d405      	bmi.n	800eee6 <_vfiprintf_r+0x1fe>
 800eeda:	89ab      	ldrh	r3, [r5, #12]
 800eedc:	059a      	lsls	r2, r3, #22
 800eede:	d402      	bmi.n	800eee6 <_vfiprintf_r+0x1fe>
 800eee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eee2:	f7ff fe8b 	bl	800ebfc <__retarget_lock_release_recursive>
 800eee6:	89ab      	ldrh	r3, [r5, #12]
 800eee8:	065b      	lsls	r3, r3, #25
 800eeea:	f53f af1f 	bmi.w	800ed2c <_vfiprintf_r+0x44>
 800eeee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eef0:	e71e      	b.n	800ed30 <_vfiprintf_r+0x48>
 800eef2:	ab03      	add	r3, sp, #12
 800eef4:	462a      	mov	r2, r5
 800eef6:	a904      	add	r1, sp, #16
 800eef8:	4630      	mov	r0, r6
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	4b04      	ldr	r3, [pc, #16]	@ (800ef10 <_vfiprintf_r+0x228>)
 800eefe:	f000 f87d 	bl	800effc <_printf_i>
 800ef02:	e7e4      	b.n	800eece <_vfiprintf_r+0x1e6>
 800ef04:	080109b8 	.word	0x080109b8
 800ef08:	080109c2 	.word	0x080109c2
 800ef0c:	00000000 	.word	0x00000000
 800ef10:	0800ecc3 	.word	0x0800ecc3
 800ef14:	080109be 	.word	0x080109be

0800ef18 <_printf_common>:
 800ef18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef1c:	4616      	mov	r6, r2
 800ef1e:	4698      	mov	r8, r3
 800ef20:	688a      	ldr	r2, [r1, #8]
 800ef22:	4607      	mov	r7, r0
 800ef24:	690b      	ldr	r3, [r1, #16]
 800ef26:	460c      	mov	r4, r1
 800ef28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	bfb8      	it	lt
 800ef30:	4613      	movlt	r3, r2
 800ef32:	6033      	str	r3, [r6, #0]
 800ef34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ef38:	b10a      	cbz	r2, 800ef3e <_printf_common+0x26>
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	6033      	str	r3, [r6, #0]
 800ef3e:	6823      	ldr	r3, [r4, #0]
 800ef40:	0699      	lsls	r1, r3, #26
 800ef42:	bf42      	ittt	mi
 800ef44:	6833      	ldrmi	r3, [r6, #0]
 800ef46:	3302      	addmi	r3, #2
 800ef48:	6033      	strmi	r3, [r6, #0]
 800ef4a:	6825      	ldr	r5, [r4, #0]
 800ef4c:	f015 0506 	ands.w	r5, r5, #6
 800ef50:	d106      	bne.n	800ef60 <_printf_common+0x48>
 800ef52:	f104 0a19 	add.w	sl, r4, #25
 800ef56:	68e3      	ldr	r3, [r4, #12]
 800ef58:	6832      	ldr	r2, [r6, #0]
 800ef5a:	1a9b      	subs	r3, r3, r2
 800ef5c:	42ab      	cmp	r3, r5
 800ef5e:	dc2b      	bgt.n	800efb8 <_printf_common+0xa0>
 800ef60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ef64:	6822      	ldr	r2, [r4, #0]
 800ef66:	3b00      	subs	r3, #0
 800ef68:	bf18      	it	ne
 800ef6a:	2301      	movne	r3, #1
 800ef6c:	0692      	lsls	r2, r2, #26
 800ef6e:	d430      	bmi.n	800efd2 <_printf_common+0xba>
 800ef70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ef74:	4641      	mov	r1, r8
 800ef76:	4638      	mov	r0, r7
 800ef78:	47c8      	blx	r9
 800ef7a:	3001      	adds	r0, #1
 800ef7c:	d023      	beq.n	800efc6 <_printf_common+0xae>
 800ef7e:	6823      	ldr	r3, [r4, #0]
 800ef80:	341a      	adds	r4, #26
 800ef82:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800ef86:	f003 0306 	and.w	r3, r3, #6
 800ef8a:	2b04      	cmp	r3, #4
 800ef8c:	bf0a      	itet	eq
 800ef8e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800ef92:	2500      	movne	r5, #0
 800ef94:	6833      	ldreq	r3, [r6, #0]
 800ef96:	f04f 0600 	mov.w	r6, #0
 800ef9a:	bf08      	it	eq
 800ef9c:	1aed      	subeq	r5, r5, r3
 800ef9e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800efa2:	bf08      	it	eq
 800efa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800efa8:	4293      	cmp	r3, r2
 800efaa:	bfc4      	itt	gt
 800efac:	1a9b      	subgt	r3, r3, r2
 800efae:	18ed      	addgt	r5, r5, r3
 800efb0:	42b5      	cmp	r5, r6
 800efb2:	d11a      	bne.n	800efea <_printf_common+0xd2>
 800efb4:	2000      	movs	r0, #0
 800efb6:	e008      	b.n	800efca <_printf_common+0xb2>
 800efb8:	2301      	movs	r3, #1
 800efba:	4652      	mov	r2, sl
 800efbc:	4641      	mov	r1, r8
 800efbe:	4638      	mov	r0, r7
 800efc0:	47c8      	blx	r9
 800efc2:	3001      	adds	r0, #1
 800efc4:	d103      	bne.n	800efce <_printf_common+0xb6>
 800efc6:	f04f 30ff 	mov.w	r0, #4294967295
 800efca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efce:	3501      	adds	r5, #1
 800efd0:	e7c1      	b.n	800ef56 <_printf_common+0x3e>
 800efd2:	18e1      	adds	r1, r4, r3
 800efd4:	1c5a      	adds	r2, r3, #1
 800efd6:	2030      	movs	r0, #48	@ 0x30
 800efd8:	3302      	adds	r3, #2
 800efda:	4422      	add	r2, r4
 800efdc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800efe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800efe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800efe8:	e7c2      	b.n	800ef70 <_printf_common+0x58>
 800efea:	2301      	movs	r3, #1
 800efec:	4622      	mov	r2, r4
 800efee:	4641      	mov	r1, r8
 800eff0:	4638      	mov	r0, r7
 800eff2:	47c8      	blx	r9
 800eff4:	3001      	adds	r0, #1
 800eff6:	d0e6      	beq.n	800efc6 <_printf_common+0xae>
 800eff8:	3601      	adds	r6, #1
 800effa:	e7d9      	b.n	800efb0 <_printf_common+0x98>

0800effc <_printf_i>:
 800effc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f000:	7e0f      	ldrb	r7, [r1, #24]
 800f002:	4691      	mov	r9, r2
 800f004:	4680      	mov	r8, r0
 800f006:	460c      	mov	r4, r1
 800f008:	2f78      	cmp	r7, #120	@ 0x78
 800f00a:	469a      	mov	sl, r3
 800f00c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f00e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f012:	d807      	bhi.n	800f024 <_printf_i+0x28>
 800f014:	2f62      	cmp	r7, #98	@ 0x62
 800f016:	d80a      	bhi.n	800f02e <_printf_i+0x32>
 800f018:	2f00      	cmp	r7, #0
 800f01a:	f000 80d2 	beq.w	800f1c2 <_printf_i+0x1c6>
 800f01e:	2f58      	cmp	r7, #88	@ 0x58
 800f020:	f000 80b9 	beq.w	800f196 <_printf_i+0x19a>
 800f024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f028:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f02c:	e03a      	b.n	800f0a4 <_printf_i+0xa8>
 800f02e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f032:	2b15      	cmp	r3, #21
 800f034:	d8f6      	bhi.n	800f024 <_printf_i+0x28>
 800f036:	a101      	add	r1, pc, #4	@ (adr r1, 800f03c <_printf_i+0x40>)
 800f038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f03c:	0800f095 	.word	0x0800f095
 800f040:	0800f0a9 	.word	0x0800f0a9
 800f044:	0800f025 	.word	0x0800f025
 800f048:	0800f025 	.word	0x0800f025
 800f04c:	0800f025 	.word	0x0800f025
 800f050:	0800f025 	.word	0x0800f025
 800f054:	0800f0a9 	.word	0x0800f0a9
 800f058:	0800f025 	.word	0x0800f025
 800f05c:	0800f025 	.word	0x0800f025
 800f060:	0800f025 	.word	0x0800f025
 800f064:	0800f025 	.word	0x0800f025
 800f068:	0800f1a9 	.word	0x0800f1a9
 800f06c:	0800f0d3 	.word	0x0800f0d3
 800f070:	0800f163 	.word	0x0800f163
 800f074:	0800f025 	.word	0x0800f025
 800f078:	0800f025 	.word	0x0800f025
 800f07c:	0800f1cb 	.word	0x0800f1cb
 800f080:	0800f025 	.word	0x0800f025
 800f084:	0800f0d3 	.word	0x0800f0d3
 800f088:	0800f025 	.word	0x0800f025
 800f08c:	0800f025 	.word	0x0800f025
 800f090:	0800f16b 	.word	0x0800f16b
 800f094:	6833      	ldr	r3, [r6, #0]
 800f096:	1d1a      	adds	r2, r3, #4
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	6032      	str	r2, [r6, #0]
 800f09c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f0a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	e09d      	b.n	800f1e4 <_printf_i+0x1e8>
 800f0a8:	6833      	ldr	r3, [r6, #0]
 800f0aa:	6820      	ldr	r0, [r4, #0]
 800f0ac:	1d19      	adds	r1, r3, #4
 800f0ae:	6031      	str	r1, [r6, #0]
 800f0b0:	0606      	lsls	r6, r0, #24
 800f0b2:	d501      	bpl.n	800f0b8 <_printf_i+0xbc>
 800f0b4:	681d      	ldr	r5, [r3, #0]
 800f0b6:	e003      	b.n	800f0c0 <_printf_i+0xc4>
 800f0b8:	0645      	lsls	r5, r0, #25
 800f0ba:	d5fb      	bpl.n	800f0b4 <_printf_i+0xb8>
 800f0bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f0c0:	2d00      	cmp	r5, #0
 800f0c2:	da03      	bge.n	800f0cc <_printf_i+0xd0>
 800f0c4:	232d      	movs	r3, #45	@ 0x2d
 800f0c6:	426d      	negs	r5, r5
 800f0c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f0cc:	4859      	ldr	r0, [pc, #356]	@ (800f234 <_printf_i+0x238>)
 800f0ce:	230a      	movs	r3, #10
 800f0d0:	e011      	b.n	800f0f6 <_printf_i+0xfa>
 800f0d2:	6821      	ldr	r1, [r4, #0]
 800f0d4:	6833      	ldr	r3, [r6, #0]
 800f0d6:	0608      	lsls	r0, r1, #24
 800f0d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800f0dc:	d402      	bmi.n	800f0e4 <_printf_i+0xe8>
 800f0de:	0649      	lsls	r1, r1, #25
 800f0e0:	bf48      	it	mi
 800f0e2:	b2ad      	uxthmi	r5, r5
 800f0e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800f0e6:	6033      	str	r3, [r6, #0]
 800f0e8:	4852      	ldr	r0, [pc, #328]	@ (800f234 <_printf_i+0x238>)
 800f0ea:	bf14      	ite	ne
 800f0ec:	230a      	movne	r3, #10
 800f0ee:	2308      	moveq	r3, #8
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f0f6:	6866      	ldr	r6, [r4, #4]
 800f0f8:	2e00      	cmp	r6, #0
 800f0fa:	60a6      	str	r6, [r4, #8]
 800f0fc:	bfa2      	ittt	ge
 800f0fe:	6821      	ldrge	r1, [r4, #0]
 800f100:	f021 0104 	bicge.w	r1, r1, #4
 800f104:	6021      	strge	r1, [r4, #0]
 800f106:	b90d      	cbnz	r5, 800f10c <_printf_i+0x110>
 800f108:	2e00      	cmp	r6, #0
 800f10a:	d04b      	beq.n	800f1a4 <_printf_i+0x1a8>
 800f10c:	4616      	mov	r6, r2
 800f10e:	fbb5 f1f3 	udiv	r1, r5, r3
 800f112:	fb03 5711 	mls	r7, r3, r1, r5
 800f116:	5dc7      	ldrb	r7, [r0, r7]
 800f118:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f11c:	462f      	mov	r7, r5
 800f11e:	460d      	mov	r5, r1
 800f120:	42bb      	cmp	r3, r7
 800f122:	d9f4      	bls.n	800f10e <_printf_i+0x112>
 800f124:	2b08      	cmp	r3, #8
 800f126:	d10b      	bne.n	800f140 <_printf_i+0x144>
 800f128:	6823      	ldr	r3, [r4, #0]
 800f12a:	07df      	lsls	r7, r3, #31
 800f12c:	d508      	bpl.n	800f140 <_printf_i+0x144>
 800f12e:	6923      	ldr	r3, [r4, #16]
 800f130:	6861      	ldr	r1, [r4, #4]
 800f132:	4299      	cmp	r1, r3
 800f134:	bfde      	ittt	le
 800f136:	2330      	movle	r3, #48	@ 0x30
 800f138:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f13c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f140:	1b92      	subs	r2, r2, r6
 800f142:	6122      	str	r2, [r4, #16]
 800f144:	464b      	mov	r3, r9
 800f146:	aa03      	add	r2, sp, #12
 800f148:	4621      	mov	r1, r4
 800f14a:	4640      	mov	r0, r8
 800f14c:	f8cd a000 	str.w	sl, [sp]
 800f150:	f7ff fee2 	bl	800ef18 <_printf_common>
 800f154:	3001      	adds	r0, #1
 800f156:	d14a      	bne.n	800f1ee <_printf_i+0x1f2>
 800f158:	f04f 30ff 	mov.w	r0, #4294967295
 800f15c:	b004      	add	sp, #16
 800f15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f162:	6823      	ldr	r3, [r4, #0]
 800f164:	f043 0320 	orr.w	r3, r3, #32
 800f168:	6023      	str	r3, [r4, #0]
 800f16a:	2778      	movs	r7, #120	@ 0x78
 800f16c:	4832      	ldr	r0, [pc, #200]	@ (800f238 <_printf_i+0x23c>)
 800f16e:	6823      	ldr	r3, [r4, #0]
 800f170:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f174:	061f      	lsls	r7, r3, #24
 800f176:	6831      	ldr	r1, [r6, #0]
 800f178:	f851 5b04 	ldr.w	r5, [r1], #4
 800f17c:	d402      	bmi.n	800f184 <_printf_i+0x188>
 800f17e:	065f      	lsls	r7, r3, #25
 800f180:	bf48      	it	mi
 800f182:	b2ad      	uxthmi	r5, r5
 800f184:	6031      	str	r1, [r6, #0]
 800f186:	07d9      	lsls	r1, r3, #31
 800f188:	bf44      	itt	mi
 800f18a:	f043 0320 	orrmi.w	r3, r3, #32
 800f18e:	6023      	strmi	r3, [r4, #0]
 800f190:	b11d      	cbz	r5, 800f19a <_printf_i+0x19e>
 800f192:	2310      	movs	r3, #16
 800f194:	e7ac      	b.n	800f0f0 <_printf_i+0xf4>
 800f196:	4827      	ldr	r0, [pc, #156]	@ (800f234 <_printf_i+0x238>)
 800f198:	e7e9      	b.n	800f16e <_printf_i+0x172>
 800f19a:	6823      	ldr	r3, [r4, #0]
 800f19c:	f023 0320 	bic.w	r3, r3, #32
 800f1a0:	6023      	str	r3, [r4, #0]
 800f1a2:	e7f6      	b.n	800f192 <_printf_i+0x196>
 800f1a4:	4616      	mov	r6, r2
 800f1a6:	e7bd      	b.n	800f124 <_printf_i+0x128>
 800f1a8:	6833      	ldr	r3, [r6, #0]
 800f1aa:	6825      	ldr	r5, [r4, #0]
 800f1ac:	1d18      	adds	r0, r3, #4
 800f1ae:	6961      	ldr	r1, [r4, #20]
 800f1b0:	6030      	str	r0, [r6, #0]
 800f1b2:	062e      	lsls	r6, r5, #24
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	d501      	bpl.n	800f1bc <_printf_i+0x1c0>
 800f1b8:	6019      	str	r1, [r3, #0]
 800f1ba:	e002      	b.n	800f1c2 <_printf_i+0x1c6>
 800f1bc:	0668      	lsls	r0, r5, #25
 800f1be:	d5fb      	bpl.n	800f1b8 <_printf_i+0x1bc>
 800f1c0:	8019      	strh	r1, [r3, #0]
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	4616      	mov	r6, r2
 800f1c6:	6123      	str	r3, [r4, #16]
 800f1c8:	e7bc      	b.n	800f144 <_printf_i+0x148>
 800f1ca:	6833      	ldr	r3, [r6, #0]
 800f1cc:	2100      	movs	r1, #0
 800f1ce:	1d1a      	adds	r2, r3, #4
 800f1d0:	6032      	str	r2, [r6, #0]
 800f1d2:	681e      	ldr	r6, [r3, #0]
 800f1d4:	6862      	ldr	r2, [r4, #4]
 800f1d6:	4630      	mov	r0, r6
 800f1d8:	f000 f994 	bl	800f504 <memchr>
 800f1dc:	b108      	cbz	r0, 800f1e2 <_printf_i+0x1e6>
 800f1de:	1b80      	subs	r0, r0, r6
 800f1e0:	6060      	str	r0, [r4, #4]
 800f1e2:	6863      	ldr	r3, [r4, #4]
 800f1e4:	6123      	str	r3, [r4, #16]
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1ec:	e7aa      	b.n	800f144 <_printf_i+0x148>
 800f1ee:	6923      	ldr	r3, [r4, #16]
 800f1f0:	4632      	mov	r2, r6
 800f1f2:	4649      	mov	r1, r9
 800f1f4:	4640      	mov	r0, r8
 800f1f6:	47d0      	blx	sl
 800f1f8:	3001      	adds	r0, #1
 800f1fa:	d0ad      	beq.n	800f158 <_printf_i+0x15c>
 800f1fc:	6823      	ldr	r3, [r4, #0]
 800f1fe:	079b      	lsls	r3, r3, #30
 800f200:	d413      	bmi.n	800f22a <_printf_i+0x22e>
 800f202:	68e0      	ldr	r0, [r4, #12]
 800f204:	9b03      	ldr	r3, [sp, #12]
 800f206:	4298      	cmp	r0, r3
 800f208:	bfb8      	it	lt
 800f20a:	4618      	movlt	r0, r3
 800f20c:	e7a6      	b.n	800f15c <_printf_i+0x160>
 800f20e:	2301      	movs	r3, #1
 800f210:	4632      	mov	r2, r6
 800f212:	4649      	mov	r1, r9
 800f214:	4640      	mov	r0, r8
 800f216:	47d0      	blx	sl
 800f218:	3001      	adds	r0, #1
 800f21a:	d09d      	beq.n	800f158 <_printf_i+0x15c>
 800f21c:	3501      	adds	r5, #1
 800f21e:	68e3      	ldr	r3, [r4, #12]
 800f220:	9903      	ldr	r1, [sp, #12]
 800f222:	1a5b      	subs	r3, r3, r1
 800f224:	42ab      	cmp	r3, r5
 800f226:	dcf2      	bgt.n	800f20e <_printf_i+0x212>
 800f228:	e7eb      	b.n	800f202 <_printf_i+0x206>
 800f22a:	2500      	movs	r5, #0
 800f22c:	f104 0619 	add.w	r6, r4, #25
 800f230:	e7f5      	b.n	800f21e <_printf_i+0x222>
 800f232:	bf00      	nop
 800f234:	080109c9 	.word	0x080109c9
 800f238:	080109da 	.word	0x080109da

0800f23c <__sflush_r>:
 800f23c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f244:	0716      	lsls	r6, r2, #28
 800f246:	4605      	mov	r5, r0
 800f248:	460c      	mov	r4, r1
 800f24a:	d454      	bmi.n	800f2f6 <__sflush_r+0xba>
 800f24c:	684b      	ldr	r3, [r1, #4]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	dc02      	bgt.n	800f258 <__sflush_r+0x1c>
 800f252:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f254:	2b00      	cmp	r3, #0
 800f256:	dd48      	ble.n	800f2ea <__sflush_r+0xae>
 800f258:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f25a:	2e00      	cmp	r6, #0
 800f25c:	d045      	beq.n	800f2ea <__sflush_r+0xae>
 800f25e:	2300      	movs	r3, #0
 800f260:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f264:	682f      	ldr	r7, [r5, #0]
 800f266:	6a21      	ldr	r1, [r4, #32]
 800f268:	602b      	str	r3, [r5, #0]
 800f26a:	d030      	beq.n	800f2ce <__sflush_r+0x92>
 800f26c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f26e:	89a3      	ldrh	r3, [r4, #12]
 800f270:	0759      	lsls	r1, r3, #29
 800f272:	d505      	bpl.n	800f280 <__sflush_r+0x44>
 800f274:	6863      	ldr	r3, [r4, #4]
 800f276:	1ad2      	subs	r2, r2, r3
 800f278:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f27a:	b10b      	cbz	r3, 800f280 <__sflush_r+0x44>
 800f27c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f27e:	1ad2      	subs	r2, r2, r3
 800f280:	2300      	movs	r3, #0
 800f282:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f284:	6a21      	ldr	r1, [r4, #32]
 800f286:	4628      	mov	r0, r5
 800f288:	47b0      	blx	r6
 800f28a:	1c43      	adds	r3, r0, #1
 800f28c:	89a3      	ldrh	r3, [r4, #12]
 800f28e:	d106      	bne.n	800f29e <__sflush_r+0x62>
 800f290:	6829      	ldr	r1, [r5, #0]
 800f292:	291d      	cmp	r1, #29
 800f294:	d82b      	bhi.n	800f2ee <__sflush_r+0xb2>
 800f296:	4a2a      	ldr	r2, [pc, #168]	@ (800f340 <__sflush_r+0x104>)
 800f298:	410a      	asrs	r2, r1
 800f29a:	07d6      	lsls	r6, r2, #31
 800f29c:	d427      	bmi.n	800f2ee <__sflush_r+0xb2>
 800f29e:	2200      	movs	r2, #0
 800f2a0:	04d9      	lsls	r1, r3, #19
 800f2a2:	6062      	str	r2, [r4, #4]
 800f2a4:	6922      	ldr	r2, [r4, #16]
 800f2a6:	6022      	str	r2, [r4, #0]
 800f2a8:	d504      	bpl.n	800f2b4 <__sflush_r+0x78>
 800f2aa:	1c42      	adds	r2, r0, #1
 800f2ac:	d101      	bne.n	800f2b2 <__sflush_r+0x76>
 800f2ae:	682b      	ldr	r3, [r5, #0]
 800f2b0:	b903      	cbnz	r3, 800f2b4 <__sflush_r+0x78>
 800f2b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800f2b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f2b6:	602f      	str	r7, [r5, #0]
 800f2b8:	b1b9      	cbz	r1, 800f2ea <__sflush_r+0xae>
 800f2ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f2be:	4299      	cmp	r1, r3
 800f2c0:	d002      	beq.n	800f2c8 <__sflush_r+0x8c>
 800f2c2:	4628      	mov	r0, r5
 800f2c4:	f7ff fc9c 	bl	800ec00 <_free_r>
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800f2cc:	e00d      	b.n	800f2ea <__sflush_r+0xae>
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	47b0      	blx	r6
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	1c50      	adds	r0, r2, #1
 800f2d8:	d1c9      	bne.n	800f26e <__sflush_r+0x32>
 800f2da:	682b      	ldr	r3, [r5, #0]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d0c6      	beq.n	800f26e <__sflush_r+0x32>
 800f2e0:	2b1d      	cmp	r3, #29
 800f2e2:	d001      	beq.n	800f2e8 <__sflush_r+0xac>
 800f2e4:	2b16      	cmp	r3, #22
 800f2e6:	d11d      	bne.n	800f324 <__sflush_r+0xe8>
 800f2e8:	602f      	str	r7, [r5, #0]
 800f2ea:	2000      	movs	r0, #0
 800f2ec:	e021      	b.n	800f332 <__sflush_r+0xf6>
 800f2ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2f2:	b21b      	sxth	r3, r3
 800f2f4:	e01a      	b.n	800f32c <__sflush_r+0xf0>
 800f2f6:	690f      	ldr	r7, [r1, #16]
 800f2f8:	2f00      	cmp	r7, #0
 800f2fa:	d0f6      	beq.n	800f2ea <__sflush_r+0xae>
 800f2fc:	0793      	lsls	r3, r2, #30
 800f2fe:	680e      	ldr	r6, [r1, #0]
 800f300:	600f      	str	r7, [r1, #0]
 800f302:	bf0c      	ite	eq
 800f304:	694b      	ldreq	r3, [r1, #20]
 800f306:	2300      	movne	r3, #0
 800f308:	eba6 0807 	sub.w	r8, r6, r7
 800f30c:	608b      	str	r3, [r1, #8]
 800f30e:	f1b8 0f00 	cmp.w	r8, #0
 800f312:	ddea      	ble.n	800f2ea <__sflush_r+0xae>
 800f314:	4643      	mov	r3, r8
 800f316:	463a      	mov	r2, r7
 800f318:	6a21      	ldr	r1, [r4, #32]
 800f31a:	4628      	mov	r0, r5
 800f31c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f31e:	47b0      	blx	r6
 800f320:	2800      	cmp	r0, #0
 800f322:	dc08      	bgt.n	800f336 <__sflush_r+0xfa>
 800f324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f32c:	f04f 30ff 	mov.w	r0, #4294967295
 800f330:	81a3      	strh	r3, [r4, #12]
 800f332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f336:	4407      	add	r7, r0
 800f338:	eba8 0800 	sub.w	r8, r8, r0
 800f33c:	e7e7      	b.n	800f30e <__sflush_r+0xd2>
 800f33e:	bf00      	nop
 800f340:	dfbffffe 	.word	0xdfbffffe

0800f344 <_fflush_r>:
 800f344:	b538      	push	{r3, r4, r5, lr}
 800f346:	690b      	ldr	r3, [r1, #16]
 800f348:	4605      	mov	r5, r0
 800f34a:	460c      	mov	r4, r1
 800f34c:	b913      	cbnz	r3, 800f354 <_fflush_r+0x10>
 800f34e:	2500      	movs	r5, #0
 800f350:	4628      	mov	r0, r5
 800f352:	bd38      	pop	{r3, r4, r5, pc}
 800f354:	b118      	cbz	r0, 800f35e <_fflush_r+0x1a>
 800f356:	6a03      	ldr	r3, [r0, #32]
 800f358:	b90b      	cbnz	r3, 800f35e <_fflush_r+0x1a>
 800f35a:	f7ff fa3f 	bl	800e7dc <__sinit>
 800f35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d0f3      	beq.n	800f34e <_fflush_r+0xa>
 800f366:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f368:	07d0      	lsls	r0, r2, #31
 800f36a:	d404      	bmi.n	800f376 <_fflush_r+0x32>
 800f36c:	0599      	lsls	r1, r3, #22
 800f36e:	d402      	bmi.n	800f376 <_fflush_r+0x32>
 800f370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f372:	f7ff fc42 	bl	800ebfa <__retarget_lock_acquire_recursive>
 800f376:	4628      	mov	r0, r5
 800f378:	4621      	mov	r1, r4
 800f37a:	f7ff ff5f 	bl	800f23c <__sflush_r>
 800f37e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f380:	4605      	mov	r5, r0
 800f382:	07da      	lsls	r2, r3, #31
 800f384:	d4e4      	bmi.n	800f350 <_fflush_r+0xc>
 800f386:	89a3      	ldrh	r3, [r4, #12]
 800f388:	059b      	lsls	r3, r3, #22
 800f38a:	d4e1      	bmi.n	800f350 <_fflush_r+0xc>
 800f38c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f38e:	f7ff fc35 	bl	800ebfc <__retarget_lock_release_recursive>
 800f392:	e7dd      	b.n	800f350 <_fflush_r+0xc>

0800f394 <__swhatbuf_r>:
 800f394:	b570      	push	{r4, r5, r6, lr}
 800f396:	460c      	mov	r4, r1
 800f398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f39c:	b096      	sub	sp, #88	@ 0x58
 800f39e:	4615      	mov	r5, r2
 800f3a0:	2900      	cmp	r1, #0
 800f3a2:	461e      	mov	r6, r3
 800f3a4:	da0c      	bge.n	800f3c0 <__swhatbuf_r+0x2c>
 800f3a6:	89a3      	ldrh	r3, [r4, #12]
 800f3a8:	2100      	movs	r1, #0
 800f3aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f3ae:	bf14      	ite	ne
 800f3b0:	2340      	movne	r3, #64	@ 0x40
 800f3b2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f3b6:	2000      	movs	r0, #0
 800f3b8:	6031      	str	r1, [r6, #0]
 800f3ba:	602b      	str	r3, [r5, #0]
 800f3bc:	b016      	add	sp, #88	@ 0x58
 800f3be:	bd70      	pop	{r4, r5, r6, pc}
 800f3c0:	466a      	mov	r2, sp
 800f3c2:	f000 f87d 	bl	800f4c0 <_fstat_r>
 800f3c6:	2800      	cmp	r0, #0
 800f3c8:	dbed      	blt.n	800f3a6 <__swhatbuf_r+0x12>
 800f3ca:	9901      	ldr	r1, [sp, #4]
 800f3cc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f3d0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f3d4:	4259      	negs	r1, r3
 800f3d6:	4159      	adcs	r1, r3
 800f3d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f3dc:	e7eb      	b.n	800f3b6 <__swhatbuf_r+0x22>

0800f3de <__smakebuf_r>:
 800f3de:	898b      	ldrh	r3, [r1, #12]
 800f3e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3e2:	079d      	lsls	r5, r3, #30
 800f3e4:	4606      	mov	r6, r0
 800f3e6:	460c      	mov	r4, r1
 800f3e8:	d507      	bpl.n	800f3fa <__smakebuf_r+0x1c>
 800f3ea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f3ee:	6023      	str	r3, [r4, #0]
 800f3f0:	6123      	str	r3, [r4, #16]
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	6163      	str	r3, [r4, #20]
 800f3f6:	b003      	add	sp, #12
 800f3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3fa:	ab01      	add	r3, sp, #4
 800f3fc:	466a      	mov	r2, sp
 800f3fe:	f7ff ffc9 	bl	800f394 <__swhatbuf_r>
 800f402:	9f00      	ldr	r7, [sp, #0]
 800f404:	4605      	mov	r5, r0
 800f406:	4630      	mov	r0, r6
 800f408:	4639      	mov	r1, r7
 800f40a:	f7ff f8cf 	bl	800e5ac <_malloc_r>
 800f40e:	b948      	cbnz	r0, 800f424 <__smakebuf_r+0x46>
 800f410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f414:	059a      	lsls	r2, r3, #22
 800f416:	d4ee      	bmi.n	800f3f6 <__smakebuf_r+0x18>
 800f418:	f023 0303 	bic.w	r3, r3, #3
 800f41c:	f043 0302 	orr.w	r3, r3, #2
 800f420:	81a3      	strh	r3, [r4, #12]
 800f422:	e7e2      	b.n	800f3ea <__smakebuf_r+0xc>
 800f424:	89a3      	ldrh	r3, [r4, #12]
 800f426:	6020      	str	r0, [r4, #0]
 800f428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f42c:	81a3      	strh	r3, [r4, #12]
 800f42e:	9b01      	ldr	r3, [sp, #4]
 800f430:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f434:	b15b      	cbz	r3, 800f44e <__smakebuf_r+0x70>
 800f436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f43a:	4630      	mov	r0, r6
 800f43c:	f000 f852 	bl	800f4e4 <_isatty_r>
 800f440:	b128      	cbz	r0, 800f44e <__smakebuf_r+0x70>
 800f442:	89a3      	ldrh	r3, [r4, #12]
 800f444:	f023 0303 	bic.w	r3, r3, #3
 800f448:	f043 0301 	orr.w	r3, r3, #1
 800f44c:	81a3      	strh	r3, [r4, #12]
 800f44e:	89a3      	ldrh	r3, [r4, #12]
 800f450:	431d      	orrs	r5, r3
 800f452:	81a5      	strh	r5, [r4, #12]
 800f454:	e7cf      	b.n	800f3f6 <__smakebuf_r+0x18>

0800f456 <_putc_r>:
 800f456:	b570      	push	{r4, r5, r6, lr}
 800f458:	460d      	mov	r5, r1
 800f45a:	4614      	mov	r4, r2
 800f45c:	4606      	mov	r6, r0
 800f45e:	b118      	cbz	r0, 800f468 <_putc_r+0x12>
 800f460:	6a03      	ldr	r3, [r0, #32]
 800f462:	b90b      	cbnz	r3, 800f468 <_putc_r+0x12>
 800f464:	f7ff f9ba 	bl	800e7dc <__sinit>
 800f468:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f46a:	07d8      	lsls	r0, r3, #31
 800f46c:	d405      	bmi.n	800f47a <_putc_r+0x24>
 800f46e:	89a3      	ldrh	r3, [r4, #12]
 800f470:	0599      	lsls	r1, r3, #22
 800f472:	d402      	bmi.n	800f47a <_putc_r+0x24>
 800f474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f476:	f7ff fbc0 	bl	800ebfa <__retarget_lock_acquire_recursive>
 800f47a:	68a3      	ldr	r3, [r4, #8]
 800f47c:	3b01      	subs	r3, #1
 800f47e:	2b00      	cmp	r3, #0
 800f480:	60a3      	str	r3, [r4, #8]
 800f482:	da05      	bge.n	800f490 <_putc_r+0x3a>
 800f484:	69a2      	ldr	r2, [r4, #24]
 800f486:	4293      	cmp	r3, r2
 800f488:	db12      	blt.n	800f4b0 <_putc_r+0x5a>
 800f48a:	b2eb      	uxtb	r3, r5
 800f48c:	2b0a      	cmp	r3, #10
 800f48e:	d00f      	beq.n	800f4b0 <_putc_r+0x5a>
 800f490:	6823      	ldr	r3, [r4, #0]
 800f492:	1c5a      	adds	r2, r3, #1
 800f494:	6022      	str	r2, [r4, #0]
 800f496:	701d      	strb	r5, [r3, #0]
 800f498:	b2ed      	uxtb	r5, r5
 800f49a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f49c:	07da      	lsls	r2, r3, #31
 800f49e:	d405      	bmi.n	800f4ac <_putc_r+0x56>
 800f4a0:	89a3      	ldrh	r3, [r4, #12]
 800f4a2:	059b      	lsls	r3, r3, #22
 800f4a4:	d402      	bmi.n	800f4ac <_putc_r+0x56>
 800f4a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4a8:	f7ff fba8 	bl	800ebfc <__retarget_lock_release_recursive>
 800f4ac:	4628      	mov	r0, r5
 800f4ae:	bd70      	pop	{r4, r5, r6, pc}
 800f4b0:	4629      	mov	r1, r5
 800f4b2:	4622      	mov	r2, r4
 800f4b4:	4630      	mov	r0, r6
 800f4b6:	f7ff fa82 	bl	800e9be <__swbuf_r>
 800f4ba:	4605      	mov	r5, r0
 800f4bc:	e7ed      	b.n	800f49a <_putc_r+0x44>
	...

0800f4c0 <_fstat_r>:
 800f4c0:	b538      	push	{r3, r4, r5, lr}
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	4d06      	ldr	r5, [pc, #24]	@ (800f4e0 <_fstat_r+0x20>)
 800f4c6:	4604      	mov	r4, r0
 800f4c8:	4608      	mov	r0, r1
 800f4ca:	4611      	mov	r1, r2
 800f4cc:	602b      	str	r3, [r5, #0]
 800f4ce:	f7f2 fdb8 	bl	8002042 <_fstat>
 800f4d2:	1c43      	adds	r3, r0, #1
 800f4d4:	d102      	bne.n	800f4dc <_fstat_r+0x1c>
 800f4d6:	682b      	ldr	r3, [r5, #0]
 800f4d8:	b103      	cbz	r3, 800f4dc <_fstat_r+0x1c>
 800f4da:	6023      	str	r3, [r4, #0]
 800f4dc:	bd38      	pop	{r3, r4, r5, pc}
 800f4de:	bf00      	nop
 800f4e0:	200007f8 	.word	0x200007f8

0800f4e4 <_isatty_r>:
 800f4e4:	b538      	push	{r3, r4, r5, lr}
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	4d05      	ldr	r5, [pc, #20]	@ (800f500 <_isatty_r+0x1c>)
 800f4ea:	4604      	mov	r4, r0
 800f4ec:	4608      	mov	r0, r1
 800f4ee:	602b      	str	r3, [r5, #0]
 800f4f0:	f7f2 fdb7 	bl	8002062 <_isatty>
 800f4f4:	1c43      	adds	r3, r0, #1
 800f4f6:	d102      	bne.n	800f4fe <_isatty_r+0x1a>
 800f4f8:	682b      	ldr	r3, [r5, #0]
 800f4fa:	b103      	cbz	r3, 800f4fe <_isatty_r+0x1a>
 800f4fc:	6023      	str	r3, [r4, #0]
 800f4fe:	bd38      	pop	{r3, r4, r5, pc}
 800f500:	200007f8 	.word	0x200007f8

0800f504 <memchr>:
 800f504:	b2c9      	uxtb	r1, r1
 800f506:	4603      	mov	r3, r0
 800f508:	4402      	add	r2, r0
 800f50a:	b510      	push	{r4, lr}
 800f50c:	4293      	cmp	r3, r2
 800f50e:	4618      	mov	r0, r3
 800f510:	d101      	bne.n	800f516 <memchr+0x12>
 800f512:	2000      	movs	r0, #0
 800f514:	e003      	b.n	800f51e <memchr+0x1a>
 800f516:	7804      	ldrb	r4, [r0, #0]
 800f518:	3301      	adds	r3, #1
 800f51a:	428c      	cmp	r4, r1
 800f51c:	d1f6      	bne.n	800f50c <memchr+0x8>
 800f51e:	bd10      	pop	{r4, pc}

0800f520 <_init>:
 800f520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f522:	bf00      	nop
 800f524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f526:	bc08      	pop	{r3}
 800f528:	469e      	mov	lr, r3
 800f52a:	4770      	bx	lr

0800f52c <_fini>:
 800f52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f52e:	bf00      	nop
 800f530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f532:	bc08      	pop	{r3}
 800f534:	469e      	mov	lr, r3
 800f536:	4770      	bx	lr
