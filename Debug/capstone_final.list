
capstone_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db88  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001000  0800ddd8  0800ddd8  0000edd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800edd8  0800edd8  0000fdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ede0  0800ede0  0000fde0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ede4  0800ede4  0000fde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  20000000  0800ede8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000077e  20000070  0800ee58  00010070  2**2
                  ALLOC
  8 ._user_heap_stack 00000602  200007ee  0800ee58  000107ee  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029583  00000000  00000000  000100a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000493e  00000000  00000000  00039629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002330  00000000  00000000  0003df68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001be5  00000000  00000000  00040298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e6e6  00000000  00000000  00041e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f40d  00000000  00000000  00080563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001871ea  00000000  00000000  000af970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00236b5a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a1f8  00000000  00000000  00236ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  00240d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000070 	.word	0x20000070
 800026c:	00000000 	.word	0x00000000
 8000270:	0800ddc0 	.word	0x0800ddc0

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000074 	.word	0x20000074
 800028c:	0800ddc0 	.word	0x0800ddc0

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b97e 	b.w	8000d80 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aa0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14d      	bne.n	8000b44 <__udivmoddi4+0xa8>
 8000aa8:	428a      	cmp	r2, r1
 8000aaa:	460f      	mov	r7, r1
 8000aac:	4684      	mov	ip, r0
 8000aae:	4696      	mov	lr, r2
 8000ab0:	fab2 f382 	clz	r3, r2
 8000ab4:	d960      	bls.n	8000b78 <__udivmoddi4+0xdc>
 8000ab6:	b14b      	cbz	r3, 8000acc <__udivmoddi4+0x30>
 8000ab8:	fa02 fe03 	lsl.w	lr, r2, r3
 8000abc:	f1c3 0220 	rsb	r2, r3, #32
 8000ac0:	409f      	lsls	r7, r3
 8000ac2:	fa00 fc03 	lsl.w	ip, r0, r3
 8000ac6:	fa20 f202 	lsr.w	r2, r0, r2
 8000aca:	4317      	orrs	r7, r2
 8000acc:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000ad0:	fa1f f48e 	uxth.w	r4, lr
 8000ad4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000ad8:	fbb7 f1f6 	udiv	r1, r7, r6
 8000adc:	fb06 7711 	mls	r7, r6, r1, r7
 8000ae0:	fb01 f004 	mul.w	r0, r1, r4
 8000ae4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ae8:	4290      	cmp	r0, r2
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x62>
 8000aec:	eb1e 0202 	adds.w	r2, lr, r2
 8000af0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000af4:	d202      	bcs.n	8000afc <__udivmoddi4+0x60>
 8000af6:	4290      	cmp	r0, r2
 8000af8:	f200 812d 	bhi.w	8000d56 <__udivmoddi4+0x2ba>
 8000afc:	4639      	mov	r1, r7
 8000afe:	1a12      	subs	r2, r2, r0
 8000b00:	fa1f fc8c 	uxth.w	ip, ip
 8000b04:	fbb2 f0f6 	udiv	r0, r2, r6
 8000b08:	fb06 2210 	mls	r2, r6, r0, r2
 8000b0c:	fb00 f404 	mul.w	r4, r0, r4
 8000b10:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000b14:	4564      	cmp	r4, ip
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x8e>
 8000b18:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000b1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x8c>
 8000b22:	4564      	cmp	r4, ip
 8000b24:	f200 811a 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000b28:	4610      	mov	r0, r2
 8000b2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b2e:	ebac 0c04 	sub.w	ip, ip, r4
 8000b32:	2100      	movs	r1, #0
 8000b34:	b125      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b36:	fa2c f303 	lsr.w	r3, ip, r3
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	e9c5 3200 	strd	r3, r2, [r5]
 8000b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b44:	428b      	cmp	r3, r1
 8000b46:	d905      	bls.n	8000b54 <__udivmoddi4+0xb8>
 8000b48:	b10d      	cbz	r5, 8000b4e <__udivmoddi4+0xb2>
 8000b4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4608      	mov	r0, r1
 8000b52:	e7f5      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b54:	fab3 f183 	clz	r1, r3
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	d14d      	bne.n	8000bf8 <__udivmoddi4+0x15c>
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	f0c0 80f2 	bcc.w	8000d46 <__udivmoddi4+0x2aa>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f080 80ef 	bcs.w	8000d46 <__udivmoddi4+0x2aa>
 8000b68:	4606      	mov	r6, r0
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0e6      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b72:	e9c5 6300 	strd	r6, r3, [r5]
 8000b76:	e7e3      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f040 80a2 	bne.w	8000cc2 <__udivmoddi4+0x226>
 8000b7e:	1a8a      	subs	r2, r1, r2
 8000b80:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000b84:	fa1f f68e 	uxth.w	r6, lr
 8000b88:	2101      	movs	r1, #1
 8000b8a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000b8e:	fb07 2014 	mls	r0, r7, r4, r2
 8000b92:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000b96:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b9a:	fb06 f004 	mul.w	r0, r6, r4
 8000b9e:	4290      	cmp	r0, r2
 8000ba0:	d90f      	bls.n	8000bc2 <__udivmoddi4+0x126>
 8000ba2:	eb1e 0202 	adds.w	r2, lr, r2
 8000ba6:	f104 38ff 	add.w	r8, r4, #4294967295
 8000baa:	bf2c      	ite	cs
 8000bac:	f04f 0901 	movcs.w	r9, #1
 8000bb0:	f04f 0900 	movcc.w	r9, #0
 8000bb4:	4290      	cmp	r0, r2
 8000bb6:	d903      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb8:	f1b9 0f00 	cmp.w	r9, #0
 8000bbc:	f000 80c8 	beq.w	8000d50 <__udivmoddi4+0x2b4>
 8000bc0:	4644      	mov	r4, r8
 8000bc2:	1a12      	subs	r2, r2, r0
 8000bc4:	fa1f fc8c 	uxth.w	ip, ip
 8000bc8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bcc:	fb07 2210 	mls	r2, r7, r0, r2
 8000bd0:	fb00 f606 	mul.w	r6, r0, r6
 8000bd4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000bd8:	4566      	cmp	r6, ip
 8000bda:	d908      	bls.n	8000bee <__udivmoddi4+0x152>
 8000bdc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000be0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000be4:	d202      	bcs.n	8000bec <__udivmoddi4+0x150>
 8000be6:	4566      	cmp	r6, ip
 8000be8:	f200 80bb 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000bec:	4610      	mov	r0, r2
 8000bee:	ebac 0c06 	sub.w	ip, ip, r6
 8000bf2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bf6:	e79d      	b.n	8000b34 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa04 fe01 	lsl.w	lr, r4, r1
 8000c02:	fa22 f706 	lsr.w	r7, r2, r6
 8000c06:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c0a:	40f4      	lsrs	r4, r6
 8000c0c:	408a      	lsls	r2, r1
 8000c0e:	431f      	orrs	r7, r3
 8000c10:	ea4e 030c 	orr.w	r3, lr, ip
 8000c14:	fa00 fe01 	lsl.w	lr, r0, r1
 8000c18:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c20:	fa1f fc87 	uxth.w	ip, r7
 8000c24:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c28:	fb08 4410 	mls	r4, r8, r0, r4
 8000c2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c30:	fb00 f90c 	mul.w	r9, r0, ip
 8000c34:	45a1      	cmp	r9, r4
 8000c36:	d90e      	bls.n	8000c56 <__udivmoddi4+0x1ba>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	bf2c      	ite	cs
 8000c40:	f04f 0b01 	movcs.w	fp, #1
 8000c44:	f04f 0b00 	movcc.w	fp, #0
 8000c48:	45a1      	cmp	r9, r4
 8000c4a:	d903      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c4c:	f1bb 0f00 	cmp.w	fp, #0
 8000c50:	f000 8093 	beq.w	8000d7a <__udivmoddi4+0x2de>
 8000c54:	4650      	mov	r0, sl
 8000c56:	eba4 0409 	sub.w	r4, r4, r9
 8000c5a:	fa1f f983 	uxth.w	r9, r3
 8000c5e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000c62:	fb08 4413 	mls	r4, r8, r3, r4
 8000c66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c6e:	45a4      	cmp	ip, r4
 8000c70:	d906      	bls.n	8000c80 <__udivmoddi4+0x1e4>
 8000c72:	193c      	adds	r4, r7, r4
 8000c74:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c78:	d201      	bcs.n	8000c7e <__udivmoddi4+0x1e2>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d87a      	bhi.n	8000d74 <__udivmoddi4+0x2d8>
 8000c7e:	4643      	mov	r3, r8
 8000c80:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c84:	eba4 040c 	sub.w	r4, r4, ip
 8000c88:	fba0 9802 	umull	r9, r8, r0, r2
 8000c8c:	4544      	cmp	r4, r8
 8000c8e:	46cc      	mov	ip, r9
 8000c90:	4643      	mov	r3, r8
 8000c92:	d302      	bcc.n	8000c9a <__udivmoddi4+0x1fe>
 8000c94:	d106      	bne.n	8000ca4 <__udivmoddi4+0x208>
 8000c96:	45ce      	cmp	lr, r9
 8000c98:	d204      	bcs.n	8000ca4 <__udivmoddi4+0x208>
 8000c9a:	3801      	subs	r0, #1
 8000c9c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000ca0:	eb68 0307 	sbc.w	r3, r8, r7
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x222>
 8000ca6:	ebbe 020c 	subs.w	r2, lr, ip
 8000caa:	eb64 0403 	sbc.w	r4, r4, r3
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	fa22 f301 	lsr.w	r3, r2, r1
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	431e      	orrs	r6, r3
 8000cba:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	e73e      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000cc2:	fa02 fe03 	lsl.w	lr, r2, r3
 8000cc6:	f1c3 0120 	rsb	r1, r3, #32
 8000cca:	fa04 f203 	lsl.w	r2, r4, r3
 8000cce:	fa00 fc03 	lsl.w	ip, r0, r3
 8000cd2:	40cc      	lsrs	r4, r1
 8000cd4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000cd8:	fa20 f101 	lsr.w	r1, r0, r1
 8000cdc:	fa1f f68e 	uxth.w	r6, lr
 8000ce0:	fbb4 f0f7 	udiv	r0, r4, r7
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	fb07 4410 	mls	r4, r7, r0, r4
 8000cea:	0c11      	lsrs	r1, r2, #16
 8000cec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000cf0:	fb00 f406 	mul.w	r4, r0, r6
 8000cf4:	428c      	cmp	r4, r1
 8000cf6:	d90e      	bls.n	8000d16 <__udivmoddi4+0x27a>
 8000cf8:	eb1e 0101 	adds.w	r1, lr, r1
 8000cfc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d00:	bf2c      	ite	cs
 8000d02:	f04f 0901 	movcs.w	r9, #1
 8000d06:	f04f 0900 	movcc.w	r9, #0
 8000d0a:	428c      	cmp	r4, r1
 8000d0c:	d902      	bls.n	8000d14 <__udivmoddi4+0x278>
 8000d0e:	f1b9 0f00 	cmp.w	r9, #0
 8000d12:	d02c      	beq.n	8000d6e <__udivmoddi4+0x2d2>
 8000d14:	4640      	mov	r0, r8
 8000d16:	1b09      	subs	r1, r1, r4
 8000d18:	b292      	uxth	r2, r2
 8000d1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d1e:	fb07 1114 	mls	r1, r7, r4, r1
 8000d22:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d26:	fb04 f106 	mul.w	r1, r4, r6
 8000d2a:	4291      	cmp	r1, r2
 8000d2c:	d907      	bls.n	8000d3e <__udivmoddi4+0x2a2>
 8000d2e:	eb1e 0202 	adds.w	r2, lr, r2
 8000d32:	f104 38ff 	add.w	r8, r4, #4294967295
 8000d36:	d201      	bcs.n	8000d3c <__udivmoddi4+0x2a0>
 8000d38:	4291      	cmp	r1, r2
 8000d3a:	d815      	bhi.n	8000d68 <__udivmoddi4+0x2cc>
 8000d3c:	4644      	mov	r4, r8
 8000d3e:	1a52      	subs	r2, r2, r1
 8000d40:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000d44:	e721      	b.n	8000b8a <__udivmoddi4+0xee>
 8000d46:	1a86      	subs	r6, r0, r2
 8000d48:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	e70e      	b.n	8000b6e <__udivmoddi4+0xd2>
 8000d50:	3c02      	subs	r4, #2
 8000d52:	4472      	add	r2, lr
 8000d54:	e735      	b.n	8000bc2 <__udivmoddi4+0x126>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4472      	add	r2, lr
 8000d5a:	e6d0      	b.n	8000afe <__udivmoddi4+0x62>
 8000d5c:	44f4      	add	ip, lr
 8000d5e:	3802      	subs	r0, #2
 8000d60:	e6e3      	b.n	8000b2a <__udivmoddi4+0x8e>
 8000d62:	44f4      	add	ip, lr
 8000d64:	3802      	subs	r0, #2
 8000d66:	e742      	b.n	8000bee <__udivmoddi4+0x152>
 8000d68:	3c02      	subs	r4, #2
 8000d6a:	4472      	add	r2, lr
 8000d6c:	e7e7      	b.n	8000d3e <__udivmoddi4+0x2a2>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	4471      	add	r1, lr
 8000d72:	e7d0      	b.n	8000d16 <__udivmoddi4+0x27a>
 8000d74:	3b02      	subs	r3, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	e782      	b.n	8000c80 <__udivmoddi4+0x1e4>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	e76a      	b.n	8000c56 <__udivmoddi4+0x1ba>

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d8c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d90:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d9c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000da0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000da4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00b      	beq.n	8000dc4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000dac:	e000      	b.n	8000db0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000dae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000db0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f9      	beq.n	8000dae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000dba:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <EXTI8_IRQHandler>:
#endif /* __GNUC__ */
static void SystemClock_Config(void);
extern void isr(void);

void EXTI8_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
    uint16_t GPIO_Pin;

    /* Get GPIO_Pin */
    if (__HAL_GPIO_EXTI_GET_IT(CONF_WINC_SPI_INT_PIN))
 8000dda:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <EXTI8_IRQHandler+0x34>)
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d105      	bne.n	8000df2 <EXTI8_IRQHandler+0x1e>
 8000de6:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <EXTI8_IRQHandler+0x34>)
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <EXTI8_IRQHandler+0x24>
    {
        GPIO_Pin = CONF_WINC_SPI_INT_PIN;
 8000df2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000df6:	80fb      	strh	r3, [r7, #6]
    }

    HAL_GPIO_EXTI_IRQHandler(GPIO_Pin);
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f003 fb40 	bl	8004480 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	46022000 	.word	0x46022000

08000e0c <HAL_GPIO_EXTI_Rising_Callback>:


void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == CONF_WINC_SPI_INT_PIN)
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e1c:	d101      	bne.n	8000e22 <HAL_GPIO_EXTI_Rising_Callback+0x16>
    {
        isr();
 8000e1e:	f00a fb21 	bl	800b464 <isr>
    }
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <wifi_cb>:
        break;
    }
}

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af02      	add	r7, sp, #8
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
    switch (u8MsgType)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e3c:	d002      	beq.n	8000e44 <wifi_cb+0x18>
 8000e3e:	2b32      	cmp	r3, #50	@ 0x32
 8000e40:	d01f      	beq.n	8000e82 <wifi_cb+0x56>
            wifi_connected = M2M_WIFI_CONNECTED;
            printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF : IP is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
        }
        break;
        default:
        break;
 8000e42:	e038      	b.n	8000eb6 <wifi_cb+0x8a>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	60bb      	str	r3, [r7, #8]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d105      	bne.n	8000e5c <wifi_cb+0x30>
                printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
 8000e50:	481b      	ldr	r0, [pc, #108]	@ (8000ec0 <wifi_cb+0x94>)
 8000e52:	f00c f9b9 	bl	800d1c8 <puts>
                m2m_wifi_request_dhcp_client();
 8000e56:	f00b f831 	bl	800bebc <m2m_wifi_request_dhcp_client>
        break;
 8000e5a:	e02b      	b.n	8000eb4 <wifi_cb+0x88>
            else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d127      	bne.n	8000eb4 <wifi_cb+0x88>
                printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
 8000e64:	4817      	ldr	r0, [pc, #92]	@ (8000ec4 <wifi_cb+0x98>)
 8000e66:	f00c f9af 	bl	800d1c8 <puts>
                wifi_connected = M2M_WIFI_DISCONNECTED;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <wifi_cb+0x9c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_WPA_PSK_KEY, M2M_WIFI_CH_ALL);
 8000e70:	23ff      	movs	r3, #255	@ 0xff
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <wifi_cb+0xa0>)
 8000e76:	2202      	movs	r2, #2
 8000e78:	2107      	movs	r1, #7
 8000e7a:	4815      	ldr	r0, [pc, #84]	@ (8000ed0 <wifi_cb+0xa4>)
 8000e7c:	f00a ff32 	bl	800bce4 <m2m_wifi_connect>
        break;
 8000e80:	e018      	b.n	8000eb4 <wifi_cb+0x88>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
            wifi_connected = M2M_WIFI_CONNECTED;
 8000e86:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <wifi_cb+0x9c>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
            printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF : IP is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3301      	adds	r3, #1
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	3303      	adds	r3, #3
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4809      	ldr	r0, [pc, #36]	@ (8000ed4 <wifi_cb+0xa8>)
 8000eae:	f00c f91b 	bl	800d0e8 <iprintf>
        break;
 8000eb2:	e000      	b.n	8000eb6 <wifi_cb+0x8a>
        break;
 8000eb4:	bf00      	nop
    }
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	0800de80 	.word	0x0800de80
 8000ec4:	0800deb8 	.word	0x0800deb8
 8000ec8:	20000488 	.word	0x20000488
 8000ecc:	0800def0 	.word	0x0800def0
 8000ed0:	0800defc 	.word	0x0800defc
 8000ed4:	0800df04 	.word	0x0800df04

08000ed8 <delay_us>:

void delay_us (uint16_t us)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000ee2:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <delay_us+0x30>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000eea:	bf00      	nop
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <delay_us+0x30>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3f9      	bcc.n	8000eec <delay_us+0x14>
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000314 	.word	0x20000314
 8000f0c:	00000000 	.word	0x00000000

08000f10 <HAL_TIM_IC_CaptureCallback>:

uint32_t Distance;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	static uint32_t returnSignal = 0;
	static uint32_t begin_timestamp = 0;
	static uint32_t end_timestamp = 0;
	uint32_t Difference = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7f1b      	ldrb	r3, [r3, #28]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d163      	bne.n	8000fec <HAL_TIM_IC_CaptureCallback+0xdc>
	{
		if (returnSignal) {
 8000f24:	4b36      	ldr	r3, [pc, #216]	@ (8001000 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d01a      	beq.n	8000f62 <HAL_TIM_IC_CaptureCallback+0x52>
			returnSignal = 0;
 8000f2c:	4b34      	ldr	r3, [pc, #208]	@ (8001000 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]

			begin_timestamp = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f32:	2100      	movs	r1, #0
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f008 ffc5 	bl	8009ec4 <HAL_TIM_ReadCapturedValue>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a31      	ldr	r2, [pc, #196]	@ (8001004 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f3e:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6a1a      	ldr	r2, [r3, #32]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 020a 	bic.w	r2, r2, #10
 8000f4e:	621a      	str	r2, [r3, #32]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6a1a      	ldr	r2, [r3, #32]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 0202 	orr.w	r2, r2, #2
 8000f5e:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000f60:	e044      	b.n	8000fec <HAL_TIM_IC_CaptureCallback+0xdc>
			returnSignal = 1;
 8000f62:	4b27      	ldr	r3, [pc, #156]	@ (8001000 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	601a      	str	r2, [r3, #0]
			end_timestamp = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000f68:	2100      	movs	r1, #0
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f008 ffaa 	bl	8009ec4 <HAL_TIM_ReadCapturedValue>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a25      	ldr	r2, [pc, #148]	@ (8001008 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000f74:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	@ 0x24
			Difference = end_timestamp-begin_timestamp;
 8000f7e:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	60fb      	str	r3, [r7, #12]
			Distance = Difference * .034/2;
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f7ff fac2 	bl	8000514 <__aeabi_ui2d>
 8000f90:	a319      	add	r3, pc, #100	@ (adr r3, 8000ff8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f96:	f7ff fb37 	bl	8000608 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000faa:	f7ff fc57 	bl	800085c <__aeabi_ddiv>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f7ff fd39 	bl	8000a2c <__aeabi_d2uiz>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a13      	ldr	r2, [pc, #76]	@ (800100c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000fbe:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6a1a      	ldr	r2, [r3, #32]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 020a 	bic.w	r2, r2, #10
 8000fce:	621a      	str	r2, [r3, #32]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6a12      	ldr	r2, [r2, #32]
 8000fda:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0202 	bic.w	r2, r2, #2
 8000fea:	60da      	str	r2, [r3, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	b020c49c 	.word	0xb020c49c
 8000ffc:	3fa16872 	.word	0x3fa16872
 8001000:	20000490 	.word	0x20000490
 8001004:	20000494 	.word	0x20000494
 8001008:	20000498 	.word	0x20000498
 800100c:	2000048c 	.word	0x2000048c
 8001010:	20000314 	.word	0x20000314

08001014 <HCSR04_Read>:



void HCSR04_Read (void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIST_TRIG_GPIO_Port, DIST_TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800101e:	480b      	ldr	r0, [pc, #44]	@ (800104c <HCSR04_Read+0x38>)
 8001020:	f003 f9fc 	bl	800441c <HAL_GPIO_WritePin>
	delay_us(10);  // wait for 10 us
 8001024:	200a      	movs	r0, #10
 8001026:	f7ff ff57 	bl	8000ed8 <delay_us>
	HAL_GPIO_WritePin(DIST_TRIG_GPIO_Port, DIST_TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001030:	4806      	ldr	r0, [pc, #24]	@ (800104c <HCSR04_Read+0x38>)
 8001032:	f003 f9f3 	bl	800441c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HCSR04_Read+0x3c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <HCSR04_Read+0x3c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f042 0202 	orr.w	r2, r2, #2
 8001044:	60da      	str	r2, [r3, #12]
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	42021000 	.word	0x42021000
 8001050:	20000314 	.word	0x20000314

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08e      	sub	sp, #56	@ 0x38
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105a:	f001 f8ed 	bl	8002238 <HAL_Init>

  /* USER CODE BEGIN Init */
  printf("Initializing...\n");
 800105e:	484e      	ldr	r0, [pc, #312]	@ (8001198 <main+0x144>)
 8001060:	f00c f8b2 	bl	800d1c8 <puts>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001064:	f000 f8b0 	bl	80011c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  UartHandle.Instance        = USARTx;
 8001068:	4b4c      	ldr	r3, [pc, #304]	@ (800119c <main+0x148>)
 800106a:	4a4d      	ldr	r2, [pc, #308]	@ (80011a0 <main+0x14c>)
 800106c:	601a      	str	r2, [r3, #0]

  UartHandle.Init.BaudRate   = 115200 ; //9600
 800106e:	4b4b      	ldr	r3, [pc, #300]	@ (800119c <main+0x148>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b49      	ldr	r3, [pc, #292]	@ (800119c <main+0x148>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800107c:	4b47      	ldr	r3, [pc, #284]	@ (800119c <main+0x148>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE; //UART_PARITY_ODD
 8001082:	4b46      	ldr	r3, [pc, #280]	@ (800119c <main+0x148>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001088:	4b44      	ldr	r3, [pc, #272]	@ (800119c <main+0x148>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800108e:	4b43      	ldr	r3, [pc, #268]	@ (800119c <main+0x148>)
 8001090:	220c      	movs	r2, #12
 8001092:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b41      	ldr	r3, [pc, #260]	@ (800119c <main+0x148>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 800109a:	4840      	ldr	r0, [pc, #256]	@ (800119c <main+0x148>)
 800109c:	f009 fafe 	bl	800a69c <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <main+0x56>
  {
    /* Initialization Error */
    Error_Handler();
 80010a6:	f000 fc89 	bl	80019bc <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010aa:	f000 fb6f 	bl	800178c <MX_GPIO_Init>
  MX_AES_Init();
 80010ae:	f000 f95d 	bl	800136c <MX_AES_Init>
  MX_SPI1_Init();
 80010b2:	f000 f9e9 	bl	8001488 <MX_SPI1_Init>
  MX_I2C2_Init();
 80010b6:	f000 f993 	bl	80013e0 <MX_I2C2_Init>
  MX_SPI2_Init();
 80010ba:	f000 fa53 	bl	8001564 <MX_SPI2_Init>
  MX_TIM1_Init();
 80010be:	f000 fabf 	bl	8001640 <MX_TIM1_Init>
  MX_ADC1_Init();
 80010c2:	f000 f8e3 	bl	800128c <MX_ADC1_Init>
  MX_UART4_Init();
 80010c6:	f000 fb15 	bl	80016f4 <MX_UART4_Init>
  MX_ICACHE_Init();
 80010ca:	f000 f9c9 	bl	8001460 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80010ce:	4835      	ldr	r0, [pc, #212]	@ (80011a4 <main+0x150>)
 80010d0:	f008 faa4 	bl	800961c <HAL_TIM_Base_Start>
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 80010d4:	4b34      	ldr	r3, [pc, #208]	@ (80011a8 <main+0x154>)
 80010d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010da:	4a33      	ldr	r2, [pc, #204]	@ (80011a8 <main+0x154>)
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010e4:	4b30      	ldr	r3, [pc, #192]	@ (80011a8 <main+0x154>)
 80010e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __GPIOA_CLK_ENABLE();
 80010f2:	4b2d      	ldr	r3, [pc, #180]	@ (80011a8 <main+0x154>)
 80010f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010f8:	4a2b      	ldr	r2, [pc, #172]	@ (80011a8 <main+0x154>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001102:	4b29      	ldr	r3, [pc, #164]	@ (80011a8 <main+0x154>)
 8001104:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
  __GPIOB_CLK_ENABLE();
 8001110:	4b25      	ldr	r3, [pc, #148]	@ (80011a8 <main+0x154>)
 8001112:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001116:	4a24      	ldr	r2, [pc, #144]	@ (80011a8 <main+0x154>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001120:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <main+0x154>)
 8001122:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]

  ret = HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800112e:	2100      	movs	r1, #0
 8001130:	481c      	ldr	r0, [pc, #112]	@ (80011a4 <main+0x150>)
 8001132:	f008 fb63 	bl	80097fc <HAL_TIM_IC_Start_IT>
 8001136:	4603      	mov	r3, r0
 8001138:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (ret != HAL_OK) {
 800113c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <main+0xf6>
	printf("Error setting mode for distance sensor.\n");
 8001144:	4819      	ldr	r0, [pc, #100]	@ (80011ac <main+0x158>)
 8001146:	f00c f83f 	bl	800d1c8 <puts>
  }

  /* Initialize the BSP. */
  printf("BSP Initialization Started\n");
 800114a:	4819      	ldr	r0, [pc, #100]	@ (80011b0 <main+0x15c>)
 800114c:	f00c f83c 	bl	800d1c8 <puts>
  nm_bsp_init();
 8001150:	f00a f814 	bl	800b17c <nm_bsp_init>
  printf("BSP Initialization Completed!\n");
 8001154:	4817      	ldr	r0, [pc, #92]	@ (80011b4 <main+0x160>)
 8001156:	f00c f837 	bl	800d1c8 <puts>

  /* Initialize socket structure */
  addr.sin_family = AF_INET;
 800115a:	2302      	movs	r3, #2
 800115c:	81bb      	strh	r3, [r7, #12]
  addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
 800115e:	f645 4311 	movw	r3, #23569	@ 0x5c11
 8001162:	81fb      	strh	r3, [r7, #14]
  addr.sin_addr.s_addr = _htonl(MAIN_WIFI_M2M_SERVER_IP);
 8001164:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <main+0x164>)
 8001166:	613b      	str	r3, [r7, #16]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	2218      	movs	r2, #24
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f00c f909 	bl	800d388 <memset>

  /* Initialize Wi-Fi driver with data and status callbacks. */
  param.pfAppWifiCb = wifi_cb;
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <main+0x168>)
 8001178:	61fb      	str	r3, [r7, #28]
  SysTick_Config(SystemCoreClock/1000);
  wifi_connected = M2M_WIFI_CONNECTED;
*/

  while(1) {
	  HCSR04_Read();
 800117a:	f7ff ff4b 	bl	8001014 <HCSR04_Read>
	  HAL_Delay(400);
 800117e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001182:	f001 f91f 	bl	80023c4 <HAL_Delay>
	  printf("Dist: %ldcm\n", Distance);
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <main+0x16c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4619      	mov	r1, r3
 800118c:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <main+0x170>)
 800118e:	f00b ffab 	bl	800d0e8 <iprintf>
	  HCSR04_Read();
 8001192:	bf00      	nop
 8001194:	e7f1      	b.n	800117a <main+0x126>
 8001196:	bf00      	nop
 8001198:	0800df3c 	.word	0x0800df3c
 800119c:	200003f4 	.word	0x200003f4
 80011a0:	40013800 	.word	0x40013800
 80011a4:	20000314 	.word	0x20000314
 80011a8:	46020c00 	.word	0x46020c00
 80011ac:	0800df4c 	.word	0x0800df4c
 80011b0:	0800df74 	.word	0x0800df74
 80011b4:	0800df90 	.word	0x0800df90
 80011b8:	1301a8c0 	.word	0x1301a8c0
 80011bc:	08000e2d 	.word	0x08000e2d
 80011c0:	2000048c 	.word	0x2000048c
 80011c4:	0800dfb0 	.word	0x0800dfb0

080011c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b09e      	sub	sp, #120	@ 0x78
 80011cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	2260      	movs	r2, #96	@ 0x60
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00c f8d6 	bl	800d388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011dc:	463b      	mov	r3, r7
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ec:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80011f0:	f003 fada 	bl	80047a8 <HAL_PWREx_ControlVoltageScaling>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x36>
  {
    Error_Handler();
 80011fa:	f000 fbdf 	bl	80019bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80011fe:	2312      	movs	r3, #18
 8001200:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001202:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001208:	2310      	movs	r3, #16
 800120a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800120c:	2301      	movs	r3, #1
 800120e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001210:	2310      	movs	r3, #16
 8001212:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8001214:	2300      	movs	r3, #0
 8001216:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001218:	2302      	movs	r3, #2
 800121a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800121c:	2301      	movs	r3, #1
 800121e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8001220:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001224:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001226:	2303      	movs	r3, #3
 8001228:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 800122a:	230a      	movs	r3, #10
 800122c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800122e:	2302      	movs	r3, #2
 8001230:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001232:	2302      	movs	r3, #2
 8001234:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001236:	2301      	movs	r3, #1
 8001238:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800123a:	230c      	movs	r3, #12
 800123c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	4618      	mov	r0, r3
 8001248:	f003 fb4a 	bl	80048e0 <HAL_RCC_OscConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001252:	f000 fbb3 	bl	80019bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001256:	231f      	movs	r3, #31
 8001258:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125a:	2303      	movs	r3, #3
 800125c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800126e:	463b      	mov	r3, r7
 8001270:	2104      	movs	r1, #4
 8001272:	4618      	mov	r0, r3
 8001274:	f004 fa10 	bl	8005698 <HAL_RCC_ClockConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800127e:	f000 fb9d 	bl	80019bc <Error_Handler>
  }
}
 8001282:	bf00      	nop
 8001284:	3778      	adds	r7, #120	@ 0x78
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001292:	463b      	mov	r3, r7
 8001294:	2220      	movs	r2, #32
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f00c f875 	bl	800d388 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800129e:	4b30      	ldr	r3, [pc, #192]	@ (8001360 <MX_ADC1_Init+0xd4>)
 80012a0:	4a30      	ldr	r2, [pc, #192]	@ (8001364 <MX_ADC1_Init+0xd8>)
 80012a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001360 <MX_ADC1_Init+0xd4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80012aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001360 <MX_ADC1_Init+0xd4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80012b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001360 <MX_ADC1_Init+0xd4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001360 <MX_ADC1_Init+0xd4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012bc:	4b28      	ldr	r3, [pc, #160]	@ (8001360 <MX_ADC1_Init+0xd4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c2:	4b27      	ldr	r3, [pc, #156]	@ (8001360 <MX_ADC1_Init+0xd4>)
 80012c4:	2204      	movs	r2, #4
 80012c6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012c8:	4b25      	ldr	r3, [pc, #148]	@ (8001360 <MX_ADC1_Init+0xd4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ce:	4b24      	ldr	r3, [pc, #144]	@ (8001360 <MX_ADC1_Init+0xd4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 80012d6:	4b22      	ldr	r3, [pc, #136]	@ (8001360 <MX_ADC1_Init+0xd4>)
 80012d8:	2201      	movs	r2, #1
 80012da:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012dc:	4b20      	ldr	r3, [pc, #128]	@ (8001360 <MX_ADC1_Init+0xd4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001360 <MX_ADC1_Init+0xd4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001360 <MX_ADC1_Init+0xd4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001360 <MX_ADC1_Init+0xd4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80012f8:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <MX_ADC1_Init+0xd4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012fe:	4b18      	ldr	r3, [pc, #96]	@ (8001360 <MX_ADC1_Init+0xd4>)
 8001300:	2200      	movs	r2, #0
 8001302:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001304:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <MX_ADC1_Init+0xd4>)
 8001306:	2200      	movs	r2, #0
 8001308:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <MX_ADC1_Init+0xd4>)
 800130c:	2200      	movs	r2, #0
 800130e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001310:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <MX_ADC1_Init+0xd4>)
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001318:	4811      	ldr	r0, [pc, #68]	@ (8001360 <MX_ADC1_Init+0xd4>)
 800131a:	f001 fb51 	bl	80029c0 <HAL_ADC_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001324:	f000 fb4a 	bl	80019bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <MX_ADC1_Init+0xdc>)
 800132a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800132c:	2306      	movs	r3, #6
 800132e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001334:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001338:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800133a:	2304      	movs	r3, #4
 800133c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001342:	463b      	mov	r3, r7
 8001344:	4619      	mov	r1, r3
 8001346:	4806      	ldr	r0, [pc, #24]	@ (8001360 <MX_ADC1_Init+0xd4>)
 8001348:	f001 fe22 	bl	8002f90 <HAL_ADC_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001352:	f000 fb33 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	3720      	adds	r7, #32
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000008c 	.word	0x2000008c
 8001364:	42028000 	.word	0x42028000
 8001368:	10000010 	.word	0x10000010

0800136c <MX_AES_Init>:
  * @brief AES Initialization Function
  * @param None
  * @retval None
  */
static void MX_AES_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 8001370:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <MX_AES_Init+0x60>)
 8001372:	4a17      	ldr	r2, [pc, #92]	@ (80013d0 <MX_AES_Init+0x64>)
 8001374:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_NO_SWAP;
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <MX_AES_Init+0x60>)
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 800137c:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <MX_AES_Init+0x60>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 8001382:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <MX_AES_Init+0x60>)
 8001384:	4a13      	ldr	r2, [pc, #76]	@ (80013d4 <MX_AES_Init+0x68>)
 8001386:	60da      	str	r2, [r3, #12]
  hcryp.Init.pInitVect = (uint32_t *)pInitVectAES;
 8001388:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <MX_AES_Init+0x60>)
 800138a:	4a13      	ldr	r2, [pc, #76]	@ (80013d8 <MX_AES_Init+0x6c>)
 800138c:	611a      	str	r2, [r3, #16]
  hcryp.Init.Algorithm = CRYP_AES_GCM_GMAC;
 800138e:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_AES_Init+0x60>)
 8001390:	2260      	movs	r2, #96	@ 0x60
 8001392:	615a      	str	r2, [r3, #20]
  hcryp.Init.Header = (uint32_t *)HeaderAES;
 8001394:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <MX_AES_Init+0x60>)
 8001396:	4a11      	ldr	r2, [pc, #68]	@ (80013dc <MX_AES_Init+0x70>)
 8001398:	619a      	str	r2, [r3, #24]
  hcryp.Init.HeaderSize = 1;
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_AES_Init+0x60>)
 800139c:	2201      	movs	r2, #1
 800139e:	61da      	str	r2, [r3, #28]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <MX_AES_Init+0x60>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_WORD;
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_AES_Init+0x60>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 80013ac:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <MX_AES_Init+0x60>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hcryp.Init.KeyMode = CRYP_KEYMODE_NORMAL;
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_AES_Init+0x60>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	@ (80013cc <MX_AES_Init+0x60>)
 80013ba:	f002 fd9b 	bl	8003ef4 <HAL_CRYP_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_AES_Init+0x5c>
  {
    Error_Handler();
 80013c4:	f000 fafa 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000118 	.word	0x20000118
 80013d0:	420c0000 	.word	0x420c0000
 80013d4:	20000180 	.word	0x20000180
 80013d8:	20000190 	.word	0x20000190
 80013dc:	0800eaec 	.word	0x0800eaec

080013e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <MX_I2C2_Init+0x74>)
 80013e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001458 <MX_I2C2_Init+0x78>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <MX_I2C2_Init+0x74>)
 80013ec:	4a1b      	ldr	r2, [pc, #108]	@ (800145c <MX_I2C2_Init+0x7c>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013f0:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <MX_I2C2_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f6:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <MX_I2C2_Init+0x74>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013fc:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <MX_I2C2_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001402:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <MX_I2C2_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <MX_I2C2_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <MX_I2C2_Init+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <MX_I2C2_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800141a:	480e      	ldr	r0, [pc, #56]	@ (8001454 <MX_I2C2_Init+0x74>)
 800141c:	f003 f861 	bl	80044e2 <HAL_I2C_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001426:	f000 fac9 	bl	80019bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800142a:	2100      	movs	r1, #0
 800142c:	4809      	ldr	r0, [pc, #36]	@ (8001454 <MX_I2C2_Init+0x74>)
 800142e:	f003 f8f3 	bl	8004618 <HAL_I2CEx_ConfigAnalogFilter>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001438:	f000 fac0 	bl	80019bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800143c:	2100      	movs	r1, #0
 800143e:	4805      	ldr	r0, [pc, #20]	@ (8001454 <MX_I2C2_Init+0x74>)
 8001440:	f003 f935 	bl	80046ae <HAL_I2CEx_ConfigDigitalFilter>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800144a:	f000 fab7 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200001a0 	.word	0x200001a0
 8001458:	40005800 	.word	0x40005800
 800145c:	30909dec 	.word	0x30909dec

08001460 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001464:	2000      	movs	r0, #0
 8001466:	f003 f96f 	bl	8004748 <HAL_ICACHE_ConfigAssociativityMode>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001470:	f000 faa4 	bl	80019bc <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001474:	f003 f988 	bl	8004788 <HAL_ICACHE_Enable>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800147e:	f000 fa9d 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001498:	4b30      	ldr	r3, [pc, #192]	@ (800155c <MX_SPI1_Init+0xd4>)
 800149a:	4a31      	ldr	r2, [pc, #196]	@ (8001560 <MX_SPI1_Init+0xd8>)
 800149c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800149e:	4b2f      	ldr	r3, [pc, #188]	@ (800155c <MX_SPI1_Init+0xd4>)
 80014a0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014a6:	4b2d      	ldr	r3, [pc, #180]	@ (800155c <MX_SPI1_Init+0xd4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80014ac:	4b2b      	ldr	r3, [pc, #172]	@ (800155c <MX_SPI1_Init+0xd4>)
 80014ae:	2203      	movs	r2, #3
 80014b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b2:	4b2a      	ldr	r3, [pc, #168]	@ (800155c <MX_SPI1_Init+0xd4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b8:	4b28      	ldr	r3, [pc, #160]	@ (800155c <MX_SPI1_Init+0xd4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014be:	4b27      	ldr	r3, [pc, #156]	@ (800155c <MX_SPI1_Init+0xd4>)
 80014c0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014c6:	4b25      	ldr	r3, [pc, #148]	@ (800155c <MX_SPI1_Init+0xd4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014cc:	4b23      	ldr	r3, [pc, #140]	@ (800155c <MX_SPI1_Init+0xd4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d2:	4b22      	ldr	r3, [pc, #136]	@ (800155c <MX_SPI1_Init+0xd4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d8:	4b20      	ldr	r3, [pc, #128]	@ (800155c <MX_SPI1_Init+0xd4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80014de:	4b1f      	ldr	r3, [pc, #124]	@ (800155c <MX_SPI1_Init+0xd4>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014e4:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <MX_SPI1_Init+0xd4>)
 80014e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <MX_SPI1_Init+0xd4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	@ (800155c <MX_SPI1_Init+0xd4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014f8:	4b18      	ldr	r3, [pc, #96]	@ (800155c <MX_SPI1_Init+0xd4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014fe:	4b17      	ldr	r3, [pc, #92]	@ (800155c <MX_SPI1_Init+0xd4>)
 8001500:	2200      	movs	r2, #0
 8001502:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001504:	4b15      	ldr	r3, [pc, #84]	@ (800155c <MX_SPI1_Init+0xd4>)
 8001506:	2200      	movs	r2, #0
 8001508:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800150a:	4b14      	ldr	r3, [pc, #80]	@ (800155c <MX_SPI1_Init+0xd4>)
 800150c:	2200      	movs	r2, #0
 800150e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001510:	4b12      	ldr	r3, [pc, #72]	@ (800155c <MX_SPI1_Init+0xd4>)
 8001512:	2200      	movs	r2, #0
 8001514:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001516:	4b11      	ldr	r3, [pc, #68]	@ (800155c <MX_SPI1_Init+0xd4>)
 8001518:	2200      	movs	r2, #0
 800151a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800151c:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <MX_SPI1_Init+0xd4>)
 800151e:	2200      	movs	r2, #0
 8001520:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001522:	480e      	ldr	r0, [pc, #56]	@ (800155c <MX_SPI1_Init+0xd4>)
 8001524:	f007 fbe0 	bl	8008ce8 <HAL_SPI_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 800152e:	f000 fa45 	bl	80019bc <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001536:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	@ (800155c <MX_SPI1_Init+0xd4>)
 8001546:	f008 f828 	bl	800959a <HAL_SPIEx_SetConfigAutonomousMode>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8001550:	f000 fa34 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200001f4 	.word	0x200001f4
 8001560:	40013000 	.word	0x40013000

08001564 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001574:	4b30      	ldr	r3, [pc, #192]	@ (8001638 <MX_SPI2_Init+0xd4>)
 8001576:	4a31      	ldr	r2, [pc, #196]	@ (800163c <MX_SPI2_Init+0xd8>)
 8001578:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800157a:	4b2f      	ldr	r3, [pc, #188]	@ (8001638 <MX_SPI2_Init+0xd4>)
 800157c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001580:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001582:	4b2d      	ldr	r3, [pc, #180]	@ (8001638 <MX_SPI2_Init+0xd4>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001588:	4b2b      	ldr	r3, [pc, #172]	@ (8001638 <MX_SPI2_Init+0xd4>)
 800158a:	2203      	movs	r2, #3
 800158c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800158e:	4b2a      	ldr	r3, [pc, #168]	@ (8001638 <MX_SPI2_Init+0xd4>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001594:	4b28      	ldr	r3, [pc, #160]	@ (8001638 <MX_SPI2_Init+0xd4>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800159a:	4b27      	ldr	r3, [pc, #156]	@ (8001638 <MX_SPI2_Init+0xd4>)
 800159c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80015a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015a2:	4b25      	ldr	r3, [pc, #148]	@ (8001638 <MX_SPI2_Init+0xd4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a8:	4b23      	ldr	r3, [pc, #140]	@ (8001638 <MX_SPI2_Init+0xd4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ae:	4b22      	ldr	r3, [pc, #136]	@ (8001638 <MX_SPI2_Init+0xd4>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b4:	4b20      	ldr	r3, [pc, #128]	@ (8001638 <MX_SPI2_Init+0xd4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 80015ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <MX_SPI2_Init+0xd4>)
 80015bc:	2207      	movs	r2, #7
 80015be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <MX_SPI2_Init+0xd4>)
 80015c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <MX_SPI2_Init+0xd4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <MX_SPI2_Init+0xd4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015d4:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <MX_SPI2_Init+0xd4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015da:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <MX_SPI2_Init+0xd4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015e0:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <MX_SPI2_Init+0xd4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015e6:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <MX_SPI2_Init+0xd4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015ec:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <MX_SPI2_Init+0xd4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <MX_SPI2_Init+0xd4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <MX_SPI2_Init+0xd4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015fe:	480e      	ldr	r0, [pc, #56]	@ (8001638 <MX_SPI2_Init+0xd4>)
 8001600:	f007 fb72 	bl	8008ce8 <HAL_SPI_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 800160a:	f000 f9d7 	bl	80019bc <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001612:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001616:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	@ (8001638 <MX_SPI2_Init+0xd4>)
 8001622:	f007 ffba 	bl	800959a <HAL_SPIEx_SetConfigAutonomousMode>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 800162c:	f000 f9c6 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000284 	.word	0x20000284
 800163c:	40003800 	.word	0x40003800

08001640 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800165e:	4b23      	ldr	r3, [pc, #140]	@ (80016ec <MX_TIM1_Init+0xac>)
 8001660:	4a23      	ldr	r2, [pc, #140]	@ (80016f0 <MX_TIM1_Init+0xb0>)
 8001662:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 8001664:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <MX_TIM1_Init+0xac>)
 8001666:	229f      	movs	r2, #159	@ 0x9f
 8001668:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166a:	4b20      	ldr	r3, [pc, #128]	@ (80016ec <MX_TIM1_Init+0xac>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8001670:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <MX_TIM1_Init+0xac>)
 8001672:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001676:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001678:	4b1c      	ldr	r3, [pc, #112]	@ (80016ec <MX_TIM1_Init+0xac>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800167e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <MX_TIM1_Init+0xac>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001684:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <MX_TIM1_Init+0xac>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800168a:	4818      	ldr	r0, [pc, #96]	@ (80016ec <MX_TIM1_Init+0xac>)
 800168c:	f008 f85e 	bl	800974c <HAL_TIM_IC_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001696:	f000 f991 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	480f      	ldr	r0, [pc, #60]	@ (80016ec <MX_TIM1_Init+0xac>)
 80016ae:	f008 feed 	bl	800a48c <HAL_TIMEx_MasterConfigSynchronization>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80016b8:	f000 f980 	bl	80019bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016bc:	2300      	movs	r3, #0
 80016be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016c0:	2301      	movs	r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2200      	movs	r2, #0
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	@ (80016ec <MX_TIM1_Init+0xac>)
 80016d4:	f008 fb59 	bl	8009d8a <HAL_TIM_IC_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80016de:	f000 f96d 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	3720      	adds	r7, #32
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000314 	.word	0x20000314
 80016f0:	40012c00 	.word	0x40012c00

080016f4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80016f8:	4b22      	ldr	r3, [pc, #136]	@ (8001784 <MX_UART4_Init+0x90>)
 80016fa:	4a23      	ldr	r2, [pc, #140]	@ (8001788 <MX_UART4_Init+0x94>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <MX_UART4_Init+0x90>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b1f      	ldr	r3, [pc, #124]	@ (8001784 <MX_UART4_Init+0x90>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <MX_UART4_Init+0x90>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001712:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <MX_UART4_Init+0x90>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <MX_UART4_Init+0x90>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <MX_UART4_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <MX_UART4_Init+0x90>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172a:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <MX_UART4_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001730:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <MX_UART4_Init+0x90>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001736:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <MX_UART4_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800173c:	4811      	ldr	r0, [pc, #68]	@ (8001784 <MX_UART4_Init+0x90>)
 800173e:	f008 ffad 	bl	800a69c <HAL_UART_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001748:	f000 f938 	bl	80019bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800174c:	2100      	movs	r1, #0
 800174e:	480d      	ldr	r0, [pc, #52]	@ (8001784 <MX_UART4_Init+0x90>)
 8001750:	f009 fbfa 	bl	800af48 <HAL_UARTEx_SetTxFifoThreshold>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800175a:	f000 f92f 	bl	80019bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800175e:	2100      	movs	r1, #0
 8001760:	4808      	ldr	r0, [pc, #32]	@ (8001784 <MX_UART4_Init+0x90>)
 8001762:	f009 fc2f 	bl	800afc4 <HAL_UARTEx_SetRxFifoThreshold>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800176c:	f000 f926 	bl	80019bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	@ (8001784 <MX_UART4_Init+0x90>)
 8001772:	f009 fbb0 	bl	800aed6 <HAL_UARTEx_DisableFifoMode>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800177c:	f000 f91e 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000360 	.word	0x20000360
 8001788:	40004c00 	.word	0x40004c00

0800178c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	@ 0x30
 8001790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017a2:	4b70      	ldr	r3, [pc, #448]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 80017a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 80017aa:	f043 0310 	orr.w	r3, r3, #16
 80017ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 80017b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c0:	4b68      	ldr	r3, [pc, #416]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 80017c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017c6:	4a67      	ldr	r2, [pc, #412]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017d0:	4b64      	ldr	r3, [pc, #400]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 80017d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b61      	ldr	r3, [pc, #388]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 80017e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017e4:	4a5f      	ldr	r2, [pc, #380]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 80017f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fc:	4b59      	ldr	r3, [pc, #356]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 80017fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001802:	4a58      	ldr	r2, [pc, #352]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800180c:	4b55      	ldr	r3, [pc, #340]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 800180e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181a:	4b52      	ldr	r3, [pc, #328]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 800181c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001820:	4a50      	ldr	r2, [pc, #320]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800182a:	4b4e      	ldr	r3, [pc, #312]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 800182c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001838:	4b4a      	ldr	r3, [pc, #296]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 800183a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800183e:	4a49      	ldr	r2, [pc, #292]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 8001840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001844:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001848:	4b46      	ldr	r3, [pc, #280]	@ (8001964 <MX_GPIO_Init+0x1d8>)
 800184a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800184e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DISP_RST_Pin|DISP_DC_Pin|DISP_CARD_CS_Pin|DISP_TFT_CS_Pin
 8001856:	2200      	movs	r2, #0
 8001858:	f240 413c 	movw	r1, #1084	@ 0x43c
 800185c:	4842      	ldr	r0, [pc, #264]	@ (8001968 <MX_GPIO_Init+0x1dc>)
 800185e:	f002 fddd 	bl	800441c <HAL_GPIO_WritePin>
                          |DIST_TRIG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_LITE_Pin|WIFI_WAKE_Pin, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	2112      	movs	r1, #18
 8001866:	4841      	ldr	r0, [pc, #260]	@ (800196c <MX_GPIO_Init+0x1e0>)
 8001868:	f002 fdd8 	bl	800441c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WIFI_EN_Pin|WIFI_CS_Pin, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8001872:	483f      	ldr	r0, [pc, #252]	@ (8001970 <MX_GPIO_Init+0x1e4>)
 8001874:	f002 fdd2 	bl	800441c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	2104      	movs	r1, #4
 800187c:	483d      	ldr	r0, [pc, #244]	@ (8001974 <MX_GPIO_Init+0x1e8>)
 800187e:	f002 fdcd 	bl	800441c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	2180      	movs	r1, #128	@ 0x80
 8001886:	483c      	ldr	r0, [pc, #240]	@ (8001978 <MX_GPIO_Init+0x1ec>)
 8001888:	f002 fdc8 	bl	800441c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WIFI_RST_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	2190      	movs	r1, #144	@ 0x90
 8001890:	483a      	ldr	r0, [pc, #232]	@ (800197c <MX_GPIO_Init+0x1f0>)
 8001892:	f002 fdc3 	bl	800441c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISP_RST_Pin DISP_DC_Pin DISP_CARD_CS_Pin DISP_TFT_CS_Pin
                           DIST_TRIG_Pin */
  GPIO_InitStruct.Pin = DISP_RST_Pin|DISP_DC_Pin|DISP_CARD_CS_Pin|DISP_TFT_CS_Pin
 8001896:	f240 433c 	movw	r3, #1084	@ 0x43c
 800189a:	61fb      	str	r3, [r7, #28]
                          |DIST_TRIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	2301      	movs	r3, #1
 800189e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4619      	mov	r1, r3
 80018ae:	482e      	ldr	r0, [pc, #184]	@ (8001968 <MX_GPIO_Init+0x1dc>)
 80018b0:	f002 fbdc 	bl	800406c <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_LITE_Pin WIFI_WAKE_Pin */
  GPIO_InitStruct.Pin = DISP_LITE_Pin|WIFI_WAKE_Pin;
 80018b4:	2312      	movs	r3, #18
 80018b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	4619      	mov	r1, r3
 80018ca:	4828      	ldr	r0, [pc, #160]	@ (800196c <MX_GPIO_Init+0x1e0>)
 80018cc:	f002 fbce 	bl	800406c <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_IRQ_Pin */
  GPIO_InitStruct.Pin = WIFI_IRQ_Pin;
 80018d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001980 <MX_GPIO_Init+0x1f4>)
 80018d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(WIFI_IRQ_GPIO_Port, &GPIO_InitStruct);
 80018de:	f107 031c 	add.w	r3, r7, #28
 80018e2:	4619      	mov	r1, r3
 80018e4:	4822      	ldr	r0, [pc, #136]	@ (8001970 <MX_GPIO_Init+0x1e4>)
 80018e6:	f002 fbc1 	bl	800406c <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_EN_Pin WIFI_CS_Pin */
  GPIO_InitStruct.Pin = WIFI_EN_Pin|WIFI_CS_Pin;
 80018ea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	4619      	mov	r1, r3
 8001902:	481b      	ldr	r0, [pc, #108]	@ (8001970 <MX_GPIO_Init+0x1e4>)
 8001904:	f002 fbb2 	bl	800406c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001908:	2304      	movs	r3, #4
 800190a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4619      	mov	r1, r3
 800191e:	4815      	ldr	r0, [pc, #84]	@ (8001974 <MX_GPIO_Init+0x1e8>)
 8001920:	f002 fba4 	bl	800406c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001924:	2380      	movs	r3, #128	@ 0x80
 8001926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001928:	2301      	movs	r3, #1
 800192a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	480f      	ldr	r0, [pc, #60]	@ (8001978 <MX_GPIO_Init+0x1ec>)
 800193c:	f002 fb96 	bl	800406c <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_RST_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin|LED_BLUE_Pin;
 8001940:	2390      	movs	r3, #144	@ 0x90
 8001942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001944:	2301      	movs	r3, #1
 8001946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	4809      	ldr	r0, [pc, #36]	@ (800197c <MX_GPIO_Init+0x1f0>)
 8001958:	f002 fb88 	bl	800406c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800195c:	bf00      	nop
 800195e:	3730      	adds	r7, #48	@ 0x30
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	46020c00 	.word	0x46020c00
 8001968:	42021000 	.word	0x42021000
 800196c:	42020000 	.word	0x42020000
 8001970:	42020c00 	.word	0x42020c00
 8001974:	42021800 	.word	0x42021800
 8001978:	42020800 	.word	0x42020800
 800197c:	42020400 	.word	0x42020400
 8001980:	10110000 	.word	0x10110000

08001984 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e009      	b.n	80019aa <_write+0x26>
		ITM_SendChar(*ptr++);
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	60ba      	str	r2, [r7, #8]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff f9f0 	bl	8000d84 <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	dbf1      	blt.n	8001996 <_write+0x12>
	}
	return len;
 80019b2:	687b      	ldr	r3, [r7, #4]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c0:	b672      	cpsid	i
}
 80019c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <Error_Handler+0x8>

080019c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <HAL_MspInit+0x30>)
 80019d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019d4:	4a08      	ldr	r2, [pc, #32]	@ (80019f8 <HAL_MspInit+0x30>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_MspInit+0x30>)
 80019e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80019ec:	f002 ff68 	bl	80048c0 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	46020c00 	.word	0x46020c00

080019fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0c0      	sub	sp, #256	@ 0x100
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	22d8      	movs	r2, #216	@ 0xd8
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f00b fcb3 	bl	800d388 <memset>
  if(hadc->Instance==ADC1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a24      	ldr	r2, [pc, #144]	@ (8001ab8 <HAL_ADC_MspInit+0xbc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d140      	bne.n	8001aae <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001a2c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001a38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 f9f7 	bl	8005e38 <HAL_RCCEx_PeriphCLKConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001a50:	f7ff ffb4 	bl	80019bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001a54:	4b19      	ldr	r3, [pc, #100]	@ (8001abc <HAL_ADC_MspInit+0xc0>)
 8001a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a5a:	4a18      	ldr	r2, [pc, #96]	@ (8001abc <HAL_ADC_MspInit+0xc0>)
 8001a5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a60:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a64:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <HAL_ADC_MspInit+0xc0>)
 8001a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a72:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <HAL_ADC_MspInit+0xc0>)
 8001a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a78:	4a10      	ldr	r2, [pc, #64]	@ (8001abc <HAL_ADC_MspInit+0xc0>)
 8001a7a:	f043 0304 	orr.w	r3, r3, #4
 8001a7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <HAL_ADC_MspInit+0xc0>)
 8001a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a90:	2308      	movs	r3, #8
 8001a92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a96:	2303      	movs	r3, #3
 8001a98:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	@ (8001ac0 <HAL_ADC_MspInit+0xc4>)
 8001aaa:	f002 fadf 	bl	800406c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001aae:	bf00      	nop
 8001ab0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	42028000 	.word	0x42028000
 8001abc:	46020c00 	.word	0x46020c00
 8001ac0:	42020800 	.word	0x42020800

08001ac4 <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b00 <HAL_CRYP_MspInit+0x3c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d10e      	bne.n	8001af4 <HAL_CRYP_MspInit+0x30>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <HAL_CRYP_MspInit+0x40>)
 8001ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001adc:	4a09      	ldr	r2, [pc, #36]	@ (8001b04 <HAL_CRYP_MspInit+0x40>)
 8001ade:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ae6:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <HAL_CRYP_MspInit+0x40>)
 8001ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }

}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	420c0000 	.word	0x420c0000
 8001b04:	46020c00 	.word	0x46020c00

08001b08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b0c0      	sub	sp, #256	@ 0x100
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	22d8      	movs	r2, #216	@ 0xd8
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f00b fc2d 	bl	800d388 <memset>
  if(hi2c->Instance==I2C2)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a27      	ldr	r2, [pc, #156]	@ (8001bd0 <HAL_I2C_MspInit+0xc8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d146      	bne.n	8001bc6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b38:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b4a:	f107 0310 	add.w	r3, r7, #16
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 f972 	bl	8005e38 <HAL_RCCEx_PeriphCLKConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001b5a:	f7ff ff2f 	bl	80019bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd4 <HAL_I2C_MspInit+0xcc>)
 8001b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b64:	4a1b      	ldr	r2, [pc, #108]	@ (8001bd4 <HAL_I2C_MspInit+0xcc>)
 8001b66:	f043 0302 	orr.w	r3, r3, #2
 8001b6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b6e:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <HAL_I2C_MspInit+0xcc>)
 8001b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = PWR_SCL_Pin|PWR_SDA_Pin;
 8001b7c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001b80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b84:	2312      	movs	r3, #18
 8001b86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b96:	2304      	movs	r3, #4
 8001b98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480d      	ldr	r0, [pc, #52]	@ (8001bd8 <HAL_I2C_MspInit+0xd0>)
 8001ba4:	f002 fa62 	bl	800406c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <HAL_I2C_MspInit+0xcc>)
 8001baa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bae:	4a09      	ldr	r2, [pc, #36]	@ (8001bd4 <HAL_I2C_MspInit+0xcc>)
 8001bb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bb4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001bb8:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <HAL_I2C_MspInit+0xcc>)
 8001bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bc6:	bf00      	nop
 8001bc8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40005800 	.word	0x40005800
 8001bd4:	46020c00 	.word	0x46020c00
 8001bd8:	42020400 	.word	0x42020400

08001bdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b0c4      	sub	sp, #272	@ 0x110
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001be6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bea:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bfc:	f107 0320 	add.w	r3, r7, #32
 8001c00:	22d8      	movs	r2, #216	@ 0xd8
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f00b fbbf 	bl	800d388 <memset>
  if(hspi->Instance==SPI1)
 8001c0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a75      	ldr	r2, [pc, #468]	@ (8001dec <HAL_SPI_MspInit+0x210>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d147      	bne.n	8001cac <HAL_SPI_MspInit+0xd0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001c1c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001c28:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c30:	f107 0320 	add.w	r3, r7, #32
 8001c34:	4618      	mov	r0, r3
 8001c36:	f004 f8ff 	bl	8005e38 <HAL_RCCEx_PeriphCLKConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8001c40:	f7ff febc 	bl	80019bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c44:	4b6a      	ldr	r3, [pc, #424]	@ (8001df0 <HAL_SPI_MspInit+0x214>)
 8001c46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c4a:	4a69      	ldr	r2, [pc, #420]	@ (8001df0 <HAL_SPI_MspInit+0x214>)
 8001c4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c50:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001c54:	4b66      	ldr	r3, [pc, #408]	@ (8001df0 <HAL_SPI_MspInit+0x214>)
 8001c56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	4b63      	ldr	r3, [pc, #396]	@ (8001df0 <HAL_SPI_MspInit+0x214>)
 8001c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c68:	4a61      	ldr	r2, [pc, #388]	@ (8001df0 <HAL_SPI_MspInit+0x214>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c72:	4b5f      	ldr	r3, [pc, #380]	@ (8001df0 <HAL_SPI_MspInit+0x214>)
 8001c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	61bb      	str	r3, [r7, #24]
 8001c7e:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = WIFI_SCK_Pin|WIFI_MISO_Pin|WIFI_MOSI_Pin;
 8001c80:	23e0      	movs	r3, #224	@ 0xe0
 8001c82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c98:	2305      	movs	r3, #5
 8001c9a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4853      	ldr	r0, [pc, #332]	@ (8001df4 <HAL_SPI_MspInit+0x218>)
 8001ca6:	f002 f9e1 	bl	800406c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001caa:	e09a      	b.n	8001de2 <HAL_SPI_MspInit+0x206>
  else if(hspi->Instance==SPI2)
 8001cac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cb0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a4f      	ldr	r2, [pc, #316]	@ (8001df8 <HAL_SPI_MspInit+0x21c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	f040 8091 	bne.w	8001de2 <HAL_SPI_MspInit+0x206>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001cc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8001ccc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cd0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd4:	f107 0320 	add.w	r3, r7, #32
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f004 f8ad 	bl	8005e38 <HAL_RCCEx_PeriphCLKConfig>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_SPI_MspInit+0x10c>
      Error_Handler();
 8001ce4:	f7ff fe6a 	bl	80019bc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ce8:	4b41      	ldr	r3, [pc, #260]	@ (8001df0 <HAL_SPI_MspInit+0x214>)
 8001cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001cee:	4a40      	ldr	r2, [pc, #256]	@ (8001df0 <HAL_SPI_MspInit+0x214>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001cf8:	4b3d      	ldr	r3, [pc, #244]	@ (8001df0 <HAL_SPI_MspInit+0x214>)
 8001cfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d06:	4b3a      	ldr	r3, [pc, #232]	@ (8001df0 <HAL_SPI_MspInit+0x214>)
 8001d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d0c:	4a38      	ldr	r2, [pc, #224]	@ (8001df0 <HAL_SPI_MspInit+0x214>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d16:	4b36      	ldr	r3, [pc, #216]	@ (8001df0 <HAL_SPI_MspInit+0x214>)
 8001d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d1c:	f003 0204 	and.w	r2, r3, #4
 8001d20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d24:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d2e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d32:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d34:	4b2e      	ldr	r3, [pc, #184]	@ (8001df0 <HAL_SPI_MspInit+0x214>)
 8001d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001df0 <HAL_SPI_MspInit+0x214>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d44:	4b2a      	ldr	r3, [pc, #168]	@ (8001df0 <HAL_SPI_MspInit+0x214>)
 8001d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d4a:	f003 0202 	and.w	r2, r3, #2
 8001d4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d60:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = DISP_MOSI_Pin;
 8001d62:	2302      	movs	r3, #2
 8001d64:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(DISP_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001d80:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d84:	4619      	mov	r1, r3
 8001d86:	481d      	ldr	r0, [pc, #116]	@ (8001dfc <HAL_SPI_MspInit+0x220>)
 8001d88:	f002 f970 	bl	800406c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DISP_MISO_Pin;
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001da4:	2305      	movs	r3, #5
 8001da6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(DISP_MISO_GPIO_Port, &GPIO_InitStruct);
 8001daa:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001dae:	4619      	mov	r1, r3
 8001db0:	4812      	ldr	r0, [pc, #72]	@ (8001dfc <HAL_SPI_MspInit+0x220>)
 8001db2:	f002 f95b 	bl	800406c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DISP_SCK_Pin;
 8001db6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dd0:	2305      	movs	r3, #5
 8001dd2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(DISP_SCK_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4808      	ldr	r0, [pc, #32]	@ (8001e00 <HAL_SPI_MspInit+0x224>)
 8001dde:	f002 f945 	bl	800406c <HAL_GPIO_Init>
}
 8001de2:	bf00      	nop
 8001de4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40013000 	.word	0x40013000
 8001df0:	46020c00 	.word	0x46020c00
 8001df4:	42020000 	.word	0x42020000
 8001df8:	40003800 	.word	0x40003800
 8001dfc:	42020800 	.word	0x42020800
 8001e00:	42020400 	.word	0x42020400

08001e04 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	@ 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1e      	ldr	r2, [pc, #120]	@ (8001e9c <HAL_TIM_IC_MspInit+0x98>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d136      	bne.n	8001e94 <HAL_TIM_IC_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea0 <HAL_TIM_IC_MspInit+0x9c>)
 8001e28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea0 <HAL_TIM_IC_MspInit+0x9c>)
 8001e2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e32:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001e36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <HAL_TIM_IC_MspInit+0x9c>)
 8001e38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001e3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e44:	4b16      	ldr	r3, [pc, #88]	@ (8001ea0 <HAL_TIM_IC_MspInit+0x9c>)
 8001e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e4a:	4a15      	ldr	r2, [pc, #84]	@ (8001ea0 <HAL_TIM_IC_MspInit+0x9c>)
 8001e4c:	f043 0310 	orr.w	r3, r3, #16
 8001e50:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e54:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <HAL_TIM_IC_MspInit+0x9c>)
 8001e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DIST_ECHO_Pin;
 8001e62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e74:	2301      	movs	r3, #1
 8001e76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIST_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4809      	ldr	r0, [pc, #36]	@ (8001ea4 <HAL_TIM_IC_MspInit+0xa0>)
 8001e80:	f002 f8f4 	bl	800406c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001e84:	2200      	movs	r2, #0
 8001e86:	2100      	movs	r1, #0
 8001e88:	202c      	movs	r0, #44	@ 0x2c
 8001e8a:	f001 ff57 	bl	8003d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001e8e:	202c      	movs	r0, #44	@ 0x2c
 8001e90:	f001 ff6e 	bl	8003d70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e94:	bf00      	nop
 8001e96:	3728      	adds	r7, #40	@ 0x28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40012c00 	.word	0x40012c00
 8001ea0:	46020c00 	.word	0x46020c00
 8001ea4:	42021000 	.word	0x42021000

08001ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b0c2      	sub	sp, #264	@ 0x108
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001eb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001eb6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec8:	f107 0318 	add.w	r3, r7, #24
 8001ecc:	22d8      	movs	r2, #216	@ 0xd8
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f00b fa59 	bl	800d388 <memset>
  if(huart->Instance==UART4)
 8001ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001eda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a39      	ldr	r2, [pc, #228]	@ (8001fc8 <HAL_UART_MspInit+0x120>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d169      	bne.n	8001fbc <HAL_UART_MspInit+0x114>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001ee8:	f04f 0208 	mov.w	r2, #8
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef8:	f107 0318 	add.w	r3, r7, #24
 8001efc:	4618      	mov	r0, r3
 8001efe:	f003 ff9b 	bl	8005e38 <HAL_RCCEx_PeriphCLKConfig>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8001f08:	f7ff fd58 	bl	80019bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001fcc <HAL_UART_MspInit+0x124>)
 8001f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f12:	4a2e      	ldr	r2, [pc, #184]	@ (8001fcc <HAL_UART_MspInit+0x124>)
 8001f14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f18:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fcc <HAL_UART_MspInit+0x124>)
 8001f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <HAL_UART_MspInit+0x124>)
 8001f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f30:	4a26      	ldr	r2, [pc, #152]	@ (8001fcc <HAL_UART_MspInit+0x124>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f3a:	4b24      	ldr	r3, [pc, #144]	@ (8001fcc <HAL_UART_MspInit+0x124>)
 8001f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f48:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <HAL_UART_MspInit+0x124>)
 8001f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001fcc <HAL_UART_MspInit+0x124>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f58:	4b1c      	ldr	r3, [pc, #112]	@ (8001fcc <HAL_UART_MspInit+0x124>)
 8001f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f66:	2301      	movs	r3, #1
 8001f68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f7e:	2308      	movs	r3, #8
 8001f80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f84:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4811      	ldr	r0, [pc, #68]	@ (8001fd0 <HAL_UART_MspInit+0x128>)
 8001f8c:	f002 f86e 	bl	800406c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001faa:	2308      	movs	r3, #8
 8001fac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4807      	ldr	r0, [pc, #28]	@ (8001fd4 <HAL_UART_MspInit+0x12c>)
 8001fb8:	f002 f858 	bl	800406c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001fbc:	bf00      	nop
 8001fbe:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40004c00 	.word	0x40004c00
 8001fcc:	46020c00 	.word	0x46020c00
 8001fd0:	42020000 	.word	0x42020000
 8001fd4:	42020800 	.word	0x42020800

08001fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <NMI_Handler+0x4>

08001fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	4802      	ldr	r0, [pc, #8]	@ (8001ff0 <HardFault_Handler+0x10>)
 8001fe8:	f002 fa30 	bl	800444c <HAL_GPIO_TogglePin>
 8001fec:	e7fa      	b.n	8001fe4 <HardFault_Handler+0x4>
 8001fee:	bf00      	nop
 8001ff0:	42021800 	.word	0x42021800

08001ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <MemManage_Handler+0x4>

08001ffc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <BusFault_Handler+0x4>

08002004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <UsageFault_Handler+0x4>

0800200c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203a:	f000 f9a3 	bl	8002384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002048:	4804      	ldr	r0, [pc, #16]	@ (800205c <TIM1_CC_IRQHandler+0x18>)
 800204a:	f007 fd4f 	bl	8009aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800204e:	2180      	movs	r1, #128	@ 0x80
 8002050:	4803      	ldr	r0, [pc, #12]	@ (8002060 <TIM1_CC_IRQHandler+0x1c>)
 8002052:	f002 f9fb 	bl	800444c <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000314 	.word	0x20000314
 8002060:	42020400 	.word	0x42020400

08002064 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	e00a      	b.n	800208c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002076:	f3af 8000 	nop.w
 800207a:	4601      	mov	r1, r0
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	60ba      	str	r2, [r7, #8]
 8002082:	b2ca      	uxtb	r2, r1
 8002084:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3301      	adds	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	dbf0      	blt.n	8002076 <_read+0x12>
  }

  return len;
 8002094:	687b      	ldr	r3, [r7, #4]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_close>:
  }
  return len;
}

int _close(int file)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020c6:	605a      	str	r2, [r3, #4]
  return 0;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_isatty>:

int _isatty(int file)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002110:	4a14      	ldr	r2, [pc, #80]	@ (8002164 <_sbrk+0x5c>)
 8002112:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <_sbrk+0x60>)
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800211c:	4b13      	ldr	r3, [pc, #76]	@ (800216c <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002124:	4b11      	ldr	r3, [pc, #68]	@ (800216c <_sbrk+0x64>)
 8002126:	4a12      	ldr	r2, [pc, #72]	@ (8002170 <_sbrk+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002138:	f00b f984 	bl	800d444 <__errno>
 800213c:	4603      	mov	r3, r0
 800213e:	220c      	movs	r2, #12
 8002140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	e009      	b.n	800215c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002148:	4b08      	ldr	r3, [pc, #32]	@ (800216c <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214e:	4b07      	ldr	r3, [pc, #28]	@ (800216c <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	4a05      	ldr	r2, [pc, #20]	@ (800216c <_sbrk+0x64>)
 8002158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20270000 	.word	0x20270000
 8002168:	00000400 	.word	0x00000400
 800216c:	2000049c 	.word	0x2000049c
 8002170:	200007f0 	.word	0x200007f0

08002174 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002178:	4b18      	ldr	r3, [pc, #96]	@ (80021dc <SystemInit+0x68>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	4a17      	ldr	r2, [pc, #92]	@ (80021dc <SystemInit+0x68>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002188:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <SystemInit+0x6c>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800218e:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <SystemInit+0x6c>)
 8002190:	2200      	movs	r2, #0
 8002192:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002194:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <SystemInit+0x6c>)
 8002196:	2200      	movs	r2, #0
 8002198:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800219a:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <SystemInit+0x6c>)
 800219c:	2200      	movs	r2, #0
 800219e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80021a0:	4b0f      	ldr	r3, [pc, #60]	@ (80021e0 <SystemInit+0x6c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0e      	ldr	r2, [pc, #56]	@ (80021e0 <SystemInit+0x6c>)
 80021a6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80021aa:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80021ae:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80021b0:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <SystemInit+0x6c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80021b6:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <SystemInit+0x6c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a09      	ldr	r2, [pc, #36]	@ (80021e0 <SystemInit+0x6c>)
 80021bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80021c2:	4b07      	ldr	r3, [pc, #28]	@ (80021e0 <SystemInit+0x6c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021c8:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <SystemInit+0x68>)
 80021ca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80021ce:	609a      	str	r2, [r3, #8]
  #endif
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00
 80021e0:	46020c00 	.word	0x46020c00

080021e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80021e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800221c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80021e8:	f7ff ffc4 	bl	8002174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80021ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80021ee:	e003      	b.n	80021f8 <LoopCopyDataInit>

080021f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80021f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80021f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80021f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80021f6:	3104      	adds	r1, #4

080021f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80021f8:	480a      	ldr	r0, [pc, #40]	@ (8002224 <LoopForever+0xa>)
	ldr	r3, =_edata
 80021fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <LoopForever+0xe>)
	adds	r2, r0, r1
 80021fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80021fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002200:	d3f6      	bcc.n	80021f0 <CopyDataInit>
	ldr	r2, =_sbss
 8002202:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002204:	e002      	b.n	800220c <LoopFillZerobss>

08002206 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002206:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002208:	f842 3b04 	str.w	r3, [r2], #4

0800220c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800220c:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <LoopForever+0x16>)
	cmp	r2, r3
 800220e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002210:	d3f9      	bcc.n	8002206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002212:	f00b f91d 	bl	800d450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002216:	f7fe ff1d 	bl	8001054 <main>

0800221a <LoopForever>:

LoopForever:
    b LoopForever
 800221a:	e7fe      	b.n	800221a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800221c:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8002220:	0800ede8 	.word	0x0800ede8
	ldr	r0, =_sdata
 8002224:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002228:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800222c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002230:	200007ee 	.word	0x200007ee

08002234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002234:	e7fe      	b.n	8002234 <ADC1_2_IRQHandler>
	...

08002238 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800223c:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <HAL_Init+0x50>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a11      	ldr	r2, [pc, #68]	@ (8002288 <HAL_Init+0x50>)
 8002242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002248:	2003      	movs	r0, #3
 800224a:	f001 fd6c 	bl	8003d26 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800224e:	f003 fc15 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8002252:	4602      	mov	r2, r0
 8002254:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <HAL_Init+0x54>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	490c      	ldr	r1, [pc, #48]	@ (8002290 <HAL_Init+0x58>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
 8002264:	4a0b      	ldr	r2, [pc, #44]	@ (8002294 <HAL_Init+0x5c>)
 8002266:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002268:	2004      	movs	r0, #4
 800226a:	f001 fdb1 	bl	8003dd0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800226e:	200f      	movs	r0, #15
 8002270:	f000 f812 	bl	8002298 <HAL_InitTick>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e002      	b.n	8002284 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800227e:	f7ff fba3 	bl	80019c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40022000 	.word	0x40022000
 800228c:	46020c00 	.word	0x46020c00
 8002290:	0800eaf0 	.word	0x0800eaf0
 8002294:	20000000 	.word	0x20000000

08002298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80022a4:	4b33      	ldr	r3, [pc, #204]	@ (8002374 <HAL_InitTick+0xdc>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e05c      	b.n	800236a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80022b0:	4b31      	ldr	r3, [pc, #196]	@ (8002378 <HAL_InitTick+0xe0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d10c      	bne.n	80022d6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80022bc:	4b2f      	ldr	r3, [pc, #188]	@ (800237c <HAL_InitTick+0xe4>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002374 <HAL_InitTick+0xdc>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	4619      	mov	r1, r3
 80022c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	e037      	b.n	8002346 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80022d6:	f001 fdd3 	bl	8003e80 <HAL_SYSTICK_GetCLKSourceConfig>
 80022da:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d023      	beq.n	800232a <HAL_InitTick+0x92>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d82d      	bhi.n	8002344 <HAL_InitTick+0xac>
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_InitTick+0x5e>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d00d      	beq.n	8002310 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80022f4:	e026      	b.n	8002344 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80022f6:	4b21      	ldr	r3, [pc, #132]	@ (800237c <HAL_InitTick+0xe4>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <HAL_InitTick+0xdc>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	4619      	mov	r1, r3
 8002300:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002304:	fbb3 f3f1 	udiv	r3, r3, r1
 8002308:	fbb2 f3f3 	udiv	r3, r2, r3
 800230c:	60fb      	str	r3, [r7, #12]
        break;
 800230e:	e01a      	b.n	8002346 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002310:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <HAL_InitTick+0xdc>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800231a:	fbb3 f3f2 	udiv	r3, r3, r2
 800231e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	60fb      	str	r3, [r7, #12]
        break;
 8002328:	e00d      	b.n	8002346 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800232a:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <HAL_InitTick+0xdc>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002334:	fbb3 f3f2 	udiv	r3, r3, r2
 8002338:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	60fb      	str	r3, [r7, #12]
        break;
 8002342:	e000      	b.n	8002346 <HAL_InitTick+0xae>
        break;
 8002344:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f001 fd20 	bl	8003d8c <HAL_SYSTICK_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e009      	b.n	800236a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002356:	2200      	movs	r2, #0
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	f04f 30ff 	mov.w	r0, #4294967295
 800235e:	f001 fced 	bl	8003d3c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002362:	4a07      	ldr	r2, [pc, #28]	@ (8002380 <HAL_InitTick+0xe8>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000008 	.word	0x20000008
 8002378:	e000e010 	.word	0xe000e010
 800237c:	20000000 	.word	0x20000000
 8002380:	20000004 	.word	0x20000004

08002384 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002388:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_IncTick+0x20>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <HAL_IncTick+0x24>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4413      	add	r3, r2
 8002394:	4a04      	ldr	r2, [pc, #16]	@ (80023a8 <HAL_IncTick+0x24>)
 8002396:	6013      	str	r3, [r2, #0]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000008 	.word	0x20000008
 80023a8:	200004a0 	.word	0x200004a0

080023ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return uwTick;
 80023b0:	4b03      	ldr	r3, [pc, #12]	@ (80023c0 <HAL_GetTick+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	200004a0 	.word	0x200004a0

080023c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff ffee 	bl	80023ac <HAL_GetTick>
 80023d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023dc:	d005      	beq.n	80023ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023de:	4b0a      	ldr	r3, [pc, #40]	@ (8002408 <HAL_Delay+0x44>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ea:	bf00      	nop
 80023ec:	f7ff ffde 	bl	80023ac <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d8f7      	bhi.n	80023ec <HAL_Delay+0x28>
  {
  }
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000008 	.word	0x20000008

0800240c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	609a      	str	r2, [r3, #8]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	609a      	str	r2, [r3, #8]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a0a      	ldr	r2, [pc, #40]	@ (80024b0 <LL_ADC_SetResolution+0x3c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d104      	bne.n	8002494 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3b01      	subs	r3, #1
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f023 020c 	bic.w	r2, r3, #12
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	60da      	str	r2, [r3, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	46021000 	.word	0x46021000

080024b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3360      	adds	r3, #96	@ 0x60
 80024c6:	461a      	mov	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	430b      	orrs	r3, r1
 80024e4:	431a      	orrs	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b085      	sub	sp, #20
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3360      	adds	r3, #96	@ 0x60
 8002504:	461a      	mov	r2, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002522:	b480      	push	{r7}
 8002524:	b087      	sub	sp, #28
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	3360      	adds	r3, #96	@ 0x60
 8002532:	461a      	mov	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	431a      	orrs	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	601a      	str	r2, [r3, #0]
}
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3360      	adds	r3, #96	@ 0x60
 8002568:	461a      	mov	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	431a      	orrs	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	601a      	str	r2, [r3, #0]
}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800258e:	b480      	push	{r7}
 8002590:	b087      	sub	sp, #28
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3360      	adds	r3, #96	@ 0x60
 800259e:	461a      	mov	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	601a      	str	r2, [r3, #0]
}
 80025b8:	bf00      	nop
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	2a00      	cmp	r2, #0
 80025ee:	d002      	beq.n	80025f6 <LL_ADC_SetGainCompensation+0x32>
 80025f0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80025f4:	e000      	b.n	80025f8 <LL_ADC_SetGainCompensation+0x34>
 80025f6:	2200      	movs	r2, #0
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800260a:	b480      	push	{r7}
 800260c:	b085      	sub	sp, #20
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2107      	movs	r1, #7
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	401a      	ands	r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	431a      	orrs	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	@ 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4a2b      	ldr	r2, [pc, #172]	@ (8002704 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d020      	beq.n	800269e <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3330      	adds	r3, #48	@ 0x30
 8002660:	461a      	mov	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	4413      	add	r3, r2
 800266e:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	211f      	movs	r1, #31
 800267c:	fa01 f303 	lsl.w	r3, r1, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	401a      	ands	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	0e9b      	lsrs	r3, r3, #26
 8002688:	f003 011f 	and.w	r1, r3, #31
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	431a      	orrs	r2, r3
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 800269c:	e02b      	b.n	80026f6 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	210f      	movs	r1, #15
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	401a      	ands	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <LL_ADC_REG_SetSequencerRanks+0x7e>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	0e9b      	lsrs	r3, r3, #26
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	e010      	b.n	80026e8 <LL_ADC_REG_SetSequencerRanks+0xa0>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	613b      	str	r3, [r7, #16]
  return result;
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 80026dc:	2320      	movs	r3, #32
 80026de:	e003      	b.n	80026e8 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	f001 011f 	and.w	r1, r1, #31
 80026ee:	408b      	lsls	r3, r1
 80026f0:	431a      	orrs	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026f6:	bf00      	nop
 80026f8:	3724      	adds	r7, #36	@ 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	46021000 	.word	0x46021000

08002708 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d107      	bne.n	800272c <LL_ADC_REG_SetSequencerChAdd+0x24>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	0e9b      	lsrs	r3, r3, #26
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	2201      	movs	r2, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	e015      	b.n	8002758 <LL_ADC_REG_SetSequencerChAdd+0x50>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	60fb      	str	r3, [r7, #12]
  return result;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8002742:	2320      	movs	r3, #32
 8002744:	e003      	b.n	800274e <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	fab3 f383 	clz	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	2201      	movs	r2, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002762:	bf00      	nop
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	0e9b      	lsrs	r3, r3, #26
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	2101      	movs	r1, #1
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	401a      	ands	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b08b      	sub	sp, #44	@ 0x2c
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002864 <LL_ADC_SetChannelSamplingTime+0xc4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d042      	beq.n	800283a <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d104      	bne.n	80027c8 <LL_ADC_SetChannelSamplingTime+0x28>
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	0e9b      	lsrs	r3, r3, #26
 80027c2:	f003 021f 	and.w	r2, r3, #31
 80027c6:	e011      	b.n	80027ec <LL_ADC_SetChannelSamplingTime+0x4c>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	617b      	str	r3, [r7, #20]
  return result;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80027de:	2320      	movs	r3, #32
 80027e0:	e003      	b.n	80027ea <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	0e5b      	lsrs	r3, r3, #25
 80027f0:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80027f4:	460b      	mov	r3, r1
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	1ad2      	subs	r2, r2, r3
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3314      	adds	r3, #20
 800280a:	461a      	mov	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	0e5b      	lsrs	r3, r3, #25
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	4413      	add	r3, r2
 8002818:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	2107      	movs	r1, #7
 8002820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	401a      	ands	r2, r3
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	431a      	orrs	r2, r3
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8002838:	e00e      	b.n	8002858 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	43db      	mvns	r3, r3
 8002844:	401a      	ands	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	0219      	lsls	r1, r3, #8
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	400b      	ands	r3, r1
 800284e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002852:	431a      	orrs	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	615a      	str	r2, [r3, #20]
}
 8002858:	bf00      	nop
 800285a:	372c      	adds	r7, #44	@ 0x2c
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	46021000 	.word	0x46021000

08002868 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002880:	43db      	mvns	r3, r3
 8002882:	401a      	ands	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f003 0318 	and.w	r3, r3, #24
 800288a:	4908      	ldr	r1, [pc, #32]	@ (80028ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800288c:	40d9      	lsrs	r1, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	400b      	ands	r3, r1
 8002892:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002896:	431a      	orrs	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	000fffff 	.word	0x000fffff

080028b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80028c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6093      	str	r3, [r2, #8]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028e8:	d101      	bne.n	80028ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800290c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002910:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	609a      	str	r2, [r3, #8]
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002934:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002938:	d101      	bne.n	800293e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <LL_ADC_IsEnabled+0x18>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <LL_ADC_IsEnabled+0x1a>
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b04      	cmp	r3, #4
 8002984:	d101      	bne.n	800298a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d101      	bne.n	80029b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b08b      	sub	sp, #44	@ 0x2c
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e2ce      	b.n	8002f7e <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a95      	ldr	r2, [pc, #596]	@ (8002c44 <HAL_ADC_Init+0x284>)
 80029ee:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d109      	bne.n	8002a0c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7fe ffff 	bl	80019fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff5f 	bl	80028d4 <LL_ADC_IsDeepPowerDownEnabled>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d004      	beq.n	8002a26 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff45 	bl	80028b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ff7a 	bl	8002924 <LL_ADC_IsInternalRegulatorEnabled>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d115      	bne.n	8002a62 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff5e 	bl	80028fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a40:	4b81      	ldr	r3, [pc, #516]	@ (8002c48 <HAL_ADC_Init+0x288>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	099b      	lsrs	r3, r3, #6
 8002a46:	4a81      	ldr	r2, [pc, #516]	@ (8002c4c <HAL_ADC_Init+0x28c>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	3301      	adds	r3, #1
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a54:	e002      	b.n	8002a5c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f9      	bne.n	8002a56 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ff5c 	bl	8002924 <LL_ADC_IsInternalRegulatorEnabled>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10e      	bne.n	8002a90 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a76:	f043 0210 	orr.w	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff6c 	bl	8002972 <LL_ADC_REG_IsConversionOngoing>
 8002a9a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f040 825f 	bne.w	8002f68 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f040 825b 	bne.w	8002f68 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ab6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002aba:	f043 0202 	orr.w	r2, r3, #2
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff ff40 	bl	800294c <LL_ADC_IsEnabled>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d14f      	bne.n	8002b72 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c44 <HAL_ADC_Init+0x284>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d037      	beq.n	8002b4c <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a5b      	ldr	r2, [pc, #364]	@ (8002c50 <HAL_ADC_Init+0x290>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_ADC_Init+0x130>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a5a      	ldr	r2, [pc, #360]	@ (8002c54 <HAL_ADC_Init+0x294>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d10e      	bne.n	8002b0e <HAL_ADC_Init+0x14e>
 8002af0:	4857      	ldr	r0, [pc, #348]	@ (8002c50 <HAL_ADC_Init+0x290>)
 8002af2:	f7ff ff2b 	bl	800294c <LL_ADC_IsEnabled>
 8002af6:	4604      	mov	r4, r0
 8002af8:	4856      	ldr	r0, [pc, #344]	@ (8002c54 <HAL_ADC_Init+0x294>)
 8002afa:	f7ff ff27 	bl	800294c <LL_ADC_IsEnabled>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4323      	orrs	r3, r4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bf0c      	ite	eq
 8002b06:	2301      	moveq	r3, #1
 8002b08:	2300      	movne	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	e008      	b.n	8002b20 <HAL_ADC_Init+0x160>
 8002b0e:	484d      	ldr	r0, [pc, #308]	@ (8002c44 <HAL_ADC_Init+0x284>)
 8002b10:	f7ff ff1c 	bl	800294c <LL_ADC_IsEnabled>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bf0c      	ite	eq
 8002b1a:	2301      	moveq	r3, #1
 8002b1c:	2300      	movne	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d026      	beq.n	8002b72 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a49      	ldr	r2, [pc, #292]	@ (8002c50 <HAL_ADC_Init+0x290>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d004      	beq.n	8002b38 <HAL_ADC_Init+0x178>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a48      	ldr	r2, [pc, #288]	@ (8002c54 <HAL_ADC_Init+0x294>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d101      	bne.n	8002b3c <HAL_ADC_Init+0x17c>
 8002b38:	4a47      	ldr	r2, [pc, #284]	@ (8002c58 <HAL_ADC_Init+0x298>)
 8002b3a:	e000      	b.n	8002b3e <HAL_ADC_Init+0x17e>
 8002b3c:	4a47      	ldr	r2, [pc, #284]	@ (8002c5c <HAL_ADC_Init+0x29c>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4619      	mov	r1, r3
 8002b44:	4610      	mov	r0, r2
 8002b46:	f7ff fc61 	bl	800240c <LL_ADC_SetCommonClock>
 8002b4a:	e012      	b.n	8002b72 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4619      	mov	r1, r3
 8002b56:	4610      	mov	r0, r2
 8002b58:	f7ff fc8c 	bl	8002474 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8002b5c:	4b3f      	ldr	r3, [pc, #252]	@ (8002c5c <HAL_ADC_Init+0x29c>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002b6c:	493b      	ldr	r1, [pc, #236]	@ (8002c5c <HAL_ADC_Init+0x29c>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a33      	ldr	r2, [pc, #204]	@ (8002c44 <HAL_ADC_Init+0x284>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d010      	beq.n	8002b9e <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b82:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002b88:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002b8e:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002b96:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	623b      	str	r3, [r7, #32]
 8002b9c:	e035      	b.n	8002c0a <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	7f1b      	ldrb	r3, [r3, #28]
 8002ba2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002baa:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bac:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002bb2:	2a00      	cmp	r2, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_ADC_Init+0x1fc>
 8002bb6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002bba:	e000      	b.n	8002bbe <HAL_ADC_Init+0x1fe>
 8002bbc:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002bbe:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002bc4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	da04      	bge.n	8002bd8 <HAL_ADC_Init+0x218>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bd6:	e001      	b.n	8002bdc <HAL_ADC_Init+0x21c>
 8002bd8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8002bdc:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	491b      	ldr	r1, [pc, #108]	@ (8002c50 <HAL_ADC_Init+0x290>)
 8002be4:	428b      	cmp	r3, r1
 8002be6:	d004      	beq.n	8002bf2 <HAL_ADC_Init+0x232>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4919      	ldr	r1, [pc, #100]	@ (8002c54 <HAL_ADC_Init+0x294>)
 8002bee:	428b      	cmp	r3, r1
 8002bf0:	d103      	bne.n	8002bfa <HAL_ADC_Init+0x23a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bf8:	e003      	b.n	8002c02 <HAL_ADC_Init+0x242>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c00:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002c02:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c04:	6a3a      	ldr	r2, [r7, #32]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d131      	bne.n	8002c78 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0a      	ldr	r2, [pc, #40]	@ (8002c44 <HAL_ADC_Init+0x284>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c22:	3b01      	subs	r3, #1
 8002c24:	045b      	lsls	r3, r3, #17
 8002c26:	6a3a      	ldr	r2, [r7, #32]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	623b      	str	r3, [r7, #32]
 8002c2c:	e024      	b.n	8002c78 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d113      	bne.n	8002c60 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c3e:	623b      	str	r3, [r7, #32]
 8002c40:	e01a      	b.n	8002c78 <HAL_ADC_Init+0x2b8>
 8002c42:	bf00      	nop
 8002c44:	46021000 	.word	0x46021000
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	053e2d63 	.word	0x053e2d63
 8002c50:	42028000 	.word	0x42028000
 8002c54:	42028100 	.word	0x42028100
 8002c58:	42028300 	.word	0x42028300
 8002c5c:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c64:	f043 0220 	orr.w	r2, r3, #32
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c70:	f043 0201 	orr.w	r2, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a75      	ldr	r2, [pc, #468]	@ (8002e54 <HAL_ADC_Init+0x494>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d018      	beq.n	8002cb4 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c96:	4313      	orrs	r3, r2
 8002c98:	6a3a      	ldr	r2, [r7, #32]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	4b6c      	ldr	r3, [pc, #432]	@ (8002e58 <HAL_ADC_Init+0x498>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	6a39      	ldr	r1, [r7, #32]
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	60d3      	str	r3, [r2, #12]
 8002cb2:	e031      	b.n	8002d18 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d009      	beq.n	8002cd0 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	6a3a      	ldr	r2, [r7, #32]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	4b61      	ldr	r3, [pc, #388]	@ (8002e5c <HAL_ADC_Init+0x49c>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	6a39      	ldr	r1, [r7, #32]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1a      	ldr	r2, [r3, #32]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d008      	beq.n	8002d18 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a4d      	ldr	r2, [pc, #308]	@ (8002e54 <HAL_ADC_Init+0x494>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	f000 80a4 	beq.w	8002e6c <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fe22 	bl	8002972 <LL_ADC_REG_IsConversionOngoing>
 8002d2e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fe2f 	bl	8002998 <LL_ADC_INJ_IsConversionOngoing>
 8002d3a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d166      	bne.n	8002e10 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d163      	bne.n	8002e10 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	7f1b      	ldrb	r3, [r3, #28]
 8002d4c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4943      	ldr	r1, [pc, #268]	@ (8002e60 <HAL_ADC_Init+0x4a0>)
 8002d54:	428b      	cmp	r3, r1
 8002d56:	d004      	beq.n	8002d62 <HAL_ADC_Init+0x3a2>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4941      	ldr	r1, [pc, #260]	@ (8002e64 <HAL_ADC_Init+0x4a4>)
 8002d5e:	428b      	cmp	r3, r1
 8002d60:	d102      	bne.n	8002d68 <HAL_ADC_Init+0x3a8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d66:	e002      	b.n	8002d6e <HAL_ADC_Init+0x3ae>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6c:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d7c:	f023 0303 	bic.w	r3, r3, #3
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	6a39      	ldr	r1, [r7, #32]
 8002d86:	430b      	orrs	r3, r1
 8002d88:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	f7ff fc11 	bl	80025c4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d11e      	bne.n	8002dea <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002db0:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e68 <HAL_ADC_Init+0x4a8>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002dc0:	0411      	lsls	r1, r2, #16
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002dc6:	4311      	orrs	r1, r2
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8002dcc:	4311      	orrs	r1, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002dd2:	4311      	orrs	r1, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002dd8:	0892      	lsrs	r2, r2, #2
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	611a      	str	r2, [r3, #16]
 8002de8:	e007      	b.n	8002dfa <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d10c      	bne.n	8002e32 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	f023 010f 	bic.w	r1, r3, #15
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e26:	1e5a      	subs	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e30:	e007      	b.n	8002e42 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 020f 	bic.w	r2, r2, #15
 8002e40:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e46:	f023 0303 	bic.w	r3, r3, #3
 8002e4a:	f043 0201 	orr.w	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002e52:	e092      	b.n	8002f7a <HAL_ADC_Init+0x5ba>
 8002e54:	46021000 	.word	0x46021000
 8002e58:	fff0c013 	.word	0xfff0c013
 8002e5c:	ffde800d 	.word	0xffde800d
 8002e60:	42028000 	.word	0x42028000
 8002e64:	42028100 	.word	0x42028100
 8002e68:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d111      	bne.n	8002e9a <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002e7e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002e84:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002e8a:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	4b39      	ldr	r3, [pc, #228]	@ (8002f88 <HAL_ADC_Init+0x5c8>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	69f9      	ldr	r1, [r7, #28]
 8002eaa:	430b      	orrs	r3, r1
 8002eac:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2100      	movs	r1, #0
 8002eba:	f7ff fba6 	bl	800260a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8002ecc:	f7ff fb9d 	bl	800260a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d108      	bne.n	8002eea <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f062 020f 	orn	r2, r2, #15
 8002ee6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ee8:	e018      	b.n	8002f1c <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ef2:	d113      	bne.n	8002f1c <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efe:	3b01      	subs	r3, #1
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	f003 031c 	and.w	r3, r3, #28
 8002f06:	f06f 020f 	mvn.w	r2, #15
 8002f0a:	fa02 f103 	lsl.w	r1, r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	4b1a      	ldr	r3, [pc, #104]	@ (8002f8c <HAL_ADC_Init+0x5cc>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	6a3a      	ldr	r2, [r7, #32]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d10b      	bne.n	8002f44 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f36:	f023 0303 	bic.w	r3, r3, #3
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002f42:	e01a      	b.n	8002f7a <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f48:	f023 0312 	bic.w	r3, r3, #18
 8002f4c:	f043 0210 	orr.w	r2, r3, #16
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f58:	f043 0201 	orr.w	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002f66:	e008      	b.n	8002f7a <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f6c:	f043 0210 	orr.w	r2, r3, #16
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	372c      	adds	r7, #44	@ 0x2c
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd90      	pop	{r4, r7, pc}
 8002f86:	bf00      	nop
 8002f88:	f7fffc02 	.word	0xf7fffc02
 8002f8c:	833ffff3 	.word	0x833ffff3

08002f90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b0b7      	sub	sp, #220	@ 0xdc
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4aa8      	ldr	r2, [pc, #672]	@ (800324c <HAL_ADC_ConfigChannel+0x2bc>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d103      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d102      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x36>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	f000 bdfe 	b.w	8003bc2 <HAL_ADC_ConfigChannel+0xc32>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fccd 	bl	8002972 <LL_ADC_REG_IsConversionOngoing>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 85c1 	bne.w	8003b62 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a99      	ldr	r2, [pc, #612]	@ (800324c <HAL_ADC_ConfigChannel+0x2bc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	f000 8409 	beq.w	80037fe <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d108      	bne.n	800300a <HAL_ADC_ConfigChannel+0x7a>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	0e9b      	lsrs	r3, r3, #26
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	2201      	movs	r2, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	e01d      	b.n	8003046 <HAL_ADC_ConfigChannel+0xb6>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800301e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003022:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003026:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 800302e:	2320      	movs	r3, #32
 8003030:	e004      	b.n	800303c <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8003032:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003036:	fab3 f383 	clz	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	2201      	movs	r2, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	69d1      	ldr	r1, [r2, #28]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	430b      	orrs	r3, r1
 8003052:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	f7ff faf1 	bl	8002648 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fc81 	bl	8002972 <LL_ADC_REG_IsConversionOngoing>
 8003070:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fc8d 	bl	8002998 <LL_ADC_INJ_IsConversionOngoing>
 800307e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003082:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 81df 	bne.w	800344a <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800308c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 81da 	bne.w	800344a <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6819      	ldr	r1, [r3, #0]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	461a      	mov	r2, r3
 80030a4:	f7ff fb7c 	bl	80027a0 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d046      	beq.n	8003158 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6919      	ldr	r1, [r3, #16]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030da:	f7ff f9eb 	bl	80024b4 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6919      	ldr	r1, [r3, #16]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	461a      	mov	r2, r3
 80030ec:	f7ff fa19 	bl	8002522 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	7e9b      	ldrb	r3, [r3, #26]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d11e      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <HAL_ADC_ConfigChannel+0x17e>
 8003108:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800310c:	e000      	b.n	8003110 <HAL_ADC_ConfigChannel+0x180>
 800310e:	2300      	movs	r3, #0
 8003110:	461a      	mov	r2, r3
 8003112:	f7ff fa3c 	bl	800258e <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003122:	2b01      	cmp	r3, #1
 8003124:	d102      	bne.n	800312c <HAL_ADC_ConfigChannel+0x19c>
 8003126:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800312a:	e000      	b.n	800312e <HAL_ADC_ConfigChannel+0x19e>
 800312c:	2300      	movs	r3, #0
 800312e:	461a      	mov	r2, r3
 8003130:	f7ff fa12 	bl	8002558 <LL_ADC_SetOffsetSignedSaturation>
 8003134:	e189      	b.n	800344a <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	2200      	movs	r2, #0
 8003140:	4619      	mov	r1, r3
 8003142:	f7ff fa24 	bl	800258e <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2200      	movs	r2, #0
 8003150:	4619      	mov	r1, r3
 8003152:	f7ff fa01 	bl	8002558 <LL_ADC_SetOffsetSignedSaturation>
 8003156:	e178      	b.n	800344a <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff f9c9 	bl	80024f6 <LL_ADC_GetOffsetChannel>
 8003164:	4603      	mov	r3, r0
 8003166:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10a      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x1f4>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff f9be 	bl	80024f6 <LL_ADC_GetOffsetChannel>
 800317a:	4603      	mov	r3, r0
 800317c:	0e9b      	lsrs	r3, r3, #26
 800317e:	f003 021f 	and.w	r2, r3, #31
 8003182:	e01e      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x232>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2100      	movs	r1, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff f9b3 	bl	80024f6 <LL_ADC_GetOffsetChannel>
 8003190:	4603      	mov	r3, r0
 8003192:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800319a:	fa93 f3a3 	rbit	r3, r3
 800319e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80031a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80031aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80031b2:	2320      	movs	r3, #32
 80031b4:	e004      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80031b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d105      	bne.n	80031da <HAL_ADC_ConfigChannel+0x24a>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	0e9b      	lsrs	r3, r3, #26
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	e018      	b.n	800320c <HAL_ADC_ConfigChannel+0x27c>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80031ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80031f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 80031fe:	2320      	movs	r3, #32
 8003200:	e004      	b.n	800320c <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8003202:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800320c:	429a      	cmp	r2, r3
 800320e:	d107      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	2300      	movs	r3, #0
 800321a:	2100      	movs	r1, #0
 800321c:	f7ff f94a 	bl	80024b4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2101      	movs	r1, #1
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff f965 	bl	80024f6 <LL_ADC_GetOffsetChannel>
 800322c:	4603      	mov	r3, r0
 800322e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10c      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x2c0>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2101      	movs	r1, #1
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff f95a 	bl	80024f6 <LL_ADC_GetOffsetChannel>
 8003242:	4603      	mov	r3, r0
 8003244:	0e9b      	lsrs	r3, r3, #26
 8003246:	f003 021f 	and.w	r2, r3, #31
 800324a:	e020      	b.n	800328e <HAL_ADC_ConfigChannel+0x2fe>
 800324c:	46021000 	.word	0x46021000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2101      	movs	r1, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff f94d 	bl	80024f6 <LL_ADC_GetOffsetChannel>
 800325c:	4603      	mov	r3, r0
 800325e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800326e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003272:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003276:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800327e:	2320      	movs	r3, #32
 8003280:	e004      	b.n	800328c <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8003282:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d105      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x316>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	0e9b      	lsrs	r3, r3, #26
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	e018      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x348>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032b2:	fa93 f3a3 	rbit	r3, r3
 80032b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80032ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80032c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80032ca:	2320      	movs	r3, #32
 80032cc:	e004      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80032ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032d8:	429a      	cmp	r2, r3
 80032da:	d107      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	2300      	movs	r3, #0
 80032e6:	2101      	movs	r1, #1
 80032e8:	f7ff f8e4 	bl	80024b4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2102      	movs	r1, #2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff f8ff 	bl	80024f6 <LL_ADC_GetOffsetChannel>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10a      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x388>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2102      	movs	r1, #2
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff f8f4 	bl	80024f6 <LL_ADC_GetOffsetChannel>
 800330e:	4603      	mov	r3, r0
 8003310:	0e9b      	lsrs	r3, r3, #26
 8003312:	f003 021f 	and.w	r2, r3, #31
 8003316:	e01a      	b.n	800334e <HAL_ADC_ConfigChannel+0x3be>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2102      	movs	r1, #2
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff f8e9 	bl	80024f6 <LL_ADC_GetOffsetChannel>
 8003324:	4603      	mov	r3, r0
 8003326:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003330:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003332:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003336:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800333e:	2320      	movs	r3, #32
 8003340:	e004      	b.n	800334c <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8003342:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d105      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x3d6>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	0e9b      	lsrs	r3, r3, #26
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	e011      	b.n	800338a <HAL_ADC_ConfigChannel+0x3fa>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003376:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003378:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800337e:	2320      	movs	r3, #32
 8003380:	e003      	b.n	800338a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003382:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800338a:	429a      	cmp	r2, r3
 800338c:	d107      	bne.n	800339e <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	2300      	movs	r3, #0
 8003398:	2102      	movs	r1, #2
 800339a:	f7ff f88b 	bl	80024b4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2103      	movs	r1, #3
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff f8a6 	bl	80024f6 <LL_ADC_GetOffsetChannel>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10a      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x43a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2103      	movs	r1, #3
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff f89b 	bl	80024f6 <LL_ADC_GetOffsetChannel>
 80033c0:	4603      	mov	r3, r0
 80033c2:	0e9b      	lsrs	r3, r3, #26
 80033c4:	f003 021f 	and.w	r2, r3, #31
 80033c8:	e017      	b.n	80033fa <HAL_ADC_ConfigChannel+0x46a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2103      	movs	r1, #3
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff f890 	bl	80024f6 <LL_ADC_GetOffsetChannel>
 80033d6:	4603      	mov	r3, r0
 80033d8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033dc:	fa93 f3a3 	rbit	r3, r3
 80033e0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80033e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033e4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80033e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 80033ec:	2320      	movs	r3, #32
 80033ee:	e003      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 80033f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033f2:	fab3 f383 	clz	r3, r3
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d105      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x482>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	0e9b      	lsrs	r3, r3, #26
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	e011      	b.n	8003436 <HAL_ADC_ConfigChannel+0x4a6>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003422:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003424:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 800342a:	2320      	movs	r3, #32
 800342c:	e003      	b.n	8003436 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 800342e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003430:	fab3 f383 	clz	r3, r3
 8003434:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003436:	429a      	cmp	r2, r3
 8003438:	d107      	bne.n	800344a <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	2300      	movs	r3, #0
 8003444:	2103      	movs	r1, #3
 8003446:	f7ff f835 	bl	80024b4 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff fa7c 	bl	800294c <LL_ADC_IsEnabled>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	f040 83ad 	bne.w	8003bb6 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	6819      	ldr	r1, [r3, #0]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	461a      	mov	r2, r3
 800346a:	f7ff f9fd 	bl	8002868 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003476:	f040 80d6 	bne.w	8003626 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <HAL_ADC_ConfigChannel+0x50e>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	0e9b      	lsrs	r3, r3, #26
 800348c:	3301      	adds	r3, #1
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	2b09      	cmp	r3, #9
 8003494:	bf94      	ite	ls
 8003496:	2301      	movls	r3, #1
 8003498:	2300      	movhi	r3, #0
 800349a:	b2db      	uxtb	r3, r3
 800349c:	e019      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x542>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80034ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034ae:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80034b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80034b6:	2320      	movs	r3, #32
 80034b8:	e003      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80034ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034bc:	fab3 f383 	clz	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	3301      	adds	r3, #1
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	2b09      	cmp	r3, #9
 80034ca:	bf94      	ite	ls
 80034cc:	2301      	movls	r3, #1
 80034ce:	2300      	movhi	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d04d      	beq.n	8003572 <HAL_ADC_ConfigChannel+0x5e2>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d107      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x562>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	0e9b      	lsrs	r3, r3, #26
 80034e8:	3301      	adds	r3, #1
 80034ea:	069b      	lsls	r3, r3, #26
 80034ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034f0:	e015      	b.n	800351e <HAL_ADC_ConfigChannel+0x58e>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003502:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800350a:	2320      	movs	r3, #32
 800350c:	e003      	b.n	8003516 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800350e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	3301      	adds	r3, #1
 8003518:	069b      	lsls	r3, r3, #26
 800351a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <HAL_ADC_ConfigChannel+0x5ae>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	0e9b      	lsrs	r3, r3, #26
 8003530:	3301      	adds	r3, #1
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	2101      	movs	r1, #1
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	e017      	b.n	800356e <HAL_ADC_ConfigChannel+0x5de>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003546:	fa93 f3a3 	rbit	r3, r3
 800354a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800354c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8003556:	2320      	movs	r3, #32
 8003558:	e003      	b.n	8003562 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 800355a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800355c:	fab3 f383 	clz	r3, r3
 8003560:	b2db      	uxtb	r3, r3
 8003562:	3301      	adds	r3, #1
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	2101      	movs	r1, #1
 800356a:	fa01 f303 	lsl.w	r3, r1, r3
 800356e:	4313      	orrs	r3, r2
 8003570:	e04e      	b.n	8003610 <HAL_ADC_ConfigChannel+0x680>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d107      	bne.n	800358e <HAL_ADC_ConfigChannel+0x5fe>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	0e9b      	lsrs	r3, r3, #26
 8003584:	3301      	adds	r3, #1
 8003586:	069b      	lsls	r3, r3, #26
 8003588:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800358c:	e015      	b.n	80035ba <HAL_ADC_ConfigChannel+0x62a>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80035a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80035a6:	2320      	movs	r3, #32
 80035a8:	e003      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80035aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ac:	fab3 f383 	clz	r3, r3
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	3301      	adds	r3, #1
 80035b4:	069b      	lsls	r3, r3, #26
 80035b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_ADC_ConfigChannel+0x64a>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	0e9b      	lsrs	r3, r3, #26
 80035cc:	3301      	adds	r3, #1
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	2101      	movs	r1, #1
 80035d4:	fa01 f303 	lsl.w	r3, r1, r3
 80035d8:	e017      	b.n	800360a <HAL_ADC_ConfigChannel+0x67a>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	fa93 f3a3 	rbit	r3, r3
 80035e6:	61bb      	str	r3, [r7, #24]
  return result;
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 80035f2:	2320      	movs	r3, #32
 80035f4:	e003      	b.n	80035fe <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	fab3 f383 	clz	r3, r3
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	3301      	adds	r3, #1
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2101      	movs	r1, #1
 8003606:	fa01 f303 	lsl.w	r3, r1, r3
 800360a:	4313      	orrs	r3, r2
 800360c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003610:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	461a      	mov	r2, r3
 800361e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003622:	f7ff f8bd 	bl	80027a0 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f280 82c3 	bge.w	8003bb6 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a92      	ldr	r2, [pc, #584]	@ (8003880 <HAL_ADC_ConfigChannel+0x8f0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d004      	beq.n	8003644 <HAL_ADC_ConfigChannel+0x6b4>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a91      	ldr	r2, [pc, #580]	@ (8003884 <HAL_ADC_ConfigChannel+0x8f4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d101      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x6b8>
 8003644:	4b90      	ldr	r3, [pc, #576]	@ (8003888 <HAL_ADC_ConfigChannel+0x8f8>)
 8003646:	e000      	b.n	800364a <HAL_ADC_ConfigChannel+0x6ba>
 8003648:	4b90      	ldr	r3, [pc, #576]	@ (800388c <HAL_ADC_ConfigChannel+0x8fc>)
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe ff04 	bl	8002458 <LL_ADC_GetCommonPathInternalCh>
 8003650:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a89      	ldr	r2, [pc, #548]	@ (8003880 <HAL_ADC_ConfigChannel+0x8f0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d004      	beq.n	8003668 <HAL_ADC_ConfigChannel+0x6d8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a88      	ldr	r2, [pc, #544]	@ (8003884 <HAL_ADC_ConfigChannel+0x8f4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d10e      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x6f6>
 8003668:	4885      	ldr	r0, [pc, #532]	@ (8003880 <HAL_ADC_ConfigChannel+0x8f0>)
 800366a:	f7ff f96f 	bl	800294c <LL_ADC_IsEnabled>
 800366e:	4604      	mov	r4, r0
 8003670:	4884      	ldr	r0, [pc, #528]	@ (8003884 <HAL_ADC_ConfigChannel+0x8f4>)
 8003672:	f7ff f96b 	bl	800294c <LL_ADC_IsEnabled>
 8003676:	4603      	mov	r3, r0
 8003678:	4323      	orrs	r3, r4
 800367a:	2b00      	cmp	r3, #0
 800367c:	bf0c      	ite	eq
 800367e:	2301      	moveq	r3, #1
 8003680:	2300      	movne	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	e008      	b.n	8003698 <HAL_ADC_ConfigChannel+0x708>
 8003686:	4882      	ldr	r0, [pc, #520]	@ (8003890 <HAL_ADC_ConfigChannel+0x900>)
 8003688:	f7ff f960 	bl	800294c <LL_ADC_IsEnabled>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	bf0c      	ite	eq
 8003692:	2301      	moveq	r3, #1
 8003694:	2300      	movne	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80a6 	beq.w	80037ea <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a7c      	ldr	r2, [pc, #496]	@ (8003894 <HAL_ADC_ConfigChannel+0x904>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d13c      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d136      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a71      	ldr	r2, [pc, #452]	@ (8003880 <HAL_ADC_ConfigChannel+0x8f0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00a      	beq.n	80036d4 <HAL_ADC_ConfigChannel+0x744>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a70      	ldr	r2, [pc, #448]	@ (8003884 <HAL_ADC_ConfigChannel+0x8f4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d005      	beq.n	80036d4 <HAL_ADC_ConfigChannel+0x744>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a70      	ldr	r2, [pc, #448]	@ (8003890 <HAL_ADC_ConfigChannel+0x900>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	f040 826e 	bne.w	8003bb0 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a69      	ldr	r2, [pc, #420]	@ (8003880 <HAL_ADC_ConfigChannel+0x8f0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_ADC_ConfigChannel+0x758>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a68      	ldr	r2, [pc, #416]	@ (8003884 <HAL_ADC_ConfigChannel+0x8f4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x75c>
 80036e8:	4a67      	ldr	r2, [pc, #412]	@ (8003888 <HAL_ADC_ConfigChannel+0x8f8>)
 80036ea:	e000      	b.n	80036ee <HAL_ADC_ConfigChannel+0x75e>
 80036ec:	4a67      	ldr	r2, [pc, #412]	@ (800388c <HAL_ADC_ConfigChannel+0x8fc>)
 80036ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036f6:	4619      	mov	r1, r3
 80036f8:	4610      	mov	r0, r2
 80036fa:	f7fe fe9a 	bl	8002432 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036fe:	4b66      	ldr	r3, [pc, #408]	@ (8003898 <HAL_ADC_ConfigChannel+0x908>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	099b      	lsrs	r3, r3, #6
 8003704:	4a65      	ldr	r2, [pc, #404]	@ (800389c <HAL_ADC_ConfigChannel+0x90c>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	3301      	adds	r3, #1
 800370e:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8003710:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003712:	e002      	b.n	800371a <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	3b01      	subs	r3, #1
 8003718:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f9      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003720:	e246      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a5e      	ldr	r2, [pc, #376]	@ (80038a0 <HAL_ADC_ConfigChannel+0x910>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d12b      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800372c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003730:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003734:	2b00      	cmp	r3, #0
 8003736:	d125      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a50      	ldr	r2, [pc, #320]	@ (8003880 <HAL_ADC_ConfigChannel+0x8f0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00a      	beq.n	8003758 <HAL_ADC_ConfigChannel+0x7c8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a4f      	ldr	r2, [pc, #316]	@ (8003884 <HAL_ADC_ConfigChannel+0x8f4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d005      	beq.n	8003758 <HAL_ADC_ConfigChannel+0x7c8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a4f      	ldr	r2, [pc, #316]	@ (8003890 <HAL_ADC_ConfigChannel+0x900>)
 8003752:	4293      	cmp	r3, r2
 8003754:	f040 822e 	bne.w	8003bb4 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a48      	ldr	r2, [pc, #288]	@ (8003880 <HAL_ADC_ConfigChannel+0x8f0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d004      	beq.n	800376c <HAL_ADC_ConfigChannel+0x7dc>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a47      	ldr	r2, [pc, #284]	@ (8003884 <HAL_ADC_ConfigChannel+0x8f4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x7e0>
 800376c:	4a46      	ldr	r2, [pc, #280]	@ (8003888 <HAL_ADC_ConfigChannel+0x8f8>)
 800376e:	e000      	b.n	8003772 <HAL_ADC_ConfigChannel+0x7e2>
 8003770:	4a46      	ldr	r2, [pc, #280]	@ (800388c <HAL_ADC_ConfigChannel+0x8fc>)
 8003772:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003776:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f7fe fe58 	bl	8002432 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003782:	e217      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a46      	ldr	r2, [pc, #280]	@ (80038a4 <HAL_ADC_ConfigChannel+0x914>)
 800378a:	4293      	cmp	r3, r2
 800378c:	f040 8213 	bne.w	8003bb6 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003790:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003794:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003798:	2b00      	cmp	r3, #0
 800379a:	f040 820c 	bne.w	8003bb6 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a37      	ldr	r2, [pc, #220]	@ (8003880 <HAL_ADC_ConfigChannel+0x8f0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00a      	beq.n	80037be <HAL_ADC_ConfigChannel+0x82e>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a35      	ldr	r2, [pc, #212]	@ (8003884 <HAL_ADC_ConfigChannel+0x8f4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d005      	beq.n	80037be <HAL_ADC_ConfigChannel+0x82e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a36      	ldr	r2, [pc, #216]	@ (8003890 <HAL_ADC_ConfigChannel+0x900>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	f040 81fc 	bne.w	8003bb6 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003880 <HAL_ADC_ConfigChannel+0x8f0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_ADC_ConfigChannel+0x842>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003884 <HAL_ADC_ConfigChannel+0x8f4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d101      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x846>
 80037d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003888 <HAL_ADC_ConfigChannel+0x8f8>)
 80037d4:	e000      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x848>
 80037d6:	4a2d      	ldr	r2, [pc, #180]	@ (800388c <HAL_ADC_ConfigChannel+0x8fc>)
 80037d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80037dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037e0:	4619      	mov	r1, r3
 80037e2:	4610      	mov	r0, r2
 80037e4:	f7fe fe25 	bl	8002432 <LL_ADC_SetCommonPathInternalCh>
 80037e8:	e1e5      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ee:	f043 0220 	orr.w	r2, r3, #32
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80037fc:	e1db      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b02      	cmp	r3, #2
 800380c:	f000 811b 	beq.w	8003a46 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003818:	d004      	beq.n	8003824 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800381e:	4a22      	ldr	r2, [pc, #136]	@ (80038a8 <HAL_ADC_ConfigChannel+0x918>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d107      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe ff6b 	bl	8002708 <LL_ADC_REG_SetSequencerChAdd>
 8003832:	e059      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	210f      	movs	r1, #15
 8003844:	fa01 f303 	lsl.w	r3, r1, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	401a      	ands	r2, r3
 800384c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003850:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d105      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x8d4>
 8003858:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800385c:	0e9b      	lsrs	r3, r3, #26
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	e027      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x924>
 8003864:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003868:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	fa93 f3a3 	rbit	r3, r3
 8003870:	60fb      	str	r3, [r7, #12]
  return result;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d117      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 800387c:	2320      	movs	r3, #32
 800387e:	e019      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x924>
 8003880:	42028000 	.word	0x42028000
 8003884:	42028100 	.word	0x42028100
 8003888:	42028300 	.word	0x42028300
 800388c:	46021300 	.word	0x46021300
 8003890:	46021000 	.word	0x46021000
 8003894:	ce080000 	.word	0xce080000
 8003898:	20000000 	.word	0x20000000
 800389c:	053e2d63 	.word	0x053e2d63
 80038a0:	ca040000 	.word	0xca040000
 80038a4:	80000001 	.word	0x80000001
 80038a8:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	6839      	ldr	r1, [r7, #0]
 80038b6:	6849      	ldr	r1, [r1, #4]
 80038b8:	f001 011f 	and.w	r1, r1, #31
 80038bc:	408b      	lsls	r3, r1
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	089b      	lsrs	r3, r3, #2
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d808      	bhi.n	80038e8 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038e2:	4619      	mov	r1, r3
 80038e4:	f7fe feb0 	bl	8002648 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	461a      	mov	r2, r3
 80038f2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80038f6:	f7fe ff53 	bl	80027a0 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f280 8159 	bge.w	8003bb6 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a9b      	ldr	r2, [pc, #620]	@ (8003b78 <HAL_ADC_ConfigChannel+0xbe8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_ADC_ConfigChannel+0x988>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a9a      	ldr	r2, [pc, #616]	@ (8003b7c <HAL_ADC_ConfigChannel+0xbec>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_ADC_ConfigChannel+0x98c>
 8003918:	4b99      	ldr	r3, [pc, #612]	@ (8003b80 <HAL_ADC_ConfigChannel+0xbf0>)
 800391a:	e000      	b.n	800391e <HAL_ADC_ConfigChannel+0x98e>
 800391c:	4b99      	ldr	r3, [pc, #612]	@ (8003b84 <HAL_ADC_ConfigChannel+0xbf4>)
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe fd9a 	bl	8002458 <LL_ADC_GetCommonPathInternalCh>
 8003924:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a96      	ldr	r2, [pc, #600]	@ (8003b88 <HAL_ADC_ConfigChannel+0xbf8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d12b      	bne.n	800398a <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003932:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003936:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d125      	bne.n	800398a <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a8d      	ldr	r2, [pc, #564]	@ (8003b78 <HAL_ADC_ConfigChannel+0xbe8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d004      	beq.n	8003952 <HAL_ADC_ConfigChannel+0x9c2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a8b      	ldr	r2, [pc, #556]	@ (8003b7c <HAL_ADC_ConfigChannel+0xbec>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x9c6>
 8003952:	4a8b      	ldr	r2, [pc, #556]	@ (8003b80 <HAL_ADC_ConfigChannel+0xbf0>)
 8003954:	e000      	b.n	8003958 <HAL_ADC_ConfigChannel+0x9c8>
 8003956:	4a8b      	ldr	r2, [pc, #556]	@ (8003b84 <HAL_ADC_ConfigChannel+0xbf4>)
 8003958:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800395c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003960:	4619      	mov	r1, r3
 8003962:	4610      	mov	r0, r2
 8003964:	f7fe fd65 	bl	8002432 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003968:	4b88      	ldr	r3, [pc, #544]	@ (8003b8c <HAL_ADC_ConfigChannel+0xbfc>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	099b      	lsrs	r3, r3, #6
 800396e:	4a88      	ldr	r2, [pc, #544]	@ (8003b90 <HAL_ADC_ConfigChannel+0xc00>)
 8003970:	fba2 2303 	umull	r2, r3, r2, r3
 8003974:	099b      	lsrs	r3, r3, #6
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800397a:	e002      	b.n	8003982 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	3b01      	subs	r3, #1
 8003980:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f9      	bne.n	800397c <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8003988:	e045      	b.n	8003a16 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a81      	ldr	r2, [pc, #516]	@ (8003b94 <HAL_ADC_ConfigChannel+0xc04>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d11b      	bne.n	80039cc <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003994:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800399c:	2b00      	cmp	r3, #0
 800399e:	d115      	bne.n	80039cc <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a74      	ldr	r2, [pc, #464]	@ (8003b78 <HAL_ADC_ConfigChannel+0xbe8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d004      	beq.n	80039b4 <HAL_ADC_ConfigChannel+0xa24>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a73      	ldr	r2, [pc, #460]	@ (8003b7c <HAL_ADC_ConfigChannel+0xbec>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d101      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0xa28>
 80039b4:	4a72      	ldr	r2, [pc, #456]	@ (8003b80 <HAL_ADC_ConfigChannel+0xbf0>)
 80039b6:	e000      	b.n	80039ba <HAL_ADC_ConfigChannel+0xa2a>
 80039b8:	4a72      	ldr	r2, [pc, #456]	@ (8003b84 <HAL_ADC_ConfigChannel+0xbf4>)
 80039ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039c2:	4619      	mov	r1, r3
 80039c4:	4610      	mov	r0, r2
 80039c6:	f7fe fd34 	bl	8002432 <LL_ADC_SetCommonPathInternalCh>
 80039ca:	e024      	b.n	8003a16 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a71      	ldr	r2, [pc, #452]	@ (8003b98 <HAL_ADC_ConfigChannel+0xc08>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d11f      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d115      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a64      	ldr	r2, [pc, #400]	@ (8003b78 <HAL_ADC_ConfigChannel+0xbe8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d004      	beq.n	80039f6 <HAL_ADC_ConfigChannel+0xa66>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a62      	ldr	r2, [pc, #392]	@ (8003b7c <HAL_ADC_ConfigChannel+0xbec>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d101      	bne.n	80039fa <HAL_ADC_ConfigChannel+0xa6a>
 80039f6:	4a62      	ldr	r2, [pc, #392]	@ (8003b80 <HAL_ADC_ConfigChannel+0xbf0>)
 80039f8:	e000      	b.n	80039fc <HAL_ADC_ConfigChannel+0xa6c>
 80039fa:	4a62      	ldr	r2, [pc, #392]	@ (8003b84 <HAL_ADC_ConfigChannel+0xbf4>)
 80039fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f7fe fd13 	bl	8002432 <LL_ADC_SetCommonPathInternalCh>
 8003a0c:	e003      	b.n	8003a16 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a62      	ldr	r2, [pc, #392]	@ (8003b9c <HAL_ADC_ConfigChannel+0xc0c>)
 8003a14:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a61      	ldr	r2, [pc, #388]	@ (8003ba0 <HAL_ADC_ConfigChannel+0xc10>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	f040 80ca 	bne.w	8003bb6 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f040 80c3 	bne.w	8003bb6 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0201 	orr.w	r2, r2, #1
 8003a40:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8003a44:	e0b7      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a4e:	d004      	beq.n	8003a5a <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003a54:	4a53      	ldr	r2, [pc, #332]	@ (8003ba4 <HAL_ADC_ConfigChannel+0xc14>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d106      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fe83 	bl	800276e <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f280 80a2 	bge.w	8003bb6 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a40      	ldr	r2, [pc, #256]	@ (8003b78 <HAL_ADC_ConfigChannel+0xbe8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d004      	beq.n	8003a86 <HAL_ADC_ConfigChannel+0xaf6>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a3e      	ldr	r2, [pc, #248]	@ (8003b7c <HAL_ADC_ConfigChannel+0xbec>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d101      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0xafa>
 8003a86:	4b3e      	ldr	r3, [pc, #248]	@ (8003b80 <HAL_ADC_ConfigChannel+0xbf0>)
 8003a88:	e000      	b.n	8003a8c <HAL_ADC_ConfigChannel+0xafc>
 8003a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b84 <HAL_ADC_ConfigChannel+0xbf4>)
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fe fce3 	bl	8002458 <LL_ADC_GetCommonPathInternalCh>
 8003a92:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a43      	ldr	r2, [pc, #268]	@ (8003ba8 <HAL_ADC_ConfigChannel+0xc18>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d115      	bne.n	8003acc <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a34      	ldr	r2, [pc, #208]	@ (8003b78 <HAL_ADC_ConfigChannel+0xbe8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_ADC_ConfigChannel+0xb24>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a33      	ldr	r2, [pc, #204]	@ (8003b7c <HAL_ADC_ConfigChannel+0xbec>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d101      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0xb28>
 8003ab4:	4a32      	ldr	r2, [pc, #200]	@ (8003b80 <HAL_ADC_ConfigChannel+0xbf0>)
 8003ab6:	e000      	b.n	8003aba <HAL_ADC_ConfigChannel+0xb2a>
 8003ab8:	4a32      	ldr	r2, [pc, #200]	@ (8003b84 <HAL_ADC_ConfigChannel+0xbf4>)
 8003aba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003abe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	f7fe fcb4 	bl	8002432 <LL_ADC_SetCommonPathInternalCh>
 8003aca:	e034      	b.n	8003b36 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a36      	ldr	r2, [pc, #216]	@ (8003bac <HAL_ADC_ConfigChannel+0xc1c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d115      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a27      	ldr	r2, [pc, #156]	@ (8003b78 <HAL_ADC_ConfigChannel+0xbe8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d004      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xb5a>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a25      	ldr	r2, [pc, #148]	@ (8003b7c <HAL_ADC_ConfigChannel+0xbec>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_ConfigChannel+0xb5e>
 8003aea:	4a25      	ldr	r2, [pc, #148]	@ (8003b80 <HAL_ADC_ConfigChannel+0xbf0>)
 8003aec:	e000      	b.n	8003af0 <HAL_ADC_ConfigChannel+0xb60>
 8003aee:	4a25      	ldr	r2, [pc, #148]	@ (8003b84 <HAL_ADC_ConfigChannel+0xbf4>)
 8003af0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003af4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003af8:	4619      	mov	r1, r3
 8003afa:	4610      	mov	r0, r2
 8003afc:	f7fe fc99 	bl	8002432 <LL_ADC_SetCommonPathInternalCh>
 8003b00:	e019      	b.n	8003b36 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a24      	ldr	r2, [pc, #144]	@ (8003b98 <HAL_ADC_ConfigChannel+0xc08>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d114      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a19      	ldr	r2, [pc, #100]	@ (8003b78 <HAL_ADC_ConfigChannel+0xbe8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d004      	beq.n	8003b20 <HAL_ADC_ConfigChannel+0xb90>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a18      	ldr	r2, [pc, #96]	@ (8003b7c <HAL_ADC_ConfigChannel+0xbec>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d101      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0xb94>
 8003b20:	4a17      	ldr	r2, [pc, #92]	@ (8003b80 <HAL_ADC_ConfigChannel+0xbf0>)
 8003b22:	e000      	b.n	8003b26 <HAL_ADC_ConfigChannel+0xb96>
 8003b24:	4a17      	ldr	r2, [pc, #92]	@ (8003b84 <HAL_ADC_ConfigChannel+0xbf4>)
 8003b26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b2a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f7fe fc7e 	bl	8002432 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a19      	ldr	r2, [pc, #100]	@ (8003ba0 <HAL_ADC_ConfigChannel+0xc10>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d13a      	bne.n	8003bb6 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d134      	bne.n	8003bb6 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0201 	orr.w	r2, r2, #1
 8003b5c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8003b60:	e029      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b66:	f043 0220 	orr.w	r2, r3, #32
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003b74:	e01f      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0xc26>
 8003b76:	bf00      	nop
 8003b78:	42028000 	.word	0x42028000
 8003b7c:	42028100 	.word	0x42028100
 8003b80:	42028300 	.word	0x42028300
 8003b84:	46021300 	.word	0x46021300
 8003b88:	b6002000 	.word	0xb6002000
 8003b8c:	20000000 	.word	0x20000000
 8003b90:	053e2d63 	.word	0x053e2d63
 8003b94:	ba004000 	.word	0xba004000
 8003b98:	80000001 	.word	0x80000001
 8003b9c:	b2001000 	.word	0xb2001000
 8003ba0:	d7200000 	.word	0xd7200000
 8003ba4:	80000010 	.word	0x80000010
 8003ba8:	ce080000 	.word	0xce080000
 8003bac:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bb0:	bf00      	nop
 8003bb2:	e000      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bb4:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8003bbe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	37dc      	adds	r7, #220	@ 0xdc
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd90      	pop	{r4, r7, pc}
 8003bca:	bf00      	nop

08003bcc <__NVIC_SetPriorityGrouping>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c10 <__NVIC_SetPriorityGrouping+0x44>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003be8:	4013      	ands	r3, r2
 8003bea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bfe:	4a04      	ldr	r2, [pc, #16]	@ (8003c10 <__NVIC_SetPriorityGrouping+0x44>)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	60d3      	str	r3, [r2, #12]
}
 8003c04:	bf00      	nop
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	e000ed00 	.word	0xe000ed00

08003c14 <__NVIC_GetPriorityGrouping>:
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c18:	4b04      	ldr	r3, [pc, #16]	@ (8003c2c <__NVIC_GetPriorityGrouping+0x18>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	f003 0307 	and.w	r3, r3, #7
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	e000ed00 	.word	0xe000ed00

08003c30 <__NVIC_EnableIRQ>:
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	db0b      	blt.n	8003c5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	f003 021f 	and.w	r2, r3, #31
 8003c48:	4907      	ldr	r1, [pc, #28]	@ (8003c68 <__NVIC_EnableIRQ+0x38>)
 8003c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	2001      	movs	r0, #1
 8003c52:	fa00 f202 	lsl.w	r2, r0, r2
 8003c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	e000e100 	.word	0xe000e100

08003c6c <__NVIC_SetPriority>:
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	6039      	str	r1, [r7, #0]
 8003c76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	db0a      	blt.n	8003c96 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	490c      	ldr	r1, [pc, #48]	@ (8003cb8 <__NVIC_SetPriority+0x4c>)
 8003c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c8a:	0112      	lsls	r2, r2, #4
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	440b      	add	r3, r1
 8003c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003c94:	e00a      	b.n	8003cac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	4908      	ldr	r1, [pc, #32]	@ (8003cbc <__NVIC_SetPriority+0x50>)
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	3b04      	subs	r3, #4
 8003ca4:	0112      	lsls	r2, r2, #4
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	440b      	add	r3, r1
 8003caa:	761a      	strb	r2, [r3, #24]
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	e000e100 	.word	0xe000e100
 8003cbc:	e000ed00 	.word	0xe000ed00

08003cc0 <NVIC_EncodePriority>:
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b089      	sub	sp, #36	@ 0x24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f1c3 0307 	rsb	r3, r3, #7
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	bf28      	it	cs
 8003cde:	2304      	movcs	r3, #4
 8003ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	2b06      	cmp	r3, #6
 8003ce8:	d902      	bls.n	8003cf0 <NVIC_EncodePriority+0x30>
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	3b03      	subs	r3, #3
 8003cee:	e000      	b.n	8003cf2 <NVIC_EncodePriority+0x32>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	401a      	ands	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d08:	f04f 31ff 	mov.w	r1, #4294967295
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d12:	43d9      	mvns	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d18:	4313      	orrs	r3, r2
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3724      	adds	r7, #36	@ 0x24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff ff4c 	bl	8003bcc <__NVIC_SetPriorityGrouping>
}
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d4a:	f7ff ff63 	bl	8003c14 <__NVIC_GetPriorityGrouping>
 8003d4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	6978      	ldr	r0, [r7, #20]
 8003d56:	f7ff ffb3 	bl	8003cc0 <NVIC_EncodePriority>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d60:	4611      	mov	r1, r2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff ff82 	bl	8003c6c <__NVIC_SetPriority>
}
 8003d68:	bf00      	nop
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff ff56 	bl	8003c30 <__NVIC_EnableIRQ>
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d9c:	d301      	bcc.n	8003da2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e00d      	b.n	8003dbe <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003da2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dcc <HAL_SYSTICK_Config+0x40>)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003daa:	4b08      	ldr	r3, [pc, #32]	@ (8003dcc <HAL_SYSTICK_Config+0x40>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003db0:	4b06      	ldr	r3, [pc, #24]	@ (8003dcc <HAL_SYSTICK_Config+0x40>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a05      	ldr	r2, [pc, #20]	@ (8003dcc <HAL_SYSTICK_Config+0x40>)
 8003db6:	f043 0303 	orr.w	r3, r3, #3
 8003dba:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	e000e010 	.word	0xe000e010

08003dd0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d844      	bhi.n	8003e68 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003dde:	a201      	add	r2, pc, #4	@ (adr r2, 8003de4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de4:	08003e07 	.word	0x08003e07
 8003de8:	08003e25 	.word	0x08003e25
 8003dec:	08003e47 	.word	0x08003e47
 8003df0:	08003e69 	.word	0x08003e69
 8003df4:	08003df9 	.word	0x08003df9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003df8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e78 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8003e78 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dfe:	f043 0304 	orr.w	r3, r3, #4
 8003e02:	6013      	str	r3, [r2, #0]
      break;
 8003e04:	e031      	b.n	8003e6a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003e06:	4b1c      	ldr	r3, [pc, #112]	@ (8003e78 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8003e78 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003e0c:	f023 0304 	bic.w	r3, r3, #4
 8003e10:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8003e12:	4b1a      	ldr	r3, [pc, #104]	@ (8003e7c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e18:	4a18      	ldr	r2, [pc, #96]	@ (8003e7c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003e1a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003e22:	e022      	b.n	8003e6a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003e24:	4b14      	ldr	r3, [pc, #80]	@ (8003e78 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a13      	ldr	r2, [pc, #76]	@ (8003e78 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003e2a:	f023 0304 	bic.w	r3, r3, #4
 8003e2e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8003e30:	4b12      	ldr	r3, [pc, #72]	@ (8003e7c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e36:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003e3a:	4a10      	ldr	r2, [pc, #64]	@ (8003e7c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003e3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003e44:	e011      	b.n	8003e6a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003e46:	4b0c      	ldr	r3, [pc, #48]	@ (8003e78 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a0b      	ldr	r2, [pc, #44]	@ (8003e78 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003e4c:	f023 0304 	bic.w	r3, r3, #4
 8003e50:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8003e52:	4b0a      	ldr	r3, [pc, #40]	@ (8003e7c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e58:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003e5c:	4a07      	ldr	r2, [pc, #28]	@ (8003e7c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003e5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003e66:	e000      	b.n	8003e6a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003e68:	bf00      	nop
  }
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	e000e010 	.word	0xe000e010
 8003e7c:	46020c00 	.word	0x46020c00

08003e80 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003e86:	4b19      	ldr	r3, [pc, #100]	@ (8003eec <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003e92:	2304      	movs	r3, #4
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	e021      	b.n	8003edc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8003e98:	4b15      	ldr	r3, [pc, #84]	@ (8003ef0 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8003e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e9e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003ea2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003eaa:	d011      	beq.n	8003ed0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003eb2:	d810      	bhi.n	8003ed6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ec0:	d003      	beq.n	8003eca <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003ec2:	e008      	b.n	8003ed6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	607b      	str	r3, [r7, #4]
        break;
 8003ec8:	e008      	b.n	8003edc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	607b      	str	r3, [r7, #4]
        break;
 8003ece:	e005      	b.n	8003edc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	607b      	str	r3, [r7, #4]
        break;
 8003ed4:	e002      	b.n	8003edc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	607b      	str	r3, [r7, #4]
        break;
 8003eda:	bf00      	nop
    }
  }
  return systick_source;
 8003edc:	687b      	ldr	r3, [r7, #4]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	e000e010 	.word	0xe000e010
 8003ef0:	46020c00 	.word	0x46020c00

08003ef4 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
#if defined(SAES)
  uint32_t tickstart;
#endif /* SAES */

  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e0a7      	b.n	8004056 <HAL_CRYP_Init+0x162>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fd fdd2 	bl	8001ac4 <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  if (hcryp->Instance == AES)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a4e      	ldr	r2, [pc, #312]	@ (8004060 <HAL_CRYP_Init+0x16c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d116      	bne.n	8003f58 <HAL_CRYP_Init+0x64>
  {
    /* Set the key size, data type and Algorithm */
    cr_value = (uint32_t)(hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm | hcryp->Init.KeyMode);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm and mode */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, cr_value);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	4b46      	ldr	r3, [pc, #280]	@ (8004064 <HAL_CRYP_Init+0x170>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	430b      	orrs	r3, r1
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	e070      	b.n	800403a <HAL_CRYP_Init+0x146>
  }
  else
  {
    /* SAES is initializing, fetching random number from the RNG */
    tickstart = HAL_GetTick();
 8003f58:	f7fe fa28 	bl	80023ac <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8003f5e:	e01e      	b.n	8003f9e <HAL_CRYP_Init+0xaa>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8003f60:	f7fe fa24 	bl	80023ac <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b52      	cmp	r3, #82	@ 0x52
 8003f6c:	d917      	bls.n	8003f9e <HAL_CRYP_Init+0xaa>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0201 	bic.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f82:	f043 0210 	orr.w	r2, r3, #16
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e05b      	b.n	8004056 <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d0d9      	beq.n	8003f60 <HAL_CRYP_Init+0x6c>
      }
    }
    /* SAES is initializing, no random number fetching error flagged */
    tickstart = HAL_GetTick();
 8003fac:	f7fe f9fe 	bl	80023ac <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8003fb2:	e01e      	b.n	8003ff2 <HAL_CRYP_Init+0xfe>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8003fb4:	f7fe f9fa 	bl	80023ac <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b52      	cmp	r3, #82	@ 0x52
 8003fc0:	d917      	bls.n	8003ff2 <HAL_CRYP_Init+0xfe>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0201 	bic.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_RNG;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e031      	b.n	8004056 <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d0d8      	beq.n	8003fb4 <HAL_CRYP_Init+0xc0>
      }
    }
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8004016:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8004022:	4313      	orrs	r3, r2
 8004024:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm, Key selection and key protection */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD | AES_CR_KEYSEL |
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	4b0e      	ldr	r3, [pc, #56]	@ (8004068 <HAL_CRYP_Init+0x174>)
 800402e:	4013      	ands	r3, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	430b      	orrs	r3, r1
 8004038:	6013      	str	r3, [r2, #0]
               AES_CR_KEYPROT, cr_value);
  }
  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	64da      	str	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	420c0000 	.word	0x420c0000
 8004064:	fcfaff99 	.word	0xfcfaff99
 8004068:	8cf2ff99 	.word	0x8cf2ff99

0800406c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800406c:	b480      	push	{r7}
 800406e:	b089      	sub	sp, #36	@ 0x24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800407e:	e1ba      	b.n	80043f6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	2101      	movs	r1, #1
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	fa01 f303 	lsl.w	r3, r1, r3
 800408c:	4013      	ands	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 81aa 	beq.w	80043f0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a55      	ldr	r2, [pc, #340]	@ (80041f4 <HAL_GPIO_Init+0x188>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d15d      	bne.n	8004160 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80040aa:	2201      	movs	r2, #1
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	43db      	mvns	r3, r3
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	4013      	ands	r3, r2
 80040b8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f003 0201 	and.w	r2, r3, #1
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80040d4:	4a48      	ldr	r2, [pc, #288]	@ (80041f8 <HAL_GPIO_Init+0x18c>)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040dc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80040de:	4a46      	ldr	r2, [pc, #280]	@ (80041f8 <HAL_GPIO_Init+0x18c>)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4413      	add	r3, r2
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	08da      	lsrs	r2, r3, #3
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	3208      	adds	r2, #8
 80040f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	220f      	movs	r2, #15
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43db      	mvns	r3, r3
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	4013      	ands	r3, r2
 800410c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	220b      	movs	r2, #11
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	4313      	orrs	r3, r2
 8004120:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	08da      	lsrs	r2, r3, #3
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	3208      	adds	r2, #8
 800412a:	69f9      	ldr	r1, [r7, #28]
 800412c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	2203      	movs	r2, #3
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	43db      	mvns	r3, r3
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	4013      	ands	r3, r2
 8004146:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	2202      	movs	r2, #2
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	4313      	orrs	r3, r2
 8004156:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e067      	b.n	8004230 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_Init+0x104>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b12      	cmp	r3, #18
 800416e:	d145      	bne.n	80041fc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	08da      	lsrs	r2, r3, #3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3208      	adds	r2, #8
 8004178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800417c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	220f      	movs	r2, #15
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	4013      	ands	r3, r2
 8004192:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f003 020f 	and.w	r2, r3, #15
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	08da      	lsrs	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3208      	adds	r2, #8
 80041b6:	69f9      	ldr	r1, [r7, #28]
 80041b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	2203      	movs	r2, #3
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 0203 	and.w	r2, r3, #3
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	e01e      	b.n	8004230 <HAL_GPIO_Init+0x1c4>
 80041f2:	bf00      	nop
 80041f4:	46020000 	.word	0x46020000
 80041f8:	0800eb48 	.word	0x0800eb48
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	2203      	movs	r2, #3
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	4013      	ands	r3, r2
 8004212:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f003 0203 	and.w	r2, r3, #3
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	4313      	orrs	r3, r2
 8004228:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d00b      	beq.n	8004250 <HAL_GPIO_Init+0x1e4>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d007      	beq.n	8004250 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004244:	2b11      	cmp	r3, #17
 8004246:	d003      	beq.n	8004250 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b12      	cmp	r3, #18
 800424e:	d130      	bne.n	80042b2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	2203      	movs	r2, #3
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	4013      	ands	r3, r2
 8004266:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	4313      	orrs	r3, r2
 8004278:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004286:	2201      	movs	r2, #1
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	43db      	mvns	r3, r3
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	4013      	ands	r3, r2
 8004294:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	f003 0201 	and.w	r2, r3, #1
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	69fa      	ldr	r2, [r7, #28]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d017      	beq.n	80042ea <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	2203      	movs	r2, #3
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	4013      	ands	r3, r2
 80042d0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d07c      	beq.n	80043f0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80042f6:	4a47      	ldr	r2, [pc, #284]	@ (8004414 <HAL_GPIO_Init+0x3a8>)
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	089b      	lsrs	r3, r3, #2
 80042fc:	3318      	adds	r3, #24
 80042fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004302:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	220f      	movs	r2, #15
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	4013      	ands	r3, r2
 8004318:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	0a9a      	lsrs	r2, r3, #10
 800431e:	4b3e      	ldr	r3, [pc, #248]	@ (8004418 <HAL_GPIO_Init+0x3ac>)
 8004320:	4013      	ands	r3, r2
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	f002 0203 	and.w	r2, r2, #3
 8004328:	00d2      	lsls	r2, r2, #3
 800432a:	4093      	lsls	r3, r2
 800432c:	69fa      	ldr	r2, [r7, #28]
 800432e:	4313      	orrs	r3, r2
 8004330:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004332:	4938      	ldr	r1, [pc, #224]	@ (8004414 <HAL_GPIO_Init+0x3a8>)
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	089b      	lsrs	r3, r3, #2
 8004338:	3318      	adds	r3, #24
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004340:	4b34      	ldr	r3, [pc, #208]	@ (8004414 <HAL_GPIO_Init+0x3a8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	43db      	mvns	r3, r3
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	4013      	ands	r3, r2
 800434e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800435c:	69fa      	ldr	r2, [r7, #28]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004364:	4a2b      	ldr	r2, [pc, #172]	@ (8004414 <HAL_GPIO_Init+0x3a8>)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800436a:	4b2a      	ldr	r3, [pc, #168]	@ (8004414 <HAL_GPIO_Init+0x3a8>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	43db      	mvns	r3, r3
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	4013      	ands	r3, r2
 8004378:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800438e:	4a21      	ldr	r2, [pc, #132]	@ (8004414 <HAL_GPIO_Init+0x3a8>)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004394:	4b1f      	ldr	r3, [pc, #124]	@ (8004414 <HAL_GPIO_Init+0x3a8>)
 8004396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800439a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	43db      	mvns	r3, r3
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	4013      	ands	r3, r2
 80043a4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80043b2:	69fa      	ldr	r2, [r7, #28]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80043ba:	4a16      	ldr	r2, [pc, #88]	@ (8004414 <HAL_GPIO_Init+0x3a8>)
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80043c2:	4b14      	ldr	r3, [pc, #80]	@ (8004414 <HAL_GPIO_Init+0x3a8>)
 80043c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	43db      	mvns	r3, r3
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	4013      	ands	r3, r2
 80043d2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80043e0:	69fa      	ldr	r2, [r7, #28]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80043e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004414 <HAL_GPIO_Init+0x3a8>)
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	3301      	adds	r3, #1
 80043f4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	f47f ae3d 	bne.w	8004080 <HAL_GPIO_Init+0x14>
  }
}
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	3724      	adds	r7, #36	@ 0x24
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	46022000 	.word	0x46022000
 8004418:	002f7f7f 	.word	0x002f7f7f

0800441c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	807b      	strh	r3, [r7, #2]
 8004428:	4613      	mov	r3, r2
 800442a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800442c:	787b      	ldrb	r3, [r7, #1]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004432:	887a      	ldrh	r2, [r7, #2]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004438:	e002      	b.n	8004440 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800443a:	887a      	ldrh	r2, [r7, #2]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800445e:	887a      	ldrh	r2, [r7, #2]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4013      	ands	r3, r2
 8004464:	041a      	lsls	r2, r3, #16
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	43d9      	mvns	r1, r3
 800446a:	887b      	ldrh	r3, [r7, #2]
 800446c:	400b      	ands	r3, r1
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	619a      	str	r2, [r3, #24]
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800448a:	4b0f      	ldr	r3, [pc, #60]	@ (80044c8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	4013      	ands	r3, r2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d006      	beq.n	80044a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004496:	4a0c      	ldr	r2, [pc, #48]	@ (80044c8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fc fcb4 	bl	8000e0c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80044a4:	4b08      	ldr	r3, [pc, #32]	@ (80044c8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	88fb      	ldrh	r3, [r7, #6]
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d006      	beq.n	80044be <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80044b0:	4a05      	ldr	r2, [pc, #20]	@ (80044c8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 f807 	bl	80044cc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	46022000 	.word	0x46022000

080044cc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e08d      	b.n	8004610 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d106      	bne.n	800450e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7fd fafd 	bl	8001b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2224      	movs	r2, #36	@ 0x24
 8004512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0201 	bic.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004532:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004542:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d107      	bne.n	800455c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004558:	609a      	str	r2, [r3, #8]
 800455a:	e006      	b.n	800456a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004568:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d108      	bne.n	8004584 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	e007      	b.n	8004594 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004592:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045a6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69d9      	ldr	r1, [r3, #28]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1a      	ldr	r2, [r3, #32]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 0201 	orr.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b20      	cmp	r3, #32
 800462c:	d138      	bne.n	80046a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004638:	2302      	movs	r3, #2
 800463a:	e032      	b.n	80046a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2224      	movs	r2, #36	@ 0x24
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0201 	bic.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800466a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6819      	ldr	r1, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0201 	orr.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	e000      	b.n	80046a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
  }
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b085      	sub	sp, #20
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d139      	bne.n	8004738 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e033      	b.n	800473a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2224      	movs	r2, #36	@ 0x24
 80046de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0201 	bic.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004700:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004754:	4b0b      	ldr	r3, [pc, #44]	@ (8004784 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
 8004764:	e007      	b.n	8004776 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004766:	4b07      	ldr	r3, [pc, #28]	@ (8004784 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f023 0204 	bic.w	r2, r3, #4
 800476e:	4905      	ldr	r1, [pc, #20]	@ (8004784 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004776:	7bfb      	ldrb	r3, [r7, #15]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	40030400 	.word	0x40030400

08004788 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800478c:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <HAL_ICACHE_Enable+0x1c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a04      	ldr	r2, [pc, #16]	@ (80047a4 <HAL_ICACHE_Enable+0x1c>)
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	40030400 	.word	0x40030400

080047a8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80047b0:	4b39      	ldr	r3, [pc, #228]	@ (8004898 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047b8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d10b      	bne.n	80047da <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c8:	d905      	bls.n	80047d6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80047ca:	4b33      	ldr	r3, [pc, #204]	@ (8004898 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	4a32      	ldr	r2, [pc, #200]	@ (8004898 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047d4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	e057      	b.n	800488a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047e0:	d90a      	bls.n	80047f8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80047e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004898 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004898 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047f4:	60d3      	str	r3, [r2, #12]
 80047f6:	e007      	b.n	8004808 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80047f8:	4b27      	ldr	r3, [pc, #156]	@ (8004898 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004800:	4925      	ldr	r1, [pc, #148]	@ (8004898 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4313      	orrs	r3, r2
 8004806:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004808:	4b24      	ldr	r3, [pc, #144]	@ (800489c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a24      	ldr	r2, [pc, #144]	@ (80048a0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	099b      	lsrs	r3, r3, #6
 8004814:	2232      	movs	r2, #50	@ 0x32
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	4a21      	ldr	r2, [pc, #132]	@ (80048a0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800481c:	fba2 2303 	umull	r2, r3, r2, r3
 8004820:	099b      	lsrs	r3, r3, #6
 8004822:	3301      	adds	r3, #1
 8004824:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004826:	e002      	b.n	800482e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3b01      	subs	r3, #1
 800482c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800482e:	4b1a      	ldr	r3, [pc, #104]	@ (8004898 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d102      	bne.n	8004840 <HAL_PWREx_ControlVoltageScaling+0x98>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1f3      	bne.n	8004828 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01b      	beq.n	800487e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004846:	4b15      	ldr	r3, [pc, #84]	@ (800489c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a15      	ldr	r2, [pc, #84]	@ (80048a0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	099b      	lsrs	r3, r3, #6
 8004852:	2232      	movs	r2, #50	@ 0x32
 8004854:	fb02 f303 	mul.w	r3, r2, r3
 8004858:	4a11      	ldr	r2, [pc, #68]	@ (80048a0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800485a:	fba2 2303 	umull	r2, r3, r2, r3
 800485e:	099b      	lsrs	r3, r3, #6
 8004860:	3301      	adds	r3, #1
 8004862:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004864:	e002      	b.n	800486c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3b01      	subs	r3, #1
 800486a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800486c:	4b0a      	ldr	r3, [pc, #40]	@ (8004898 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800486e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004870:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d102      	bne.n	800487e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f3      	bne.n	8004866 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e000      	b.n	800488a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	46020800 	.word	0x46020800
 800489c:	20000000 	.word	0x20000000
 80048a0:	10624dd3 	.word	0x10624dd3

080048a4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80048a8:	4b04      	ldr	r3, [pc, #16]	@ (80048bc <HAL_PWREx_GetVoltageRange+0x18>)
 80048aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	46020800 	.word	0x46020800

080048c0 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80048c4:	4b05      	ldr	r3, [pc, #20]	@ (80048dc <HAL_PWREx_EnableVddA+0x1c>)
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	4a04      	ldr	r2, [pc, #16]	@ (80048dc <HAL_PWREx_EnableVddA+0x1c>)
 80048ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048ce:	6113      	str	r3, [r2, #16]
}
 80048d0:	bf00      	nop
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	46020800 	.word	0x46020800

080048e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08e      	sub	sp, #56	@ 0x38
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d102      	bne.n	80048fa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f000 bec8 	b.w	800568a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048fa:	4b99      	ldr	r3, [pc, #612]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004904:	4b96      	ldr	r3, [pc, #600]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 816c 	beq.w	8004bf4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491e:	2b00      	cmp	r3, #0
 8004920:	d007      	beq.n	8004932 <HAL_RCC_OscConfig+0x52>
 8004922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004924:	2b0c      	cmp	r3, #12
 8004926:	f040 80de 	bne.w	8004ae6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800492a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800492c:	2b01      	cmp	r3, #1
 800492e:	f040 80da 	bne.w	8004ae6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d102      	bne.n	8004940 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f000 bea5 	b.w	800568a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004944:	4b86      	ldr	r3, [pc, #536]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d004      	beq.n	800495a <HAL_RCC_OscConfig+0x7a>
 8004950:	4b83      	ldr	r3, [pc, #524]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004958:	e005      	b.n	8004966 <HAL_RCC_OscConfig+0x86>
 800495a:	4b81      	ldr	r3, [pc, #516]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 800495c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004960:	041b      	lsls	r3, r3, #16
 8004962:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004966:	4293      	cmp	r3, r2
 8004968:	d255      	bcs.n	8004a16 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800496a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10a      	bne.n	8004986 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	4618      	mov	r0, r3
 8004976:	f001 f9d9 	bl	8005d2c <RCC_SetFlashLatencyFromMSIRange>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	f000 be82 	b.w	800568a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004986:	4b76      	ldr	r3, [pc, #472]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	4a75      	ldr	r2, [pc, #468]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 800498c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004990:	6093      	str	r3, [r2, #8]
 8004992:	4b73      	ldr	r3, [pc, #460]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499e:	4970      	ldr	r1, [pc, #448]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80049ac:	d309      	bcc.n	80049c2 <HAL_RCC_OscConfig+0xe2>
 80049ae:	4b6c      	ldr	r3, [pc, #432]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f023 021f 	bic.w	r2, r3, #31
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	4969      	ldr	r1, [pc, #420]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	60cb      	str	r3, [r1, #12]
 80049c0:	e07e      	b.n	8004ac0 <HAL_RCC_OscConfig+0x1e0>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	da0a      	bge.n	80049e0 <HAL_RCC_OscConfig+0x100>
 80049ca:	4b65      	ldr	r3, [pc, #404]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	015b      	lsls	r3, r3, #5
 80049d8:	4961      	ldr	r1, [pc, #388]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	60cb      	str	r3, [r1, #12]
 80049de:	e06f      	b.n	8004ac0 <HAL_RCC_OscConfig+0x1e0>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e8:	d30a      	bcc.n	8004a00 <HAL_RCC_OscConfig+0x120>
 80049ea:	4b5d      	ldr	r3, [pc, #372]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	029b      	lsls	r3, r3, #10
 80049f8:	4959      	ldr	r1, [pc, #356]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60cb      	str	r3, [r1, #12]
 80049fe:	e05f      	b.n	8004ac0 <HAL_RCC_OscConfig+0x1e0>
 8004a00:	4b57      	ldr	r3, [pc, #348]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	03db      	lsls	r3, r3, #15
 8004a0e:	4954      	ldr	r1, [pc, #336]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60cb      	str	r3, [r1, #12]
 8004a14:	e054      	b.n	8004ac0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004a16:	4b52      	ldr	r3, [pc, #328]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	4a51      	ldr	r2, [pc, #324]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004a1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a20:	6093      	str	r3, [r2, #8]
 8004a22:	4b4f      	ldr	r3, [pc, #316]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2e:	494c      	ldr	r1, [pc, #304]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a38:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004a3c:	d309      	bcc.n	8004a52 <HAL_RCC_OscConfig+0x172>
 8004a3e:	4b48      	ldr	r3, [pc, #288]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f023 021f 	bic.w	r2, r3, #31
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	4945      	ldr	r1, [pc, #276]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60cb      	str	r3, [r1, #12]
 8004a50:	e028      	b.n	8004aa4 <HAL_RCC_OscConfig+0x1c4>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da0a      	bge.n	8004a70 <HAL_RCC_OscConfig+0x190>
 8004a5a:	4b41      	ldr	r3, [pc, #260]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	015b      	lsls	r3, r3, #5
 8004a68:	493d      	ldr	r1, [pc, #244]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60cb      	str	r3, [r1, #12]
 8004a6e:	e019      	b.n	8004aa4 <HAL_RCC_OscConfig+0x1c4>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a78:	d30a      	bcc.n	8004a90 <HAL_RCC_OscConfig+0x1b0>
 8004a7a:	4b39      	ldr	r3, [pc, #228]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	029b      	lsls	r3, r3, #10
 8004a88:	4935      	ldr	r1, [pc, #212]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60cb      	str	r3, [r1, #12]
 8004a8e:	e009      	b.n	8004aa4 <HAL_RCC_OscConfig+0x1c4>
 8004a90:	4b33      	ldr	r3, [pc, #204]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	03db      	lsls	r3, r3, #15
 8004a9e:	4930      	ldr	r1, [pc, #192]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10a      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f001 f93c 	bl	8005d2c <RCC_SetFlashLatencyFromMSIRange>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	f000 bde5 	b.w	800568a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004ac0:	f001 f8de 	bl	8005c80 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ac4:	4b27      	ldr	r3, [pc, #156]	@ (8004b64 <HAL_RCC_OscConfig+0x284>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fd fbe5 	bl	8002298 <HAL_InitTick>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 808a 	beq.w	8004bf2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004ade:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ae2:	f000 bdd2 	b.w	800568a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d066      	beq.n	8004bbc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004aee:	4b1c      	ldr	r3, [pc, #112]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1b      	ldr	r2, [pc, #108]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004afa:	f7fd fc57 	bl	80023ac <HAL_GetTick>
 8004afe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004b00:	e009      	b.n	8004b16 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b02:	f7fd fc53 	bl	80023ac <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d902      	bls.n	8004b16 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	f000 bdba 	b.w	800568a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004b16:	4b12      	ldr	r3, [pc, #72]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0ef      	beq.n	8004b02 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004b22:	4b0f      	ldr	r3, [pc, #60]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	4a0e      	ldr	r2, [pc, #56]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004b28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b2c:	6093      	str	r3, [r2, #8]
 8004b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3a:	4909      	ldr	r1, [pc, #36]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b44:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004b48:	d30e      	bcc.n	8004b68 <HAL_RCC_OscConfig+0x288>
 8004b4a:	4b05      	ldr	r3, [pc, #20]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f023 021f 	bic.w	r2, r3, #31
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	4902      	ldr	r1, [pc, #8]	@ (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60cb      	str	r3, [r1, #12]
 8004b5c:	e04a      	b.n	8004bf4 <HAL_RCC_OscConfig+0x314>
 8004b5e:	bf00      	nop
 8004b60:	46020c00 	.word	0x46020c00
 8004b64:	20000004 	.word	0x20000004
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	da0a      	bge.n	8004b86 <HAL_RCC_OscConfig+0x2a6>
 8004b70:	4b98      	ldr	r3, [pc, #608]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	015b      	lsls	r3, r3, #5
 8004b7e:	4995      	ldr	r1, [pc, #596]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60cb      	str	r3, [r1, #12]
 8004b84:	e036      	b.n	8004bf4 <HAL_RCC_OscConfig+0x314>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b8e:	d30a      	bcc.n	8004ba6 <HAL_RCC_OscConfig+0x2c6>
 8004b90:	4b90      	ldr	r3, [pc, #576]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	029b      	lsls	r3, r3, #10
 8004b9e:	498d      	ldr	r1, [pc, #564]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60cb      	str	r3, [r1, #12]
 8004ba4:	e026      	b.n	8004bf4 <HAL_RCC_OscConfig+0x314>
 8004ba6:	4b8b      	ldr	r3, [pc, #556]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	03db      	lsls	r3, r3, #15
 8004bb4:	4987      	ldr	r1, [pc, #540]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60cb      	str	r3, [r1, #12]
 8004bba:	e01b      	b.n	8004bf4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004bbc:	4b85      	ldr	r3, [pc, #532]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a84      	ldr	r2, [pc, #528]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004bc8:	f7fd fbf0 	bl	80023ac <HAL_GetTick>
 8004bcc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004bce:	e009      	b.n	8004be4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bd0:	f7fd fbec 	bl	80023ac <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d902      	bls.n	8004be4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	f000 bd53 	b.w	800568a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004be4:	4b7b      	ldr	r3, [pc, #492]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1ef      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x2f0>
 8004bf0:	e000      	b.n	8004bf4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004bf2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 808b 	beq.w	8004d18 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_OscConfig+0x334>
 8004c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0a:	2b0c      	cmp	r3, #12
 8004c0c:	d109      	bne.n	8004c22 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d106      	bne.n	8004c22 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d17d      	bne.n	8004d18 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f000 bd34 	b.w	800568a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c2a:	d106      	bne.n	8004c3a <HAL_RCC_OscConfig+0x35a>
 8004c2c:	4b69      	ldr	r3, [pc, #420]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a68      	ldr	r2, [pc, #416]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	e041      	b.n	8004cbe <HAL_RCC_OscConfig+0x3de>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c42:	d112      	bne.n	8004c6a <HAL_RCC_OscConfig+0x38a>
 8004c44:	4b63      	ldr	r3, [pc, #396]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a62      	ldr	r2, [pc, #392]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004c4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	4b60      	ldr	r3, [pc, #384]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a5f      	ldr	r2, [pc, #380]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004c56:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	4b5d      	ldr	r3, [pc, #372]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a5c      	ldr	r2, [pc, #368]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004c62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	e029      	b.n	8004cbe <HAL_RCC_OscConfig+0x3de>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004c72:	d112      	bne.n	8004c9a <HAL_RCC_OscConfig+0x3ba>
 8004c74:	4b57      	ldr	r3, [pc, #348]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a56      	ldr	r2, [pc, #344]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004c7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	4b54      	ldr	r3, [pc, #336]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a53      	ldr	r2, [pc, #332]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004c86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	4b51      	ldr	r3, [pc, #324]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a50      	ldr	r2, [pc, #320]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004c92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	e011      	b.n	8004cbe <HAL_RCC_OscConfig+0x3de>
 8004c9a:	4b4e      	ldr	r3, [pc, #312]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a4d      	ldr	r2, [pc, #308]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a4a      	ldr	r2, [pc, #296]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004cac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	4b48      	ldr	r3, [pc, #288]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a47      	ldr	r2, [pc, #284]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004cb8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004cbc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d014      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004cc6:	f7fd fb71 	bl	80023ac <HAL_GetTick>
 8004cca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ccc:	e009      	b.n	8004ce2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cce:	f7fd fb6d 	bl	80023ac <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b64      	cmp	r3, #100	@ 0x64
 8004cda:	d902      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	f000 bcd4 	b.w	800568a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ce2:	4b3c      	ldr	r3, [pc, #240]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0ef      	beq.n	8004cce <HAL_RCC_OscConfig+0x3ee>
 8004cee:	e013      	b.n	8004d18 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004cf0:	f7fd fb5c 	bl	80023ac <HAL_GetTick>
 8004cf4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cf6:	e009      	b.n	8004d0c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf8:	f7fd fb58 	bl	80023ac <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b64      	cmp	r3, #100	@ 0x64
 8004d04:	d902      	bls.n	8004d0c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	f000 bcbf 	b.w	800568a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d0c:	4b31      	ldr	r3, [pc, #196]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1ef      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d05f      	beq.n	8004de4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d005      	beq.n	8004d36 <HAL_RCC_OscConfig+0x456>
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2c:	2b0c      	cmp	r3, #12
 8004d2e:	d114      	bne.n	8004d5a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d111      	bne.n	8004d5a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d102      	bne.n	8004d44 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f000 bca3 	b.w	800568a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004d44:	4b23      	ldr	r3, [pc, #140]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	041b      	lsls	r3, r3, #16
 8004d52:	4920      	ldr	r1, [pc, #128]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d58:	e044      	b.n	8004de4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d024      	beq.n	8004dac <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004d62:	4b1c      	ldr	r3, [pc, #112]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1b      	ldr	r2, [pc, #108]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d6c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d6e:	f7fd fb1d 	bl	80023ac <HAL_GetTick>
 8004d72:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d74:	e009      	b.n	8004d8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d76:	f7fd fb19 	bl	80023ac <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d902      	bls.n	8004d8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	f000 bc80 	b.w	800568a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d8a:	4b12      	ldr	r3, [pc, #72]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0ef      	beq.n	8004d76 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004d96:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	041b      	lsls	r3, r3, #16
 8004da4:	490b      	ldr	r1, [pc, #44]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	610b      	str	r3, [r1, #16]
 8004daa:	e01b      	b.n	8004de4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004dac:	4b09      	ldr	r3, [pc, #36]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a08      	ldr	r2, [pc, #32]	@ (8004dd4 <HAL_RCC_OscConfig+0x4f4>)
 8004db2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004db6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004db8:	f7fd faf8 	bl	80023ac <HAL_GetTick>
 8004dbc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dbe:	e00b      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc0:	f7fd faf4 	bl	80023ac <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d904      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	f000 bc5b 	b.w	800568a <HAL_RCC_OscConfig+0xdaa>
 8004dd4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dd8:	4baf      	ldr	r3, [pc, #700]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1ed      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0308 	and.w	r3, r3, #8
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80c8 	beq.w	8004f82 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004df2:	2300      	movs	r3, #0
 8004df4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df8:	4ba7      	ldr	r3, [pc, #668]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d111      	bne.n	8004e2a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e06:	4ba4      	ldr	r3, [pc, #656]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e0c:	4aa2      	ldr	r2, [pc, #648]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004e0e:	f043 0304 	orr.w	r3, r3, #4
 8004e12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004e16:	4ba0      	ldr	r3, [pc, #640]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004e24:	2301      	movs	r3, #1
 8004e26:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e2a:	4b9c      	ldr	r3, [pc, #624]	@ (800509c <HAL_RCC_OscConfig+0x7bc>)
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d119      	bne.n	8004e6a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004e36:	4b99      	ldr	r3, [pc, #612]	@ (800509c <HAL_RCC_OscConfig+0x7bc>)
 8004e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3a:	4a98      	ldr	r2, [pc, #608]	@ (800509c <HAL_RCC_OscConfig+0x7bc>)
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e42:	f7fd fab3 	bl	80023ac <HAL_GetTick>
 8004e46:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e48:	e009      	b.n	8004e5e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e4a:	f7fd faaf 	bl	80023ac <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d902      	bls.n	8004e5e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	f000 bc16 	b.w	800568a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e5e:	4b8f      	ldr	r3, [pc, #572]	@ (800509c <HAL_RCC_OscConfig+0x7bc>)
 8004e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0ef      	beq.n	8004e4a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d05f      	beq.n	8004f32 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004e72:	4b89      	ldr	r3, [pc, #548]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004e74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e78:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d037      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d006      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e3f4      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01b      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004eaa:	4b7b      	ldr	r3, [pc, #492]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eb0:	4a79      	ldr	r2, [pc, #484]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004eb2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004eb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004eba:	f7fd fa77 	bl	80023ac <HAL_GetTick>
 8004ebe:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec2:	f7fd fa73 	bl	80023ac <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b05      	cmp	r3, #5
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e3da      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004ed4:	4b70      	ldr	r3, [pc, #448]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004ed6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1ef      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ee8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	4969      	ldr	r1, [pc, #420]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004ef8:	4b67      	ldr	r3, [pc, #412]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004efa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004efe:	4a66      	ldr	r2, [pc, #408]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004f00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004f08:	f7fd fa50 	bl	80023ac <HAL_GetTick>
 8004f0c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f10:	f7fd fa4c 	bl	80023ac <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b05      	cmp	r3, #5
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e3b3      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004f22:	4b5d      	ldr	r3, [pc, #372]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0ef      	beq.n	8004f10 <HAL_RCC_OscConfig+0x630>
 8004f30:	e01b      	b.n	8004f6a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004f32:	4b59      	ldr	r3, [pc, #356]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f38:	4a57      	ldr	r2, [pc, #348]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004f3a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004f3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004f42:	f7fd fa33 	bl	80023ac <HAL_GetTick>
 8004f46:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f4a:	f7fd fa2f 	bl	80023ac <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b05      	cmp	r3, #5
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e396      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f5c:	4b4e      	ldr	r3, [pc, #312]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004f5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1ef      	bne.n	8004f4a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f6a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d107      	bne.n	8004f82 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f72:	4b49      	ldr	r3, [pc, #292]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f78:	4a47      	ldr	r2, [pc, #284]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004f7a:	f023 0304 	bic.w	r3, r3, #4
 8004f7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0304 	and.w	r3, r3, #4
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 8111 	beq.w	80051b2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f90:	2300      	movs	r3, #0
 8004f92:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f96:	4b40      	ldr	r3, [pc, #256]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d111      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fa4:	4b3c      	ldr	r3, [pc, #240]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004faa:	4a3b      	ldr	r2, [pc, #236]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004fac:	f043 0304 	orr.w	r3, r3, #4
 8004fb0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004fb4:	4b38      	ldr	r3, [pc, #224]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8004fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004fc8:	4b34      	ldr	r3, [pc, #208]	@ (800509c <HAL_RCC_OscConfig+0x7bc>)
 8004fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d118      	bne.n	8005006 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004fd4:	4b31      	ldr	r3, [pc, #196]	@ (800509c <HAL_RCC_OscConfig+0x7bc>)
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd8:	4a30      	ldr	r2, [pc, #192]	@ (800509c <HAL_RCC_OscConfig+0x7bc>)
 8004fda:	f043 0301 	orr.w	r3, r3, #1
 8004fde:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fe0:	f7fd f9e4 	bl	80023ac <HAL_GetTick>
 8004fe4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe8:	f7fd f9e0 	bl	80023ac <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e347      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ffa:	4b28      	ldr	r3, [pc, #160]	@ (800509c <HAL_RCC_OscConfig+0x7bc>)
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01f      	beq.n	8005052 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b00      	cmp	r3, #0
 800501c:	d010      	beq.n	8005040 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800501e:	4b1e      	ldr	r3, [pc, #120]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8005020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005024:	4a1c      	ldr	r2, [pc, #112]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8005026:	f043 0304 	orr.w	r3, r3, #4
 800502a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800502e:	4b1a      	ldr	r3, [pc, #104]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8005030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005034:	4a18      	ldr	r2, [pc, #96]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8005036:	f043 0301 	orr.w	r3, r3, #1
 800503a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800503e:	e018      	b.n	8005072 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005040:	4b15      	ldr	r3, [pc, #84]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8005042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005046:	4a14      	ldr	r2, [pc, #80]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005050:	e00f      	b.n	8005072 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005052:	4b11      	ldr	r3, [pc, #68]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8005054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005058:	4a0f      	ldr	r2, [pc, #60]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 800505a:	f023 0301 	bic.w	r3, r3, #1
 800505e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005062:	4b0d      	ldr	r3, [pc, #52]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 8005064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005068:	4a0b      	ldr	r2, [pc, #44]	@ (8005098 <HAL_RCC_OscConfig+0x7b8>)
 800506a:	f023 0304 	bic.w	r3, r3, #4
 800506e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d057      	beq.n	800512a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800507a:	f7fd f997 	bl	80023ac <HAL_GetTick>
 800507e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005080:	e00e      	b.n	80050a0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005082:	f7fd f993 	bl	80023ac <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005090:	4293      	cmp	r3, r2
 8005092:	d905      	bls.n	80050a0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e2f8      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
 8005098:	46020c00 	.word	0x46020c00
 800509c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050a0:	4b9c      	ldr	r3, [pc, #624]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80050a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0e9      	beq.n	8005082 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d01b      	beq.n	80050f2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80050ba:	4b96      	ldr	r3, [pc, #600]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80050bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050c0:	4a94      	ldr	r2, [pc, #592]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80050c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050cc:	f7fd f96e 	bl	80023ac <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e2d3      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80050e2:	4b8c      	ldr	r3, [pc, #560]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80050e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0ed      	beq.n	80050cc <HAL_RCC_OscConfig+0x7ec>
 80050f0:	e053      	b.n	800519a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80050f2:	4b88      	ldr	r3, [pc, #544]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80050f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050f8:	4a86      	ldr	r2, [pc, #536]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80050fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005102:	e00a      	b.n	800511a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005104:	f7fd f952 	bl	80023ac <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e2b7      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800511a:	4b7e      	ldr	r3, [pc, #504]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 800511c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1ed      	bne.n	8005104 <HAL_RCC_OscConfig+0x824>
 8005128:	e037      	b.n	800519a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800512a:	f7fd f93f 	bl	80023ac <HAL_GetTick>
 800512e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005130:	e00a      	b.n	8005148 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005132:	f7fd f93b 	bl	80023ac <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005140:	4293      	cmp	r3, r2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e2a0      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005148:	4b72      	ldr	r3, [pc, #456]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 800514a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1ed      	bne.n	8005132 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005156:	4b6f      	ldr	r3, [pc, #444]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 8005158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800515c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01a      	beq.n	800519a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005164:	4b6b      	ldr	r3, [pc, #428]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 8005166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800516a:	4a6a      	ldr	r2, [pc, #424]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 800516c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005170:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005174:	e00a      	b.n	800518c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005176:	f7fd f919 	bl	80023ac <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005184:	4293      	cmp	r3, r2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e27e      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800518c:	4b61      	ldr	r3, [pc, #388]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 800518e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005192:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1ed      	bne.n	8005176 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800519a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d107      	bne.n	80051b2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a2:	4b5c      	ldr	r3, [pc, #368]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80051a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051a8:	4a5a      	ldr	r2, [pc, #360]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80051aa:	f023 0304 	bic.w	r3, r3, #4
 80051ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d036      	beq.n	800522c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d019      	beq.n	80051fa <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80051c6:	4b53      	ldr	r3, [pc, #332]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a52      	ldr	r2, [pc, #328]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80051cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80051d0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80051d2:	f7fd f8eb 	bl	80023ac <HAL_GetTick>
 80051d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051da:	f7fd f8e7 	bl	80023ac <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e24e      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80051ec:	4b49      	ldr	r3, [pc, #292]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <HAL_RCC_OscConfig+0x8fa>
 80051f8:	e018      	b.n	800522c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80051fa:	4b46      	ldr	r3, [pc, #280]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a45      	ldr	r2, [pc, #276]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 8005200:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005204:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005206:	f7fd f8d1 	bl	80023ac <HAL_GetTick>
 800520a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800520e:	f7fd f8cd 	bl	80023ac <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e234      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005220:	4b3c      	ldr	r3, [pc, #240]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f0      	bne.n	800520e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005234:	2b00      	cmp	r3, #0
 8005236:	d036      	beq.n	80052a6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523c:	2b00      	cmp	r3, #0
 800523e:	d019      	beq.n	8005274 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005240:	4b34      	ldr	r3, [pc, #208]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a33      	ldr	r2, [pc, #204]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 8005246:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800524a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800524c:	f7fd f8ae 	bl	80023ac <HAL_GetTick>
 8005250:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005254:	f7fd f8aa 	bl	80023ac <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e211      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005266:	4b2b      	ldr	r3, [pc, #172]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0x974>
 8005272:	e018      	b.n	80052a6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005274:	4b27      	ldr	r3, [pc, #156]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a26      	ldr	r2, [pc, #152]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 800527a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800527e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005280:	f7fd f894 	bl	80023ac <HAL_GetTick>
 8005284:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005288:	f7fd f890 	bl	80023ac <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e1f7      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800529a:	4b1e      	ldr	r3, [pc, #120]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f0      	bne.n	8005288 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d07f      	beq.n	80053b2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d062      	beq.n	8005380 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80052ba:	4b16      	ldr	r3, [pc, #88]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	4a15      	ldr	r2, [pc, #84]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80052c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80052c4:	6093      	str	r3, [r2, #8]
 80052c6:	4b13      	ldr	r3, [pc, #76]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d2:	4910      	ldr	r1, [pc, #64]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052dc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80052e0:	d309      	bcc.n	80052f6 <HAL_RCC_OscConfig+0xa16>
 80052e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f023 021f 	bic.w	r2, r3, #31
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	4909      	ldr	r1, [pc, #36]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60cb      	str	r3, [r1, #12]
 80052f4:	e02a      	b.n	800534c <HAL_RCC_OscConfig+0xa6c>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	da0c      	bge.n	8005318 <HAL_RCC_OscConfig+0xa38>
 80052fe:	4b05      	ldr	r3, [pc, #20]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	015b      	lsls	r3, r3, #5
 800530c:	4901      	ldr	r1, [pc, #4]	@ (8005314 <HAL_RCC_OscConfig+0xa34>)
 800530e:	4313      	orrs	r3, r2
 8005310:	60cb      	str	r3, [r1, #12]
 8005312:	e01b      	b.n	800534c <HAL_RCC_OscConfig+0xa6c>
 8005314:	46020c00 	.word	0x46020c00
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005320:	d30a      	bcc.n	8005338 <HAL_RCC_OscConfig+0xa58>
 8005322:	4ba1      	ldr	r3, [pc, #644]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	029b      	lsls	r3, r3, #10
 8005330:	499d      	ldr	r1, [pc, #628]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 8005332:	4313      	orrs	r3, r2
 8005334:	60cb      	str	r3, [r1, #12]
 8005336:	e009      	b.n	800534c <HAL_RCC_OscConfig+0xa6c>
 8005338:	4b9b      	ldr	r3, [pc, #620]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	03db      	lsls	r3, r3, #15
 8005346:	4998      	ldr	r1, [pc, #608]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 8005348:	4313      	orrs	r3, r2
 800534a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800534c:	4b96      	ldr	r3, [pc, #600]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a95      	ldr	r2, [pc, #596]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 8005352:	f043 0310 	orr.w	r3, r3, #16
 8005356:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005358:	f7fd f828 	bl	80023ac <HAL_GetTick>
 800535c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005360:	f7fd f824 	bl	80023ac <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e18b      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005372:	4b8d      	ldr	r3, [pc, #564]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f0      	beq.n	8005360 <HAL_RCC_OscConfig+0xa80>
 800537e:	e018      	b.n	80053b2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005380:	4b89      	ldr	r3, [pc, #548]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a88      	ldr	r2, [pc, #544]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 8005386:	f023 0310 	bic.w	r3, r3, #16
 800538a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800538c:	f7fd f80e 	bl	80023ac <HAL_GetTick>
 8005390:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005394:	f7fd f80a 	bl	80023ac <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e171      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80053a6:	4b80      	ldr	r3, [pc, #512]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1f0      	bne.n	8005394 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 8166 	beq.w	8005688 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80053bc:	2300      	movs	r3, #0
 80053be:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053c2:	4b79      	ldr	r3, [pc, #484]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	2b0c      	cmp	r3, #12
 80053cc:	f000 80f2 	beq.w	80055b4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	f040 80c5 	bne.w	8005564 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80053da:	4b73      	ldr	r3, [pc, #460]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a72      	ldr	r2, [pc, #456]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 80053e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053e4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80053e6:	f7fc ffe1 	bl	80023ac <HAL_GetTick>
 80053ea:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ee:	f7fc ffdd 	bl	80023ac <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e144      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005400:	4b69      	ldr	r3, [pc, #420]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1f0      	bne.n	80053ee <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800540c:	4b66      	ldr	r3, [pc, #408]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 800540e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	d111      	bne.n	800543e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800541a:	4b63      	ldr	r3, [pc, #396]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 800541c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005420:	4a61      	ldr	r2, [pc, #388]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 8005422:	f043 0304 	orr.w	r3, r3, #4
 8005426:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800542a:	4b5f      	ldr	r3, [pc, #380]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 800542c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005438:	2301      	movs	r3, #1
 800543a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800543e:	4b5b      	ldr	r3, [pc, #364]	@ (80055ac <HAL_RCC_OscConfig+0xccc>)
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005446:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800544a:	d102      	bne.n	8005452 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005452:	4b56      	ldr	r3, [pc, #344]	@ (80055ac <HAL_RCC_OscConfig+0xccc>)
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	4a55      	ldr	r2, [pc, #340]	@ (80055ac <HAL_RCC_OscConfig+0xccc>)
 8005458:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800545c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800545e:	4b52      	ldr	r3, [pc, #328]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 8005460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005462:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005466:	f023 0303 	bic.w	r3, r3, #3
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005472:	3a01      	subs	r2, #1
 8005474:	0212      	lsls	r2, r2, #8
 8005476:	4311      	orrs	r1, r2
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800547c:	430a      	orrs	r2, r1
 800547e:	494a      	ldr	r1, [pc, #296]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 8005480:	4313      	orrs	r3, r2
 8005482:	628b      	str	r3, [r1, #40]	@ 0x28
 8005484:	4b48      	ldr	r3, [pc, #288]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 8005486:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005488:	4b49      	ldr	r3, [pc, #292]	@ (80055b0 <HAL_RCC_OscConfig+0xcd0>)
 800548a:	4013      	ands	r3, r2
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005490:	3a01      	subs	r2, #1
 8005492:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800549a:	3a01      	subs	r2, #1
 800549c:	0252      	lsls	r2, r2, #9
 800549e:	b292      	uxth	r2, r2
 80054a0:	4311      	orrs	r1, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80054a6:	3a01      	subs	r2, #1
 80054a8:	0412      	lsls	r2, r2, #16
 80054aa:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80054ae:	4311      	orrs	r1, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80054b4:	3a01      	subs	r2, #1
 80054b6:	0612      	lsls	r2, r2, #24
 80054b8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80054bc:	430a      	orrs	r2, r1
 80054be:	493a      	ldr	r1, [pc, #232]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80054c4:	4b38      	ldr	r3, [pc, #224]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 80054c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c8:	4a37      	ldr	r2, [pc, #220]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 80054ca:	f023 0310 	bic.w	r3, r3, #16
 80054ce:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d4:	4a34      	ldr	r2, [pc, #208]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80054da:	4b33      	ldr	r3, [pc, #204]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 80054dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054de:	4a32      	ldr	r2, [pc, #200]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 80054e0:	f043 0310 	orr.w	r3, r3, #16
 80054e4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80054e6:	4b30      	ldr	r3, [pc, #192]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 80054e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ea:	f023 020c 	bic.w	r2, r3, #12
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f2:	492d      	ldr	r1, [pc, #180]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80054f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d105      	bne.n	800550c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005500:	4b2a      	ldr	r3, [pc, #168]	@ (80055ac <HAL_RCC_OscConfig+0xccc>)
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	4a29      	ldr	r2, [pc, #164]	@ (80055ac <HAL_RCC_OscConfig+0xccc>)
 8005506:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800550a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800550c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005510:	2b01      	cmp	r3, #1
 8005512:	d107      	bne.n	8005524 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005514:	4b24      	ldr	r3, [pc, #144]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 8005516:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800551a:	4a23      	ldr	r2, [pc, #140]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 800551c:	f023 0304 	bic.w	r3, r3, #4
 8005520:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005524:	4b20      	ldr	r3, [pc, #128]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1f      	ldr	r2, [pc, #124]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 800552a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800552e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005530:	f7fc ff3c 	bl	80023ac <HAL_GetTick>
 8005534:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005538:	f7fc ff38 	bl	80023ac <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e09f      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800554a:	4b17      	ldr	r3, [pc, #92]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005556:	4b14      	ldr	r3, [pc, #80]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 8005558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555a:	4a13      	ldr	r2, [pc, #76]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 800555c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005560:	6293      	str	r3, [r2, #40]	@ 0x28
 8005562:	e091      	b.n	8005688 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005564:	4b10      	ldr	r3, [pc, #64]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a0f      	ldr	r2, [pc, #60]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 800556a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800556e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005570:	f7fc ff1c 	bl	80023ac <HAL_GetTick>
 8005574:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005578:	f7fc ff18 	bl	80023ac <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e07f      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800558a:	4b07      	ldr	r3, [pc, #28]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f0      	bne.n	8005578 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005596:	4b04      	ldr	r3, [pc, #16]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	4a03      	ldr	r2, [pc, #12]	@ (80055a8 <HAL_RCC_OscConfig+0xcc8>)
 800559c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80055a0:	f023 0303 	bic.w	r3, r3, #3
 80055a4:	6293      	str	r3, [r2, #40]	@ 0x28
 80055a6:	e06f      	b.n	8005688 <HAL_RCC_OscConfig+0xda8>
 80055a8:	46020c00 	.word	0x46020c00
 80055ac:	46020800 	.word	0x46020800
 80055b0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80055b4:	4b37      	ldr	r3, [pc, #220]	@ (8005694 <HAL_RCC_OscConfig+0xdb4>)
 80055b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80055ba:	4b36      	ldr	r3, [pc, #216]	@ (8005694 <HAL_RCC_OscConfig+0xdb4>)
 80055bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055be:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d039      	beq.n	800563c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f003 0203 	and.w	r2, r3, #3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d132      	bne.n	800563c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	0a1b      	lsrs	r3, r3, #8
 80055da:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d129      	bne.n	800563c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d122      	bne.n	800563c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005600:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005602:	429a      	cmp	r2, r3
 8005604:	d11a      	bne.n	800563c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	0a5b      	lsrs	r3, r3, #9
 800560a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005612:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005614:	429a      	cmp	r2, r3
 8005616:	d111      	bne.n	800563c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	0c1b      	lsrs	r3, r3, #16
 800561c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005624:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005626:	429a      	cmp	r2, r3
 8005628:	d108      	bne.n	800563c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	0e1b      	lsrs	r3, r3, #24
 800562e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005636:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005638:	429a      	cmp	r2, r3
 800563a:	d001      	beq.n	8005640 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e024      	b.n	800568a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005640:	4b14      	ldr	r3, [pc, #80]	@ (8005694 <HAL_RCC_OscConfig+0xdb4>)
 8005642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005644:	08db      	lsrs	r3, r3, #3
 8005646:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800564e:	429a      	cmp	r2, r3
 8005650:	d01a      	beq.n	8005688 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005652:	4b10      	ldr	r3, [pc, #64]	@ (8005694 <HAL_RCC_OscConfig+0xdb4>)
 8005654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005656:	4a0f      	ldr	r2, [pc, #60]	@ (8005694 <HAL_RCC_OscConfig+0xdb4>)
 8005658:	f023 0310 	bic.w	r3, r3, #16
 800565c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565e:	f7fc fea5 	bl	80023ac <HAL_GetTick>
 8005662:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005664:	bf00      	nop
 8005666:	f7fc fea1 	bl	80023ac <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566e:	4293      	cmp	r3, r2
 8005670:	d0f9      	beq.n	8005666 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005676:	4a07      	ldr	r2, [pc, #28]	@ (8005694 <HAL_RCC_OscConfig+0xdb4>)
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800567c:	4b05      	ldr	r3, [pc, #20]	@ (8005694 <HAL_RCC_OscConfig+0xdb4>)
 800567e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005680:	4a04      	ldr	r2, [pc, #16]	@ (8005694 <HAL_RCC_OscConfig+0xdb4>)
 8005682:	f043 0310 	orr.w	r3, r3, #16
 8005686:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3738      	adds	r7, #56	@ 0x38
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	46020c00 	.word	0x46020c00

08005698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e1d9      	b.n	8005a60 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056ac:	4b9b      	ldr	r3, [pc, #620]	@ (800591c <HAL_RCC_ClockConfig+0x284>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d910      	bls.n	80056dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ba:	4b98      	ldr	r3, [pc, #608]	@ (800591c <HAL_RCC_ClockConfig+0x284>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f023 020f 	bic.w	r2, r3, #15
 80056c2:	4996      	ldr	r1, [pc, #600]	@ (800591c <HAL_RCC_ClockConfig+0x284>)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ca:	4b94      	ldr	r3, [pc, #592]	@ (800591c <HAL_RCC_ClockConfig+0x284>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d001      	beq.n	80056dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e1c1      	b.n	8005a60 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0310 	and.w	r3, r3, #16
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d010      	beq.n	800570a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	695a      	ldr	r2, [r3, #20]
 80056ec:	4b8c      	ldr	r3, [pc, #560]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 80056ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d908      	bls.n	800570a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80056f8:	4b89      	ldr	r3, [pc, #548]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 80056fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	4986      	ldr	r1, [pc, #536]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 8005706:	4313      	orrs	r3, r2
 8005708:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	2b00      	cmp	r3, #0
 8005714:	d012      	beq.n	800573c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	4b81      	ldr	r3, [pc, #516]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	091b      	lsrs	r3, r3, #4
 8005720:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005724:	429a      	cmp	r2, r3
 8005726:	d909      	bls.n	800573c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005728:	4b7d      	ldr	r3, [pc, #500]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	011b      	lsls	r3, r3, #4
 8005736:	497a      	ldr	r1, [pc, #488]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 8005738:	4313      	orrs	r3, r2
 800573a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d010      	beq.n	800576a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	4b74      	ldr	r3, [pc, #464]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005754:	429a      	cmp	r2, r3
 8005756:	d908      	bls.n	800576a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005758:	4b71      	ldr	r3, [pc, #452]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	496e      	ldr	r1, [pc, #440]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 8005766:	4313      	orrs	r3, r2
 8005768:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d010      	beq.n	8005798 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	4b69      	ldr	r3, [pc, #420]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	429a      	cmp	r2, r3
 8005784:	d908      	bls.n	8005798 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005786:	4b66      	ldr	r3, [pc, #408]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f023 020f 	bic.w	r2, r3, #15
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	4963      	ldr	r1, [pc, #396]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 8005794:	4313      	orrs	r3, r2
 8005796:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 80d2 	beq.w	800594a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80057a6:	2300      	movs	r3, #0
 80057a8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d143      	bne.n	800583a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057b2:	4b5b      	ldr	r3, [pc, #364]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 80057b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d110      	bne.n	80057e2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80057c0:	4b57      	ldr	r3, [pc, #348]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 80057c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057c6:	4a56      	ldr	r2, [pc, #344]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 80057c8:	f043 0304 	orr.w	r3, r3, #4
 80057cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80057d0:	4b53      	ldr	r3, [pc, #332]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 80057d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	60bb      	str	r3, [r7, #8]
 80057dc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80057de:	2301      	movs	r3, #1
 80057e0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80057e2:	f7fc fde3 	bl	80023ac <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80057e8:	4b4e      	ldr	r3, [pc, #312]	@ (8005924 <HAL_RCC_ClockConfig+0x28c>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00f      	beq.n	8005814 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80057f6:	f7fc fdd9 	bl	80023ac <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e12b      	b.n	8005a60 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005808:	4b46      	ldr	r3, [pc, #280]	@ (8005924 <HAL_RCC_ClockConfig+0x28c>)
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f0      	beq.n	80057f6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005814:	7dfb      	ldrb	r3, [r7, #23]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d107      	bne.n	800582a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800581a:	4b41      	ldr	r3, [pc, #260]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 800581c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005820:	4a3f      	ldr	r2, [pc, #252]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 8005822:	f023 0304 	bic.w	r3, r3, #4
 8005826:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800582a:	4b3d      	ldr	r3, [pc, #244]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d121      	bne.n	800587a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e112      	b.n	8005a60 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d107      	bne.n	8005852 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005842:	4b37      	ldr	r3, [pc, #220]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d115      	bne.n	800587a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e106      	b.n	8005a60 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d107      	bne.n	800586a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800585a:	4b31      	ldr	r3, [pc, #196]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b00      	cmp	r3, #0
 8005864:	d109      	bne.n	800587a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e0fa      	b.n	8005a60 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800586a:	4b2d      	ldr	r3, [pc, #180]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e0f2      	b.n	8005a60 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800587a:	4b29      	ldr	r3, [pc, #164]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f023 0203 	bic.w	r2, r3, #3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	4926      	ldr	r1, [pc, #152]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 8005888:	4313      	orrs	r3, r2
 800588a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800588c:	f7fc fd8e 	bl	80023ac <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b03      	cmp	r3, #3
 8005898:	d112      	bne.n	80058c0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800589a:	e00a      	b.n	80058b2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800589c:	f7fc fd86 	bl	80023ac <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e0d6      	b.n	8005a60 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f003 030c 	and.w	r3, r3, #12
 80058ba:	2b0c      	cmp	r3, #12
 80058bc:	d1ee      	bne.n	800589c <HAL_RCC_ClockConfig+0x204>
 80058be:	e044      	b.n	800594a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d112      	bne.n	80058ee <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058c8:	e00a      	b.n	80058e0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ca:	f7fc fd6f 	bl	80023ac <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d8:	4293      	cmp	r3, r2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e0bf      	b.n	8005a60 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	f003 030c 	and.w	r3, r3, #12
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d1ee      	bne.n	80058ca <HAL_RCC_ClockConfig+0x232>
 80058ec:	e02d      	b.n	800594a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d123      	bne.n	800593e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80058f6:	e00a      	b.n	800590e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058f8:	f7fc fd58 	bl	80023ac <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e0a8      	b.n	8005a60 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800590e:	4b04      	ldr	r3, [pc, #16]	@ (8005920 <HAL_RCC_ClockConfig+0x288>)
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f003 030c 	and.w	r3, r3, #12
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1ee      	bne.n	80058f8 <HAL_RCC_ClockConfig+0x260>
 800591a:	e016      	b.n	800594a <HAL_RCC_ClockConfig+0x2b2>
 800591c:	40022000 	.word	0x40022000
 8005920:	46020c00 	.word	0x46020c00
 8005924:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005928:	f7fc fd40 	bl	80023ac <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e090      	b.n	8005a60 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800593e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a68 <HAL_RCC_ClockConfig+0x3d0>)
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	f003 030c 	and.w	r3, r3, #12
 8005946:	2b04      	cmp	r3, #4
 8005948:	d1ee      	bne.n	8005928 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d010      	beq.n	8005978 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	4b43      	ldr	r3, [pc, #268]	@ (8005a68 <HAL_RCC_ClockConfig+0x3d0>)
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	429a      	cmp	r2, r3
 8005964:	d208      	bcs.n	8005978 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005966:	4b40      	ldr	r3, [pc, #256]	@ (8005a68 <HAL_RCC_ClockConfig+0x3d0>)
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f023 020f 	bic.w	r2, r3, #15
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	493d      	ldr	r1, [pc, #244]	@ (8005a68 <HAL_RCC_ClockConfig+0x3d0>)
 8005974:	4313      	orrs	r3, r2
 8005976:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005978:	4b3c      	ldr	r3, [pc, #240]	@ (8005a6c <HAL_RCC_ClockConfig+0x3d4>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d210      	bcs.n	80059a8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005986:	4b39      	ldr	r3, [pc, #228]	@ (8005a6c <HAL_RCC_ClockConfig+0x3d4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f023 020f 	bic.w	r2, r3, #15
 800598e:	4937      	ldr	r1, [pc, #220]	@ (8005a6c <HAL_RCC_ClockConfig+0x3d4>)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	4313      	orrs	r3, r2
 8005994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005996:	4b35      	ldr	r3, [pc, #212]	@ (8005a6c <HAL_RCC_ClockConfig+0x3d4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d001      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e05b      	b.n	8005a60 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d010      	beq.n	80059d6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a68 <HAL_RCC_ClockConfig+0x3d0>)
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d208      	bcs.n	80059d6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80059c4:	4b28      	ldr	r3, [pc, #160]	@ (8005a68 <HAL_RCC_ClockConfig+0x3d0>)
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	4925      	ldr	r1, [pc, #148]	@ (8005a68 <HAL_RCC_ClockConfig+0x3d0>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d012      	beq.n	8005a08 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691a      	ldr	r2, [r3, #16]
 80059e6:	4b20      	ldr	r3, [pc, #128]	@ (8005a68 <HAL_RCC_ClockConfig+0x3d0>)
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	091b      	lsrs	r3, r3, #4
 80059ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d209      	bcs.n	8005a08 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80059f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005a68 <HAL_RCC_ClockConfig+0x3d0>)
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	4919      	ldr	r1, [pc, #100]	@ (8005a68 <HAL_RCC_ClockConfig+0x3d0>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d010      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	695a      	ldr	r2, [r3, #20]
 8005a18:	4b13      	ldr	r3, [pc, #76]	@ (8005a68 <HAL_RCC_ClockConfig+0x3d0>)
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d208      	bcs.n	8005a36 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005a24:	4b10      	ldr	r3, [pc, #64]	@ (8005a68 <HAL_RCC_ClockConfig+0x3d0>)
 8005a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	490d      	ldr	r1, [pc, #52]	@ (8005a68 <HAL_RCC_ClockConfig+0x3d0>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005a36:	f000 f821 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a68 <HAL_RCC_ClockConfig+0x3d0>)
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	490a      	ldr	r1, [pc, #40]	@ (8005a70 <HAL_RCC_ClockConfig+0x3d8>)
 8005a46:	5ccb      	ldrb	r3, [r1, r3]
 8005a48:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4c:	4a09      	ldr	r2, [pc, #36]	@ (8005a74 <HAL_RCC_ClockConfig+0x3dc>)
 8005a4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a50:	4b09      	ldr	r3, [pc, #36]	@ (8005a78 <HAL_RCC_ClockConfig+0x3e0>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7fc fc1f 	bl	8002298 <HAL_InitTick>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	73fb      	strb	r3, [r7, #15]

  return status;
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	46020c00 	.word	0x46020c00
 8005a6c:	40022000 	.word	0x40022000
 8005a70:	0800eaf0 	.word	0x0800eaf0
 8005a74:	20000000 	.word	0x20000000
 8005a78:	20000004 	.word	0x20000004

08005a7c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b08b      	sub	sp, #44	@ 0x2c
 8005a80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a8a:	4b78      	ldr	r3, [pc, #480]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	f003 030c 	and.w	r3, r3, #12
 8005a92:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a94:	4b75      	ldr	r3, [pc, #468]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d005      	beq.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	2b0c      	cmp	r3, #12
 8005aa8:	d121      	bne.n	8005aee <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d11e      	bne.n	8005aee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005ab0:	4b6e      	ldr	r3, [pc, #440]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d107      	bne.n	8005acc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005abc:	4b6b      	ldr	r3, [pc, #428]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005abe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ac2:	0b1b      	lsrs	r3, r3, #12
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aca:	e005      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005acc:	4b67      	ldr	r3, [pc, #412]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	0f1b      	lsrs	r3, r3, #28
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ad8:	4a65      	ldr	r2, [pc, #404]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ae0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d110      	bne.n	8005b0a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aea:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005aec:	e00d      	b.n	8005b0a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005aee:	4b5f      	ldr	r3, [pc, #380]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	f003 030c 	and.w	r3, r3, #12
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d102      	bne.n	8005b00 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005afa:	4b5e      	ldr	r3, [pc, #376]	@ (8005c74 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005afc:	623b      	str	r3, [r7, #32]
 8005afe:	e004      	b.n	8005b0a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	2b08      	cmp	r3, #8
 8005b04:	d101      	bne.n	8005b0a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b06:	4b5b      	ldr	r3, [pc, #364]	@ (8005c74 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005b08:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	2b0c      	cmp	r3, #12
 8005b0e:	f040 80a5 	bne.w	8005c5c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005b12:	4b56      	ldr	r3, [pc, #344]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005b1c:	4b53      	ldr	r3, [pc, #332]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b20:	0a1b      	lsrs	r3, r3, #8
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	3301      	adds	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005b2a:	4b50      	ldr	r3, [pc, #320]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2e:	091b      	lsrs	r3, r3, #4
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005b36:	4b4d      	ldr	r3, [pc, #308]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3a:	08db      	lsrs	r3, r3, #3
 8005b3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	fb02 f303 	mul.w	r3, r2, r3
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d003      	beq.n	8005b60 <HAL_RCC_GetSysClockFreq+0xe4>
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d022      	beq.n	8005ba4 <HAL_RCC_GetSysClockFreq+0x128>
 8005b5e:	e043      	b.n	8005be8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	ee07 3a90 	vmov	s15, r3
 8005b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005c78 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b72:	4b3e      	ldr	r3, [pc, #248]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b82:	ed97 6a01 	vldr	s12, [r7, #4]
 8005b86:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005c7c <HAL_RCC_GetSysClockFreq+0x200>
 8005b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ba2:	e046      	b.n	8005c32 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	ee07 3a90 	vmov	s15, r3
 8005baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bae:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005c78 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005bc6:	ed97 6a01 	vldr	s12, [r7, #4]
 8005bca:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005c7c <HAL_RCC_GetSysClockFreq+0x200>
 8005bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005be6:	e024      	b.n	8005c32 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	ee07 3a90 	vmov	s15, r3
 8005bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c00:	4b1a      	ldr	r3, [pc, #104]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c08:	ee07 3a90 	vmov	s15, r3
 8005c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c10:	ed97 6a01 	vldr	s12, [r7, #4]
 8005c14:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005c7c <HAL_RCC_GetSysClockFreq+0x200>
 8005c18:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c30:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005c32:	4b0e      	ldr	r3, [pc, #56]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c36:	0e1b      	lsrs	r3, r3, #24
 8005c38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c56:	ee17 3a90 	vmov	r3, s15
 8005c5a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	372c      	adds	r7, #44	@ 0x2c
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	46020c00 	.word	0x46020c00
 8005c70:	0800eb08 	.word	0x0800eb08
 8005c74:	00f42400 	.word	0x00f42400
 8005c78:	4b742400 	.word	0x4b742400
 8005c7c:	46000000 	.word	0x46000000

08005c80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005c84:	f7ff fefa 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	4b07      	ldr	r3, [pc, #28]	@ (8005ca8 <HAL_RCC_GetHCLKFreq+0x28>)
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	4906      	ldr	r1, [pc, #24]	@ (8005cac <HAL_RCC_GetHCLKFreq+0x2c>)
 8005c94:	5ccb      	ldrb	r3, [r1, r3]
 8005c96:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9a:	4a05      	ldr	r2, [pc, #20]	@ (8005cb0 <HAL_RCC_GetHCLKFreq+0x30>)
 8005c9c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005c9e:	4b04      	ldr	r3, [pc, #16]	@ (8005cb0 <HAL_RCC_GetHCLKFreq+0x30>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	46020c00 	.word	0x46020c00
 8005cac:	0800eaf0 	.word	0x0800eaf0
 8005cb0:	20000000 	.word	0x20000000

08005cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005cb8:	f7ff ffe2 	bl	8005c80 <HAL_RCC_GetHCLKFreq>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	4b05      	ldr	r3, [pc, #20]	@ (8005cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	091b      	lsrs	r3, r3, #4
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	4903      	ldr	r1, [pc, #12]	@ (8005cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cca:	5ccb      	ldrb	r3, [r1, r3]
 8005ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	46020c00 	.word	0x46020c00
 8005cd8:	0800eb00 	.word	0x0800eb00

08005cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005ce0:	f7ff ffce 	bl	8005c80 <HAL_RCC_GetHCLKFreq>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	4b05      	ldr	r3, [pc, #20]	@ (8005cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	0a1b      	lsrs	r3, r3, #8
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	4903      	ldr	r1, [pc, #12]	@ (8005d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cf2:	5ccb      	ldrb	r3, [r1, r3]
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	46020c00 	.word	0x46020c00
 8005d00:	0800eb00 	.word	0x0800eb00

08005d04 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005d08:	f7ff ffba 	bl	8005c80 <HAL_RCC_GetHCLKFreq>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	4b05      	ldr	r3, [pc, #20]	@ (8005d24 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d12:	091b      	lsrs	r3, r3, #4
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	4903      	ldr	r1, [pc, #12]	@ (8005d28 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005d1a:	5ccb      	ldrb	r3, [r1, r3]
 8005d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	46020c00 	.word	0x46020c00
 8005d28:	0800eb00 	.word	0x0800eb00

08005d2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d34:	4b3e      	ldr	r3, [pc, #248]	@ (8005e30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d3a:	f003 0304 	and.w	r3, r3, #4
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d42:	f7fe fdaf 	bl	80048a4 <HAL_PWREx_GetVoltageRange>
 8005d46:	6178      	str	r0, [r7, #20]
 8005d48:	e019      	b.n	8005d7e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d4a:	4b39      	ldr	r3, [pc, #228]	@ (8005e30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d50:	4a37      	ldr	r2, [pc, #220]	@ (8005e30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d52:	f043 0304 	orr.w	r3, r3, #4
 8005d56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005d5a:	4b35      	ldr	r3, [pc, #212]	@ (8005e30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d68:	f7fe fd9c 	bl	80048a4 <HAL_PWREx_GetVoltageRange>
 8005d6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d6e:	4b30      	ldr	r3, [pc, #192]	@ (8005e30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d74:	4a2e      	ldr	r2, [pc, #184]	@ (8005e30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d76:	f023 0304 	bic.w	r3, r3, #4
 8005d7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d84:	d003      	beq.n	8005d8e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d8c:	d109      	bne.n	8005da2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d94:	d202      	bcs.n	8005d9c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005d96:	2301      	movs	r3, #1
 8005d98:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005d9a:	e033      	b.n	8005e04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005da0:	e030      	b.n	8005e04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005da8:	d208      	bcs.n	8005dbc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005db0:	d102      	bne.n	8005db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005db2:	2303      	movs	r3, #3
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	e025      	b.n	8005e04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e035      	b.n	8005e28 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dc2:	d90f      	bls.n	8005de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d109      	bne.n	8005dde <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005dd0:	d902      	bls.n	8005dd8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	e015      	b.n	8005e04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005dd8:	2301      	movs	r3, #1
 8005dda:	613b      	str	r3, [r7, #16]
 8005ddc:	e012      	b.n	8005e04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005dde:	2300      	movs	r3, #0
 8005de0:	613b      	str	r3, [r7, #16]
 8005de2:	e00f      	b.n	8005e04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dea:	d109      	bne.n	8005e00 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df2:	d102      	bne.n	8005dfa <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005df4:	2301      	movs	r3, #1
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	e004      	b.n	8005e04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	e001      	b.n	8005e04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005e00:	2301      	movs	r3, #1
 8005e02:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e04:	4b0b      	ldr	r3, [pc, #44]	@ (8005e34 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f023 020f 	bic.w	r2, r3, #15
 8005e0c:	4909      	ldr	r1, [pc, #36]	@ (8005e34 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005e14:	4b07      	ldr	r3, [pc, #28]	@ (8005e34 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d001      	beq.n	8005e26 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e000      	b.n	8005e28 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	46020c00 	.word	0x46020c00
 8005e34:	40022000 	.word	0x40022000

08005e38 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e3c:	b0c4      	sub	sp, #272	@ 0x110
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e44:	2300      	movs	r3, #0
 8005e46:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	f002 0401 	and.w	r4, r2, #1
 8005e5c:	2500      	movs	r5, #0
 8005e5e:	ea54 0305 	orrs.w	r3, r4, r5
 8005e62:	d00b      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005e64:	4bd5      	ldr	r3, [pc, #852]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e6a:	f023 0103 	bic.w	r1, r3, #3
 8005e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e74:	4ad1      	ldr	r2, [pc, #836]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005e76:	430b      	orrs	r3, r1
 8005e78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e84:	f002 0802 	and.w	r8, r2, #2
 8005e88:	f04f 0900 	mov.w	r9, #0
 8005e8c:	ea58 0309 	orrs.w	r3, r8, r9
 8005e90:	d00b      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005e92:	4bca      	ldr	r3, [pc, #808]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e98:	f023 010c 	bic.w	r1, r3, #12
 8005e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea2:	4ac6      	ldr	r2, [pc, #792]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005ea4:	430b      	orrs	r3, r1
 8005ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f002 0a04 	and.w	sl, r2, #4
 8005eb6:	f04f 0b00 	mov.w	fp, #0
 8005eba:	ea5a 030b 	orrs.w	r3, sl, fp
 8005ebe:	d00b      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005ec0:	4bbe      	ldr	r3, [pc, #760]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ec6:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ed0:	4aba      	ldr	r2, [pc, #744]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f002 0308 	and.w	r3, r2, #8
 8005ee4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005eee:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	d00b      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005ef8:	4bb0      	ldr	r3, [pc, #704]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005efe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f08:	4aac      	ldr	r2, [pc, #688]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f002 0310 	and.w	r3, r2, #16
 8005f1c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f20:	2300      	movs	r3, #0
 8005f22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f26:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	d00b      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005f30:	4ba2      	ldr	r3, [pc, #648]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f40:	4a9e      	ldr	r2, [pc, #632]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005f42:	430b      	orrs	r3, r1
 8005f44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f50:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4313      	orrs	r3, r2
 8005f66:	d00b      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005f68:	4b94      	ldr	r3, [pc, #592]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005f6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f6e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f78:	4a90      	ldr	r2, [pc, #576]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005f7a:	430b      	orrs	r3, r1
 8005f7c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f002 0320 	and.w	r3, r2, #32
 8005f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f90:	2300      	movs	r3, #0
 8005f92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005f96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	d00b      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005fa0:	4b86      	ldr	r3, [pc, #536]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005fa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005fa6:	f023 0107 	bic.w	r1, r3, #7
 8005faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fb0:	4a82      	ldr	r2, [pc, #520]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005fb2:	430b      	orrs	r3, r1
 8005fb4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005fce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	d00b      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005fd8:	4b78      	ldr	r3, [pc, #480]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fde:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fe8:	4a74      	ldr	r2, [pc, #464]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005fea:	430b      	orrs	r3, r1
 8005fec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005ffc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006000:	2300      	movs	r3, #0
 8006002:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006006:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800600a:	460b      	mov	r3, r1
 800600c:	4313      	orrs	r3, r2
 800600e:	d00b      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006010:	4b6a      	ldr	r3, [pc, #424]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006016:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800601a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800601e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006020:	4a66      	ldr	r2, [pc, #408]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006022:	430b      	orrs	r3, r1
 8006024:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006028:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006034:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006038:	2300      	movs	r3, #0
 800603a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800603e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006042:	460b      	mov	r3, r1
 8006044:	4313      	orrs	r3, r2
 8006046:	d00b      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006048:	4b5c      	ldr	r3, [pc, #368]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800604a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800604e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006058:	4a58      	ldr	r2, [pc, #352]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800605a:	430b      	orrs	r3, r1
 800605c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006068:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800606c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006070:	2300      	movs	r3, #0
 8006072:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006076:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800607a:	460b      	mov	r3, r1
 800607c:	4313      	orrs	r3, r2
 800607e:	d00b      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006080:	4b4e      	ldr	r3, [pc, #312]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006086:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800608a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800608e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006090:	4a4a      	ldr	r2, [pc, #296]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006092:	430b      	orrs	r3, r1
 8006094:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8006098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80060a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060a8:	2300      	movs	r3, #0
 80060aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060ae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4313      	orrs	r3, r2
 80060b6:	d00b      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 80060b8:	4b40      	ldr	r3, [pc, #256]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80060ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060be:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80060c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060c8:	4a3c      	ldr	r2, [pc, #240]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80060ca:	430b      	orrs	r3, r1
 80060cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 80060d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80060dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060e0:	2300      	movs	r3, #0
 80060e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060e6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060ea:	460b      	mov	r3, r1
 80060ec:	4313      	orrs	r3, r2
 80060ee:	d00c      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 80060f0:	4b32      	ldr	r3, [pc, #200]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80060f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060f6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80060fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006102:	4a2e      	ldr	r2, [pc, #184]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006104:	430b      	orrs	r3, r1
 8006106:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800610a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800610e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006112:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006116:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800611a:	2300      	movs	r3, #0
 800611c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006120:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006124:	460b      	mov	r3, r1
 8006126:	4313      	orrs	r3, r2
 8006128:	d00c      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800612a:	4b24      	ldr	r3, [pc, #144]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800612c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006130:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006138:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800613c:	4a1f      	ldr	r2, [pc, #124]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800613e:	430b      	orrs	r3, r1
 8006140:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006150:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006154:	2300      	movs	r3, #0
 8006156:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800615a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800615e:	460b      	mov	r3, r1
 8006160:	4313      	orrs	r3, r2
 8006162:	d00c      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006164:	4b15      	ldr	r3, [pc, #84]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800616a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800616e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006176:	4a11      	ldr	r2, [pc, #68]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006178:	430b      	orrs	r3, r1
 800617a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800617e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800618a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800618e:	2300      	movs	r3, #0
 8006190:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006194:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006198:	460b      	mov	r3, r1
 800619a:	4313      	orrs	r3, r2
 800619c:	d010      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800619e:	4b07      	ldr	r3, [pc, #28]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80061a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061a4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061b0:	4a02      	ldr	r2, [pc, #8]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80061b2:	430b      	orrs	r3, r1
 80061b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80061b8:	e002      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80061ba:	bf00      	nop
 80061bc:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80061cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061d0:	2300      	movs	r3, #0
 80061d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061d6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80061da:	460b      	mov	r3, r1
 80061dc:	4313      	orrs	r3, r2
 80061de:	d04c      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80061e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061e8:	2b80      	cmp	r3, #128	@ 0x80
 80061ea:	d02d      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80061ec:	2b80      	cmp	r3, #128	@ 0x80
 80061ee:	d827      	bhi.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80061f0:	2b60      	cmp	r3, #96	@ 0x60
 80061f2:	d02b      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80061f4:	2b60      	cmp	r3, #96	@ 0x60
 80061f6:	d823      	bhi.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80061f8:	2b40      	cmp	r3, #64	@ 0x40
 80061fa:	d006      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80061fc:	2b40      	cmp	r3, #64	@ 0x40
 80061fe:	d81f      	bhi.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006200:	2b00      	cmp	r3, #0
 8006202:	d009      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006204:	2b20      	cmp	r3, #32
 8006206:	d011      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006208:	e01a      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800620a:	4bbe      	ldr	r3, [pc, #760]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800620c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620e:	4abd      	ldr	r2, [pc, #756]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006214:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006216:	e01a      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800621c:	3308      	adds	r3, #8
 800621e:	4618      	mov	r0, r3
 8006220:	f002 fc32 	bl	8008a88 <RCCEx_PLL2_Config>
 8006224:	4603      	mov	r3, r0
 8006226:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800622a:	e010      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800622c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006230:	332c      	adds	r3, #44	@ 0x2c
 8006232:	4618      	mov	r0, r3
 8006234:	f002 fcc0 	bl	8008bb8 <RCCEx_PLL3_Config>
 8006238:	4603      	mov	r3, r0
 800623a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800623e:	e006      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006246:	e002      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8006248:	bf00      	nop
 800624a:	e000      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800624c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800624e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10d      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006256:	4bab      	ldr	r3, [pc, #684]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006258:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800625c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8006260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006264:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006268:	4aa6      	ldr	r2, [pc, #664]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800626a:	430b      	orrs	r3, r1
 800626c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006270:	e003      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006272:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006276:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800627a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006286:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800628a:	2300      	movs	r3, #0
 800628c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006290:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006294:	460b      	mov	r3, r1
 8006296:	4313      	orrs	r3, r2
 8006298:	d053      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800629a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800629e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062a6:	d033      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80062a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ac:	d82c      	bhi.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80062ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062b2:	d02f      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 80062b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062b8:	d826      	bhi.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80062ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062be:	d008      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 80062c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062c4:	d820      	bhi.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80062ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ce:	d011      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80062d0:	e01a      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80062d2:	4b8c      	ldr	r3, [pc, #560]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d6:	4a8b      	ldr	r2, [pc, #556]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062dc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80062de:	e01a      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062e4:	3308      	adds	r3, #8
 80062e6:	4618      	mov	r0, r3
 80062e8:	f002 fbce 	bl	8008a88 <RCCEx_PLL2_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80062f2:	e010      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062f8:	332c      	adds	r3, #44	@ 0x2c
 80062fa:	4618      	mov	r0, r3
 80062fc:	f002 fc5c 	bl	8008bb8 <RCCEx_PLL3_Config>
 8006300:	4603      	mov	r3, r0
 8006302:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006306:	e006      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800630e:	e002      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8006310:	bf00      	nop
 8006312:	e000      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8006314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006316:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10d      	bne.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800631e:	4b79      	ldr	r3, [pc, #484]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006320:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006324:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800632c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006330:	4a74      	ldr	r2, [pc, #464]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006332:	430b      	orrs	r3, r1
 8006334:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006338:	e003      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800633e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800634e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006350:	2300      	movs	r3, #0
 8006352:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006354:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006358:	460b      	mov	r3, r1
 800635a:	4313      	orrs	r3, r2
 800635c:	d046      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800635e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006362:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006366:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800636a:	d028      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x586>
 800636c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006370:	d821      	bhi.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8006372:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006376:	d022      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006378:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800637c:	d81b      	bhi.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800637e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006382:	d01c      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006384:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006388:	d815      	bhi.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800638a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800638e:	d008      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8006390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006394:	d80f      	bhi.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8006396:	2b00      	cmp	r3, #0
 8006398:	d011      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x586>
 800639a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800639e:	d00e      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x586>
 80063a0:	e009      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063a6:	3308      	adds	r3, #8
 80063a8:	4618      	mov	r0, r3
 80063aa:	f002 fb6d 	bl	8008a88 <RCCEx_PLL2_Config>
 80063ae:	4603      	mov	r3, r0
 80063b0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80063b4:	e004      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80063bc:	e000      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 80063be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063c0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10d      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80063c8:	4b4e      	ldr	r3, [pc, #312]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063ce:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80063d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80063da:	4a4a      	ldr	r2, [pc, #296]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063dc:	430b      	orrs	r3, r1
 80063de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80063e2:	e003      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80063e8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80063ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80063f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80063fa:	2300      	movs	r3, #0
 80063fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80063fe:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006402:	460b      	mov	r3, r1
 8006404:	4313      	orrs	r3, r2
 8006406:	d03f      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800640c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006410:	2b04      	cmp	r3, #4
 8006412:	d81e      	bhi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8006414:	a201      	add	r2, pc, #4	@ (adr r2, 800641c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641a:	bf00      	nop
 800641c:	0800645b 	.word	0x0800645b
 8006420:	08006431 	.word	0x08006431
 8006424:	0800643f 	.word	0x0800643f
 8006428:	0800645b 	.word	0x0800645b
 800642c:	0800645b 	.word	0x0800645b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006430:	4b34      	ldr	r3, [pc, #208]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006434:	4a33      	ldr	r2, [pc, #204]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800643a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800643c:	e00e      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800643e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006442:	332c      	adds	r3, #44	@ 0x2c
 8006444:	4618      	mov	r0, r3
 8006446:	f002 fbb7 	bl	8008bb8 <RCCEx_PLL3_Config>
 800644a:	4603      	mov	r3, r0
 800644c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006450:	e004      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006458:	e000      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 800645a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800645c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10d      	bne.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006464:	4b27      	ldr	r3, [pc, #156]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006466:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800646a:	f023 0107 	bic.w	r1, r3, #7
 800646e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006476:	4a23      	ldr	r2, [pc, #140]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006478:	430b      	orrs	r3, r1
 800647a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800647e:	e003      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006480:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006484:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800648c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006490:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006494:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006496:	2300      	movs	r3, #0
 8006498:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800649a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800649e:	460b      	mov	r3, r1
 80064a0:	4313      	orrs	r3, r2
 80064a2:	d04c      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80064a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064b0:	d02a      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80064b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064b6:	d821      	bhi.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80064b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064bc:	d026      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 80064be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064c2:	d81b      	bhi.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80064c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064c8:	d00e      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80064ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064ce:	d815      	bhi.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01d      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80064d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d8:	d110      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064da:	4b0a      	ldr	r3, [pc, #40]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064de:	4a09      	ldr	r2, [pc, #36]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064e4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80064e6:	e014      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064ec:	332c      	adds	r3, #44	@ 0x2c
 80064ee:	4618      	mov	r0, r3
 80064f0:	f002 fb62 	bl	8008bb8 <RCCEx_PLL3_Config>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80064fa:	e00a      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006502:	e006      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8006504:	46020c00 	.word	0x46020c00
        break;
 8006508:	bf00      	nop
 800650a:	e002      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 800650c:	bf00      	nop
 800650e:	e000      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8006510:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006512:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10d      	bne.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800651a:	4baf      	ldr	r3, [pc, #700]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800651c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006520:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006528:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800652c:	4aaa      	ldr	r2, [pc, #680]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800652e:	430b      	orrs	r3, r1
 8006530:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006534:	e003      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006536:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800653a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800653e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006546:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800654a:	663b      	str	r3, [r7, #96]	@ 0x60
 800654c:	2300      	movs	r3, #0
 800654e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006550:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006554:	460b      	mov	r3, r1
 8006556:	4313      	orrs	r3, r2
 8006558:	f000 80b5 	beq.w	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800655c:	2300      	movs	r3, #0
 800655e:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006562:	4b9d      	ldr	r3, [pc, #628]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	2b00      	cmp	r3, #0
 800656e:	d113      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006570:	4b99      	ldr	r3, [pc, #612]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006576:	4a98      	ldr	r2, [pc, #608]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006578:	f043 0304 	orr.w	r3, r3, #4
 800657c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006580:	4b95      	ldr	r3, [pc, #596]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800658e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 8006592:	2301      	movs	r3, #1
 8006594:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006598:	4b90      	ldr	r3, [pc, #576]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800659a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659c:	4a8f      	ldr	r2, [pc, #572]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800659e:	f043 0301 	orr.w	r3, r3, #1
 80065a2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065a4:	f7fb ff02 	bl	80023ac <HAL_GetTick>
 80065a8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80065ac:	e00b      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ae:	f7fb fefd 	bl	80023ac <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d903      	bls.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80065c4:	e005      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80065c6:	4b85      	ldr	r3, [pc, #532]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80065c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0ed      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 80065d2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d165      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065da:	4b7f      	ldr	r3, [pc, #508]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80065dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065e4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80065e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d023      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x800>
 80065f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065f4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80065f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d01b      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006600:	4b75      	ldr	r3, [pc, #468]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800660a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800660e:	4b72      	ldr	r3, [pc, #456]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006614:	4a70      	ldr	r2, [pc, #448]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800661a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800661e:	4b6e      	ldr	r3, [pc, #440]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006624:	4a6c      	ldr	r2, [pc, #432]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800662a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800662e:	4a6a      	ldr	r2, [pc, #424]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006634:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d019      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006644:	f7fb feb2 	bl	80023ac <HAL_GetTick>
 8006648:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800664c:	e00d      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800664e:	f7fb fead 	bl	80023ac <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006658:	1ad2      	subs	r2, r2, r3
 800665a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800665e:	429a      	cmp	r2, r3
 8006660:	d903      	bls.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8006668:	e006      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800666a:	4b5b      	ldr	r3, [pc, #364]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800666c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0ea      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8006678:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10d      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006680:	4b55      	ldr	r3, [pc, #340]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006686:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800668a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800668e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006692:	4a51      	ldr	r2, [pc, #324]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006694:	430b      	orrs	r3, r1
 8006696:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800669a:	e008      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800669c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80066a0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 80066a4:	e003      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80066aa:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066ae:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d107      	bne.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066b6:	4b48      	ldr	r3, [pc, #288]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80066b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066bc:	4a46      	ldr	r2, [pc, #280]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80066be:	f023 0304 	bic.w	r3, r3, #4
 80066c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80066c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80066d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066d4:	2300      	movs	r3, #0
 80066d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066d8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80066dc:	460b      	mov	r3, r1
 80066de:	4313      	orrs	r3, r2
 80066e0:	d042      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80066e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80066ea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80066ee:	d022      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80066f0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80066f4:	d81b      	bhi.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80066f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066fa:	d011      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 80066fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006700:	d815      	bhi.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d019      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x902>
 8006706:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800670a:	d110      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800670c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006710:	3308      	adds	r3, #8
 8006712:	4618      	mov	r0, r3
 8006714:	f002 f9b8 	bl	8008a88 <RCCEx_PLL2_Config>
 8006718:	4603      	mov	r3, r0
 800671a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800671e:	e00d      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006720:	4b2d      	ldr	r3, [pc, #180]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006724:	4a2c      	ldr	r2, [pc, #176]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800672a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800672c:	e006      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006734:	e002      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8006736:	bf00      	nop
 8006738:	e000      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 800673a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800673c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10d      	bne.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006744:	4b24      	ldr	r3, [pc, #144]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800674a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800674e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006752:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006756:	4a20      	ldr	r2, [pc, #128]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006758:	430b      	orrs	r3, r1
 800675a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800675e:	e003      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006760:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006764:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006774:	653b      	str	r3, [r7, #80]	@ 0x50
 8006776:	2300      	movs	r3, #0
 8006778:	657b      	str	r3, [r7, #84]	@ 0x54
 800677a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800677e:	460b      	mov	r3, r1
 8006780:	4313      	orrs	r3, r2
 8006782:	d031      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006788:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800678c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006790:	d00b      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006796:	d804      	bhi.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d008      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x976>
 800679c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067a0:	d007      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80067a8:	e004      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80067aa:	bf00      	nop
 80067ac:	e002      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80067ae:	bf00      	nop
 80067b0:	e000      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80067b2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80067b4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d111      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80067bc:	4b06      	ldr	r3, [pc, #24]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80067be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80067ce:	4a02      	ldr	r2, [pc, #8]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80067d0:	430b      	orrs	r3, r1
 80067d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80067d6:	e007      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 80067d8:	46020c00 	.word	0x46020c00
 80067dc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80067e4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80067e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80067f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067f6:	2300      	movs	r3, #0
 80067f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067fa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80067fe:	460b      	mov	r3, r1
 8006800:	4313      	orrs	r3, r2
 8006802:	d00c      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006804:	4bb2      	ldr	r3, [pc, #712]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006806:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800680a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800680e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006812:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006816:	4aae      	ldr	r2, [pc, #696]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006818:	430b      	orrs	r3, r1
 800681a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800681e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006826:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800682a:	643b      	str	r3, [r7, #64]	@ 0x40
 800682c:	2300      	movs	r3, #0
 800682e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006830:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006834:	460b      	mov	r3, r1
 8006836:	4313      	orrs	r3, r2
 8006838:	d019      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800683a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800683e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006842:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006846:	d105      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006848:	4ba1      	ldr	r3, [pc, #644]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800684a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684c:	4aa0      	ldr	r2, [pc, #640]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800684e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006852:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006854:	4b9e      	ldr	r3, [pc, #632]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006856:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800685a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800685e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006862:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006866:	4a9a      	ldr	r2, [pc, #616]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006868:	430b      	orrs	r3, r1
 800686a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800686e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800687a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800687c:	2300      	movs	r3, #0
 800687e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006880:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006884:	460b      	mov	r3, r1
 8006886:	4313      	orrs	r3, r2
 8006888:	d00c      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800688a:	4b91      	ldr	r3, [pc, #580]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800688c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006890:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006898:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800689c:	4a8c      	ldr	r2, [pc, #560]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800689e:	430b      	orrs	r3, r1
 80068a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80068a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80068b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80068b2:	2300      	movs	r3, #0
 80068b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80068b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80068ba:	460b      	mov	r3, r1
 80068bc:	4313      	orrs	r3, r2
 80068be:	d00c      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80068c0:	4b83      	ldr	r3, [pc, #524]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80068c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80068ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80068d2:	4a7f      	ldr	r2, [pc, #508]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80068d4:	430b      	orrs	r3, r1
 80068d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80068da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80068e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068e8:	2300      	movs	r3, #0
 80068ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80068f0:	460b      	mov	r3, r1
 80068f2:	4313      	orrs	r3, r2
 80068f4:	d00c      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80068f6:	4b76      	ldr	r3, [pc, #472]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80068f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068fc:	f023 0218 	bic.w	r2, r3, #24
 8006900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006904:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006908:	4971      	ldr	r1, [pc, #452]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800690a:	4313      	orrs	r3, r2
 800690c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006918:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800691c:	623b      	str	r3, [r7, #32]
 800691e:	2300      	movs	r3, #0
 8006920:	627b      	str	r3, [r7, #36]	@ 0x24
 8006922:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006926:	460b      	mov	r3, r1
 8006928:	4313      	orrs	r3, r2
 800692a:	d032      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800692c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006930:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006934:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006938:	d105      	bne.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800693a:	4b65      	ldr	r3, [pc, #404]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800693c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693e:	4a64      	ldr	r2, [pc, #400]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006944:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800694a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800694e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006952:	d108      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006958:	3308      	adds	r3, #8
 800695a:	4618      	mov	r0, r3
 800695c:	f002 f894 	bl	8008a88 <RCCEx_PLL2_Config>
 8006960:	4603      	mov	r3, r0
 8006962:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 8006966:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10d      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800696e:	4b58      	ldr	r3, [pc, #352]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006970:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006974:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800697c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006980:	4953      	ldr	r1, [pc, #332]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006982:	4313      	orrs	r3, r2
 8006984:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006988:	e003      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800698e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8006992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	2100      	movs	r1, #0
 800699c:	61b9      	str	r1, [r7, #24]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	61fb      	str	r3, [r7, #28]
 80069a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80069a8:	460b      	mov	r3, r1
 80069aa:	4313      	orrs	r3, r2
 80069ac:	d04a      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 80069ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80069b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80069ba:	d01e      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 80069bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80069c0:	d825      	bhi.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80069c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069c6:	d00e      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80069c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069cc:	d81f      	bhi.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d021      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80069d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069d6:	d11a      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d8:	4b3d      	ldr	r3, [pc, #244]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80069da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069dc:	4a3c      	ldr	r2, [pc, #240]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80069de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069e2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80069e4:	e018      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ea:	3308      	adds	r3, #8
 80069ec:	4618      	mov	r0, r3
 80069ee:	f002 f84b 	bl	8008a88 <RCCEx_PLL2_Config>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80069f8:	e00e      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069fe:	332c      	adds	r3, #44	@ 0x2c
 8006a00:	4618      	mov	r0, r3
 8006a02:	f002 f8d9 	bl	8008bb8 <RCCEx_PLL3_Config>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8006a0c:	e004      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006a14:	e000      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 8006a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a18:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10d      	bne.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8006a20:	4b2b      	ldr	r3, [pc, #172]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006a22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a2e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006a32:	4927      	ldr	r1, [pc, #156]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006a3a:	e003      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006a40:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006a50:	613b      	str	r3, [r7, #16]
 8006a52:	2300      	movs	r3, #0
 8006a54:	617b      	str	r3, [r7, #20]
 8006a56:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	d03d      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a6c:	d00e      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006a6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a72:	d815      	bhi.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d017      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006a78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a7c:	d110      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a7e:	4b14      	ldr	r3, [pc, #80]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a82:	4a13      	ldr	r2, [pc, #76]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a88:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006a8a:	e00e      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a90:	3308      	adds	r3, #8
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 fff8 	bl	8008a88 <RCCEx_PLL2_Config>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006a9e:	e004      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006aa6:	e000      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8006aa8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006aaa:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d110      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006ab2:	4b07      	ldr	r3, [pc, #28]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ab8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ac4:	4902      	ldr	r1, [pc, #8]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006acc:	e006      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8006ace:	bf00      	nop
 8006ad0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006ad8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006af2:	460b      	mov	r3, r1
 8006af4:	4313      	orrs	r3, r2
 8006af6:	d00c      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006af8:	4b2c      	ldr	r3, [pc, #176]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006afa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006afe:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b06:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b0a:	4928      	ldr	r1, [pc, #160]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8006b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	6039      	str	r1, [r7, #0]
 8006b1e:	f003 0308 	and.w	r3, r3, #8
 8006b22:	607b      	str	r3, [r7, #4]
 8006b24:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	d036      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8006b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b32:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006b36:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006b3a:	d00d      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006b3c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006b40:	d811      	bhi.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8006b42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b46:	d012      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b4c:	d80b      	bhi.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00d      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b56:	d106      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b58:	4b14      	ldr	r3, [pc, #80]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5c:	4a13      	ldr	r2, [pc, #76]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b62:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8006b64:	e004      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006b6c:	e000      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8006b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b70:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10d      	bne.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8006b78:	4b0c      	ldr	r3, [pc, #48]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006b7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b7e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b86:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006b8a:	4908      	ldr	r1, [pc, #32]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006b92:	e003      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b94:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006b98:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006b9c:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bac:	46020c00 	.word	0x46020c00

08006bb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b089      	sub	sp, #36	@ 0x24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006bb8:	4ba6      	ldr	r3, [pc, #664]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006bc2:	4ba4      	ldr	r3, [pc, #656]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006bcc:	4ba1      	ldr	r3, [pc, #644]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd0:	0a1b      	lsrs	r3, r3, #8
 8006bd2:	f003 030f 	and.w	r3, r3, #15
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006bda:	4b9e      	ldr	r3, [pc, #632]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bde:	091b      	lsrs	r3, r3, #4
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006be6:	4b9b      	ldr	r3, [pc, #620]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bea:	08db      	lsrs	r3, r3, #3
 8006bec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	fb02 f303 	mul.w	r3, r2, r3
 8006bf6:	ee07 3a90 	vmov	s15, r3
 8006bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d062      	beq.n	8006cce <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	2b03      	cmp	r3, #3
 8006c0c:	f200 8081 	bhi.w	8006d12 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d024      	beq.n	8006c60 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d17a      	bne.n	8006d12 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c26:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c2e:	4b89      	ldr	r3, [pc, #548]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c36:	ee07 3a90 	vmov	s15, r3
 8006c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c42:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c5e:	e08f      	b.n	8006d80 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006c60:	4b7c      	ldr	r3, [pc, #496]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006c6c:	4b79      	ldr	r3, [pc, #484]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	0f1b      	lsrs	r3, r3, #28
 8006c72:	f003 030f 	and.w	r3, r3, #15
 8006c76:	e006      	b.n	8006c86 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006c78:	4b76      	ldr	r3, [pc, #472]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c7e:	041b      	lsls	r3, r3, #16
 8006c80:	0f1b      	lsrs	r3, r3, #28
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	4a76      	ldr	r2, [pc, #472]	@ (8006e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c8c:	ee07 3a90 	vmov	s15, r3
 8006c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	ee07 3a90 	vmov	s15, r3
 8006c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	ee07 3a90 	vmov	s15, r3
 8006ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cac:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cb0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ccc:	e058      	b.n	8006d80 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	ee07 3a90 	vmov	s15, r3
 8006cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce0:	4b5c      	ldr	r3, [pc, #368]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce8:	ee07 3a90 	vmov	s15, r3
 8006cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cf0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cf4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d10:	e036      	b.n	8006d80 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006d12:	4b50      	ldr	r3, [pc, #320]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d005      	beq.n	8006d2a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006d1e:	4b4d      	ldr	r3, [pc, #308]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	0f1b      	lsrs	r3, r3, #28
 8006d24:	f003 030f 	and.w	r3, r3, #15
 8006d28:	e006      	b.n	8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8006d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d30:	041b      	lsls	r3, r3, #16
 8006d32:	0f1b      	lsrs	r3, r3, #28
 8006d34:	f003 030f 	and.w	r3, r3, #15
 8006d38:	4a49      	ldr	r2, [pc, #292]	@ (8006e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	ee07 3a90 	vmov	s15, r3
 8006d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d62:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d7e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006d80:	4b34      	ldr	r3, [pc, #208]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d017      	beq.n	8006dbc <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d8c:	4b31      	ldr	r3, [pc, #196]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d90:	0a5b      	lsrs	r3, r3, #9
 8006d92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006d9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006da2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006db2:	ee17 2a90 	vmov	r2, s15
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	e002      	b.n	8006dc2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006dc2:	4b24      	ldr	r3, [pc, #144]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d017      	beq.n	8006dfe <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006dce:	4b21      	ldr	r3, [pc, #132]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dd2:	0c1b      	lsrs	r3, r3, #16
 8006dd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dd8:	ee07 3a90 	vmov	s15, r3
 8006ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006de0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006de4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006de8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006df4:	ee17 2a90 	vmov	r2, s15
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	605a      	str	r2, [r3, #4]
 8006dfc:	e002      	b.n	8006e04 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006e04:	4b13      	ldr	r3, [pc, #76]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d017      	beq.n	8006e40 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006e10:	4b10      	ldr	r3, [pc, #64]	@ (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e14:	0e1b      	lsrs	r3, r3, #24
 8006e16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006e22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e26:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006e2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e36:	ee17 2a90 	vmov	r2, s15
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006e3e:	e002      	b.n	8006e46 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	609a      	str	r2, [r3, #8]
}
 8006e46:	bf00      	nop
 8006e48:	3724      	adds	r7, #36	@ 0x24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	46020c00 	.word	0x46020c00
 8006e58:	4b742400 	.word	0x4b742400
 8006e5c:	46000000 	.word	0x46000000
 8006e60:	0800eb08 	.word	0x0800eb08

08006e64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b089      	sub	sp, #36	@ 0x24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006e6c:	4ba6      	ldr	r3, [pc, #664]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e74:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006e76:	4ba4      	ldr	r3, [pc, #656]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006e80:	4ba1      	ldr	r3, [pc, #644]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e84:	0a1b      	lsrs	r3, r3, #8
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006e8e:	4b9e      	ldr	r3, [pc, #632]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e92:	091b      	lsrs	r3, r3, #4
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006e9a:	4b9b      	ldr	r3, [pc, #620]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9e:	08db      	lsrs	r3, r3, #3
 8006ea0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	fb02 f303 	mul.w	r3, r2, r3
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d062      	beq.n	8006f82 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	f200 8081 	bhi.w	8006fc6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d024      	beq.n	8006f14 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d17a      	bne.n	8006fc6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eda:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800710c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ee2:	4b89      	ldr	r3, [pc, #548]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ef2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ef6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f12:	e08f      	b.n	8007034 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006f14:	4b7c      	ldr	r3, [pc, #496]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d005      	beq.n	8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006f20:	4b79      	ldr	r3, [pc, #484]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	0f1b      	lsrs	r3, r3, #28
 8006f26:	f003 030f 	and.w	r3, r3, #15
 8006f2a:	e006      	b.n	8006f3a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006f2c:	4b76      	ldr	r3, [pc, #472]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f32:	041b      	lsls	r3, r3, #16
 8006f34:	0f1b      	lsrs	r3, r3, #28
 8006f36:	f003 030f 	and.w	r3, r3, #15
 8006f3a:	4a76      	ldr	r2, [pc, #472]	@ (8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f40:	ee07 3a90 	vmov	s15, r3
 8006f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	ee07 3a90 	vmov	s15, r3
 8006f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f60:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f64:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006f68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f80:	e058      	b.n	8007034 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	ee07 3a90 	vmov	s15, r3
 8006f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800710c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006f90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f94:	4b5c      	ldr	r3, [pc, #368]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f9c:	ee07 3a90 	vmov	s15, r3
 8006fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fa4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fa8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006fac:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006fb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fc4:	e036      	b.n	8007034 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006fc6:	4b50      	ldr	r3, [pc, #320]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d005      	beq.n	8006fde <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006fd2:	4b4d      	ldr	r3, [pc, #308]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	0f1b      	lsrs	r3, r3, #28
 8006fd8:	f003 030f 	and.w	r3, r3, #15
 8006fdc:	e006      	b.n	8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8006fde:	4b4a      	ldr	r3, [pc, #296]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006fe0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fe4:	041b      	lsls	r3, r3, #16
 8006fe6:	0f1b      	lsrs	r3, r3, #28
 8006fe8:	f003 030f 	and.w	r3, r3, #15
 8006fec:	4a49      	ldr	r2, [pc, #292]	@ (8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff2:	ee07 3a90 	vmov	s15, r3
 8006ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	ee07 3a90 	vmov	s15, r3
 8007000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007012:	ed97 6a02 	vldr	s12, [r7, #8]
 8007016:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800701a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007026:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800702a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007032:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007034:	4b34      	ldr	r3, [pc, #208]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d017      	beq.n	8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007040:	4b31      	ldr	r3, [pc, #196]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007044:	0a5b      	lsrs	r3, r3, #9
 8007046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8007052:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007056:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800705a:	edd7 6a07 	vldr	s13, [r7, #28]
 800705e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007066:	ee17 2a90 	vmov	r2, s15
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	e002      	b.n	8007076 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007076:	4b24      	ldr	r3, [pc, #144]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d017      	beq.n	80070b2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007082:	4b21      	ldr	r3, [pc, #132]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007086:	0c1b      	lsrs	r3, r3, #16
 8007088:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800708c:	ee07 3a90 	vmov	s15, r3
 8007090:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007094:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007098:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800709c:	edd7 6a07 	vldr	s13, [r7, #28]
 80070a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070a8:	ee17 2a90 	vmov	r2, s15
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	605a      	str	r2, [r3, #4]
 80070b0:	e002      	b.n	80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80070b8:	4b13      	ldr	r3, [pc, #76]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80070ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d017      	beq.n	80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80070c4:	4b10      	ldr	r3, [pc, #64]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80070c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c8:	0e1b      	lsrs	r3, r3, #24
 80070ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80070d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070da:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80070de:	edd7 6a07 	vldr	s13, [r7, #28]
 80070e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ea:	ee17 2a90 	vmov	r2, s15
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070f2:	e002      	b.n	80070fa <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	609a      	str	r2, [r3, #8]
}
 80070fa:	bf00      	nop
 80070fc:	3724      	adds	r7, #36	@ 0x24
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	46020c00 	.word	0x46020c00
 800710c:	4b742400 	.word	0x4b742400
 8007110:	46000000 	.word	0x46000000
 8007114:	0800eb08 	.word	0x0800eb08

08007118 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007118:	b480      	push	{r7}
 800711a:	b089      	sub	sp, #36	@ 0x24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007120:	4ba6      	ldr	r3, [pc, #664]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007128:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800712a:	4ba4      	ldr	r3, [pc, #656]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800712c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007134:	4ba1      	ldr	r3, [pc, #644]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007138:	0a1b      	lsrs	r3, r3, #8
 800713a:	f003 030f 	and.w	r3, r3, #15
 800713e:	3301      	adds	r3, #1
 8007140:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007142:	4b9e      	ldr	r3, [pc, #632]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007146:	091b      	lsrs	r3, r3, #4
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800714e:	4b9b      	ldr	r3, [pc, #620]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007152:	08db      	lsrs	r3, r3, #3
 8007154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	fb02 f303 	mul.w	r3, r2, r3
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007166:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b03      	cmp	r3, #3
 800716e:	d062      	beq.n	8007236 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2b03      	cmp	r3, #3
 8007174:	f200 8081 	bhi.w	800727a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d024      	beq.n	80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2b02      	cmp	r3, #2
 8007182:	d17a      	bne.n	800727a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8007192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007196:	4b89      	ldr	r3, [pc, #548]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800719a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80071a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80071aa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80071ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80071b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80071b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80071be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80071c6:	e08f      	b.n	80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80071c8:	4b7c      	ldr	r3, [pc, #496]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d005      	beq.n	80071e0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80071d4:	4b79      	ldr	r3, [pc, #484]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	0f1b      	lsrs	r3, r3, #28
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	e006      	b.n	80071ee <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80071e0:	4b76      	ldr	r3, [pc, #472]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071e6:	041b      	lsls	r3, r3, #16
 80071e8:	0f1b      	lsrs	r3, r3, #28
 80071ea:	f003 030f 	and.w	r3, r3, #15
 80071ee:	4a76      	ldr	r2, [pc, #472]	@ (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80071f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f4:	ee07 3a90 	vmov	s15, r3
 80071f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	ee07 3a90 	vmov	s15, r3
 8007210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007214:	ed97 6a02 	vldr	s12, [r7, #8]
 8007218:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800721c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007220:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007224:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007228:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800722c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007230:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007234:	e058      	b.n	80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	ee07 3a90 	vmov	s15, r3
 800723c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007240:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8007244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007248:	4b5c      	ldr	r3, [pc, #368]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800724a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800724c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007250:	ee07 3a90 	vmov	s15, r3
 8007254:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007258:	ed97 6a02 	vldr	s12, [r7, #8]
 800725c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007260:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007264:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007268:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800726c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007274:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007278:	e036      	b.n	80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800727a:	4b50      	ldr	r3, [pc, #320]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d005      	beq.n	8007292 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8007286:	4b4d      	ldr	r3, [pc, #308]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	0f1b      	lsrs	r3, r3, #28
 800728c:	f003 030f 	and.w	r3, r3, #15
 8007290:	e006      	b.n	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8007292:	4b4a      	ldr	r3, [pc, #296]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007294:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007298:	041b      	lsls	r3, r3, #16
 800729a:	0f1b      	lsrs	r3, r3, #28
 800729c:	f003 030f 	and.w	r3, r3, #15
 80072a0:	4a49      	ldr	r2, [pc, #292]	@ (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80072a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	ee07 3a90 	vmov	s15, r3
 80072b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80072ca:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80072ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072da:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80072de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072e6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80072e8:	4b34      	ldr	r3, [pc, #208]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80072ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d017      	beq.n	8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072f4:	4b31      	ldr	r3, [pc, #196]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80072f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f8:	0a5b      	lsrs	r3, r3, #9
 80072fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007306:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800730a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800730e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800731a:	ee17 2a90 	vmov	r2, s15
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	e002      	b.n	800732a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800732a:	4b24      	ldr	r3, [pc, #144]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800732c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d017      	beq.n	8007366 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007336:	4b21      	ldr	r3, [pc, #132]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800733a:	0c1b      	lsrs	r3, r3, #16
 800733c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007340:	ee07 3a90 	vmov	s15, r3
 8007344:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007348:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800734c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007350:	edd7 6a07 	vldr	s13, [r7, #28]
 8007354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800735c:	ee17 2a90 	vmov	r2, s15
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	605a      	str	r2, [r3, #4]
 8007364:	e002      	b.n	800736c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800736c:	4b13      	ldr	r3, [pc, #76]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800736e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007370:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d017      	beq.n	80073a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007378:	4b10      	ldr	r3, [pc, #64]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800737a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800737c:	0e1b      	lsrs	r3, r3, #24
 800737e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007382:	ee07 3a90 	vmov	s15, r3
 8007386:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800738a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800738e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007392:	edd7 6a07 	vldr	s13, [r7, #28]
 8007396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800739a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800739e:	ee17 2a90 	vmov	r2, s15
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80073a6:	e002      	b.n	80073ae <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	609a      	str	r2, [r3, #8]
}
 80073ae:	bf00      	nop
 80073b0:	3724      	adds	r7, #36	@ 0x24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	46020c00 	.word	0x46020c00
 80073c0:	4b742400 	.word	0x4b742400
 80073c4:	46000000 	.word	0x46000000
 80073c8:	0800eb08 	.word	0x0800eb08

080073cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08e      	sub	sp, #56	@ 0x38
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80073d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073da:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80073de:	430b      	orrs	r3, r1
 80073e0:	d145      	bne.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80073e2:	4ba7      	ldr	r3, [pc, #668]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073ec:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80073ee:	4ba4      	ldr	r3, [pc, #656]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d108      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80073fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007402:	d104      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007404:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007408:	637b      	str	r3, [r7, #52]	@ 0x34
 800740a:	f001 bb31 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800740e:	4b9c      	ldr	r3, [pc, #624]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007414:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007418:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800741c:	d114      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800741e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007424:	d110      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007426:	4b96      	ldr	r3, [pc, #600]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800742c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007430:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007434:	d103      	bne.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007436:	23fa      	movs	r3, #250	@ 0xfa
 8007438:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800743a:	f001 bb19 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800743e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007442:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007444:	f001 bb14 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007448:	4b8d      	ldr	r3, [pc, #564]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007450:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007454:	d107      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007458:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800745c:	d103      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800745e:	4b89      	ldr	r3, [pc, #548]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007460:	637b      	str	r3, [r7, #52]	@ 0x34
 8007462:	f001 bb05 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	637b      	str	r3, [r7, #52]	@ 0x34
 800746a:	f001 bb01 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800746e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007472:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007476:	430b      	orrs	r3, r1
 8007478:	d151      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800747a:	4b81      	ldr	r3, [pc, #516]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800747c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007480:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8007484:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007488:	2b80      	cmp	r3, #128	@ 0x80
 800748a:	d035      	beq.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800748c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748e:	2b80      	cmp	r3, #128	@ 0x80
 8007490:	d841      	bhi.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007494:	2b60      	cmp	r3, #96	@ 0x60
 8007496:	d02a      	beq.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749a:	2b60      	cmp	r3, #96	@ 0x60
 800749c:	d83b      	bhi.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	2b40      	cmp	r3, #64	@ 0x40
 80074a2:	d009      	beq.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80074a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a6:	2b40      	cmp	r3, #64	@ 0x40
 80074a8:	d835      	bhi.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80074aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00c      	beq.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80074b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	d012      	beq.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80074b6:	e02e      	b.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff fb77 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80074c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074c6:	f001 bad3 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ca:	f107 0318 	add.w	r3, r7, #24
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff fcc8 	bl	8006e64 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074d8:	f001 baca 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074dc:	f107 030c 	add.w	r3, r7, #12
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff fe19 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074ea:	f001 bac1 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80074ee:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80074f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074f4:	f001 babc 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074f8:	4b61      	ldr	r3, [pc, #388]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007504:	d103      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007506:	4b60      	ldr	r3, [pc, #384]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007508:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800750a:	f001 bab1 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007512:	f001 baad 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800751a:	f001 baa9 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800751e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007522:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007526:	430b      	orrs	r3, r1
 8007528:	d158      	bne.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800752a:	4b55      	ldr	r3, [pc, #340]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800752c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007530:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007534:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007538:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800753c:	d03b      	beq.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800753e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007544:	d846      	bhi.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007548:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800754c:	d02e      	beq.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800754e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007550:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007554:	d83e      	bhi.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800755c:	d00b      	beq.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800755e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007564:	d836      	bhi.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00d      	beq.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800756c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007572:	d012      	beq.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007574:	e02e      	b.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800757a:	4618      	mov	r0, r3
 800757c:	f7ff fb18 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007582:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007584:	f001 ba74 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007588:	f107 0318 	add.w	r3, r7, #24
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff fc69 	bl	8006e64 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007596:	f001 ba6b 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800759a:	f107 030c 	add.w	r3, r7, #12
 800759e:	4618      	mov	r0, r3
 80075a0:	f7ff fdba 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075a8:	f001 ba62 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80075ac:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80075b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075b2:	f001 ba5d 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075b6:	4b32      	ldr	r3, [pc, #200]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075c2:	d103      	bne.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80075c4:	4b30      	ldr	r3, [pc, #192]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80075c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075c8:	f001 ba52 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075d0:	f001 ba4e 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075d8:	f001 ba4a 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80075dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075e0:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80075e4:	430b      	orrs	r3, r1
 80075e6:	d126      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80075e8:	4b25      	ldr	r3, [pc, #148]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075f2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80075f4:	4b22      	ldr	r3, [pc, #136]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007600:	d106      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007604:	2b00      	cmp	r3, #0
 8007606:	d103      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007608:	4b1f      	ldr	r3, [pc, #124]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800760a:	637b      	str	r3, [r7, #52]	@ 0x34
 800760c:	f001 ba30 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007610:	4b1b      	ldr	r3, [pc, #108]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800761c:	d107      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800761e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007624:	d103      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8007626:	4b19      	ldr	r3, [pc, #100]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007628:	637b      	str	r3, [r7, #52]	@ 0x34
 800762a:	f001 ba21 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	637b      	str	r3, [r7, #52]	@ 0x34
 8007632:	f001 ba1d 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800763a:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800763e:	430b      	orrs	r3, r1
 8007640:	d16e      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007642:	4b0f      	ldr	r3, [pc, #60]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007648:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800764c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800764e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007650:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007654:	d03d      	beq.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800765c:	d85c      	bhi.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800765e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007660:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007664:	d014      	beq.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007668:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800766c:	d854      	bhi.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800766e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007670:	2b00      	cmp	r3, #0
 8007672:	d01f      	beq.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007676:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800767a:	d012      	beq.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800767c:	e04c      	b.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800767e:	bf00      	nop
 8007680:	46020c00 	.word	0x46020c00
 8007684:	0007a120 	.word	0x0007a120
 8007688:	00f42400 	.word	0x00f42400
 800768c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007694:	4618      	mov	r0, r3
 8007696:	f7ff fa8b 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800769a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800769e:	f001 b9e7 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076a2:	f107 0318 	add.w	r3, r7, #24
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7ff fbdc 	bl	8006e64 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076b0:	f001 b9de 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80076b4:	4ba7      	ldr	r3, [pc, #668]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076c0:	d103      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80076c2:	4ba5      	ldr	r3, [pc, #660]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80076c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076c6:	f001 b9d3 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076ce:	f001 b9cf 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80076d2:	4ba0      	ldr	r3, [pc, #640]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0320 	and.w	r3, r3, #32
 80076da:	2b20      	cmp	r3, #32
 80076dc:	d118      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076de:	4b9d      	ldr	r3, [pc, #628]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80076ea:	4b9a      	ldr	r3, [pc, #616]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	0e1b      	lsrs	r3, r3, #24
 80076f0:	f003 030f 	and.w	r3, r3, #15
 80076f4:	e006      	b.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80076f6:	4b97      	ldr	r3, [pc, #604]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80076f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076fc:	041b      	lsls	r3, r3, #16
 80076fe:	0e1b      	lsrs	r3, r3, #24
 8007700:	f003 030f 	and.w	r3, r3, #15
 8007704:	4a95      	ldr	r2, [pc, #596]	@ (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800770a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800770c:	f001 b9b0 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007714:	f001 b9ac 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800771c:	f001 b9a8 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007724:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8007728:	430b      	orrs	r3, r1
 800772a:	d17f      	bne.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800772c:	4b89      	ldr	r3, [pc, #548]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800772e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007736:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	2b00      	cmp	r3, #0
 800773c:	d165      	bne.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800773e:	4b85      	ldr	r3, [pc, #532]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007744:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007748:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800774a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007750:	d034      	beq.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8007752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007754:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007758:	d853      	bhi.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800775a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007760:	d00b      	beq.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8007762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007764:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007768:	d84b      	bhi.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800776a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776c:	2b00      	cmp	r3, #0
 800776e:	d016      	beq.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8007770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007772:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007776:	d009      	beq.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007778:	e043      	b.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800777a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff fa16 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007786:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007788:	f001 b972 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800778c:	f107 0318 	add.w	r3, r7, #24
 8007790:	4618      	mov	r0, r3
 8007792:	f7ff fb67 	bl	8006e64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800779a:	f001 b969 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800779e:	4b6d      	ldr	r3, [pc, #436]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077aa:	d103      	bne.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 80077ac:	4b6a      	ldr	r3, [pc, #424]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077ae:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80077b0:	f001 b95e 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80077b8:	f001 b95a 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80077bc:	4b65      	ldr	r3, [pc, #404]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0320 	and.w	r3, r3, #32
 80077c4:	2b20      	cmp	r3, #32
 80077c6:	d118      	bne.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80077c8:	4b62      	ldr	r3, [pc, #392]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d005      	beq.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80077d4:	4b5f      	ldr	r3, [pc, #380]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	0e1b      	lsrs	r3, r3, #24
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	e006      	b.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80077e0:	4b5c      	ldr	r3, [pc, #368]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80077e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077e6:	041b      	lsls	r3, r3, #16
 80077e8:	0e1b      	lsrs	r3, r3, #24
 80077ea:	f003 030f 	and.w	r3, r3, #15
 80077ee:	4a5b      	ldr	r2, [pc, #364]	@ (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80077f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077f4:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80077f6:	f001 b93b 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 80077fa:	2300      	movs	r3, #0
 80077fc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80077fe:	f001 b937 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007806:	f001 b933 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007810:	d108      	bne.n	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff f9ca 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800781c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007820:	f001 b926 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	637b      	str	r3, [r7, #52]	@ 0x34
 8007828:	f001 b922 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800782c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007830:	1e51      	subs	r1, r2, #1
 8007832:	430b      	orrs	r3, r1
 8007834:	d136      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007836:	4b47      	ldr	r3, [pc, #284]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800783c:	f003 0303 	and.w	r3, r3, #3
 8007840:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007844:	2b00      	cmp	r3, #0
 8007846:	d104      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007848:	f7fe fa48 	bl	8005cdc <HAL_RCC_GetPCLK2Freq>
 800784c:	6378      	str	r0, [r7, #52]	@ 0x34
 800784e:	f001 b90f 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007854:	2b01      	cmp	r3, #1
 8007856:	d104      	bne.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007858:	f7fe f910 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 800785c:	6378      	str	r0, [r7, #52]	@ 0x34
 800785e:	f001 b907 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007862:	4b3c      	ldr	r3, [pc, #240]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800786a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800786e:	d106      	bne.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007872:	2b02      	cmp	r3, #2
 8007874:	d103      	bne.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8007876:	4b3a      	ldr	r3, [pc, #232]	@ (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007878:	637b      	str	r3, [r7, #52]	@ 0x34
 800787a:	f001 b8f9 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800787e:	4b35      	ldr	r3, [pc, #212]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b02      	cmp	r3, #2
 800788a:	d107      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800788c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788e:	2b03      	cmp	r3, #3
 8007890:	d104      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8007892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007896:	637b      	str	r3, [r7, #52]	@ 0x34
 8007898:	f001 b8ea 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800789c:	2300      	movs	r3, #0
 800789e:	637b      	str	r3, [r7, #52]	@ 0x34
 80078a0:	f001 b8e6 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80078a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078a8:	1e91      	subs	r1, r2, #2
 80078aa:	430b      	orrs	r3, r1
 80078ac:	d136      	bne.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80078ae:	4b29      	ldr	r3, [pc, #164]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80078b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078b4:	f003 030c 	and.w	r3, r3, #12
 80078b8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80078ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d104      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80078c0:	f7fe f9f8 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 80078c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80078c6:	f001 b8d3 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80078ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078cc:	2b04      	cmp	r3, #4
 80078ce:	d104      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078d0:	f7fe f8d4 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 80078d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80078d6:	f001 b8cb 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80078da:	4b1e      	ldr	r3, [pc, #120]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078e6:	d106      	bne.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80078e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ea:	2b08      	cmp	r3, #8
 80078ec:	d103      	bne.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80078ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80078f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078f2:	f001 b8bd 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80078f6:	4b17      	ldr	r3, [pc, #92]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80078f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b02      	cmp	r3, #2
 8007902:	d107      	bne.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007906:	2b0c      	cmp	r3, #12
 8007908:	d104      	bne.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800790a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800790e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007910:	f001 b8ae 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	637b      	str	r3, [r7, #52]	@ 0x34
 8007918:	f001 b8aa 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800791c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007920:	1f11      	subs	r1, r2, #4
 8007922:	430b      	orrs	r3, r1
 8007924:	d13f      	bne.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007926:	4b0b      	ldr	r3, [pc, #44]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800792c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007930:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007934:	2b00      	cmp	r3, #0
 8007936:	d104      	bne.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007938:	f7fe f9bc 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 800793c:	6378      	str	r0, [r7, #52]	@ 0x34
 800793e:	f001 b897 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007944:	2b10      	cmp	r3, #16
 8007946:	d10d      	bne.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007948:	f7fe f898 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 800794c:	6378      	str	r0, [r7, #52]	@ 0x34
 800794e:	f001 b88f 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007952:	bf00      	nop
 8007954:	46020c00 	.word	0x46020c00
 8007958:	02dc6c00 	.word	0x02dc6c00
 800795c:	0800eb08 	.word	0x0800eb08
 8007960:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007964:	4ba8      	ldr	r3, [pc, #672]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800796c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007970:	d106      	bne.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8007972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007974:	2b20      	cmp	r3, #32
 8007976:	d103      	bne.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8007978:	4ba4      	ldr	r3, [pc, #656]	@ (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800797a:	637b      	str	r3, [r7, #52]	@ 0x34
 800797c:	f001 b878 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007980:	4ba1      	ldr	r3, [pc, #644]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b02      	cmp	r3, #2
 800798c:	d107      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800798e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007990:	2b30      	cmp	r3, #48	@ 0x30
 8007992:	d104      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8007994:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007998:	637b      	str	r3, [r7, #52]	@ 0x34
 800799a:	f001 b869 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80079a2:	f001 b865 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80079a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079aa:	f1a2 0108 	sub.w	r1, r2, #8
 80079ae:	430b      	orrs	r3, r1
 80079b0:	d136      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80079b2:	4b95      	ldr	r3, [pc, #596]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079b8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80079bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d104      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80079c4:	f7fe f976 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 80079c8:	6378      	str	r0, [r7, #52]	@ 0x34
 80079ca:	f001 b851 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80079ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d0:	2b40      	cmp	r3, #64	@ 0x40
 80079d2:	d104      	bne.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80079d4:	f7fe f852 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 80079d8:	6378      	str	r0, [r7, #52]	@ 0x34
 80079da:	f001 b849 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80079de:	4b8a      	ldr	r3, [pc, #552]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079ea:	d106      	bne.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80079ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ee:	2b80      	cmp	r3, #128	@ 0x80
 80079f0:	d103      	bne.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80079f2:	4b86      	ldr	r3, [pc, #536]	@ (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80079f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f6:	f001 b83b 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80079fa:	4b83      	ldr	r3, [pc, #524]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a00:	f003 0302 	and.w	r3, r3, #2
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d107      	bne.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a0c:	d104      	bne.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8007a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a14:	f001 b82c 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a1c:	f001 b828 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a24:	f1a2 0110 	sub.w	r1, r2, #16
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	d139      	bne.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007a2c:	4b76      	ldr	r3, [pc, #472]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a36:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d104      	bne.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007a3e:	f7fe f939 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 8007a42:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a44:	f001 b814 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a4e:	d104      	bne.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a50:	f7fe f814 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8007a54:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a56:	f001 b80b 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007a5a:	4b6b      	ldr	r3, [pc, #428]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a66:	d107      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8007a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a6e:	d103      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8007a70:	4b66      	ldr	r3, [pc, #408]	@ (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a74:	f000 bffc 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007a78:	4b63      	ldr	r3, [pc, #396]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d108      	bne.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a8c:	d104      	bne.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8007a8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a94:	f000 bfec 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a9c:	f000 bfe8 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8007aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aa4:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8007aa8:	430b      	orrs	r3, r1
 8007aaa:	d139      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007aac:	4b56      	ldr	r3, [pc, #344]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007aae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ab2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007ab6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d104      	bne.n	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007abe:	f7fe f8f9 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 8007ac2:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ac4:	f000 bfd4 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ace:	d104      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007ad0:	f7fd ffd4 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8007ad4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ad6:	f000 bfcb 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007ada:	4b4b      	ldr	r3, [pc, #300]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ae6:	d107      	bne.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007aee:	d103      	bne.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8007af0:	4b46      	ldr	r3, [pc, #280]	@ (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007af4:	f000 bfbc 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007af8:	4b43      	ldr	r3, [pc, #268]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d108      	bne.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8007b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b0c:	d104      	bne.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8007b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b14:	f000 bfac 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b1c:	f000 bfa8 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b24:	f1a2 0120 	sub.w	r1, r2, #32
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	d158      	bne.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007b2c:	4b36      	ldr	r3, [pc, #216]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d104      	bne.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007b3e:	f7fe f8e1 	bl	8005d04 <HAL_RCC_GetPCLK3Freq>
 8007b42:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b44:	f000 bf94 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d104      	bne.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b4e:	f7fd ff95 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8007b52:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b54:	f000 bf8c 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007b58:	4b2b      	ldr	r3, [pc, #172]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b64:	d106      	bne.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d103      	bne.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8007b6c:	4b27      	ldr	r3, [pc, #156]	@ (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007b6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b70:	f000 bf7e 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007b74:	4b24      	ldr	r3, [pc, #144]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b7a:	f003 0302 	and.w	r3, r3, #2
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d107      	bne.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8007b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d104      	bne.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8007b88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b8e:	f000 bf6f 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007b92:	4b1d      	ldr	r3, [pc, #116]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0320 	and.w	r3, r3, #32
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	d11b      	bne.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	d118      	bne.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ba4:	4b18      	ldr	r3, [pc, #96]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8007bb0:	4b15      	ldr	r3, [pc, #84]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	0e1b      	lsrs	r3, r3, #24
 8007bb6:	f003 030f 	and.w	r3, r3, #15
 8007bba:	e006      	b.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8007bbc:	4b12      	ldr	r3, [pc, #72]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007bbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007bc2:	041b      	lsls	r3, r3, #16
 8007bc4:	0e1b      	lsrs	r3, r3, #24
 8007bc6:	f003 030f 	and.w	r3, r3, #15
 8007bca:	4a11      	ldr	r2, [pc, #68]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bd2:	f000 bf4d 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bda:	f000 bf49 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007bde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007be2:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007be6:	430b      	orrs	r3, r1
 8007be8:	d172      	bne.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007bea:	4b07      	ldr	r3, [pc, #28]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007bec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007bf0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007bf4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bfc:	d10a      	bne.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007bfe:	f7fd ff3d 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8007c02:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c04:	f000 bf34 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007c08:	46020c00 	.word	0x46020c00
 8007c0c:	00f42400 	.word	0x00f42400
 8007c10:	0800eb08 	.word	0x0800eb08
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c1a:	d108      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c1c:	f107 0318 	add.w	r3, r7, #24
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7ff f91f 	bl	8006e64 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c2a:	f000 bf21 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d104      	bne.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007c34:	f7fe f824 	bl	8005c80 <HAL_RCC_GetHCLKFreq>
 8007c38:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c3a:	f000 bf19 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c40:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007c44:	d122      	bne.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c46:	4bb0      	ldr	r3, [pc, #704]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0320 	and.w	r3, r3, #32
 8007c4e:	2b20      	cmp	r3, #32
 8007c50:	d118      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c52:	4bad      	ldr	r3, [pc, #692]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d005      	beq.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8007c5e:	4baa      	ldr	r3, [pc, #680]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	0e1b      	lsrs	r3, r3, #24
 8007c64:	f003 030f 	and.w	r3, r3, #15
 8007c68:	e006      	b.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8007c6a:	4ba7      	ldr	r3, [pc, #668]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007c6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c70:	041b      	lsls	r3, r3, #16
 8007c72:	0e1b      	lsrs	r3, r3, #24
 8007c74:	f003 030f 	and.w	r3, r3, #15
 8007c78:	4aa4      	ldr	r2, [pc, #656]	@ (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c80:	f000 bef6 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c88:	f000 bef2 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007c8c:	4b9e      	ldr	r3, [pc, #632]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c98:	d107      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ca0:	d103      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8007ca2:	4b9b      	ldr	r3, [pc, #620]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8007ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ca6:	f000 bee3 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007caa:	4b97      	ldr	r3, [pc, #604]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cb6:	d107      	bne.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cbe:	d103      	bne.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8007cc0:	4b93      	ldr	r3, [pc, #588]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8007cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cc4:	f000 bed4 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ccc:	f000 bed0 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007cd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	d158      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007cdc:	4b8a      	ldr	r3, [pc, #552]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007cde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ce2:	f003 0307 	and.w	r3, r3, #7
 8007ce6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d84b      	bhi.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8007cee:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8007cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf4:	08007d2d 	.word	0x08007d2d
 8007cf8:	08007d09 	.word	0x08007d09
 8007cfc:	08007d1b 	.word	0x08007d1b
 8007d00:	08007d37 	.word	0x08007d37
 8007d04:	08007d41 	.word	0x08007d41
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fe ff4f 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d16:	f000 beab 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d1a:	f107 030c 	add.w	r3, r7, #12
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7ff f9fa 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d28:	f000 bea2 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007d2c:	f7fd ffa8 	bl	8005c80 <HAL_RCC_GetHCLKFreq>
 8007d30:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007d32:	f000 be9d 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007d36:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007d3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d3c:	f000 be98 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007d40:	4b71      	ldr	r3, [pc, #452]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0320 	and.w	r3, r3, #32
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	d118      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d4c:	4b6e      	ldr	r3, [pc, #440]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d005      	beq.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007d58:	4b6b      	ldr	r3, [pc, #428]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	0e1b      	lsrs	r3, r3, #24
 8007d5e:	f003 030f 	and.w	r3, r3, #15
 8007d62:	e006      	b.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8007d64:	4b68      	ldr	r3, [pc, #416]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007d66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d6a:	041b      	lsls	r3, r3, #16
 8007d6c:	0e1b      	lsrs	r3, r3, #24
 8007d6e:	f003 030f 	and.w	r3, r3, #15
 8007d72:	4a66      	ldr	r2, [pc, #408]	@ (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d78:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007d7a:	f000 be79 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d82:	f000 be75 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d8a:	f000 be71 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d92:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007d96:	430b      	orrs	r3, r1
 8007d98:	d167      	bne.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007d9a:	4b5b      	ldr	r3, [pc, #364]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007da0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007da4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007dac:	d036      	beq.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8007dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007db4:	d855      	bhi.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007dbc:	d029      	beq.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007dc4:	d84d      	bhi.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dcc:	d013      	beq.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dd4:	d845      	bhi.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d015      	beq.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007de2:	d13e      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe fee1 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007df2:	f000 be3d 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007df6:	f107 030c 	add.w	r3, r7, #12
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7ff f98c 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e04:	f000 be34 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007e08:	f7fd ff3a 	bl	8005c80 <HAL_RCC_GetHCLKFreq>
 8007e0c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007e0e:	f000 be2f 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007e12:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007e16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e18:	f000 be2a 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0320 	and.w	r3, r3, #32
 8007e24:	2b20      	cmp	r3, #32
 8007e26:	d118      	bne.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e28:	4b37      	ldr	r3, [pc, #220]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d005      	beq.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8007e34:	4b34      	ldr	r3, [pc, #208]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	0e1b      	lsrs	r3, r3, #24
 8007e3a:	f003 030f 	and.w	r3, r3, #15
 8007e3e:	e006      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007e40:	4b31      	ldr	r3, [pc, #196]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e46:	041b      	lsls	r3, r3, #16
 8007e48:	0e1b      	lsrs	r3, r3, #24
 8007e4a:	f003 030f 	and.w	r3, r3, #15
 8007e4e:	4a2f      	ldr	r2, [pc, #188]	@ (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e54:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e56:	f000 be0b 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e5e:	f000 be07 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e66:	f000 be03 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e6e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007e72:	430b      	orrs	r3, r1
 8007e74:	d152      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007e76:	4b24      	ldr	r3, [pc, #144]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007e80:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d104      	bne.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e88:	f7fd ff14 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 8007e8c:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e8e:	f000 bdef 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e98:	d104      	bne.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e9a:	f7fd fdef 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8007e9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ea0:	f000 bde6 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007ea4:	4b18      	ldr	r3, [pc, #96]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007eb0:	d107      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007eb8:	d103      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8007eba:	4b15      	ldr	r3, [pc, #84]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8007ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ebe:	f000 bdd7 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007ec2:	4b11      	ldr	r3, [pc, #68]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0320 	and.w	r3, r3, #32
 8007eca:	2b20      	cmp	r3, #32
 8007ecc:	d122      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8007ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ed4:	d11e      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d005      	beq.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8007ee2:	4b09      	ldr	r3, [pc, #36]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	0e1b      	lsrs	r3, r3, #24
 8007ee8:	f003 030f 	and.w	r3, r3, #15
 8007eec:	e006      	b.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8007eee:	4b06      	ldr	r3, [pc, #24]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ef4:	041b      	lsls	r3, r3, #16
 8007ef6:	0e1b      	lsrs	r3, r3, #24
 8007ef8:	f003 030f 	and.w	r3, r3, #15
 8007efc:	4a03      	ldr	r2, [pc, #12]	@ (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f04:	f000 bdb4 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007f08:	46020c00 	.word	0x46020c00
 8007f0c:	0800eb08 	.word	0x0800eb08
 8007f10:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f18:	f000 bdaa 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f20:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007f24:	430b      	orrs	r3, r1
 8007f26:	d14c      	bne.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007f28:	4ba8      	ldr	r3, [pc, #672]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f2e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007f32:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d104      	bne.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007f3a:	f7fd febb 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 8007f3e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f40:	f000 bd96 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f4a:	d104      	bne.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f4c:	f7fd fd96 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8007f50:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f52:	f000 bd8d 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007f56:	4b9d      	ldr	r3, [pc, #628]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f62:	d107      	bne.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8007f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f6a:	d103      	bne.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 8007f6c:	4b98      	ldr	r3, [pc, #608]	@ (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f70:	f000 bd7e 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007f74:	4b95      	ldr	r3, [pc, #596]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0320 	and.w	r3, r3, #32
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	d11c      	bne.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8007f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f86:	d118      	bne.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f88:	4b90      	ldr	r3, [pc, #576]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d005      	beq.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8007f94:	4b8d      	ldr	r3, [pc, #564]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	0e1b      	lsrs	r3, r3, #24
 8007f9a:	f003 030f 	and.w	r3, r3, #15
 8007f9e:	e006      	b.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8007fa0:	4b8a      	ldr	r3, [pc, #552]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007fa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007fa6:	041b      	lsls	r3, r3, #16
 8007fa8:	0e1b      	lsrs	r3, r3, #24
 8007faa:	f003 030f 	and.w	r3, r3, #15
 8007fae:	4a89      	ldr	r2, [pc, #548]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fb6:	f000 bd5b 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fbe:	f000 bd57 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fc6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007fca:	430b      	orrs	r3, r1
 8007fcc:	d158      	bne.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007fce:	4b7f      	ldr	r3, [pc, #508]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fd4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007fd8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fdc:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fde:	d028      	beq.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fe4:	d848      	bhi.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe8:	2b80      	cmp	r3, #128	@ 0x80
 8007fea:	d00e      	beq.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fee:	2b80      	cmp	r3, #128	@ 0x80
 8007ff0:	d842      	bhi.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d003      	beq.n	8008000 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffa:	2b40      	cmp	r3, #64	@ 0x40
 8007ffc:	d014      	beq.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8007ffe:	e03b      	b.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8008000:	f7fd fe80 	bl	8005d04 <HAL_RCC_GetPCLK3Freq>
 8008004:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008006:	f000 bd33 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800800a:	4b70      	ldr	r3, [pc, #448]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008016:	d103      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8008018:	4b6d      	ldr	r3, [pc, #436]	@ (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800801a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800801c:	f000 bd28 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008024:	f000 bd24 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8008028:	f7fd fd28 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 800802c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800802e:	f000 bd1f 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008032:	4b66      	ldr	r3, [pc, #408]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0320 	and.w	r3, r3, #32
 800803a:	2b20      	cmp	r3, #32
 800803c:	d118      	bne.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800803e:	4b63      	ldr	r3, [pc, #396]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d005      	beq.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800804a:	4b60      	ldr	r3, [pc, #384]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	0e1b      	lsrs	r3, r3, #24
 8008050:	f003 030f 	and.w	r3, r3, #15
 8008054:	e006      	b.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8008056:	4b5d      	ldr	r3, [pc, #372]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008058:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800805c:	041b      	lsls	r3, r3, #16
 800805e:	0e1b      	lsrs	r3, r3, #24
 8008060:	f003 030f 	and.w	r3, r3, #15
 8008064:	4a5b      	ldr	r2, [pc, #364]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8008066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800806a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800806c:	f000 bd00 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008074:	f000 bcfc 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 8008078:	2300      	movs	r3, #0
 800807a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800807c:	f000 bcf8 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008084:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8008088:	430b      	orrs	r3, r1
 800808a:	d14c      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800808c:	4b4f      	ldr	r3, [pc, #316]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800808e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008092:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008096:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8008098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809a:	2b00      	cmp	r3, #0
 800809c:	d104      	bne.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800809e:	f7fd fe09 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 80080a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80080a4:	f000 bce4 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80080a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080ae:	d104      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80080b0:	f7fd fce4 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 80080b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80080b6:	f000 bcdb 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80080ba:	4b44      	ldr	r3, [pc, #272]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080c6:	d107      	bne.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 80080c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080ce:	d103      	bne.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 80080d0:	4b3f      	ldr	r3, [pc, #252]	@ (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80080d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80080d4:	f000 bccc 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80080d8:	4b3c      	ldr	r3, [pc, #240]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0320 	and.w	r3, r3, #32
 80080e0:	2b20      	cmp	r3, #32
 80080e2:	d11c      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80080e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80080ea:	d118      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080ec:	4b37      	ldr	r3, [pc, #220]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d005      	beq.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80080f8:	4b34      	ldr	r3, [pc, #208]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	0e1b      	lsrs	r3, r3, #24
 80080fe:	f003 030f 	and.w	r3, r3, #15
 8008102:	e006      	b.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8008104:	4b31      	ldr	r3, [pc, #196]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800810a:	041b      	lsls	r3, r3, #16
 800810c:	0e1b      	lsrs	r3, r3, #24
 800810e:	f003 030f 	and.w	r3, r3, #15
 8008112:	4a30      	ldr	r2, [pc, #192]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8008114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008118:	637b      	str	r3, [r7, #52]	@ 0x34
 800811a:	f000 bca9 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	637b      	str	r3, [r7, #52]	@ 0x34
 8008122:	f000 bca5 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8008126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800812a:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800812e:	430b      	orrs	r3, r1
 8008130:	d152      	bne.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8008132:	4b26      	ldr	r3, [pc, #152]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008134:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008138:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800813c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800813e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008140:	2b00      	cmp	r3, #0
 8008142:	d104      	bne.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008144:	f7fd fdb6 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 8008148:	6378      	str	r0, [r7, #52]	@ 0x34
 800814a:	f000 bc91 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800814e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008150:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008154:	d104      	bne.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008156:	f7fd fc91 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 800815a:	6378      	str	r0, [r7, #52]	@ 0x34
 800815c:	f000 bc88 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8008160:	4b1a      	ldr	r3, [pc, #104]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800816c:	d107      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800816e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008170:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008174:	d103      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8008176:	4b16      	ldr	r3, [pc, #88]	@ (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008178:	637b      	str	r3, [r7, #52]	@ 0x34
 800817a:	f000 bc79 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800817e:	4b13      	ldr	r3, [pc, #76]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b20      	cmp	r3, #32
 8008188:	d11c      	bne.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800818a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008190:	d118      	bne.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008192:	4b0e      	ldr	r3, [pc, #56]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d005      	beq.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800819e:	4b0b      	ldr	r3, [pc, #44]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	0e1b      	lsrs	r3, r3, #24
 80081a4:	f003 030f 	and.w	r3, r3, #15
 80081a8:	e006      	b.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 80081aa:	4b08      	ldr	r3, [pc, #32]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80081ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081b0:	041b      	lsls	r3, r3, #16
 80081b2:	0e1b      	lsrs	r3, r3, #24
 80081b4:	f003 030f 	and.w	r3, r3, #15
 80081b8:	4a06      	ldr	r2, [pc, #24]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80081ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081be:	637b      	str	r3, [r7, #52]	@ 0x34
 80081c0:	f000 bc56 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80081c8:	f000 bc52 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80081cc:	46020c00 	.word	0x46020c00
 80081d0:	00f42400 	.word	0x00f42400
 80081d4:	0800eb08 	.word	0x0800eb08
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 80081d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081dc:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 80081e0:	430b      	orrs	r3, r1
 80081e2:	d14a      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 80081e4:	4ba5      	ldr	r3, [pc, #660]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80081e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80081ea:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80081ee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 80081f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d104      	bne.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80081f6:	f7fd fd5d 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 80081fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80081fc:	f000 bc38 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8008200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008202:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008206:	d104      	bne.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008208:	f7fd fc38 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 800820c:	6378      	str	r0, [r7, #52]	@ 0x34
 800820e:	f000 bc2f 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8008212:	4b9a      	ldr	r3, [pc, #616]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800821a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800821e:	d107      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008222:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008226:	d103      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8008228:	4b95      	ldr	r3, [pc, #596]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800822a:	637b      	str	r3, [r7, #52]	@ 0x34
 800822c:	f000 bc20 	b.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8008230:	4b92      	ldr	r3, [pc, #584]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0320 	and.w	r3, r3, #32
 8008238:	2b20      	cmp	r3, #32
 800823a:	d11b      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 800823c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008242:	d117      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008244:	4b8d      	ldr	r3, [pc, #564]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d005      	beq.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 8008250:	4b8a      	ldr	r3, [pc, #552]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	0e1b      	lsrs	r3, r3, #24
 8008256:	f003 030f 	and.w	r3, r3, #15
 800825a:	e006      	b.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800825c:	4b87      	ldr	r3, [pc, #540]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800825e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008262:	041b      	lsls	r3, r3, #16
 8008264:	0e1b      	lsrs	r3, r3, #24
 8008266:	f003 030f 	and.w	r3, r3, #15
 800826a:	4a86      	ldr	r2, [pc, #536]	@ (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800826c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008270:	637b      	str	r3, [r7, #52]	@ 0x34
 8008272:	e3fd      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	637b      	str	r3, [r7, #52]	@ 0x34
 8008278:	e3fa      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800827a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800827e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008282:	430b      	orrs	r3, r1
 8008284:	d164      	bne.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8008286:	4b7d      	ldr	r3, [pc, #500]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800828c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008290:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8008292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008294:	2b00      	cmp	r3, #0
 8008296:	d120      	bne.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008298:	4b78      	ldr	r3, [pc, #480]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0320 	and.w	r3, r3, #32
 80082a0:	2b20      	cmp	r3, #32
 80082a2:	d117      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082a4:	4b75      	ldr	r3, [pc, #468]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d005      	beq.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 80082b0:	4b72      	ldr	r3, [pc, #456]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	0e1b      	lsrs	r3, r3, #24
 80082b6:	f003 030f 	and.w	r3, r3, #15
 80082ba:	e006      	b.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 80082bc:	4b6f      	ldr	r3, [pc, #444]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80082be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082c2:	041b      	lsls	r3, r3, #16
 80082c4:	0e1b      	lsrs	r3, r3, #24
 80082c6:	f003 030f 	and.w	r3, r3, #15
 80082ca:	4a6e      	ldr	r2, [pc, #440]	@ (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80082cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80082d2:	e3cd      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80082d8:	e3ca      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80082da:	4b68      	ldr	r3, [pc, #416]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80082dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082e8:	d112      	bne.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 80082ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082f0:	d10e      	bne.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80082f2:	4b62      	ldr	r3, [pc, #392]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80082f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008300:	d102      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 8008302:	23fa      	movs	r3, #250	@ 0xfa
 8008304:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008306:	e3b3      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8008308:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800830c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800830e:	e3af      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8008310:	4b5a      	ldr	r3, [pc, #360]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008318:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800831c:	d106      	bne.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800831e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008324:	d102      	bne.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 8008326:	4b56      	ldr	r3, [pc, #344]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008328:	637b      	str	r3, [r7, #52]	@ 0x34
 800832a:	e3a1      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800832c:	4b53      	ldr	r3, [pc, #332]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800832e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008332:	f003 0302 	and.w	r3, r3, #2
 8008336:	2b02      	cmp	r3, #2
 8008338:	d107      	bne.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 800833a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008340:	d103      	bne.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 8008342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008346:	637b      	str	r3, [r7, #52]	@ 0x34
 8008348:	e392      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	637b      	str	r3, [r7, #52]	@ 0x34
 800834e:	e38f      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008354:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008358:	430b      	orrs	r3, r1
 800835a:	d164      	bne.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800835c:	4b47      	ldr	r3, [pc, #284]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800835e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008362:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008366:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8008368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836a:	2b00      	cmp	r3, #0
 800836c:	d120      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800836e:	4b43      	ldr	r3, [pc, #268]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0320 	and.w	r3, r3, #32
 8008376:	2b20      	cmp	r3, #32
 8008378:	d117      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800837a:	4b40      	ldr	r3, [pc, #256]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d005      	beq.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 8008386:	4b3d      	ldr	r3, [pc, #244]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	0e1b      	lsrs	r3, r3, #24
 800838c:	f003 030f 	and.w	r3, r3, #15
 8008390:	e006      	b.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8008392:	4b3a      	ldr	r3, [pc, #232]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008394:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008398:	041b      	lsls	r3, r3, #16
 800839a:	0e1b      	lsrs	r3, r3, #24
 800839c:	f003 030f 	and.w	r3, r3, #15
 80083a0:	4a38      	ldr	r2, [pc, #224]	@ (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80083a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80083a8:	e362      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ae:	e35f      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80083b0:	4b32      	ldr	r3, [pc, #200]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80083b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083be:	d112      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 80083c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083c6:	d10e      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083c8:	4b2c      	ldr	r3, [pc, #176]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80083ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083d6:	d102      	bne.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 80083d8:	23fa      	movs	r3, #250	@ 0xfa
 80083da:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083dc:	e348      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80083de:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80083e2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083e4:	e344      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80083e6:	4b25      	ldr	r3, [pc, #148]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083f2:	d106      	bne.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 80083f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083fa:	d102      	bne.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 80083fc:	4b20      	ldr	r3, [pc, #128]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80083fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008400:	e336      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008402:	4b1e      	ldr	r3, [pc, #120]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008404:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008408:	f003 0302 	and.w	r3, r3, #2
 800840c:	2b02      	cmp	r3, #2
 800840e:	d107      	bne.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 8008410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008412:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008416:	d103      	bne.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 8008418:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800841c:	637b      	str	r3, [r7, #52]	@ 0x34
 800841e:	e327      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	637b      	str	r3, [r7, #52]	@ 0x34
 8008424:	e324      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8008426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800842a:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800842e:	430b      	orrs	r3, r1
 8008430:	d14e      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008432:	4b12      	ldr	r3, [pc, #72]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008438:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800843c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800843e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008440:	2b00      	cmp	r3, #0
 8008442:	d103      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008444:	f7fd fc36 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 8008448:	6378      	str	r0, [r7, #52]	@ 0x34
 800844a:	e311      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800844c:	4b0b      	ldr	r3, [pc, #44]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800844e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008452:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008456:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800845a:	d119      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 800845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008462:	d115      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008464:	4b05      	ldr	r3, [pc, #20]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008466:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800846a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800846e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008472:	d109      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 8008474:	23fa      	movs	r3, #250	@ 0xfa
 8008476:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008478:	e2fa      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800847a:	bf00      	nop
 800847c:	46020c00 	.word	0x46020c00
 8008480:	00f42400 	.word	0x00f42400
 8008484:	0800eb08 	.word	0x0800eb08
      }
      else
      {
        frequency = LSI_VALUE;
 8008488:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800848c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800848e:	e2ef      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008490:	4ba8      	ldr	r3, [pc, #672]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800849c:	d106      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 800849e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80084a4:	d102      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 80084a6:	4ba4      	ldr	r3, [pc, #656]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80084a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80084aa:	e2e1      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80084ac:	4ba1      	ldr	r3, [pc, #644]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80084ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d107      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 80084ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80084c0:	d103      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 80084c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80084c8:	e2d2      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80084ce:	e2cf      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80084d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084d4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80084d8:	430b      	orrs	r3, r1
 80084da:	d12d      	bne.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80084dc:	4b95      	ldr	r3, [pc, #596]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80084de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084e2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80084e6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80084e8:	4b92      	ldr	r3, [pc, #584]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084f4:	d105      	bne.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 80084f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d102      	bne.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 80084fc:	4b8e      	ldr	r3, [pc, #568]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80084fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008500:	e2b6      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8008502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008504:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008508:	d107      	bne.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800850a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800850e:	4618      	mov	r0, r3
 8008510:	f7fe fb4e 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008516:	637b      	str	r3, [r7, #52]	@ 0x34
 8008518:	e2aa      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800851a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008520:	d107      	bne.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008522:	f107 0318 	add.w	r3, r7, #24
 8008526:	4618      	mov	r0, r3
 8008528:	f7fe fc9c 	bl	8006e64 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008530:	e29e      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	637b      	str	r3, [r7, #52]	@ 0x34
 8008536:	e29b      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800853c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8008540:	430b      	orrs	r3, r1
 8008542:	d156      	bne.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008544:	4b7b      	ldr	r3, [pc, #492]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800854a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800854e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008552:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008556:	d028      	beq.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 8008558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800855e:	d845      	bhi.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8008560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008562:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008566:	d013      	beq.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 8008568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800856e:	d83d      	bhi.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8008570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008572:	2b00      	cmp	r3, #0
 8008574:	d004      	beq.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 8008576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008578:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800857c:	d004      	beq.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 800857e:	e035      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008580:	f7fd fbac 	bl	8005cdc <HAL_RCC_GetPCLK2Freq>
 8008584:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008586:	e273      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008588:	f7fd fa78 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 800858c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800858e:	e26f      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008590:	4b68      	ldr	r3, [pc, #416]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800859c:	d102      	bne.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 800859e:	4b66      	ldr	r3, [pc, #408]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80085a0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80085a2:	e265      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085a8:	e262      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80085aa:	4b62      	ldr	r3, [pc, #392]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0320 	and.w	r3, r3, #32
 80085b2:	2b20      	cmp	r3, #32
 80085b4:	d117      	bne.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80085b6:	4b5f      	ldr	r3, [pc, #380]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d005      	beq.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 80085c2:	4b5c      	ldr	r3, [pc, #368]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	0e1b      	lsrs	r3, r3, #24
 80085c8:	f003 030f 	and.w	r3, r3, #15
 80085cc:	e006      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 80085ce:	4b59      	ldr	r3, [pc, #356]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80085d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80085d4:	041b      	lsls	r3, r3, #16
 80085d6:	0e1b      	lsrs	r3, r3, #24
 80085d8:	f003 030f 	and.w	r3, r3, #15
 80085dc:	4a57      	ldr	r2, [pc, #348]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80085de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085e2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80085e4:	e244      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80085e6:	2300      	movs	r3, #0
 80085e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085ea:	e241      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80085ec:	2300      	movs	r3, #0
 80085ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085f0:	e23e      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80085f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085f6:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80085fa:	430b      	orrs	r3, r1
 80085fc:	d156      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80085fe:	4b4d      	ldr	r3, [pc, #308]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008604:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008608:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008610:	d028      	beq.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 8008612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008614:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008618:	d845      	bhi.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800861a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008620:	d013      	beq.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8008622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008624:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008628:	d83d      	bhi.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800862a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862c:	2b00      	cmp	r3, #0
 800862e:	d004      	beq.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8008630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008636:	d004      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8008638:	e035      	b.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800863a:	f7fd fb3b 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 800863e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008640:	e216      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008642:	f7fd fa1b 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8008646:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008648:	e212      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800864a:	4b3a      	ldr	r3, [pc, #232]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008656:	d102      	bne.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 8008658:	4b37      	ldr	r3, [pc, #220]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800865a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800865c:	e208      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008662:	e205      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008664:	4b33      	ldr	r3, [pc, #204]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 0320 	and.w	r3, r3, #32
 800866c:	2b20      	cmp	r3, #32
 800866e:	d117      	bne.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008670:	4b30      	ldr	r3, [pc, #192]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008678:	2b00      	cmp	r3, #0
 800867a:	d005      	beq.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 800867c:	4b2d      	ldr	r3, [pc, #180]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	0e1b      	lsrs	r3, r3, #24
 8008682:	f003 030f 	and.w	r3, r3, #15
 8008686:	e006      	b.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 8008688:	4b2a      	ldr	r3, [pc, #168]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800868a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800868e:	041b      	lsls	r3, r3, #16
 8008690:	0e1b      	lsrs	r3, r3, #24
 8008692:	f003 030f 	and.w	r3, r3, #15
 8008696:	4a29      	ldr	r2, [pc, #164]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8008698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800869c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800869e:	e1e7      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086a4:	e1e4      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086aa:	e1e1      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80086ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086b0:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80086b4:	430b      	orrs	r3, r1
 80086b6:	d17c      	bne.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80086b8:	4b1e      	ldr	r3, [pc, #120]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80086ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086be:	f003 0318 	and.w	r3, r3, #24
 80086c2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80086c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c6:	2b18      	cmp	r3, #24
 80086c8:	d870      	bhi.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 80086ca:	a201      	add	r2, pc, #4	@ (adr r2, 80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 80086cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d0:	08008741 	.word	0x08008741
 80086d4:	080087ad 	.word	0x080087ad
 80086d8:	080087ad 	.word	0x080087ad
 80086dc:	080087ad 	.word	0x080087ad
 80086e0:	080087ad 	.word	0x080087ad
 80086e4:	080087ad 	.word	0x080087ad
 80086e8:	080087ad 	.word	0x080087ad
 80086ec:	080087ad 	.word	0x080087ad
 80086f0:	08008749 	.word	0x08008749
 80086f4:	080087ad 	.word	0x080087ad
 80086f8:	080087ad 	.word	0x080087ad
 80086fc:	080087ad 	.word	0x080087ad
 8008700:	080087ad 	.word	0x080087ad
 8008704:	080087ad 	.word	0x080087ad
 8008708:	080087ad 	.word	0x080087ad
 800870c:	080087ad 	.word	0x080087ad
 8008710:	08008751 	.word	0x08008751
 8008714:	080087ad 	.word	0x080087ad
 8008718:	080087ad 	.word	0x080087ad
 800871c:	080087ad 	.word	0x080087ad
 8008720:	080087ad 	.word	0x080087ad
 8008724:	080087ad 	.word	0x080087ad
 8008728:	080087ad 	.word	0x080087ad
 800872c:	080087ad 	.word	0x080087ad
 8008730:	0800876b 	.word	0x0800876b
 8008734:	46020c00 	.word	0x46020c00
 8008738:	00f42400 	.word	0x00f42400
 800873c:	0800eb08 	.word	0x0800eb08
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008740:	f7fd fae0 	bl	8005d04 <HAL_RCC_GetPCLK3Freq>
 8008744:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008746:	e193      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008748:	f7fd f998 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 800874c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800874e:	e18f      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008750:	4b9f      	ldr	r3, [pc, #636]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800875c:	d102      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 800875e:	4b9d      	ldr	r3, [pc, #628]	@ (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8008760:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008762:	e185      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008768:	e182      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800876a:	4b99      	ldr	r3, [pc, #612]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0320 	and.w	r3, r3, #32
 8008772:	2b20      	cmp	r3, #32
 8008774:	d117      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008776:	4b96      	ldr	r3, [pc, #600]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d005      	beq.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 8008782:	4b93      	ldr	r3, [pc, #588]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	0e1b      	lsrs	r3, r3, #24
 8008788:	f003 030f 	and.w	r3, r3, #15
 800878c:	e006      	b.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 800878e:	4b90      	ldr	r3, [pc, #576]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008790:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008794:	041b      	lsls	r3, r3, #16
 8008796:	0e1b      	lsrs	r3, r3, #24
 8008798:	f003 030f 	and.w	r3, r3, #15
 800879c:	4a8e      	ldr	r2, [pc, #568]	@ (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800879e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087a4:	e164      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087aa:	e161      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087b0:	e15e      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80087b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087b6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80087ba:	430b      	orrs	r3, r1
 80087bc:	d155      	bne.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80087be:	4b84      	ldr	r3, [pc, #528]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80087c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80087c4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80087c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80087ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087d0:	d013      	beq.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087d8:	d844      	bhi.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 80087da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087e0:	d013      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 80087e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087e8:	d83c      	bhi.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 80087ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d014      	beq.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 80087f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087f6:	d014      	beq.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 80087f8:	e034      	b.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087fa:	f107 0318 	add.w	r3, r7, #24
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe fb30 	bl	8006e64 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008808:	e132      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800880a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800880e:	4618      	mov	r0, r3
 8008810:	f7fe f9ce 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008816:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008818:	e12a      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800881a:	f7fd f92f 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 800881e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008820:	e126      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008822:	4b6b      	ldr	r3, [pc, #428]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0320 	and.w	r3, r3, #32
 800882a:	2b20      	cmp	r3, #32
 800882c:	d117      	bne.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800882e:	4b68      	ldr	r3, [pc, #416]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d005      	beq.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 800883a:	4b65      	ldr	r3, [pc, #404]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	0e1b      	lsrs	r3, r3, #24
 8008840:	f003 030f 	and.w	r3, r3, #15
 8008844:	e006      	b.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 8008846:	4b62      	ldr	r3, [pc, #392]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008848:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800884c:	041b      	lsls	r3, r3, #16
 800884e:	0e1b      	lsrs	r3, r3, #24
 8008850:	f003 030f 	and.w	r3, r3, #15
 8008854:	4a60      	ldr	r2, [pc, #384]	@ (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800885a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800885c:	e108      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800885e:	2300      	movs	r3, #0
 8008860:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008862:	e105      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8008864:	2300      	movs	r3, #0
 8008866:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008868:	e102      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800886a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800886e:	1e59      	subs	r1, r3, #1
 8008870:	ea52 0301 	orrs.w	r3, r2, r1
 8008874:	d13c      	bne.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8008876:	4b56      	ldr	r3, [pc, #344]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008878:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800887c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008880:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008884:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008888:	d027      	beq.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 800888a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008890:	d82b      	bhi.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8008892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008894:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008898:	d017      	beq.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088a0:	d823      	bhi.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d004      	beq.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 80088a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088ae:	d004      	beq.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 80088b0:	e01b      	b.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80088b2:	f7fd f8e3 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 80088b6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80088b8:	e0da      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe f976 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80088c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088c8:	e0d2      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ca:	f107 0318 	add.w	r3, r7, #24
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe fac8 	bl	8006e64 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088d8:	e0ca      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088da:	f107 030c 	add.w	r3, r7, #12
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fe fc1a 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088e8:	e0c2      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088ee:	e0bf      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80088f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088f4:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80088f8:	430b      	orrs	r3, r1
 80088fa:	d131      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80088fc:	4b34      	ldr	r3, [pc, #208]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80088fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008902:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008906:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008908:	4b31      	ldr	r3, [pc, #196]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800890a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800890e:	f003 0302 	and.w	r3, r3, #2
 8008912:	2b02      	cmp	r3, #2
 8008914:	d106      	bne.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 8008916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008918:	2b00      	cmp	r3, #0
 800891a:	d103      	bne.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 800891c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008920:	637b      	str	r3, [r7, #52]	@ 0x34
 8008922:	e0a5      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008924:	4b2a      	ldr	r3, [pc, #168]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800892a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800892e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008932:	d112      	bne.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 8008934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800893a:	d10e      	bne.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800893c:	4b24      	ldr	r3, [pc, #144]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800893e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008946:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800894a:	d102      	bne.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 800894c:	23fa      	movs	r3, #250	@ 0xfa
 800894e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008950:	e08e      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8008952:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008956:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008958:	e08a      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	637b      	str	r3, [r7, #52]	@ 0x34
 800895e:	e087      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008964:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008968:	430b      	orrs	r3, r1
 800896a:	d13b      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800896c:	4b18      	ldr	r3, [pc, #96]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800896e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008972:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008976:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008978:	4b15      	ldr	r3, [pc, #84]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008980:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008984:	d105      	bne.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 8008986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008988:	2b00      	cmp	r3, #0
 800898a:	d102      	bne.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 800898c:	4b13      	ldr	r3, [pc, #76]	@ (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800898e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008990:	e06e      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008992:	4b0f      	ldr	r3, [pc, #60]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800899a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800899e:	d106      	bne.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 80089a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089a6:	d102      	bne.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 80089a8:	4b0d      	ldr	r3, [pc, #52]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 80089aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ac:	e060      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80089ae:	4b08      	ldr	r3, [pc, #32]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089ba:	d106      	bne.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 80089bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089c2:	d102      	bne.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 80089c4:	4b03      	ldr	r3, [pc, #12]	@ (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80089c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80089c8:	e052      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ce:	e04f      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80089d0:	46020c00 	.word	0x46020c00
 80089d4:	00f42400 	.word	0x00f42400
 80089d8:	0800eb08 	.word	0x0800eb08
 80089dc:	02dc6c00 	.word	0x02dc6c00
 80089e0:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 80089e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089e8:	f1a3 0108 	sub.w	r1, r3, #8
 80089ec:	ea52 0301 	orrs.w	r3, r2, r1
 80089f0:	d13c      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 80089f2:	4b22      	ldr	r3, [pc, #136]	@ (8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80089f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80089f8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80089fc:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 80089fe:	4b1f      	ldr	r3, [pc, #124]	@ (8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a0a:	d105      	bne.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d102      	bne.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 8008a12:	4b1b      	ldr	r3, [pc, #108]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 8008a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a16:	e02b      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8008a18:	4b18      	ldr	r3, [pc, #96]	@ (8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a24:	d106      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 8008a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a2c:	d102      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 8008a2e:	4b15      	ldr	r3, [pc, #84]	@ (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8008a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a32:	e01d      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8008a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a3a:	d107      	bne.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fe f8b5 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a4a:	e011      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008a52:	d108      	bne.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7fe f8a9 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a60:	085b      	lsrs	r3, r3, #1
 8008a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a64:	e004      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a6a:	e001      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8008a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3738      	adds	r7, #56	@ 0x38
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	46020c00 	.word	0x46020c00
 8008a80:	00f42400 	.word	0x00f42400
 8008a84:	007a1200 	.word	0x007a1200

08008a88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008a90:	4b47      	ldr	r3, [pc, #284]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a46      	ldr	r2, [pc, #280]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008a96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008a9a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a9c:	f7f9 fc86 	bl	80023ac <HAL_GetTick>
 8008aa0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008aa2:	e008      	b.n	8008ab6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008aa4:	f7f9 fc82 	bl	80023ac <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d901      	bls.n	8008ab6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e077      	b.n	8008ba6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1f0      	bne.n	8008aa4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008aca:	f023 0303 	bic.w	r3, r3, #3
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	6811      	ldr	r1, [r2, #0]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	6852      	ldr	r2, [r2, #4]
 8008ad6:	3a01      	subs	r2, #1
 8008ad8:	0212      	lsls	r2, r2, #8
 8008ada:	430a      	orrs	r2, r1
 8008adc:	4934      	ldr	r1, [pc, #208]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008ae2:	4b33      	ldr	r3, [pc, #204]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008ae4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ae6:	4b33      	ldr	r3, [pc, #204]	@ (8008bb4 <RCCEx_PLL2_Config+0x12c>)
 8008ae8:	4013      	ands	r3, r2
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6892      	ldr	r2, [r2, #8]
 8008aee:	3a01      	subs	r2, #1
 8008af0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	68d2      	ldr	r2, [r2, #12]
 8008af8:	3a01      	subs	r2, #1
 8008afa:	0252      	lsls	r2, r2, #9
 8008afc:	b292      	uxth	r2, r2
 8008afe:	4311      	orrs	r1, r2
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	6912      	ldr	r2, [r2, #16]
 8008b04:	3a01      	subs	r2, #1
 8008b06:	0412      	lsls	r2, r2, #16
 8008b08:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008b0c:	4311      	orrs	r1, r2
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	6952      	ldr	r2, [r2, #20]
 8008b12:	3a01      	subs	r2, #1
 8008b14:	0612      	lsls	r2, r2, #24
 8008b16:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	4924      	ldr	r1, [pc, #144]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008b22:	4b23      	ldr	r3, [pc, #140]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b26:	f023 020c 	bic.w	r2, r3, #12
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	4920      	ldr	r1, [pc, #128]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008b30:	4313      	orrs	r3, r2
 8008b32:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008b34:	4b1e      	ldr	r3, [pc, #120]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a1b      	ldr	r3, [r3, #32]
 8008b3c:	491c      	ldr	r1, [pc, #112]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008b42:	4b1b      	ldr	r3, [pc, #108]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b46:	4a1a      	ldr	r2, [pc, #104]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008b48:	f023 0310 	bic.w	r3, r3, #16
 8008b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b4e:	4b18      	ldr	r3, [pc, #96]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b56:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	69d2      	ldr	r2, [r2, #28]
 8008b5e:	00d2      	lsls	r2, r2, #3
 8008b60:	4913      	ldr	r1, [pc, #76]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008b66:	4b12      	ldr	r3, [pc, #72]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6a:	4a11      	ldr	r2, [pc, #68]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008b6c:	f043 0310 	orr.w	r3, r3, #16
 8008b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008b72:	4b0f      	ldr	r3, [pc, #60]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a0e      	ldr	r2, [pc, #56]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008b78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b7c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b7e:	f7f9 fc15 	bl	80023ac <HAL_GetTick>
 8008b82:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b84:	e008      	b.n	8008b98 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b86:	f7f9 fc11 	bl	80023ac <HAL_GetTick>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d901      	bls.n	8008b98 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008b94:	2303      	movs	r3, #3
 8008b96:	e006      	b.n	8008ba6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b98:	4b05      	ldr	r3, [pc, #20]	@ (8008bb0 <RCCEx_PLL2_Config+0x128>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d0f0      	beq.n	8008b86 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0

}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	46020c00 	.word	0x46020c00
 8008bb4:	80800000 	.word	0x80800000

08008bb8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008bc0:	4b47      	ldr	r3, [pc, #284]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a46      	ldr	r2, [pc, #280]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008bcc:	f7f9 fbee 	bl	80023ac <HAL_GetTick>
 8008bd0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bd2:	e008      	b.n	8008be6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008bd4:	f7f9 fbea 	bl	80023ac <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d901      	bls.n	8008be6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e077      	b.n	8008cd6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008be6:	4b3e      	ldr	r3, [pc, #248]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1f0      	bne.n	8008bd4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008bfa:	f023 0303 	bic.w	r3, r3, #3
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	6811      	ldr	r1, [r2, #0]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	6852      	ldr	r2, [r2, #4]
 8008c06:	3a01      	subs	r2, #1
 8008c08:	0212      	lsls	r2, r2, #8
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	4934      	ldr	r1, [pc, #208]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	630b      	str	r3, [r1, #48]	@ 0x30
 8008c12:	4b33      	ldr	r3, [pc, #204]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c16:	4b33      	ldr	r3, [pc, #204]	@ (8008ce4 <RCCEx_PLL3_Config+0x12c>)
 8008c18:	4013      	ands	r3, r2
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	6892      	ldr	r2, [r2, #8]
 8008c1e:	3a01      	subs	r2, #1
 8008c20:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	68d2      	ldr	r2, [r2, #12]
 8008c28:	3a01      	subs	r2, #1
 8008c2a:	0252      	lsls	r2, r2, #9
 8008c2c:	b292      	uxth	r2, r2
 8008c2e:	4311      	orrs	r1, r2
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	6912      	ldr	r2, [r2, #16]
 8008c34:	3a01      	subs	r2, #1
 8008c36:	0412      	lsls	r2, r2, #16
 8008c38:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008c3c:	4311      	orrs	r1, r2
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	6952      	ldr	r2, [r2, #20]
 8008c42:	3a01      	subs	r2, #1
 8008c44:	0612      	lsls	r2, r2, #24
 8008c46:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	4924      	ldr	r1, [pc, #144]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008c52:	4b23      	ldr	r3, [pc, #140]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c56:	f023 020c 	bic.w	r2, r3, #12
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	4920      	ldr	r1, [pc, #128]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008c64:	4b1e      	ldr	r3, [pc, #120]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008c66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6a1b      	ldr	r3, [r3, #32]
 8008c6c:	491c      	ldr	r1, [pc, #112]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008c72:	4b1b      	ldr	r3, [pc, #108]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c76:	4a1a      	ldr	r2, [pc, #104]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008c78:	f023 0310 	bic.w	r3, r3, #16
 8008c7c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c7e:	4b18      	ldr	r3, [pc, #96]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c86:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	69d2      	ldr	r2, [r2, #28]
 8008c8e:	00d2      	lsls	r2, r2, #3
 8008c90:	4913      	ldr	r1, [pc, #76]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008c96:	4b12      	ldr	r3, [pc, #72]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c9a:	4a11      	ldr	r2, [pc, #68]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008c9c:	f043 0310 	orr.w	r3, r3, #16
 8008ca0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008cae:	f7f9 fb7d 	bl	80023ac <HAL_GetTick>
 8008cb2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cb4:	e008      	b.n	8008cc8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008cb6:	f7f9 fb79 	bl	80023ac <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d901      	bls.n	8008cc8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e006      	b.n	8008cd6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cc8:	4b05      	ldr	r3, [pc, #20]	@ (8008ce0 <RCCEx_PLL3_Config+0x128>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0f0      	beq.n	8008cb6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	46020c00 	.word	0x46020c00
 8008ce4:	80800000 	.word	0x80800000

08008ce8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e0fb      	b.n	8008ef2 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a7f      	ldr	r2, [pc, #508]	@ (8008efc <HAL_SPI_Init+0x214>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d004      	beq.n	8008d0e <HAL_SPI_Init+0x26>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a7d      	ldr	r2, [pc, #500]	@ (8008f00 <HAL_SPI_Init+0x218>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	e000      	b.n	8008d10 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008d0e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a78      	ldr	r2, [pc, #480]	@ (8008efc <HAL_SPI_Init+0x214>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d004      	beq.n	8008d2a <HAL_SPI_Init+0x42>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a76      	ldr	r2, [pc, #472]	@ (8008f00 <HAL_SPI_Init+0x218>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d105      	bne.n	8008d36 <HAL_SPI_Init+0x4e>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	2b0f      	cmp	r3, #15
 8008d30:	d901      	bls.n	8008d36 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e0dd      	b.n	8008ef2 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fc14 	bl	8009564 <SPI_GetPacketSize>
 8008d3c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a6e      	ldr	r2, [pc, #440]	@ (8008efc <HAL_SPI_Init+0x214>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d004      	beq.n	8008d52 <HAL_SPI_Init+0x6a>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a6c      	ldr	r2, [pc, #432]	@ (8008f00 <HAL_SPI_Init+0x218>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d102      	bne.n	8008d58 <HAL_SPI_Init+0x70>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2b08      	cmp	r3, #8
 8008d56:	d816      	bhi.n	8008d86 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008d5c:	4a69      	ldr	r2, [pc, #420]	@ (8008f04 <HAL_SPI_Init+0x21c>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d00e      	beq.n	8008d80 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a68      	ldr	r2, [pc, #416]	@ (8008f08 <HAL_SPI_Init+0x220>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d009      	beq.n	8008d80 <HAL_SPI_Init+0x98>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a66      	ldr	r2, [pc, #408]	@ (8008f0c <HAL_SPI_Init+0x224>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d004      	beq.n	8008d80 <HAL_SPI_Init+0x98>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a65      	ldr	r2, [pc, #404]	@ (8008f10 <HAL_SPI_Init+0x228>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d104      	bne.n	8008d8a <HAL_SPI_Init+0xa2>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b10      	cmp	r3, #16
 8008d84:	d901      	bls.n	8008d8a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e0b3      	b.n	8008ef2 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d106      	bne.n	8008da4 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7f8 ff1c 	bl	8001bdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2202      	movs	r2, #2
 8008da8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0201 	bic.w	r2, r2, #1
 8008dba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008dc6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008dd0:	d119      	bne.n	8008e06 <HAL_SPI_Init+0x11e>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008dda:	d103      	bne.n	8008de4 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d008      	beq.n	8008df6 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10c      	bne.n	8008e06 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008df0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008df4:	d107      	bne.n	8008e06 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008e04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00f      	beq.n	8008e32 <HAL_SPI_Init+0x14a>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	2b06      	cmp	r3, #6
 8008e18:	d90b      	bls.n	8008e32 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	e007      	b.n	8008e42 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	69da      	ldr	r2, [r3, #28]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e54:	ea42 0103 	orr.w	r1, r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	68da      	ldr	r2, [r3, #12]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	430a      	orrs	r2, r1
 8008e62:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6c:	431a      	orrs	r2, r3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e72:	431a      	orrs	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	431a      	orrs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	431a      	orrs	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	431a      	orrs	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e96:	431a      	orrs	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	431a      	orrs	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ea8:	431a      	orrs	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008eae:	ea42 0103 	orr.w	r1, r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00a      	beq.n	8008ee0 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	430a      	orrs	r2, r1
 8008ede:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	46002000 	.word	0x46002000
 8008f00:	56002000 	.word	0x56002000
 8008f04:	40013000 	.word	0x40013000
 8008f08:	50013000 	.word	0x50013000
 8008f0c:	40003800 	.word	0x40003800
 8008f10:	50003800 	.word	0x50003800

08008f14 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b08c      	sub	sp, #48	@ 0x30
 8008f18:	af02      	add	r7, sp, #8
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
 8008f20:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3320      	adds	r3, #32
 8008f28:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	3330      	adds	r3, #48	@ 0x30
 8008f30:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f32:	f7f9 fa3b 	bl	80023ac <HAL_GetTick>
 8008f36:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8008f38:	887b      	ldrh	r3, [r7, #2]
 8008f3a:	847b      	strh	r3, [r7, #34]	@ 0x22
  initial_RxXferCount = Size;
 8008f3c:	887b      	ldrh	r3, [r7, #2]
 8008f3e:	843b      	strh	r3, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d001      	beq.n	8008f50 <HAL_SPI_TransmitReceive+0x3c>
  {
    return HAL_BUSY;
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e237      	b.n	80093c0 <HAL_SPI_TransmitReceive+0x4ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d005      	beq.n	8008f62 <HAL_SPI_TransmitReceive+0x4e>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d002      	beq.n	8008f62 <HAL_SPI_TransmitReceive+0x4e>
 8008f5c:	887b      	ldrh	r3, [r7, #2]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <HAL_SPI_TransmitReceive+0x52>
  {
    return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e22c      	b.n	80093c0 <HAL_SPI_TransmitReceive+0x4ac>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d101      	bne.n	8008f74 <HAL_SPI_TransmitReceive+0x60>
 8008f70:	2302      	movs	r3, #2
 8008f72:	e225      	b.n	80093c0 <HAL_SPI_TransmitReceive+0x4ac>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2205      	movs	r2, #5
 8008f80:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	887a      	ldrh	r2, [r7, #2]
 8008f96:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	887a      	ldrh	r2, [r7, #2]
 8008f9e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	887a      	ldrh	r2, [r7, #2]
 8008fac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	887a      	ldrh	r2, [r7, #2]
 8008fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68da      	ldr	r2, [r3, #12]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8008fd2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a6c      	ldr	r2, [pc, #432]	@ (800918c <HAL_SPI_TransmitReceive+0x278>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d00e      	beq.n	8008ffc <HAL_SPI_TransmitReceive+0xe8>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a6b      	ldr	r2, [pc, #428]	@ (8009190 <HAL_SPI_TransmitReceive+0x27c>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d009      	beq.n	8008ffc <HAL_SPI_TransmitReceive+0xe8>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a69      	ldr	r2, [pc, #420]	@ (8009194 <HAL_SPI_TransmitReceive+0x280>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d004      	beq.n	8008ffc <HAL_SPI_TransmitReceive+0xe8>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a68      	ldr	r2, [pc, #416]	@ (8009198 <HAL_SPI_TransmitReceive+0x284>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d102      	bne.n	8009002 <HAL_SPI_TransmitReceive+0xee>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8008ffc:	2310      	movs	r3, #16
 8008ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009000:	e001      	b.n	8009006 <HAL_SPI_TransmitReceive+0xf2>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8009002:	2308      	movs	r3, #8
 8009004:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	0c1b      	lsrs	r3, r3, #16
 800900e:	041b      	lsls	r3, r3, #16
 8009010:	8879      	ldrh	r1, [r7, #2]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	6812      	ldr	r2, [r2, #0]
 8009016:	430b      	orrs	r3, r1
 8009018:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f042 0201 	orr.w	r2, r2, #1
 8009028:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10c      	bne.n	8009052 <HAL_SPI_TransmitReceive+0x13e>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009040:	d107      	bne.n	8009052 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009050:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	2b0f      	cmp	r3, #15
 8009058:	f240 808e 	bls.w	8009178 <HAL_SPI_TransmitReceive+0x264>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a4a      	ldr	r2, [pc, #296]	@ (800918c <HAL_SPI_TransmitReceive+0x278>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d00e      	beq.n	8009084 <HAL_SPI_TransmitReceive+0x170>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a49      	ldr	r2, [pc, #292]	@ (8009190 <HAL_SPI_TransmitReceive+0x27c>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d009      	beq.n	8009084 <HAL_SPI_TransmitReceive+0x170>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a47      	ldr	r2, [pc, #284]	@ (8009194 <HAL_SPI_TransmitReceive+0x280>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d004      	beq.n	8009084 <HAL_SPI_TransmitReceive+0x170>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a46      	ldr	r2, [pc, #280]	@ (8009198 <HAL_SPI_TransmitReceive+0x284>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d179      	bne.n	8009178 <HAL_SPI_TransmitReceive+0x264>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8009084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009086:	089b      	lsrs	r3, r3, #2
 8009088:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800908a:	e06e      	b.n	800916a <HAL_SPI_TransmitReceive+0x256>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	f003 0302 	and.w	r3, r3, #2
 8009096:	2b02      	cmp	r3, #2
 8009098:	d120      	bne.n	80090dc <HAL_SPI_TransmitReceive+0x1c8>
 800909a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800909c:	2b00      	cmp	r3, #0
 800909e:	d01d      	beq.n	80090dc <HAL_SPI_TransmitReceive+0x1c8>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80090a0:	8c3a      	ldrh	r2, [r7, #32]
 80090a2:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80090a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d217      	bcs.n	80090dc <HAL_SPI_TransmitReceive+0x1c8>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6812      	ldr	r2, [r2, #0]
 80090b6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090bc:	1d1a      	adds	r2, r3, #4
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	3b01      	subs	r3, #1
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80090da:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	695a      	ldr	r2, [r3, #20]
 80090e2:	f248 0308 	movw	r3, #32776	@ 0x8008
 80090e6:	4013      	ands	r3, r2
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d01a      	beq.n	8009122 <HAL_SPI_TransmitReceive+0x20e>
 80090ec:	8c3b      	ldrh	r3, [r7, #32]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d017      	beq.n	8009122 <HAL_SPI_TransmitReceive+0x20e>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090fa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80090fc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009102:	1d1a      	adds	r2, r3, #4
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount --;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800910e:	b29b      	uxth	r3, r3
 8009110:	3b01      	subs	r3, #1
 8009112:	b29a      	uxth	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009120:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009122:	f7f9 f943 	bl	80023ac <HAL_GetTick>
 8009126:	4602      	mov	r2, r0
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	1ad3      	subs	r3, r2, r3
 800912c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800912e:	429a      	cmp	r2, r3
 8009130:	d803      	bhi.n	800913a <HAL_SPI_TransmitReceive+0x226>
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009138:	d102      	bne.n	8009140 <HAL_SPI_TransmitReceive+0x22c>
 800913a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913c:	2b00      	cmp	r3, #0
 800913e:	d114      	bne.n	800916a <HAL_SPI_TransmitReceive+0x256>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 f941 	bl	80093c8 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800914c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e12a      	b.n	80093c0 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800916a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800916c:	2b00      	cmp	r3, #0
 800916e:	d18d      	bne.n	800908c <HAL_SPI_TransmitReceive+0x178>
 8009170:	8c3b      	ldrh	r3, [r7, #32]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d18a      	bne.n	800908c <HAL_SPI_TransmitReceive+0x178>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009176:	e0fd      	b.n	8009374 <HAL_SPI_TransmitReceive+0x460>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	2b07      	cmp	r3, #7
 800917e:	f240 80f3 	bls.w	8009368 <HAL_SPI_TransmitReceive+0x454>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8009182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009184:	085b      	lsrs	r3, r3, #1
 8009186:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009188:	e075      	b.n	8009276 <HAL_SPI_TransmitReceive+0x362>
 800918a:	bf00      	nop
 800918c:	40013000 	.word	0x40013000
 8009190:	50013000 	.word	0x50013000
 8009194:	40003800 	.word	0x40003800
 8009198:	50003800 	.word	0x50003800
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	f003 0302 	and.w	r3, r3, #2
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d11f      	bne.n	80091ea <HAL_SPI_TransmitReceive+0x2d6>
 80091aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d01c      	beq.n	80091ea <HAL_SPI_TransmitReceive+0x2d6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80091b0:	8c3a      	ldrh	r2, [r7, #32]
 80091b2:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80091b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d216      	bcs.n	80091ea <HAL_SPI_TransmitReceive+0x2d6>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091c0:	881a      	ldrh	r2, [r3, #0]
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091ca:	1c9a      	adds	r2, r3, #2
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	3b01      	subs	r3, #1
 80091da:	b29a      	uxth	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80091e8:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	695b      	ldr	r3, [r3, #20]
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d11a      	bne.n	800922e <HAL_SPI_TransmitReceive+0x31a>
 80091f8:	8c3b      	ldrh	r3, [r7, #32]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d017      	beq.n	800922e <HAL_SPI_TransmitReceive+0x31a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009202:	69ba      	ldr	r2, [r7, #24]
 8009204:	8812      	ldrh	r2, [r2, #0]
 8009206:	b292      	uxth	r2, r2
 8009208:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800920e:	1c9a      	adds	r2, r3, #2
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800921a:	b29b      	uxth	r3, r3
 800921c:	3b01      	subs	r3, #1
 800921e:	b29a      	uxth	r2, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800922c:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800922e:	f7f9 f8bd 	bl	80023ac <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800923a:	429a      	cmp	r2, r3
 800923c:	d803      	bhi.n	8009246 <HAL_SPI_TransmitReceive+0x332>
 800923e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009244:	d102      	bne.n	800924c <HAL_SPI_TransmitReceive+0x338>
 8009246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009248:	2b00      	cmp	r3, #0
 800924a:	d114      	bne.n	8009276 <HAL_SPI_TransmitReceive+0x362>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 f8bb 	bl	80093c8 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009258:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e0a4      	b.n	80093c0 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009276:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009278:	2b00      	cmp	r3, #0
 800927a:	d18f      	bne.n	800919c <HAL_SPI_TransmitReceive+0x288>
 800927c:	8c3b      	ldrh	r3, [r7, #32]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d18c      	bne.n	800919c <HAL_SPI_TransmitReceive+0x288>
 8009282:	e077      	b.n	8009374 <HAL_SPI_TransmitReceive+0x460>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	2b02      	cmp	r3, #2
 8009290:	d121      	bne.n	80092d6 <HAL_SPI_TransmitReceive+0x3c2>
 8009292:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009294:	2b00      	cmp	r3, #0
 8009296:	d01e      	beq.n	80092d6 <HAL_SPI_TransmitReceive+0x3c2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009298:	8c3a      	ldrh	r2, [r7, #32]
 800929a:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800929c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d218      	bcs.n	80092d6 <HAL_SPI_TransmitReceive+0x3c2>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	3320      	adds	r3, #32
 80092ae:	7812      	ldrb	r2, [r2, #0]
 80092b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	3b01      	subs	r3, #1
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092d4:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	f003 0301 	and.w	r3, r3, #1
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d11d      	bne.n	8009320 <HAL_SPI_TransmitReceive+0x40c>
 80092e4:	8c3b      	ldrh	r3, [r7, #32]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d01a      	beq.n	8009320 <HAL_SPI_TransmitReceive+0x40c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092f6:	7812      	ldrb	r2, [r2, #0]
 80092f8:	b2d2      	uxtb	r2, r2
 80092fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009300:	1c5a      	adds	r2, r3, #1
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800930c:	b29b      	uxth	r3, r3
 800930e:	3b01      	subs	r3, #1
 8009310:	b29a      	uxth	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800931e:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009320:	f7f9 f844 	bl	80023ac <HAL_GetTick>
 8009324:	4602      	mov	r2, r0
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800932c:	429a      	cmp	r2, r3
 800932e:	d803      	bhi.n	8009338 <HAL_SPI_TransmitReceive+0x424>
 8009330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009336:	d102      	bne.n	800933e <HAL_SPI_TransmitReceive+0x42a>
 8009338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933a:	2b00      	cmp	r3, #0
 800933c:	d114      	bne.n	8009368 <HAL_SPI_TransmitReceive+0x454>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f000 f842 	bl	80093c8 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800934a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009364:	2303      	movs	r3, #3
 8009366:	e02b      	b.n	80093c0 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009368:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800936a:	2b00      	cmp	r3, #0
 800936c:	d18a      	bne.n	8009284 <HAL_SPI_TransmitReceive+0x370>
 800936e:	8c3b      	ldrh	r3, [r7, #32]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d187      	bne.n	8009284 <HAL_SPI_TransmitReceive+0x370>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937a:	2200      	movs	r2, #0
 800937c:	2108      	movs	r1, #8
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f000 f8c2 	bl	8009508 <SPI_WaitOnFlagUntilTimeout>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d007      	beq.n	800939a <HAL_SPI_TransmitReceive+0x486>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009390:	f043 0220 	orr.w	r2, r3, #32
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f000 f814 	bl	80093c8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <HAL_SPI_TransmitReceive+0x4aa>
  {
    return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e000      	b.n	80093c0 <HAL_SPI_TransmitReceive+0x4ac>
  }
  else
  {
    return HAL_OK;
 80093be:	2300      	movs	r3, #0
  }
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3728      	adds	r7, #40	@ 0x28
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	699a      	ldr	r2, [r3, #24]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f042 0208 	orr.w	r2, r2, #8
 80093e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	699a      	ldr	r2, [r3, #24]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f042 0210 	orr.w	r2, r2, #16
 80093f6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f022 0201 	bic.w	r2, r2, #1
 8009406:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	6812      	ldr	r2, [r2, #0]
 8009412:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8009416:	f023 0303 	bic.w	r3, r3, #3
 800941a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689a      	ldr	r2, [r3, #8]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800942a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009432:	b2db      	uxtb	r3, r3
 8009434:	2b04      	cmp	r3, #4
 8009436:	d014      	beq.n	8009462 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f003 0320 	and.w	r3, r3, #32
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00f      	beq.n	8009462 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009448:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	699a      	ldr	r2, [r3, #24]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f042 0220 	orr.w	r2, r2, #32
 8009460:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b03      	cmp	r3, #3
 800946c:	d014      	beq.n	8009498 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00f      	beq.n	8009498 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800947e:	f043 0204 	orr.w	r2, r3, #4
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	699a      	ldr	r2, [r3, #24]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009496:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00f      	beq.n	80094c2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094a8:	f043 0201 	orr.w	r2, r3, #1
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	699a      	ldr	r2, [r3, #24]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00f      	beq.n	80094ec <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094d2:	f043 0208 	orr.w	r2, r3, #8
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	699a      	ldr	r2, [r3, #24]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80094fc:	bf00      	nop
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	603b      	str	r3, [r7, #0]
 8009514:	4613      	mov	r3, r2
 8009516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009518:	e010      	b.n	800953c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800951a:	f7f8 ff47 	bl	80023ac <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	429a      	cmp	r2, r3
 8009528:	d803      	bhi.n	8009532 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009530:	d102      	bne.n	8009538 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d101      	bne.n	800953c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009538:	2303      	movs	r3, #3
 800953a:	e00f      	b.n	800955c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	695a      	ldr	r2, [r3, #20]
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	4013      	ands	r3, r2
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	429a      	cmp	r2, r3
 800954a:	bf0c      	ite	eq
 800954c:	2301      	moveq	r3, #1
 800954e:	2300      	movne	r3, #0
 8009550:	b2db      	uxtb	r3, r3
 8009552:	461a      	mov	r2, r3
 8009554:	79fb      	ldrb	r3, [r7, #7]
 8009556:	429a      	cmp	r2, r3
 8009558:	d0df      	beq.n	800951a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009570:	095b      	lsrs	r3, r3, #5
 8009572:	3301      	adds	r3, #1
 8009574:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	3301      	adds	r3, #1
 800957c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	3307      	adds	r3, #7
 8009582:	08db      	lsrs	r3, r3, #3
 8009584:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	fb02 f303 	mul.w	r3, r2, r3
}
 800958e:	4618      	mov	r0, r3
 8009590:	3714      	adds	r7, #20
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800959a:	b480      	push	{r7}
 800959c:	b083      	sub	sp, #12
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d12e      	bne.n	800960e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d101      	bne.n	80095be <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80095ba:	2302      	movs	r3, #2
 80095bc:	e028      	b.n	8009610 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2202      	movs	r2, #2
 80095ca:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 0201 	bic.w	r2, r2, #1
 80095dc:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80095ea:	ea42 0103 	orr.w	r1, r2, r3
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	689a      	ldr	r2, [r3, #8]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	430a      	orrs	r2, r1
 80095f8:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	e000      	b.n	8009610 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
  }
}
 8009610:	4618      	mov	r0, r3
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b01      	cmp	r3, #1
 800962e:	d001      	beq.n	8009634 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e06a      	b.n	800970a <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2202      	movs	r2, #2
 8009638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a35      	ldr	r2, [pc, #212]	@ (8009718 <HAL_TIM_Base_Start+0xfc>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d040      	beq.n	80096c8 <HAL_TIM_Base_Start+0xac>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a34      	ldr	r2, [pc, #208]	@ (800971c <HAL_TIM_Base_Start+0x100>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d03b      	beq.n	80096c8 <HAL_TIM_Base_Start+0xac>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009658:	d036      	beq.n	80096c8 <HAL_TIM_Base_Start+0xac>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009662:	d031      	beq.n	80096c8 <HAL_TIM_Base_Start+0xac>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a2d      	ldr	r2, [pc, #180]	@ (8009720 <HAL_TIM_Base_Start+0x104>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d02c      	beq.n	80096c8 <HAL_TIM_Base_Start+0xac>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a2c      	ldr	r2, [pc, #176]	@ (8009724 <HAL_TIM_Base_Start+0x108>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d027      	beq.n	80096c8 <HAL_TIM_Base_Start+0xac>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a2a      	ldr	r2, [pc, #168]	@ (8009728 <HAL_TIM_Base_Start+0x10c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d022      	beq.n	80096c8 <HAL_TIM_Base_Start+0xac>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a29      	ldr	r2, [pc, #164]	@ (800972c <HAL_TIM_Base_Start+0x110>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d01d      	beq.n	80096c8 <HAL_TIM_Base_Start+0xac>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a27      	ldr	r2, [pc, #156]	@ (8009730 <HAL_TIM_Base_Start+0x114>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d018      	beq.n	80096c8 <HAL_TIM_Base_Start+0xac>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a26      	ldr	r2, [pc, #152]	@ (8009734 <HAL_TIM_Base_Start+0x118>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d013      	beq.n	80096c8 <HAL_TIM_Base_Start+0xac>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a24      	ldr	r2, [pc, #144]	@ (8009738 <HAL_TIM_Base_Start+0x11c>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d00e      	beq.n	80096c8 <HAL_TIM_Base_Start+0xac>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a23      	ldr	r2, [pc, #140]	@ (800973c <HAL_TIM_Base_Start+0x120>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d009      	beq.n	80096c8 <HAL_TIM_Base_Start+0xac>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a21      	ldr	r2, [pc, #132]	@ (8009740 <HAL_TIM_Base_Start+0x124>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d004      	beq.n	80096c8 <HAL_TIM_Base_Start+0xac>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a20      	ldr	r2, [pc, #128]	@ (8009744 <HAL_TIM_Base_Start+0x128>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d115      	bne.n	80096f4 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	689a      	ldr	r2, [r3, #8]
 80096ce:	4b1e      	ldr	r3, [pc, #120]	@ (8009748 <HAL_TIM_Base_Start+0x12c>)
 80096d0:	4013      	ands	r3, r2
 80096d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2b06      	cmp	r3, #6
 80096d8:	d015      	beq.n	8009706 <HAL_TIM_Base_Start+0xea>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096e0:	d011      	beq.n	8009706 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f042 0201 	orr.w	r2, r2, #1
 80096f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096f2:	e008      	b.n	8009706 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f042 0201 	orr.w	r2, r2, #1
 8009702:	601a      	str	r2, [r3, #0]
 8009704:	e000      	b.n	8009708 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009706:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3714      	adds	r7, #20
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	40012c00 	.word	0x40012c00
 800971c:	50012c00 	.word	0x50012c00
 8009720:	40000400 	.word	0x40000400
 8009724:	50000400 	.word	0x50000400
 8009728:	40000800 	.word	0x40000800
 800972c:	50000800 	.word	0x50000800
 8009730:	40000c00 	.word	0x40000c00
 8009734:	50000c00 	.word	0x50000c00
 8009738:	40013400 	.word	0x40013400
 800973c:	50013400 	.word	0x50013400
 8009740:	40014000 	.word	0x40014000
 8009744:	50014000 	.word	0x50014000
 8009748:	00010007 	.word	0x00010007

0800974c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e049      	b.n	80097f2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b00      	cmp	r3, #0
 8009768:	d106      	bne.n	8009778 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7f8 fb46 	bl	8001e04 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2202      	movs	r2, #2
 800977c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	3304      	adds	r3, #4
 8009788:	4619      	mov	r1, r3
 800978a:	4610      	mov	r0, r2
 800978c:	f000 fc06 	bl	8009f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
	...

080097fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d104      	bne.n	800981a <HAL_TIM_IC_Start_IT+0x1e>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009816:	b2db      	uxtb	r3, r3
 8009818:	e023      	b.n	8009862 <HAL_TIM_IC_Start_IT+0x66>
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	2b04      	cmp	r3, #4
 800981e:	d104      	bne.n	800982a <HAL_TIM_IC_Start_IT+0x2e>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009826:	b2db      	uxtb	r3, r3
 8009828:	e01b      	b.n	8009862 <HAL_TIM_IC_Start_IT+0x66>
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2b08      	cmp	r3, #8
 800982e:	d104      	bne.n	800983a <HAL_TIM_IC_Start_IT+0x3e>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009836:	b2db      	uxtb	r3, r3
 8009838:	e013      	b.n	8009862 <HAL_TIM_IC_Start_IT+0x66>
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	2b0c      	cmp	r3, #12
 800983e:	d104      	bne.n	800984a <HAL_TIM_IC_Start_IT+0x4e>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009846:	b2db      	uxtb	r3, r3
 8009848:	e00b      	b.n	8009862 <HAL_TIM_IC_Start_IT+0x66>
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	2b10      	cmp	r3, #16
 800984e:	d104      	bne.n	800985a <HAL_TIM_IC_Start_IT+0x5e>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009856:	b2db      	uxtb	r3, r3
 8009858:	e003      	b.n	8009862 <HAL_TIM_IC_Start_IT+0x66>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009860:	b2db      	uxtb	r3, r3
 8009862:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d104      	bne.n	8009874 <HAL_TIM_IC_Start_IT+0x78>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009870:	b2db      	uxtb	r3, r3
 8009872:	e013      	b.n	800989c <HAL_TIM_IC_Start_IT+0xa0>
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	2b04      	cmp	r3, #4
 8009878:	d104      	bne.n	8009884 <HAL_TIM_IC_Start_IT+0x88>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009880:	b2db      	uxtb	r3, r3
 8009882:	e00b      	b.n	800989c <HAL_TIM_IC_Start_IT+0xa0>
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	2b08      	cmp	r3, #8
 8009888:	d104      	bne.n	8009894 <HAL_TIM_IC_Start_IT+0x98>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009890:	b2db      	uxtb	r3, r3
 8009892:	e003      	b.n	800989c <HAL_TIM_IC_Start_IT+0xa0>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800989a:	b2db      	uxtb	r3, r3
 800989c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800989e:	7bbb      	ldrb	r3, [r7, #14]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d102      	bne.n	80098aa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80098a4:	7b7b      	ldrb	r3, [r7, #13]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d001      	beq.n	80098ae <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e100      	b.n	8009ab0 <HAL_TIM_IC_Start_IT+0x2b4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d104      	bne.n	80098be <HAL_TIM_IC_Start_IT+0xc2>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2202      	movs	r2, #2
 80098b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098bc:	e023      	b.n	8009906 <HAL_TIM_IC_Start_IT+0x10a>
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	2b04      	cmp	r3, #4
 80098c2:	d104      	bne.n	80098ce <HAL_TIM_IC_Start_IT+0xd2>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2202      	movs	r2, #2
 80098c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098cc:	e01b      	b.n	8009906 <HAL_TIM_IC_Start_IT+0x10a>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2b08      	cmp	r3, #8
 80098d2:	d104      	bne.n	80098de <HAL_TIM_IC_Start_IT+0xe2>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2202      	movs	r2, #2
 80098d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80098dc:	e013      	b.n	8009906 <HAL_TIM_IC_Start_IT+0x10a>
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	2b0c      	cmp	r3, #12
 80098e2:	d104      	bne.n	80098ee <HAL_TIM_IC_Start_IT+0xf2>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2202      	movs	r2, #2
 80098e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80098ec:	e00b      	b.n	8009906 <HAL_TIM_IC_Start_IT+0x10a>
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	2b10      	cmp	r3, #16
 80098f2:	d104      	bne.n	80098fe <HAL_TIM_IC_Start_IT+0x102>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2202      	movs	r2, #2
 80098f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80098fc:	e003      	b.n	8009906 <HAL_TIM_IC_Start_IT+0x10a>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2202      	movs	r2, #2
 8009902:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d104      	bne.n	8009916 <HAL_TIM_IC_Start_IT+0x11a>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2202      	movs	r2, #2
 8009910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009914:	e013      	b.n	800993e <HAL_TIM_IC_Start_IT+0x142>
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b04      	cmp	r3, #4
 800991a:	d104      	bne.n	8009926 <HAL_TIM_IC_Start_IT+0x12a>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2202      	movs	r2, #2
 8009920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009924:	e00b      	b.n	800993e <HAL_TIM_IC_Start_IT+0x142>
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2b08      	cmp	r3, #8
 800992a:	d104      	bne.n	8009936 <HAL_TIM_IC_Start_IT+0x13a>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2202      	movs	r2, #2
 8009930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009934:	e003      	b.n	800993e <HAL_TIM_IC_Start_IT+0x142>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2202      	movs	r2, #2
 800993a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	2b0c      	cmp	r3, #12
 8009942:	d841      	bhi.n	80099c8 <HAL_TIM_IC_Start_IT+0x1cc>
 8009944:	a201      	add	r2, pc, #4	@ (adr r2, 800994c <HAL_TIM_IC_Start_IT+0x150>)
 8009946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994a:	bf00      	nop
 800994c:	08009981 	.word	0x08009981
 8009950:	080099c9 	.word	0x080099c9
 8009954:	080099c9 	.word	0x080099c9
 8009958:	080099c9 	.word	0x080099c9
 800995c:	08009993 	.word	0x08009993
 8009960:	080099c9 	.word	0x080099c9
 8009964:	080099c9 	.word	0x080099c9
 8009968:	080099c9 	.word	0x080099c9
 800996c:	080099a5 	.word	0x080099a5
 8009970:	080099c9 	.word	0x080099c9
 8009974:	080099c9 	.word	0x080099c9
 8009978:	080099c9 	.word	0x080099c9
 800997c:	080099b7 	.word	0x080099b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68da      	ldr	r2, [r3, #12]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f042 0202 	orr.w	r2, r2, #2
 800998e:	60da      	str	r2, [r3, #12]
      break;
 8009990:	e01d      	b.n	80099ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68da      	ldr	r2, [r3, #12]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f042 0204 	orr.w	r2, r2, #4
 80099a0:	60da      	str	r2, [r3, #12]
      break;
 80099a2:	e014      	b.n	80099ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68da      	ldr	r2, [r3, #12]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f042 0208 	orr.w	r2, r2, #8
 80099b2:	60da      	str	r2, [r3, #12]
      break;
 80099b4:	e00b      	b.n	80099ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68da      	ldr	r2, [r3, #12]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f042 0210 	orr.w	r2, r2, #16
 80099c4:	60da      	str	r2, [r3, #12]
      break;
 80099c6:	e002      	b.n	80099ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	73fb      	strb	r3, [r7, #15]
      break;
 80099cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80099ce:	7bfb      	ldrb	r3, [r7, #15]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d16c      	bne.n	8009aae <HAL_TIM_IC_Start_IT+0x2b2>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2201      	movs	r2, #1
 80099da:	6839      	ldr	r1, [r7, #0]
 80099dc:	4618      	mov	r0, r3
 80099de:	f000 fd2f 	bl	800a440 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a34      	ldr	r2, [pc, #208]	@ (8009ab8 <HAL_TIM_IC_Start_IT+0x2bc>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d040      	beq.n	8009a6e <HAL_TIM_IC_Start_IT+0x272>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a32      	ldr	r2, [pc, #200]	@ (8009abc <HAL_TIM_IC_Start_IT+0x2c0>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d03b      	beq.n	8009a6e <HAL_TIM_IC_Start_IT+0x272>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099fe:	d036      	beq.n	8009a6e <HAL_TIM_IC_Start_IT+0x272>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a08:	d031      	beq.n	8009a6e <HAL_TIM_IC_Start_IT+0x272>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8009ac0 <HAL_TIM_IC_Start_IT+0x2c4>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d02c      	beq.n	8009a6e <HAL_TIM_IC_Start_IT+0x272>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a2a      	ldr	r2, [pc, #168]	@ (8009ac4 <HAL_TIM_IC_Start_IT+0x2c8>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d027      	beq.n	8009a6e <HAL_TIM_IC_Start_IT+0x272>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a29      	ldr	r2, [pc, #164]	@ (8009ac8 <HAL_TIM_IC_Start_IT+0x2cc>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d022      	beq.n	8009a6e <HAL_TIM_IC_Start_IT+0x272>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a27      	ldr	r2, [pc, #156]	@ (8009acc <HAL_TIM_IC_Start_IT+0x2d0>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d01d      	beq.n	8009a6e <HAL_TIM_IC_Start_IT+0x272>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a26      	ldr	r2, [pc, #152]	@ (8009ad0 <HAL_TIM_IC_Start_IT+0x2d4>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d018      	beq.n	8009a6e <HAL_TIM_IC_Start_IT+0x272>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a24      	ldr	r2, [pc, #144]	@ (8009ad4 <HAL_TIM_IC_Start_IT+0x2d8>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d013      	beq.n	8009a6e <HAL_TIM_IC_Start_IT+0x272>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a23      	ldr	r2, [pc, #140]	@ (8009ad8 <HAL_TIM_IC_Start_IT+0x2dc>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d00e      	beq.n	8009a6e <HAL_TIM_IC_Start_IT+0x272>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a21      	ldr	r2, [pc, #132]	@ (8009adc <HAL_TIM_IC_Start_IT+0x2e0>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d009      	beq.n	8009a6e <HAL_TIM_IC_Start_IT+0x272>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a20      	ldr	r2, [pc, #128]	@ (8009ae0 <HAL_TIM_IC_Start_IT+0x2e4>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d004      	beq.n	8009a6e <HAL_TIM_IC_Start_IT+0x272>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a1e      	ldr	r2, [pc, #120]	@ (8009ae4 <HAL_TIM_IC_Start_IT+0x2e8>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d115      	bne.n	8009a9a <HAL_TIM_IC_Start_IT+0x29e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	689a      	ldr	r2, [r3, #8]
 8009a74:	4b1c      	ldr	r3, [pc, #112]	@ (8009ae8 <HAL_TIM_IC_Start_IT+0x2ec>)
 8009a76:	4013      	ands	r3, r2
 8009a78:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	2b06      	cmp	r3, #6
 8009a7e:	d015      	beq.n	8009aac <HAL_TIM_IC_Start_IT+0x2b0>
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a86:	d011      	beq.n	8009aac <HAL_TIM_IC_Start_IT+0x2b0>
      {
        __HAL_TIM_ENABLE(htim);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f042 0201 	orr.w	r2, r2, #1
 8009a96:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a98:	e008      	b.n	8009aac <HAL_TIM_IC_Start_IT+0x2b0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f042 0201 	orr.w	r2, r2, #1
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	e000      	b.n	8009aae <HAL_TIM_IC_Start_IT+0x2b2>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aac:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	40012c00 	.word	0x40012c00
 8009abc:	50012c00 	.word	0x50012c00
 8009ac0:	40000400 	.word	0x40000400
 8009ac4:	50000400 	.word	0x50000400
 8009ac8:	40000800 	.word	0x40000800
 8009acc:	50000800 	.word	0x50000800
 8009ad0:	40000c00 	.word	0x40000c00
 8009ad4:	50000c00 	.word	0x50000c00
 8009ad8:	40013400 	.word	0x40013400
 8009adc:	50013400 	.word	0x50013400
 8009ae0:	40014000 	.word	0x40014000
 8009ae4:	50014000 	.word	0x50014000
 8009ae8:	00010007 	.word	0x00010007

08009aec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	f003 0302 	and.w	r3, r3, #2
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d020      	beq.n	8009b50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f003 0302 	and.w	r3, r3, #2
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d01b      	beq.n	8009b50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f06f 0202 	mvn.w	r2, #2
 8009b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	f003 0303 	and.w	r3, r3, #3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7f7 f9ea 	bl	8000f10 <HAL_TIM_IC_CaptureCallback>
 8009b3c:	e005      	b.n	8009b4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fa0e 	bl	8009f60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fa15 	bl	8009f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	f003 0304 	and.w	r3, r3, #4
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d020      	beq.n	8009b9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f003 0304 	and.w	r3, r3, #4
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d01b      	beq.n	8009b9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f06f 0204 	mvn.w	r2, #4
 8009b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2202      	movs	r2, #2
 8009b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7f7 f9c4 	bl	8000f10 <HAL_TIM_IC_CaptureCallback>
 8009b88:	e005      	b.n	8009b96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f9e8 	bl	8009f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f9ef 	bl	8009f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	f003 0308 	and.w	r3, r3, #8
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d020      	beq.n	8009be8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f003 0308 	and.w	r3, r3, #8
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d01b      	beq.n	8009be8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f06f 0208 	mvn.w	r2, #8
 8009bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2204      	movs	r2, #4
 8009bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	f003 0303 	and.w	r3, r3, #3
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d003      	beq.n	8009bd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7f7 f99e 	bl	8000f10 <HAL_TIM_IC_CaptureCallback>
 8009bd4:	e005      	b.n	8009be2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f9c2 	bl	8009f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f9c9 	bl	8009f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	f003 0310 	and.w	r3, r3, #16
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d020      	beq.n	8009c34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f003 0310 	and.w	r3, r3, #16
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d01b      	beq.n	8009c34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f06f 0210 	mvn.w	r2, #16
 8009c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2208      	movs	r2, #8
 8009c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d003      	beq.n	8009c22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f7f7 f978 	bl	8000f10 <HAL_TIM_IC_CaptureCallback>
 8009c20:	e005      	b.n	8009c2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f99c 	bl	8009f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f9a3 	bl	8009f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00c      	beq.n	8009c58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d007      	beq.n	8009c58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f06f 0201 	mvn.w	r2, #1
 8009c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f97a 	bl	8009f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d104      	bne.n	8009c6c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00c      	beq.n	8009c86 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d007      	beq.n	8009c86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fccf 	bl	800a624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00c      	beq.n	8009caa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d007      	beq.n	8009caa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 fcc7 	bl	800a638 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00c      	beq.n	8009cce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d007      	beq.n	8009cce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f95d 	bl	8009f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f003 0320 	and.w	r3, r3, #32
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00c      	beq.n	8009cf2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f003 0320 	and.w	r3, r3, #32
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d007      	beq.n	8009cf2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f06f 0220 	mvn.w	r2, #32
 8009cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 fc8f 	bl	800a610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00c      	beq.n	8009d16 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d007      	beq.n	8009d16 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fc9b 	bl	800a64c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00c      	beq.n	8009d3a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d007      	beq.n	8009d3a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fc93 	bl	800a660 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00c      	beq.n	8009d5e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d007      	beq.n	8009d5e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 fc8b 	bl	800a674 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00c      	beq.n	8009d82 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d007      	beq.n	8009d82 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fc83 	bl	800a688 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d82:	bf00      	nop
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b086      	sub	sp, #24
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	60f8      	str	r0, [r7, #12]
 8009d92:	60b9      	str	r1, [r7, #8]
 8009d94:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d101      	bne.n	8009da8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009da4:	2302      	movs	r3, #2
 8009da6:	e088      	b.n	8009eba <HAL_TIM_IC_ConfigChannel+0x130>
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d11b      	bne.n	8009dee <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009dc6:	f000 f9ef 	bl	800a1a8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	699a      	ldr	r2, [r3, #24]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f022 020c 	bic.w	r2, r2, #12
 8009dd8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	6999      	ldr	r1, [r3, #24]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	689a      	ldr	r2, [r3, #8]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	430a      	orrs	r2, r1
 8009dea:	619a      	str	r2, [r3, #24]
 8009dec:	e060      	b.n	8009eb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2b04      	cmp	r3, #4
 8009df2:	d11c      	bne.n	8009e2e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009e04:	f000 fa66 	bl	800a2d4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	699a      	ldr	r2, [r3, #24]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009e16:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6999      	ldr	r1, [r3, #24]
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	021a      	lsls	r2, r3, #8
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	619a      	str	r2, [r3, #24]
 8009e2c:	e040      	b.n	8009eb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b08      	cmp	r3, #8
 8009e32:	d11b      	bne.n	8009e6c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009e44:	f000 fa83 	bl	800a34e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	69da      	ldr	r2, [r3, #28]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f022 020c 	bic.w	r2, r2, #12
 8009e56:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	69d9      	ldr	r1, [r3, #28]
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	689a      	ldr	r2, [r3, #8]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	430a      	orrs	r2, r1
 8009e68:	61da      	str	r2, [r3, #28]
 8009e6a:	e021      	b.n	8009eb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2b0c      	cmp	r3, #12
 8009e70:	d11c      	bne.n	8009eac <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009e82:	f000 faa0 	bl	800a3c6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	69da      	ldr	r2, [r3, #28]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009e94:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	69d9      	ldr	r1, [r3, #28]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	021a      	lsls	r2, r3, #8
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	430a      	orrs	r2, r1
 8009ea8:	61da      	str	r2, [r3, #28]
 8009eaa:	e001      	b.n	8009eb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
	...

08009ec4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	2b0c      	cmp	r3, #12
 8009ed6:	d831      	bhi.n	8009f3c <HAL_TIM_ReadCapturedValue+0x78>
 8009ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ee0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ede:	bf00      	nop
 8009ee0:	08009f15 	.word	0x08009f15
 8009ee4:	08009f3d 	.word	0x08009f3d
 8009ee8:	08009f3d 	.word	0x08009f3d
 8009eec:	08009f3d 	.word	0x08009f3d
 8009ef0:	08009f1f 	.word	0x08009f1f
 8009ef4:	08009f3d 	.word	0x08009f3d
 8009ef8:	08009f3d 	.word	0x08009f3d
 8009efc:	08009f3d 	.word	0x08009f3d
 8009f00:	08009f29 	.word	0x08009f29
 8009f04:	08009f3d 	.word	0x08009f3d
 8009f08:	08009f3d 	.word	0x08009f3d
 8009f0c:	08009f3d 	.word	0x08009f3d
 8009f10:	08009f33 	.word	0x08009f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f1a:	60fb      	str	r3, [r7, #12]

      break;
 8009f1c:	e00f      	b.n	8009f3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f24:	60fb      	str	r3, [r7, #12]

      break;
 8009f26:	e00a      	b.n	8009f3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f2e:	60fb      	str	r3, [r7, #12]

      break;
 8009f30:	e005      	b.n	8009f3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f38:	60fb      	str	r3, [r7, #12]

      break;
 8009f3a:	e000      	b.n	8009f3e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009f3c:	bf00      	nop
  }

  return tmpreg;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f68:	bf00      	nop
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f7c:	bf00      	nop
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a6e      	ldr	r2, [pc, #440]	@ (800a168 <TIM_Base_SetConfig+0x1cc>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d02b      	beq.n	800a00c <TIM_Base_SetConfig+0x70>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a6d      	ldr	r2, [pc, #436]	@ (800a16c <TIM_Base_SetConfig+0x1d0>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d027      	beq.n	800a00c <TIM_Base_SetConfig+0x70>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fc2:	d023      	beq.n	800a00c <TIM_Base_SetConfig+0x70>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009fca:	d01f      	beq.n	800a00c <TIM_Base_SetConfig+0x70>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a68      	ldr	r2, [pc, #416]	@ (800a170 <TIM_Base_SetConfig+0x1d4>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d01b      	beq.n	800a00c <TIM_Base_SetConfig+0x70>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a67      	ldr	r2, [pc, #412]	@ (800a174 <TIM_Base_SetConfig+0x1d8>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d017      	beq.n	800a00c <TIM_Base_SetConfig+0x70>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a66      	ldr	r2, [pc, #408]	@ (800a178 <TIM_Base_SetConfig+0x1dc>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d013      	beq.n	800a00c <TIM_Base_SetConfig+0x70>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a65      	ldr	r2, [pc, #404]	@ (800a17c <TIM_Base_SetConfig+0x1e0>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d00f      	beq.n	800a00c <TIM_Base_SetConfig+0x70>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a64      	ldr	r2, [pc, #400]	@ (800a180 <TIM_Base_SetConfig+0x1e4>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d00b      	beq.n	800a00c <TIM_Base_SetConfig+0x70>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a63      	ldr	r2, [pc, #396]	@ (800a184 <TIM_Base_SetConfig+0x1e8>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d007      	beq.n	800a00c <TIM_Base_SetConfig+0x70>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a62      	ldr	r2, [pc, #392]	@ (800a188 <TIM_Base_SetConfig+0x1ec>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d003      	beq.n	800a00c <TIM_Base_SetConfig+0x70>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a61      	ldr	r2, [pc, #388]	@ (800a18c <TIM_Base_SetConfig+0x1f0>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d108      	bne.n	800a01e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a51      	ldr	r2, [pc, #324]	@ (800a168 <TIM_Base_SetConfig+0x1cc>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d043      	beq.n	800a0ae <TIM_Base_SetConfig+0x112>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a50      	ldr	r2, [pc, #320]	@ (800a16c <TIM_Base_SetConfig+0x1d0>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d03f      	beq.n	800a0ae <TIM_Base_SetConfig+0x112>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a034:	d03b      	beq.n	800a0ae <TIM_Base_SetConfig+0x112>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a03c:	d037      	beq.n	800a0ae <TIM_Base_SetConfig+0x112>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a4b      	ldr	r2, [pc, #300]	@ (800a170 <TIM_Base_SetConfig+0x1d4>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d033      	beq.n	800a0ae <TIM_Base_SetConfig+0x112>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a4a      	ldr	r2, [pc, #296]	@ (800a174 <TIM_Base_SetConfig+0x1d8>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d02f      	beq.n	800a0ae <TIM_Base_SetConfig+0x112>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a49      	ldr	r2, [pc, #292]	@ (800a178 <TIM_Base_SetConfig+0x1dc>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d02b      	beq.n	800a0ae <TIM_Base_SetConfig+0x112>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a48      	ldr	r2, [pc, #288]	@ (800a17c <TIM_Base_SetConfig+0x1e0>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d027      	beq.n	800a0ae <TIM_Base_SetConfig+0x112>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a47      	ldr	r2, [pc, #284]	@ (800a180 <TIM_Base_SetConfig+0x1e4>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d023      	beq.n	800a0ae <TIM_Base_SetConfig+0x112>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a46      	ldr	r2, [pc, #280]	@ (800a184 <TIM_Base_SetConfig+0x1e8>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d01f      	beq.n	800a0ae <TIM_Base_SetConfig+0x112>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a45      	ldr	r2, [pc, #276]	@ (800a188 <TIM_Base_SetConfig+0x1ec>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d01b      	beq.n	800a0ae <TIM_Base_SetConfig+0x112>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a44      	ldr	r2, [pc, #272]	@ (800a18c <TIM_Base_SetConfig+0x1f0>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d017      	beq.n	800a0ae <TIM_Base_SetConfig+0x112>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a43      	ldr	r2, [pc, #268]	@ (800a190 <TIM_Base_SetConfig+0x1f4>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d013      	beq.n	800a0ae <TIM_Base_SetConfig+0x112>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a42      	ldr	r2, [pc, #264]	@ (800a194 <TIM_Base_SetConfig+0x1f8>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d00f      	beq.n	800a0ae <TIM_Base_SetConfig+0x112>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4a41      	ldr	r2, [pc, #260]	@ (800a198 <TIM_Base_SetConfig+0x1fc>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d00b      	beq.n	800a0ae <TIM_Base_SetConfig+0x112>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4a40      	ldr	r2, [pc, #256]	@ (800a19c <TIM_Base_SetConfig+0x200>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d007      	beq.n	800a0ae <TIM_Base_SetConfig+0x112>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4a3f      	ldr	r2, [pc, #252]	@ (800a1a0 <TIM_Base_SetConfig+0x204>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d003      	beq.n	800a0ae <TIM_Base_SetConfig+0x112>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4a3e      	ldr	r2, [pc, #248]	@ (800a1a4 <TIM_Base_SetConfig+0x208>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d108      	bne.n	800a0c0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	689a      	ldr	r2, [r3, #8]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a20      	ldr	r2, [pc, #128]	@ (800a168 <TIM_Base_SetConfig+0x1cc>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d023      	beq.n	800a134 <TIM_Base_SetConfig+0x198>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a1f      	ldr	r2, [pc, #124]	@ (800a16c <TIM_Base_SetConfig+0x1d0>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d01f      	beq.n	800a134 <TIM_Base_SetConfig+0x198>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a24      	ldr	r2, [pc, #144]	@ (800a188 <TIM_Base_SetConfig+0x1ec>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d01b      	beq.n	800a134 <TIM_Base_SetConfig+0x198>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a23      	ldr	r2, [pc, #140]	@ (800a18c <TIM_Base_SetConfig+0x1f0>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d017      	beq.n	800a134 <TIM_Base_SetConfig+0x198>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a22      	ldr	r2, [pc, #136]	@ (800a190 <TIM_Base_SetConfig+0x1f4>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d013      	beq.n	800a134 <TIM_Base_SetConfig+0x198>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a21      	ldr	r2, [pc, #132]	@ (800a194 <TIM_Base_SetConfig+0x1f8>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d00f      	beq.n	800a134 <TIM_Base_SetConfig+0x198>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a20      	ldr	r2, [pc, #128]	@ (800a198 <TIM_Base_SetConfig+0x1fc>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d00b      	beq.n	800a134 <TIM_Base_SetConfig+0x198>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a1f      	ldr	r2, [pc, #124]	@ (800a19c <TIM_Base_SetConfig+0x200>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d007      	beq.n	800a134 <TIM_Base_SetConfig+0x198>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a1e      	ldr	r2, [pc, #120]	@ (800a1a0 <TIM_Base_SetConfig+0x204>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d003      	beq.n	800a134 <TIM_Base_SetConfig+0x198>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a1d      	ldr	r2, [pc, #116]	@ (800a1a4 <TIM_Base_SetConfig+0x208>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d103      	bne.n	800a13c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	691a      	ldr	r2, [r3, #16]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	f003 0301 	and.w	r3, r3, #1
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d105      	bne.n	800a15a <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	f023 0201 	bic.w	r2, r3, #1
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	611a      	str	r2, [r3, #16]
  }
}
 800a15a:	bf00      	nop
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	40012c00 	.word	0x40012c00
 800a16c:	50012c00 	.word	0x50012c00
 800a170:	40000400 	.word	0x40000400
 800a174:	50000400 	.word	0x50000400
 800a178:	40000800 	.word	0x40000800
 800a17c:	50000800 	.word	0x50000800
 800a180:	40000c00 	.word	0x40000c00
 800a184:	50000c00 	.word	0x50000c00
 800a188:	40013400 	.word	0x40013400
 800a18c:	50013400 	.word	0x50013400
 800a190:	40014000 	.word	0x40014000
 800a194:	50014000 	.word	0x50014000
 800a198:	40014400 	.word	0x40014400
 800a19c:	50014400 	.word	0x50014400
 800a1a0:	40014800 	.word	0x40014800
 800a1a4:	50014800 	.word	0x50014800

0800a1a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b087      	sub	sp, #28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
 800a1b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6a1b      	ldr	r3, [r3, #32]
 800a1ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6a1b      	ldr	r3, [r3, #32]
 800a1c0:	f023 0201 	bic.w	r2, r3, #1
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	4a34      	ldr	r2, [pc, #208]	@ (800a2a4 <TIM_TI1_SetConfig+0xfc>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d033      	beq.n	800a23e <TIM_TI1_SetConfig+0x96>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	4a33      	ldr	r2, [pc, #204]	@ (800a2a8 <TIM_TI1_SetConfig+0x100>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d02f      	beq.n	800a23e <TIM_TI1_SetConfig+0x96>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1e4:	d02b      	beq.n	800a23e <TIM_TI1_SetConfig+0x96>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a1ec:	d027      	beq.n	800a23e <TIM_TI1_SetConfig+0x96>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	4a2e      	ldr	r2, [pc, #184]	@ (800a2ac <TIM_TI1_SetConfig+0x104>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d023      	beq.n	800a23e <TIM_TI1_SetConfig+0x96>
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	4a2d      	ldr	r2, [pc, #180]	@ (800a2b0 <TIM_TI1_SetConfig+0x108>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d01f      	beq.n	800a23e <TIM_TI1_SetConfig+0x96>
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	4a2c      	ldr	r2, [pc, #176]	@ (800a2b4 <TIM_TI1_SetConfig+0x10c>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d01b      	beq.n	800a23e <TIM_TI1_SetConfig+0x96>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	4a2b      	ldr	r2, [pc, #172]	@ (800a2b8 <TIM_TI1_SetConfig+0x110>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d017      	beq.n	800a23e <TIM_TI1_SetConfig+0x96>
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	4a2a      	ldr	r2, [pc, #168]	@ (800a2bc <TIM_TI1_SetConfig+0x114>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d013      	beq.n	800a23e <TIM_TI1_SetConfig+0x96>
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4a29      	ldr	r2, [pc, #164]	@ (800a2c0 <TIM_TI1_SetConfig+0x118>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d00f      	beq.n	800a23e <TIM_TI1_SetConfig+0x96>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	4a28      	ldr	r2, [pc, #160]	@ (800a2c4 <TIM_TI1_SetConfig+0x11c>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d00b      	beq.n	800a23e <TIM_TI1_SetConfig+0x96>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	4a27      	ldr	r2, [pc, #156]	@ (800a2c8 <TIM_TI1_SetConfig+0x120>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d007      	beq.n	800a23e <TIM_TI1_SetConfig+0x96>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	4a26      	ldr	r2, [pc, #152]	@ (800a2cc <TIM_TI1_SetConfig+0x124>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d003      	beq.n	800a23e <TIM_TI1_SetConfig+0x96>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	4a25      	ldr	r2, [pc, #148]	@ (800a2d0 <TIM_TI1_SetConfig+0x128>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d101      	bne.n	800a242 <TIM_TI1_SetConfig+0x9a>
 800a23e:	2301      	movs	r3, #1
 800a240:	e000      	b.n	800a244 <TIM_TI1_SetConfig+0x9c>
 800a242:	2300      	movs	r3, #0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d008      	beq.n	800a25a <TIM_TI1_SetConfig+0xb2>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	f023 0303 	bic.w	r3, r3, #3
 800a24e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a250:	697a      	ldr	r2, [r7, #20]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4313      	orrs	r3, r2
 800a256:	617b      	str	r3, [r7, #20]
 800a258:	e003      	b.n	800a262 <TIM_TI1_SetConfig+0xba>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f043 0301 	orr.w	r3, r3, #1
 800a260:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a268:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	011b      	lsls	r3, r3, #4
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	4313      	orrs	r3, r2
 800a274:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	f023 030a 	bic.w	r3, r3, #10
 800a27c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	f003 030a 	and.w	r3, r3, #10
 800a284:	693a      	ldr	r2, [r7, #16]
 800a286:	4313      	orrs	r3, r2
 800a288:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	621a      	str	r2, [r3, #32]
}
 800a296:	bf00      	nop
 800a298:	371c      	adds	r7, #28
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	40012c00 	.word	0x40012c00
 800a2a8:	50012c00 	.word	0x50012c00
 800a2ac:	40000400 	.word	0x40000400
 800a2b0:	50000400 	.word	0x50000400
 800a2b4:	40000800 	.word	0x40000800
 800a2b8:	50000800 	.word	0x50000800
 800a2bc:	40000c00 	.word	0x40000c00
 800a2c0:	50000c00 	.word	0x50000c00
 800a2c4:	40013400 	.word	0x40013400
 800a2c8:	50013400 	.word	0x50013400
 800a2cc:	40014000 	.word	0x40014000
 800a2d0:	50014000 	.word	0x50014000

0800a2d4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b087      	sub	sp, #28
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
 800a2e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6a1b      	ldr	r3, [r3, #32]
 800a2e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6a1b      	ldr	r3, [r3, #32]
 800a2ec:	f023 0210 	bic.w	r2, r3, #16
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a300:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	021b      	lsls	r3, r3, #8
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	4313      	orrs	r3, r2
 800a30a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	031b      	lsls	r3, r3, #12
 800a318:	b29b      	uxth	r3, r3
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a326:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	011b      	lsls	r3, r3, #4
 800a32c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a330:	697a      	ldr	r2, [r7, #20]
 800a332:	4313      	orrs	r3, r2
 800a334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	621a      	str	r2, [r3, #32]
}
 800a342:	bf00      	nop
 800a344:	371c      	adds	r7, #28
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a34e:	b480      	push	{r7}
 800a350:	b087      	sub	sp, #28
 800a352:	af00      	add	r7, sp, #0
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	60b9      	str	r1, [r7, #8]
 800a358:	607a      	str	r2, [r7, #4]
 800a35a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6a1b      	ldr	r3, [r3, #32]
 800a360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6a1b      	ldr	r3, [r3, #32]
 800a366:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	69db      	ldr	r3, [r3, #28]
 800a372:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	f023 0303 	bic.w	r3, r3, #3
 800a37a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4313      	orrs	r3, r2
 800a382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a38a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	011b      	lsls	r3, r3, #4
 800a390:	b2db      	uxtb	r3, r3
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	4313      	orrs	r3, r2
 800a396:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a39e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	021b      	lsls	r3, r3, #8
 800a3a4:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	621a      	str	r2, [r3, #32]
}
 800a3ba:	bf00      	nop
 800a3bc:	371c      	adds	r7, #28
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b087      	sub	sp, #28
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	60f8      	str	r0, [r7, #12]
 800a3ce:	60b9      	str	r1, [r7, #8]
 800a3d0:	607a      	str	r2, [r7, #4]
 800a3d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6a1b      	ldr	r3, [r3, #32]
 800a3d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	69db      	ldr	r3, [r3, #28]
 800a3ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3f2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	021b      	lsls	r3, r3, #8
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a404:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	031b      	lsls	r3, r3, #12
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	4313      	orrs	r3, r2
 800a410:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a418:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	031b      	lsls	r3, r3, #12
 800a41e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	4313      	orrs	r3, r2
 800a426:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	693a      	ldr	r2, [r7, #16]
 800a42c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	697a      	ldr	r2, [r7, #20]
 800a432:	621a      	str	r2, [r3, #32]
}
 800a434:	bf00      	nop
 800a436:	371c      	adds	r7, #28
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a440:	b480      	push	{r7}
 800a442:	b087      	sub	sp, #28
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	f003 031f 	and.w	r3, r3, #31
 800a452:	2201      	movs	r2, #1
 800a454:	fa02 f303 	lsl.w	r3, r2, r3
 800a458:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6a1a      	ldr	r2, [r3, #32]
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	43db      	mvns	r3, r3
 800a462:	401a      	ands	r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6a1a      	ldr	r2, [r3, #32]
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	f003 031f 	and.w	r3, r3, #31
 800a472:	6879      	ldr	r1, [r7, #4]
 800a474:	fa01 f303 	lsl.w	r3, r1, r3
 800a478:	431a      	orrs	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	621a      	str	r2, [r3, #32]
}
 800a47e:	bf00      	nop
 800a480:	371c      	adds	r7, #28
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
	...

0800a48c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d101      	bne.n	800a4a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	e097      	b.n	800a5d4 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a45      	ldr	r2, [pc, #276]	@ (800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d00e      	beq.n	800a4ec <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a44      	ldr	r2, [pc, #272]	@ (800a5e4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d009      	beq.n	800a4ec <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a42      	ldr	r2, [pc, #264]	@ (800a5e8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d004      	beq.n	800a4ec <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a41      	ldr	r2, [pc, #260]	@ (800a5ec <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d108      	bne.n	800a4fe <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a4f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a508:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	4313      	orrs	r3, r2
 800a512:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a2f      	ldr	r2, [pc, #188]	@ (800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d040      	beq.n	800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a2e      	ldr	r2, [pc, #184]	@ (800a5e4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d03b      	beq.n	800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a538:	d036      	beq.n	800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a542:	d031      	beq.n	800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a29      	ldr	r2, [pc, #164]	@ (800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d02c      	beq.n	800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a28      	ldr	r2, [pc, #160]	@ (800a5f4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d027      	beq.n	800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a26      	ldr	r2, [pc, #152]	@ (800a5f8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d022      	beq.n	800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a25      	ldr	r2, [pc, #148]	@ (800a5fc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d01d      	beq.n	800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a23      	ldr	r2, [pc, #140]	@ (800a600 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d018      	beq.n	800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a22      	ldr	r2, [pc, #136]	@ (800a604 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d013      	beq.n	800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a18      	ldr	r2, [pc, #96]	@ (800a5e8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d00e      	beq.n	800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a17      	ldr	r2, [pc, #92]	@ (800a5ec <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d009      	beq.n	800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a1b      	ldr	r2, [pc, #108]	@ (800a608 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d004      	beq.n	800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a1a      	ldr	r2, [pc, #104]	@ (800a60c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d10c      	bne.n	800a5c2 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68ba      	ldr	r2, [r7, #8]
 800a5c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3714      	adds	r7, #20
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr
 800a5e0:	40012c00 	.word	0x40012c00
 800a5e4:	50012c00 	.word	0x50012c00
 800a5e8:	40013400 	.word	0x40013400
 800a5ec:	50013400 	.word	0x50013400
 800a5f0:	40000400 	.word	0x40000400
 800a5f4:	50000400 	.word	0x50000400
 800a5f8:	40000800 	.word	0x40000800
 800a5fc:	50000800 	.word	0x50000800
 800a600:	40000c00 	.word	0x40000c00
 800a604:	50000c00 	.word	0x50000c00
 800a608:	40014000 	.word	0x40014000
 800a60c:	50014000 	.word	0x50014000

0800a610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a654:	bf00      	nop
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d101      	bne.n	800a6ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e042      	b.n	800a734 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d106      	bne.n	800a6c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f7f7 fbf1 	bl	8001ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2224      	movs	r2, #36	@ 0x24
 800a6ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f022 0201 	bic.w	r2, r2, #1
 800a6dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d002      	beq.n	800a6ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f9d6 	bl	800aa98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f825 	bl	800a73c <UART_SetConfig>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d101      	bne.n	800a6fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e01b      	b.n	800a734 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	685a      	ldr	r2, [r3, #4]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a70a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	689a      	ldr	r2, [r3, #8]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a71a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f042 0201 	orr.w	r2, r2, #1
 800a72a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 fa55 	bl	800abdc <UART_CheckIdleState>
 800a732:	4603      	mov	r3, r0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a73c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a740:	b094      	sub	sp, #80	@ 0x50
 800a742:	af00      	add	r7, sp, #0
 800a744:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a746:	2300      	movs	r3, #0
 800a748:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	4b83      	ldr	r3, [pc, #524]	@ (800a960 <UART_SetConfig+0x224>)
 800a752:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a756:	689a      	ldr	r2, [r3, #8]
 800a758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a75a:	691b      	ldr	r3, [r3, #16]
 800a75c:	431a      	orrs	r2, r3
 800a75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	431a      	orrs	r2, r3
 800a764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a766:	69db      	ldr	r3, [r3, #28]
 800a768:	4313      	orrs	r3, r2
 800a76a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	497c      	ldr	r1, [pc, #496]	@ (800a964 <UART_SetConfig+0x228>)
 800a774:	4019      	ands	r1, r3
 800a776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a77c:	430b      	orrs	r3, r1
 800a77e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a78c:	68d9      	ldr	r1, [r3, #12]
 800a78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	ea40 0301 	orr.w	r3, r0, r1
 800a796:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	4b6f      	ldr	r3, [pc, #444]	@ (800a960 <UART_SetConfig+0x224>)
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d009      	beq.n	800a7bc <UART_SetConfig+0x80>
 800a7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	4b6e      	ldr	r3, [pc, #440]	@ (800a968 <UART_SetConfig+0x22c>)
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d004      	beq.n	800a7bc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a7b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7b4:	6a1a      	ldr	r2, [r3, #32]
 800a7b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a7c6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7d0:	430b      	orrs	r3, r1
 800a7d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7da:	f023 000f 	bic.w	r0, r3, #15
 800a7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	ea40 0301 	orr.w	r3, r0, r1
 800a7ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	4b5e      	ldr	r3, [pc, #376]	@ (800a96c <UART_SetConfig+0x230>)
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d102      	bne.n	800a7fc <UART_SetConfig+0xc0>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7fa:	e032      	b.n	800a862 <UART_SetConfig+0x126>
 800a7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	4b5b      	ldr	r3, [pc, #364]	@ (800a970 <UART_SetConfig+0x234>)
 800a802:	429a      	cmp	r2, r3
 800a804:	d102      	bne.n	800a80c <UART_SetConfig+0xd0>
 800a806:	2302      	movs	r3, #2
 800a808:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a80a:	e02a      	b.n	800a862 <UART_SetConfig+0x126>
 800a80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	4b58      	ldr	r3, [pc, #352]	@ (800a974 <UART_SetConfig+0x238>)
 800a812:	429a      	cmp	r2, r3
 800a814:	d102      	bne.n	800a81c <UART_SetConfig+0xe0>
 800a816:	2304      	movs	r3, #4
 800a818:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a81a:	e022      	b.n	800a862 <UART_SetConfig+0x126>
 800a81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	4b55      	ldr	r3, [pc, #340]	@ (800a978 <UART_SetConfig+0x23c>)
 800a822:	429a      	cmp	r2, r3
 800a824:	d102      	bne.n	800a82c <UART_SetConfig+0xf0>
 800a826:	2308      	movs	r3, #8
 800a828:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a82a:	e01a      	b.n	800a862 <UART_SetConfig+0x126>
 800a82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	4b52      	ldr	r3, [pc, #328]	@ (800a97c <UART_SetConfig+0x240>)
 800a832:	429a      	cmp	r2, r3
 800a834:	d102      	bne.n	800a83c <UART_SetConfig+0x100>
 800a836:	2310      	movs	r3, #16
 800a838:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a83a:	e012      	b.n	800a862 <UART_SetConfig+0x126>
 800a83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	4b4f      	ldr	r3, [pc, #316]	@ (800a980 <UART_SetConfig+0x244>)
 800a842:	429a      	cmp	r2, r3
 800a844:	d103      	bne.n	800a84e <UART_SetConfig+0x112>
 800a846:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800a84a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a84c:	e009      	b.n	800a862 <UART_SetConfig+0x126>
 800a84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	4b43      	ldr	r3, [pc, #268]	@ (800a960 <UART_SetConfig+0x224>)
 800a854:	429a      	cmp	r2, r3
 800a856:	d102      	bne.n	800a85e <UART_SetConfig+0x122>
 800a858:	2320      	movs	r3, #32
 800a85a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a85c:	e001      	b.n	800a862 <UART_SetConfig+0x126>
 800a85e:	2300      	movs	r3, #0
 800a860:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	4b3e      	ldr	r3, [pc, #248]	@ (800a960 <UART_SetConfig+0x224>)
 800a868:	429a      	cmp	r2, r3
 800a86a:	d005      	beq.n	800a878 <UART_SetConfig+0x13c>
 800a86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	4b3d      	ldr	r3, [pc, #244]	@ (800a968 <UART_SetConfig+0x22c>)
 800a872:	429a      	cmp	r2, r3
 800a874:	f040 8088 	bne.w	800a988 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a878:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a87a:	2200      	movs	r2, #0
 800a87c:	623b      	str	r3, [r7, #32]
 800a87e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a880:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a884:	f7fc fda2 	bl	80073cc <HAL_RCCEx_GetPeriphCLKFreq>
 800a888:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a88a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f000 80eb 	beq.w	800aa68 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a896:	4a3b      	ldr	r2, [pc, #236]	@ (800a984 <UART_SetConfig+0x248>)
 800a898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a89c:	461a      	mov	r2, r3
 800a89e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8a4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	005b      	lsls	r3, r3, #1
 800a8ae:	4413      	add	r3, r2
 800a8b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d305      	bcc.n	800a8c2 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a8b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d903      	bls.n	800a8ca <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a8c8:	e048      	b.n	800a95c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	61bb      	str	r3, [r7, #24]
 800a8d0:	61fa      	str	r2, [r7, #28]
 800a8d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d6:	4a2b      	ldr	r2, [pc, #172]	@ (800a984 <UART_SetConfig+0x248>)
 800a8d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	2200      	movs	r2, #0
 800a8e0:	613b      	str	r3, [r7, #16]
 800a8e2:	617a      	str	r2, [r7, #20]
 800a8e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a8e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a8ec:	f7f6 f8be 	bl	8000a6c <__aeabi_uldivmod>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	f04f 0200 	mov.w	r2, #0
 800a8fc:	f04f 0300 	mov.w	r3, #0
 800a900:	020b      	lsls	r3, r1, #8
 800a902:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a906:	0202      	lsls	r2, r0, #8
 800a908:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a90a:	6849      	ldr	r1, [r1, #4]
 800a90c:	0849      	lsrs	r1, r1, #1
 800a90e:	2000      	movs	r0, #0
 800a910:	460c      	mov	r4, r1
 800a912:	4605      	mov	r5, r0
 800a914:	eb12 0804 	adds.w	r8, r2, r4
 800a918:	eb43 0905 	adc.w	r9, r3, r5
 800a91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	60bb      	str	r3, [r7, #8]
 800a924:	60fa      	str	r2, [r7, #12]
 800a926:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a92a:	4640      	mov	r0, r8
 800a92c:	4649      	mov	r1, r9
 800a92e:	f7f6 f89d 	bl	8000a6c <__aeabi_uldivmod>
 800a932:	4602      	mov	r2, r0
 800a934:	460b      	mov	r3, r1
 800a936:	4613      	mov	r3, r2
 800a938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a93a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a93c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a940:	d308      	bcc.n	800a954 <UART_SetConfig+0x218>
 800a942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a944:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a948:	d204      	bcs.n	800a954 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800a94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a950:	60da      	str	r2, [r3, #12]
 800a952:	e003      	b.n	800a95c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800a95a:	e085      	b.n	800aa68 <UART_SetConfig+0x32c>
 800a95c:	e084      	b.n	800aa68 <UART_SetConfig+0x32c>
 800a95e:	bf00      	nop
 800a960:	46002400 	.word	0x46002400
 800a964:	cfff69f3 	.word	0xcfff69f3
 800a968:	56002400 	.word	0x56002400
 800a96c:	40013800 	.word	0x40013800
 800a970:	40004400 	.word	0x40004400
 800a974:	40004800 	.word	0x40004800
 800a978:	40004c00 	.word	0x40004c00
 800a97c:	40005000 	.word	0x40005000
 800a980:	40006400 	.word	0x40006400
 800a984:	0800ebc8 	.word	0x0800ebc8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a98a:	69db      	ldr	r3, [r3, #28]
 800a98c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a990:	d13c      	bne.n	800aa0c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a994:	2200      	movs	r2, #0
 800a996:	603b      	str	r3, [r7, #0]
 800a998:	607a      	str	r2, [r7, #4]
 800a99a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a99e:	f7fc fd15 	bl	80073cc <HAL_RCCEx_GetPeriphCLKFreq>
 800a9a2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a9a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d05e      	beq.n	800aa68 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ae:	4a39      	ldr	r2, [pc, #228]	@ (800aa94 <UART_SetConfig+0x358>)
 800a9b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9bc:	005a      	lsls	r2, r3, #1
 800a9be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	085b      	lsrs	r3, r3, #1
 800a9c4:	441a      	add	r2, r3
 800a9c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9d2:	2b0f      	cmp	r3, #15
 800a9d4:	d916      	bls.n	800aa04 <UART_SetConfig+0x2c8>
 800a9d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9dc:	d212      	bcs.n	800aa04 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	f023 030f 	bic.w	r3, r3, #15
 800a9e6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9ea:	085b      	lsrs	r3, r3, #1
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	f003 0307 	and.w	r3, r3, #7
 800a9f2:	b29a      	uxth	r2, r3
 800a9f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800aa00:	60da      	str	r2, [r3, #12]
 800aa02:	e031      	b.n	800aa68 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800aa0a:	e02d      	b.n	800aa68 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aa0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa0e:	2200      	movs	r2, #0
 800aa10:	469a      	mov	sl, r3
 800aa12:	4693      	mov	fp, r2
 800aa14:	4650      	mov	r0, sl
 800aa16:	4659      	mov	r1, fp
 800aa18:	f7fc fcd8 	bl	80073cc <HAL_RCCEx_GetPeriphCLKFreq>
 800aa1c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800aa1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d021      	beq.n	800aa68 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa28:	4a1a      	ldr	r2, [pc, #104]	@ (800aa94 <UART_SetConfig+0x358>)
 800aa2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa32:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	085b      	lsrs	r3, r3, #1
 800aa3c:	441a      	add	r2, r3
 800aa3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa4a:	2b0f      	cmp	r3, #15
 800aa4c:	d909      	bls.n	800aa62 <UART_SetConfig+0x326>
 800aa4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa54:	d205      	bcs.n	800aa62 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	60da      	str	r2, [r3, #12]
 800aa60:	e002      	b.n	800aa68 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aa70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa72:	2201      	movs	r2, #1
 800aa74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aa7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa80:	2200      	movs	r2, #0
 800aa82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aa84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3750      	adds	r7, #80	@ 0x50
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa92:	bf00      	nop
 800aa94:	0800ebc8 	.word	0x0800ebc8

0800aa98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaa4:	f003 0308 	and.w	r3, r3, #8
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00a      	beq.n	800aac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	430a      	orrs	r2, r1
 800aac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aac6:	f003 0301 	and.w	r3, r3, #1
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00a      	beq.n	800aae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	430a      	orrs	r2, r1
 800aae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae8:	f003 0302 	and.w	r3, r3, #2
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00a      	beq.n	800ab06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	430a      	orrs	r2, r1
 800ab04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab0a:	f003 0304 	and.w	r3, r3, #4
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00a      	beq.n	800ab28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	430a      	orrs	r2, r1
 800ab26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab2c:	f003 0310 	and.w	r3, r3, #16
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d00a      	beq.n	800ab4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	430a      	orrs	r2, r1
 800ab48:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab4e:	f003 0320 	and.w	r3, r3, #32
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00a      	beq.n	800ab6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	430a      	orrs	r2, r1
 800ab6a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d01a      	beq.n	800abae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	430a      	orrs	r2, r1
 800ab8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab96:	d10a      	bne.n	800abae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	430a      	orrs	r2, r1
 800abac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00a      	beq.n	800abd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	430a      	orrs	r2, r1
 800abce:	605a      	str	r2, [r3, #4]
  }
}
 800abd0:	bf00      	nop
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b098      	sub	sp, #96	@ 0x60
 800abe0:	af02      	add	r7, sp, #8
 800abe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800abec:	f7f7 fbde 	bl	80023ac <HAL_GetTick>
 800abf0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f003 0308 	and.w	r3, r3, #8
 800abfc:	2b08      	cmp	r3, #8
 800abfe:	d12f      	bne.n	800ac60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 f88e 	bl	800ad30 <UART_WaitOnFlagUntilTimeout>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d022      	beq.n	800ac60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac22:	e853 3f00 	ldrex	r3, [r3]
 800ac26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac2e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	461a      	mov	r2, r3
 800ac36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac38:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac40:	e841 2300 	strex	r3, r2, [r1]
 800ac44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1e6      	bne.n	800ac1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2220      	movs	r2, #32
 800ac50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	e063      	b.n	800ad28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0304 	and.w	r3, r3, #4
 800ac6a:	2b04      	cmp	r3, #4
 800ac6c:	d149      	bne.n	800ad02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac6e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac76:	2200      	movs	r2, #0
 800ac78:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f857 	bl	800ad30 <UART_WaitOnFlagUntilTimeout>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d03c      	beq.n	800ad02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac90:	e853 3f00 	ldrex	r3, [r3]
 800ac94:	623b      	str	r3, [r7, #32]
   return(result);
 800ac96:	6a3b      	ldr	r3, [r7, #32]
 800ac98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	461a      	mov	r2, r3
 800aca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aca6:	633b      	str	r3, [r7, #48]	@ 0x30
 800aca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acae:	e841 2300 	strex	r3, r2, [r1]
 800acb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800acb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1e6      	bne.n	800ac88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	3308      	adds	r3, #8
 800acc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	e853 3f00 	ldrex	r3, [r3]
 800acc8:	60fb      	str	r3, [r7, #12]
   return(result);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f023 0301 	bic.w	r3, r3, #1
 800acd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	3308      	adds	r3, #8
 800acd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800acda:	61fa      	str	r2, [r7, #28]
 800acdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acde:	69b9      	ldr	r1, [r7, #24]
 800ace0:	69fa      	ldr	r2, [r7, #28]
 800ace2:	e841 2300 	strex	r3, r2, [r1]
 800ace6:	617b      	str	r3, [r7, #20]
   return(result);
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d1e5      	bne.n	800acba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2220      	movs	r2, #32
 800acf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e012      	b.n	800ad28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2220      	movs	r2, #32
 800ad06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2220      	movs	r2, #32
 800ad0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3758      	adds	r7, #88	@ 0x58
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	603b      	str	r3, [r7, #0]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad40:	e04f      	b.n	800ade2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad48:	d04b      	beq.n	800ade2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad4a:	f7f7 fb2f 	bl	80023ac <HAL_GetTick>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	1ad3      	subs	r3, r2, r3
 800ad54:	69ba      	ldr	r2, [r7, #24]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d302      	bcc.n	800ad60 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad60:	2303      	movs	r3, #3
 800ad62:	e04e      	b.n	800ae02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 0304 	and.w	r3, r3, #4
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d037      	beq.n	800ade2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	2b80      	cmp	r3, #128	@ 0x80
 800ad76:	d034      	beq.n	800ade2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	2b40      	cmp	r3, #64	@ 0x40
 800ad7c:	d031      	beq.n	800ade2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	69db      	ldr	r3, [r3, #28]
 800ad84:	f003 0308 	and.w	r3, r3, #8
 800ad88:	2b08      	cmp	r3, #8
 800ad8a:	d110      	bne.n	800adae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2208      	movs	r2, #8
 800ad92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f000 f838 	bl	800ae0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2208      	movs	r2, #8
 800ad9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e029      	b.n	800ae02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	69db      	ldr	r3, [r3, #28]
 800adb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800adb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800adbc:	d111      	bne.n	800ade2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800adc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f000 f81e 	bl	800ae0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2220      	movs	r2, #32
 800add2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2200      	movs	r2, #0
 800adda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800adde:	2303      	movs	r3, #3
 800ade0:	e00f      	b.n	800ae02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	69da      	ldr	r2, [r3, #28]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	4013      	ands	r3, r2
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	429a      	cmp	r2, r3
 800adf0:	bf0c      	ite	eq
 800adf2:	2301      	moveq	r3, #1
 800adf4:	2300      	movne	r3, #0
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	461a      	mov	r2, r3
 800adfa:	79fb      	ldrb	r3, [r7, #7]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d0a0      	beq.n	800ad42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b095      	sub	sp, #84	@ 0x54
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae1a:	e853 3f00 	ldrex	r3, [r3]
 800ae1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae30:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae38:	e841 2300 	strex	r3, r2, [r1]
 800ae3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d1e6      	bne.n	800ae12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3308      	adds	r3, #8
 800ae4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	e853 3f00 	ldrex	r3, [r3]
 800ae52:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae5a:	f023 0301 	bic.w	r3, r3, #1
 800ae5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	3308      	adds	r3, #8
 800ae66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae70:	e841 2300 	strex	r3, r2, [r1]
 800ae74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1e3      	bne.n	800ae44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d118      	bne.n	800aeb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	e853 3f00 	ldrex	r3, [r3]
 800ae90:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	f023 0310 	bic.w	r3, r3, #16
 800ae98:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aea2:	61bb      	str	r3, [r7, #24]
 800aea4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea6:	6979      	ldr	r1, [r7, #20]
 800aea8:	69ba      	ldr	r2, [r7, #24]
 800aeaa:	e841 2300 	strex	r3, r2, [r1]
 800aeae:	613b      	str	r3, [r7, #16]
   return(result);
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d1e6      	bne.n	800ae84 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2220      	movs	r2, #32
 800aeba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aeca:	bf00      	nop
 800aecc:	3754      	adds	r7, #84	@ 0x54
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aed6:	b480      	push	{r7}
 800aed8:	b085      	sub	sp, #20
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d101      	bne.n	800aeec <HAL_UARTEx_DisableFifoMode+0x16>
 800aee8:	2302      	movs	r3, #2
 800aeea:	e027      	b.n	800af3c <HAL_UARTEx_DisableFifoMode+0x66>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2224      	movs	r2, #36	@ 0x24
 800aef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f022 0201 	bic.w	r2, r2, #1
 800af12:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800af1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2220      	movs	r2, #32
 800af2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3714      	adds	r7, #20
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d101      	bne.n	800af60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af5c:	2302      	movs	r3, #2
 800af5e:	e02d      	b.n	800afbc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2224      	movs	r2, #36	@ 0x24
 800af6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f022 0201 	bic.w	r2, r2, #1
 800af86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	430a      	orrs	r2, r1
 800af9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 f84f 	bl	800b040 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2220      	movs	r2, #32
 800afae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d101      	bne.n	800afdc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800afd8:	2302      	movs	r3, #2
 800afda:	e02d      	b.n	800b038 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2224      	movs	r2, #36	@ 0x24
 800afe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f022 0201 	bic.w	r2, r2, #1
 800b002:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	430a      	orrs	r2, r1
 800b016:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 f811 	bl	800b040 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2220      	movs	r2, #32
 800b02a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b040:	b480      	push	{r7}
 800b042:	b085      	sub	sp, #20
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d108      	bne.n	800b062 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b060:	e031      	b.n	800b0c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b062:	2308      	movs	r3, #8
 800b064:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b066:	2308      	movs	r3, #8
 800b068:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	0e5b      	lsrs	r3, r3, #25
 800b072:	b2db      	uxtb	r3, r3
 800b074:	f003 0307 	and.w	r3, r3, #7
 800b078:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	0f5b      	lsrs	r3, r3, #29
 800b082:	b2db      	uxtb	r3, r3
 800b084:	f003 0307 	and.w	r3, r3, #7
 800b088:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b08a:	7bbb      	ldrb	r3, [r7, #14]
 800b08c:	7b3a      	ldrb	r2, [r7, #12]
 800b08e:	4911      	ldr	r1, [pc, #68]	@ (800b0d4 <UARTEx_SetNbDataToProcess+0x94>)
 800b090:	5c8a      	ldrb	r2, [r1, r2]
 800b092:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b096:	7b3a      	ldrb	r2, [r7, #12]
 800b098:	490f      	ldr	r1, [pc, #60]	@ (800b0d8 <UARTEx_SetNbDataToProcess+0x98>)
 800b09a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b09c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0a0:	b29a      	uxth	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
 800b0aa:	7b7a      	ldrb	r2, [r7, #13]
 800b0ac:	4909      	ldr	r1, [pc, #36]	@ (800b0d4 <UARTEx_SetNbDataToProcess+0x94>)
 800b0ae:	5c8a      	ldrb	r2, [r1, r2]
 800b0b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b0b4:	7b7a      	ldrb	r2, [r7, #13]
 800b0b6:	4908      	ldr	r1, [pc, #32]	@ (800b0d8 <UARTEx_SetNbDataToProcess+0x98>)
 800b0b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b0c6:	bf00      	nop
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	0800ebe0 	.word	0x0800ebe0
 800b0d8:	0800ebe8 	.word	0x0800ebe8

0800b0dc <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b086      	sub	sp, #24
 800b0e0:	af00      	add	r7, sp, #0
    /* Initialize WiFi GPIO pins */
    GPIO_InitTypeDef GPIO_InitStruct;

    /* Configure GPIO pins : PA1 PA2 PA0 - we are using ST GPIO definitions for winc1500 */
    GPIO_InitStruct.Pin   = CONF_WINC_PIN_RESET;
 800b0e2:	2310      	movs	r3, #16
 800b0e4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;    // GPIO_PULLDOWN;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CONF_WINC_PORT_RESET, &GPIO_InitStruct);
 800b0f6:	1d3b      	adds	r3, r7, #4
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	481d      	ldr	r0, [pc, #116]	@ (800b170 <init_chip_pins+0x94>)
 800b0fc:	f7f8 ffb6 	bl	800406c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_CHIP_ENABLE;
 800b100:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b104:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(CONF_WINC_PORT_CHIP_ENABLE, &GPIO_InitStruct);
 800b106:	1d3b      	adds	r3, r7, #4
 800b108:	4619      	mov	r1, r3
 800b10a:	481a      	ldr	r0, [pc, #104]	@ (800b174 <init_chip_pins+0x98>)
 800b10c:	f7f8 ffae 	bl	800406c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_WAKE;
 800b110:	2310      	movs	r3, #16
 800b112:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CONF_WINC_PORT_WAKE, &GPIO_InitStruct);
 800b114:	1d3b      	adds	r3, r7, #4
 800b116:	4619      	mov	r1, r3
 800b118:	4817      	ldr	r0, [pc, #92]	@ (800b178 <init_chip_pins+0x9c>)
 800b11a:	f7f8 ffa7 	bl	800406c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_POWER_ENABLE;
 800b11e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b122:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CONF_WINC_PORT_POWER_ENABLE, &GPIO_InitStruct);
 800b124:	1d3b      	adds	r3, r7, #4
 800b126:	4619      	mov	r1, r3
 800b128:	4813      	ldr	r0, [pc, #76]	@ (800b178 <init_chip_pins+0x9c>)
 800b12a:	f7f8 ff9f 	bl	800406c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE;
 800b12e:	2340      	movs	r3, #64	@ 0x40
 800b130:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE, &GPIO_InitStruct);
 800b132:	1d3b      	adds	r3, r7, #4
 800b134:	4619      	mov	r1, r3
 800b136:	480e      	ldr	r0, [pc, #56]	@ (800b170 <init_chip_pins+0x94>)
 800b138:	f7f8 ff98 	bl	800406c <HAL_GPIO_Init>

    /* Set INIT value */
    HAL_GPIO_WritePin(CONF_WINC_PORT_POWER_ENABLE,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_RESET);
 800b13c:	2200      	movs	r2, #0
 800b13e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b142:	480d      	ldr	r0, [pc, #52]	@ (800b178 <init_chip_pins+0x9c>)
 800b144:	f7f9 f96a 	bl	800441c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_SET);
 800b148:	2201      	movs	r2, #1
 800b14a:	2140      	movs	r1, #64	@ 0x40
 800b14c:	4808      	ldr	r0, [pc, #32]	@ (800b170 <init_chip_pins+0x94>)
 800b14e:	f7f9 f965 	bl	800441c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_CHIP_ENABLE,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_RESET);
 800b152:	2200      	movs	r2, #0
 800b154:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b158:	4806      	ldr	r0, [pc, #24]	@ (800b174 <init_chip_pins+0x98>)
 800b15a:	f7f9 f95f 	bl	800441c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_RESET,CONF_WINC_PIN_RESET,GPIO_PIN_RESET);
 800b15e:	2200      	movs	r2, #0
 800b160:	2110      	movs	r1, #16
 800b162:	4803      	ldr	r0, [pc, #12]	@ (800b170 <init_chip_pins+0x94>)
 800b164:	f7f9 f95a 	bl	800441c <HAL_GPIO_WritePin>

}
 800b168:	bf00      	nop
 800b16a:	3718      	adds	r7, #24
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	42020400 	.word	0x42020400
 800b174:	42020c00 	.word	0x42020c00
 800b178:	42020000 	.word	0x42020000

0800b17c <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	af00      	add	r7, sp, #0
	/* Initialize chip IOs. */
	init_chip_pins();
 800b180:	f7ff ffac 	bl	800b0dc <init_chip_pins>

	/* Perform chip reset. */
	nm_bsp_reset();
 800b184:	f000 f804 	bl	800b190 <nm_bsp_reset>

	return M2M_SUCCESS;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	bd80      	pop	{r7, pc}
	...

0800b190 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	af00      	add	r7, sp, #0
    /* Set Power sequence of GPIO lines */
    /* -------------------------------- */

    /* Power enable (3.3V) - 3V3_DC2DC_EN output */
    HAL_GPIO_WritePin(CONF_WINC_PORT_POWER_ENABLE,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_SET);
 800b194:	2201      	movs	r2, #1
 800b196:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b19a:	4810      	ldr	r0, [pc, #64]	@ (800b1dc <nm_bsp_reset+0x4c>)
 800b19c:	f7f9 f93e 	bl	800441c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800b1a0:	2064      	movs	r0, #100	@ 0x64
 800b1a2:	f7f7 f90f 	bl	80023c4 <HAL_Delay>

    /* Level Shifter Translate enable - LEVEL_TRNSLT_EN output */
    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_RESET);
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	2140      	movs	r1, #64	@ 0x40
 800b1aa:	480d      	ldr	r0, [pc, #52]	@ (800b1e0 <nm_bsp_reset+0x50>)
 800b1ac:	f7f9 f936 	bl	800441c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800b1b0:	2064      	movs	r0, #100	@ 0x64
 800b1b2:	f7f7 f907 	bl	80023c4 <HAL_Delay>

    /* Set CHIP enable */
	HAL_GPIO_WritePin(CONF_WINC_PORT_CHIP_ENABLE,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b1bc:	4809      	ldr	r0, [pc, #36]	@ (800b1e4 <nm_bsp_reset+0x54>)
 800b1be:	f7f9 f92d 	bl	800441c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800b1c2:	2064      	movs	r0, #100	@ 0x64
 800b1c4:	f7f7 f8fe 	bl	80023c4 <HAL_Delay>

    /* Set RSTN 1.8V */
    HAL_GPIO_WritePin(CONF_WINC_PORT_RESET,CONF_WINC_PIN_RESET,GPIO_PIN_SET);
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	2110      	movs	r1, #16
 800b1cc:	4804      	ldr	r0, [pc, #16]	@ (800b1e0 <nm_bsp_reset+0x50>)
 800b1ce:	f7f9 f925 	bl	800441c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800b1d2:	2064      	movs	r0, #100	@ 0x64
 800b1d4:	f7f7 f8f6 	bl	80023c4 <HAL_Delay>

}
 800b1d8:	bf00      	nop
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	42020000 	.word	0x42020000
 800b1e0:	42020400 	.word	0x42020400
 800b1e4:	42020c00 	.word	0x42020c00

0800b1e8 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
    /* use FreeRTOS delay */
    HAL_Delay(u32TimeMsec);
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f7f7 f8e7 	bl	80023c4 <HAL_Delay>
}
 800b1f6:	bf00      	nop
 800b1f8:	3708      	adds	r7, #8
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
	...

0800b200 <spi_select_slave>:
*	@fn		spi_select_slave
*	@brief	Select slave chip select: true - select, false - deselect
*	@return	None
*/
static void spi_select_slave(const uint8_t select)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	4603      	mov	r3, r0
 800b208:	71fb      	strb	r3, [r7, #7]
    if (select)
 800b20a:	79fb      	ldrb	r3, [r7, #7]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d006      	beq.n	800b21e <spi_select_slave+0x1e>
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_RESET);
 800b210:	2200      	movs	r2, #0
 800b212:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b216:	4807      	ldr	r0, [pc, #28]	@ (800b234 <spi_select_slave+0x34>)
 800b218:	f7f9 f900 	bl	800441c <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
    }
}
 800b21c:	e005      	b.n	800b22a <spi_select_slave+0x2a>
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 800b21e:	2201      	movs	r2, #1
 800b220:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b224:	4803      	ldr	r0, [pc, #12]	@ (800b234 <spi_select_slave+0x34>)
 800b226:	f7f9 f8f9 	bl	800441c <HAL_GPIO_WritePin>
}
 800b22a:	bf00      	nop
 800b22c:	3708      	adds	r7, #8
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	42020c00 	.word	0x42020c00

0800b238 <nm_spi_rw>:
	return M2M_SUCCESS;
}
#else

sint8 nm_spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b088      	sub	sp, #32
 800b23c:	af02      	add	r7, sp, #8
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	4613      	mov	r3, r2
 800b244:	80fb      	strh	r3, [r7, #6]
   HAL_StatusTypeDef status;

    /* Start SPI transaction - polling method */
  	spi_select_slave(true);
 800b246:	2001      	movs	r0, #1
 800b248:	f7ff ffda 	bl	800b200 <spi_select_slave>


    /* Transmit/Recieve */
    if (pu8Mosi == NULL)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d10b      	bne.n	800b26a <nm_spi_rw+0x32>
	{
		status = HAL_SPI_TransmitReceive(&hspiWifi,spiDummyBuf,pu8Miso,u16Sz,1000);
 800b252:	88fb      	ldrh	r3, [r7, #6]
 800b254:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b258:	9200      	str	r2, [sp, #0]
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	4921      	ldr	r1, [pc, #132]	@ (800b2e4 <nm_spi_rw+0xac>)
 800b25e:	4822      	ldr	r0, [pc, #136]	@ (800b2e8 <nm_spi_rw+0xb0>)
 800b260:	f7fd fe58 	bl	8008f14 <HAL_SPI_TransmitReceive>
 800b264:	4603      	mov	r3, r0
 800b266:	75fb      	strb	r3, [r7, #23]
 800b268:	e01f      	b.n	800b2aa <nm_spi_rw+0x72>
    }
    else if(pu8Miso == NULL)
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d111      	bne.n	800b294 <nm_spi_rw+0x5c>
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,spiDummyBuf,u16Sz,1000);
 800b270:	88fb      	ldrh	r3, [r7, #6]
 800b272:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b276:	9200      	str	r2, [sp, #0]
 800b278:	4a1a      	ldr	r2, [pc, #104]	@ (800b2e4 <nm_spi_rw+0xac>)
 800b27a:	68f9      	ldr	r1, [r7, #12]
 800b27c:	481a      	ldr	r0, [pc, #104]	@ (800b2e8 <nm_spi_rw+0xb0>)
 800b27e:	f7fd fe49 	bl	8008f14 <HAL_SPI_TransmitReceive>
 800b282:	4603      	mov	r3, r0
 800b284:	75fb      	strb	r3, [r7, #23]
        memset(spiDummyBuf,0, u16Sz);
 800b286:	88fb      	ldrh	r3, [r7, #6]
 800b288:	461a      	mov	r2, r3
 800b28a:	2100      	movs	r1, #0
 800b28c:	4815      	ldr	r0, [pc, #84]	@ (800b2e4 <nm_spi_rw+0xac>)
 800b28e:	f002 f87b 	bl	800d388 <memset>
 800b292:	e00a      	b.n	800b2aa <nm_spi_rw+0x72>
    }
    else
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,pu8Miso,u16Sz,1000);
 800b294:	88fb      	ldrh	r3, [r7, #6]
 800b296:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b29a:	9200      	str	r2, [sp, #0]
 800b29c:	68ba      	ldr	r2, [r7, #8]
 800b29e:	68f9      	ldr	r1, [r7, #12]
 800b2a0:	4811      	ldr	r0, [pc, #68]	@ (800b2e8 <nm_spi_rw+0xb0>)
 800b2a2:	f7fd fe37 	bl	8008f14 <HAL_SPI_TransmitReceive>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	75fb      	strb	r3, [r7, #23]
    }

    /* Handle Transmit/Recieve error */
    if (status != HAL_OK)
 800b2aa:	7dfb      	ldrb	r3, [r7, #23]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d010      	beq.n	800b2d2 <nm_spi_rw+0x9a>
    {
        M2M_ERR("%s: HAL_SPI_TransmitReceive failed. error (%d)\n",__FUNCTION__,status);
 800b2b0:	22b2      	movs	r2, #178	@ 0xb2
 800b2b2:	490e      	ldr	r1, [pc, #56]	@ (800b2ec <nm_spi_rw+0xb4>)
 800b2b4:	480e      	ldr	r0, [pc, #56]	@ (800b2f0 <nm_spi_rw+0xb8>)
 800b2b6:	f001 ff17 	bl	800d0e8 <iprintf>
 800b2ba:	7dfb      	ldrb	r3, [r7, #23]
 800b2bc:	461a      	mov	r2, r3
 800b2be:	490b      	ldr	r1, [pc, #44]	@ (800b2ec <nm_spi_rw+0xb4>)
 800b2c0:	480c      	ldr	r0, [pc, #48]	@ (800b2f4 <nm_spi_rw+0xbc>)
 800b2c2:	f001 ff11 	bl	800d0e8 <iprintf>
 800b2c6:	200d      	movs	r0, #13
 800b2c8:	f001 ff20 	bl	800d10c <putchar>
        return status;
 800b2cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2d0:	e003      	b.n	800b2da <nm_spi_rw+0xa2>
    }

  	spi_select_slave(false);
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	f7ff ff94 	bl	800b200 <spi_select_slave>

	return M2M_SUCCESS;
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3718      	adds	r7, #24
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	20000534 	.word	0x20000534
 800b2e8:	200004a4 	.word	0x200004a4
 800b2ec:	0800ebf0 	.word	0x0800ebf0
 800b2f0:	0800dfc0 	.word	0x0800dfc0
 800b2f4:	0800dfd4 	.word	0x0800dfd4

0800b2f8 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8 *pDst, uint8 *pSrc, uint32 sz)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	607a      	str	r2, [r7, #4]
    if(sz == 0) return;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d010      	beq.n	800b32c <m2m_memcpy+0x34>
    do
    {
        *pDst = *pSrc;
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	781a      	ldrb	r2, [r3, #0]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	701a      	strb	r2, [r3, #0]
        pDst++;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	3301      	adds	r3, #1
 800b316:	60fb      	str	r3, [r7, #12]
        pSrc++;
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	3301      	adds	r3, #1
 800b31c:	60bb      	str	r3, [r7, #8]
    } while(--sz);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	3b01      	subs	r3, #1
 800b322:	607b      	str	r3, [r7, #4]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1ef      	bne.n	800b30a <m2m_memcpy+0x12>
 800b32a:	e000      	b.n	800b32e <m2m_memcpy+0x36>
    if(sz == 0) return;
 800b32c:	bf00      	nop
}
 800b32e:	3714      	adds	r7, #20
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <m2m_memset>:

    return cs;
}

void m2m_memset(uint8 *pBuf, uint8 val, uint32 sz)
{
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	460b      	mov	r3, r1
 800b342:	607a      	str	r2, [r7, #4]
 800b344:	72fb      	strb	r3, [r7, #11]
    if(sz == 0) return;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00c      	beq.n	800b366 <m2m_memset+0x2e>
    do
    {
        *pBuf = val;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	7afa      	ldrb	r2, [r7, #11]
 800b350:	701a      	strb	r2, [r3, #0]
        pBuf++;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	3301      	adds	r3, #1
 800b356:	60fb      	str	r3, [r7, #12]
    } while(--sz);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	607b      	str	r3, [r7, #4]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d1f3      	bne.n	800b34c <m2m_memset+0x14>
 800b364:	e000      	b.n	800b368 <m2m_memset+0x30>
    if(sz == 0) return;
 800b366:	bf00      	nop
}
 800b368:	3714      	adds	r7, #20
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <m2m_strlen>:

uint16 m2m_strlen(uint8 *pcStr)
{
 800b372:	b480      	push	{r7}
 800b374:	b085      	sub	sp, #20
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
    uint16  u16StrLen = 0;
 800b37a:	2300      	movs	r3, #0
 800b37c:	81fb      	strh	r3, [r7, #14]
    while(*pcStr)
 800b37e:	e005      	b.n	800b38c <m2m_strlen+0x1a>
    {
        u16StrLen ++;
 800b380:	89fb      	ldrh	r3, [r7, #14]
 800b382:	3301      	adds	r3, #1
 800b384:	81fb      	strh	r3, [r7, #14]
        pcStr++;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	3301      	adds	r3, #1
 800b38a:	607b      	str	r3, [r7, #4]
    while(*pcStr)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1f5      	bne.n	800b380 <m2m_strlen+0xe>
    }
    return u16StrLen;
 800b394:	89fb      	ldrh	r3, [r7, #14]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3714      	adds	r7, #20
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <hexchar_2_val>:
    return s8Result;
}

/* Convert hexchar to value 0-15 */
static uint8 hexchar_2_val(uint8 ch)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b083      	sub	sp, #12
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	71fb      	strb	r3, [r7, #7]
    /* ch -= '0' */
    ch -= 0x30;
 800b3ac:	79fb      	ldrb	r3, [r7, #7]
 800b3ae:	3b30      	subs	r3, #48	@ 0x30
 800b3b0:	71fb      	strb	r3, [r7, #7]
    if(ch <= 9)
 800b3b2:	79fb      	ldrb	r3, [r7, #7]
 800b3b4:	2b09      	cmp	r3, #9
 800b3b6:	d801      	bhi.n	800b3bc <hexchar_2_val+0x1a>
        return ch;
 800b3b8:	79fb      	ldrb	r3, [r7, #7]
 800b3ba:	e00e      	b.n	800b3da <hexchar_2_val+0x38>
    /* OR with 0x20 to convert upper case to lower case. */
    ch |= 0x20;
 800b3bc:	79fb      	ldrb	r3, [r7, #7]
 800b3be:	f043 0320 	orr.w	r3, r3, #32
 800b3c2:	71fb      	strb	r3, [r7, #7]
    /* ch -= ('a'-'0') */
    ch -= 0x31;
 800b3c4:	79fb      	ldrb	r3, [r7, #7]
 800b3c6:	3b31      	subs	r3, #49	@ 0x31
 800b3c8:	71fb      	strb	r3, [r7, #7]
    if(ch <= 5)
 800b3ca:	79fb      	ldrb	r3, [r7, #7]
 800b3cc:	2b05      	cmp	r3, #5
 800b3ce:	d803      	bhi.n	800b3d8 <hexchar_2_val+0x36>
        return ch + 10;
 800b3d0:	79fb      	ldrb	r3, [r7, #7]
 800b3d2:	330a      	adds	r3, #10
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	e000      	b.n	800b3da <hexchar_2_val+0x38>
    return 0xFF;
 800b3d8:	23ff      	movs	r3, #255	@ 0xff
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	370c      	adds	r7, #12
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <hexstr_2_bytes>:

/* Convert hexstring to bytes */
sint8 hexstr_2_bytes(uint8 *pu8Out, uint8 *pu8In, uint8 u8SizeOut)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b086      	sub	sp, #24
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	60f8      	str	r0, [r7, #12]
 800b3ee:	60b9      	str	r1, [r7, #8]
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	71fb      	strb	r3, [r7, #7]
    while(u8SizeOut--)
 800b3f4:	e02c      	b.n	800b450 <hexstr_2_bytes+0x6a>
    {
        uint8   u8Out = hexchar_2_val(*pu8In++);
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	1c5a      	adds	r2, r3, #1
 800b3fa:	60ba      	str	r2, [r7, #8]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7ff ffcf 	bl	800b3a2 <hexchar_2_val>
 800b404:	4603      	mov	r3, r0
 800b406:	75fb      	strb	r3, [r7, #23]
        if(u8Out > 0xF)
 800b408:	7dfb      	ldrb	r3, [r7, #23]
 800b40a:	2b0f      	cmp	r3, #15
 800b40c:	d902      	bls.n	800b414 <hexstr_2_bytes+0x2e>
            return M2M_ERR_INVALID_ARG;
 800b40e:	f06f 030e 	mvn.w	r3, #14
 800b412:	e023      	b.n	800b45c <hexstr_2_bytes+0x76>
        *pu8Out = u8Out * 0x10;
 800b414:	7dfb      	ldrb	r3, [r7, #23]
 800b416:	011b      	lsls	r3, r3, #4
 800b418:	b2da      	uxtb	r2, r3
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	701a      	strb	r2, [r3, #0]
        u8Out = hexchar_2_val(*pu8In++);
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	1c5a      	adds	r2, r3, #1
 800b422:	60ba      	str	r2, [r7, #8]
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	4618      	mov	r0, r3
 800b428:	f7ff ffbb 	bl	800b3a2 <hexchar_2_val>
 800b42c:	4603      	mov	r3, r0
 800b42e:	75fb      	strb	r3, [r7, #23]
        if(u8Out > 0xF)
 800b430:	7dfb      	ldrb	r3, [r7, #23]
 800b432:	2b0f      	cmp	r3, #15
 800b434:	d902      	bls.n	800b43c <hexstr_2_bytes+0x56>
            return M2M_ERR_INVALID_ARG;
 800b436:	f06f 030e 	mvn.w	r3, #14
 800b43a:	e00f      	b.n	800b45c <hexstr_2_bytes+0x76>
        *pu8Out += u8Out;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	781a      	ldrb	r2, [r3, #0]
 800b440:	7dfb      	ldrb	r3, [r7, #23]
 800b442:	4413      	add	r3, r2
 800b444:	b2da      	uxtb	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	701a      	strb	r2, [r3, #0]
        pu8Out++;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	3301      	adds	r3, #1
 800b44e:	60fb      	str	r3, [r7, #12]
    while(u8SizeOut--)
 800b450:	79fb      	ldrb	r3, [r7, #7]
 800b452:	1e5a      	subs	r2, r3, #1
 800b454:	71fa      	strb	r2, [r7, #7]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1cd      	bne.n	800b3f6 <hexstr_2_bytes+0x10>
    }
    return M2M_SUCCESS;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3718      	adds	r7, #24
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

void isr(void)
{
 800b464:	b480      	push	{r7}
 800b466:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
 800b468:	4b05      	ldr	r3, [pc, #20]	@ (800b480 <isr+0x1c>)
 800b46a:	78db      	ldrb	r3, [r3, #3]
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	3301      	adds	r3, #1
 800b470:	b2da      	uxtb	r2, r3
 800b472:	4b03      	ldr	r3, [pc, #12]	@ (800b480 <isr+0x1c>)
 800b474:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
 800b476:	bf00      	nop
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr
 800b480:	20000660 	.word	0x20000660

0800b484 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800b48a:	2300      	movs	r3, #0
 800b48c:	71fb      	strb	r3, [r7, #7]
	if(gstrHifCxt.u8HifRXDone)
 800b48e:	4b14      	ldr	r3, [pc, #80]	@ (800b4e0 <hif_chip_wake+0x5c>)
 800b490:	789b      	ldrb	r3, [r3, #2]
 800b492:	b2db      	uxtb	r3, r3
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <hif_chip_wake+0x1a>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
 800b498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b49c:	e01c      	b.n	800b4d8 <hif_chip_wake+0x54>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
 800b49e:	4b10      	ldr	r3, [pc, #64]	@ (800b4e0 <hif_chip_wake+0x5c>)
 800b4a0:	785b      	ldrb	r3, [r3, #1]
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10c      	bne.n	800b4c2 <hif_chip_wake+0x3e>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 800b4a8:	4b0d      	ldr	r3, [pc, #52]	@ (800b4e0 <hif_chip_wake+0x5c>)
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d007      	beq.n	800b4c2 <hif_chip_wake+0x3e>
		{
			ret = chip_wake();
 800b4b2:	f000 fd6f 	bl	800bf94 <chip_wake>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 800b4ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d107      	bne.n	800b4d2 <hif_chip_wake+0x4e>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
 800b4c2:	4b07      	ldr	r3, [pc, #28]	@ (800b4e0 <hif_chip_wake+0x5c>)
 800b4c4:	785b      	ldrb	r3, [r3, #1]
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	b2da      	uxtb	r2, r3
 800b4cc:	4b04      	ldr	r3, [pc, #16]	@ (800b4e0 <hif_chip_wake+0x5c>)
 800b4ce:	705a      	strb	r2, [r3, #1]
 800b4d0:	e000      	b.n	800b4d4 <hif_chip_wake+0x50>
			if(ret != M2M_SUCCESS)goto ERR1;
 800b4d2:	bf00      	nop
ERR1:
	return ret;
 800b4d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3708      	adds	r7, #8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	20000660 	.word	0x20000660

0800b4e4 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
 800b4e8:	4b08      	ldr	r3, [pc, #32]	@ (800b50c <hif_chip_sleep_sc+0x28>)
 800b4ea:	785b      	ldrb	r3, [r3, #1]
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d006      	beq.n	800b500 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
 800b4f2:	4b06      	ldr	r3, [pc, #24]	@ (800b50c <hif_chip_sleep_sc+0x28>)
 800b4f4:	785b      	ldrb	r3, [r3, #1]
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	3b01      	subs	r3, #1
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	4b03      	ldr	r3, [pc, #12]	@ (800b50c <hif_chip_sleep_sc+0x28>)
 800b4fe:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr
 800b50c:	20000660 	.word	0x20000660

0800b510 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800b516:	2300      	movs	r3, #0
 800b518:	71fb      	strb	r3, [r7, #7]

	if(gstrHifCxt.u8ChipSleep >= 1)
 800b51a:	4b12      	ldr	r3, [pc, #72]	@ (800b564 <hif_chip_sleep+0x54>)
 800b51c:	785b      	ldrb	r3, [r3, #1]
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	2b00      	cmp	r3, #0
 800b522:	d006      	beq.n	800b532 <hif_chip_sleep+0x22>
	{
		gstrHifCxt.u8ChipSleep--;
 800b524:	4b0f      	ldr	r3, [pc, #60]	@ (800b564 <hif_chip_sleep+0x54>)
 800b526:	785b      	ldrb	r3, [r3, #1]
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	3b01      	subs	r3, #1
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	4b0d      	ldr	r3, [pc, #52]	@ (800b564 <hif_chip_sleep+0x54>)
 800b530:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
 800b532:	4b0c      	ldr	r3, [pc, #48]	@ (800b564 <hif_chip_sleep+0x54>)
 800b534:	785b      	ldrb	r3, [r3, #1]
 800b536:	b2db      	uxtb	r3, r3
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d10c      	bne.n	800b556 <hif_chip_sleep+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 800b53c:	4b09      	ldr	r3, [pc, #36]	@ (800b564 <hif_chip_sleep+0x54>)
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	b2db      	uxtb	r3, r3
 800b542:	2b00      	cmp	r3, #0
 800b544:	d007      	beq.n	800b556 <hif_chip_sleep+0x46>
		{
			ret = chip_sleep();
 800b546:	f000 fcc1 	bl	800becc <chip_sleep>
 800b54a:	4603      	mov	r3, r0
 800b54c:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 800b54e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b552:	2b00      	cmp	r3, #0
 800b554:	e000      	b.n	800b558 <hif_chip_sleep+0x48>
		}
		else
		{
		}
	}
ERR1:
 800b556:	bf00      	nop
	return ret;
 800b558:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	20000660 	.word	0x20000660

0800b568 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b088      	sub	sp, #32
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	603a      	str	r2, [r7, #0]
 800b570:	461a      	mov	r2, r3
 800b572:	4603      	mov	r3, r0
 800b574:	71fb      	strb	r3, [r7, #7]
 800b576:	460b      	mov	r3, r1
 800b578:	71bb      	strb	r3, [r7, #6]
 800b57a:	4613      	mov	r3, r2
 800b57c:	80bb      	strh	r3, [r7, #4]
	sint8		ret = M2M_ERR_SEND;
 800b57e:	23ff      	movs	r3, #255	@ 0xff
 800b580:	77fb      	strb	r3, [r7, #31]
	tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
 800b582:	79bb      	ldrb	r3, [r7, #6]
 800b584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	767b      	strb	r3, [r7, #25]
	strHif.u8Gid		= u8Gid;
 800b58c:	79fb      	ldrb	r3, [r7, #7]
 800b58e:	763b      	strb	r3, [r7, #24]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 800b590:	2308      	movs	r3, #8
 800b592:	837b      	strh	r3, [r7, #26]
	if(pu8DataBuf != NULL)
 800b594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b596:	2b00      	cmp	r3, #0
 800b598:	d008      	beq.n	800b5ac <hif_send+0x44>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
 800b59a:	8b7a      	ldrh	r2, [r7, #26]
 800b59c:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 800b59e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b5a0:	440b      	add	r3, r1
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	4413      	add	r3, r2
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	837b      	strh	r3, [r7, #26]
 800b5aa:	e004      	b.n	800b5b6 <hif_send+0x4e>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
 800b5ac:	8b7a      	ldrh	r2, [r7, #26]
 800b5ae:	88bb      	ldrh	r3, [r7, #4]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	837b      	strh	r3, [r7, #26]
	}
    if (strHif.u16Length <= M2M_HIF_MAX_PACKET_SIZE)
 800b5b6:	8b7b      	ldrh	r3, [r7, #26]
 800b5b8:	f240 623c 	movw	r2, #1596	@ 0x63c
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	f200 8103 	bhi.w	800b7c8 <hif_send+0x260>
    {
	ret = hif_chip_wake();
 800b5c2:	f7ff ff5f 	bl	800b484 <hif_chip_wake>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	77fb      	strb	r3, [r7, #31]
	if(ret == M2M_SUCCESS)
 800b5ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f040 80ed 	bne.w	800b7ae <hif_send+0x246>
	{
		volatile uint32 reg, dma_addr = 0;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	81fb      	strh	r3, [r7, #14]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
 800b5e0:	79fa      	ldrb	r2, [r7, #7]
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
 800b5e8:	79bb      	ldrb	r3, [r7, #6]
 800b5ea:	021a      	lsls	r2, r3, #8
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
 800b5f2:	8b7b      	ldrh	r3, [r7, #26]
 800b5f4:	041a      	lsls	r2, r3, #16
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	4619      	mov	r1, r3
 800b600:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b604:	f000 fd78 	bl	800c0f8 <nm_write_reg>
 800b608:	4603      	mov	r3, r0
 800b60a:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 800b60c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b610:	2b00      	cmp	r3, #0
 800b612:	f040 80f3 	bne.w	800b7fc <hif_send+0x294>

		reg = 0UL;
 800b616:	2300      	movs	r3, #0
 800b618:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f043 0302 	orr.w	r3, r3, #2
 800b620:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	4619      	mov	r1, r3
 800b626:	f241 0078 	movw	r0, #4216	@ 0x1078
 800b62a:	f000 fd65 	bl	800c0f8 <nm_write_reg>
 800b62e:	4603      	mov	r3, r0
 800b630:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 800b632:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b636:	2b00      	cmp	r3, #0
 800b638:	f040 80e2 	bne.w	800b800 <hif_send+0x298>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
 800b63c:	2300      	movs	r3, #0
 800b63e:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
 800b640:	2300      	movs	r3, #0
 800b642:	81fb      	strh	r3, [r7, #14]
 800b644:	e03b      	b.n	800b6be <hif_send+0x156>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
 800b646:	f107 0314 	add.w	r3, r7, #20
 800b64a:	4619      	mov	r1, r3
 800b64c:	f241 0078 	movw	r0, #4216	@ 0x1078
 800b650:	f000 fd44 	bl	800c0dc <nm_read_reg_with_ret>
 800b654:	4603      	mov	r3, r0
 800b656:	77fb      	strb	r3, [r7, #31]
			if(ret != M2M_SUCCESS) break;
 800b658:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d134      	bne.n	800b6ca <hif_send+0x162>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
 800b660:	89fb      	ldrh	r3, [r7, #14]
 800b662:	b29b      	uxth	r3, r3
 800b664:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b668:	d310      	bcc.n	800b68c <hif_send+0x124>
				if(cnt < 501) {
 800b66a:	89fb      	ldrh	r3, [r7, #14]
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b672:	d808      	bhi.n	800b686 <hif_send+0x11e>
					M2M_INFO("Slowing down...\n");
 800b674:	486a      	ldr	r0, [pc, #424]	@ (800b820 <hif_send+0x2b8>)
 800b676:	f001 fd37 	bl	800d0e8 <iprintf>
 800b67a:	486a      	ldr	r0, [pc, #424]	@ (800b824 <hif_send+0x2bc>)
 800b67c:	f001 fda4 	bl	800d1c8 <puts>
 800b680:	200d      	movs	r0, #13
 800b682:	f001 fd43 	bl	800d10c <putchar>
				}
				nm_bsp_sleep(1);
 800b686:	2001      	movs	r0, #1
 800b688:	f7ff fdae 	bl	800b1e8 <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	f003 0302 	and.w	r3, r3, #2
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10e      	bne.n	800b6b4 <hif_send+0x14c>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
 800b696:	f107 0310 	add.w	r3, r7, #16
 800b69a:	4619      	mov	r1, r3
 800b69c:	4862      	ldr	r0, [pc, #392]	@ (800b828 <hif_send+0x2c0>)
 800b69e:	f000 fd1d 	bl	800c0dc <nm_read_reg_with_ret>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	77fb      	strb	r3, [r7, #31]
				if(ret != M2M_SUCCESS) {
 800b6a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00f      	beq.n	800b6ce <hif_send+0x166>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	613b      	str	r3, [r7, #16]
					goto ERR1;
 800b6b2:	e0ac      	b.n	800b80e <hif_send+0x2a6>
		for(cnt = 0; cnt < 1000; cnt ++)
 800b6b4:	89fb      	ldrh	r3, [r7, #14]
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	81fb      	strh	r3, [r7, #14]
 800b6be:	89fb      	ldrh	r3, [r7, #14]
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b6c6:	d3be      	bcc.n	800b646 <hif_send+0xde>
 800b6c8:	e002      	b.n	800b6d0 <hif_send+0x168>
			if(ret != M2M_SUCCESS) break;
 800b6ca:	bf00      	nop
 800b6cc:	e000      	b.n	800b6d0 <hif_send+0x168>
				}
				/*in case of success break */
				break;
 800b6ce:	bf00      	nop
			}
		}

		if (dma_addr != 0)
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d055      	beq.n	800b782 <hif_send+0x21a>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 800b6da:	8b7b      	ldrh	r3, [r7, #26]
 800b6dc:	837b      	strh	r3, [r7, #26]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	f107 0118 	add.w	r1, r7, #24
 800b6e4:	2208      	movs	r2, #8
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f000 fd26 	bl	800c138 <nm_write_block>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 800b6f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f040 8085 	bne.w	800b804 <hif_send+0x29c>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	3308      	adds	r3, #8
 800b6fe:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00f      	beq.n	800b726 <hif_send+0x1be>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	88ba      	ldrh	r2, [r7, #4]
 800b70a:	6839      	ldr	r1, [r7, #0]
 800b70c:	4618      	mov	r0, r3
 800b70e:	f000 fd13 	bl	800c138 <nm_write_block>
 800b712:	4603      	mov	r3, r0
 800b714:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 800b716:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d174      	bne.n	800b808 <hif_send+0x2a0>
				u32CurrAddr += u16CtrlBufSize;
 800b71e:	88ba      	ldrh	r2, [r7, #4]
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	4413      	add	r3, r2
 800b724:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
 800b726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d016      	beq.n	800b75a <hif_send+0x1f2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
 800b72c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800b72e:	88bb      	ldrh	r3, [r7, #4]
 800b730:	1ad3      	subs	r3, r2, r3
 800b732:	461a      	mov	r2, r3
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	4413      	add	r3, r2
 800b738:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800b73e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b740:	4618      	mov	r0, r3
 800b742:	f000 fcf9 	bl	800c138 <nm_write_block>
 800b746:	4603      	mov	r3, r0
 800b748:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 800b74a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d15c      	bne.n	800b80c <hif_send+0x2a4>
				u32CurrAddr += u16DataSize;
 800b752:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	4413      	add	r3, r2
 800b758:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	f043 0302 	orr.w	r3, r3, #2
 800b766:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	4619      	mov	r1, r3
 800b76c:	f241 006c 	movw	r0, #4204	@ 0x106c
 800b770:	f000 fcc2 	bl	800c0f8 <nm_write_reg>
 800b774:	4603      	mov	r3, r0
 800b776:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 800b778:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d036      	beq.n	800b7ee <hif_send+0x286>
 800b780:	e045      	b.n	800b80e <hif_send+0x2a6>
		}
		else
		{
			ret = hif_chip_sleep();
 800b782:	f7ff fec5 	bl	800b510 <hif_chip_sleep>
 800b786:	4603      	mov	r3, r0
 800b788:	77fb      	strb	r3, [r7, #31]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
 800b78a:	f240 128f 	movw	r2, #399	@ 0x18f
 800b78e:	4927      	ldr	r1, [pc, #156]	@ (800b82c <hif_send+0x2c4>)
 800b790:	4827      	ldr	r0, [pc, #156]	@ (800b830 <hif_send+0x2c8>)
 800b792:	f001 fca9 	bl	800d0e8 <iprintf>
 800b796:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b79a:	4619      	mov	r1, r3
 800b79c:	4825      	ldr	r0, [pc, #148]	@ (800b834 <hif_send+0x2cc>)
 800b79e:	f001 fca3 	bl	800d0e8 <iprintf>
 800b7a2:	200d      	movs	r0, #13
 800b7a4:	f001 fcb2 	bl	800d10c <putchar>
			ret = M2M_ERR_MEM_ALLOC;
 800b7a8:	23fd      	movs	r3, #253	@ 0xfd
 800b7aa:	77fb      	strb	r3, [r7, #31]
			goto ERR2;
 800b7ac:	e031      	b.n	800b812 <hif_send+0x2aa>
		}
	}
	else
	{
            M2M_ERR("(HIF)Failed to wakeup the chip\n");
 800b7ae:	f44f 72cb 	mov.w	r2, #406	@ 0x196
 800b7b2:	491e      	ldr	r1, [pc, #120]	@ (800b82c <hif_send+0x2c4>)
 800b7b4:	4820      	ldr	r0, [pc, #128]	@ (800b838 <hif_send+0x2d0>)
 800b7b6:	f001 fc97 	bl	800d0e8 <iprintf>
 800b7ba:	4820      	ldr	r0, [pc, #128]	@ (800b83c <hif_send+0x2d4>)
 800b7bc:	f001 fd04 	bl	800d1c8 <puts>
 800b7c0:	200d      	movs	r0, #13
 800b7c2:	f001 fca3 	bl	800d10c <putchar>
            goto ERR2;
 800b7c6:	e024      	b.n	800b812 <hif_send+0x2aa>
        }
	}
	else
	{
        M2M_ERR("HIF message length (%d) exceeds max length (%d)\n",strHif.u16Length, M2M_HIF_MAX_PACKET_SIZE);
 800b7c8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800b7cc:	4917      	ldr	r1, [pc, #92]	@ (800b82c <hif_send+0x2c4>)
 800b7ce:	481a      	ldr	r0, [pc, #104]	@ (800b838 <hif_send+0x2d0>)
 800b7d0:	f001 fc8a 	bl	800d0e8 <iprintf>
 800b7d4:	8b7b      	ldrh	r3, [r7, #26]
 800b7d6:	f240 623c 	movw	r2, #1596	@ 0x63c
 800b7da:	4619      	mov	r1, r3
 800b7dc:	4818      	ldr	r0, [pc, #96]	@ (800b840 <hif_send+0x2d8>)
 800b7de:	f001 fc83 	bl	800d0e8 <iprintf>
 800b7e2:	200d      	movs	r0, #13
 800b7e4:	f001 fc92 	bl	800d10c <putchar>
        ret = M2M_ERR_SEND;
 800b7e8:	23ff      	movs	r3, #255	@ 0xff
 800b7ea:	77fb      	strb	r3, [r7, #31]
		goto ERR2;
 800b7ec:	e011      	b.n	800b812 <hif_send+0x2aa>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
 800b7ee:	f7ff fe8f 	bl	800b510 <hif_chip_sleep>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	77fb      	strb	r3, [r7, #31]
	return ret;
 800b7f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b7fa:	e00c      	b.n	800b816 <hif_send+0x2ae>
		if(M2M_SUCCESS != ret) goto ERR1;
 800b7fc:	bf00      	nop
 800b7fe:	e006      	b.n	800b80e <hif_send+0x2a6>
		if(M2M_SUCCESS != ret) goto ERR1;
 800b800:	bf00      	nop
 800b802:	e004      	b.n	800b80e <hif_send+0x2a6>
			if(M2M_SUCCESS != ret) goto ERR1;
 800b804:	bf00      	nop
 800b806:	e002      	b.n	800b80e <hif_send+0x2a6>
				if(M2M_SUCCESS != ret) goto ERR1;
 800b808:	bf00      	nop
 800b80a:	e000      	b.n	800b80e <hif_send+0x2a6>
				if(M2M_SUCCESS != ret) goto ERR1;
 800b80c:	bf00      	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
 800b80e:	f7ff fe69 	bl	800b4e4 <hif_chip_sleep_sc>
ERR2:
	/*logical error*/
	return ret;
 800b812:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b816:	4618      	mov	r0, r3
 800b818:	3720      	adds	r7, #32
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	0800e038 	.word	0x0800e038
 800b824:	0800e044 	.word	0x0800e044
 800b828:	00150400 	.word	0x00150400
 800b82c:	0800ebfc 	.word	0x0800ebfc
 800b830:	0800e054 	.word	0x0800e054
 800b834:	0800e068 	.word	0x0800e068
 800b838:	0800e084 	.word	0x0800e084
 800b83c:	0800e098 	.word	0x0800e098
 800b840:	0800e0b8 	.word	0x0800e0b8

0800b844 <m2m_wifi_connect_prepare_msg>:
    tenuM2mSecType      enuAuthType,
    uint16              u16AuthSize,
    tstrNetworkId       *pstrNetworkId,
    tstrM2mWifiConnHdr  *pstrWifiConn
)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	603b      	str	r3, [r7, #0]
 800b84c:	4603      	mov	r3, r0
 800b84e:	71fb      	strb	r3, [r7, #7]
 800b850:	460b      	mov	r3, r1
 800b852:	71bb      	strb	r3, [r7, #6]
 800b854:	4613      	mov	r3, r2
 800b856:	80bb      	strh	r3, [r7, #4]
    sint8   ret = M2M_ERR_FAIL;
 800b858:	23f4      	movs	r3, #244	@ 0xf4
 800b85a:	75fb      	strb	r3, [r7, #23]
    uint16  u16CredSize = sizeof(tstrM2mConnCredCmn) + u16AuthSize;
 800b85c:	88bb      	ldrh	r3, [r7, #4]
 800b85e:	332c      	adds	r3, #44	@ 0x2c
 800b860:	82bb      	strh	r3, [r7, #20]

    /* Check application params. */
    if(
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d074      	beq.n	800b952 <m2m_wifi_connect_prepare_msg+0x10e>
        (pstrNetworkId == NULL)
        || (pstrNetworkId->pu8Ssid == NULL)
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d070      	beq.n	800b952 <m2m_wifi_connect_prepare_msg+0x10e>
        || (pstrNetworkId->u8SsidLen >= M2M_MAX_SSID_LEN)
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	7a1b      	ldrb	r3, [r3, #8]
 800b874:	2b20      	cmp	r3, #32
 800b876:	d86c      	bhi.n	800b952 <m2m_wifi_connect_prepare_msg+0x10e>
    )
        goto INVALID_ARG;

    if(pstrWifiConn != NULL)
 800b878:	6a3b      	ldr	r3, [r7, #32]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d066      	beq.n	800b94c <m2m_wifi_connect_prepare_msg+0x108>
    {
        tstrM2mConnCredHdr  *pstrHdr = &pstrWifiConn->strConnCredHdr;
 800b87e:	6a3b      	ldr	r3, [r7, #32]
 800b880:	613b      	str	r3, [r7, #16]
        tstrM2mConnCredCmn  *pstrCmn = &pstrWifiConn->strConnCredCmn;
 800b882:	6a3b      	ldr	r3, [r7, #32]
 800b884:	3304      	adds	r3, #4
 800b886:	60fb      	str	r3, [r7, #12]

        m2m_memset((uint8 *)pstrWifiConn, 0, sizeof(tstrM2mWifiConnHdr));
 800b888:	2230      	movs	r2, #48	@ 0x30
 800b88a:	2100      	movs	r1, #0
 800b88c:	6a38      	ldr	r0, [r7, #32]
 800b88e:	f7ff fd53 	bl	800b338 <m2m_memset>

        pstrHdr->u16CredSize = u16CredSize;
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	8aba      	ldrh	r2, [r7, #20]
 800b896:	801a      	strh	r2, [r3, #0]
        switch(enuCredStoreOption)
 800b898:	79fb      	ldrb	r3, [r7, #7]
 800b89a:	2b02      	cmp	r3, #2
 800b89c:	d006      	beq.n	800b8ac <m2m_wifi_connect_prepare_msg+0x68>
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	dc59      	bgt.n	800b956 <m2m_wifi_connect_prepare_msg+0x112>
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d010      	beq.n	800b8c8 <m2m_wifi_connect_prepare_msg+0x84>
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d007      	beq.n	800b8ba <m2m_wifi_connect_prepare_msg+0x76>
            pstrHdr->u8CredStoreFlags |= M2M_CRED_STORE_FLAG;
        // intentional fall through...
        case WIFI_CRED_DONTSAVE:
            break;
        default:
            goto INVALID_ARG;
 800b8aa:	e054      	b.n	800b956 <m2m_wifi_connect_prepare_msg+0x112>
            pstrHdr->u8CredStoreFlags |= M2M_CRED_ENCRYPT_FLAG;
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	789b      	ldrb	r3, [r3, #2]
 800b8b0:	f043 0302 	orr.w	r3, r3, #2
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	709a      	strb	r2, [r3, #2]
            pstrHdr->u8CredStoreFlags |= M2M_CRED_STORE_FLAG;
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	789b      	ldrb	r3, [r3, #2]
 800b8be:	f043 0301 	orr.w	r3, r3, #1
 800b8c2:	b2da      	uxtb	r2, r3
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	709a      	strb	r2, [r3, #2]
            break;
 800b8c8:	bf00      	nop
        }

        if(pstrNetworkId->enuChannel == M2M_WIFI_CH_ALL)
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	7a5b      	ldrb	r3, [r3, #9]
 800b8ce:	2bff      	cmp	r3, #255	@ 0xff
 800b8d0:	d104      	bne.n	800b8dc <m2m_wifi_connect_prepare_msg+0x98>
            pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel);
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	7a5a      	ldrb	r2, [r3, #9]
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	70da      	strb	r2, [r3, #3]
 800b8da:	e00d      	b.n	800b8f8 <m2m_wifi_connect_prepare_msg+0xb4>
        else if((pstrNetworkId->enuChannel <= M2M_WIFI_CH_14) && (pstrNetworkId->enuChannel >= M2M_WIFI_CH_1))
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	7a5b      	ldrb	r3, [r3, #9]
 800b8e0:	2b0e      	cmp	r3, #14
 800b8e2:	d83a      	bhi.n	800b95a <m2m_wifi_connect_prepare_msg+0x116>
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	7a5b      	ldrb	r3, [r3, #9]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d036      	beq.n	800b95a <m2m_wifi_connect_prepare_msg+0x116>
            pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel) - 1;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	7a5b      	ldrb	r3, [r3, #9]
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	b2da      	uxtb	r2, r3
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	70da      	strb	r2, [r3, #3]
        else
            goto INVALID_ARG;

        if((enuAuthType == M2M_WIFI_SEC_INVALID) || (enuAuthType >= M2M_WIFI_NUM_AUTH_TYPES))
 800b8f8:	79bb      	ldrb	r3, [r7, #6]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d02f      	beq.n	800b95e <m2m_wifi_connect_prepare_msg+0x11a>
 800b8fe:	79bb      	ldrb	r3, [r7, #6]
 800b900:	2b04      	cmp	r3, #4
 800b902:	d82c      	bhi.n	800b95e <m2m_wifi_connect_prepare_msg+0x11a>
            goto INVALID_ARG;
        pstrCmn->u8AuthType = (uint8)enuAuthType;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	79ba      	ldrb	r2, [r7, #6]
 800b908:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

        pstrCmn->u8SsidLen = pstrNetworkId->u8SsidLen;
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	7a1a      	ldrb	r2, [r3, #8]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	701a      	strb	r2, [r3, #0]
        m2m_memcpy(pstrCmn->au8Ssid, pstrNetworkId->pu8Ssid, pstrNetworkId->u8SsidLen);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	1c58      	adds	r0, r3, #1
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	6859      	ldr	r1, [r3, #4]
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	7a1b      	ldrb	r3, [r3, #8]
 800b920:	461a      	mov	r2, r3
 800b922:	f7ff fce9 	bl	800b2f8 <m2m_memcpy>
        if(pstrNetworkId->pu8Bssid != NULL)
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d00c      	beq.n	800b948 <m2m_wifi_connect_prepare_msg+0x104>
        {
            pstrCmn->u8Options = M2M_WIFI_CONN_BSSID_FLAG;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            m2m_memcpy(pstrCmn->au8Bssid, pstrNetworkId->pu8Bssid, M2M_MAC_ADDRES_LEN);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f103 0022 	add.w	r0, r3, #34	@ 0x22
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2206      	movs	r2, #6
 800b942:	4619      	mov	r1, r3
 800b944:	f7ff fcd8 	bl	800b2f8 <m2m_memcpy>
        }
        /* Everything is ok, set return value. */
        ret = M2M_SUCCESS;
 800b948:	2300      	movs	r3, #0
 800b94a:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 800b94c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b950:	e008      	b.n	800b964 <m2m_wifi_connect_prepare_msg+0x120>
        goto INVALID_ARG;
 800b952:	bf00      	nop
 800b954:	e004      	b.n	800b960 <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 800b956:	bf00      	nop
 800b958:	e002      	b.n	800b960 <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 800b95a:	bf00      	nop
 800b95c:	e000      	b.n	800b960 <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 800b95e:	bf00      	nop
INVALID_ARG:
    return M2M_ERR_INVALID_ARG;
 800b960:	f06f 030e 	mvn.w	r3, #14
}
 800b964:	4618      	mov	r0, r3
 800b966:	3718      	adds	r7, #24
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <m2m_wifi_connect_open>:
/*************************************************************************************************/
sint8 m2m_wifi_connect_open(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId      *pstrNetworkId
)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b094      	sub	sp, #80	@ 0x50
 800b970:	af04      	add	r7, sp, #16
 800b972:	4603      	mov	r3, r0
 800b974:	6039      	str	r1, [r7, #0]
 800b976:	71fb      	strb	r3, [r7, #7]
    sint8               ret = M2M_ERR_INVALID_ARG;
 800b978:	23f1      	movs	r3, #241	@ 0xf1
 800b97a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    tstrM2mWifiConnHdr  strConnHdr;

    ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption, M2M_WIFI_SEC_OPEN, 0, pstrNetworkId, &strConnHdr);
 800b97e:	79f8      	ldrb	r0, [r7, #7]
 800b980:	f107 030c 	add.w	r3, r7, #12
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	2200      	movs	r2, #0
 800b98a:	2101      	movs	r1, #1
 800b98c:	f7ff ff5a 	bl	800b844 <m2m_wifi_connect_prepare_msg>
 800b990:	4603      	mov	r3, r0
 800b992:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if(ret == M2M_SUCCESS)
 800b996:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10f      	bne.n	800b9be <m2m_wifi_connect_open+0x52>
    {
        ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN,
 800b99e:	f107 020c 	add.w	r2, r7, #12
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	9302      	str	r3, [sp, #8]
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	9301      	str	r3, [sp, #4]
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	9300      	str	r3, [sp, #0]
 800b9ae:	2330      	movs	r3, #48	@ 0x30
 800b9b0:	213b      	movs	r1, #59	@ 0x3b
 800b9b2:	2001      	movs	r0, #1
 800b9b4:	f7ff fdd8 	bl	800b568 <hif_send>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                       (uint8 *)&strConnHdr, sizeof(strConnHdr),
                       NULL, 0, 0);
    }
    return ret;
 800b9be:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3740      	adds	r7, #64	@ 0x40
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <m2m_wifi_connect_wep>:
sint8 m2m_wifi_connect_wep(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuthWep         *pstrAuthWep
)
{
 800b9ca:	b480      	push	{r7}
 800b9cc:	b085      	sub	sp, #20
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	60b9      	str	r1, [r7, #8]
 800b9d4:	607a      	str	r2, [r7, #4]
 800b9d6:	73fb      	strb	r3, [r7, #15]
    /* As of 19.7.5 the WEP protocol is deprecated */
    return M2M_ERR_INVALID;
 800b9d8:	f06f 030f 	mvn.w	r3, #15
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3714      	adds	r7, #20
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <m2m_wifi_connect_psk>:
sint8 m2m_wifi_connect_psk(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuthPsk         *pstrAuthPsk
)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b096      	sub	sp, #88	@ 0x58
 800b9ec:	af04      	add	r7, sp, #16
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
 800b9f4:	73fb      	strb	r3, [r7, #15]
    sint8   ret = M2M_ERR_INVALID_ARG;
 800b9f6:	23f1      	movs	r3, #241	@ 0xf1
 800b9f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if(pstrAuthPsk != NULL)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d07e      	beq.n	800bb00 <m2m_wifi_connect_psk+0x118>
    {
        tstrM2mWifiConnHdr  strConnHdr;

        ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption,
 800ba02:	7bf8      	ldrb	r0, [r7, #15]
 800ba04:	f107 0310 	add.w	r3, r7, #16
 800ba08:	9300      	str	r3, [sp, #0]
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	226c      	movs	r2, #108	@ 0x6c
 800ba0e:	2102      	movs	r1, #2
 800ba10:	f7ff ff18 	bl	800b844 <m2m_wifi_connect_prepare_msg>
 800ba14:	4603      	mov	r3, r0
 800ba16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                           M2M_WIFI_SEC_WPA_PSK,
                                           sizeof(tstrM2mWifiPsk),
                                           pstrNetworkId,
                                           &strConnHdr);

        if(ret == M2M_SUCCESS)
 800ba1a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d16e      	bne.n	800bb00 <m2m_wifi_connect_psk+0x118>
        {
            tstrM2mWifiPsk  *pstrPsk = (tstrM2mWifiPsk *)malloc(sizeof(tstrM2mWifiPsk));
 800ba22:	206c      	movs	r0, #108	@ 0x6c
 800ba24:	f001 f9e0 	bl	800cde8 <malloc>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	643b      	str	r3, [r7, #64]	@ 0x40
            if(pstrPsk != NULL)
 800ba2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d063      	beq.n	800bafa <m2m_wifi_connect_psk+0x112>
            {
                m2m_memset((uint8 *)pstrPsk, 0, sizeof(tstrM2mWifiPsk));
 800ba32:	226c      	movs	r2, #108	@ 0x6c
 800ba34:	2100      	movs	r1, #0
 800ba36:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800ba38:	f7ff fc7e 	bl	800b338 <m2m_memset>
                if(pstrAuthPsk->pu8Psk != NULL)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d025      	beq.n	800ba90 <m2m_wifi_connect_psk+0xa8>
                {
                    if(pstrAuthPsk->pu8Passphrase != NULL)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d003      	beq.n	800ba54 <m2m_wifi_connect_psk+0x6c>
                        ret = M2M_ERR_INVALID_ARG;
 800ba4c:	23f1      	movs	r3, #241	@ 0xf1
 800ba4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ba52:	e03a      	b.n	800baca <m2m_wifi_connect_psk+0xe2>
                    else
                    {
                        pstrPsk->u8PassphraseLen = M2M_MAX_PSK_LEN-1;
 800ba54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba56:	2240      	movs	r2, #64	@ 0x40
 800ba58:	701a      	strb	r2, [r3, #0]
                        /* Use hexstr_2_bytes to verify pu8Psk input. */
                        if(M2M_SUCCESS != hexstr_2_bytes(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen/2))
 800ba5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba5c:	1c58      	adds	r0, r3, #1
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6819      	ldr	r1, [r3, #0]
 800ba62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	085b      	lsrs	r3, r3, #1
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	f7ff fcbb 	bl	800b3e6 <hexstr_2_bytes>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d002      	beq.n	800ba7c <m2m_wifi_connect_psk+0x94>
                            ret = M2M_ERR_INVALID_ARG;
 800ba76:	23f1      	movs	r3, #241	@ 0xf1
 800ba78:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                        m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen);
 800ba7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba7e:	1c58      	adds	r0, r3, #1
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6819      	ldr	r1, [r3, #0]
 800ba84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	461a      	mov	r2, r3
 800ba8a:	f7ff fc35 	bl	800b2f8 <m2m_memcpy>
 800ba8e:	e01c      	b.n	800baca <m2m_wifi_connect_psk+0xe2>
                    }
                }
                else if(pstrAuthPsk->pu8Passphrase != NULL)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d015      	beq.n	800bac4 <m2m_wifi_connect_psk+0xdc>
                {
                    if(pstrAuthPsk->u8PassphraseLen > M2M_MAX_PSK_LEN-1)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	7a1b      	ldrb	r3, [r3, #8]
 800ba9c:	2b40      	cmp	r3, #64	@ 0x40
 800ba9e:	d903      	bls.n	800baa8 <m2m_wifi_connect_psk+0xc0>
                        ret = M2M_ERR_INVALID_ARG;
 800baa0:	23f1      	movs	r3, #241	@ 0xf1
 800baa2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800baa6:	e010      	b.n	800baca <m2m_wifi_connect_psk+0xe2>
                    else
                    {
                        pstrPsk->u8PassphraseLen = pstrAuthPsk->u8PassphraseLen;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	7a1a      	ldrb	r2, [r3, #8]
 800baac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baae:	701a      	strb	r2, [r3, #0]
                        m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Passphrase, pstrPsk->u8PassphraseLen);
 800bab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bab2:	1c58      	adds	r0, r3, #1
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6859      	ldr	r1, [r3, #4]
 800bab8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	461a      	mov	r2, r3
 800babe:	f7ff fc1b 	bl	800b2f8 <m2m_memcpy>
 800bac2:	e002      	b.n	800baca <m2m_wifi_connect_psk+0xe2>
                    }
                }
                else
                    ret = M2M_ERR_INVALID_ARG;
 800bac4:	23f1      	movs	r3, #241	@ 0xf1
 800bac6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                if(ret == M2M_SUCCESS)
 800baca:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10f      	bne.n	800baf2 <m2m_wifi_connect_psk+0x10a>
                {
                    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
 800bad2:	f107 0210 	add.w	r2, r7, #16
 800bad6:	2330      	movs	r3, #48	@ 0x30
 800bad8:	9302      	str	r3, [sp, #8]
 800bada:	236c      	movs	r3, #108	@ 0x6c
 800badc:	9301      	str	r3, [sp, #4]
 800bade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bae0:	9300      	str	r3, [sp, #0]
 800bae2:	2330      	movs	r3, #48	@ 0x30
 800bae4:	21bb      	movs	r1, #187	@ 0xbb
 800bae6:	2001      	movs	r0, #1
 800bae8:	f7ff fd3e 	bl	800b568 <hif_send>
 800baec:	4603      	mov	r3, r0
 800baee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                   (uint8 *)&strConnHdr, sizeof(tstrM2mWifiConnHdr),
                                   (uint8 *)pstrPsk, sizeof(tstrM2mWifiPsk), sizeof(tstrM2mWifiConnHdr));
                }
                free(pstrPsk);
 800baf2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800baf4:	f001 f980 	bl	800cdf8 <free>
 800baf8:	e002      	b.n	800bb00 <m2m_wifi_connect_psk+0x118>
            }
            else
                ret = M2M_ERR_MEM_ALLOC;
 800bafa:	23fd      	movs	r3, #253	@ 0xfd
 800bafc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }
    return ret;
 800bb00:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3748      	adds	r7, #72	@ 0x48
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <m2m_wifi_connect_1x_mschap2>:
sint8 m2m_wifi_connect_1x_mschap2(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuth1xMschap2   *pstrAuth1xMschap2
)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b098      	sub	sp, #96	@ 0x60
 800bb10:	af04      	add	r7, sp, #16
 800bb12:	4603      	mov	r3, r0
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
 800bb18:	73fb      	strb	r3, [r7, #15]
    sint8 ret = M2M_ERR_INVALID_ARG;
 800bb1a:	23f1      	movs	r3, #241	@ 0xf1
 800bb1c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if(pstrAuth1xMschap2 != NULL)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	f000 80d3 	beq.w	800bcce <m2m_wifi_connect_1x_mschap2+0x1c2>
    {
        if(pstrAuth1xMschap2->pu8Domain == NULL)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d102      	bne.n	800bb36 <m2m_wifi_connect_1x_mschap2+0x2a>
            pstrAuth1xMschap2->u16DomainLen = 0;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	819a      	strh	r2, [r3, #12]
        if(
            (pstrAuth1xMschap2->pu8UserName != NULL)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	685b      	ldr	r3, [r3, #4]
        if(
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f000 80c7 	beq.w	800bcce <m2m_wifi_connect_1x_mschap2+0x1c2>
            && (pstrAuth1xMschap2->pu8Password != NULL)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f000 80c2 	beq.w	800bcce <m2m_wifi_connect_1x_mschap2+0x1c2>
            && ((uint32)(pstrAuth1xMschap2->u16DomainLen) + pstrAuth1xMschap2->u16UserNameLen <= M2M_AUTH_1X_USER_LEN_MAX)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	899b      	ldrh	r3, [r3, #12]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	89db      	ldrh	r3, [r3, #14]
 800bb54:	4413      	add	r3, r2
 800bb56:	2b64      	cmp	r3, #100	@ 0x64
 800bb58:	f200 80b9 	bhi.w	800bcce <m2m_wifi_connect_1x_mschap2+0x1c2>
            && (pstrAuth1xMschap2->u16PasswordLen <= M2M_AUTH_1X_PASSWORD_LEN_MAX)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	8a1b      	ldrh	r3, [r3, #16]
 800bb60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb64:	f200 80b3 	bhi.w	800bcce <m2m_wifi_connect_1x_mschap2+0x1c2>
        )
        {
            tstrM2mWifiConnHdr  strConnHdr;
            uint16              u16AuthSize =   sizeof(tstrM2mWifi1xHdr) +
                                                pstrAuth1xMschap2->u16DomainLen +
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	899a      	ldrh	r2, [r3, #12]
                                                pstrAuth1xMschap2->u16UserNameLen +
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	89db      	ldrh	r3, [r3, #14]
                                                pstrAuth1xMschap2->u16DomainLen +
 800bb70:	4413      	add	r3, r2
 800bb72:	b29a      	uxth	r2, r3
                                                pstrAuth1xMschap2->u16PasswordLen;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	8a1b      	ldrh	r3, [r3, #16]
                                                pstrAuth1xMschap2->u16UserNameLen +
 800bb78:	4413      	add	r3, r2
 800bb7a:	b29b      	uxth	r3, r3
            uint16              u16AuthSize =   sizeof(tstrM2mWifi1xHdr) +
 800bb7c:	332c      	adds	r3, #44	@ 0x2c
 800bb7e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

            ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption,
 800bb82:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800bb86:	7bf8      	ldrb	r0, [r7, #15]
 800bb88:	f107 0310 	add.w	r3, r7, #16
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	2104      	movs	r1, #4
 800bb92:	f7ff fe57 	bl	800b844 <m2m_wifi_connect_prepare_msg>
 800bb96:	4603      	mov	r3, r0
 800bb98:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                                               M2M_WIFI_SEC_802_1X,
                                               u16AuthSize,
                                               pstrNetworkId,
                                               &strConnHdr);

            if(ret == M2M_SUCCESS)
 800bb9c:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f040 8094 	bne.w	800bcce <m2m_wifi_connect_1x_mschap2+0x1c2>
            {
                tstrM2mWifi1xHdr    *pstr1xHdr = (tstrM2mWifi1xHdr *)malloc(u16AuthSize);
 800bba6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f001 f91c 	bl	800cde8 <malloc>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	643b      	str	r3, [r7, #64]	@ 0x40
                if(pstr1xHdr != NULL)
 800bbb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f000 8086 	beq.w	800bcc8 <m2m_wifi_connect_1x_mschap2+0x1bc>
                {
                    uint8   *pu8AuthPtr = pstr1xHdr->au81xAuthDetails;
 800bbbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbbe:	332c      	adds	r3, #44	@ 0x2c
 800bbc0:	64bb      	str	r3, [r7, #72]	@ 0x48
                    m2m_memset((uint8 *)pstr1xHdr, 0, u16AuthSize);
 800bbc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	2100      	movs	r1, #0
 800bbca:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800bbcc:	f7ff fbb4 	bl	800b338 <m2m_memset>

                    pstr1xHdr->u8Flags = M2M_802_1X_MSCHAP2_FLAG;
 800bbd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	701a      	strb	r2, [r3, #0]
                    if(pstrAuth1xMschap2->bUnencryptedUserName == true)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	7c9b      	ldrb	r3, [r3, #18]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d006      	beq.n	800bbec <m2m_wifi_connect_1x_mschap2+0xe0>
                        pstr1xHdr->u8Flags |= M2M_802_1X_UNENCRYPTED_USERNAME_FLAG;
 800bbde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbea:	701a      	strb	r2, [r3, #0]
                    if(pstrAuth1xMschap2->bPrependDomain == true)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	7cdb      	ldrb	r3, [r3, #19]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d006      	beq.n	800bc02 <m2m_wifi_connect_1x_mschap2+0xf6>
                        pstr1xHdr->u8Flags |= M2M_802_1X_PREPEND_DOMAIN_FLAG;
 800bbf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbfc:	b2da      	uxtb	r2, r3
 800bbfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc00:	701a      	strb	r2, [r3, #0]

                    pstr1xHdr->u8HdrLength = sizeof(tstrM2mWifi1xHdr);
 800bc02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc04:	222c      	movs	r2, #44	@ 0x2c
 800bc06:	70da      	strb	r2, [r3, #3]
                    pstr1xHdr->u32TlsHsFlags = gu321xTlsHsFlags;
 800bc08:	4b34      	ldr	r3, [pc, #208]	@ (800bcdc <m2m_wifi_connect_1x_mschap2+0x1d0>)
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc0e:	625a      	str	r2, [r3, #36]	@ 0x24
                    m2m_memcpy(pstr1xHdr->au8TlsSpecificRootNameSha1, gau81xRootSha1, sizeof(gau81xRootSha1));
 800bc10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc12:	330c      	adds	r3, #12
 800bc14:	2214      	movs	r2, #20
 800bc16:	4932      	ldr	r1, [pc, #200]	@ (800bce0 <m2m_wifi_connect_1x_mschap2+0x1d4>)
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7ff fb6d 	bl	800b2f8 <m2m_memcpy>

                    pstr1xHdr->u8DomainLength = 0;
 800bc1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc20:	2200      	movs	r2, #0
 800bc22:	705a      	strb	r2, [r3, #1]
                    if(pstrAuth1xMschap2->pu8Domain != NULL)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d012      	beq.n	800bc52 <m2m_wifi_connect_1x_mschap2+0x146>
                    {
                        pstr1xHdr->u8DomainLength = (uint8)(pstrAuth1xMschap2->u16DomainLen);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	899b      	ldrh	r3, [r3, #12]
 800bc30:	b2da      	uxtb	r2, r3
 800bc32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc34:	705a      	strb	r2, [r3, #1]
                        m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8Domain, pstr1xHdr->u8DomainLength);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6819      	ldr	r1, [r3, #0]
 800bc3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc3c:	785b      	ldrb	r3, [r3, #1]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800bc42:	f7ff fb59 	bl	800b2f8 <m2m_memcpy>
                        pu8AuthPtr += pstr1xHdr->u8DomainLength;
 800bc46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc48:	785b      	ldrb	r3, [r3, #1]
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc4e:	4413      	add	r3, r2
 800bc50:	64bb      	str	r3, [r7, #72]	@ 0x48
                    }

                    pstr1xHdr->u8UserNameLength = (pstrAuth1xMschap2->u16UserNameLen);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	89db      	ldrh	r3, [r3, #14]
 800bc56:	b2da      	uxtb	r2, r3
 800bc58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc5a:	709a      	strb	r2, [r3, #2]
                    m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8UserName, pstr1xHdr->u8UserNameLength);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6859      	ldr	r1, [r3, #4]
 800bc60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc62:	789b      	ldrb	r3, [r3, #2]
 800bc64:	461a      	mov	r2, r3
 800bc66:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800bc68:	f7ff fb46 	bl	800b2f8 <m2m_memcpy>
                    pu8AuthPtr += pstr1xHdr->u8UserNameLength;
 800bc6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc6e:	789b      	ldrb	r3, [r3, #2]
 800bc70:	461a      	mov	r2, r3
 800bc72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc74:	4413      	add	r3, r2
 800bc76:	64bb      	str	r3, [r7, #72]	@ 0x48

                    pstr1xHdr->u16PrivateKeyOffset = pu8AuthPtr - pstr1xHdr->au81xAuthDetails;
 800bc78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc7a:	332c      	adds	r3, #44	@ 0x2c
 800bc7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc7e:	1ad3      	subs	r3, r2, r3
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc84:	809a      	strh	r2, [r3, #4]
                    pstr1xHdr->u16PrivateKeyLength = pstrAuth1xMschap2->u16PasswordLen;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	8a1a      	ldrh	r2, [r3, #16]
 800bc8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc8c:	80da      	strh	r2, [r3, #6]
                    m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8Password, pstr1xHdr->u16PrivateKeyLength);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6899      	ldr	r1, [r3, #8]
 800bc92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc94:	88db      	ldrh	r3, [r3, #6]
 800bc96:	461a      	mov	r2, r3
 800bc98:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800bc9a:	f7ff fb2d 	bl	800b2f8 <m2m_memcpy>

                    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
 800bc9e:	f107 0210 	add.w	r2, r7, #16
 800bca2:	2330      	movs	r3, #48	@ 0x30
 800bca4:	9302      	str	r3, [sp, #8]
 800bca6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bcaa:	9301      	str	r3, [sp, #4]
 800bcac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcae:	9300      	str	r3, [sp, #0]
 800bcb0:	2330      	movs	r3, #48	@ 0x30
 800bcb2:	21bb      	movs	r1, #187	@ 0xbb
 800bcb4:	2001      	movs	r0, #1
 800bcb6:	f7ff fc57 	bl	800b568 <hif_send>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                                   (uint8 *)&strConnHdr, sizeof(tstrM2mWifiConnHdr),
                                   (uint8 *)pstr1xHdr, u16AuthSize,
                                   sizeof(tstrM2mWifiConnHdr));
                    free(pstr1xHdr);
 800bcc0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800bcc2:	f001 f899 	bl	800cdf8 <free>
 800bcc6:	e002      	b.n	800bcce <m2m_wifi_connect_1x_mschap2+0x1c2>
                }
                else
                    ret = M2M_ERR_MEM_ALLOC;
 800bcc8:	23fd      	movs	r3, #253	@ 0xfd
 800bcca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            }
        }
    }
    return ret;
 800bcce:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3750      	adds	r7, #80	@ 0x50
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	20000010 	.word	0x20000010
 800bce0:	2000068c 	.word	0x2000068c

0800bce4 <m2m_wifi_connect>:
    }
    return ret;
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b086      	sub	sp, #24
 800bce8:	af02      	add	r7, sp, #8
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	607b      	str	r3, [r7, #4]
 800bcee:	460b      	mov	r3, r1
 800bcf0:	72fb      	strb	r3, [r7, #11]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	72bb      	strb	r3, [r7, #10]
    return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch, 0);
 800bcf6:	7aba      	ldrb	r2, [r7, #10]
 800bcf8:	7af9      	ldrb	r1, [r7, #11]
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	9301      	str	r3, [sp, #4]
 800bcfe:	8b3b      	ldrh	r3, [r7, #24]
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f000 f805 	bl	800bd14 <m2m_wifi_connect_sc>
 800bd0a:	4603      	mov	r3, r0
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <m2m_wifi_connect_sc>:

sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b096      	sub	sp, #88	@ 0x58
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	607b      	str	r3, [r7, #4]
 800bd1e:	460b      	mov	r3, r1
 800bd20:	72fb      	strb	r3, [r7, #11]
 800bd22:	4613      	mov	r3, r2
 800bd24:	72bb      	strb	r3, [r7, #10]
    sint8               s8Ret              = M2M_ERR_INVALID_ARG;
 800bd26:	23f1      	movs	r3, #241	@ 0xf1
 800bd28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    tstrNetworkId       strNetworkId       = {NULL, (uint8 *)pcSsid, u8SsidLen, (tenuM2mScanCh)u16Ch};
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd34:	7afb      	ldrb	r3, [r7, #11]
 800bd36:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800bd3a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    tenuCredStoreOption enuCredStoreOption = u8NoSaveCred ? WIFI_CRED_DONTSAVE : WIFI_CRED_SAVE_ENCRYPTED;
 800bd44:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d001      	beq.n	800bd50 <m2m_wifi_connect_sc+0x3c>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	e000      	b.n	800bd52 <m2m_wifi_connect_sc+0x3e>
 800bd50:	2302      	movs	r3, #2
 800bd52:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    /* This API does not support SSIDs which contain '\0'. If there is a '\0' character within the
     * first u8SsidLen characters, then assume that the input u8SsidLen was incorrect - set length
     * to strlen(pcSsid) and continue. This is to avoid a change from the behaviour of previously
     * released drivers. */
    if(u8SsidLen < M2M_MAX_SSID_LEN)
 800bd56:	7afb      	ldrb	r3, [r7, #11]
 800bd58:	2b20      	cmp	r3, #32
 800bd5a:	d80e      	bhi.n	800bd7a <m2m_wifi_connect_sc+0x66>
        while(u8SsidLen--)
 800bd5c:	e008      	b.n	800bd70 <m2m_wifi_connect_sc+0x5c>
            if(strNetworkId.pu8Ssid[u8SsidLen] == 0)
 800bd5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd60:	7afb      	ldrb	r3, [r7, #11]
 800bd62:	4413      	add	r3, r2
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d102      	bne.n	800bd70 <m2m_wifi_connect_sc+0x5c>
                strNetworkId.u8SsidLen = u8SsidLen;
 800bd6a:	7afb      	ldrb	r3, [r7, #11]
 800bd6c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        while(u8SsidLen--)
 800bd70:	7afb      	ldrb	r3, [r7, #11]
 800bd72:	1e5a      	subs	r2, r3, #1
 800bd74:	72fa      	strb	r2, [r7, #11]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1f1      	bne.n	800bd5e <m2m_wifi_connect_sc+0x4a>

    switch((tenuM2mSecType)u8SecType)
 800bd7a:	7abb      	ldrb	r3, [r7, #10]
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	2b03      	cmp	r3, #3
 800bd80:	f200 808e 	bhi.w	800bea0 <m2m_wifi_connect_sc+0x18c>
 800bd84:	a201      	add	r2, pc, #4	@ (adr r2, 800bd8c <m2m_wifi_connect_sc+0x78>)
 800bd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd8a:	bf00      	nop
 800bd8c:	0800bd9d 	.word	0x0800bd9d
 800bd90:	0800bdb5 	.word	0x0800bdb5
 800bd94:	0800be0b 	.word	0x0800be0b
 800bd98:	0800be49 	.word	0x0800be49
    {
    case M2M_WIFI_SEC_OPEN:
        s8Ret = m2m_wifi_connect_open(enuCredStoreOption, &strNetworkId);
 800bd9c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800bda0:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800bda4:	4611      	mov	r1, r2
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7ff fde0 	bl	800b96c <m2m_wifi_connect_open>
 800bdac:	4603      	mov	r3, r0
 800bdae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        break;
 800bdb2:	e07c      	b.n	800beae <m2m_wifi_connect_sc+0x19a>
    case M2M_WIFI_SEC_WPA_PSK:
        if(pvAuthInfo != NULL)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d074      	beq.n	800bea4 <m2m_wifi_connect_sc+0x190>
        {
            tstrAuthPsk strAuthPsk = {NULL, NULL, 0};
 800bdba:	2300      	movs	r3, #0
 800bdbc:	633b      	str	r3, [r7, #48]	@ 0x30
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            uint16      len        = m2m_strlen((uint8 *)pvAuthInfo);
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f7ff fad2 	bl	800b372 <m2m_strlen>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

            if(len == M2M_MAX_PSK_LEN-1)
 800bdd4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800bdd8:	2b40      	cmp	r3, #64	@ 0x40
 800bdda:	d102      	bne.n	800bde2 <m2m_wifi_connect_sc+0xce>
            {
                strAuthPsk.pu8Psk = (uint8 *)pvAuthInfo;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	633b      	str	r3, [r7, #48]	@ 0x30
 800bde0:	e006      	b.n	800bdf0 <m2m_wifi_connect_sc+0xdc>
            }
            else
            {
                strAuthPsk.pu8Passphrase   = (uint8 *)pvAuthInfo;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	637b      	str	r3, [r7, #52]	@ 0x34
                strAuthPsk.u8PassphraseLen = len;
 800bde6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            }
            s8Ret = m2m_wifi_connect_psk(enuCredStoreOption, &strNetworkId, &strAuthPsk);
 800bdf0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800bdf4:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800bdf8:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7ff fdf3 	bl	800b9e8 <m2m_wifi_connect_psk>
 800be02:	4603      	mov	r3, r0
 800be04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        }
        break;
 800be08:	e04c      	b.n	800bea4 <m2m_wifi_connect_sc+0x190>
    case M2M_WIFI_SEC_WEP:
        if(pvAuthInfo != NULL)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d04b      	beq.n	800bea8 <m2m_wifi_connect_sc+0x194>
        {
            tstrM2mWifiWepParams    *pstrWepParams = (tstrM2mWifiWepParams *)pvAuthInfo;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	64fb      	str	r3, [r7, #76]	@ 0x4c
            tstrAuthWep             strAuthWep     = {pstrWepParams->au8WepKey, pstrWepParams->u8KeySz-1, pstrWepParams->u8KeyIndx};
 800be14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be16:	3302      	adds	r3, #2
 800be18:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be1c:	785b      	ldrb	r3, [r3, #1]
 800be1e:	3b01      	subs	r3, #1
 800be20:	b2db      	uxtb	r3, r3
 800be22:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800be26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

            s8Ret = m2m_wifi_connect_wep(enuCredStoreOption, &strNetworkId, &strAuthWep);
 800be2e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800be32:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800be36:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7ff fdc5 	bl	800b9ca <m2m_wifi_connect_wep>
 800be40:	4603      	mov	r3, r0
 800be42:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        }
        break;
 800be46:	e02f      	b.n	800bea8 <m2m_wifi_connect_sc+0x194>
    case M2M_WIFI_SEC_802_1X:
        if(pvAuthInfo != NULL)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d02e      	beq.n	800beac <m2m_wifi_connect_sc+0x198>
        {
            tstr1xAuthCredentials   *pstr1xParams    = (tstr1xAuthCredentials *)pvAuthInfo;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	653b      	str	r3, [r7, #80]	@ 0x50
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800be52:	f107 0314 	add.w	r3, r7, #20
 800be56:	2200      	movs	r2, #0
 800be58:	601a      	str	r2, [r3, #0]
 800be5a:	605a      	str	r2, [r3, #4]
 800be5c:	609a      	str	r2, [r3, #8]
 800be5e:	60da      	str	r2, [r3, #12]
 800be60:	611a      	str	r2, [r3, #16]
                                                        pstr1xParams->au8UserName,
 800be62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800be64:	61bb      	str	r3, [r7, #24]
                                                        pstr1xParams->au8Passwd,
 800be66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be68:	3315      	adds	r3, #21
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800be6a:	61fb      	str	r3, [r7, #28]
                                                        0,
                                                        m2m_strlen(pstr1xParams->au8UserName),
 800be6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be6e:	4618      	mov	r0, r3
 800be70:	f7ff fa7f 	bl	800b372 <m2m_strlen>
 800be74:	4603      	mov	r3, r0
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800be76:	847b      	strh	r3, [r7, #34]	@ 0x22
                                                        m2m_strlen(pstr1xParams->au8Passwd),
 800be78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be7a:	3315      	adds	r3, #21
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7ff fa78 	bl	800b372 <m2m_strlen>
 800be82:	4603      	mov	r3, r0
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800be84:	84bb      	strh	r3, [r7, #36]	@ 0x24
                                                        false};

            s8Ret = m2m_wifi_connect_1x_mschap2(enuCredStoreOption, &strNetworkId, &strAuth1xMschap2);
 800be86:	f107 0214 	add.w	r2, r7, #20
 800be8a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800be8e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800be92:	4618      	mov	r0, r3
 800be94:	f7ff fe3a 	bl	800bb0c <m2m_wifi_connect_1x_mschap2>
 800be98:	4603      	mov	r3, r0
 800be9a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        }
        break;
 800be9e:	e005      	b.n	800beac <m2m_wifi_connect_sc+0x198>
    default:
        break;
 800bea0:	bf00      	nop
 800bea2:	e004      	b.n	800beae <m2m_wifi_connect_sc+0x19a>
        break;
 800bea4:	bf00      	nop
 800bea6:	e002      	b.n	800beae <m2m_wifi_connect_sc+0x19a>
        break;
 800bea8:	bf00      	nop
 800beaa:	e000      	b.n	800beae <m2m_wifi_connect_sc+0x19a>
        break;
 800beac:	bf00      	nop
    }
    return s8Ret;
 800beae:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3758      	adds	r7, #88	@ 0x58
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop

0800bebc <m2m_wifi_request_dhcp_client>:
    return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
                    (uint8 *) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0, 0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
 800bebc:	b480      	push	{r7}
 800bebe:	af00      	add	r7, sp, #0
    /*legacy API should be removed */
    return 0;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800bed2:	2300      	movs	r3, #0
 800bed4:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800bed6:	463b      	mov	r3, r7
 800bed8:	4619      	mov	r1, r3
 800beda:	2010      	movs	r0, #16
 800bedc:	f000 f8fe 	bl	800c0dc <nm_read_reg_with_ret>
 800bee0:	4603      	mov	r3, r0
 800bee2:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS) goto ERR1;
 800bee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d144      	bne.n	800bf76 <chip_sleep+0xaa>
		if((reg & NBIT0) == 0) break;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	f003 0301 	and.w	r3, r3, #1
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d000      	beq.n	800bef8 <chip_sleep+0x2c>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800bef6:	e7ee      	b.n	800bed6 <chip_sleep+0xa>
		if((reg & NBIT0) == 0) break;
 800bef8:	bf00      	nop
	}

	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800befa:	463b      	mov	r3, r7
 800befc:	4619      	mov	r1, r3
 800befe:	2001      	movs	r0, #1
 800bf00:	f000 f8ec 	bl	800c0dc <nm_read_reg_with_ret>
 800bf04:	4603      	mov	r3, r0
 800bf06:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800bf08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d134      	bne.n	800bf7a <chip_sleep+0xae>
	if(reg & NBIT1)
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	f003 0302 	and.w	r3, r3, #2
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00e      	beq.n	800bf38 <chip_sleep+0x6c>
	{
		reg &=~NBIT1;
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	f023 0302 	bic.w	r3, r3, #2
 800bf20:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	4619      	mov	r1, r3
 800bf26:	2001      	movs	r0, #1
 800bf28:	f000 f8e6 	bl	800c0f8 <nm_write_reg>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800bf30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d122      	bne.n	800bf7e <chip_sleep+0xb2>
	}

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800bf38:	463b      	mov	r3, r7
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	200b      	movs	r0, #11
 800bf3e:	f000 f8cd 	bl	800c0dc <nm_read_reg_with_ret>
 800bf42:	4603      	mov	r3, r0
 800bf44:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800bf46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d119      	bne.n	800bf82 <chip_sleep+0xb6>
	if(reg & NBIT0)
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	f003 0301 	and.w	r3, r3, #1
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d016      	beq.n	800bf86 <chip_sleep+0xba>
	{
		reg &= ~NBIT0;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	f023 0301 	bic.w	r3, r3, #1
 800bf5e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	4619      	mov	r1, r3
 800bf64:	200b      	movs	r0, #11
 800bf66:	f000 f8c7 	bl	800c0f8 <nm_write_reg>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800bf6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf72:	2b00      	cmp	r3, #0
	}

ERR1:
 800bf74:	e007      	b.n	800bf86 <chip_sleep+0xba>
		if(ret != M2M_SUCCESS) goto ERR1;
 800bf76:	bf00      	nop
 800bf78:	e006      	b.n	800bf88 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800bf7a:	bf00      	nop
 800bf7c:	e004      	b.n	800bf88 <chip_sleep+0xbc>
		if(ret != M2M_SUCCESS)goto ERR1;
 800bf7e:	bf00      	nop
 800bf80:	e002      	b.n	800bf88 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800bf82:	bf00      	nop
 800bf84:	e000      	b.n	800bf88 <chip_sleep+0xbc>
ERR1:
 800bf86:	bf00      	nop
	return ret;
 800bf88:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <chip_wake>:
sint8 chip_wake(void)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	73fb      	strb	r3, [r7, #15]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	607b      	str	r3, [r7, #4]
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	603b      	str	r3, [r7, #0]
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800bfaa:	1d3b      	adds	r3, r7, #4
 800bfac:	4619      	mov	r1, r3
 800bfae:	200b      	movs	r0, #11
 800bfb0:	f000 f894 	bl	800c0dc <nm_read_reg_with_ret>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800bfb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d16d      	bne.n	800c09c <chip_wake+0x108>

	if(!(reg & NBIT0))
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f003 0301 	and.w	r3, r3, #1
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10c      	bne.n	800bfe4 <chip_wake+0x50>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f043 0301 	orr.w	r3, r3, #1
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	200b      	movs	r0, #11
 800bfd4:	f000 f890 	bl	800c0f8 <nm_write_reg>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800bfdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d15d      	bne.n	800c0a0 <chip_wake+0x10c>
	}

	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800bfe4:	1d3b      	adds	r3, r7, #4
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	2001      	movs	r0, #1
 800bfea:	f000 f877 	bl	800c0dc <nm_read_reg_with_ret>
 800bfee:	4603      	mov	r3, r0
 800bff0:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800bff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d154      	bne.n	800c0a4 <chip_wake+0x110>
	/* Set bit 1 */
	if(!(reg & NBIT1))
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f003 0302 	and.w	r3, r3, #2
 800c000:	2b00      	cmp	r3, #0
 800c002:	d000      	beq.n	800c006 <chip_wake+0x72>
 800c004:	e00d      	b.n	800c022 <chip_wake+0x8e>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f043 0302 	orr.w	r3, r3, #2
 800c00c:	4619      	mov	r1, r3
 800c00e:	2001      	movs	r0, #1
 800c010:	f000 f872 	bl	800c0f8 <nm_write_reg>
 800c014:	4603      	mov	r3, r0
 800c016:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 800c018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d000      	beq.n	800c022 <chip_wake+0x8e>
 800c020:	e041      	b.n	800c0a6 <chip_wake+0x112>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 800c022:	463b      	mov	r3, r7
 800c024:	4619      	mov	r1, r3
 800c026:	200f      	movs	r0, #15
 800c028:	f000 f858 	bl	800c0dc <nm_read_reg_with_ret>
 800c02c:	4603      	mov	r3, r0
 800c02e:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) {
 800c030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d010      	beq.n	800c05a <chip_wake+0xc6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
 800c038:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 800c03c:	491d      	ldr	r1, [pc, #116]	@ (800c0b4 <chip_wake+0x120>)
 800c03e:	481e      	ldr	r0, [pc, #120]	@ (800c0b8 <chip_wake+0x124>)
 800c040:	f001 f852 	bl	800d0e8 <iprintf>
 800c044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c048:	683a      	ldr	r2, [r7, #0]
 800c04a:	4619      	mov	r1, r3
 800c04c:	481b      	ldr	r0, [pc, #108]	@ (800c0bc <chip_wake+0x128>)
 800c04e:	f001 f84b 	bl	800d0e8 <iprintf>
 800c052:	200d      	movs	r0, #13
 800c054:	f001 f85a 	bl	800d10c <putchar>
			goto _WAKE_EXIT;
 800c058:	e025      	b.n	800c0a6 <chip_wake+0x112>
		}
		if(clk_status_reg & NBIT2) {
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	f003 0304 	and.w	r3, r3, #4
 800c060:	2b00      	cmp	r3, #0
 800c062:	d117      	bne.n	800c094 <chip_wake+0x100>
			break;
		}
		nm_bsp_sleep(2);
 800c064:	2002      	movs	r0, #2
 800c066:	f7ff f8bf 	bl	800b1e8 <nm_bsp_sleep>
		trials++;
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	3301      	adds	r3, #1
 800c06e:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	2b04      	cmp	r3, #4
 800c074:	d9d5      	bls.n	800c022 <chip_wake+0x8e>
		{
			M2M_ERR("Failed to wakup the chip\n");
 800c076:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800c07a:	490e      	ldr	r1, [pc, #56]	@ (800c0b4 <chip_wake+0x120>)
 800c07c:	480e      	ldr	r0, [pc, #56]	@ (800c0b8 <chip_wake+0x124>)
 800c07e:	f001 f833 	bl	800d0e8 <iprintf>
 800c082:	480f      	ldr	r0, [pc, #60]	@ (800c0c0 <chip_wake+0x12c>)
 800c084:	f001 f8a0 	bl	800d1c8 <puts>
 800c088:	200d      	movs	r0, #13
 800c08a:	f001 f83f 	bl	800d10c <putchar>
			ret = M2M_ERR_TIME_OUT;
 800c08e:	23fc      	movs	r3, #252	@ 0xfc
 800c090:	73fb      	strb	r3, [r7, #15]
			goto _WAKE_EXIT;
 800c092:	e008      	b.n	800c0a6 <chip_wake+0x112>
			break;
 800c094:	bf00      	nop
		}
	}while(1);

	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
 800c096:	f000 f815 	bl	800c0c4 <nm_bus_reset>
 800c09a:	e004      	b.n	800c0a6 <chip_wake+0x112>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800c09c:	bf00      	nop
 800c09e:	e002      	b.n	800c0a6 <chip_wake+0x112>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800c0a0:	bf00      	nop
 800c0a2:	e000      	b.n	800c0a6 <chip_wake+0x112>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800c0a4:	bf00      	nop

_WAKE_EXIT:
	return ret;
 800c0a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	0800ec08 	.word	0x0800ec08
 800c0b8:	0800e404 	.word	0x0800e404
 800c0bc:	0800e418 	.word	0x0800e418
 800c0c0:	0800e430 	.word	0x0800e430

0800c0c4 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	71fb      	strb	r3, [r7, #7]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
 800c0ce:	f000 faeb 	bl	800c6a8 <nm_spi_reset>
 800c0d2:	4603      	mov	r3, r0
#else
#error "Please define bus usage"
#endif

	return ret;
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 800c0e6:	6839      	ldr	r1, [r7, #0]
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 fdb3 	bl	800cc54 <nm_spi_read_reg_with_ret>
 800c0ee:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Please define bus usage"
#endif
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
 800c102:	6839      	ldr	r1, [r7, #0]
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fc6f 	bl	800c9e8 <nm_spi_write_reg>
 800c10a:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Please define bus usage"
#endif
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3708      	adds	r7, #8
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <p_nm_write_block>:

	return s8Ret;
}

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	4613      	mov	r3, r2
 800c120:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
 800c122:	88fb      	ldrh	r3, [r7, #6]
 800c124:	461a      	mov	r2, r3
 800c126:	68b9      	ldr	r1, [r7, #8]
 800c128:	68f8      	ldr	r0, [r7, #12]
 800c12a:	f000 fe3f 	bl	800cdac <nm_spi_write_block>
 800c12e:	4603      	mov	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Please define bus usage"
#endif

}
 800c130:	4618      	mov	r0, r3
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800c144:	4b20      	ldr	r3, [pc, #128]	@ (800c1c8 <nm_write_block+0x90>)
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	3b08      	subs	r3, #8
 800c14a:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800c14c:	2300      	movs	r3, #0
 800c14e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800c150:	2300      	movs	r3, #0
 800c152:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800c154:	8a3b      	ldrh	r3, [r7, #16]
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d80f      	bhi.n	800c17c <nm_write_block+0x44>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
 800c15c:	68ba      	ldr	r2, [r7, #8]
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	4413      	add	r3, r2
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	b292      	uxth	r2, r2
 800c166:	4619      	mov	r1, r3
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f7ff ffd3 	bl	800c114 <p_nm_write_block>
 800c16e:	4603      	mov	r3, r0
 800c170:	b2da      	uxtb	r2, r3
 800c172:	7cfb      	ldrb	r3, [r7, #19]
 800c174:	4413      	add	r3, r2
 800c176:	b2db      	uxtb	r3, r3
 800c178:	74fb      	strb	r3, [r7, #19]
			break;
 800c17a:	e01f      	b.n	800c1bc <nm_write_block+0x84>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	4413      	add	r3, r2
 800c182:	8a3a      	ldrh	r2, [r7, #16]
 800c184:	4619      	mov	r1, r3
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f7ff ffc4 	bl	800c114 <p_nm_write_block>
 800c18c:	4603      	mov	r3, r0
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	7cfb      	ldrb	r3, [r7, #19]
 800c192:	4413      	add	r3, r2
 800c194:	b2db      	uxtb	r3, r3
 800c196:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800c198:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d10c      	bne.n	800c1ba <nm_write_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800c1a0:	8a3b      	ldrh	r3, [r7, #16]
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	1ad3      	subs	r3, r2, r3
 800c1a6:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800c1a8:	8a3b      	ldrh	r3, [r7, #16]
 800c1aa:	697a      	ldr	r2, [r7, #20]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800c1b0:	8a3b      	ldrh	r3, [r7, #16]
 800c1b2:	68fa      	ldr	r2, [r7, #12]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800c1b8:	e7cc      	b.n	800c154 <nm_write_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800c1ba:	bf00      	nop
		}
	}

	return s8Ret;
 800c1bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3718      	adds	r7, #24
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	2000000c 	.word	0x2000000c

0800c1cc <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static inline sint8 nmi_spi_read(uint8 *b, uint16 sz)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	807b      	strh	r3, [r7, #2]
    return nm_spi_rw(NULL, b, sz);
 800c1d8:	887b      	ldrh	r3, [r7, #2]
 800c1da:	461a      	mov	r2, r3
 800c1dc:	6879      	ldr	r1, [r7, #4]
 800c1de:	2000      	movs	r0, #0
 800c1e0:	f7ff f82a 	bl	800b238 <nm_spi_rw>
 800c1e4:	4603      	mov	r3, r0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <nmi_spi_write>:
static inline sint8 nmi_spi_write(uint8 *b, uint16 sz)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b082      	sub	sp, #8
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	807b      	strh	r3, [r7, #2]
    return nm_spi_rw(b, NULL, sz);
 800c1fa:	887b      	ldrh	r3, [r7, #2]
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	2100      	movs	r1, #0
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f7ff f819 	bl	800b238 <nm_spi_rw>
 800c206:	4603      	mov	r3, r0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <nmi_spi_writeread>:
static sint8 nmi_spi_writeread(uint8 *bw, uint8 *br, uint16 sz)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	4613      	mov	r3, r2
 800c21c:	80fb      	strh	r3, [r7, #6]
    return nm_spi_rw(bw, br, sz);
 800c21e:	88fb      	ldrh	r3, [r7, #6]
 800c220:	461a      	mov	r2, r3
 800c222:	68b9      	ldr	r1, [r7, #8]
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f7ff f807 	bl	800b238 <nm_spi_rw>
 800c22a:	4603      	mov	r3, r0
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3710      	adds	r7, #16
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static inline uint8 crc7_byte(uint8 crc, uint8 data)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	4603      	mov	r3, r0
 800c23c:	460a      	mov	r2, r1
 800c23e:	71fb      	strb	r3, [r7, #7]
 800c240:	4613      	mov	r3, r2
 800c242:	71bb      	strb	r3, [r7, #6]
	return crc7_syndrome_table[(crc << 1) ^ data];
 800c244:	79fb      	ldrb	r3, [r7, #7]
 800c246:	005a      	lsls	r2, r3, #1
 800c248:	79bb      	ldrb	r3, [r7, #6]
 800c24a:	4053      	eors	r3, r2
 800c24c:	4a03      	ldr	r2, [pc, #12]	@ (800c25c <crc7_byte+0x28>)
 800c24e:	5cd3      	ldrb	r3, [r2, r3]
}
 800c250:	4618      	mov	r0, r3
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr
 800c25c:	0800ec14 	.word	0x0800ec14

0800c260 <crc7>:

static inline uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	4603      	mov	r3, r0
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	607a      	str	r2, [r7, #4]
 800c26c:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800c26e:	e00a      	b.n	800c286 <crc7+0x26>
		crc = crc7_byte(crc, *buffer++);
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	1c5a      	adds	r2, r3, #1
 800c274:	60ba      	str	r2, [r7, #8]
 800c276:	781a      	ldrb	r2, [r3, #0]
 800c278:	7bfb      	ldrb	r3, [r7, #15]
 800c27a:	4611      	mov	r1, r2
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7ff ffd9 	bl	800c234 <crc7_byte>
 800c282:	4603      	mov	r3, r0
 800c284:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	1e5a      	subs	r2, r3, #1
 800c28a:	607a      	str	r2, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d1ef      	bne.n	800c270 <crc7+0x10>
	return crc;
 800c290:	7bfb      	ldrb	r3, [r7, #15]
}
 800c292:	4618      	mov	r0, r3
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
	...

0800c29c <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b088      	sub	sp, #32
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60b9      	str	r1, [r7, #8]
 800c2a4:	607a      	str	r2, [r7, #4]
 800c2a6:	603b      	str	r3, [r7, #0]
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	73fb      	strb	r3, [r7, #15]
	uint8 bc[9];
	uint8 len = 5;
 800c2ac:	2305      	movs	r3, #5
 800c2ae:	77fb      	strb	r3, [r7, #31]
	sint8 result = N_OK;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	77bb      	strb	r3, [r7, #30]

	bc[0] = cmd;
 800c2b4:	7bfb      	ldrb	r3, [r7, #15]
 800c2b6:	753b      	strb	r3, [r7, #20]
	switch (cmd) {
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ba:	3bc1      	subs	r3, #193	@ 0xc1
 800c2bc:	2b0e      	cmp	r3, #14
 800c2be:	f200 80cc 	bhi.w	800c45a <spi_cmd+0x1be>
 800c2c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2c8 <spi_cmd+0x2c>)
 800c2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c8:	0800c381 	.word	0x0800c381
 800c2cc:	0800c381 	.word	0x0800c381
 800c2d0:	0800c3dd 	.word	0x0800c3dd
 800c2d4:	0800c321 	.word	0x0800c321
 800c2d8:	0800c34b 	.word	0x0800c34b
 800c2dc:	0800c35d 	.word	0x0800c35d
 800c2e0:	0800c3ab 	.word	0x0800c3ab
 800c2e4:	0800c3ab 	.word	0x0800c3ab
 800c2e8:	0800c421 	.word	0x0800c421
 800c2ec:	0800c305 	.word	0x0800c305
 800c2f0:	0800c45b 	.word	0x0800c45b
 800c2f4:	0800c45b 	.word	0x0800c45b
 800c2f8:	0800c45b 	.word	0x0800c45b
 800c2fc:	0800c45b 	.word	0x0800c45b
 800c300:	0800c36f 	.word	0x0800c36f
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	0c1b      	lsrs	r3, r3, #16
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	0a1b      	lsrs	r3, r3, #8
 800c310:	b2db      	uxtb	r3, r3
 800c312:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	b2db      	uxtb	r3, r3
 800c318:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800c31a:	2305      	movs	r3, #5
 800c31c:	77fb      	strb	r3, [r7, #31]
		break;
 800c31e:	e09f      	b.n	800c460 <spi_cmd+0x1c4>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	0a1b      	lsrs	r3, r3, #8
 800c324:	b2db      	uxtb	r3, r3
 800c326:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800c328:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d004      	beq.n	800c33a <spi_cmd+0x9e>
 800c330:	7d7b      	ldrb	r3, [r7, #21]
 800c332:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c336:	b2db      	uxtb	r3, r3
 800c338:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)adr;
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800c340:	2300      	movs	r3, #0
 800c342:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800c344:	2305      	movs	r3, #5
 800c346:	77fb      	strb	r3, [r7, #31]
		break;
 800c348:	e08a      	b.n	800c460 <spi_cmd+0x1c4>
#if defined(CMD_TERMINATE)
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
 800c34a:	2300      	movs	r3, #0
 800c34c:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800c34e:	2300      	movs	r3, #0
 800c350:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800c352:	2300      	movs	r3, #0
 800c354:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800c356:	2305      	movs	r3, #5
 800c358:	77fb      	strb	r3, [r7, #31]
		break;
 800c35a:	e081      	b.n	800c460 <spi_cmd+0x1c4>
#endif
#if defined(CMD_REPEAT)
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
 800c35c:	2300      	movs	r3, #0
 800c35e:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800c360:	2300      	movs	r3, #0
 800c362:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800c364:	2300      	movs	r3, #0
 800c366:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800c368:	2305      	movs	r3, #5
 800c36a:	77fb      	strb	r3, [r7, #31]
		break;
 800c36c:	e078      	b.n	800c460 <spi_cmd+0x1c4>
#endif
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
 800c36e:	23ff      	movs	r3, #255	@ 0xff
 800c370:	757b      	strb	r3, [r7, #21]
		bc[2] = 0xff;
 800c372:	23ff      	movs	r3, #255	@ 0xff
 800c374:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0xff;
 800c376:	23ff      	movs	r3, #255	@ 0xff
 800c378:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800c37a:	2305      	movs	r3, #5
 800c37c:	77fb      	strb	r3, [r7, #31]
		break;
 800c37e:	e06f      	b.n	800c460 <spi_cmd+0x1c4>
#if defined(CMD_DMA_WRITE) || defined(CMD_DMA_READ)
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	0c1b      	lsrs	r3, r3, #16
 800c384:	b2db      	uxtb	r3, r3
 800c386:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	0a1b      	lsrs	r3, r3, #8
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	b2db      	uxtb	r3, r3
 800c394:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 8);
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	0a1b      	lsrs	r3, r3, #8
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz);
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	b2db      	uxtb	r3, r3
 800c3a2:	767b      	strb	r3, [r7, #25]
		len = 7;
 800c3a4:	2307      	movs	r3, #7
 800c3a6:	77fb      	strb	r3, [r7, #31]
		break;
 800c3a8:	e05a      	b.n	800c460 <spi_cmd+0x1c4>
#endif
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	0c1b      	lsrs	r3, r3, #16
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	0a1b      	lsrs	r3, r3, #8
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 16);
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	0c1b      	lsrs	r3, r3, #16
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz >> 8);
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	0a1b      	lsrs	r3, r3, #8
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(sz);
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800c3d6:	2308      	movs	r3, #8
 800c3d8:	77fb      	strb	r3, [r7, #31]
		break;
 800c3da:	e041      	b.n	800c460 <spi_cmd+0x1c4>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	0a1b      	lsrs	r3, r3, #8
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800c3e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d004      	beq.n	800c3f6 <spi_cmd+0x15a>
 800c3ec:	7d7b      	ldrb	r3, [r7, #21]
 800c3ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr);
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(u32data >> 24);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	0e1b      	lsrs	r3, r3, #24
 800c400:	b2db      	uxtb	r3, r3
 800c402:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 16);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	0c1b      	lsrs	r3, r3, #16
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 8);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	0a1b      	lsrs	r3, r3, #8
 800c410:	b2db      	uxtb	r3, r3
 800c412:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	b2db      	uxtb	r3, r3
 800c418:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800c41a:	2308      	movs	r3, #8
 800c41c:	77fb      	strb	r3, [r7, #31]
		break;
 800c41e:	e01f      	b.n	800c460 <spi_cmd+0x1c4>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	0c1b      	lsrs	r3, r3, #16
 800c424:	b2db      	uxtb	r3, r3
 800c426:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	0a1b      	lsrs	r3, r3, #8
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(adr);
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	b2db      	uxtb	r3, r3
 800c434:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 24);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	0e1b      	lsrs	r3, r3, #24
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 16);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	0c1b      	lsrs	r3, r3, #16
 800c442:	b2db      	uxtb	r3, r3
 800c444:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data >> 8);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	0a1b      	lsrs	r3, r3, #8
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	76bb      	strb	r3, [r7, #26]
		bc[7] = (uint8)(u32data);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	b2db      	uxtb	r3, r3
 800c452:	76fb      	strb	r3, [r7, #27]
		len = 9;
 800c454:	2309      	movs	r3, #9
 800c456:	77fb      	strb	r3, [r7, #31]
		break;
 800c458:	e002      	b.n	800c460 <spi_cmd+0x1c4>
	default:
		result = N_FAIL;
 800c45a:	23ff      	movs	r3, #255	@ 0xff
 800c45c:	77bb      	strb	r3, [r7, #30]
		break;
 800c45e:	bf00      	nop
	}

    if(result == N_OK) {
 800c460:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d133      	bne.n	800c4d0 <spi_cmd+0x234>
		if (!gu8Crc_off)
 800c468:	4b1c      	ldr	r3, [pc, #112]	@ (800c4dc <spi_cmd+0x240>)
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d113      	bne.n	800c498 <spi_cmd+0x1fc>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 800c470:	7ffb      	ldrb	r3, [r7, #31]
 800c472:	3b01      	subs	r3, #1
 800c474:	461a      	mov	r2, r3
 800c476:	f107 0314 	add.w	r3, r7, #20
 800c47a:	4619      	mov	r1, r3
 800c47c:	207f      	movs	r0, #127	@ 0x7f
 800c47e:	f7ff feef 	bl	800c260 <crc7>
 800c482:	4603      	mov	r3, r0
 800c484:	461a      	mov	r2, r3
 800c486:	7ffb      	ldrb	r3, [r7, #31]
 800c488:	3b01      	subs	r3, #1
 800c48a:	0052      	lsls	r2, r2, #1
 800c48c:	b2d2      	uxtb	r2, r2
 800c48e:	3320      	adds	r3, #32
 800c490:	443b      	add	r3, r7
 800c492:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800c496:	e002      	b.n	800c49e <spi_cmd+0x202>
		else
			len-=1;
 800c498:	7ffb      	ldrb	r3, [r7, #31]
 800c49a:	3b01      	subs	r3, #1
 800c49c:	77fb      	strb	r3, [r7, #31]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 800c49e:	7ffb      	ldrb	r3, [r7, #31]
 800c4a0:	b29a      	uxth	r2, r3
 800c4a2:	f107 0314 	add.w	r3, r7, #20
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7ff fea0 	bl	800c1ee <nmi_spi_write>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00d      	beq.n	800c4d0 <spi_cmd+0x234>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
 800c4b4:	f240 1203 	movw	r2, #259	@ 0x103
 800c4b8:	4909      	ldr	r1, [pc, #36]	@ (800c4e0 <spi_cmd+0x244>)
 800c4ba:	480a      	ldr	r0, [pc, #40]	@ (800c4e4 <spi_cmd+0x248>)
 800c4bc:	f000 fe14 	bl	800d0e8 <iprintf>
 800c4c0:	4809      	ldr	r0, [pc, #36]	@ (800c4e8 <spi_cmd+0x24c>)
 800c4c2:	f000 fe81 	bl	800d1c8 <puts>
 800c4c6:	200d      	movs	r0, #13
 800c4c8:	f000 fe20 	bl	800d10c <putchar>
			result = N_FAIL;
 800c4cc:	23ff      	movs	r3, #255	@ 0xff
 800c4ce:	77bb      	strb	r3, [r7, #30]
		}
	}

	return result;
 800c4d0:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3720      	adds	r7, #32
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	200006a0 	.word	0x200006a0
 800c4e0:	0800ed14 	.word	0x0800ed14
 800c4e4:	0800e500 	.word	0x0800e500
 800c4e8:	0800e514 	.word	0x0800e514

0800c4ec <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	71fb      	strb	r3, [r7, #7]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	73bb      	strb	r3, [r7, #14]

    if (!gu8Crc_off)
 800c4fa:	4b27      	ldr	r3, [pc, #156]	@ (800c598 <spi_data_rsp+0xac>)
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d102      	bne.n	800c508 <spi_data_rsp+0x1c>
		len = 2;
 800c502:	2302      	movs	r3, #2
 800c504:	73fb      	strb	r3, [r7, #15]
 800c506:	e001      	b.n	800c50c <spi_data_rsp+0x20>
	else
		len = 3;
 800c508:	2303      	movs	r3, #3
 800c50a:	73fb      	strb	r3, [r7, #15]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
 800c50c:	7bfb      	ldrb	r3, [r7, #15]
 800c50e:	b29a      	uxth	r2, r3
 800c510:	f107 0308 	add.w	r3, r7, #8
 800c514:	4611      	mov	r1, r2
 800c516:	4618      	mov	r0, r3
 800c518:	f7ff fe58 	bl	800c1cc <nmi_spi_read>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00e      	beq.n	800c540 <spi_data_rsp+0x54>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
 800c522:	f240 1217 	movw	r2, #279	@ 0x117
 800c526:	491d      	ldr	r1, [pc, #116]	@ (800c59c <spi_data_rsp+0xb0>)
 800c528:	481d      	ldr	r0, [pc, #116]	@ (800c5a0 <spi_data_rsp+0xb4>)
 800c52a:	f000 fddd 	bl	800d0e8 <iprintf>
 800c52e:	481d      	ldr	r0, [pc, #116]	@ (800c5a4 <spi_data_rsp+0xb8>)
 800c530:	f000 fe4a 	bl	800d1c8 <puts>
 800c534:	200d      	movs	r0, #13
 800c536:	f000 fde9 	bl	800d10c <putchar>
		result = N_FAIL;
 800c53a:	23ff      	movs	r3, #255	@ 0xff
 800c53c:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800c53e:	e024      	b.n	800c58a <spi_data_rsp+0x9e>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
 800c540:	7bfb      	ldrb	r3, [r7, #15]
 800c542:	3b01      	subs	r3, #1
 800c544:	3310      	adds	r3, #16
 800c546:	443b      	add	r3, r7
 800c548:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d107      	bne.n	800c560 <spi_data_rsp+0x74>
 800c550:	7bfb      	ldrb	r3, [r7, #15]
 800c552:	3b02      	subs	r3, #2
 800c554:	3310      	adds	r3, #16
 800c556:	443b      	add	r3, r7
 800c558:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800c55c:	2bc3      	cmp	r3, #195	@ 0xc3
 800c55e:	d013      	beq.n	800c588 <spi_data_rsp+0x9c>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
 800c560:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 800c564:	490d      	ldr	r1, [pc, #52]	@ (800c59c <spi_data_rsp+0xb0>)
 800c566:	480e      	ldr	r0, [pc, #56]	@ (800c5a0 <spi_data_rsp+0xb4>)
 800c568:	f000 fdbe 	bl	800d0e8 <iprintf>
 800c56c:	7a3b      	ldrb	r3, [r7, #8]
 800c56e:	4619      	mov	r1, r3
 800c570:	7a7b      	ldrb	r3, [r7, #9]
 800c572:	461a      	mov	r2, r3
 800c574:	7abb      	ldrb	r3, [r7, #10]
 800c576:	480c      	ldr	r0, [pc, #48]	@ (800c5a8 <spi_data_rsp+0xbc>)
 800c578:	f000 fdb6 	bl	800d0e8 <iprintf>
 800c57c:	200d      	movs	r0, #13
 800c57e:	f000 fdc5 	bl	800d10c <putchar>
		result = N_FAIL;
 800c582:	23ff      	movs	r3, #255	@ 0xff
 800c584:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800c586:	e000      	b.n	800c58a <spi_data_rsp+0x9e>
	}
_fail_:
 800c588:	bf00      	nop

	return result;
 800c58a:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	200006a0 	.word	0x200006a0
 800c59c:	0800ed1c 	.word	0x0800ed1c
 800c5a0:	0800e500 	.word	0x0800e500
 800c5a4:	0800e540 	.word	0x0800e540
 800c5a8:	0800e560 	.word	0x0800e560

0800c5ac <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	71fb      	strb	r3, [r7, #7]
	uint8 rsp;
	sint8 result = N_OK;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	73fb      	strb	r3, [r7, #15]

	/**
		Command/Control response
	**/
#if defined(CMD_TERMINATE)
    if(cmd == CMD_TERMINATE) {
 800c5ba:	79fb      	ldrb	r3, [r7, #7]
 800c5bc:	2bc5      	cmp	r3, #197	@ 0xc5
 800c5be:	d10b      	bne.n	800c5d8 <spi_cmd_rsp+0x2c>
        if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800c5c0:	f107 030d 	add.w	r3, r7, #13
 800c5c4:	2101      	movs	r1, #1
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7ff fe00 	bl	800c1cc <nmi_spi_read>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d002      	beq.n	800c5d8 <spi_cmd_rsp+0x2c>
            result = N_FAIL;
 800c5d2:	23ff      	movs	r3, #255	@ 0xff
 800c5d4:	73fb      	strb	r3, [r7, #15]
            goto _fail_;
 800c5d6:	e05a      	b.n	800c68e <spi_cmd_rsp+0xe2>
        }
    }
#endif
#if defined(CMD_REPEAT)
    if(cmd == CMD_REPEAT) {
 800c5d8:	79fb      	ldrb	r3, [r7, #7]
 800c5da:	2bc6      	cmp	r3, #198	@ 0xc6
 800c5dc:	d10b      	bne.n	800c5f6 <spi_cmd_rsp+0x4a>
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800c5de:	f107 030d 	add.w	r3, r7, #13
 800c5e2:	2101      	movs	r1, #1
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7ff fdf1 	bl	800c1cc <nmi_spi_read>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d002      	beq.n	800c5f6 <spi_cmd_rsp+0x4a>
			result = N_FAIL;
 800c5f0:	23ff      	movs	r3, #255	@ 0xff
 800c5f2:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800c5f4:	e04b      	b.n	800c68e <spi_cmd_rsp+0xe2>
		}
	}
#endif

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800c5f6:	230a      	movs	r3, #10
 800c5f8:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800c5fa:	f107 030d 	add.w	r3, r7, #13
 800c5fe:	2101      	movs	r1, #1
 800c600:	4618      	mov	r0, r3
 800c602:	f7ff fde3 	bl	800c1cc <nmi_spi_read>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d00e      	beq.n	800c62a <spi_cmd_rsp+0x7e>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
 800c60c:	f44f 72a3 	mov.w	r2, #326	@ 0x146
 800c610:	4922      	ldr	r1, [pc, #136]	@ (800c69c <spi_cmd_rsp+0xf0>)
 800c612:	4823      	ldr	r0, [pc, #140]	@ (800c6a0 <spi_cmd_rsp+0xf4>)
 800c614:	f000 fd68 	bl	800d0e8 <iprintf>
 800c618:	4822      	ldr	r0, [pc, #136]	@ (800c6a4 <spi_cmd_rsp+0xf8>)
 800c61a:	f000 fdd5 	bl	800d1c8 <puts>
 800c61e:	200d      	movs	r0, #13
 800c620:	f000 fd74 	bl	800d10c <putchar>
			result = N_FAIL;
 800c624:	23ff      	movs	r3, #255	@ 0xff
 800c626:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800c628:	e031      	b.n	800c68e <spi_cmd_rsp+0xe2>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 800c62a:	7b7b      	ldrb	r3, [r7, #13]
 800c62c:	79fa      	ldrb	r2, [r7, #7]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d007      	beq.n	800c642 <spi_cmd_rsp+0x96>
 800c632:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c636:	b2da      	uxtb	r2, r3
 800c638:	3a01      	subs	r2, #1
 800c63a:	b2d2      	uxtb	r2, r2
 800c63c:	73ba      	strb	r2, [r7, #14]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	dcdb      	bgt.n	800c5fa <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800c642:	230a      	movs	r3, #10
 800c644:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800c646:	f107 030d 	add.w	r3, r7, #13
 800c64a:	2101      	movs	r1, #1
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7ff fdbd 	bl	800c1cc <nmi_spi_read>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d00e      	beq.n	800c676 <spi_cmd_rsp+0xca>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
 800c658:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 800c65c:	490f      	ldr	r1, [pc, #60]	@ (800c69c <spi_cmd_rsp+0xf0>)
 800c65e:	4810      	ldr	r0, [pc, #64]	@ (800c6a0 <spi_cmd_rsp+0xf4>)
 800c660:	f000 fd42 	bl	800d0e8 <iprintf>
 800c664:	480f      	ldr	r0, [pc, #60]	@ (800c6a4 <spi_cmd_rsp+0xf8>)
 800c666:	f000 fdaf 	bl	800d1c8 <puts>
 800c66a:	200d      	movs	r0, #13
 800c66c:	f000 fd4e 	bl	800d10c <putchar>
			result = N_FAIL;
 800c670:	23ff      	movs	r3, #255	@ 0xff
 800c672:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800c674:	e00b      	b.n	800c68e <spi_cmd_rsp+0xe2>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 800c676:	7b7b      	ldrb	r3, [r7, #13]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d007      	beq.n	800c68c <spi_cmd_rsp+0xe0>
 800c67c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c680:	b2da      	uxtb	r2, r3
 800c682:	3a01      	subs	r2, #1
 800c684:	b2d2      	uxtb	r2, r2
 800c686:	73ba      	strb	r2, [r7, #14]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	dcdc      	bgt.n	800c646 <spi_cmd_rsp+0x9a>

_fail_:
 800c68c:	bf00      	nop

	return result;
 800c68e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c692:	4618      	mov	r0, r3
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	0800ed2c 	.word	0x0800ed2c
 800c6a0:	0800e500 	.word	0x0800e500
 800c6a4:	0800e590 	.word	0x0800e590

0800c6a8 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af02      	add	r7, sp, #8
	//M2M_INFO("Reset Spi\n");
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	20cf      	movs	r0, #207	@ 0xcf
 800c6ba:	f7ff fdef 	bl	800c29c <spi_cmd>

	if(spi_cmd_rsp(CMD_RESET) != N_OK) {
 800c6be:	20cf      	movs	r0, #207	@ 0xcf
 800c6c0:	f7ff ff74 	bl	800c5ac <spi_cmd_rsp>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d028      	beq.n	800c71c <nm_spi_reset+0x74>
		// Reset command failed, need to send repeated 1's until reset occurs
		uint8 w_buf[8] = {0xFF};
 800c6ca:	23ff      	movs	r3, #255	@ 0xff
 800c6cc:	60bb      	str	r3, [r7, #8]
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	60fb      	str	r3, [r7, #12]
		uint8 r_buf[8];
		M2M_ERR("[nmi spi]: Failed rst cmd response\n");
 800c6d2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800c6d6:	4914      	ldr	r1, [pc, #80]	@ (800c728 <nm_spi_reset+0x80>)
 800c6d8:	4814      	ldr	r0, [pc, #80]	@ (800c72c <nm_spi_reset+0x84>)
 800c6da:	f000 fd05 	bl	800d0e8 <iprintf>
 800c6de:	4814      	ldr	r0, [pc, #80]	@ (800c730 <nm_spi_reset+0x88>)
 800c6e0:	f000 fd72 	bl	800d1c8 <puts>
 800c6e4:	200d      	movs	r0, #13
 800c6e6:	f000 fd11 	bl	800d10c <putchar>
		nmi_spi_writeread(w_buf, r_buf, 8);
 800c6ea:	4639      	mov	r1, r7
 800c6ec:	f107 0308 	add.w	r3, r7, #8
 800c6f0:	2208      	movs	r2, #8
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7ff fd8c 	bl	800c210 <nmi_spi_writeread>
		if(r_buf[7] != 0xFF)
 800c6f8:	79fb      	ldrb	r3, [r7, #7]
 800c6fa:	2bff      	cmp	r3, #255	@ 0xff
 800c6fc:	d00e      	beq.n	800c71c <nm_spi_reset+0x74>
		{
			M2M_ERR("[nmi spi]: Failed repeated reset\n");
 800c6fe:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c702:	4909      	ldr	r1, [pc, #36]	@ (800c728 <nm_spi_reset+0x80>)
 800c704:	4809      	ldr	r0, [pc, #36]	@ (800c72c <nm_spi_reset+0x84>)
 800c706:	f000 fcef 	bl	800d0e8 <iprintf>
 800c70a:	480a      	ldr	r0, [pc, #40]	@ (800c734 <nm_spi_reset+0x8c>)
 800c70c:	f000 fd5c 	bl	800d1c8 <puts>
 800c710:	200d      	movs	r0, #13
 800c712:	f000 fcfb 	bl	800d10c <putchar>
			return N_FAIL;
 800c716:	f04f 33ff 	mov.w	r3, #4294967295
 800c71a:	e000      	b.n	800c71e <nm_spi_reset+0x76>
		}
	}
	return N_OK;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	0800ed38 	.word	0x0800ed38
 800c72c:	0800e500 	.word	0x0800e500
 800c730:	0800e5c4 	.word	0x0800e5c4
 800c734:	0800e5e8 	.word	0x0800e5e8

0800c738 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b086      	sub	sp, #24
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	460b      	mov	r3, r1
 800c742:	807b      	strh	r3, [r7, #2]
 800c744:	4613      	mov	r3, r2
 800c746:	707b      	strb	r3, [r7, #1]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
 800c748:	2300      	movs	r3, #0
 800c74a:	747b      	strb	r3, [r7, #17]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	82bb      	strh	r3, [r7, #20]
	do {
		if (sz <= DATA_PKT_SZ)
 800c750:	887b      	ldrh	r3, [r7, #2]
 800c752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c756:	d802      	bhi.n	800c75e <spi_data_read+0x26>
			nbytes = sz;
 800c758:	887b      	ldrh	r3, [r7, #2]
 800c75a:	827b      	strh	r3, [r7, #18]
 800c75c:	e002      	b.n	800c764 <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800c75e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c762:	827b      	strh	r3, [r7, #18]

		/**
			Data Response header
		**/
		retry = SPI_RESP_RETRY_COUNT;
 800c764:	230a      	movs	r3, #10
 800c766:	82fb      	strh	r3, [r7, #22]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800c768:	f107 030b 	add.w	r3, r7, #11
 800c76c:	2101      	movs	r1, #1
 800c76e:	4618      	mov	r0, r3
 800c770:	f7ff fd2c 	bl	800c1cc <nmi_spi_read>
 800c774:	4603      	mov	r3, r0
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00e      	beq.n	800c798 <spi_data_read+0x60>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
 800c77a:	f44f 72c5 	mov.w	r2, #394	@ 0x18a
 800c77e:	4942      	ldr	r1, [pc, #264]	@ (800c888 <spi_data_read+0x150>)
 800c780:	4842      	ldr	r0, [pc, #264]	@ (800c88c <spi_data_read+0x154>)
 800c782:	f000 fcb1 	bl	800d0e8 <iprintf>
 800c786:	4842      	ldr	r0, [pc, #264]	@ (800c890 <spi_data_read+0x158>)
 800c788:	f000 fd1e 	bl	800d1c8 <puts>
 800c78c:	200d      	movs	r0, #13
 800c78e:	f000 fcbd 	bl	800d10c <putchar>
				result = N_FAIL;
 800c792:	23ff      	movs	r3, #255	@ 0xff
 800c794:	747b      	strb	r3, [r7, #17]
				break;
 800c796:	e00e      	b.n	800c7b6 <spi_data_read+0x7e>
			}
            if((rsp & 0xf0) == 0xf0)
 800c798:	7afb      	ldrb	r3, [r7, #11]
 800c79a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c79e:	2bf0      	cmp	r3, #240	@ 0xf0
 800c7a0:	d008      	beq.n	800c7b4 <spi_data_read+0x7c>
				break;
		} while (retry--);
 800c7a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c7a6:	b29a      	uxth	r2, r3
 800c7a8:	3a01      	subs	r2, #1
 800c7aa:	b292      	uxth	r2, r2
 800c7ac:	82fa      	strh	r2, [r7, #22]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d1da      	bne.n	800c768 <spi_data_read+0x30>
 800c7b2:	e000      	b.n	800c7b6 <spi_data_read+0x7e>
				break;
 800c7b4:	bf00      	nop

		if (result == N_FAIL)
 800c7b6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800c7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7be:	d05c      	beq.n	800c87a <spi_data_read+0x142>
			break;

		if (retry <= 0) {
 800c7c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	dc10      	bgt.n	800c7ea <spi_data_read+0xb2>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
 800c7c8:	f44f 72cb 	mov.w	r2, #406	@ 0x196
 800c7cc:	492e      	ldr	r1, [pc, #184]	@ (800c888 <spi_data_read+0x150>)
 800c7ce:	482f      	ldr	r0, [pc, #188]	@ (800c88c <spi_data_read+0x154>)
 800c7d0:	f000 fc8a 	bl	800d0e8 <iprintf>
 800c7d4:	7afb      	ldrb	r3, [r7, #11]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	482e      	ldr	r0, [pc, #184]	@ (800c894 <spi_data_read+0x15c>)
 800c7da:	f000 fc85 	bl	800d0e8 <iprintf>
 800c7de:	200d      	movs	r0, #13
 800c7e0:	f000 fc94 	bl	800d10c <putchar>
			result = N_FAIL;
 800c7e4:	23ff      	movs	r3, #255	@ 0xff
 800c7e6:	747b      	strb	r3, [r7, #17]
			break;
 800c7e8:	e048      	b.n	800c87c <spi_data_read+0x144>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 800c7ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	8a7a      	ldrh	r2, [r7, #18]
 800c7f4:	4611      	mov	r1, r2
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7ff fce8 	bl	800c1cc <nmi_spi_read>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d00e      	beq.n	800c820 <spi_data_read+0xe8>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
 800c802:	f240 129f 	movw	r2, #415	@ 0x19f
 800c806:	4920      	ldr	r1, [pc, #128]	@ (800c888 <spi_data_read+0x150>)
 800c808:	4820      	ldr	r0, [pc, #128]	@ (800c88c <spi_data_read+0x154>)
 800c80a:	f000 fc6d 	bl	800d0e8 <iprintf>
 800c80e:	4822      	ldr	r0, [pc, #136]	@ (800c898 <spi_data_read+0x160>)
 800c810:	f000 fcda 	bl	800d1c8 <puts>
 800c814:	200d      	movs	r0, #13
 800c816:	f000 fc79 	bl	800d10c <putchar>
			result = N_FAIL;
 800c81a:	23ff      	movs	r3, #255	@ 0xff
 800c81c:	747b      	strb	r3, [r7, #17]
			break;
 800c81e:	e02d      	b.n	800c87c <spi_data_read+0x144>
		}
		if(!clockless)
 800c820:	787b      	ldrb	r3, [r7, #1]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d11b      	bne.n	800c85e <spi_data_read+0x126>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
 800c826:	4b1d      	ldr	r3, [pc, #116]	@ (800c89c <spi_data_read+0x164>)
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d117      	bne.n	800c85e <spi_data_read+0x126>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 800c82e:	f107 030c 	add.w	r3, r7, #12
 800c832:	2102      	movs	r1, #2
 800c834:	4618      	mov	r0, r3
 800c836:	f7ff fcc9 	bl	800c1cc <nmi_spi_read>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d00e      	beq.n	800c85e <spi_data_read+0x126>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
 800c840:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800c844:	4910      	ldr	r1, [pc, #64]	@ (800c888 <spi_data_read+0x150>)
 800c846:	4811      	ldr	r0, [pc, #68]	@ (800c88c <spi_data_read+0x154>)
 800c848:	f000 fc4e 	bl	800d0e8 <iprintf>
 800c84c:	4814      	ldr	r0, [pc, #80]	@ (800c8a0 <spi_data_read+0x168>)
 800c84e:	f000 fcbb 	bl	800d1c8 <puts>
 800c852:	200d      	movs	r0, #13
 800c854:	f000 fc5a 	bl	800d10c <putchar>
					result = N_FAIL;
 800c858:	23ff      	movs	r3, #255	@ 0xff
 800c85a:	747b      	strb	r3, [r7, #17]
					break;
 800c85c:	e00e      	b.n	800c87c <spi_data_read+0x144>
				}
			}
		}
		ix += nbytes;
 800c85e:	8aba      	ldrh	r2, [r7, #20]
 800c860:	8a7b      	ldrh	r3, [r7, #18]
 800c862:	4413      	add	r3, r2
 800c864:	b29b      	uxth	r3, r3
 800c866:	82bb      	strh	r3, [r7, #20]
		sz -= nbytes;
 800c868:	8a7b      	ldrh	r3, [r7, #18]
 800c86a:	887a      	ldrh	r2, [r7, #2]
 800c86c:	1ad3      	subs	r3, r2, r3
 800c86e:	807b      	strh	r3, [r7, #2]

	} while (sz);
 800c870:	887b      	ldrh	r3, [r7, #2]
 800c872:	2b00      	cmp	r3, #0
 800c874:	f47f af6c 	bne.w	800c750 <spi_data_read+0x18>
 800c878:	e000      	b.n	800c87c <spi_data_read+0x144>
			break;
 800c87a:	bf00      	nop

	return result;
 800c87c:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800c880:	4618      	mov	r0, r3
 800c882:	3718      	adds	r7, #24
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	0800ed48 	.word	0x0800ed48
 800c88c:	0800e500 	.word	0x0800e500
 800c890:	0800e60c 	.word	0x0800e60c
 800c894:	0800e640 	.word	0x0800e640
 800c898:	0800e670 	.word	0x0800e670
 800c89c:	200006a0 	.word	0x200006a0
 800c8a0:	0800e6a0 	.word	0x0800e6a0

0800c8a4 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b086      	sub	sp, #24
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	807b      	strh	r3, [r7, #2]
    sint16 ix = 0;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	82fb      	strh	r3, [r7, #22]
	uint16 nbytes;
    sint8 result = N_OK;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	74fb      	strb	r3, [r7, #19]
	uint8 cmd, order, crc[2] = {0};
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	81bb      	strh	r3, [r7, #12]

	/**
		Data
	**/
	do {
		if (sz <= DATA_PKT_SZ)
 800c8bc:	887b      	ldrh	r3, [r7, #2]
 800c8be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c8c2:	d802      	bhi.n	800c8ca <spi_data_write+0x26>
			nbytes = sz;
 800c8c4:	887b      	ldrh	r3, [r7, #2]
 800c8c6:	82bb      	strh	r3, [r7, #20]
 800c8c8:	e002      	b.n	800c8d0 <spi_data_write+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800c8ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c8ce:	82bb      	strh	r3, [r7, #20]

		/**
			Write command
		**/
		cmd = 0xf0;
 800c8d0:	23f0      	movs	r3, #240	@ 0xf0
 800c8d2:	747b      	strb	r3, [r7, #17]
		if (ix == 0)  {
 800c8d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d109      	bne.n	800c8f0 <spi_data_write+0x4c>
			if (sz <= DATA_PKT_SZ)
 800c8dc:	887b      	ldrh	r3, [r7, #2]
 800c8de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c8e2:	d802      	bhi.n	800c8ea <spi_data_write+0x46>
				order = 0x3;
 800c8e4:	2303      	movs	r3, #3
 800c8e6:	74bb      	strb	r3, [r7, #18]
 800c8e8:	e00b      	b.n	800c902 <spi_data_write+0x5e>
			else
				order = 0x1;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	74bb      	strb	r3, [r7, #18]
 800c8ee:	e008      	b.n	800c902 <spi_data_write+0x5e>
		} else {
			if (sz <= DATA_PKT_SZ)
 800c8f0:	887b      	ldrh	r3, [r7, #2]
 800c8f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c8f6:	d802      	bhi.n	800c8fe <spi_data_write+0x5a>
				order = 0x3;
 800c8f8:	2303      	movs	r3, #3
 800c8fa:	74bb      	strb	r3, [r7, #18]
 800c8fc:	e001      	b.n	800c902 <spi_data_write+0x5e>
			else
				order = 0x2;
 800c8fe:	2302      	movs	r3, #2
 800c900:	74bb      	strb	r3, [r7, #18]
		}
		cmd |= order;
 800c902:	7c7a      	ldrb	r2, [r7, #17]
 800c904:	7cbb      	ldrb	r3, [r7, #18]
 800c906:	4313      	orrs	r3, r2
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	747b      	strb	r3, [r7, #17]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 800c90c:	f107 0311 	add.w	r3, r7, #17
 800c910:	2101      	movs	r1, #1
 800c912:	4618      	mov	r0, r3
 800c914:	f7ff fc6b 	bl	800c1ee <nmi_spi_write>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00e      	beq.n	800c93c <spi_data_write+0x98>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
 800c91e:	f44f 72ed 	mov.w	r2, #474	@ 0x1da
 800c922:	492b      	ldr	r1, [pc, #172]	@ (800c9d0 <spi_data_write+0x12c>)
 800c924:	482b      	ldr	r0, [pc, #172]	@ (800c9d4 <spi_data_write+0x130>)
 800c926:	f000 fbdf 	bl	800d0e8 <iprintf>
 800c92a:	482b      	ldr	r0, [pc, #172]	@ (800c9d8 <spi_data_write+0x134>)
 800c92c:	f000 fc4c 	bl	800d1c8 <puts>
 800c930:	200d      	movs	r0, #13
 800c932:	f000 fbeb 	bl	800d10c <putchar>
			result = N_FAIL;
 800c936:	23ff      	movs	r3, #255	@ 0xff
 800c938:	74fb      	strb	r3, [r7, #19]
			break;
 800c93a:	e043      	b.n	800c9c4 <spi_data_write+0x120>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 800c93c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	4413      	add	r3, r2
 800c944:	8aba      	ldrh	r2, [r7, #20]
 800c946:	4611      	mov	r1, r2
 800c948:	4618      	mov	r0, r3
 800c94a:	f7ff fc50 	bl	800c1ee <nmi_spi_write>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00e      	beq.n	800c972 <spi_data_write+0xce>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
 800c954:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800c958:	491d      	ldr	r1, [pc, #116]	@ (800c9d0 <spi_data_write+0x12c>)
 800c95a:	481e      	ldr	r0, [pc, #120]	@ (800c9d4 <spi_data_write+0x130>)
 800c95c:	f000 fbc4 	bl	800d0e8 <iprintf>
 800c960:	481e      	ldr	r0, [pc, #120]	@ (800c9dc <spi_data_write+0x138>)
 800c962:	f000 fc31 	bl	800d1c8 <puts>
 800c966:	200d      	movs	r0, #13
 800c968:	f000 fbd0 	bl	800d10c <putchar>
			result = N_FAIL;
 800c96c:	23ff      	movs	r3, #255	@ 0xff
 800c96e:	74fb      	strb	r3, [r7, #19]
			break;
 800c970:	e028      	b.n	800c9c4 <spi_data_write+0x120>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
 800c972:	4b1b      	ldr	r3, [pc, #108]	@ (800c9e0 <spi_data_write+0x13c>)
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d117      	bne.n	800c9aa <spi_data_write+0x106>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 800c97a:	f107 030c 	add.w	r3, r7, #12
 800c97e:	2102      	movs	r1, #2
 800c980:	4618      	mov	r0, r3
 800c982:	f7ff fc34 	bl	800c1ee <nmi_spi_write>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d00e      	beq.n	800c9aa <spi_data_write+0x106>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
 800c98c:	f240 12ed 	movw	r2, #493	@ 0x1ed
 800c990:	490f      	ldr	r1, [pc, #60]	@ (800c9d0 <spi_data_write+0x12c>)
 800c992:	4810      	ldr	r0, [pc, #64]	@ (800c9d4 <spi_data_write+0x130>)
 800c994:	f000 fba8 	bl	800d0e8 <iprintf>
 800c998:	4812      	ldr	r0, [pc, #72]	@ (800c9e4 <spi_data_write+0x140>)
 800c99a:	f000 fc15 	bl	800d1c8 <puts>
 800c99e:	200d      	movs	r0, #13
 800c9a0:	f000 fbb4 	bl	800d10c <putchar>
				result = N_FAIL;
 800c9a4:	23ff      	movs	r3, #255	@ 0xff
 800c9a6:	74fb      	strb	r3, [r7, #19]
				break;
 800c9a8:	e00c      	b.n	800c9c4 <spi_data_write+0x120>
			}
		}

		ix += nbytes;
 800c9aa:	8afa      	ldrh	r2, [r7, #22]
 800c9ac:	8abb      	ldrh	r3, [r7, #20]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	82fb      	strh	r3, [r7, #22]
		sz -= nbytes;
 800c9b4:	887a      	ldrh	r2, [r7, #2]
 800c9b6:	8abb      	ldrh	r3, [r7, #20]
 800c9b8:	1ad3      	subs	r3, r2, r3
 800c9ba:	807b      	strh	r3, [r7, #2]
	} while (sz);
 800c9bc:	887b      	ldrh	r3, [r7, #2]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	f47f af7c 	bne.w	800c8bc <spi_data_write+0x18>


	return result;
 800c9c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3718      	adds	r7, #24
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	0800ed58 	.word	0x0800ed58
 800c9d4:	0800e500 	.word	0x0800e500
 800c9d8:	0800e6d4 	.word	0x0800e6d4
 800c9dc:	0800e70c 	.word	0x0800e70c
 800c9e0:	200006a0 	.word	0x200006a0
 800c9e4:	0800e740 	.word	0x0800e740

0800c9e8 <nm_spi_write_reg>:
 *  @param[in]  u32Val
 *                  Value to be written to the register
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_write_reg(uint32 addr, uint32 u32data)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b086      	sub	sp, #24
 800c9ec:	af02      	add	r7, sp, #8
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800c9f2:	230a      	movs	r3, #10
 800c9f4:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_WRITE;
 800c9fa:	23c9      	movs	r3, #201	@ 0xc9
 800c9fc:	737b      	strb	r3, [r7, #13]
	uint8 clockless = 0;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	733b      	strb	r3, [r7, #12]
	
_RETRY_:	
	if (addr <= 0x30)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2b30      	cmp	r3, #48	@ 0x30
 800ca06:	d803      	bhi.n	800ca10 <nm_spi_write_reg+0x28>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
 800ca08:	23c3      	movs	r3, #195	@ 0xc3
 800ca0a:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	733b      	strb	r3, [r7, #12]
	}

	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 800ca10:	7b78      	ldrb	r0, [r7, #13]
 800ca12:	7b3b      	ldrb	r3, [r7, #12]
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	2304      	movs	r3, #4
 800ca18:	683a      	ldr	r2, [r7, #0]
 800ca1a:	6879      	ldr	r1, [r7, #4]
 800ca1c:	f7ff fc3e 	bl	800c29c <spi_cmd>
 800ca20:	4603      	mov	r3, r0
 800ca22:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800ca24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d00d      	beq.n	800ca48 <nm_spi_write_reg+0x60>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
 800ca2c:	f240 2223 	movw	r2, #547	@ 0x223
 800ca30:	492a      	ldr	r1, [pc, #168]	@ (800cadc <nm_spi_write_reg+0xf4>)
 800ca32:	482b      	ldr	r0, [pc, #172]	@ (800cae0 <nm_spi_write_reg+0xf8>)
 800ca34:	f000 fb58 	bl	800d0e8 <iprintf>
 800ca38:	6879      	ldr	r1, [r7, #4]
 800ca3a:	482a      	ldr	r0, [pc, #168]	@ (800cae4 <nm_spi_write_reg+0xfc>)
 800ca3c:	f000 fb54 	bl	800d0e8 <iprintf>
 800ca40:	200d      	movs	r0, #13
 800ca42:	f000 fb63 	bl	800d10c <putchar>
		goto _FAIL_;
 800ca46:	e018      	b.n	800ca7a <nm_spi_write_reg+0x92>
	}

	result = spi_cmd_rsp(cmd);
 800ca48:	7b7b      	ldrb	r3, [r7, #13]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7ff fdae 	bl	800c5ac <spi_cmd_rsp>
 800ca50:	4603      	mov	r3, r0
 800ca52:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800ca54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00d      	beq.n	800ca78 <nm_spi_write_reg+0x90>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
 800ca5c:	f240 2229 	movw	r2, #553	@ 0x229
 800ca60:	491e      	ldr	r1, [pc, #120]	@ (800cadc <nm_spi_write_reg+0xf4>)
 800ca62:	481f      	ldr	r0, [pc, #124]	@ (800cae0 <nm_spi_write_reg+0xf8>)
 800ca64:	f000 fb40 	bl	800d0e8 <iprintf>
 800ca68:	6879      	ldr	r1, [r7, #4]
 800ca6a:	481f      	ldr	r0, [pc, #124]	@ (800cae8 <nm_spi_write_reg+0x100>)
 800ca6c:	f000 fb3c 	bl	800d0e8 <iprintf>
 800ca70:	200d      	movs	r0, #13
 800ca72:	f000 fb4b 	bl	800d10c <putchar>
		goto _FAIL_;
 800ca76:	e000      	b.n	800ca7a <nm_spi_write_reg+0x92>
	}
_FAIL_:
 800ca78:	bf00      	nop
	if(result != N_OK)
 800ca7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d026      	beq.n	800cad0 <nm_spi_write_reg+0xe8>
	{
		nm_bsp_sleep(1);
 800ca82:	2001      	movs	r0, #1
 800ca84:	f7fe fbb0 	bl	800b1e8 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800ca88:	2300      	movs	r3, #0
 800ca8a:	9300      	str	r3, [sp, #0]
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	2200      	movs	r2, #0
 800ca90:	2100      	movs	r1, #0
 800ca92:	20cf      	movs	r0, #207	@ 0xcf
 800ca94:	f7ff fc02 	bl	800c29c <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800ca98:	20cf      	movs	r0, #207	@ 0xcf
 800ca9a:	f7ff fd87 	bl	800c5ac <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %x %x\n",retry,addr,u32data);
 800ca9e:	f240 2232 	movw	r2, #562	@ 0x232
 800caa2:	490e      	ldr	r1, [pc, #56]	@ (800cadc <nm_spi_write_reg+0xf4>)
 800caa4:	480e      	ldr	r0, [pc, #56]	@ (800cae0 <nm_spi_write_reg+0xf8>)
 800caa6:	f000 fb1f 	bl	800d0e8 <iprintf>
 800caaa:	7bf9      	ldrb	r1, [r7, #15]
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	480e      	ldr	r0, [pc, #56]	@ (800caec <nm_spi_write_reg+0x104>)
 800cab2:	f000 fb19 	bl	800d0e8 <iprintf>
 800cab6:	200d      	movs	r0, #13
 800cab8:	f000 fb28 	bl	800d10c <putchar>
		nm_bsp_sleep(1);
 800cabc:	2001      	movs	r0, #1
 800cabe:	f7fe fb93 	bl	800b1e8 <nm_bsp_sleep>
		retry--;
 800cac2:	7bfb      	ldrb	r3, [r7, #15]
 800cac4:	3b01      	subs	r3, #1
 800cac6:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800cac8:	7bfb      	ldrb	r3, [r7, #15]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d000      	beq.n	800cad0 <nm_spi_write_reg+0xe8>
 800cace:	e798      	b.n	800ca02 <nm_spi_write_reg+0x1a>
	}

	return result;
 800cad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	0800ed68 	.word	0x0800ed68
 800cae0:	0800e500 	.word	0x0800e500
 800cae4:	0800e778 	.word	0x0800e778
 800cae8:	0800e7a4 	.word	0x0800e7a4
 800caec:	0800e7dc 	.word	0x0800e7dc

0800caf0 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b088      	sub	sp, #32
 800caf4:	af02      	add	r7, sp, #8
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	4613      	mov	r3, r2
 800cafc:	80fb      	strh	r3, [r7, #6]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800cafe:	230a      	movs	r3, #10
 800cb00:	75bb      	strb	r3, [r7, #22]
	uint8 cmd = CMD_DMA_EXT_WRITE;
 800cb02:	23c7      	movs	r3, #199	@ 0xc7
 800cb04:	757b      	strb	r3, [r7, #21]
_RETRY_:
	/**
		Command
	**/
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
 800cb06:	88fb      	ldrh	r3, [r7, #6]
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d101      	bne.n	800cb10 <nm_spi_write+0x20>
		size = 2;
 800cb0c:	2302      	movs	r3, #2
 800cb0e:	80fb      	strh	r3, [r7, #6]

	result = spi_cmd(cmd, addr, 0, size,0);
 800cb10:	88fb      	ldrh	r3, [r7, #6]
 800cb12:	7d78      	ldrb	r0, [r7, #21]
 800cb14:	2200      	movs	r2, #0
 800cb16:	9200      	str	r2, [sp, #0]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	68f9      	ldr	r1, [r7, #12]
 800cb1c:	f7ff fbbe 	bl	800c29c <spi_cmd>
 800cb20:	4603      	mov	r3, r0
 800cb22:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800cb24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d00d      	beq.n	800cb48 <nm_spi_write+0x58>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
 800cb2c:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 800cb30:	4942      	ldr	r1, [pc, #264]	@ (800cc3c <nm_spi_write+0x14c>)
 800cb32:	4843      	ldr	r0, [pc, #268]	@ (800cc40 <nm_spi_write+0x150>)
 800cb34:	f000 fad8 	bl	800d0e8 <iprintf>
 800cb38:	68f9      	ldr	r1, [r7, #12]
 800cb3a:	4842      	ldr	r0, [pc, #264]	@ (800cc44 <nm_spi_write+0x154>)
 800cb3c:	f000 fad4 	bl	800d0e8 <iprintf>
 800cb40:	200d      	movs	r0, #13
 800cb42:	f000 fae3 	bl	800d10c <putchar>
		goto _FAIL_;
 800cb46:	e047      	b.n	800cbd8 <nm_spi_write+0xe8>
	}

	result = spi_cmd_rsp(cmd);
 800cb48:	7d7b      	ldrb	r3, [r7, #21]
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7ff fd2e 	bl	800c5ac <spi_cmd_rsp>
 800cb50:	4603      	mov	r3, r0
 800cb52:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800cb54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d00d      	beq.n	800cb78 <nm_spi_write+0x88>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
 800cb5c:	f240 2252 	movw	r2, #594	@ 0x252
 800cb60:	4936      	ldr	r1, [pc, #216]	@ (800cc3c <nm_spi_write+0x14c>)
 800cb62:	4837      	ldr	r0, [pc, #220]	@ (800cc40 <nm_spi_write+0x150>)
 800cb64:	f000 fac0 	bl	800d0e8 <iprintf>
 800cb68:	68f9      	ldr	r1, [r7, #12]
 800cb6a:	4837      	ldr	r0, [pc, #220]	@ (800cc48 <nm_spi_write+0x158>)
 800cb6c:	f000 fabc 	bl	800d0e8 <iprintf>
 800cb70:	200d      	movs	r0, #13
 800cb72:	f000 facb 	bl	800d10c <putchar>
		goto _FAIL_;
 800cb76:	e02f      	b.n	800cbd8 <nm_spi_write+0xe8>
	}

	/**
		Data
	**/
	result = spi_data_write(buf, size);
 800cb78:	88fb      	ldrh	r3, [r7, #6]
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	68b8      	ldr	r0, [r7, #8]
 800cb7e:	f7ff fe91 	bl	800c8a4 <spi_data_write>
 800cb82:	4603      	mov	r3, r0
 800cb84:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800cb86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d00c      	beq.n	800cba8 <nm_spi_write+0xb8>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
 800cb8e:	f240 225b 	movw	r2, #603	@ 0x25b
 800cb92:	492a      	ldr	r1, [pc, #168]	@ (800cc3c <nm_spi_write+0x14c>)
 800cb94:	482a      	ldr	r0, [pc, #168]	@ (800cc40 <nm_spi_write+0x150>)
 800cb96:	f000 faa7 	bl	800d0e8 <iprintf>
 800cb9a:	482c      	ldr	r0, [pc, #176]	@ (800cc4c <nm_spi_write+0x15c>)
 800cb9c:	f000 fb14 	bl	800d1c8 <puts>
 800cba0:	200d      	movs	r0, #13
 800cba2:	f000 fab3 	bl	800d10c <putchar>
		goto _FAIL_;
 800cba6:	e017      	b.n	800cbd8 <nm_spi_write+0xe8>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
 800cba8:	7d7b      	ldrb	r3, [r7, #21]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7ff fc9e 	bl	800c4ec <spi_data_rsp>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800cbb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d00c      	beq.n	800cbd6 <nm_spi_write+0xe6>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
 800cbbc:	f240 2263 	movw	r2, #611	@ 0x263
 800cbc0:	491e      	ldr	r1, [pc, #120]	@ (800cc3c <nm_spi_write+0x14c>)
 800cbc2:	481f      	ldr	r0, [pc, #124]	@ (800cc40 <nm_spi_write+0x150>)
 800cbc4:	f000 fa90 	bl	800d0e8 <iprintf>
 800cbc8:	4820      	ldr	r0, [pc, #128]	@ (800cc4c <nm_spi_write+0x15c>)
 800cbca:	f000 fafd 	bl	800d1c8 <puts>
 800cbce:	200d      	movs	r0, #13
 800cbd0:	f000 fa9c 	bl	800d10c <putchar>
		goto _FAIL_;
 800cbd4:	e000      	b.n	800cbd8 <nm_spi_write+0xe8>
	}
	
_FAIL_:
 800cbd6:	bf00      	nop
	if(result != N_OK)
 800cbd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d026      	beq.n	800cc2e <nm_spi_write+0x13e>
	{
		nm_bsp_sleep(1);
 800cbe0:	2001      	movs	r0, #1
 800cbe2:	f7fe fb01 	bl	800b1e8 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	9300      	str	r3, [sp, #0]
 800cbea:	2300      	movs	r3, #0
 800cbec:	2200      	movs	r2, #0
 800cbee:	2100      	movs	r1, #0
 800cbf0:	20cf      	movs	r0, #207	@ 0xcf
 800cbf2:	f7ff fb53 	bl	800c29c <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800cbf6:	20cf      	movs	r0, #207	@ 0xcf
 800cbf8:	f7ff fcd8 	bl	800c5ac <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %x %d\n",retry,addr,size);
 800cbfc:	f240 226d 	movw	r2, #621	@ 0x26d
 800cc00:	490e      	ldr	r1, [pc, #56]	@ (800cc3c <nm_spi_write+0x14c>)
 800cc02:	480f      	ldr	r0, [pc, #60]	@ (800cc40 <nm_spi_write+0x150>)
 800cc04:	f000 fa70 	bl	800d0e8 <iprintf>
 800cc08:	7db9      	ldrb	r1, [r7, #22]
 800cc0a:	88fb      	ldrh	r3, [r7, #6]
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	4810      	ldr	r0, [pc, #64]	@ (800cc50 <nm_spi_write+0x160>)
 800cc10:	f000 fa6a 	bl	800d0e8 <iprintf>
 800cc14:	200d      	movs	r0, #13
 800cc16:	f000 fa79 	bl	800d10c <putchar>
		nm_bsp_sleep(1);
 800cc1a:	2001      	movs	r0, #1
 800cc1c:	f7fe fae4 	bl	800b1e8 <nm_bsp_sleep>
		retry--;
 800cc20:	7dbb      	ldrb	r3, [r7, #22]
 800cc22:	3b01      	subs	r3, #1
 800cc24:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800cc26:	7dbb      	ldrb	r3, [r7, #22]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d000      	beq.n	800cc2e <nm_spi_write+0x13e>
 800cc2c:	e76b      	b.n	800cb06 <nm_spi_write+0x16>
	}


	return result;
 800cc2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3718      	adds	r7, #24
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	0800ed7c 	.word	0x0800ed7c
 800cc40:	0800e500 	.word	0x0800e500
 800cc44:	0800e7f8 	.word	0x0800e7f8
 800cc48:	0800e828 	.word	0x0800e828
 800cc4c:	0800e860 	.word	0x0800e860
 800cc50:	0800e888 	.word	0x0800e888

0800cc54 <nm_spi_read_reg_with_ret>:
 *  @param[out] pu32RetVal
 *                  Pointer to u32 variable used to return the read value
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_read_reg_with_ret(uint32 addr, uint32 *u32data)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af02      	add	r7, sp, #8
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800cc5e:	230a      	movs	r3, #10
 800cc60:	73fb      	strb	r3, [r7, #15]
	volatile sint8 result = N_OK;
 800cc62:	2300      	movs	r3, #0
 800cc64:	733b      	strb	r3, [r7, #12]
	uint8 cmd = CMD_SINGLE_READ;
 800cc66:	23ca      	movs	r3, #202	@ 0xca
 800cc68:	73bb      	strb	r3, [r7, #14]
	uint8 tmp[4];
	uint8 clockless = 0;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	737b      	strb	r3, [r7, #13]

_RETRY_:

	if (addr <= 0xff)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2bff      	cmp	r3, #255	@ 0xff
 800cc72:	d803      	bhi.n	800cc7c <nm_spi_read_reg_with_ret+0x28>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
 800cc74:	23c4      	movs	r3, #196	@ 0xc4
 800cc76:	73bb      	strb	r3, [r7, #14]
		clockless = 1;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	737b      	strb	r3, [r7, #13]
	}

	result = spi_cmd(cmd, addr, 0, 4, clockless);
 800cc7c:	7bb8      	ldrb	r0, [r7, #14]
 800cc7e:	7b7b      	ldrb	r3, [r7, #13]
 800cc80:	9300      	str	r3, [sp, #0]
 800cc82:	2304      	movs	r3, #4
 800cc84:	2200      	movs	r2, #0
 800cc86:	6879      	ldr	r1, [r7, #4]
 800cc88:	f7ff fb08 	bl	800c29c <spi_cmd>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800cc90:	7b3b      	ldrb	r3, [r7, #12]
 800cc92:	b25b      	sxtb	r3, r3
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d00d      	beq.n	800ccb4 <nm_spi_read_reg_with_ret+0x60>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
 800cc98:	f240 2295 	movw	r2, #661	@ 0x295
 800cc9c:	493d      	ldr	r1, [pc, #244]	@ (800cd94 <nm_spi_read_reg_with_ret+0x140>)
 800cc9e:	483e      	ldr	r0, [pc, #248]	@ (800cd98 <nm_spi_read_reg_with_ret+0x144>)
 800cca0:	f000 fa22 	bl	800d0e8 <iprintf>
 800cca4:	6879      	ldr	r1, [r7, #4]
 800cca6:	483d      	ldr	r0, [pc, #244]	@ (800cd9c <nm_spi_read_reg_with_ret+0x148>)
 800cca8:	f000 fa1e 	bl	800d0e8 <iprintf>
 800ccac:	200d      	movs	r0, #13
 800ccae:	f000 fa2d 	bl	800d10c <putchar>
		goto _FAIL_;
 800ccb2:	e03e      	b.n	800cd32 <nm_spi_read_reg_with_ret+0xde>
	}

	result = spi_cmd_rsp(cmd);
 800ccb4:	7bbb      	ldrb	r3, [r7, #14]
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7ff fc78 	bl	800c5ac <spi_cmd_rsp>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800ccc0:	7b3b      	ldrb	r3, [r7, #12]
 800ccc2:	b25b      	sxtb	r3, r3
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d00d      	beq.n	800cce4 <nm_spi_read_reg_with_ret+0x90>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
 800ccc8:	f240 229b 	movw	r2, #667	@ 0x29b
 800cccc:	4931      	ldr	r1, [pc, #196]	@ (800cd94 <nm_spi_read_reg_with_ret+0x140>)
 800ccce:	4832      	ldr	r0, [pc, #200]	@ (800cd98 <nm_spi_read_reg_with_ret+0x144>)
 800ccd0:	f000 fa0a 	bl	800d0e8 <iprintf>
 800ccd4:	6879      	ldr	r1, [r7, #4]
 800ccd6:	4832      	ldr	r0, [pc, #200]	@ (800cda0 <nm_spi_read_reg_with_ret+0x14c>)
 800ccd8:	f000 fa06 	bl	800d0e8 <iprintf>
 800ccdc:	200d      	movs	r0, #13
 800ccde:	f000 fa15 	bl	800d10c <putchar>
		goto _FAIL_;
 800cce2:	e026      	b.n	800cd32 <nm_spi_read_reg_with_ret+0xde>
	}

	/* to avoid endianness issues */
	result = spi_data_read(&tmp[0], 4, clockless);
 800cce4:	7b7a      	ldrb	r2, [r7, #13]
 800cce6:	f107 0308 	add.w	r3, r7, #8
 800ccea:	2104      	movs	r1, #4
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff fd23 	bl	800c738 <spi_data_read>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800ccf6:	7b3b      	ldrb	r3, [r7, #12]
 800ccf8:	b25b      	sxtb	r3, r3
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d00c      	beq.n	800cd18 <nm_spi_read_reg_with_ret+0xc4>
		M2M_ERR("[nmi spi]: Failed data read...\n");
 800ccfe:	f240 22a2 	movw	r2, #674	@ 0x2a2
 800cd02:	4924      	ldr	r1, [pc, #144]	@ (800cd94 <nm_spi_read_reg_with_ret+0x140>)
 800cd04:	4824      	ldr	r0, [pc, #144]	@ (800cd98 <nm_spi_read_reg_with_ret+0x144>)
 800cd06:	f000 f9ef 	bl	800d0e8 <iprintf>
 800cd0a:	4826      	ldr	r0, [pc, #152]	@ (800cda4 <nm_spi_read_reg_with_ret+0x150>)
 800cd0c:	f000 fa5c 	bl	800d1c8 <puts>
 800cd10:	200d      	movs	r0, #13
 800cd12:	f000 f9fb 	bl	800d10c <putchar>
		goto _FAIL_;
 800cd16:	e00c      	b.n	800cd32 <nm_spi_read_reg_with_ret+0xde>
	}

	*u32data = tmp[0] |
 800cd18:	7a3b      	ldrb	r3, [r7, #8]
 800cd1a:	461a      	mov	r2, r3
		((uint32)tmp[1] << 8) |
 800cd1c:	7a7b      	ldrb	r3, [r7, #9]
 800cd1e:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
 800cd20:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
 800cd22:	7abb      	ldrb	r3, [r7, #10]
 800cd24:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
 800cd26:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
 800cd28:	7afb      	ldrb	r3, [r7, #11]
 800cd2a:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
 800cd2c:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
 800cd32:	7b3b      	ldrb	r3, [r7, #12]
 800cd34:	b25b      	sxtb	r3, r3
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d026      	beq.n	800cd88 <nm_spi_read_reg_with_ret+0x134>
	{
		nm_bsp_sleep(1);
 800cd3a:	2001      	movs	r0, #1
 800cd3c:	f7fe fa54 	bl	800b1e8 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800cd40:	2300      	movs	r3, #0
 800cd42:	9300      	str	r3, [sp, #0]
 800cd44:	2300      	movs	r3, #0
 800cd46:	2200      	movs	r2, #0
 800cd48:	2100      	movs	r1, #0
 800cd4a:	20cf      	movs	r0, #207	@ 0xcf
 800cd4c:	f7ff faa6 	bl	800c29c <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800cd50:	20cf      	movs	r0, #207	@ 0xcf
 800cd52:	f7ff fc2b 	bl	800c5ac <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
 800cd56:	f240 22b1 	movw	r2, #689	@ 0x2b1
 800cd5a:	490e      	ldr	r1, [pc, #56]	@ (800cd94 <nm_spi_read_reg_with_ret+0x140>)
 800cd5c:	480e      	ldr	r0, [pc, #56]	@ (800cd98 <nm_spi_read_reg_with_ret+0x144>)
 800cd5e:	f000 f9c3 	bl	800d0e8 <iprintf>
 800cd62:	7bfb      	ldrb	r3, [r7, #15]
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	4619      	mov	r1, r3
 800cd68:	480f      	ldr	r0, [pc, #60]	@ (800cda8 <nm_spi_read_reg_with_ret+0x154>)
 800cd6a:	f000 f9bd 	bl	800d0e8 <iprintf>
 800cd6e:	200d      	movs	r0, #13
 800cd70:	f000 f9cc 	bl	800d10c <putchar>
		nm_bsp_sleep(1);
 800cd74:	2001      	movs	r0, #1
 800cd76:	f7fe fa37 	bl	800b1e8 <nm_bsp_sleep>
		retry--;
 800cd7a:	7bfb      	ldrb	r3, [r7, #15]
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800cd80:	7bfb      	ldrb	r3, [r7, #15]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d000      	beq.n	800cd88 <nm_spi_read_reg_with_ret+0x134>
 800cd86:	e772      	b.n	800cc6e <nm_spi_read_reg_with_ret+0x1a>
	}
		
	return result;
 800cd88:	7b3b      	ldrb	r3, [r7, #12]
 800cd8a:	b25b      	sxtb	r3, r3
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3710      	adds	r7, #16
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	0800ed8c 	.word	0x0800ed8c
 800cd98:	0800e500 	.word	0x0800e500
 800cd9c:	0800e8a4 	.word	0x0800e8a4
 800cda0:	0800e8d0 	.word	0x0800e8d0
 800cda4:	0800e904 	.word	0x0800e904
 800cda8:	0800e924 	.word	0x0800e924

0800cdac <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b086      	sub	sp, #24
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 800cdba:	88fb      	ldrh	r3, [r7, #6]
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	68b9      	ldr	r1, [r7, #8]
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f7ff fe95 	bl	800caf0 <nm_spi_write>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800cdca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d102      	bne.n	800cdd8 <nm_spi_write_block+0x2c>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	75fb      	strb	r3, [r7, #23]
 800cdd6:	e001      	b.n	800cddc <nm_spi_write_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800cdd8:	23fa      	movs	r3, #250	@ 0xfa
 800cdda:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800cddc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3718      	adds	r7, #24
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <malloc>:
 800cde8:	4b02      	ldr	r3, [pc, #8]	@ (800cdf4 <malloc+0xc>)
 800cdea:	4601      	mov	r1, r0
 800cdec:	6818      	ldr	r0, [r3, #0]
 800cdee:	f000 b82d 	b.w	800ce4c <_malloc_r>
 800cdf2:	bf00      	nop
 800cdf4:	20000020 	.word	0x20000020

0800cdf8 <free>:
 800cdf8:	4b02      	ldr	r3, [pc, #8]	@ (800ce04 <free+0xc>)
 800cdfa:	4601      	mov	r1, r0
 800cdfc:	6818      	ldr	r0, [r3, #0]
 800cdfe:	f000 bb4f 	b.w	800d4a0 <_free_r>
 800ce02:	bf00      	nop
 800ce04:	20000020 	.word	0x20000020

0800ce08 <sbrk_aligned>:
 800ce08:	b570      	push	{r4, r5, r6, lr}
 800ce0a:	4e0f      	ldr	r6, [pc, #60]	@ (800ce48 <sbrk_aligned+0x40>)
 800ce0c:	460c      	mov	r4, r1
 800ce0e:	4605      	mov	r5, r0
 800ce10:	6831      	ldr	r1, [r6, #0]
 800ce12:	b911      	cbnz	r1, 800ce1a <sbrk_aligned+0x12>
 800ce14:	f000 faf4 	bl	800d400 <_sbrk_r>
 800ce18:	6030      	str	r0, [r6, #0]
 800ce1a:	4621      	mov	r1, r4
 800ce1c:	4628      	mov	r0, r5
 800ce1e:	f000 faef 	bl	800d400 <_sbrk_r>
 800ce22:	1c43      	adds	r3, r0, #1
 800ce24:	d103      	bne.n	800ce2e <sbrk_aligned+0x26>
 800ce26:	f04f 34ff 	mov.w	r4, #4294967295
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	bd70      	pop	{r4, r5, r6, pc}
 800ce2e:	1cc4      	adds	r4, r0, #3
 800ce30:	f024 0403 	bic.w	r4, r4, #3
 800ce34:	42a0      	cmp	r0, r4
 800ce36:	d0f8      	beq.n	800ce2a <sbrk_aligned+0x22>
 800ce38:	1a21      	subs	r1, r4, r0
 800ce3a:	4628      	mov	r0, r5
 800ce3c:	f000 fae0 	bl	800d400 <_sbrk_r>
 800ce40:	3001      	adds	r0, #1
 800ce42:	d1f2      	bne.n	800ce2a <sbrk_aligned+0x22>
 800ce44:	e7ef      	b.n	800ce26 <sbrk_aligned+0x1e>
 800ce46:	bf00      	nop
 800ce48:	200006a4 	.word	0x200006a4

0800ce4c <_malloc_r>:
 800ce4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce50:	1ccd      	adds	r5, r1, #3
 800ce52:	4606      	mov	r6, r0
 800ce54:	f025 0503 	bic.w	r5, r5, #3
 800ce58:	3508      	adds	r5, #8
 800ce5a:	2d0c      	cmp	r5, #12
 800ce5c:	bf38      	it	cc
 800ce5e:	250c      	movcc	r5, #12
 800ce60:	2d00      	cmp	r5, #0
 800ce62:	db01      	blt.n	800ce68 <_malloc_r+0x1c>
 800ce64:	42a9      	cmp	r1, r5
 800ce66:	d904      	bls.n	800ce72 <_malloc_r+0x26>
 800ce68:	230c      	movs	r3, #12
 800ce6a:	6033      	str	r3, [r6, #0]
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cf48 <_malloc_r+0xfc>
 800ce76:	f000 f869 	bl	800cf4c <__malloc_lock>
 800ce7a:	f8d8 3000 	ldr.w	r3, [r8]
 800ce7e:	461c      	mov	r4, r3
 800ce80:	bb44      	cbnz	r4, 800ced4 <_malloc_r+0x88>
 800ce82:	4629      	mov	r1, r5
 800ce84:	4630      	mov	r0, r6
 800ce86:	f7ff ffbf 	bl	800ce08 <sbrk_aligned>
 800ce8a:	1c43      	adds	r3, r0, #1
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	d158      	bne.n	800cf42 <_malloc_r+0xf6>
 800ce90:	f8d8 4000 	ldr.w	r4, [r8]
 800ce94:	4627      	mov	r7, r4
 800ce96:	2f00      	cmp	r7, #0
 800ce98:	d143      	bne.n	800cf22 <_malloc_r+0xd6>
 800ce9a:	2c00      	cmp	r4, #0
 800ce9c:	d04b      	beq.n	800cf36 <_malloc_r+0xea>
 800ce9e:	6823      	ldr	r3, [r4, #0]
 800cea0:	4639      	mov	r1, r7
 800cea2:	4630      	mov	r0, r6
 800cea4:	eb04 0903 	add.w	r9, r4, r3
 800cea8:	f000 faaa 	bl	800d400 <_sbrk_r>
 800ceac:	4581      	cmp	r9, r0
 800ceae:	d142      	bne.n	800cf36 <_malloc_r+0xea>
 800ceb0:	6821      	ldr	r1, [r4, #0]
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	1a6d      	subs	r5, r5, r1
 800ceb6:	4629      	mov	r1, r5
 800ceb8:	f7ff ffa6 	bl	800ce08 <sbrk_aligned>
 800cebc:	3001      	adds	r0, #1
 800cebe:	d03a      	beq.n	800cf36 <_malloc_r+0xea>
 800cec0:	6823      	ldr	r3, [r4, #0]
 800cec2:	442b      	add	r3, r5
 800cec4:	6023      	str	r3, [r4, #0]
 800cec6:	f8d8 3000 	ldr.w	r3, [r8]
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	bb62      	cbnz	r2, 800cf28 <_malloc_r+0xdc>
 800cece:	f8c8 7000 	str.w	r7, [r8]
 800ced2:	e00f      	b.n	800cef4 <_malloc_r+0xa8>
 800ced4:	6822      	ldr	r2, [r4, #0]
 800ced6:	1b52      	subs	r2, r2, r5
 800ced8:	d420      	bmi.n	800cf1c <_malloc_r+0xd0>
 800ceda:	2a0b      	cmp	r2, #11
 800cedc:	d917      	bls.n	800cf0e <_malloc_r+0xc2>
 800cede:	1961      	adds	r1, r4, r5
 800cee0:	42a3      	cmp	r3, r4
 800cee2:	6025      	str	r5, [r4, #0]
 800cee4:	bf18      	it	ne
 800cee6:	6059      	strne	r1, [r3, #4]
 800cee8:	6863      	ldr	r3, [r4, #4]
 800ceea:	bf08      	it	eq
 800ceec:	f8c8 1000 	streq.w	r1, [r8]
 800cef0:	5162      	str	r2, [r4, r5]
 800cef2:	604b      	str	r3, [r1, #4]
 800cef4:	4630      	mov	r0, r6
 800cef6:	f000 f82f 	bl	800cf58 <__malloc_unlock>
 800cefa:	f104 000b 	add.w	r0, r4, #11
 800cefe:	1d23      	adds	r3, r4, #4
 800cf00:	f020 0007 	bic.w	r0, r0, #7
 800cf04:	1ac2      	subs	r2, r0, r3
 800cf06:	bf1c      	itt	ne
 800cf08:	1a1b      	subne	r3, r3, r0
 800cf0a:	50a3      	strne	r3, [r4, r2]
 800cf0c:	e7af      	b.n	800ce6e <_malloc_r+0x22>
 800cf0e:	6862      	ldr	r2, [r4, #4]
 800cf10:	42a3      	cmp	r3, r4
 800cf12:	bf0c      	ite	eq
 800cf14:	f8c8 2000 	streq.w	r2, [r8]
 800cf18:	605a      	strne	r2, [r3, #4]
 800cf1a:	e7eb      	b.n	800cef4 <_malloc_r+0xa8>
 800cf1c:	4623      	mov	r3, r4
 800cf1e:	6864      	ldr	r4, [r4, #4]
 800cf20:	e7ae      	b.n	800ce80 <_malloc_r+0x34>
 800cf22:	463c      	mov	r4, r7
 800cf24:	687f      	ldr	r7, [r7, #4]
 800cf26:	e7b6      	b.n	800ce96 <_malloc_r+0x4a>
 800cf28:	461a      	mov	r2, r3
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	42a3      	cmp	r3, r4
 800cf2e:	d1fb      	bne.n	800cf28 <_malloc_r+0xdc>
 800cf30:	2300      	movs	r3, #0
 800cf32:	6053      	str	r3, [r2, #4]
 800cf34:	e7de      	b.n	800cef4 <_malloc_r+0xa8>
 800cf36:	230c      	movs	r3, #12
 800cf38:	4630      	mov	r0, r6
 800cf3a:	6033      	str	r3, [r6, #0]
 800cf3c:	f000 f80c 	bl	800cf58 <__malloc_unlock>
 800cf40:	e794      	b.n	800ce6c <_malloc_r+0x20>
 800cf42:	6005      	str	r5, [r0, #0]
 800cf44:	e7d6      	b.n	800cef4 <_malloc_r+0xa8>
 800cf46:	bf00      	nop
 800cf48:	200006a8 	.word	0x200006a8

0800cf4c <__malloc_lock>:
 800cf4c:	4801      	ldr	r0, [pc, #4]	@ (800cf54 <__malloc_lock+0x8>)
 800cf4e:	f000 baa4 	b.w	800d49a <__retarget_lock_acquire_recursive>
 800cf52:	bf00      	nop
 800cf54:	200007ec 	.word	0x200007ec

0800cf58 <__malloc_unlock>:
 800cf58:	4801      	ldr	r0, [pc, #4]	@ (800cf60 <__malloc_unlock+0x8>)
 800cf5a:	f000 ba9f 	b.w	800d49c <__retarget_lock_release_recursive>
 800cf5e:	bf00      	nop
 800cf60:	200007ec 	.word	0x200007ec

0800cf64 <std>:
 800cf64:	2300      	movs	r3, #0
 800cf66:	b510      	push	{r4, lr}
 800cf68:	4604      	mov	r4, r0
 800cf6a:	6083      	str	r3, [r0, #8]
 800cf6c:	8181      	strh	r1, [r0, #12]
 800cf6e:	4619      	mov	r1, r3
 800cf70:	6643      	str	r3, [r0, #100]	@ 0x64
 800cf72:	81c2      	strh	r2, [r0, #14]
 800cf74:	2208      	movs	r2, #8
 800cf76:	6183      	str	r3, [r0, #24]
 800cf78:	e9c0 3300 	strd	r3, r3, [r0]
 800cf7c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf80:	305c      	adds	r0, #92	@ 0x5c
 800cf82:	f000 fa01 	bl	800d388 <memset>
 800cf86:	4b0d      	ldr	r3, [pc, #52]	@ (800cfbc <std+0x58>)
 800cf88:	6224      	str	r4, [r4, #32]
 800cf8a:	6263      	str	r3, [r4, #36]	@ 0x24
 800cf8c:	4b0c      	ldr	r3, [pc, #48]	@ (800cfc0 <std+0x5c>)
 800cf8e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cf90:	4b0c      	ldr	r3, [pc, #48]	@ (800cfc4 <std+0x60>)
 800cf92:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cf94:	4b0c      	ldr	r3, [pc, #48]	@ (800cfc8 <std+0x64>)
 800cf96:	6323      	str	r3, [r4, #48]	@ 0x30
 800cf98:	4b0c      	ldr	r3, [pc, #48]	@ (800cfcc <std+0x68>)
 800cf9a:	429c      	cmp	r4, r3
 800cf9c:	d006      	beq.n	800cfac <std+0x48>
 800cf9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cfa2:	4294      	cmp	r4, r2
 800cfa4:	d002      	beq.n	800cfac <std+0x48>
 800cfa6:	33d0      	adds	r3, #208	@ 0xd0
 800cfa8:	429c      	cmp	r4, r3
 800cfaa:	d105      	bne.n	800cfb8 <std+0x54>
 800cfac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cfb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfb4:	f000 ba70 	b.w	800d498 <__retarget_lock_init_recursive>
 800cfb8:	bd10      	pop	{r4, pc}
 800cfba:	bf00      	nop
 800cfbc:	0800d1d9 	.word	0x0800d1d9
 800cfc0:	0800d1fb 	.word	0x0800d1fb
 800cfc4:	0800d233 	.word	0x0800d233
 800cfc8:	0800d257 	.word	0x0800d257
 800cfcc:	200006ac 	.word	0x200006ac

0800cfd0 <stdio_exit_handler>:
 800cfd0:	4a02      	ldr	r2, [pc, #8]	@ (800cfdc <stdio_exit_handler+0xc>)
 800cfd2:	4903      	ldr	r1, [pc, #12]	@ (800cfe0 <stdio_exit_handler+0x10>)
 800cfd4:	4803      	ldr	r0, [pc, #12]	@ (800cfe4 <stdio_exit_handler+0x14>)
 800cfd6:	f000 b869 	b.w	800d0ac <_fwalk_sglue>
 800cfda:	bf00      	nop
 800cfdc:	20000014 	.word	0x20000014
 800cfe0:	0800dbe5 	.word	0x0800dbe5
 800cfe4:	20000024 	.word	0x20000024

0800cfe8 <cleanup_stdio>:
 800cfe8:	6841      	ldr	r1, [r0, #4]
 800cfea:	4b0c      	ldr	r3, [pc, #48]	@ (800d01c <cleanup_stdio+0x34>)
 800cfec:	4299      	cmp	r1, r3
 800cfee:	b510      	push	{r4, lr}
 800cff0:	4604      	mov	r4, r0
 800cff2:	d001      	beq.n	800cff8 <cleanup_stdio+0x10>
 800cff4:	f000 fdf6 	bl	800dbe4 <_fflush_r>
 800cff8:	68a1      	ldr	r1, [r4, #8]
 800cffa:	4b09      	ldr	r3, [pc, #36]	@ (800d020 <cleanup_stdio+0x38>)
 800cffc:	4299      	cmp	r1, r3
 800cffe:	d002      	beq.n	800d006 <cleanup_stdio+0x1e>
 800d000:	4620      	mov	r0, r4
 800d002:	f000 fdef 	bl	800dbe4 <_fflush_r>
 800d006:	68e1      	ldr	r1, [r4, #12]
 800d008:	4b06      	ldr	r3, [pc, #24]	@ (800d024 <cleanup_stdio+0x3c>)
 800d00a:	4299      	cmp	r1, r3
 800d00c:	d004      	beq.n	800d018 <cleanup_stdio+0x30>
 800d00e:	4620      	mov	r0, r4
 800d010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d014:	f000 bde6 	b.w	800dbe4 <_fflush_r>
 800d018:	bd10      	pop	{r4, pc}
 800d01a:	bf00      	nop
 800d01c:	200006ac 	.word	0x200006ac
 800d020:	20000714 	.word	0x20000714
 800d024:	2000077c 	.word	0x2000077c

0800d028 <global_stdio_init.part.0>:
 800d028:	b510      	push	{r4, lr}
 800d02a:	4b0b      	ldr	r3, [pc, #44]	@ (800d058 <global_stdio_init.part.0+0x30>)
 800d02c:	2104      	movs	r1, #4
 800d02e:	4c0b      	ldr	r4, [pc, #44]	@ (800d05c <global_stdio_init.part.0+0x34>)
 800d030:	4a0b      	ldr	r2, [pc, #44]	@ (800d060 <global_stdio_init.part.0+0x38>)
 800d032:	4620      	mov	r0, r4
 800d034:	601a      	str	r2, [r3, #0]
 800d036:	2200      	movs	r2, #0
 800d038:	f7ff ff94 	bl	800cf64 <std>
 800d03c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d040:	2201      	movs	r2, #1
 800d042:	2109      	movs	r1, #9
 800d044:	f7ff ff8e 	bl	800cf64 <std>
 800d048:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d04c:	2202      	movs	r2, #2
 800d04e:	2112      	movs	r1, #18
 800d050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d054:	f7ff bf86 	b.w	800cf64 <std>
 800d058:	200007e4 	.word	0x200007e4
 800d05c:	200006ac 	.word	0x200006ac
 800d060:	0800cfd1 	.word	0x0800cfd1

0800d064 <__sfp_lock_acquire>:
 800d064:	4801      	ldr	r0, [pc, #4]	@ (800d06c <__sfp_lock_acquire+0x8>)
 800d066:	f000 ba18 	b.w	800d49a <__retarget_lock_acquire_recursive>
 800d06a:	bf00      	nop
 800d06c:	200007ed 	.word	0x200007ed

0800d070 <__sfp_lock_release>:
 800d070:	4801      	ldr	r0, [pc, #4]	@ (800d078 <__sfp_lock_release+0x8>)
 800d072:	f000 ba13 	b.w	800d49c <__retarget_lock_release_recursive>
 800d076:	bf00      	nop
 800d078:	200007ed 	.word	0x200007ed

0800d07c <__sinit>:
 800d07c:	b510      	push	{r4, lr}
 800d07e:	4604      	mov	r4, r0
 800d080:	f7ff fff0 	bl	800d064 <__sfp_lock_acquire>
 800d084:	6a23      	ldr	r3, [r4, #32]
 800d086:	b11b      	cbz	r3, 800d090 <__sinit+0x14>
 800d088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d08c:	f7ff bff0 	b.w	800d070 <__sfp_lock_release>
 800d090:	4b04      	ldr	r3, [pc, #16]	@ (800d0a4 <__sinit+0x28>)
 800d092:	6223      	str	r3, [r4, #32]
 800d094:	4b04      	ldr	r3, [pc, #16]	@ (800d0a8 <__sinit+0x2c>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d1f5      	bne.n	800d088 <__sinit+0xc>
 800d09c:	f7ff ffc4 	bl	800d028 <global_stdio_init.part.0>
 800d0a0:	e7f2      	b.n	800d088 <__sinit+0xc>
 800d0a2:	bf00      	nop
 800d0a4:	0800cfe9 	.word	0x0800cfe9
 800d0a8:	200007e4 	.word	0x200007e4

0800d0ac <_fwalk_sglue>:
 800d0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0b0:	4607      	mov	r7, r0
 800d0b2:	4688      	mov	r8, r1
 800d0b4:	4614      	mov	r4, r2
 800d0b6:	2600      	movs	r6, #0
 800d0b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0bc:	f1b9 0901 	subs.w	r9, r9, #1
 800d0c0:	d505      	bpl.n	800d0ce <_fwalk_sglue+0x22>
 800d0c2:	6824      	ldr	r4, [r4, #0]
 800d0c4:	2c00      	cmp	r4, #0
 800d0c6:	d1f7      	bne.n	800d0b8 <_fwalk_sglue+0xc>
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ce:	89ab      	ldrh	r3, [r5, #12]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d907      	bls.n	800d0e4 <_fwalk_sglue+0x38>
 800d0d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0d8:	3301      	adds	r3, #1
 800d0da:	d003      	beq.n	800d0e4 <_fwalk_sglue+0x38>
 800d0dc:	4629      	mov	r1, r5
 800d0de:	4638      	mov	r0, r7
 800d0e0:	47c0      	blx	r8
 800d0e2:	4306      	orrs	r6, r0
 800d0e4:	3568      	adds	r5, #104	@ 0x68
 800d0e6:	e7e9      	b.n	800d0bc <_fwalk_sglue+0x10>

0800d0e8 <iprintf>:
 800d0e8:	b40f      	push	{r0, r1, r2, r3}
 800d0ea:	b507      	push	{r0, r1, r2, lr}
 800d0ec:	4906      	ldr	r1, [pc, #24]	@ (800d108 <iprintf+0x20>)
 800d0ee:	ab04      	add	r3, sp, #16
 800d0f0:	6808      	ldr	r0, [r1, #0]
 800d0f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0f6:	6881      	ldr	r1, [r0, #8]
 800d0f8:	9301      	str	r3, [sp, #4]
 800d0fa:	f000 fa45 	bl	800d588 <_vfiprintf_r>
 800d0fe:	b003      	add	sp, #12
 800d100:	f85d eb04 	ldr.w	lr, [sp], #4
 800d104:	b004      	add	sp, #16
 800d106:	4770      	bx	lr
 800d108:	20000020 	.word	0x20000020

0800d10c <putchar>:
 800d10c:	4b02      	ldr	r3, [pc, #8]	@ (800d118 <putchar+0xc>)
 800d10e:	4601      	mov	r1, r0
 800d110:	6818      	ldr	r0, [r3, #0]
 800d112:	6882      	ldr	r2, [r0, #8]
 800d114:	f000 bdef 	b.w	800dcf6 <_putc_r>
 800d118:	20000020 	.word	0x20000020

0800d11c <_puts_r>:
 800d11c:	6a03      	ldr	r3, [r0, #32]
 800d11e:	b570      	push	{r4, r5, r6, lr}
 800d120:	4605      	mov	r5, r0
 800d122:	460e      	mov	r6, r1
 800d124:	6884      	ldr	r4, [r0, #8]
 800d126:	b90b      	cbnz	r3, 800d12c <_puts_r+0x10>
 800d128:	f7ff ffa8 	bl	800d07c <__sinit>
 800d12c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d12e:	07db      	lsls	r3, r3, #31
 800d130:	d405      	bmi.n	800d13e <_puts_r+0x22>
 800d132:	89a3      	ldrh	r3, [r4, #12]
 800d134:	0598      	lsls	r0, r3, #22
 800d136:	d402      	bmi.n	800d13e <_puts_r+0x22>
 800d138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d13a:	f000 f9ae 	bl	800d49a <__retarget_lock_acquire_recursive>
 800d13e:	89a3      	ldrh	r3, [r4, #12]
 800d140:	0719      	lsls	r1, r3, #28
 800d142:	d502      	bpl.n	800d14a <_puts_r+0x2e>
 800d144:	6923      	ldr	r3, [r4, #16]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d135      	bne.n	800d1b6 <_puts_r+0x9a>
 800d14a:	4621      	mov	r1, r4
 800d14c:	4628      	mov	r0, r5
 800d14e:	f000 f8c5 	bl	800d2dc <__swsetup_r>
 800d152:	b380      	cbz	r0, 800d1b6 <_puts_r+0x9a>
 800d154:	f04f 35ff 	mov.w	r5, #4294967295
 800d158:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d15a:	07da      	lsls	r2, r3, #31
 800d15c:	d405      	bmi.n	800d16a <_puts_r+0x4e>
 800d15e:	89a3      	ldrh	r3, [r4, #12]
 800d160:	059b      	lsls	r3, r3, #22
 800d162:	d402      	bmi.n	800d16a <_puts_r+0x4e>
 800d164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d166:	f000 f999 	bl	800d49c <__retarget_lock_release_recursive>
 800d16a:	4628      	mov	r0, r5
 800d16c:	bd70      	pop	{r4, r5, r6, pc}
 800d16e:	2b00      	cmp	r3, #0
 800d170:	da04      	bge.n	800d17c <_puts_r+0x60>
 800d172:	69a2      	ldr	r2, [r4, #24]
 800d174:	429a      	cmp	r2, r3
 800d176:	dc17      	bgt.n	800d1a8 <_puts_r+0x8c>
 800d178:	290a      	cmp	r1, #10
 800d17a:	d015      	beq.n	800d1a8 <_puts_r+0x8c>
 800d17c:	6823      	ldr	r3, [r4, #0]
 800d17e:	1c5a      	adds	r2, r3, #1
 800d180:	6022      	str	r2, [r4, #0]
 800d182:	7019      	strb	r1, [r3, #0]
 800d184:	68a3      	ldr	r3, [r4, #8]
 800d186:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d18a:	3b01      	subs	r3, #1
 800d18c:	60a3      	str	r3, [r4, #8]
 800d18e:	2900      	cmp	r1, #0
 800d190:	d1ed      	bne.n	800d16e <_puts_r+0x52>
 800d192:	2b00      	cmp	r3, #0
 800d194:	da11      	bge.n	800d1ba <_puts_r+0x9e>
 800d196:	4622      	mov	r2, r4
 800d198:	210a      	movs	r1, #10
 800d19a:	4628      	mov	r0, r5
 800d19c:	f000 f85f 	bl	800d25e <__swbuf_r>
 800d1a0:	3001      	adds	r0, #1
 800d1a2:	d0d7      	beq.n	800d154 <_puts_r+0x38>
 800d1a4:	250a      	movs	r5, #10
 800d1a6:	e7d7      	b.n	800d158 <_puts_r+0x3c>
 800d1a8:	4622      	mov	r2, r4
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	f000 f857 	bl	800d25e <__swbuf_r>
 800d1b0:	3001      	adds	r0, #1
 800d1b2:	d1e7      	bne.n	800d184 <_puts_r+0x68>
 800d1b4:	e7ce      	b.n	800d154 <_puts_r+0x38>
 800d1b6:	3e01      	subs	r6, #1
 800d1b8:	e7e4      	b.n	800d184 <_puts_r+0x68>
 800d1ba:	6823      	ldr	r3, [r4, #0]
 800d1bc:	1c5a      	adds	r2, r3, #1
 800d1be:	6022      	str	r2, [r4, #0]
 800d1c0:	220a      	movs	r2, #10
 800d1c2:	701a      	strb	r2, [r3, #0]
 800d1c4:	e7ee      	b.n	800d1a4 <_puts_r+0x88>
	...

0800d1c8 <puts>:
 800d1c8:	4b02      	ldr	r3, [pc, #8]	@ (800d1d4 <puts+0xc>)
 800d1ca:	4601      	mov	r1, r0
 800d1cc:	6818      	ldr	r0, [r3, #0]
 800d1ce:	f7ff bfa5 	b.w	800d11c <_puts_r>
 800d1d2:	bf00      	nop
 800d1d4:	20000020 	.word	0x20000020

0800d1d8 <__sread>:
 800d1d8:	b510      	push	{r4, lr}
 800d1da:	460c      	mov	r4, r1
 800d1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1e0:	f000 f8fc 	bl	800d3dc <_read_r>
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	bfab      	itete	ge
 800d1e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d1ea:	89a3      	ldrhlt	r3, [r4, #12]
 800d1ec:	181b      	addge	r3, r3, r0
 800d1ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d1f2:	bfac      	ite	ge
 800d1f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d1f6:	81a3      	strhlt	r3, [r4, #12]
 800d1f8:	bd10      	pop	{r4, pc}

0800d1fa <__swrite>:
 800d1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1fe:	461f      	mov	r7, r3
 800d200:	898b      	ldrh	r3, [r1, #12]
 800d202:	4605      	mov	r5, r0
 800d204:	460c      	mov	r4, r1
 800d206:	05db      	lsls	r3, r3, #23
 800d208:	4616      	mov	r6, r2
 800d20a:	d505      	bpl.n	800d218 <__swrite+0x1e>
 800d20c:	2302      	movs	r3, #2
 800d20e:	2200      	movs	r2, #0
 800d210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d214:	f000 f8d0 	bl	800d3b8 <_lseek_r>
 800d218:	89a3      	ldrh	r3, [r4, #12]
 800d21a:	4632      	mov	r2, r6
 800d21c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d220:	4628      	mov	r0, r5
 800d222:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d226:	81a3      	strh	r3, [r4, #12]
 800d228:	463b      	mov	r3, r7
 800d22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d22e:	f000 b8f7 	b.w	800d420 <_write_r>

0800d232 <__sseek>:
 800d232:	b510      	push	{r4, lr}
 800d234:	460c      	mov	r4, r1
 800d236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d23a:	f000 f8bd 	bl	800d3b8 <_lseek_r>
 800d23e:	1c43      	adds	r3, r0, #1
 800d240:	89a3      	ldrh	r3, [r4, #12]
 800d242:	bf15      	itete	ne
 800d244:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d246:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d24a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d24e:	81a3      	strheq	r3, [r4, #12]
 800d250:	bf18      	it	ne
 800d252:	81a3      	strhne	r3, [r4, #12]
 800d254:	bd10      	pop	{r4, pc}

0800d256 <__sclose>:
 800d256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d25a:	f000 b89d 	b.w	800d398 <_close_r>

0800d25e <__swbuf_r>:
 800d25e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d260:	460e      	mov	r6, r1
 800d262:	4614      	mov	r4, r2
 800d264:	4605      	mov	r5, r0
 800d266:	b118      	cbz	r0, 800d270 <__swbuf_r+0x12>
 800d268:	6a03      	ldr	r3, [r0, #32]
 800d26a:	b90b      	cbnz	r3, 800d270 <__swbuf_r+0x12>
 800d26c:	f7ff ff06 	bl	800d07c <__sinit>
 800d270:	69a3      	ldr	r3, [r4, #24]
 800d272:	60a3      	str	r3, [r4, #8]
 800d274:	89a3      	ldrh	r3, [r4, #12]
 800d276:	071a      	lsls	r2, r3, #28
 800d278:	d501      	bpl.n	800d27e <__swbuf_r+0x20>
 800d27a:	6923      	ldr	r3, [r4, #16]
 800d27c:	b943      	cbnz	r3, 800d290 <__swbuf_r+0x32>
 800d27e:	4621      	mov	r1, r4
 800d280:	4628      	mov	r0, r5
 800d282:	f000 f82b 	bl	800d2dc <__swsetup_r>
 800d286:	b118      	cbz	r0, 800d290 <__swbuf_r+0x32>
 800d288:	f04f 37ff 	mov.w	r7, #4294967295
 800d28c:	4638      	mov	r0, r7
 800d28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d290:	6823      	ldr	r3, [r4, #0]
 800d292:	b2f6      	uxtb	r6, r6
 800d294:	6922      	ldr	r2, [r4, #16]
 800d296:	4637      	mov	r7, r6
 800d298:	1a98      	subs	r0, r3, r2
 800d29a:	6963      	ldr	r3, [r4, #20]
 800d29c:	4283      	cmp	r3, r0
 800d29e:	dc05      	bgt.n	800d2ac <__swbuf_r+0x4e>
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	f000 fc9e 	bl	800dbe4 <_fflush_r>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d1ed      	bne.n	800d288 <__swbuf_r+0x2a>
 800d2ac:	68a3      	ldr	r3, [r4, #8]
 800d2ae:	3b01      	subs	r3, #1
 800d2b0:	60a3      	str	r3, [r4, #8]
 800d2b2:	6823      	ldr	r3, [r4, #0]
 800d2b4:	1c5a      	adds	r2, r3, #1
 800d2b6:	6022      	str	r2, [r4, #0]
 800d2b8:	701e      	strb	r6, [r3, #0]
 800d2ba:	1c43      	adds	r3, r0, #1
 800d2bc:	6962      	ldr	r2, [r4, #20]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d004      	beq.n	800d2cc <__swbuf_r+0x6e>
 800d2c2:	89a3      	ldrh	r3, [r4, #12]
 800d2c4:	07db      	lsls	r3, r3, #31
 800d2c6:	d5e1      	bpl.n	800d28c <__swbuf_r+0x2e>
 800d2c8:	2e0a      	cmp	r6, #10
 800d2ca:	d1df      	bne.n	800d28c <__swbuf_r+0x2e>
 800d2cc:	4621      	mov	r1, r4
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	f000 fc88 	bl	800dbe4 <_fflush_r>
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	d0d9      	beq.n	800d28c <__swbuf_r+0x2e>
 800d2d8:	e7d6      	b.n	800d288 <__swbuf_r+0x2a>
	...

0800d2dc <__swsetup_r>:
 800d2dc:	b538      	push	{r3, r4, r5, lr}
 800d2de:	4b29      	ldr	r3, [pc, #164]	@ (800d384 <__swsetup_r+0xa8>)
 800d2e0:	4605      	mov	r5, r0
 800d2e2:	460c      	mov	r4, r1
 800d2e4:	6818      	ldr	r0, [r3, #0]
 800d2e6:	b118      	cbz	r0, 800d2f0 <__swsetup_r+0x14>
 800d2e8:	6a03      	ldr	r3, [r0, #32]
 800d2ea:	b90b      	cbnz	r3, 800d2f0 <__swsetup_r+0x14>
 800d2ec:	f7ff fec6 	bl	800d07c <__sinit>
 800d2f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2f4:	0719      	lsls	r1, r3, #28
 800d2f6:	d422      	bmi.n	800d33e <__swsetup_r+0x62>
 800d2f8:	06da      	lsls	r2, r3, #27
 800d2fa:	d407      	bmi.n	800d30c <__swsetup_r+0x30>
 800d2fc:	2209      	movs	r2, #9
 800d2fe:	602a      	str	r2, [r5, #0]
 800d300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d304:	f04f 30ff 	mov.w	r0, #4294967295
 800d308:	81a3      	strh	r3, [r4, #12]
 800d30a:	e033      	b.n	800d374 <__swsetup_r+0x98>
 800d30c:	0758      	lsls	r0, r3, #29
 800d30e:	d512      	bpl.n	800d336 <__swsetup_r+0x5a>
 800d310:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d312:	b141      	cbz	r1, 800d326 <__swsetup_r+0x4a>
 800d314:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d318:	4299      	cmp	r1, r3
 800d31a:	d002      	beq.n	800d322 <__swsetup_r+0x46>
 800d31c:	4628      	mov	r0, r5
 800d31e:	f000 f8bf 	bl	800d4a0 <_free_r>
 800d322:	2300      	movs	r3, #0
 800d324:	6363      	str	r3, [r4, #52]	@ 0x34
 800d326:	89a3      	ldrh	r3, [r4, #12]
 800d328:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d32c:	81a3      	strh	r3, [r4, #12]
 800d32e:	2300      	movs	r3, #0
 800d330:	6063      	str	r3, [r4, #4]
 800d332:	6923      	ldr	r3, [r4, #16]
 800d334:	6023      	str	r3, [r4, #0]
 800d336:	89a3      	ldrh	r3, [r4, #12]
 800d338:	f043 0308 	orr.w	r3, r3, #8
 800d33c:	81a3      	strh	r3, [r4, #12]
 800d33e:	6923      	ldr	r3, [r4, #16]
 800d340:	b94b      	cbnz	r3, 800d356 <__swsetup_r+0x7a>
 800d342:	89a3      	ldrh	r3, [r4, #12]
 800d344:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d34c:	d003      	beq.n	800d356 <__swsetup_r+0x7a>
 800d34e:	4621      	mov	r1, r4
 800d350:	4628      	mov	r0, r5
 800d352:	f000 fc94 	bl	800dc7e <__smakebuf_r>
 800d356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d35a:	f013 0201 	ands.w	r2, r3, #1
 800d35e:	d00a      	beq.n	800d376 <__swsetup_r+0x9a>
 800d360:	2200      	movs	r2, #0
 800d362:	60a2      	str	r2, [r4, #8]
 800d364:	6962      	ldr	r2, [r4, #20]
 800d366:	4252      	negs	r2, r2
 800d368:	61a2      	str	r2, [r4, #24]
 800d36a:	6922      	ldr	r2, [r4, #16]
 800d36c:	b942      	cbnz	r2, 800d380 <__swsetup_r+0xa4>
 800d36e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d372:	d1c5      	bne.n	800d300 <__swsetup_r+0x24>
 800d374:	bd38      	pop	{r3, r4, r5, pc}
 800d376:	0799      	lsls	r1, r3, #30
 800d378:	bf58      	it	pl
 800d37a:	6962      	ldrpl	r2, [r4, #20]
 800d37c:	60a2      	str	r2, [r4, #8]
 800d37e:	e7f4      	b.n	800d36a <__swsetup_r+0x8e>
 800d380:	2000      	movs	r0, #0
 800d382:	e7f7      	b.n	800d374 <__swsetup_r+0x98>
 800d384:	20000020 	.word	0x20000020

0800d388 <memset>:
 800d388:	4402      	add	r2, r0
 800d38a:	4603      	mov	r3, r0
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d100      	bne.n	800d392 <memset+0xa>
 800d390:	4770      	bx	lr
 800d392:	f803 1b01 	strb.w	r1, [r3], #1
 800d396:	e7f9      	b.n	800d38c <memset+0x4>

0800d398 <_close_r>:
 800d398:	b538      	push	{r3, r4, r5, lr}
 800d39a:	2300      	movs	r3, #0
 800d39c:	4d05      	ldr	r5, [pc, #20]	@ (800d3b4 <_close_r+0x1c>)
 800d39e:	4604      	mov	r4, r0
 800d3a0:	4608      	mov	r0, r1
 800d3a2:	602b      	str	r3, [r5, #0]
 800d3a4:	f7f4 fe7b 	bl	800209e <_close>
 800d3a8:	1c43      	adds	r3, r0, #1
 800d3aa:	d102      	bne.n	800d3b2 <_close_r+0x1a>
 800d3ac:	682b      	ldr	r3, [r5, #0]
 800d3ae:	b103      	cbz	r3, 800d3b2 <_close_r+0x1a>
 800d3b0:	6023      	str	r3, [r4, #0]
 800d3b2:	bd38      	pop	{r3, r4, r5, pc}
 800d3b4:	200007e8 	.word	0x200007e8

0800d3b8 <_lseek_r>:
 800d3b8:	b538      	push	{r3, r4, r5, lr}
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	4d06      	ldr	r5, [pc, #24]	@ (800d3d8 <_lseek_r+0x20>)
 800d3be:	4608      	mov	r0, r1
 800d3c0:	4611      	mov	r1, r2
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	602a      	str	r2, [r5, #0]
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	f7f4 fe90 	bl	80020ec <_lseek>
 800d3cc:	1c43      	adds	r3, r0, #1
 800d3ce:	d102      	bne.n	800d3d6 <_lseek_r+0x1e>
 800d3d0:	682b      	ldr	r3, [r5, #0]
 800d3d2:	b103      	cbz	r3, 800d3d6 <_lseek_r+0x1e>
 800d3d4:	6023      	str	r3, [r4, #0]
 800d3d6:	bd38      	pop	{r3, r4, r5, pc}
 800d3d8:	200007e8 	.word	0x200007e8

0800d3dc <_read_r>:
 800d3dc:	b538      	push	{r3, r4, r5, lr}
 800d3de:	4604      	mov	r4, r0
 800d3e0:	4d06      	ldr	r5, [pc, #24]	@ (800d3fc <_read_r+0x20>)
 800d3e2:	4608      	mov	r0, r1
 800d3e4:	4611      	mov	r1, r2
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	602a      	str	r2, [r5, #0]
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	f7f4 fe3a 	bl	8002064 <_read>
 800d3f0:	1c43      	adds	r3, r0, #1
 800d3f2:	d102      	bne.n	800d3fa <_read_r+0x1e>
 800d3f4:	682b      	ldr	r3, [r5, #0]
 800d3f6:	b103      	cbz	r3, 800d3fa <_read_r+0x1e>
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	bd38      	pop	{r3, r4, r5, pc}
 800d3fc:	200007e8 	.word	0x200007e8

0800d400 <_sbrk_r>:
 800d400:	b538      	push	{r3, r4, r5, lr}
 800d402:	2300      	movs	r3, #0
 800d404:	4d05      	ldr	r5, [pc, #20]	@ (800d41c <_sbrk_r+0x1c>)
 800d406:	4604      	mov	r4, r0
 800d408:	4608      	mov	r0, r1
 800d40a:	602b      	str	r3, [r5, #0]
 800d40c:	f7f4 fe7c 	bl	8002108 <_sbrk>
 800d410:	1c43      	adds	r3, r0, #1
 800d412:	d102      	bne.n	800d41a <_sbrk_r+0x1a>
 800d414:	682b      	ldr	r3, [r5, #0]
 800d416:	b103      	cbz	r3, 800d41a <_sbrk_r+0x1a>
 800d418:	6023      	str	r3, [r4, #0]
 800d41a:	bd38      	pop	{r3, r4, r5, pc}
 800d41c:	200007e8 	.word	0x200007e8

0800d420 <_write_r>:
 800d420:	b538      	push	{r3, r4, r5, lr}
 800d422:	4604      	mov	r4, r0
 800d424:	4d06      	ldr	r5, [pc, #24]	@ (800d440 <_write_r+0x20>)
 800d426:	4608      	mov	r0, r1
 800d428:	4611      	mov	r1, r2
 800d42a:	2200      	movs	r2, #0
 800d42c:	602a      	str	r2, [r5, #0]
 800d42e:	461a      	mov	r2, r3
 800d430:	f7f4 faa8 	bl	8001984 <_write>
 800d434:	1c43      	adds	r3, r0, #1
 800d436:	d102      	bne.n	800d43e <_write_r+0x1e>
 800d438:	682b      	ldr	r3, [r5, #0]
 800d43a:	b103      	cbz	r3, 800d43e <_write_r+0x1e>
 800d43c:	6023      	str	r3, [r4, #0]
 800d43e:	bd38      	pop	{r3, r4, r5, pc}
 800d440:	200007e8 	.word	0x200007e8

0800d444 <__errno>:
 800d444:	4b01      	ldr	r3, [pc, #4]	@ (800d44c <__errno+0x8>)
 800d446:	6818      	ldr	r0, [r3, #0]
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	20000020 	.word	0x20000020

0800d450 <__libc_init_array>:
 800d450:	b570      	push	{r4, r5, r6, lr}
 800d452:	4d0d      	ldr	r5, [pc, #52]	@ (800d488 <__libc_init_array+0x38>)
 800d454:	2600      	movs	r6, #0
 800d456:	4c0d      	ldr	r4, [pc, #52]	@ (800d48c <__libc_init_array+0x3c>)
 800d458:	1b64      	subs	r4, r4, r5
 800d45a:	10a4      	asrs	r4, r4, #2
 800d45c:	42a6      	cmp	r6, r4
 800d45e:	d109      	bne.n	800d474 <__libc_init_array+0x24>
 800d460:	4d0b      	ldr	r5, [pc, #44]	@ (800d490 <__libc_init_array+0x40>)
 800d462:	2600      	movs	r6, #0
 800d464:	4c0b      	ldr	r4, [pc, #44]	@ (800d494 <__libc_init_array+0x44>)
 800d466:	f000 fcab 	bl	800ddc0 <_init>
 800d46a:	1b64      	subs	r4, r4, r5
 800d46c:	10a4      	asrs	r4, r4, #2
 800d46e:	42a6      	cmp	r6, r4
 800d470:	d105      	bne.n	800d47e <__libc_init_array+0x2e>
 800d472:	bd70      	pop	{r4, r5, r6, pc}
 800d474:	f855 3b04 	ldr.w	r3, [r5], #4
 800d478:	3601      	adds	r6, #1
 800d47a:	4798      	blx	r3
 800d47c:	e7ee      	b.n	800d45c <__libc_init_array+0xc>
 800d47e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d482:	3601      	adds	r6, #1
 800d484:	4798      	blx	r3
 800d486:	e7f2      	b.n	800d46e <__libc_init_array+0x1e>
 800d488:	0800ede0 	.word	0x0800ede0
 800d48c:	0800ede0 	.word	0x0800ede0
 800d490:	0800ede0 	.word	0x0800ede0
 800d494:	0800ede4 	.word	0x0800ede4

0800d498 <__retarget_lock_init_recursive>:
 800d498:	4770      	bx	lr

0800d49a <__retarget_lock_acquire_recursive>:
 800d49a:	4770      	bx	lr

0800d49c <__retarget_lock_release_recursive>:
 800d49c:	4770      	bx	lr
	...

0800d4a0 <_free_r>:
 800d4a0:	b538      	push	{r3, r4, r5, lr}
 800d4a2:	4605      	mov	r5, r0
 800d4a4:	2900      	cmp	r1, #0
 800d4a6:	d041      	beq.n	800d52c <_free_r+0x8c>
 800d4a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4ac:	1f0c      	subs	r4, r1, #4
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	bfb8      	it	lt
 800d4b2:	18e4      	addlt	r4, r4, r3
 800d4b4:	f7ff fd4a 	bl	800cf4c <__malloc_lock>
 800d4b8:	4a1d      	ldr	r2, [pc, #116]	@ (800d530 <_free_r+0x90>)
 800d4ba:	6813      	ldr	r3, [r2, #0]
 800d4bc:	b933      	cbnz	r3, 800d4cc <_free_r+0x2c>
 800d4be:	6063      	str	r3, [r4, #4]
 800d4c0:	6014      	str	r4, [r2, #0]
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4c8:	f7ff bd46 	b.w	800cf58 <__malloc_unlock>
 800d4cc:	42a3      	cmp	r3, r4
 800d4ce:	d908      	bls.n	800d4e2 <_free_r+0x42>
 800d4d0:	6820      	ldr	r0, [r4, #0]
 800d4d2:	1821      	adds	r1, r4, r0
 800d4d4:	428b      	cmp	r3, r1
 800d4d6:	bf01      	itttt	eq
 800d4d8:	6819      	ldreq	r1, [r3, #0]
 800d4da:	685b      	ldreq	r3, [r3, #4]
 800d4dc:	1809      	addeq	r1, r1, r0
 800d4de:	6021      	streq	r1, [r4, #0]
 800d4e0:	e7ed      	b.n	800d4be <_free_r+0x1e>
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	b10b      	cbz	r3, 800d4ec <_free_r+0x4c>
 800d4e8:	42a3      	cmp	r3, r4
 800d4ea:	d9fa      	bls.n	800d4e2 <_free_r+0x42>
 800d4ec:	6811      	ldr	r1, [r2, #0]
 800d4ee:	1850      	adds	r0, r2, r1
 800d4f0:	42a0      	cmp	r0, r4
 800d4f2:	d10b      	bne.n	800d50c <_free_r+0x6c>
 800d4f4:	6820      	ldr	r0, [r4, #0]
 800d4f6:	4401      	add	r1, r0
 800d4f8:	1850      	adds	r0, r2, r1
 800d4fa:	6011      	str	r1, [r2, #0]
 800d4fc:	4283      	cmp	r3, r0
 800d4fe:	d1e0      	bne.n	800d4c2 <_free_r+0x22>
 800d500:	6818      	ldr	r0, [r3, #0]
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	4408      	add	r0, r1
 800d506:	6053      	str	r3, [r2, #4]
 800d508:	6010      	str	r0, [r2, #0]
 800d50a:	e7da      	b.n	800d4c2 <_free_r+0x22>
 800d50c:	d902      	bls.n	800d514 <_free_r+0x74>
 800d50e:	230c      	movs	r3, #12
 800d510:	602b      	str	r3, [r5, #0]
 800d512:	e7d6      	b.n	800d4c2 <_free_r+0x22>
 800d514:	6820      	ldr	r0, [r4, #0]
 800d516:	1821      	adds	r1, r4, r0
 800d518:	428b      	cmp	r3, r1
 800d51a:	bf02      	ittt	eq
 800d51c:	6819      	ldreq	r1, [r3, #0]
 800d51e:	685b      	ldreq	r3, [r3, #4]
 800d520:	1809      	addeq	r1, r1, r0
 800d522:	6063      	str	r3, [r4, #4]
 800d524:	bf08      	it	eq
 800d526:	6021      	streq	r1, [r4, #0]
 800d528:	6054      	str	r4, [r2, #4]
 800d52a:	e7ca      	b.n	800d4c2 <_free_r+0x22>
 800d52c:	bd38      	pop	{r3, r4, r5, pc}
 800d52e:	bf00      	nop
 800d530:	200006a8 	.word	0x200006a8

0800d534 <__sfputc_r>:
 800d534:	6893      	ldr	r3, [r2, #8]
 800d536:	3b01      	subs	r3, #1
 800d538:	2b00      	cmp	r3, #0
 800d53a:	6093      	str	r3, [r2, #8]
 800d53c:	b410      	push	{r4}
 800d53e:	da08      	bge.n	800d552 <__sfputc_r+0x1e>
 800d540:	6994      	ldr	r4, [r2, #24]
 800d542:	42a3      	cmp	r3, r4
 800d544:	db01      	blt.n	800d54a <__sfputc_r+0x16>
 800d546:	290a      	cmp	r1, #10
 800d548:	d103      	bne.n	800d552 <__sfputc_r+0x1e>
 800d54a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d54e:	f7ff be86 	b.w	800d25e <__swbuf_r>
 800d552:	6813      	ldr	r3, [r2, #0]
 800d554:	1c58      	adds	r0, r3, #1
 800d556:	6010      	str	r0, [r2, #0]
 800d558:	4608      	mov	r0, r1
 800d55a:	7019      	strb	r1, [r3, #0]
 800d55c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d560:	4770      	bx	lr

0800d562 <__sfputs_r>:
 800d562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d564:	4606      	mov	r6, r0
 800d566:	460f      	mov	r7, r1
 800d568:	4614      	mov	r4, r2
 800d56a:	18d5      	adds	r5, r2, r3
 800d56c:	42ac      	cmp	r4, r5
 800d56e:	d101      	bne.n	800d574 <__sfputs_r+0x12>
 800d570:	2000      	movs	r0, #0
 800d572:	e007      	b.n	800d584 <__sfputs_r+0x22>
 800d574:	463a      	mov	r2, r7
 800d576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d57a:	4630      	mov	r0, r6
 800d57c:	f7ff ffda 	bl	800d534 <__sfputc_r>
 800d580:	1c43      	adds	r3, r0, #1
 800d582:	d1f3      	bne.n	800d56c <__sfputs_r+0xa>
 800d584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d588 <_vfiprintf_r>:
 800d588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d58c:	460d      	mov	r5, r1
 800d58e:	b09d      	sub	sp, #116	@ 0x74
 800d590:	4614      	mov	r4, r2
 800d592:	4698      	mov	r8, r3
 800d594:	4606      	mov	r6, r0
 800d596:	b118      	cbz	r0, 800d5a0 <_vfiprintf_r+0x18>
 800d598:	6a03      	ldr	r3, [r0, #32]
 800d59a:	b90b      	cbnz	r3, 800d5a0 <_vfiprintf_r+0x18>
 800d59c:	f7ff fd6e 	bl	800d07c <__sinit>
 800d5a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5a2:	07d9      	lsls	r1, r3, #31
 800d5a4:	d405      	bmi.n	800d5b2 <_vfiprintf_r+0x2a>
 800d5a6:	89ab      	ldrh	r3, [r5, #12]
 800d5a8:	059a      	lsls	r2, r3, #22
 800d5aa:	d402      	bmi.n	800d5b2 <_vfiprintf_r+0x2a>
 800d5ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5ae:	f7ff ff74 	bl	800d49a <__retarget_lock_acquire_recursive>
 800d5b2:	89ab      	ldrh	r3, [r5, #12]
 800d5b4:	071b      	lsls	r3, r3, #28
 800d5b6:	d501      	bpl.n	800d5bc <_vfiprintf_r+0x34>
 800d5b8:	692b      	ldr	r3, [r5, #16]
 800d5ba:	b99b      	cbnz	r3, 800d5e4 <_vfiprintf_r+0x5c>
 800d5bc:	4629      	mov	r1, r5
 800d5be:	4630      	mov	r0, r6
 800d5c0:	f7ff fe8c 	bl	800d2dc <__swsetup_r>
 800d5c4:	b170      	cbz	r0, 800d5e4 <_vfiprintf_r+0x5c>
 800d5c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5c8:	07dc      	lsls	r4, r3, #31
 800d5ca:	d504      	bpl.n	800d5d6 <_vfiprintf_r+0x4e>
 800d5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d0:	b01d      	add	sp, #116	@ 0x74
 800d5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5d6:	89ab      	ldrh	r3, [r5, #12]
 800d5d8:	0598      	lsls	r0, r3, #22
 800d5da:	d4f7      	bmi.n	800d5cc <_vfiprintf_r+0x44>
 800d5dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5de:	f7ff ff5d 	bl	800d49c <__retarget_lock_release_recursive>
 800d5e2:	e7f3      	b.n	800d5cc <_vfiprintf_r+0x44>
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5ea:	f04f 0901 	mov.w	r9, #1
 800d5ee:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d7a4 <_vfiprintf_r+0x21c>
 800d5f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5f4:	2320      	movs	r3, #32
 800d5f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5fa:	2330      	movs	r3, #48	@ 0x30
 800d5fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d600:	4623      	mov	r3, r4
 800d602:	469a      	mov	sl, r3
 800d604:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d608:	b10a      	cbz	r2, 800d60e <_vfiprintf_r+0x86>
 800d60a:	2a25      	cmp	r2, #37	@ 0x25
 800d60c:	d1f9      	bne.n	800d602 <_vfiprintf_r+0x7a>
 800d60e:	ebba 0b04 	subs.w	fp, sl, r4
 800d612:	d00b      	beq.n	800d62c <_vfiprintf_r+0xa4>
 800d614:	465b      	mov	r3, fp
 800d616:	4622      	mov	r2, r4
 800d618:	4629      	mov	r1, r5
 800d61a:	4630      	mov	r0, r6
 800d61c:	f7ff ffa1 	bl	800d562 <__sfputs_r>
 800d620:	3001      	adds	r0, #1
 800d622:	f000 80a7 	beq.w	800d774 <_vfiprintf_r+0x1ec>
 800d626:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d628:	445a      	add	r2, fp
 800d62a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d62c:	f89a 3000 	ldrb.w	r3, [sl]
 800d630:	2b00      	cmp	r3, #0
 800d632:	f000 809f 	beq.w	800d774 <_vfiprintf_r+0x1ec>
 800d636:	2300      	movs	r3, #0
 800d638:	f04f 32ff 	mov.w	r2, #4294967295
 800d63c:	f10a 0a01 	add.w	sl, sl, #1
 800d640:	9304      	str	r3, [sp, #16]
 800d642:	9307      	str	r3, [sp, #28]
 800d644:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d648:	931a      	str	r3, [sp, #104]	@ 0x68
 800d64a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d64e:	4654      	mov	r4, sl
 800d650:	2205      	movs	r2, #5
 800d652:	4854      	ldr	r0, [pc, #336]	@ (800d7a4 <_vfiprintf_r+0x21c>)
 800d654:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d658:	f000 fba4 	bl	800dda4 <memchr>
 800d65c:	9a04      	ldr	r2, [sp, #16]
 800d65e:	b9d8      	cbnz	r0, 800d698 <_vfiprintf_r+0x110>
 800d660:	06d1      	lsls	r1, r2, #27
 800d662:	bf44      	itt	mi
 800d664:	2320      	movmi	r3, #32
 800d666:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d66a:	0713      	lsls	r3, r2, #28
 800d66c:	bf44      	itt	mi
 800d66e:	232b      	movmi	r3, #43	@ 0x2b
 800d670:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d674:	f89a 3000 	ldrb.w	r3, [sl]
 800d678:	2b2a      	cmp	r3, #42	@ 0x2a
 800d67a:	d015      	beq.n	800d6a8 <_vfiprintf_r+0x120>
 800d67c:	9a07      	ldr	r2, [sp, #28]
 800d67e:	4654      	mov	r4, sl
 800d680:	2000      	movs	r0, #0
 800d682:	f04f 0c0a 	mov.w	ip, #10
 800d686:	4621      	mov	r1, r4
 800d688:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d68c:	3b30      	subs	r3, #48	@ 0x30
 800d68e:	2b09      	cmp	r3, #9
 800d690:	d94b      	bls.n	800d72a <_vfiprintf_r+0x1a2>
 800d692:	b1b0      	cbz	r0, 800d6c2 <_vfiprintf_r+0x13a>
 800d694:	9207      	str	r2, [sp, #28]
 800d696:	e014      	b.n	800d6c2 <_vfiprintf_r+0x13a>
 800d698:	eba0 0308 	sub.w	r3, r0, r8
 800d69c:	46a2      	mov	sl, r4
 800d69e:	fa09 f303 	lsl.w	r3, r9, r3
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	9304      	str	r3, [sp, #16]
 800d6a6:	e7d2      	b.n	800d64e <_vfiprintf_r+0xc6>
 800d6a8:	9b03      	ldr	r3, [sp, #12]
 800d6aa:	1d19      	adds	r1, r3, #4
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	9103      	str	r1, [sp, #12]
 800d6b2:	bfbb      	ittet	lt
 800d6b4:	425b      	neglt	r3, r3
 800d6b6:	f042 0202 	orrlt.w	r2, r2, #2
 800d6ba:	9307      	strge	r3, [sp, #28]
 800d6bc:	9307      	strlt	r3, [sp, #28]
 800d6be:	bfb8      	it	lt
 800d6c0:	9204      	strlt	r2, [sp, #16]
 800d6c2:	7823      	ldrb	r3, [r4, #0]
 800d6c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6c6:	d10a      	bne.n	800d6de <_vfiprintf_r+0x156>
 800d6c8:	7863      	ldrb	r3, [r4, #1]
 800d6ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6cc:	d132      	bne.n	800d734 <_vfiprintf_r+0x1ac>
 800d6ce:	9b03      	ldr	r3, [sp, #12]
 800d6d0:	3402      	adds	r4, #2
 800d6d2:	1d1a      	adds	r2, r3, #4
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6da:	9203      	str	r2, [sp, #12]
 800d6dc:	9305      	str	r3, [sp, #20]
 800d6de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d7b4 <_vfiprintf_r+0x22c>
 800d6e2:	2203      	movs	r2, #3
 800d6e4:	7821      	ldrb	r1, [r4, #0]
 800d6e6:	4650      	mov	r0, sl
 800d6e8:	f000 fb5c 	bl	800dda4 <memchr>
 800d6ec:	b138      	cbz	r0, 800d6fe <_vfiprintf_r+0x176>
 800d6ee:	eba0 000a 	sub.w	r0, r0, sl
 800d6f2:	2240      	movs	r2, #64	@ 0x40
 800d6f4:	9b04      	ldr	r3, [sp, #16]
 800d6f6:	3401      	adds	r4, #1
 800d6f8:	4082      	lsls	r2, r0
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	9304      	str	r3, [sp, #16]
 800d6fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d702:	2206      	movs	r2, #6
 800d704:	4828      	ldr	r0, [pc, #160]	@ (800d7a8 <_vfiprintf_r+0x220>)
 800d706:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d70a:	f000 fb4b 	bl	800dda4 <memchr>
 800d70e:	2800      	cmp	r0, #0
 800d710:	d03f      	beq.n	800d792 <_vfiprintf_r+0x20a>
 800d712:	4b26      	ldr	r3, [pc, #152]	@ (800d7ac <_vfiprintf_r+0x224>)
 800d714:	bb1b      	cbnz	r3, 800d75e <_vfiprintf_r+0x1d6>
 800d716:	9b03      	ldr	r3, [sp, #12]
 800d718:	3307      	adds	r3, #7
 800d71a:	f023 0307 	bic.w	r3, r3, #7
 800d71e:	3308      	adds	r3, #8
 800d720:	9303      	str	r3, [sp, #12]
 800d722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d724:	443b      	add	r3, r7
 800d726:	9309      	str	r3, [sp, #36]	@ 0x24
 800d728:	e76a      	b.n	800d600 <_vfiprintf_r+0x78>
 800d72a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d72e:	460c      	mov	r4, r1
 800d730:	2001      	movs	r0, #1
 800d732:	e7a8      	b.n	800d686 <_vfiprintf_r+0xfe>
 800d734:	2300      	movs	r3, #0
 800d736:	3401      	adds	r4, #1
 800d738:	f04f 0c0a 	mov.w	ip, #10
 800d73c:	4619      	mov	r1, r3
 800d73e:	9305      	str	r3, [sp, #20]
 800d740:	4620      	mov	r0, r4
 800d742:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d746:	3a30      	subs	r2, #48	@ 0x30
 800d748:	2a09      	cmp	r2, #9
 800d74a:	d903      	bls.n	800d754 <_vfiprintf_r+0x1cc>
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d0c6      	beq.n	800d6de <_vfiprintf_r+0x156>
 800d750:	9105      	str	r1, [sp, #20]
 800d752:	e7c4      	b.n	800d6de <_vfiprintf_r+0x156>
 800d754:	fb0c 2101 	mla	r1, ip, r1, r2
 800d758:	4604      	mov	r4, r0
 800d75a:	2301      	movs	r3, #1
 800d75c:	e7f0      	b.n	800d740 <_vfiprintf_r+0x1b8>
 800d75e:	ab03      	add	r3, sp, #12
 800d760:	462a      	mov	r2, r5
 800d762:	a904      	add	r1, sp, #16
 800d764:	4630      	mov	r0, r6
 800d766:	9300      	str	r3, [sp, #0]
 800d768:	4b11      	ldr	r3, [pc, #68]	@ (800d7b0 <_vfiprintf_r+0x228>)
 800d76a:	f3af 8000 	nop.w
 800d76e:	4607      	mov	r7, r0
 800d770:	1c78      	adds	r0, r7, #1
 800d772:	d1d6      	bne.n	800d722 <_vfiprintf_r+0x19a>
 800d774:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d776:	07d9      	lsls	r1, r3, #31
 800d778:	d405      	bmi.n	800d786 <_vfiprintf_r+0x1fe>
 800d77a:	89ab      	ldrh	r3, [r5, #12]
 800d77c:	059a      	lsls	r2, r3, #22
 800d77e:	d402      	bmi.n	800d786 <_vfiprintf_r+0x1fe>
 800d780:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d782:	f7ff fe8b 	bl	800d49c <__retarget_lock_release_recursive>
 800d786:	89ab      	ldrh	r3, [r5, #12]
 800d788:	065b      	lsls	r3, r3, #25
 800d78a:	f53f af1f 	bmi.w	800d5cc <_vfiprintf_r+0x44>
 800d78e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d790:	e71e      	b.n	800d5d0 <_vfiprintf_r+0x48>
 800d792:	ab03      	add	r3, sp, #12
 800d794:	462a      	mov	r2, r5
 800d796:	a904      	add	r1, sp, #16
 800d798:	4630      	mov	r0, r6
 800d79a:	9300      	str	r3, [sp, #0]
 800d79c:	4b04      	ldr	r3, [pc, #16]	@ (800d7b0 <_vfiprintf_r+0x228>)
 800d79e:	f000 f87d 	bl	800d89c <_printf_i>
 800d7a2:	e7e4      	b.n	800d76e <_vfiprintf_r+0x1e6>
 800d7a4:	0800eda5 	.word	0x0800eda5
 800d7a8:	0800edaf 	.word	0x0800edaf
 800d7ac:	00000000 	.word	0x00000000
 800d7b0:	0800d563 	.word	0x0800d563
 800d7b4:	0800edab 	.word	0x0800edab

0800d7b8 <_printf_common>:
 800d7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7bc:	4616      	mov	r6, r2
 800d7be:	4698      	mov	r8, r3
 800d7c0:	688a      	ldr	r2, [r1, #8]
 800d7c2:	4607      	mov	r7, r0
 800d7c4:	690b      	ldr	r3, [r1, #16]
 800d7c6:	460c      	mov	r4, r1
 800d7c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	bfb8      	it	lt
 800d7d0:	4613      	movlt	r3, r2
 800d7d2:	6033      	str	r3, [r6, #0]
 800d7d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d7d8:	b10a      	cbz	r2, 800d7de <_printf_common+0x26>
 800d7da:	3301      	adds	r3, #1
 800d7dc:	6033      	str	r3, [r6, #0]
 800d7de:	6823      	ldr	r3, [r4, #0]
 800d7e0:	0699      	lsls	r1, r3, #26
 800d7e2:	bf42      	ittt	mi
 800d7e4:	6833      	ldrmi	r3, [r6, #0]
 800d7e6:	3302      	addmi	r3, #2
 800d7e8:	6033      	strmi	r3, [r6, #0]
 800d7ea:	6825      	ldr	r5, [r4, #0]
 800d7ec:	f015 0506 	ands.w	r5, r5, #6
 800d7f0:	d106      	bne.n	800d800 <_printf_common+0x48>
 800d7f2:	f104 0a19 	add.w	sl, r4, #25
 800d7f6:	68e3      	ldr	r3, [r4, #12]
 800d7f8:	6832      	ldr	r2, [r6, #0]
 800d7fa:	1a9b      	subs	r3, r3, r2
 800d7fc:	42ab      	cmp	r3, r5
 800d7fe:	dc2b      	bgt.n	800d858 <_printf_common+0xa0>
 800d800:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d804:	6822      	ldr	r2, [r4, #0]
 800d806:	3b00      	subs	r3, #0
 800d808:	bf18      	it	ne
 800d80a:	2301      	movne	r3, #1
 800d80c:	0692      	lsls	r2, r2, #26
 800d80e:	d430      	bmi.n	800d872 <_printf_common+0xba>
 800d810:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d814:	4641      	mov	r1, r8
 800d816:	4638      	mov	r0, r7
 800d818:	47c8      	blx	r9
 800d81a:	3001      	adds	r0, #1
 800d81c:	d023      	beq.n	800d866 <_printf_common+0xae>
 800d81e:	6823      	ldr	r3, [r4, #0]
 800d820:	341a      	adds	r4, #26
 800d822:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d826:	f003 0306 	and.w	r3, r3, #6
 800d82a:	2b04      	cmp	r3, #4
 800d82c:	bf0a      	itet	eq
 800d82e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800d832:	2500      	movne	r5, #0
 800d834:	6833      	ldreq	r3, [r6, #0]
 800d836:	f04f 0600 	mov.w	r6, #0
 800d83a:	bf08      	it	eq
 800d83c:	1aed      	subeq	r5, r5, r3
 800d83e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d842:	bf08      	it	eq
 800d844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d848:	4293      	cmp	r3, r2
 800d84a:	bfc4      	itt	gt
 800d84c:	1a9b      	subgt	r3, r3, r2
 800d84e:	18ed      	addgt	r5, r5, r3
 800d850:	42b5      	cmp	r5, r6
 800d852:	d11a      	bne.n	800d88a <_printf_common+0xd2>
 800d854:	2000      	movs	r0, #0
 800d856:	e008      	b.n	800d86a <_printf_common+0xb2>
 800d858:	2301      	movs	r3, #1
 800d85a:	4652      	mov	r2, sl
 800d85c:	4641      	mov	r1, r8
 800d85e:	4638      	mov	r0, r7
 800d860:	47c8      	blx	r9
 800d862:	3001      	adds	r0, #1
 800d864:	d103      	bne.n	800d86e <_printf_common+0xb6>
 800d866:	f04f 30ff 	mov.w	r0, #4294967295
 800d86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d86e:	3501      	adds	r5, #1
 800d870:	e7c1      	b.n	800d7f6 <_printf_common+0x3e>
 800d872:	18e1      	adds	r1, r4, r3
 800d874:	1c5a      	adds	r2, r3, #1
 800d876:	2030      	movs	r0, #48	@ 0x30
 800d878:	3302      	adds	r3, #2
 800d87a:	4422      	add	r2, r4
 800d87c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d880:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d884:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d888:	e7c2      	b.n	800d810 <_printf_common+0x58>
 800d88a:	2301      	movs	r3, #1
 800d88c:	4622      	mov	r2, r4
 800d88e:	4641      	mov	r1, r8
 800d890:	4638      	mov	r0, r7
 800d892:	47c8      	blx	r9
 800d894:	3001      	adds	r0, #1
 800d896:	d0e6      	beq.n	800d866 <_printf_common+0xae>
 800d898:	3601      	adds	r6, #1
 800d89a:	e7d9      	b.n	800d850 <_printf_common+0x98>

0800d89c <_printf_i>:
 800d89c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8a0:	7e0f      	ldrb	r7, [r1, #24]
 800d8a2:	4691      	mov	r9, r2
 800d8a4:	4680      	mov	r8, r0
 800d8a6:	460c      	mov	r4, r1
 800d8a8:	2f78      	cmp	r7, #120	@ 0x78
 800d8aa:	469a      	mov	sl, r3
 800d8ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d8ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d8b2:	d807      	bhi.n	800d8c4 <_printf_i+0x28>
 800d8b4:	2f62      	cmp	r7, #98	@ 0x62
 800d8b6:	d80a      	bhi.n	800d8ce <_printf_i+0x32>
 800d8b8:	2f00      	cmp	r7, #0
 800d8ba:	f000 80d2 	beq.w	800da62 <_printf_i+0x1c6>
 800d8be:	2f58      	cmp	r7, #88	@ 0x58
 800d8c0:	f000 80b9 	beq.w	800da36 <_printf_i+0x19a>
 800d8c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d8c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d8cc:	e03a      	b.n	800d944 <_printf_i+0xa8>
 800d8ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d8d2:	2b15      	cmp	r3, #21
 800d8d4:	d8f6      	bhi.n	800d8c4 <_printf_i+0x28>
 800d8d6:	a101      	add	r1, pc, #4	@ (adr r1, 800d8dc <_printf_i+0x40>)
 800d8d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d8dc:	0800d935 	.word	0x0800d935
 800d8e0:	0800d949 	.word	0x0800d949
 800d8e4:	0800d8c5 	.word	0x0800d8c5
 800d8e8:	0800d8c5 	.word	0x0800d8c5
 800d8ec:	0800d8c5 	.word	0x0800d8c5
 800d8f0:	0800d8c5 	.word	0x0800d8c5
 800d8f4:	0800d949 	.word	0x0800d949
 800d8f8:	0800d8c5 	.word	0x0800d8c5
 800d8fc:	0800d8c5 	.word	0x0800d8c5
 800d900:	0800d8c5 	.word	0x0800d8c5
 800d904:	0800d8c5 	.word	0x0800d8c5
 800d908:	0800da49 	.word	0x0800da49
 800d90c:	0800d973 	.word	0x0800d973
 800d910:	0800da03 	.word	0x0800da03
 800d914:	0800d8c5 	.word	0x0800d8c5
 800d918:	0800d8c5 	.word	0x0800d8c5
 800d91c:	0800da6b 	.word	0x0800da6b
 800d920:	0800d8c5 	.word	0x0800d8c5
 800d924:	0800d973 	.word	0x0800d973
 800d928:	0800d8c5 	.word	0x0800d8c5
 800d92c:	0800d8c5 	.word	0x0800d8c5
 800d930:	0800da0b 	.word	0x0800da0b
 800d934:	6833      	ldr	r3, [r6, #0]
 800d936:	1d1a      	adds	r2, r3, #4
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	6032      	str	r2, [r6, #0]
 800d93c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d944:	2301      	movs	r3, #1
 800d946:	e09d      	b.n	800da84 <_printf_i+0x1e8>
 800d948:	6833      	ldr	r3, [r6, #0]
 800d94a:	6820      	ldr	r0, [r4, #0]
 800d94c:	1d19      	adds	r1, r3, #4
 800d94e:	6031      	str	r1, [r6, #0]
 800d950:	0606      	lsls	r6, r0, #24
 800d952:	d501      	bpl.n	800d958 <_printf_i+0xbc>
 800d954:	681d      	ldr	r5, [r3, #0]
 800d956:	e003      	b.n	800d960 <_printf_i+0xc4>
 800d958:	0645      	lsls	r5, r0, #25
 800d95a:	d5fb      	bpl.n	800d954 <_printf_i+0xb8>
 800d95c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d960:	2d00      	cmp	r5, #0
 800d962:	da03      	bge.n	800d96c <_printf_i+0xd0>
 800d964:	232d      	movs	r3, #45	@ 0x2d
 800d966:	426d      	negs	r5, r5
 800d968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d96c:	4859      	ldr	r0, [pc, #356]	@ (800dad4 <_printf_i+0x238>)
 800d96e:	230a      	movs	r3, #10
 800d970:	e011      	b.n	800d996 <_printf_i+0xfa>
 800d972:	6821      	ldr	r1, [r4, #0]
 800d974:	6833      	ldr	r3, [r6, #0]
 800d976:	0608      	lsls	r0, r1, #24
 800d978:	f853 5b04 	ldr.w	r5, [r3], #4
 800d97c:	d402      	bmi.n	800d984 <_printf_i+0xe8>
 800d97e:	0649      	lsls	r1, r1, #25
 800d980:	bf48      	it	mi
 800d982:	b2ad      	uxthmi	r5, r5
 800d984:	2f6f      	cmp	r7, #111	@ 0x6f
 800d986:	6033      	str	r3, [r6, #0]
 800d988:	4852      	ldr	r0, [pc, #328]	@ (800dad4 <_printf_i+0x238>)
 800d98a:	bf14      	ite	ne
 800d98c:	230a      	movne	r3, #10
 800d98e:	2308      	moveq	r3, #8
 800d990:	2100      	movs	r1, #0
 800d992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d996:	6866      	ldr	r6, [r4, #4]
 800d998:	2e00      	cmp	r6, #0
 800d99a:	60a6      	str	r6, [r4, #8]
 800d99c:	bfa2      	ittt	ge
 800d99e:	6821      	ldrge	r1, [r4, #0]
 800d9a0:	f021 0104 	bicge.w	r1, r1, #4
 800d9a4:	6021      	strge	r1, [r4, #0]
 800d9a6:	b90d      	cbnz	r5, 800d9ac <_printf_i+0x110>
 800d9a8:	2e00      	cmp	r6, #0
 800d9aa:	d04b      	beq.n	800da44 <_printf_i+0x1a8>
 800d9ac:	4616      	mov	r6, r2
 800d9ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800d9b2:	fb03 5711 	mls	r7, r3, r1, r5
 800d9b6:	5dc7      	ldrb	r7, [r0, r7]
 800d9b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d9bc:	462f      	mov	r7, r5
 800d9be:	460d      	mov	r5, r1
 800d9c0:	42bb      	cmp	r3, r7
 800d9c2:	d9f4      	bls.n	800d9ae <_printf_i+0x112>
 800d9c4:	2b08      	cmp	r3, #8
 800d9c6:	d10b      	bne.n	800d9e0 <_printf_i+0x144>
 800d9c8:	6823      	ldr	r3, [r4, #0]
 800d9ca:	07df      	lsls	r7, r3, #31
 800d9cc:	d508      	bpl.n	800d9e0 <_printf_i+0x144>
 800d9ce:	6923      	ldr	r3, [r4, #16]
 800d9d0:	6861      	ldr	r1, [r4, #4]
 800d9d2:	4299      	cmp	r1, r3
 800d9d4:	bfde      	ittt	le
 800d9d6:	2330      	movle	r3, #48	@ 0x30
 800d9d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d9dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d9e0:	1b92      	subs	r2, r2, r6
 800d9e2:	6122      	str	r2, [r4, #16]
 800d9e4:	464b      	mov	r3, r9
 800d9e6:	aa03      	add	r2, sp, #12
 800d9e8:	4621      	mov	r1, r4
 800d9ea:	4640      	mov	r0, r8
 800d9ec:	f8cd a000 	str.w	sl, [sp]
 800d9f0:	f7ff fee2 	bl	800d7b8 <_printf_common>
 800d9f4:	3001      	adds	r0, #1
 800d9f6:	d14a      	bne.n	800da8e <_printf_i+0x1f2>
 800d9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9fc:	b004      	add	sp, #16
 800d9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da02:	6823      	ldr	r3, [r4, #0]
 800da04:	f043 0320 	orr.w	r3, r3, #32
 800da08:	6023      	str	r3, [r4, #0]
 800da0a:	2778      	movs	r7, #120	@ 0x78
 800da0c:	4832      	ldr	r0, [pc, #200]	@ (800dad8 <_printf_i+0x23c>)
 800da0e:	6823      	ldr	r3, [r4, #0]
 800da10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800da14:	061f      	lsls	r7, r3, #24
 800da16:	6831      	ldr	r1, [r6, #0]
 800da18:	f851 5b04 	ldr.w	r5, [r1], #4
 800da1c:	d402      	bmi.n	800da24 <_printf_i+0x188>
 800da1e:	065f      	lsls	r7, r3, #25
 800da20:	bf48      	it	mi
 800da22:	b2ad      	uxthmi	r5, r5
 800da24:	6031      	str	r1, [r6, #0]
 800da26:	07d9      	lsls	r1, r3, #31
 800da28:	bf44      	itt	mi
 800da2a:	f043 0320 	orrmi.w	r3, r3, #32
 800da2e:	6023      	strmi	r3, [r4, #0]
 800da30:	b11d      	cbz	r5, 800da3a <_printf_i+0x19e>
 800da32:	2310      	movs	r3, #16
 800da34:	e7ac      	b.n	800d990 <_printf_i+0xf4>
 800da36:	4827      	ldr	r0, [pc, #156]	@ (800dad4 <_printf_i+0x238>)
 800da38:	e7e9      	b.n	800da0e <_printf_i+0x172>
 800da3a:	6823      	ldr	r3, [r4, #0]
 800da3c:	f023 0320 	bic.w	r3, r3, #32
 800da40:	6023      	str	r3, [r4, #0]
 800da42:	e7f6      	b.n	800da32 <_printf_i+0x196>
 800da44:	4616      	mov	r6, r2
 800da46:	e7bd      	b.n	800d9c4 <_printf_i+0x128>
 800da48:	6833      	ldr	r3, [r6, #0]
 800da4a:	6825      	ldr	r5, [r4, #0]
 800da4c:	1d18      	adds	r0, r3, #4
 800da4e:	6961      	ldr	r1, [r4, #20]
 800da50:	6030      	str	r0, [r6, #0]
 800da52:	062e      	lsls	r6, r5, #24
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	d501      	bpl.n	800da5c <_printf_i+0x1c0>
 800da58:	6019      	str	r1, [r3, #0]
 800da5a:	e002      	b.n	800da62 <_printf_i+0x1c6>
 800da5c:	0668      	lsls	r0, r5, #25
 800da5e:	d5fb      	bpl.n	800da58 <_printf_i+0x1bc>
 800da60:	8019      	strh	r1, [r3, #0]
 800da62:	2300      	movs	r3, #0
 800da64:	4616      	mov	r6, r2
 800da66:	6123      	str	r3, [r4, #16]
 800da68:	e7bc      	b.n	800d9e4 <_printf_i+0x148>
 800da6a:	6833      	ldr	r3, [r6, #0]
 800da6c:	2100      	movs	r1, #0
 800da6e:	1d1a      	adds	r2, r3, #4
 800da70:	6032      	str	r2, [r6, #0]
 800da72:	681e      	ldr	r6, [r3, #0]
 800da74:	6862      	ldr	r2, [r4, #4]
 800da76:	4630      	mov	r0, r6
 800da78:	f000 f994 	bl	800dda4 <memchr>
 800da7c:	b108      	cbz	r0, 800da82 <_printf_i+0x1e6>
 800da7e:	1b80      	subs	r0, r0, r6
 800da80:	6060      	str	r0, [r4, #4]
 800da82:	6863      	ldr	r3, [r4, #4]
 800da84:	6123      	str	r3, [r4, #16]
 800da86:	2300      	movs	r3, #0
 800da88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da8c:	e7aa      	b.n	800d9e4 <_printf_i+0x148>
 800da8e:	6923      	ldr	r3, [r4, #16]
 800da90:	4632      	mov	r2, r6
 800da92:	4649      	mov	r1, r9
 800da94:	4640      	mov	r0, r8
 800da96:	47d0      	blx	sl
 800da98:	3001      	adds	r0, #1
 800da9a:	d0ad      	beq.n	800d9f8 <_printf_i+0x15c>
 800da9c:	6823      	ldr	r3, [r4, #0]
 800da9e:	079b      	lsls	r3, r3, #30
 800daa0:	d413      	bmi.n	800daca <_printf_i+0x22e>
 800daa2:	68e0      	ldr	r0, [r4, #12]
 800daa4:	9b03      	ldr	r3, [sp, #12]
 800daa6:	4298      	cmp	r0, r3
 800daa8:	bfb8      	it	lt
 800daaa:	4618      	movlt	r0, r3
 800daac:	e7a6      	b.n	800d9fc <_printf_i+0x160>
 800daae:	2301      	movs	r3, #1
 800dab0:	4632      	mov	r2, r6
 800dab2:	4649      	mov	r1, r9
 800dab4:	4640      	mov	r0, r8
 800dab6:	47d0      	blx	sl
 800dab8:	3001      	adds	r0, #1
 800daba:	d09d      	beq.n	800d9f8 <_printf_i+0x15c>
 800dabc:	3501      	adds	r5, #1
 800dabe:	68e3      	ldr	r3, [r4, #12]
 800dac0:	9903      	ldr	r1, [sp, #12]
 800dac2:	1a5b      	subs	r3, r3, r1
 800dac4:	42ab      	cmp	r3, r5
 800dac6:	dcf2      	bgt.n	800daae <_printf_i+0x212>
 800dac8:	e7eb      	b.n	800daa2 <_printf_i+0x206>
 800daca:	2500      	movs	r5, #0
 800dacc:	f104 0619 	add.w	r6, r4, #25
 800dad0:	e7f5      	b.n	800dabe <_printf_i+0x222>
 800dad2:	bf00      	nop
 800dad4:	0800edb6 	.word	0x0800edb6
 800dad8:	0800edc7 	.word	0x0800edc7

0800dadc <__sflush_r>:
 800dadc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dae4:	0716      	lsls	r6, r2, #28
 800dae6:	4605      	mov	r5, r0
 800dae8:	460c      	mov	r4, r1
 800daea:	d454      	bmi.n	800db96 <__sflush_r+0xba>
 800daec:	684b      	ldr	r3, [r1, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	dc02      	bgt.n	800daf8 <__sflush_r+0x1c>
 800daf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	dd48      	ble.n	800db8a <__sflush_r+0xae>
 800daf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dafa:	2e00      	cmp	r6, #0
 800dafc:	d045      	beq.n	800db8a <__sflush_r+0xae>
 800dafe:	2300      	movs	r3, #0
 800db00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800db04:	682f      	ldr	r7, [r5, #0]
 800db06:	6a21      	ldr	r1, [r4, #32]
 800db08:	602b      	str	r3, [r5, #0]
 800db0a:	d030      	beq.n	800db6e <__sflush_r+0x92>
 800db0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800db0e:	89a3      	ldrh	r3, [r4, #12]
 800db10:	0759      	lsls	r1, r3, #29
 800db12:	d505      	bpl.n	800db20 <__sflush_r+0x44>
 800db14:	6863      	ldr	r3, [r4, #4]
 800db16:	1ad2      	subs	r2, r2, r3
 800db18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800db1a:	b10b      	cbz	r3, 800db20 <__sflush_r+0x44>
 800db1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800db1e:	1ad2      	subs	r2, r2, r3
 800db20:	2300      	movs	r3, #0
 800db22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db24:	6a21      	ldr	r1, [r4, #32]
 800db26:	4628      	mov	r0, r5
 800db28:	47b0      	blx	r6
 800db2a:	1c43      	adds	r3, r0, #1
 800db2c:	89a3      	ldrh	r3, [r4, #12]
 800db2e:	d106      	bne.n	800db3e <__sflush_r+0x62>
 800db30:	6829      	ldr	r1, [r5, #0]
 800db32:	291d      	cmp	r1, #29
 800db34:	d82b      	bhi.n	800db8e <__sflush_r+0xb2>
 800db36:	4a2a      	ldr	r2, [pc, #168]	@ (800dbe0 <__sflush_r+0x104>)
 800db38:	410a      	asrs	r2, r1
 800db3a:	07d6      	lsls	r6, r2, #31
 800db3c:	d427      	bmi.n	800db8e <__sflush_r+0xb2>
 800db3e:	2200      	movs	r2, #0
 800db40:	04d9      	lsls	r1, r3, #19
 800db42:	6062      	str	r2, [r4, #4]
 800db44:	6922      	ldr	r2, [r4, #16]
 800db46:	6022      	str	r2, [r4, #0]
 800db48:	d504      	bpl.n	800db54 <__sflush_r+0x78>
 800db4a:	1c42      	adds	r2, r0, #1
 800db4c:	d101      	bne.n	800db52 <__sflush_r+0x76>
 800db4e:	682b      	ldr	r3, [r5, #0]
 800db50:	b903      	cbnz	r3, 800db54 <__sflush_r+0x78>
 800db52:	6560      	str	r0, [r4, #84]	@ 0x54
 800db54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db56:	602f      	str	r7, [r5, #0]
 800db58:	b1b9      	cbz	r1, 800db8a <__sflush_r+0xae>
 800db5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db5e:	4299      	cmp	r1, r3
 800db60:	d002      	beq.n	800db68 <__sflush_r+0x8c>
 800db62:	4628      	mov	r0, r5
 800db64:	f7ff fc9c 	bl	800d4a0 <_free_r>
 800db68:	2300      	movs	r3, #0
 800db6a:	6363      	str	r3, [r4, #52]	@ 0x34
 800db6c:	e00d      	b.n	800db8a <__sflush_r+0xae>
 800db6e:	2301      	movs	r3, #1
 800db70:	4628      	mov	r0, r5
 800db72:	47b0      	blx	r6
 800db74:	4602      	mov	r2, r0
 800db76:	1c50      	adds	r0, r2, #1
 800db78:	d1c9      	bne.n	800db0e <__sflush_r+0x32>
 800db7a:	682b      	ldr	r3, [r5, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d0c6      	beq.n	800db0e <__sflush_r+0x32>
 800db80:	2b1d      	cmp	r3, #29
 800db82:	d001      	beq.n	800db88 <__sflush_r+0xac>
 800db84:	2b16      	cmp	r3, #22
 800db86:	d11d      	bne.n	800dbc4 <__sflush_r+0xe8>
 800db88:	602f      	str	r7, [r5, #0]
 800db8a:	2000      	movs	r0, #0
 800db8c:	e021      	b.n	800dbd2 <__sflush_r+0xf6>
 800db8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db92:	b21b      	sxth	r3, r3
 800db94:	e01a      	b.n	800dbcc <__sflush_r+0xf0>
 800db96:	690f      	ldr	r7, [r1, #16]
 800db98:	2f00      	cmp	r7, #0
 800db9a:	d0f6      	beq.n	800db8a <__sflush_r+0xae>
 800db9c:	0793      	lsls	r3, r2, #30
 800db9e:	680e      	ldr	r6, [r1, #0]
 800dba0:	600f      	str	r7, [r1, #0]
 800dba2:	bf0c      	ite	eq
 800dba4:	694b      	ldreq	r3, [r1, #20]
 800dba6:	2300      	movne	r3, #0
 800dba8:	eba6 0807 	sub.w	r8, r6, r7
 800dbac:	608b      	str	r3, [r1, #8]
 800dbae:	f1b8 0f00 	cmp.w	r8, #0
 800dbb2:	ddea      	ble.n	800db8a <__sflush_r+0xae>
 800dbb4:	4643      	mov	r3, r8
 800dbb6:	463a      	mov	r2, r7
 800dbb8:	6a21      	ldr	r1, [r4, #32]
 800dbba:	4628      	mov	r0, r5
 800dbbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dbbe:	47b0      	blx	r6
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	dc08      	bgt.n	800dbd6 <__sflush_r+0xfa>
 800dbc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800dbd0:	81a3      	strh	r3, [r4, #12]
 800dbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd6:	4407      	add	r7, r0
 800dbd8:	eba8 0800 	sub.w	r8, r8, r0
 800dbdc:	e7e7      	b.n	800dbae <__sflush_r+0xd2>
 800dbde:	bf00      	nop
 800dbe0:	dfbffffe 	.word	0xdfbffffe

0800dbe4 <_fflush_r>:
 800dbe4:	b538      	push	{r3, r4, r5, lr}
 800dbe6:	690b      	ldr	r3, [r1, #16]
 800dbe8:	4605      	mov	r5, r0
 800dbea:	460c      	mov	r4, r1
 800dbec:	b913      	cbnz	r3, 800dbf4 <_fflush_r+0x10>
 800dbee:	2500      	movs	r5, #0
 800dbf0:	4628      	mov	r0, r5
 800dbf2:	bd38      	pop	{r3, r4, r5, pc}
 800dbf4:	b118      	cbz	r0, 800dbfe <_fflush_r+0x1a>
 800dbf6:	6a03      	ldr	r3, [r0, #32]
 800dbf8:	b90b      	cbnz	r3, 800dbfe <_fflush_r+0x1a>
 800dbfa:	f7ff fa3f 	bl	800d07c <__sinit>
 800dbfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d0f3      	beq.n	800dbee <_fflush_r+0xa>
 800dc06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dc08:	07d0      	lsls	r0, r2, #31
 800dc0a:	d404      	bmi.n	800dc16 <_fflush_r+0x32>
 800dc0c:	0599      	lsls	r1, r3, #22
 800dc0e:	d402      	bmi.n	800dc16 <_fflush_r+0x32>
 800dc10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc12:	f7ff fc42 	bl	800d49a <__retarget_lock_acquire_recursive>
 800dc16:	4628      	mov	r0, r5
 800dc18:	4621      	mov	r1, r4
 800dc1a:	f7ff ff5f 	bl	800dadc <__sflush_r>
 800dc1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc20:	4605      	mov	r5, r0
 800dc22:	07da      	lsls	r2, r3, #31
 800dc24:	d4e4      	bmi.n	800dbf0 <_fflush_r+0xc>
 800dc26:	89a3      	ldrh	r3, [r4, #12]
 800dc28:	059b      	lsls	r3, r3, #22
 800dc2a:	d4e1      	bmi.n	800dbf0 <_fflush_r+0xc>
 800dc2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc2e:	f7ff fc35 	bl	800d49c <__retarget_lock_release_recursive>
 800dc32:	e7dd      	b.n	800dbf0 <_fflush_r+0xc>

0800dc34 <__swhatbuf_r>:
 800dc34:	b570      	push	{r4, r5, r6, lr}
 800dc36:	460c      	mov	r4, r1
 800dc38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc3c:	b096      	sub	sp, #88	@ 0x58
 800dc3e:	4615      	mov	r5, r2
 800dc40:	2900      	cmp	r1, #0
 800dc42:	461e      	mov	r6, r3
 800dc44:	da0c      	bge.n	800dc60 <__swhatbuf_r+0x2c>
 800dc46:	89a3      	ldrh	r3, [r4, #12]
 800dc48:	2100      	movs	r1, #0
 800dc4a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dc4e:	bf14      	ite	ne
 800dc50:	2340      	movne	r3, #64	@ 0x40
 800dc52:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dc56:	2000      	movs	r0, #0
 800dc58:	6031      	str	r1, [r6, #0]
 800dc5a:	602b      	str	r3, [r5, #0]
 800dc5c:	b016      	add	sp, #88	@ 0x58
 800dc5e:	bd70      	pop	{r4, r5, r6, pc}
 800dc60:	466a      	mov	r2, sp
 800dc62:	f000 f87d 	bl	800dd60 <_fstat_r>
 800dc66:	2800      	cmp	r0, #0
 800dc68:	dbed      	blt.n	800dc46 <__swhatbuf_r+0x12>
 800dc6a:	9901      	ldr	r1, [sp, #4]
 800dc6c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc70:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dc74:	4259      	negs	r1, r3
 800dc76:	4159      	adcs	r1, r3
 800dc78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc7c:	e7eb      	b.n	800dc56 <__swhatbuf_r+0x22>

0800dc7e <__smakebuf_r>:
 800dc7e:	898b      	ldrh	r3, [r1, #12]
 800dc80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc82:	079d      	lsls	r5, r3, #30
 800dc84:	4606      	mov	r6, r0
 800dc86:	460c      	mov	r4, r1
 800dc88:	d507      	bpl.n	800dc9a <__smakebuf_r+0x1c>
 800dc8a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dc8e:	6023      	str	r3, [r4, #0]
 800dc90:	6123      	str	r3, [r4, #16]
 800dc92:	2301      	movs	r3, #1
 800dc94:	6163      	str	r3, [r4, #20]
 800dc96:	b003      	add	sp, #12
 800dc98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc9a:	ab01      	add	r3, sp, #4
 800dc9c:	466a      	mov	r2, sp
 800dc9e:	f7ff ffc9 	bl	800dc34 <__swhatbuf_r>
 800dca2:	9f00      	ldr	r7, [sp, #0]
 800dca4:	4605      	mov	r5, r0
 800dca6:	4630      	mov	r0, r6
 800dca8:	4639      	mov	r1, r7
 800dcaa:	f7ff f8cf 	bl	800ce4c <_malloc_r>
 800dcae:	b948      	cbnz	r0, 800dcc4 <__smakebuf_r+0x46>
 800dcb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcb4:	059a      	lsls	r2, r3, #22
 800dcb6:	d4ee      	bmi.n	800dc96 <__smakebuf_r+0x18>
 800dcb8:	f023 0303 	bic.w	r3, r3, #3
 800dcbc:	f043 0302 	orr.w	r3, r3, #2
 800dcc0:	81a3      	strh	r3, [r4, #12]
 800dcc2:	e7e2      	b.n	800dc8a <__smakebuf_r+0xc>
 800dcc4:	89a3      	ldrh	r3, [r4, #12]
 800dcc6:	6020      	str	r0, [r4, #0]
 800dcc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dccc:	81a3      	strh	r3, [r4, #12]
 800dcce:	9b01      	ldr	r3, [sp, #4]
 800dcd0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dcd4:	b15b      	cbz	r3, 800dcee <__smakebuf_r+0x70>
 800dcd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcda:	4630      	mov	r0, r6
 800dcdc:	f000 f852 	bl	800dd84 <_isatty_r>
 800dce0:	b128      	cbz	r0, 800dcee <__smakebuf_r+0x70>
 800dce2:	89a3      	ldrh	r3, [r4, #12]
 800dce4:	f023 0303 	bic.w	r3, r3, #3
 800dce8:	f043 0301 	orr.w	r3, r3, #1
 800dcec:	81a3      	strh	r3, [r4, #12]
 800dcee:	89a3      	ldrh	r3, [r4, #12]
 800dcf0:	431d      	orrs	r5, r3
 800dcf2:	81a5      	strh	r5, [r4, #12]
 800dcf4:	e7cf      	b.n	800dc96 <__smakebuf_r+0x18>

0800dcf6 <_putc_r>:
 800dcf6:	b570      	push	{r4, r5, r6, lr}
 800dcf8:	460d      	mov	r5, r1
 800dcfa:	4614      	mov	r4, r2
 800dcfc:	4606      	mov	r6, r0
 800dcfe:	b118      	cbz	r0, 800dd08 <_putc_r+0x12>
 800dd00:	6a03      	ldr	r3, [r0, #32]
 800dd02:	b90b      	cbnz	r3, 800dd08 <_putc_r+0x12>
 800dd04:	f7ff f9ba 	bl	800d07c <__sinit>
 800dd08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd0a:	07d8      	lsls	r0, r3, #31
 800dd0c:	d405      	bmi.n	800dd1a <_putc_r+0x24>
 800dd0e:	89a3      	ldrh	r3, [r4, #12]
 800dd10:	0599      	lsls	r1, r3, #22
 800dd12:	d402      	bmi.n	800dd1a <_putc_r+0x24>
 800dd14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd16:	f7ff fbc0 	bl	800d49a <__retarget_lock_acquire_recursive>
 800dd1a:	68a3      	ldr	r3, [r4, #8]
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	60a3      	str	r3, [r4, #8]
 800dd22:	da05      	bge.n	800dd30 <_putc_r+0x3a>
 800dd24:	69a2      	ldr	r2, [r4, #24]
 800dd26:	4293      	cmp	r3, r2
 800dd28:	db12      	blt.n	800dd50 <_putc_r+0x5a>
 800dd2a:	b2eb      	uxtb	r3, r5
 800dd2c:	2b0a      	cmp	r3, #10
 800dd2e:	d00f      	beq.n	800dd50 <_putc_r+0x5a>
 800dd30:	6823      	ldr	r3, [r4, #0]
 800dd32:	1c5a      	adds	r2, r3, #1
 800dd34:	6022      	str	r2, [r4, #0]
 800dd36:	701d      	strb	r5, [r3, #0]
 800dd38:	b2ed      	uxtb	r5, r5
 800dd3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd3c:	07da      	lsls	r2, r3, #31
 800dd3e:	d405      	bmi.n	800dd4c <_putc_r+0x56>
 800dd40:	89a3      	ldrh	r3, [r4, #12]
 800dd42:	059b      	lsls	r3, r3, #22
 800dd44:	d402      	bmi.n	800dd4c <_putc_r+0x56>
 800dd46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd48:	f7ff fba8 	bl	800d49c <__retarget_lock_release_recursive>
 800dd4c:	4628      	mov	r0, r5
 800dd4e:	bd70      	pop	{r4, r5, r6, pc}
 800dd50:	4629      	mov	r1, r5
 800dd52:	4622      	mov	r2, r4
 800dd54:	4630      	mov	r0, r6
 800dd56:	f7ff fa82 	bl	800d25e <__swbuf_r>
 800dd5a:	4605      	mov	r5, r0
 800dd5c:	e7ed      	b.n	800dd3a <_putc_r+0x44>
	...

0800dd60 <_fstat_r>:
 800dd60:	b538      	push	{r3, r4, r5, lr}
 800dd62:	2300      	movs	r3, #0
 800dd64:	4d06      	ldr	r5, [pc, #24]	@ (800dd80 <_fstat_r+0x20>)
 800dd66:	4604      	mov	r4, r0
 800dd68:	4608      	mov	r0, r1
 800dd6a:	4611      	mov	r1, r2
 800dd6c:	602b      	str	r3, [r5, #0]
 800dd6e:	f7f4 f9a2 	bl	80020b6 <_fstat>
 800dd72:	1c43      	adds	r3, r0, #1
 800dd74:	d102      	bne.n	800dd7c <_fstat_r+0x1c>
 800dd76:	682b      	ldr	r3, [r5, #0]
 800dd78:	b103      	cbz	r3, 800dd7c <_fstat_r+0x1c>
 800dd7a:	6023      	str	r3, [r4, #0]
 800dd7c:	bd38      	pop	{r3, r4, r5, pc}
 800dd7e:	bf00      	nop
 800dd80:	200007e8 	.word	0x200007e8

0800dd84 <_isatty_r>:
 800dd84:	b538      	push	{r3, r4, r5, lr}
 800dd86:	2300      	movs	r3, #0
 800dd88:	4d05      	ldr	r5, [pc, #20]	@ (800dda0 <_isatty_r+0x1c>)
 800dd8a:	4604      	mov	r4, r0
 800dd8c:	4608      	mov	r0, r1
 800dd8e:	602b      	str	r3, [r5, #0]
 800dd90:	f7f4 f9a1 	bl	80020d6 <_isatty>
 800dd94:	1c43      	adds	r3, r0, #1
 800dd96:	d102      	bne.n	800dd9e <_isatty_r+0x1a>
 800dd98:	682b      	ldr	r3, [r5, #0]
 800dd9a:	b103      	cbz	r3, 800dd9e <_isatty_r+0x1a>
 800dd9c:	6023      	str	r3, [r4, #0]
 800dd9e:	bd38      	pop	{r3, r4, r5, pc}
 800dda0:	200007e8 	.word	0x200007e8

0800dda4 <memchr>:
 800dda4:	b2c9      	uxtb	r1, r1
 800dda6:	4603      	mov	r3, r0
 800dda8:	4402      	add	r2, r0
 800ddaa:	b510      	push	{r4, lr}
 800ddac:	4293      	cmp	r3, r2
 800ddae:	4618      	mov	r0, r3
 800ddb0:	d101      	bne.n	800ddb6 <memchr+0x12>
 800ddb2:	2000      	movs	r0, #0
 800ddb4:	e003      	b.n	800ddbe <memchr+0x1a>
 800ddb6:	7804      	ldrb	r4, [r0, #0]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	428c      	cmp	r4, r1
 800ddbc:	d1f6      	bne.n	800ddac <memchr+0x8>
 800ddbe:	bd10      	pop	{r4, pc}

0800ddc0 <_init>:
 800ddc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc2:	bf00      	nop
 800ddc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddc6:	bc08      	pop	{r3}
 800ddc8:	469e      	mov	lr, r3
 800ddca:	4770      	bx	lr

0800ddcc <_fini>:
 800ddcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddce:	bf00      	nop
 800ddd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddd2:	bc08      	pop	{r3}
 800ddd4:	469e      	mov	lr, r3
 800ddd6:	4770      	bx	lr
