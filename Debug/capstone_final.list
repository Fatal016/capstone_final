
capstone_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d568  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012b7  0800d7b8  0800d7b8  0000e7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ea70  0800ea70  0000fa70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ea78  0800ea78  0000fa78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ea7c  0800ea7c  0000fa7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  20000000  0800ea80  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000071e  2000006c  0800eaec  0001006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000606  2000078a  0800eaec  0001078a  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0001006c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024453  00000000  00000000  000100a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000047a0  00000000  00000000  000344f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e50  00000000  00000000  00038c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017d5  00000000  00000000  0003aae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d3b4  00000000  00000000  0003c2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029159  00000000  00000000  00079671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00175df7  00000000  00000000  000a27ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002185c1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008868  00000000  00000000  00218604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000053  00000000  00000000  00220e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000006c 	.word	0x2000006c
 800026c:	00000000 	.word	0x00000000
 8000270:	0800d7a0 	.word	0x0800d7a0

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000070 	.word	0x20000070
 800028c:	0800d7a0 	.word	0x0800d7a0

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b97e 	b.w	80005a4 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14d      	bne.n	8000368 <__udivmoddi4+0xa8>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	460f      	mov	r7, r1
 80002d0:	4684      	mov	ip, r0
 80002d2:	4696      	mov	lr, r2
 80002d4:	fab2 f382 	clz	r3, r2
 80002d8:	d960      	bls.n	800039c <__udivmoddi4+0xdc>
 80002da:	b14b      	cbz	r3, 80002f0 <__udivmoddi4+0x30>
 80002dc:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80002ea:	fa20 f202 	lsr.w	r2, r0, r2
 80002ee:	4317      	orrs	r7, r2
 80002f0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f4:	fa1f f48e 	uxth.w	r4, lr
 80002f8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002fc:	fbb7 f1f6 	udiv	r1, r7, r6
 8000300:	fb06 7711 	mls	r7, r6, r1, r7
 8000304:	fb01 f004 	mul.w	r0, r1, r4
 8000308:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800030c:	4290      	cmp	r0, r2
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x62>
 8000310:	eb1e 0202 	adds.w	r2, lr, r2
 8000314:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x60>
 800031a:	4290      	cmp	r0, r2
 800031c:	f200 812d 	bhi.w	800057a <__udivmoddi4+0x2ba>
 8000320:	4639      	mov	r1, r7
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	fa1f fc8c 	uxth.w	ip, ip
 8000328:	fbb2 f0f6 	udiv	r0, r2, r6
 800032c:	fb06 2210 	mls	r2, r6, r0, r2
 8000330:	fb00 f404 	mul.w	r4, r0, r4
 8000334:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000338:	4564      	cmp	r4, ip
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x8e>
 800033c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x8c>
 8000346:	4564      	cmp	r4, ip
 8000348:	f200 811a 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 800034c:	4610      	mov	r0, r2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	ebac 0c04 	sub.w	ip, ip, r4
 8000356:	2100      	movs	r1, #0
 8000358:	b125      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035a:	fa2c f303 	lsr.w	r3, ip, r3
 800035e:	2200      	movs	r2, #0
 8000360:	e9c5 3200 	strd	r3, r2, [r5]
 8000364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000368:	428b      	cmp	r3, r1
 800036a:	d905      	bls.n	8000378 <__udivmoddi4+0xb8>
 800036c:	b10d      	cbz	r5, 8000372 <__udivmoddi4+0xb2>
 800036e:	e9c5 0100 	strd	r0, r1, [r5]
 8000372:	2100      	movs	r1, #0
 8000374:	4608      	mov	r0, r1
 8000376:	e7f5      	b.n	8000364 <__udivmoddi4+0xa4>
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	d14d      	bne.n	800041c <__udivmoddi4+0x15c>
 8000380:	42a3      	cmp	r3, r4
 8000382:	f0c0 80f2 	bcc.w	800056a <__udivmoddi4+0x2aa>
 8000386:	4290      	cmp	r0, r2
 8000388:	f080 80ef 	bcs.w	800056a <__udivmoddi4+0x2aa>
 800038c:	4606      	mov	r6, r0
 800038e:	4623      	mov	r3, r4
 8000390:	4608      	mov	r0, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e6      	beq.n	8000364 <__udivmoddi4+0xa4>
 8000396:	e9c5 6300 	strd	r6, r3, [r5]
 800039a:	e7e3      	b.n	8000364 <__udivmoddi4+0xa4>
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 80a2 	bne.w	80004e6 <__udivmoddi4+0x226>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a8:	fa1f f68e 	uxth.w	r6, lr
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f4f7 	udiv	r4, r2, r7
 80003b2:	fb07 2014 	mls	r0, r7, r4, r2
 80003b6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb06 f004 	mul.w	r0, r6, r4
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d90f      	bls.n	80003e6 <__udivmoddi4+0x126>
 80003c6:	eb1e 0202 	adds.w	r2, lr, r2
 80003ca:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 80003ce:	bf2c      	ite	cs
 80003d0:	f04f 0901 	movcs.w	r9, #1
 80003d4:	f04f 0900 	movcc.w	r9, #0
 80003d8:	4290      	cmp	r0, r2
 80003da:	d903      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003dc:	f1b9 0f00 	cmp.w	r9, #0
 80003e0:	f000 80c8 	beq.w	8000574 <__udivmoddi4+0x2b4>
 80003e4:	4644      	mov	r4, r8
 80003e6:	1a12      	subs	r2, r2, r0
 80003e8:	fa1f fc8c 	uxth.w	ip, ip
 80003ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f0:	fb07 2210 	mls	r2, r7, r0, r2
 80003f4:	fb00 f606 	mul.w	r6, r0, r6
 80003f8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003fc:	4566      	cmp	r6, ip
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x152>
 8000400:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000404:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000408:	d202      	bcs.n	8000410 <__udivmoddi4+0x150>
 800040a:	4566      	cmp	r6, ip
 800040c:	f200 80bb 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000410:	4610      	mov	r0, r2
 8000412:	ebac 0c06 	sub.w	ip, ip, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	e79d      	b.n	8000358 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa04 fe01 	lsl.w	lr, r4, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	fa20 fc06 	lsr.w	ip, r0, r6
 800042e:	40f4      	lsrs	r4, r6
 8000430:	408a      	lsls	r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	ea4e 030c 	orr.w	r3, lr, ip
 8000438:	fa00 fe01 	lsl.w	lr, r0, r1
 800043c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb4 f0f8 	udiv	r0, r4, r8
 800044c:	fb08 4410 	mls	r4, r8, r0, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb00 f90c 	mul.w	r9, r0, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1ba>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a1      	cmp	r9, r4
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 8093 	beq.w	800059e <__udivmoddi4+0x2de>
 8000478:	4650      	mov	r0, sl
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f8 	udiv	r3, r4, r8
 8000486:	fb08 4413 	mls	r4, r8, r3, r4
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000492:	45a4      	cmp	ip, r4
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1e4>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1e2>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d87a      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a8:	eba4 040c 	sub.w	r4, r4, ip
 80004ac:	fba0 9802 	umull	r9, r8, r0, r2
 80004b0:	4544      	cmp	r4, r8
 80004b2:	46cc      	mov	ip, r9
 80004b4:	4643      	mov	r3, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1fe>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x208>
 80004ba:	45ce      	cmp	lr, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x208>
 80004be:	3801      	subs	r0, #1
 80004c0:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c4:	eb68 0307 	sbc.w	r3, r8, r7
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x222>
 80004ca:	ebbe 020c 	subs.w	r2, lr, ip
 80004ce:	eb64 0403 	sbc.w	r4, r4, r3
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	fa22 f301 	lsr.w	r3, r2, r1
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	431e      	orrs	r6, r3
 80004de:	e9c5 6400 	strd	r6, r4, [r5]
 80004e2:	2100      	movs	r1, #0
 80004e4:	e73e      	b.n	8000364 <__udivmoddi4+0xa4>
 80004e6:	fa02 fe03 	lsl.w	lr, r2, r3
 80004ea:	f1c3 0120 	rsb	r1, r3, #32
 80004ee:	fa04 f203 	lsl.w	r2, r4, r3
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	40cc      	lsrs	r4, r1
 80004f8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004fc:	fa20 f101 	lsr.w	r1, r0, r1
 8000500:	fa1f f68e 	uxth.w	r6, lr
 8000504:	fbb4 f0f7 	udiv	r0, r4, r7
 8000508:	430a      	orrs	r2, r1
 800050a:	fb07 4410 	mls	r4, r7, r0, r4
 800050e:	0c11      	lsrs	r1, r2, #16
 8000510:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000514:	fb00 f406 	mul.w	r4, r0, r6
 8000518:	428c      	cmp	r4, r1
 800051a:	d90e      	bls.n	800053a <__udivmoddi4+0x27a>
 800051c:	eb1e 0101 	adds.w	r1, lr, r1
 8000520:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8000524:	bf2c      	ite	cs
 8000526:	f04f 0901 	movcs.w	r9, #1
 800052a:	f04f 0900 	movcc.w	r9, #0
 800052e:	428c      	cmp	r4, r1
 8000530:	d902      	bls.n	8000538 <__udivmoddi4+0x278>
 8000532:	f1b9 0f00 	cmp.w	r9, #0
 8000536:	d02c      	beq.n	8000592 <__udivmoddi4+0x2d2>
 8000538:	4640      	mov	r0, r8
 800053a:	1b09      	subs	r1, r1, r4
 800053c:	b292      	uxth	r2, r2
 800053e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000542:	fb07 1114 	mls	r1, r7, r4, r1
 8000546:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054a:	fb04 f106 	mul.w	r1, r4, r6
 800054e:	4291      	cmp	r1, r2
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x2a2>
 8000552:	eb1e 0202 	adds.w	r2, lr, r2
 8000556:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 800055a:	d201      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 800055c:	4291      	cmp	r1, r2
 800055e:	d815      	bhi.n	800058c <__udivmoddi4+0x2cc>
 8000560:	4644      	mov	r4, r8
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000568:	e721      	b.n	80003ae <__udivmoddi4+0xee>
 800056a:	1a86      	subs	r6, r0, r2
 800056c:	eb64 0303 	sbc.w	r3, r4, r3
 8000570:	2001      	movs	r0, #1
 8000572:	e70e      	b.n	8000392 <__udivmoddi4+0xd2>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e735      	b.n	80003e6 <__udivmoddi4+0x126>
 800057a:	3902      	subs	r1, #2
 800057c:	4472      	add	r2, lr
 800057e:	e6d0      	b.n	8000322 <__udivmoddi4+0x62>
 8000580:	44f4      	add	ip, lr
 8000582:	3802      	subs	r0, #2
 8000584:	e6e3      	b.n	800034e <__udivmoddi4+0x8e>
 8000586:	44f4      	add	ip, lr
 8000588:	3802      	subs	r0, #2
 800058a:	e742      	b.n	8000412 <__udivmoddi4+0x152>
 800058c:	3c02      	subs	r4, #2
 800058e:	4472      	add	r2, lr
 8000590:	e7e7      	b.n	8000562 <__udivmoddi4+0x2a2>
 8000592:	3802      	subs	r0, #2
 8000594:	4471      	add	r1, lr
 8000596:	e7d0      	b.n	800053a <__udivmoddi4+0x27a>
 8000598:	3b02      	subs	r3, #2
 800059a:	443c      	add	r4, r7
 800059c:	e782      	b.n	80004a4 <__udivmoddi4+0x1e4>
 800059e:	3802      	subs	r0, #2
 80005a0:	443c      	add	r4, r7
 80005a2:	e76a      	b.n	800047a <__udivmoddi4+0x1ba>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <EXTI12_IRQHandler>:
#endif /* __GNUC__ */
static void SystemClock_Config(void);
extern void isr(void);

void EXTI12_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
    uint16_t GPIO_Pin;

    /* Get GPIO_Pin */
    if (__HAL_GPIO_EXTI_GET_IT(CONF_WINC_SPI_INT_PIN))
 80005ae:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <EXTI12_IRQHandler+0x34>)
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d105      	bne.n	80005c6 <EXTI12_IRQHandler+0x1e>
 80005ba:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <EXTI12_IRQHandler+0x34>)
 80005bc:	691b      	ldr	r3, [r3, #16]
 80005be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d002      	beq.n	80005cc <EXTI12_IRQHandler+0x24>
    {
        GPIO_Pin = CONF_WINC_SPI_INT_PIN;
 80005c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ca:	80fb      	strh	r3, [r7, #6]
    }

    HAL_GPIO_EXTI_IRQHandler(GPIO_Pin);
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 f8ee 	bl	80037b0 <HAL_GPIO_EXTI_IRQHandler>
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	46022000 	.word	0x46022000

080005e0 <wifi_cb>:
  * @retval None
  */


static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	71fb      	strb	r3, [r7, #7]
	switch (u8MsgType) {
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	2b2c      	cmp	r3, #44	@ 0x2c
 80005f0:	d002      	beq.n	80005f8 <wifi_cb+0x18>
 80005f2:	2b32      	cmp	r3, #50	@ 0x32
 80005f4:	d00e      	beq.n	8000614 <wifi_cb+0x34>
			break;
		}

		default:
		{
			break;
 80005f6:	e027      	b.n	8000648 <wifi_cb+0x68>
			tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	60bb      	str	r3, [r7, #8]
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d020      	beq.n	8000646 <wifi_cb+0x66>
			} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d11c      	bne.n	8000646 <wifi_cb+0x66>
				printf("Station disconnected\r\n");
 800060c:	4810      	ldr	r0, [pc, #64]	@ (8000650 <wifi_cb+0x70>)
 800060e:	f00c facb 	bl	800cba8 <puts>
			break;
 8000612:	e018      	b.n	8000646 <wifi_cb+0x66>
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	60fb      	str	r3, [r7, #12]
			printf("Station connected\r\n");
 8000618:	480e      	ldr	r0, [pc, #56]	@ (8000654 <wifi_cb+0x74>)
 800061a:	f00c fac5 	bl	800cba8 <puts>
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	781b      	ldrb	r3, [r3, #0]
			printf("Station IP is %u.%u.%u.%u\r\n",
 8000622:	4619      	mov	r1, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	3301      	adds	r3, #1
 8000628:	781b      	ldrb	r3, [r3, #0]
			printf("Station IP is %u.%u.%u.%u\r\n",
 800062a:	461a      	mov	r2, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	3302      	adds	r3, #2
 8000630:	781b      	ldrb	r3, [r3, #0]
			printf("Station IP is %u.%u.%u.%u\r\n",
 8000632:	4618      	mov	r0, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	3303      	adds	r3, #3
 8000638:	781b      	ldrb	r3, [r3, #0]
			printf("Station IP is %u.%u.%u.%u\r\n",
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	4603      	mov	r3, r0
 800063e:	4806      	ldr	r0, [pc, #24]	@ (8000658 <wifi_cb+0x78>)
 8000640:	f00c fa42 	bl	800cac8 <iprintf>
			break;
 8000644:	e000      	b.n	8000648 <wifi_cb+0x68>
			break;
 8000646:	bf00      	nop
		}
	}
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	0800d7b8 	.word	0x0800d7b8
 8000654:	0800d7d0 	.word	0x0800d7d0
 8000658:	0800d7e4 	.word	0x0800d7e4

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b0ac      	sub	sp, #176	@ 0xb0
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000662:	f000 ff69 	bl	8001538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000666:	f000 f8d5 	bl	8000814 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800066a:	f000 f921 	bl	80008b0 <SystemPower_Config>

  /* USER CODE BEGIN SysInit */
  UartHandle.Instance        = USARTx;
 800066e:	4b60      	ldr	r3, [pc, #384]	@ (80007f0 <main+0x194>)
 8000670:	4a60      	ldr	r2, [pc, #384]	@ (80007f4 <main+0x198>)
 8000672:	601a      	str	r2, [r3, #0]

  UartHandle.Init.BaudRate   = 115200 ; //9600
 8000674:	4b5e      	ldr	r3, [pc, #376]	@ (80007f0 <main+0x194>)
 8000676:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800067a:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800067c:	4b5c      	ldr	r3, [pc, #368]	@ (80007f0 <main+0x194>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000682:	4b5b      	ldr	r3, [pc, #364]	@ (80007f0 <main+0x194>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE; //UART_PARITY_ODD
 8000688:	4b59      	ldr	r3, [pc, #356]	@ (80007f0 <main+0x194>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800068e:	4b58      	ldr	r3, [pc, #352]	@ (80007f0 <main+0x194>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000694:	4b56      	ldr	r3, [pc, #344]	@ (80007f0 <main+0x194>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800069a:	4b55      	ldr	r3, [pc, #340]	@ (80007f0 <main+0x194>)
 800069c:	2200      	movs	r2, #0
 800069e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80006a0:	4853      	ldr	r0, [pc, #332]	@ (80007f0 <main+0x194>)
 80006a2:	f008 f9eb 	bl	8008a7c <HAL_UART_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <main+0x54>
  {
    /* Initialization Error */
    Error_Handler();
 80006ac:	f000 fbcc 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b0:	f000 fb18 	bl	8000ce4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006b4:	f000 f914 	bl	80008e0 <MX_ADC1_Init>
  MX_AES_Init();
 80006b8:	f000 f982 	bl	80009c0 <MX_AES_Init>
  MX_I2C1_Init();
 80006bc:	f000 f9ba 	bl	8000a34 <MX_I2C1_Init>
  MX_ICACHE_Init();
 80006c0:	f000 f9f6 	bl	8000ab0 <MX_ICACHE_Init>
  MX_SPI1_Init();
 80006c4:	f000 fa08 	bl	8000ad8 <MX_SPI1_Init>
  MX_UART4_Init();
 80006c8:	f000 fa74 	bl	8000bb4 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80006cc:	f000 fabe 	bl	8000c4c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 80006d0:	4b49      	ldr	r3, [pc, #292]	@ (80007f8 <main+0x19c>)
 80006d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006d6:	4a48      	ldr	r2, [pc, #288]	@ (80007f8 <main+0x19c>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006e0:	4b45      	ldr	r3, [pc, #276]	@ (80007f8 <main+0x19c>)
 80006e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __GPIOA_CLK_ENABLE();
 80006ee:	4b42      	ldr	r3, [pc, #264]	@ (80007f8 <main+0x19c>)
 80006f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006f4:	4a40      	ldr	r2, [pc, #256]	@ (80007f8 <main+0x19c>)
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006fe:	4b3e      	ldr	r3, [pc, #248]	@ (80007f8 <main+0x19c>)
 8000700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
  __GPIOB_CLK_ENABLE();
 800070c:	4b3a      	ldr	r3, [pc, #232]	@ (80007f8 <main+0x19c>)
 800070e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000712:	4a39      	ldr	r2, [pc, #228]	@ (80007f8 <main+0x19c>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800071c:	4b36      	ldr	r3, [pc, #216]	@ (80007f8 <main+0x19c>)
 800071e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /* Initialize the BSP. */
  nm_bsp_init();
 800072a:	f008 ff1b 	bl	8009564 <nm_bsp_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
 800072e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000732:	2218      	movs	r2, #24
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f00c fb16 	bl	800cd68 <memset>

  /* Initialize Wi-Fi driver with data and status callbacks. */
  param.pfAppWifiCb = wifi_cb;
 800073c:	4b2f      	ldr	r3, [pc, #188]	@ (80007fc <main+0x1a0>)
 800073e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  ret = m2m_wifi_init(&param);
 8000742:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000746:	4618      	mov	r0, r3
 8000748:	f00a f9c2 	bl	800aad0 <m2m_wifi_init>
 800074c:	4603      	mov	r3, r0
 800074e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
  if (M2M_SUCCESS != ret) {
 8000752:	f997 30af 	ldrsb.w	r3, [r7, #175]	@ 0xaf
 8000756:	2b00      	cmp	r3, #0
 8000758:	d007      	beq.n	800076a <main+0x10e>
      printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
 800075a:	f997 30af 	ldrsb.w	r3, [r7, #175]	@ 0xaf
 800075e:	4619      	mov	r1, r3
 8000760:	4827      	ldr	r0, [pc, #156]	@ (8000800 <main+0x1a4>)
 8000762:	f00c f9b1 	bl	800cac8 <iprintf>
    	while (1) {}
 8000766:	bf00      	nop
 8000768:	e7fd      	b.n	8000766 <main+0x10a>
  }

  /* Initialize AP mode parameters structure with SSID, channel and OPEN security type. */
  memset(&strM2MAPConfig, 0x00, sizeof(tstrM2MAPConfig));
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	2288      	movs	r2, #136	@ 0x88
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f00c faf8 	bl	800cd68 <memset>
  strcpy((char *)&strM2MAPConfig.au8SSID, MAIN_WLAN_SSID);
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	4a21      	ldr	r2, [pc, #132]	@ (8000804 <main+0x1a8>)
 800077e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000780:	c303      	stmia	r3!, {r0, r1}
 8000782:	801a      	strh	r2, [r3, #0]
  strM2MAPConfig.u8ListenChannel = MAIN_WLAN_CHANNEL;
 8000784:	2306      	movs	r3, #6
 8000786:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  strM2MAPConfig.u8SecType = MAIN_WLAN_AUTH;
 800078a:	2302      	movs	r3, #2
 800078c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

  strM2MAPConfig.au8DHCPServerIP[0] = 192;
 8000790:	23c0      	movs	r3, #192	@ 0xc0
 8000792:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
  strM2MAPConfig.au8DHCPServerIP[1] = 168;
 8000796:	23a8      	movs	r3, #168	@ 0xa8
 8000798:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
  strM2MAPConfig.au8DHCPServerIP[2] = 1;
 800079c:	2301      	movs	r3, #1
 800079e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  strM2MAPConfig.au8DHCPServerIP[3] = 1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

  #if USE_WPA_PSK
    strcpy((char *)&strM2MAPConfig.au8Key, MAIN_WLAN_WPA_PSK_KEY);
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	3345      	adds	r3, #69	@ 0x45
 80007ae:	4a16      	ldr	r2, [pc, #88]	@ (8000808 <main+0x1ac>)
 80007b0:	6810      	ldr	r0, [r2, #0]
 80007b2:	6018      	str	r0, [r3, #0]
 80007b4:	7912      	ldrb	r2, [r2, #4]
 80007b6:	711a      	strb	r2, [r3, #4]
    strM2MAPConfig.u8KeySz = strlen(MAIN_WLAN_WPA_PSK_KEY);
 80007b8:	2304      	movs	r3, #4
 80007ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  #endif
    /* Bring up AP mode with parameters structure. */
  ret = m2m_wifi_enable_ap(&strM2MAPConfig);
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00a f9a8 	bl	800ab18 <m2m_wifi_enable_ap>
 80007c8:	4603      	mov	r3, r0
 80007ca:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
  if (M2M_SUCCESS != ret) {
 80007ce:	f997 30af 	ldrsb.w	r3, [r7, #175]	@ 0xaf
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d004      	beq.n	80007e0 <main+0x184>
    printf("main: m2m_wifi_enable_ap call error!\r\n");
 80007d6:	480d      	ldr	r0, [pc, #52]	@ (800080c <main+0x1b0>)
 80007d8:	f00c f9e6 	bl	800cba8 <puts>
    while (1) { }
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <main+0x180>
  }

  printf("AP mode started. You can connect to %s.\r\n", (char *)MAIN_WLAN_SSID);
 80007e0:	4908      	ldr	r1, [pc, #32]	@ (8000804 <main+0x1a8>)
 80007e2:	480b      	ldr	r0, [pc, #44]	@ (8000810 <main+0x1b4>)
 80007e4:	f00c f970 	bl	800cac8 <iprintf>
  while(1) {
    m2m_wifi_handle_events(NULL);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f00a f98a 	bl	800ab02 <m2m_wifi_handle_events>
 80007ee:	e7fb      	b.n	80007e8 <main+0x18c>
 80007f0:	200003a8 	.word	0x200003a8
 80007f4:	40013800 	.word	0x40013800
 80007f8:	46020c00 	.word	0x46020c00
 80007fc:	080005e1 	.word	0x080005e1
 8000800:	0800d800 	.word	0x0800d800
 8000804:	0800d828 	.word	0x0800d828
 8000808:	0800d834 	.word	0x0800d834
 800080c:	0800d83c 	.word	0x0800d83c
 8000810:	0800d864 	.word	0x0800d864

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b09e      	sub	sp, #120	@ 0x78
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	2260      	movs	r2, #96	@ 0x60
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f00c faa0 	bl	800cd68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	463b      	mov	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
 8000836:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000838:	2000      	movs	r0, #0
 800083a:	f003 f9d5 	bl	8003be8 <HAL_PWREx_ControlVoltageScaling>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000844:	f000 fb00 	bl	8000e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000848:	2312      	movs	r3, #18
 800084a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000852:	2310      	movs	r3, #16
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000856:	2301      	movs	r3, #1
 8000858:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800085a:	2310      	movs	r3, #16
 800085c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800085e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	4618      	mov	r0, r3
 800086e:	f003 fa67 	bl	8003d40 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000878:	f000 fae6 	bl	8000e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	231f      	movs	r3, #31
 800087e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f004 f92d 	bl	8004af8 <HAL_RCC_ClockConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a4:	f000 fad0 	bl	8000e48 <Error_Handler>
  }
}
 80008a8:	bf00      	nop
 80008aa:	3778      	adds	r7, #120	@ 0x78
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80008b6:	f003 fa23 	bl	8003d00 <HAL_PWREx_EnableVddIO2>

  PWR_PVDTypeDef sConfigPVD = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_7;
 80008c2:	23e0      	movs	r3, #224	@ 0xe0
 80008c4:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80008ca:	463b      	mov	r3, r7
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 f90d 	bl	8003aec <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 80008d2:	f003 f979 	bl	8003bc8 <HAL_PWR_EnablePVD>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008e6:	463b      	mov	r3, r7
 80008e8:	2220      	movs	r2, #32
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f00c fa3b 	bl	800cd68 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 80008f4:	4a2f      	ldr	r2, [pc, #188]	@ (80009b4 <MX_ADC1_Init+0xd4>)
 80008f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008f8:	4b2d      	ldr	r3, [pc, #180]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80008fe:	4b2c      	ldr	r3, [pc, #176]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000904:	4b2a      	ldr	r3, [pc, #168]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800090a:	4b29      	ldr	r3, [pc, #164]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000910:	4b27      	ldr	r3, [pc, #156]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000916:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000918:	2204      	movs	r2, #4
 800091a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800091c:	4b24      	ldr	r3, [pc, #144]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 800091e:	2200      	movs	r2, #0
 8000920:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000922:	4b23      	ldr	r3, [pc, #140]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 800092a:	4b21      	ldr	r3, [pc, #132]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 800092c:	2201      	movs	r2, #1
 800092e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000930:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000932:	2200      	movs	r2, #0
 8000934:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000938:	4b1d      	ldr	r3, [pc, #116]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 800093a:	2200      	movs	r2, #0
 800093c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093e:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000940:	2200      	movs	r2, #0
 8000942:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000944:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800094c:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 800094e:	2200      	movs	r2, #0
 8000950:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000954:	2200      	movs	r2, #0
 8000956:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000958:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 800095a:	2200      	movs	r2, #0
 800095c:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000960:	2200      	movs	r2, #0
 8000962:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800096c:	4810      	ldr	r0, [pc, #64]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 800096e:	f001 f9a7 	bl	8001cc0 <HAL_ADC_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000978:	f000 fa66 	bl	8000e48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800097c:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <MX_ADC1_Init+0xd8>)
 800097e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000980:	2306      	movs	r3, #6
 8000982:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <MX_ADC1_Init+0xdc>)
 800098a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800098c:	2304      	movs	r3, #4
 800098e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_ADC1_Init+0xd0>)
 800099a:	f001 fc79 	bl	8002290 <HAL_ADC_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80009a4:	f000 fa50 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000088 	.word	0x20000088
 80009b4:	42028000 	.word	0x42028000
 80009b8:	04000002 	.word	0x04000002
 80009bc:	ffff0000 	.word	0xffff0000

080009c0 <MX_AES_Init>:
  * @brief AES Initialization Function
  * @param None
  * @retval None
  */
static void MX_AES_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 80009c4:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <MX_AES_Init+0x60>)
 80009c6:	4a17      	ldr	r2, [pc, #92]	@ (8000a24 <MX_AES_Init+0x64>)
 80009c8:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_NO_SWAP;
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <MX_AES_Init+0x60>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <MX_AES_Init+0x60>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 80009d6:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <MX_AES_Init+0x60>)
 80009d8:	4a13      	ldr	r2, [pc, #76]	@ (8000a28 <MX_AES_Init+0x68>)
 80009da:	60da      	str	r2, [r3, #12]
  hcryp.Init.pInitVect = (uint32_t *)pInitVectAES;
 80009dc:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <MX_AES_Init+0x60>)
 80009de:	4a13      	ldr	r2, [pc, #76]	@ (8000a2c <MX_AES_Init+0x6c>)
 80009e0:	611a      	str	r2, [r3, #16]
  hcryp.Init.Algorithm = CRYP_AES_GCM_GMAC;
 80009e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_AES_Init+0x60>)
 80009e4:	2260      	movs	r2, #96	@ 0x60
 80009e6:	615a      	str	r2, [r3, #20]
  hcryp.Init.Header = (uint32_t *)HeaderAES;
 80009e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a20 <MX_AES_Init+0x60>)
 80009ea:	4a11      	ldr	r2, [pc, #68]	@ (8000a30 <MX_AES_Init+0x70>)
 80009ec:	619a      	str	r2, [r3, #24]
  hcryp.Init.HeaderSize = 1;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_AES_Init+0x60>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	61da      	str	r2, [r3, #28]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <MX_AES_Init+0x60>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_WORD;
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_AES_Init+0x60>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 8000a00:	4b07      	ldr	r3, [pc, #28]	@ (8000a20 <MX_AES_Init+0x60>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hcryp.Init.KeyMode = CRYP_KEYMODE_NORMAL;
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_AES_Init+0x60>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	@ (8000a20 <MX_AES_Init+0x60>)
 8000a0e:	f002 fc23 	bl	8003258 <HAL_CRYP_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_AES_Init+0x5c>
  {
    Error_Handler();
 8000a18:	f000 fa16 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000114 	.word	0x20000114
 8000a24:	420c0000 	.word	0x420c0000
 8000a28:	2000017c 	.word	0x2000017c
 8000a2c:	2000018c 	.word	0x2000018c
 8000a30:	0800e6a8 	.word	0x0800e6a8

08000a34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000aac <MX_I2C1_Init+0x78>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a40:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000a44:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a58:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a5e:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a64:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a70:	480d      	ldr	r0, [pc, #52]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a72:	f002 fed9 	bl	8003828 <HAL_I2C_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a7c:	f000 f9e4 	bl	8000e48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	4809      	ldr	r0, [pc, #36]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a84:	f002 ff6b 	bl	800395e <HAL_I2CEx_ConfigAnalogFilter>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a8e:	f000 f9db 	bl	8000e48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a92:	2100      	movs	r1, #0
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a96:	f002 ffad 	bl	80039f4 <HAL_I2CEx_ConfigDigitalFilter>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000aa0:	f000 f9d2 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000019c 	.word	0x2000019c
 8000aac:	40005400 	.word	0x40005400

08000ab0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f002 ffe9 	bl	8003a8c <HAL_ICACHE_ConfigAssociativityMode>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000ac0:	f000 f9c2 	bl	8000e48 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000ac4:	f003 f802 	bl	8003acc <HAL_ICACHE_Enable>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000ace:	f000 f9bb 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ae8:	4b30      	ldr	r3, [pc, #192]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000aea:	4a31      	ldr	r2, [pc, #196]	@ (8000bb0 <MX_SPI1_Init+0xd8>)
 8000aec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aee:	4b2f      	ldr	r3, [pc, #188]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000af0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000af4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000af6:	4b2d      	ldr	r3, [pc, #180]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000afc:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000afe:	2203      	movs	r2, #3
 8000b00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b02:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b08:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b0e:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b10:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b22:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b28:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b42:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b48:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b4e:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b54:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b72:	480e      	ldr	r0, [pc, #56]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b74:	f007 fae8 	bl	8008148 <HAL_SPI_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8000b7e:	f000 f963 	bl	8000e48 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000b86:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b8a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_SPI1_Init+0xd4>)
 8000b96:	f007 ff30 	bl	80089fa <HAL_SPIEx_SetConfigAutonomousMode>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8000ba0:	f000 f952 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200001f0 	.word	0x200001f0
 8000bb0:	40013000 	.word	0x40013000

08000bb4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bb8:	4b22      	ldr	r3, [pc, #136]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bba:	4a23      	ldr	r2, [pc, #140]	@ (8000c48 <MX_UART4_Init+0x94>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b17      	ldr	r3, [pc, #92]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bea:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bfc:	4811      	ldr	r0, [pc, #68]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000bfe:	f007 ff3d 	bl	8008a7c <HAL_UART_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000c08:	f000 f91e 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	480d      	ldr	r0, [pc, #52]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000c10:	f008 fb8a 	bl	8009328 <HAL_UARTEx_SetTxFifoThreshold>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000c1a:	f000 f915 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4808      	ldr	r0, [pc, #32]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000c22:	f008 fbbf 	bl	80093a4 <HAL_UARTEx_SetRxFifoThreshold>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000c2c:	f000 f90c 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000c30:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <MX_UART4_Init+0x90>)
 8000c32:	f008 fb40 	bl	80092b6 <HAL_UARTEx_DisableFifoMode>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c3c:	f000 f904 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000280 	.word	0x20000280
 8000c48:	40004c00 	.word	0x40004c00

08000c4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c50:	4b22      	ldr	r3, [pc, #136]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c52:	4a23      	ldr	r2, [pc, #140]	@ (8000ce0 <MX_USART1_UART_Init+0x94>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c56:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c82:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c94:	4811      	ldr	r0, [pc, #68]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000c96:	f007 fef1 	bl	8008a7c <HAL_UART_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ca0:	f000 f8d2 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000ca8:	f008 fb3e 	bl	8009328 <HAL_UARTEx_SetTxFifoThreshold>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cb2:	f000 f8c9 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4808      	ldr	r0, [pc, #32]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000cba:	f008 fb73 	bl	80093a4 <HAL_UARTEx_SetRxFifoThreshold>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cc4:	f000 f8c0 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <MX_USART1_UART_Init+0x90>)
 8000cca:	f008 faf4 	bl	80092b6 <HAL_UARTEx_DisableFifoMode>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cd4:	f000 f8b8 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000314 	.word	0x20000314
 8000ce0:	40013800 	.word	0x40013800

08000ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	@ 0x28
 8000ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b4e      	ldr	r3, [pc, #312]	@ (8000e34 <MX_GPIO_Init+0x150>)
 8000cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d00:	4a4c      	ldr	r2, [pc, #304]	@ (8000e34 <MX_GPIO_Init+0x150>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e34 <MX_GPIO_Init+0x150>)
 8000d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b46      	ldr	r3, [pc, #280]	@ (8000e34 <MX_GPIO_Init+0x150>)
 8000d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d1e:	4a45      	ldr	r2, [pc, #276]	@ (8000e34 <MX_GPIO_Init+0x150>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d28:	4b42      	ldr	r3, [pc, #264]	@ (8000e34 <MX_GPIO_Init+0x150>)
 8000d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	4b3f      	ldr	r3, [pc, #252]	@ (8000e34 <MX_GPIO_Init+0x150>)
 8000d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d3c:	4a3d      	ldr	r2, [pc, #244]	@ (8000e34 <MX_GPIO_Init+0x150>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d46:	4b3b      	ldr	r3, [pc, #236]	@ (8000e34 <MX_GPIO_Init+0x150>)
 8000d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d54:	4b37      	ldr	r3, [pc, #220]	@ (8000e34 <MX_GPIO_Init+0x150>)
 8000d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d5a:	4a36      	ldr	r2, [pc, #216]	@ (8000e34 <MX_GPIO_Init+0x150>)
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d64:	4b33      	ldr	r3, [pc, #204]	@ (8000e34 <MX_GPIO_Init+0x150>)
 8000d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d72:	4b30      	ldr	r3, [pc, #192]	@ (8000e34 <MX_GPIO_Init+0x150>)
 8000d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d78:	4a2e      	ldr	r2, [pc, #184]	@ (8000e34 <MX_GPIO_Init+0x150>)
 8000d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d82:	4b2c      	ldr	r3, [pc, #176]	@ (8000e34 <MX_GPIO_Init+0x150>)
 8000d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_CHIP_ENABLE_GPIO_Port, WIFI_CHIP_ENABLE_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d96:	4828      	ldr	r0, [pc, #160]	@ (8000e38 <MX_GPIO_Init+0x154>)
 8000d98:	f002 fcf2 	bl	8003780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_WAKE_GPIO_Port, WIFI_WAKE_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2140      	movs	r1, #64	@ 0x40
 8000da0:	4826      	ldr	r0, [pc, #152]	@ (8000e3c <MX_GPIO_Init+0x158>)
 8000da2:	f002 fced 	bl	8003780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WIFI_CHIP_ENABLE_Pin */
  GPIO_InitStruct.Pin = WIFI_CHIP_ENABLE_Pin;
 8000da6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_CHIP_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	481e      	ldr	r0, [pc, #120]	@ (8000e38 <MX_GPIO_Init+0x154>)
 8000dc0:	f002 fb06 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RESET_Pin */
  GPIO_InitStruct.Pin = WIFI_RESET_Pin;
 8000dc4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <MX_GPIO_Init+0x15c>)
 8000dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WIFI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	481a      	ldr	r0, [pc, #104]	@ (8000e44 <MX_GPIO_Init+0x160>)
 8000dda:	f002 faf9 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_INT_Pin */
  GPIO_InitStruct.Pin = WIFI_INT_Pin;
 8000dde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WIFI_INT_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	4814      	ldr	r0, [pc, #80]	@ (8000e44 <MX_GPIO_Init+0x160>)
 8000df4:	f002 faec 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_WAKE_Pin */
  GPIO_InitStruct.Pin = WIFI_WAKE_Pin;
 8000df8:	2340      	movs	r3, #64	@ 0x40
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_WAKE_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480b      	ldr	r0, [pc, #44]	@ (8000e3c <MX_GPIO_Init+0x158>)
 8000e10:	f002 fade 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e14:	2380      	movs	r3, #128	@ 0x80
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	4804      	ldr	r0, [pc, #16]	@ (8000e38 <MX_GPIO_Init+0x154>)
 8000e28:	f002 fad2 	bl	80033d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	@ 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	46020c00 	.word	0x46020c00
 8000e38:	42020400 	.word	0x42020400
 8000e3c:	42020800 	.word	0x42020800
 8000e40:	10110000 	.word	0x10110000
 8000e44:	42020c00 	.word	0x42020c00

08000e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4c:	b672      	cpsid	i
}
 8000e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <Error_Handler+0x8>

08000e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <HAL_MspInit+0x30>)
 8000e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e60:	4a08      	ldr	r2, [pc, #32]	@ (8000e84 <HAL_MspInit+0x30>)
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_MspInit+0x30>)
 8000e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000e78:	f002 ff52 	bl	8003d20 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	46020c00 	.word	0x46020c00

08000e88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0c0      	sub	sp, #256	@ 0x100
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	22d8      	movs	r2, #216	@ 0xd8
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f00b ff5d 	bl	800cd68 <memset>
  if(hadc->Instance==ADC1)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a24      	ldr	r2, [pc, #144]	@ (8000f44 <HAL_ADC_MspInit+0xbc>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d140      	bne.n	8000f3a <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000eb8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000ec4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ec8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f004 f9e1 	bl	8005298 <HAL_RCCEx_PeriphCLKConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000edc:	f7ff ffb4 	bl	8000e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <HAL_ADC_MspInit+0xc0>)
 8000ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ee6:	4a18      	ldr	r2, [pc, #96]	@ (8000f48 <HAL_ADC_MspInit+0xc0>)
 8000ee8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ef0:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <HAL_ADC_MspInit+0xc0>)
 8000ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <HAL_ADC_MspInit+0xc0>)
 8000f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f04:	4a10      	ldr	r2, [pc, #64]	@ (8000f48 <HAL_ADC_MspInit+0xc0>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <HAL_ADC_MspInit+0xc0>)
 8000f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f22:	2303      	movs	r3, #3
 8000f24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <HAL_ADC_MspInit+0xc4>)
 8000f36:	f002 fa4b 	bl	80033d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	42028000 	.word	0x42028000
 8000f48:	46020c00 	.word	0x46020c00
 8000f4c:	42020800 	.word	0x42020800

08000f50 <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f8c <HAL_CRYP_MspInit+0x3c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d10e      	bne.n	8000f80 <HAL_CRYP_MspInit+0x30>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 8000f62:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <HAL_CRYP_MspInit+0x40>)
 8000f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f68:	4a09      	ldr	r2, [pc, #36]	@ (8000f90 <HAL_CRYP_MspInit+0x40>)
 8000f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f72:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <HAL_CRYP_MspInit+0x40>)
 8000f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }

}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	420c0000 	.word	0x420c0000
 8000f90:	46020c00 	.word	0x46020c00

08000f94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0c0      	sub	sp, #256	@ 0x100
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	22d8      	movs	r2, #216	@ 0xd8
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f00b fed7 	bl	800cd68 <memset>
  if(hi2c->Instance==I2C1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a27      	ldr	r2, [pc, #156]	@ (800105c <HAL_I2C_MspInit+0xc8>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d145      	bne.n	8001050 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fc4:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 f95d 	bl	8005298 <HAL_RCCEx_PeriphCLKConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000fe4:	f7ff ff30 	bl	8000e48 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8001060 <HAL_I2C_MspInit+0xcc>)
 8000fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fee:	4a1c      	ldr	r2, [pc, #112]	@ (8001060 <HAL_I2C_MspInit+0xcc>)
 8000ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ff4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ff8:	4b19      	ldr	r3, [pc, #100]	@ (8001060 <HAL_I2C_MspInit+0xcc>)
 8000ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001006:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800100a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100e:	2312      	movs	r3, #18
 8001010:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001020:	2304      	movs	r3, #4
 8001022:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001026:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800102a:	4619      	mov	r1, r3
 800102c:	480d      	ldr	r0, [pc, #52]	@ (8001064 <HAL_I2C_MspInit+0xd0>)
 800102e:	f002 f9cf 	bl	80033d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001032:	4b0b      	ldr	r3, [pc, #44]	@ (8001060 <HAL_I2C_MspInit+0xcc>)
 8001034:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001038:	4a09      	ldr	r2, [pc, #36]	@ (8001060 <HAL_I2C_MspInit+0xcc>)
 800103a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800103e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001042:	4b07      	ldr	r3, [pc, #28]	@ (8001060 <HAL_I2C_MspInit+0xcc>)
 8001044:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001050:	bf00      	nop
 8001052:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40005400 	.word	0x40005400
 8001060:	46020c00 	.word	0x46020c00
 8001064:	42021800 	.word	0x42021800

08001068 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b0c0      	sub	sp, #256	@ 0x100
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	22d8      	movs	r2, #216	@ 0xd8
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f00b fe6d 	bl	800cd68 <memset>
  if(hspi->Instance==SPI1)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a27      	ldr	r2, [pc, #156]	@ (8001130 <HAL_SPI_MspInit+0xc8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d146      	bne.n	8001126 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001098:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800109c:	f04f 0300 	mov.w	r3, #0
 80010a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80010a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80010a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4618      	mov	r0, r3
 80010b2:	f004 f8f1 	bl	8005298 <HAL_RCCEx_PeriphCLKConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80010bc:	f7ff fec4 	bl	8000e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <HAL_SPI_MspInit+0xcc>)
 80010c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80010c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001134 <HAL_SPI_MspInit+0xcc>)
 80010c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010cc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80010d0:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <HAL_SPI_MspInit+0xcc>)
 80010d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80010d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <HAL_SPI_MspInit+0xcc>)
 80010e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010e4:	4a13      	ldr	r2, [pc, #76]	@ (8001134 <HAL_SPI_MspInit+0xcc>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <HAL_SPI_MspInit+0xcc>)
 80010f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = WIFI_SCK_Pin|WIFI_MISO_Pin|WIFI_MOSI_Pin;
 80010fc:	23e0      	movs	r3, #224	@ 0xe0
 80010fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001114:	2305      	movs	r3, #5
 8001116:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	@ (8001138 <HAL_SPI_MspInit+0xd0>)
 8001122:	f002 f955 	bl	80033d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001126:	bf00      	nop
 8001128:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40013000 	.word	0x40013000
 8001134:	46020c00 	.word	0x46020c00
 8001138:	42020000 	.word	0x42020000

0800113c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b0c2      	sub	sp, #264	@ 0x108
 8001140:	af00      	add	r7, sp, #0
 8001142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001146:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800114a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	22d8      	movs	r2, #216	@ 0xd8
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00b fdff 	bl	800cd68 <memset>
  if(huart->Instance==UART4)
 800116a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800116e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a52      	ldr	r2, [pc, #328]	@ (80012c0 <HAL_UART_MspInit+0x184>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d145      	bne.n	8001208 <HAL_UART_MspInit+0xcc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800117c:	f04f 0208 	mov.w	r2, #8
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001188:	2300      	movs	r3, #0
 800118a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118c:	f107 0318 	add.w	r3, r7, #24
 8001190:	4618      	mov	r0, r3
 8001192:	f004 f881 	bl	8005298 <HAL_RCCEx_PeriphCLKConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 800119c:	f7ff fe54 	bl	8000e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011a0:	4b48      	ldr	r3, [pc, #288]	@ (80012c4 <HAL_UART_MspInit+0x188>)
 80011a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80011a6:	4a47      	ldr	r2, [pc, #284]	@ (80012c4 <HAL_UART_MspInit+0x188>)
 80011a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011ac:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80011b0:	4b44      	ldr	r3, [pc, #272]	@ (80012c4 <HAL_UART_MspInit+0x188>)
 80011b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80011b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b41      	ldr	r3, [pc, #260]	@ (80012c4 <HAL_UART_MspInit+0x188>)
 80011c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c4:	4a3f      	ldr	r2, [pc, #252]	@ (80012c4 <HAL_UART_MspInit+0x188>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011ce:	4b3d      	ldr	r3, [pc, #244]	@ (80012c4 <HAL_UART_MspInit+0x188>)
 80011d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011dc:	2303      	movs	r3, #3
 80011de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80011f4:	2308      	movs	r3, #8
 80011f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80011fe:	4619      	mov	r1, r3
 8001200:	4831      	ldr	r0, [pc, #196]	@ (80012c8 <HAL_UART_MspInit+0x18c>)
 8001202:	f002 f8e5 	bl	80033d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001206:	e056      	b.n	80012b6 <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==USART1)
 8001208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800120c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a2d      	ldr	r2, [pc, #180]	@ (80012cc <HAL_UART_MspInit+0x190>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d14d      	bne.n	80012b6 <HAL_UART_MspInit+0x17a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800121a:	f04f 0201 	mov.w	r2, #1
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001226:	2300      	movs	r3, #0
 8001228:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800122a:	f107 0318 	add.w	r3, r7, #24
 800122e:	4618      	mov	r0, r3
 8001230:	f004 f832 	bl	8005298 <HAL_RCCEx_PeriphCLKConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_UART_MspInit+0x102>
      Error_Handler();
 800123a:	f7ff fe05 	bl	8000e48 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800123e:	4b21      	ldr	r3, [pc, #132]	@ (80012c4 <HAL_UART_MspInit+0x188>)
 8001240:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001244:	4a1f      	ldr	r2, [pc, #124]	@ (80012c4 <HAL_UART_MspInit+0x188>)
 8001246:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800124a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800124e:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <HAL_UART_MspInit+0x188>)
 8001250:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001254:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <HAL_UART_MspInit+0x188>)
 800125e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001262:	4a18      	ldr	r2, [pc, #96]	@ (80012c4 <HAL_UART_MspInit+0x188>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800126c:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <HAL_UART_MspInit+0x188>)
 800126e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001272:	f003 0201 	and.w	r2, r3, #1
 8001276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800127a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001284:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001288:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800128a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800128e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012a4:	2307      	movs	r3, #7
 80012a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <HAL_UART_MspInit+0x18c>)
 80012b2:	f002 f88d 	bl	80033d0 <HAL_GPIO_Init>
}
 80012b6:	bf00      	nop
 80012b8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40004c00 	.word	0x40004c00
 80012c4:	46020c00 	.word	0x46020c00
 80012c8:	42020000 	.word	0x42020000
 80012cc:	40013800 	.word	0x40013800

080012d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <NMI_Handler+0x4>

080012d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <HardFault_Handler+0x4>

080012e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <MemManage_Handler+0x4>

080012e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001326:	f000 f9ad 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}

0800132e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	e00a      	b.n	8001356 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001340:	f3af 8000 	nop.w
 8001344:	4601      	mov	r1, r0
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	60ba      	str	r2, [r7, #8]
 800134c:	b2ca      	uxtb	r2, r1
 800134e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	429a      	cmp	r2, r3
 800135c:	dbf0      	blt.n	8001340 <_read+0x12>
  }

  return len;
 800135e:	687b      	ldr	r3, [r7, #4]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e009      	b.n	800138e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	60ba      	str	r2, [r7, #8]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3301      	adds	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	dbf1      	blt.n	800137a <_write+0x12>
  }
  return len;
 8001396:	687b      	ldr	r3, [r7, #4]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_close>:

int _close(int file)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013c8:	605a      	str	r2, [r3, #4]
  return 0;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <_isatty>:

int _isatty(int file)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013e0:	2301      	movs	r3, #1
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b085      	sub	sp, #20
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	60f8      	str	r0, [r7, #12]
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001410:	4a14      	ldr	r2, [pc, #80]	@ (8001464 <_sbrk+0x5c>)
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <_sbrk+0x60>)
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <_sbrk+0x64>)
 8001426:	4a12      	ldr	r2, [pc, #72]	@ (8001470 <_sbrk+0x68>)
 8001428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	429a      	cmp	r2, r3
 8001436:	d207      	bcs.n	8001448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001438:	f00b fcf4 	bl	800ce24 <__errno>
 800143c:	4603      	mov	r3, r0
 800143e:	220c      	movs	r2, #12
 8001440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001446:	e009      	b.n	800145c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144e:	4b07      	ldr	r3, [pc, #28]	@ (800146c <_sbrk+0x64>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	4a05      	ldr	r2, [pc, #20]	@ (800146c <_sbrk+0x64>)
 8001458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145a:	68fb      	ldr	r3, [r7, #12]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20270000 	.word	0x20270000
 8001468:	00000400 	.word	0x00000400
 800146c:	2000043c 	.word	0x2000043c
 8001470:	20000790 	.word	0x20000790

08001474 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001478:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <SystemInit+0x68>)
 800147a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800147e:	4a17      	ldr	r2, [pc, #92]	@ (80014dc <SystemInit+0x68>)
 8001480:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001484:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001488:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <SystemInit+0x6c>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800148e:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <SystemInit+0x6c>)
 8001490:	2200      	movs	r2, #0
 8001492:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <SystemInit+0x6c>)
 8001496:	2200      	movs	r2, #0
 8001498:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <SystemInit+0x6c>)
 800149c:	2200      	movs	r2, #0
 800149e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <SystemInit+0x6c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0e      	ldr	r2, [pc, #56]	@ (80014e0 <SystemInit+0x6c>)
 80014a6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80014aa:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80014ae:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80014b0:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <SystemInit+0x6c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <SystemInit+0x6c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a09      	ldr	r2, [pc, #36]	@ (80014e0 <SystemInit+0x6c>)
 80014bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80014c2:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <SystemInit+0x6c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014c8:	4b04      	ldr	r3, [pc, #16]	@ (80014dc <SystemInit+0x68>)
 80014ca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014ce:	609a      	str	r2, [r3, #8]
  #endif
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00
 80014e0:	46020c00 	.word	0x46020c00

080014e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800151c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014e8:	f7ff ffc4 	bl	8001474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014ee:	e003      	b.n	80014f8 <LoopCopyDataInit>

080014f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014f6:	3104      	adds	r1, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014f8:	480a      	ldr	r0, [pc, #40]	@ (8001524 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <LoopForever+0xe>)
	adds	r2, r0, r1
 80014fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001500:	d3f6      	bcc.n	80014f0 <CopyDataInit>
	ldr	r2, =_sbss
 8001502:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001504:	e002      	b.n	800150c <LoopFillZerobss>

08001506 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001506:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001508:	f842 3b04 	str.w	r3, [r2], #4

0800150c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800150c:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <LoopForever+0x16>)
	cmp	r2, r3
 800150e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001510:	d3f9      	bcc.n	8001506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001512:	f00b fc8d 	bl	800ce30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001516:	f7ff f8a1 	bl	800065c <main>

0800151a <LoopForever>:

LoopForever:
    b LoopForever
 800151a:	e7fe      	b.n	800151a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800151c:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8001520:	0800ea80 	.word	0x0800ea80
	ldr	r0, =_sdata
 8001524:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001528:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 800152c:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 8001530:	2000078a 	.word	0x2000078a

08001534 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC1_2_IRQHandler>
	...

08001538 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <HAL_Init+0x50>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a11      	ldr	r2, [pc, #68]	@ (8001588 <HAL_Init+0x50>)
 8001542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001546:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001548:	2003      	movs	r0, #3
 800154a:	f001 fd90 	bl	800306e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800154e:	f003 fcc5 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8001552:	4602      	mov	r2, r0
 8001554:	4b0d      	ldr	r3, [pc, #52]	@ (800158c <HAL_Init+0x54>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	490c      	ldr	r1, [pc, #48]	@ (8001590 <HAL_Init+0x58>)
 800155e:	5ccb      	ldrb	r3, [r1, r3]
 8001560:	fa22 f303 	lsr.w	r3, r2, r3
 8001564:	4a0b      	ldr	r2, [pc, #44]	@ (8001594 <HAL_Init+0x5c>)
 8001566:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001568:	2004      	movs	r0, #4
 800156a:	f001 fde3 	bl	8003134 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800156e:	200f      	movs	r0, #15
 8001570:	f000 f812 	bl	8001598 <HAL_InitTick>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e002      	b.n	8001584 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800157e:	f7ff fc69 	bl	8000e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40022000 	.word	0x40022000
 800158c:	46020c00 	.word	0x46020c00
 8001590:	0800e6ac 	.word	0x0800e6ac
 8001594:	20000000 	.word	0x20000000

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80015a4:	4b33      	ldr	r3, [pc, #204]	@ (8001674 <HAL_InitTick+0xdc>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e05c      	b.n	800166a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80015b0:	4b31      	ldr	r3, [pc, #196]	@ (8001678 <HAL_InitTick+0xe0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d10c      	bne.n	80015d6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80015bc:	4b2f      	ldr	r3, [pc, #188]	@ (800167c <HAL_InitTick+0xe4>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001674 <HAL_InitTick+0xdc>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	e037      	b.n	8001646 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80015d6:	f001 fe05 	bl	80031e4 <HAL_SYSTICK_GetCLKSourceConfig>
 80015da:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d023      	beq.n	800162a <HAL_InitTick+0x92>
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d82d      	bhi.n	8001644 <HAL_InitTick+0xac>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_InitTick+0x5e>
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d00d      	beq.n	8001610 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80015f4:	e026      	b.n	8001644 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80015f6:	4b21      	ldr	r3, [pc, #132]	@ (800167c <HAL_InitTick+0xe4>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <HAL_InitTick+0xdc>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	4619      	mov	r1, r3
 8001600:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001604:	fbb3 f3f1 	udiv	r3, r3, r1
 8001608:	fbb2 f3f3 	udiv	r3, r2, r3
 800160c:	60fb      	str	r3, [r7, #12]
        break;
 800160e:	e01a      	b.n	8001646 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001610:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <HAL_InitTick+0xdc>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800161a:	fbb3 f3f2 	udiv	r3, r3, r2
 800161e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	60fb      	str	r3, [r7, #12]
        break;
 8001628:	e00d      	b.n	8001646 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <HAL_InitTick+0xdc>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001634:	fbb3 f3f2 	udiv	r3, r3, r2
 8001638:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800163c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001640:	60fb      	str	r3, [r7, #12]
        break;
 8001642:	e000      	b.n	8001646 <HAL_InitTick+0xae>
        break;
 8001644:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f001 fd52 	bl	80030f0 <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e009      	b.n	800166a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001656:	2200      	movs	r2, #0
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800165e:	f001 fd11 	bl	8003084 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001662:	4a07      	ldr	r2, [pc, #28]	@ (8001680 <HAL_InitTick+0xe8>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008
 8001678:	e000e010 	.word	0xe000e010
 800167c:	20000000 	.word	0x20000000
 8001680:	20000004 	.word	0x20000004

08001684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_IncTick+0x20>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_IncTick+0x24>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <HAL_IncTick+0x24>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000440 	.word	0x20000440

080016ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;
 80016b0:	4b03      	ldr	r3, [pc, #12]	@ (80016c0 <HAL_GetTick+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000440 	.word	0x20000440

080016c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016cc:	f7ff ffee 	bl	80016ac <HAL_GetTick>
 80016d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016dc:	d005      	beq.n	80016ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <HAL_Delay+0x44>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ea:	bf00      	nop
 80016ec:	f7ff ffde 	bl	80016ac <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d8f7      	bhi.n	80016ec <HAL_Delay+0x28>
  {
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000008 	.word	0x20000008

0800170c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	609a      	str	r2, [r3, #8]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	609a      	str	r2, [r3, #8]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <LL_ADC_SetResolution+0x3c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d104      	bne.n	8001794 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3b01      	subs	r3, #1
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	f023 020c 	bic.w	r2, r3, #12
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	60da      	str	r2, [r3, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	46021000 	.word	0x46021000

080017b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3360      	adds	r3, #96	@ 0x60
 80017c6:	461a      	mov	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	430b      	orrs	r3, r1
 80017e4:	431a      	orrs	r2, r3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80017ea:	bf00      	nop
 80017ec:	371c      	adds	r7, #28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3360      	adds	r3, #96	@ 0x60
 8001804:	461a      	mov	r2, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8001816:	4618      	mov	r0, r3
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001822:	b480      	push	{r7}
 8001824:	b087      	sub	sp, #28
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3360      	adds	r3, #96	@ 0x60
 8001832:	461a      	mov	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	431a      	orrs	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	601a      	str	r2, [r3, #0]
}
 800184c:	bf00      	nop
 800184e:	371c      	adds	r7, #28
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3360      	adds	r3, #96	@ 0x60
 8001868:	461a      	mov	r2, r3
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	431a      	orrs	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	601a      	str	r2, [r3, #0]
}
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800188e:	b480      	push	{r7}
 8001890:	b087      	sub	sp, #28
 8001892:	af00      	add	r7, sp, #0
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	3360      	adds	r3, #96	@ 0x60
 800189e:	461a      	mov	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	601a      	str	r2, [r3, #0]
}
 80018b8:	bf00      	nop
 80018ba:	371c      	adds	r7, #28
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	2a00      	cmp	r2, #0
 80018ee:	d002      	beq.n	80018f6 <LL_ADC_SetGainCompensation+0x32>
 80018f0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80018f4:	e000      	b.n	80018f8 <LL_ADC_SetGainCompensation+0x34>
 80018f6:	2200      	movs	r2, #0
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800190a:	b480      	push	{r7}
 800190c:	b085      	sub	sp, #20
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2107      	movs	r1, #7
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	401a      	ands	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	431a      	orrs	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	@ 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4a2b      	ldr	r2, [pc, #172]	@ (8001a04 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d020      	beq.n	800199e <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3330      	adds	r3, #48	@ 0x30
 8001960:	461a      	mov	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	4413      	add	r3, r2
 800196e:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f003 031f 	and.w	r3, r3, #31
 800197a:	211f      	movs	r1, #31
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	401a      	ands	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	0e9b      	lsrs	r3, r3, #26
 8001988:	f003 011f 	and.w	r1, r3, #31
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	431a      	orrs	r2, r3
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 800199c:	e02b      	b.n	80019f6 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f003 031f 	and.w	r3, r3, #31
 80019a8:	210f      	movs	r1, #15
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	401a      	ands	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d104      	bne.n	80019c6 <LL_ADC_REG_SetSequencerRanks+0x7e>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	0e9b      	lsrs	r3, r3, #26
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	e010      	b.n	80019e8 <LL_ADC_REG_SetSequencerRanks+0xa0>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	613b      	str	r3, [r7, #16]
  return result;
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 80019dc:	2320      	movs	r3, #32
 80019de:	e003      	b.n	80019e8 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	f001 011f 	and.w	r1, r1, #31
 80019ee:	408b      	lsls	r3, r1
 80019f0:	431a      	orrs	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019f6:	bf00      	nop
 80019f8:	3724      	adds	r7, #36	@ 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	46021000 	.word	0x46021000

08001a08 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d107      	bne.n	8001a2c <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	0e9b      	lsrs	r3, r3, #26
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	2201      	movs	r2, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	e015      	b.n	8001a58 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	fa93 f3a3 	rbit	r3, r3
 8001a36:	60fb      	str	r3, [r7, #12]
  return result;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001a42:	2320      	movs	r3, #32
 8001a44:	e003      	b.n	8001a4e <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	f003 031f 	and.w	r3, r3, #31
 8001a52:	2201      	movs	r2, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a62:	bf00      	nop
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	0e9b      	lsrs	r3, r3, #26
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b08b      	sub	sp, #44	@ 0x2c
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4a2d      	ldr	r2, [pc, #180]	@ (8001b64 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d042      	beq.n	8001b3a <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d104      	bne.n	8001ac8 <LL_ADC_SetChannelSamplingTime+0x28>
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	0e9b      	lsrs	r3, r3, #26
 8001ac2:	f003 021f 	and.w	r2, r3, #31
 8001ac6:	e011      	b.n	8001aec <LL_ADC_SetChannelSamplingTime+0x4c>
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  return result;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8001ade:	2320      	movs	r3, #32
 8001ae0:	e003      	b.n	8001aea <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fab3 f383 	clz	r3, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	0e5b      	lsrs	r3, r3, #25
 8001af0:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001af4:	460b      	mov	r3, r1
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	1ad2      	subs	r2, r2, r3
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3314      	adds	r3, #20
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	0e5b      	lsrs	r3, r3, #25
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	4413      	add	r3, r2
 8001b18:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2107      	movs	r1, #7
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	401a      	ands	r2, r3
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	431a      	orrs	r2, r3
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001b38:	e00e      	b.n	8001b58 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	43db      	mvns	r3, r3
 8001b44:	401a      	ands	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	0219      	lsls	r1, r3, #8
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	400b      	ands	r3, r1
 8001b4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b52:	431a      	orrs	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	615a      	str	r2, [r3, #20]
}
 8001b58:	bf00      	nop
 8001b5a:	372c      	adds	r7, #44	@ 0x2c
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	46021000 	.word	0x46021000

08001b68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001b80:	43db      	mvns	r3, r3
 8001b82:	401a      	ands	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0318 	and.w	r3, r3, #24
 8001b8a:	4908      	ldr	r1, [pc, #32]	@ (8001bac <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b8c:	40d9      	lsrs	r1, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	400b      	ands	r3, r1
 8001b92:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001b96:	431a      	orrs	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b9e:	bf00      	nop
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	000fffff 	.word	0x000fffff

08001bb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001bc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6093      	str	r3, [r2, #8]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001be4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001be8:	d101      	bne.n	8001bee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c10:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c38:	d101      	bne.n	8001c3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <LL_ADC_IsEnabled+0x18>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <LL_ADC_IsEnabled+0x1a>
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d101      	bne.n	8001c8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d101      	bne.n	8001cb0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b08b      	sub	sp, #44	@ 0x2c
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e2ce      	b.n	800227e <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a95      	ldr	r2, [pc, #596]	@ (8001f44 <HAL_ADC_Init+0x284>)
 8001cee:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d109      	bne.n	8001d0c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff f8c5 	bl	8000e88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff5f 	bl	8001bd4 <LL_ADC_IsDeepPowerDownEnabled>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d004      	beq.n	8001d26 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff45 	bl	8001bb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff7a 	bl	8001c24 <LL_ADC_IsInternalRegulatorEnabled>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d115      	bne.n	8001d62 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff5e 	bl	8001bfc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d40:	4b81      	ldr	r3, [pc, #516]	@ (8001f48 <HAL_ADC_Init+0x288>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	099b      	lsrs	r3, r3, #6
 8001d46:	4a81      	ldr	r2, [pc, #516]	@ (8001f4c <HAL_ADC_Init+0x28c>)
 8001d48:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4c:	099b      	lsrs	r3, r3, #6
 8001d4e:	3301      	adds	r3, #1
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d54:	e002      	b.n	8001d5c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f9      	bne.n	8001d56 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff5c 	bl	8001c24 <LL_ADC_IsInternalRegulatorEnabled>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10e      	bne.n	8001d90 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001d76:	f043 0210 	orr.w	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d82:	f043 0201 	orr.w	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff6c 	bl	8001c72 <LL_ADC_REG_IsConversionOngoing>
 8001d9a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 825f 	bne.w	8002268 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f040 825b 	bne.w	8002268 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001db6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001dba:	f043 0202 	orr.w	r2, r3, #2
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff40 	bl	8001c4c <LL_ADC_IsEnabled>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d14f      	bne.n	8001e72 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a5b      	ldr	r2, [pc, #364]	@ (8001f44 <HAL_ADC_Init+0x284>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d037      	beq.n	8001e4c <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a5b      	ldr	r2, [pc, #364]	@ (8001f50 <HAL_ADC_Init+0x290>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d004      	beq.n	8001df0 <HAL_ADC_Init+0x130>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a5a      	ldr	r2, [pc, #360]	@ (8001f54 <HAL_ADC_Init+0x294>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d10e      	bne.n	8001e0e <HAL_ADC_Init+0x14e>
 8001df0:	4857      	ldr	r0, [pc, #348]	@ (8001f50 <HAL_ADC_Init+0x290>)
 8001df2:	f7ff ff2b 	bl	8001c4c <LL_ADC_IsEnabled>
 8001df6:	4604      	mov	r4, r0
 8001df8:	4856      	ldr	r0, [pc, #344]	@ (8001f54 <HAL_ADC_Init+0x294>)
 8001dfa:	f7ff ff27 	bl	8001c4c <LL_ADC_IsEnabled>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4323      	orrs	r3, r4
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	bf0c      	ite	eq
 8001e06:	2301      	moveq	r3, #1
 8001e08:	2300      	movne	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	e008      	b.n	8001e20 <HAL_ADC_Init+0x160>
 8001e0e:	484d      	ldr	r0, [pc, #308]	@ (8001f44 <HAL_ADC_Init+0x284>)
 8001e10:	f7ff ff1c 	bl	8001c4c <LL_ADC_IsEnabled>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	bf0c      	ite	eq
 8001e1a:	2301      	moveq	r3, #1
 8001e1c:	2300      	movne	r3, #0
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d026      	beq.n	8001e72 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a49      	ldr	r2, [pc, #292]	@ (8001f50 <HAL_ADC_Init+0x290>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d004      	beq.n	8001e38 <HAL_ADC_Init+0x178>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a48      	ldr	r2, [pc, #288]	@ (8001f54 <HAL_ADC_Init+0x294>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_Init+0x17c>
 8001e38:	4a47      	ldr	r2, [pc, #284]	@ (8001f58 <HAL_ADC_Init+0x298>)
 8001e3a:	e000      	b.n	8001e3e <HAL_ADC_Init+0x17e>
 8001e3c:	4a47      	ldr	r2, [pc, #284]	@ (8001f5c <HAL_ADC_Init+0x29c>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4619      	mov	r1, r3
 8001e44:	4610      	mov	r0, r2
 8001e46:	f7ff fc61 	bl	800170c <LL_ADC_SetCommonClock>
 8001e4a:	e012      	b.n	8001e72 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	4619      	mov	r1, r3
 8001e56:	4610      	mov	r0, r2
 8001e58:	f7ff fc8c 	bl	8001774 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001e5c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f5c <HAL_ADC_Init+0x29c>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001e6c:	493b      	ldr	r1, [pc, #236]	@ (8001f5c <HAL_ADC_Init+0x29c>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a33      	ldr	r2, [pc, #204]	@ (8001f44 <HAL_ADC_Init+0x284>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d010      	beq.n	8001e9e <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e82:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e88:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001e8e:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001e96:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	623b      	str	r3, [r7, #32]
 8001e9c:	e035      	b.n	8001f0a <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7f1b      	ldrb	r3, [r3, #28]
 8001ea2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001eaa:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eac:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001eb2:	2a00      	cmp	r2, #0
 8001eb4:	d002      	beq.n	8001ebc <HAL_ADC_Init+0x1fc>
 8001eb6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001eba:	e000      	b.n	8001ebe <HAL_ADC_Init+0x1fe>
 8001ebc:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ebe:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001ec4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	da04      	bge.n	8001ed8 <HAL_ADC_Init+0x218>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ed6:	e001      	b.n	8001edc <HAL_ADC_Init+0x21c>
 8001ed8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8001edc:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	491b      	ldr	r1, [pc, #108]	@ (8001f50 <HAL_ADC_Init+0x290>)
 8001ee4:	428b      	cmp	r3, r1
 8001ee6:	d004      	beq.n	8001ef2 <HAL_ADC_Init+0x232>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4919      	ldr	r1, [pc, #100]	@ (8001f54 <HAL_ADC_Init+0x294>)
 8001eee:	428b      	cmp	r3, r1
 8001ef0:	d103      	bne.n	8001efa <HAL_ADC_Init+0x23a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ef8:	e003      	b.n	8001f02 <HAL_ADC_Init+0x242>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f00:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001f02:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f04:	6a3a      	ldr	r2, [r7, #32]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d131      	bne.n	8001f78 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <HAL_ADC_Init+0x284>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d007      	beq.n	8001f2e <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	3b01      	subs	r3, #1
 8001f24:	045b      	lsls	r3, r3, #17
 8001f26:	6a3a      	ldr	r2, [r7, #32]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	623b      	str	r3, [r7, #32]
 8001f2c:	e024      	b.n	8001f78 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d113      	bne.n	8001f60 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3e:	623b      	str	r3, [r7, #32]
 8001f40:	e01a      	b.n	8001f78 <HAL_ADC_Init+0x2b8>
 8001f42:	bf00      	nop
 8001f44:	46021000 	.word	0x46021000
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	053e2d63 	.word	0x053e2d63
 8001f50:	42028000 	.word	0x42028000
 8001f54:	42028100 	.word	0x42028100
 8001f58:	42028300 	.word	0x42028300
 8001f5c:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f64:	f043 0220 	orr.w	r2, r3, #32
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f70:	f043 0201 	orr.w	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a75      	ldr	r2, [pc, #468]	@ (8002154 <HAL_ADC_Init+0x494>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d018      	beq.n	8001fb4 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f8e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f96:	4313      	orrs	r3, r2
 8001f98:	6a3a      	ldr	r2, [r7, #32]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	4b6c      	ldr	r3, [pc, #432]	@ (8002158 <HAL_ADC_Init+0x498>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	6a39      	ldr	r1, [r7, #32]
 8001fae:	430b      	orrs	r3, r1
 8001fb0:	60d3      	str	r3, [r2, #12]
 8001fb2:	e031      	b.n	8002018 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d009      	beq.n	8001fd0 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	6a3a      	ldr	r2, [r7, #32]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	4b61      	ldr	r3, [pc, #388]	@ (800215c <HAL_ADC_Init+0x49c>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	6a39      	ldr	r1, [r7, #32]
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1a      	ldr	r2, [r3, #32]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002002:	2b00      	cmp	r3, #0
 8002004:	d008      	beq.n	8002018 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a4d      	ldr	r2, [pc, #308]	@ (8002154 <HAL_ADC_Init+0x494>)
 800201e:	4293      	cmp	r3, r2
 8002020:	f000 80a4 	beq.w	800216c <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fe22 	bl	8001c72 <LL_ADC_REG_IsConversionOngoing>
 800202e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fe2f 	bl	8001c98 <LL_ADC_INJ_IsConversionOngoing>
 800203a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d166      	bne.n	8002110 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d163      	bne.n	8002110 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7f1b      	ldrb	r3, [r3, #28]
 800204c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4943      	ldr	r1, [pc, #268]	@ (8002160 <HAL_ADC_Init+0x4a0>)
 8002054:	428b      	cmp	r3, r1
 8002056:	d004      	beq.n	8002062 <HAL_ADC_Init+0x3a2>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4941      	ldr	r1, [pc, #260]	@ (8002164 <HAL_ADC_Init+0x4a4>)
 800205e:	428b      	cmp	r3, r1
 8002060:	d102      	bne.n	8002068 <HAL_ADC_Init+0x3a8>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002066:	e002      	b.n	800206e <HAL_ADC_Init+0x3ae>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800206c:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800206e:	4313      	orrs	r3, r2
 8002070:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800207c:	f023 0303 	bic.w	r3, r3, #3
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	6a39      	ldr	r1, [r7, #32]
 8002086:	430b      	orrs	r3, r1
 8002088:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	4619      	mov	r1, r3
 800209c:	4610      	mov	r0, r2
 800209e:	f7ff fc11 	bl	80018c4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d11e      	bne.n	80020ea <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020b0:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002168 <HAL_ADC_Init+0x4a8>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80020c0:	0411      	lsls	r1, r2, #16
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80020c6:	4311      	orrs	r1, r2
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80020cc:	4311      	orrs	r1, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80020d2:	4311      	orrs	r1, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80020d8:	0892      	lsrs	r2, r2, #2
 80020da:	430a      	orrs	r2, r1
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	611a      	str	r2, [r3, #16]
 80020e8:	e007      	b.n	80020fa <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0201 	bic.w	r2, r2, #1
 80020f8:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d10c      	bne.n	8002132 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	f023 010f 	bic.w	r1, r3, #15
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002126:	1e5a      	subs	r2, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002130:	e007      	b.n	8002142 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 020f 	bic.w	r2, r2, #15
 8002140:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002146:	f023 0303 	bic.w	r3, r3, #3
 800214a:	f043 0201 	orr.w	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002152:	e092      	b.n	800227a <HAL_ADC_Init+0x5ba>
 8002154:	46021000 	.word	0x46021000
 8002158:	fff0c013 	.word	0xfff0c013
 800215c:	ffde800d 	.word	0xffde800d
 8002160:	42028000 	.word	0x42028000
 8002164:	42028100 	.word	0x42028100
 8002168:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002172:	2b01      	cmp	r3, #1
 8002174:	d111      	bne.n	800219a <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800217e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002184:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800218a:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	4313      	orrs	r3, r2
 8002190:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	4b39      	ldr	r3, [pc, #228]	@ (8002288 <HAL_ADC_Init+0x5c8>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	69f9      	ldr	r1, [r7, #28]
 80021aa:	430b      	orrs	r3, r1
 80021ac:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b6:	461a      	mov	r2, r3
 80021b8:	2100      	movs	r1, #0
 80021ba:	f7ff fba6 	bl	800190a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c6:	461a      	mov	r2, r3
 80021c8:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80021cc:	f7ff fb9d 	bl	800190a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d108      	bne.n	80021ea <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f062 020f 	orn	r2, r2, #15
 80021e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80021e8:	e018      	b.n	800221c <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021f2:	d113      	bne.n	800221c <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fe:	3b01      	subs	r3, #1
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	f003 031c 	and.w	r3, r3, #28
 8002206:	f06f 020f 	mvn.w	r2, #15
 800220a:	fa02 f103 	lsl.w	r1, r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <HAL_ADC_Init+0x5cc>)
 8002224:	4013      	ands	r3, r2
 8002226:	6a3a      	ldr	r2, [r7, #32]
 8002228:	429a      	cmp	r2, r3
 800222a:	d10b      	bne.n	8002244 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002236:	f023 0303 	bic.w	r3, r3, #3
 800223a:	f043 0201 	orr.w	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002242:	e01a      	b.n	800227a <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002248:	f023 0312 	bic.w	r3, r3, #18
 800224c:	f043 0210 	orr.w	r2, r3, #16
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002258:	f043 0201 	orr.w	r2, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002266:	e008      	b.n	800227a <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800226c:	f043 0210 	orr.w	r2, r3, #16
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 800227a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800227e:	4618      	mov	r0, r3
 8002280:	372c      	adds	r7, #44	@ 0x2c
 8002282:	46bd      	mov	sp, r7
 8002284:	bd90      	pop	{r4, r7, pc}
 8002286:	bf00      	nop
 8002288:	f7fffc02 	.word	0xf7fffc02
 800228c:	833ffff3 	.word	0x833ffff3

08002290 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b0b7      	sub	sp, #220	@ 0xdc
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4aa8      	ldr	r2, [pc, #672]	@ (800254c <HAL_ADC_ConfigChannel+0x2bc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d103      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d102      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x36>
 80022c0:	2302      	movs	r3, #2
 80022c2:	f000 bdfe 	b.w	8002ec2 <HAL_ADC_ConfigChannel+0xc32>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fccd 	bl	8001c72 <LL_ADC_REG_IsConversionOngoing>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f040 85c1 	bne.w	8002e62 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a99      	ldr	r2, [pc, #612]	@ (800254c <HAL_ADC_ConfigChannel+0x2bc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	f000 8409 	beq.w	8002afe <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d108      	bne.n	800230a <HAL_ADC_ConfigChannel+0x7a>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0e9b      	lsrs	r3, r3, #26
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	2201      	movs	r2, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	e01d      	b.n	8002346 <HAL_ADC_ConfigChannel+0xb6>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800231e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002322:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002326:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 800232e:	2320      	movs	r3, #32
 8002330:	e004      	b.n	800233c <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8002332:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	2201      	movs	r2, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	69d1      	ldr	r1, [r2, #28]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	430b      	orrs	r3, r1
 8002352:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	f7ff faf1 	bl	8001948 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fc81 	bl	8001c72 <LL_ADC_REG_IsConversionOngoing>
 8002370:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fc8d 	bl	8001c98 <LL_ADC_INJ_IsConversionOngoing>
 800237e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002382:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 81df 	bne.w	800274a <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800238c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002390:	2b00      	cmp	r3, #0
 8002392:	f040 81da 	bne.w	800274a <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6819      	ldr	r1, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f7ff fb7c 	bl	8001aa0 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d046      	beq.n	8002458 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6919      	ldr	r1, [r3, #16]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023da:	f7ff f9eb 	bl	80017b4 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6919      	ldr	r1, [r3, #16]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	461a      	mov	r2, r3
 80023ec:	f7ff fa19 	bl	8001822 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	7e9b      	ldrb	r3, [r3, #26]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d11e      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <HAL_ADC_ConfigChannel+0x17e>
 8002408:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800240c:	e000      	b.n	8002410 <HAL_ADC_ConfigChannel+0x180>
 800240e:	2300      	movs	r3, #0
 8002410:	461a      	mov	r2, r3
 8002412:	f7ff fa3c 	bl	800188e <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002422:	2b01      	cmp	r3, #1
 8002424:	d102      	bne.n	800242c <HAL_ADC_ConfigChannel+0x19c>
 8002426:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800242a:	e000      	b.n	800242e <HAL_ADC_ConfigChannel+0x19e>
 800242c:	2300      	movs	r3, #0
 800242e:	461a      	mov	r2, r3
 8002430:	f7ff fa12 	bl	8001858 <LL_ADC_SetOffsetSignedSaturation>
 8002434:	e189      	b.n	800274a <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2200      	movs	r2, #0
 8002440:	4619      	mov	r1, r3
 8002442:	f7ff fa24 	bl	800188e <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2200      	movs	r2, #0
 8002450:	4619      	mov	r1, r3
 8002452:	f7ff fa01 	bl	8001858 <LL_ADC_SetOffsetSignedSaturation>
 8002456:	e178      	b.n	800274a <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff f9c9 	bl	80017f6 <LL_ADC_GetOffsetChannel>
 8002464:	4603      	mov	r3, r0
 8002466:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10a      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x1f4>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff f9be 	bl	80017f6 <LL_ADC_GetOffsetChannel>
 800247a:	4603      	mov	r3, r0
 800247c:	0e9b      	lsrs	r3, r3, #26
 800247e:	f003 021f 	and.w	r2, r3, #31
 8002482:	e01e      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x232>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff f9b3 	bl	80017f6 <LL_ADC_GetOffsetChannel>
 8002490:	4603      	mov	r3, r0
 8002492:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80024a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80024aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80024b2:	2320      	movs	r3, #32
 80024b4:	e004      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80024b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d105      	bne.n	80024da <HAL_ADC_ConfigChannel+0x24a>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0e9b      	lsrs	r3, r3, #26
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	e018      	b.n	800250c <HAL_ADC_ConfigChannel+0x27c>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80024ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80024f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 80024fe:	2320      	movs	r3, #32
 8002500:	e004      	b.n	800250c <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002502:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800250c:	429a      	cmp	r2, r3
 800250e:	d107      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	2300      	movs	r3, #0
 800251a:	2100      	movs	r1, #0
 800251c:	f7ff f94a 	bl	80017b4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2101      	movs	r1, #1
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff f965 	bl	80017f6 <LL_ADC_GetOffsetChannel>
 800252c:	4603      	mov	r3, r0
 800252e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10c      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x2c0>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2101      	movs	r1, #1
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff f95a 	bl	80017f6 <LL_ADC_GetOffsetChannel>
 8002542:	4603      	mov	r3, r0
 8002544:	0e9b      	lsrs	r3, r3, #26
 8002546:	f003 021f 	and.w	r2, r3, #31
 800254a:	e020      	b.n	800258e <HAL_ADC_ConfigChannel+0x2fe>
 800254c:	46021000 	.word	0x46021000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2101      	movs	r1, #1
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff f94d 	bl	80017f6 <LL_ADC_GetOffsetChannel>
 800255c:	4603      	mov	r3, r0
 800255e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800256e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002572:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002576:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800257e:	2320      	movs	r3, #32
 8002580:	e004      	b.n	800258c <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002582:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x316>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0e9b      	lsrs	r3, r3, #26
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	e018      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x348>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80025ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80025c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80025ca:	2320      	movs	r3, #32
 80025cc:	e004      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80025ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025d8:	429a      	cmp	r2, r3
 80025da:	d107      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2300      	movs	r3, #0
 80025e6:	2101      	movs	r1, #1
 80025e8:	f7ff f8e4 	bl	80017b4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2102      	movs	r1, #2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff f8ff 	bl	80017f6 <LL_ADC_GetOffsetChannel>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10a      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x388>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2102      	movs	r1, #2
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff f8f4 	bl	80017f6 <LL_ADC_GetOffsetChannel>
 800260e:	4603      	mov	r3, r0
 8002610:	0e9b      	lsrs	r3, r3, #26
 8002612:	f003 021f 	and.w	r2, r3, #31
 8002616:	e01a      	b.n	800264e <HAL_ADC_ConfigChannel+0x3be>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2102      	movs	r1, #2
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff f8e9 	bl	80017f6 <LL_ADC_GetOffsetChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002630:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002632:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002636:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800263e:	2320      	movs	r3, #32
 8002640:	e004      	b.n	800264c <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8002642:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d105      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x3d6>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	0e9b      	lsrs	r3, r3, #26
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	e011      	b.n	800268a <HAL_ADC_ConfigChannel+0x3fa>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002676:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002678:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800267e:	2320      	movs	r3, #32
 8002680:	e003      	b.n	800268a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002682:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800268a:	429a      	cmp	r2, r3
 800268c:	d107      	bne.n	800269e <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	2300      	movs	r3, #0
 8002698:	2102      	movs	r1, #2
 800269a:	f7ff f88b 	bl	80017b4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2103      	movs	r1, #3
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff f8a6 	bl	80017f6 <LL_ADC_GetOffsetChannel>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10a      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x43a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2103      	movs	r1, #3
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff f89b 	bl	80017f6 <LL_ADC_GetOffsetChannel>
 80026c0:	4603      	mov	r3, r0
 80026c2:	0e9b      	lsrs	r3, r3, #26
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	e017      	b.n	80026fa <HAL_ADC_ConfigChannel+0x46a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2103      	movs	r1, #3
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff f890 	bl	80017f6 <LL_ADC_GetOffsetChannel>
 80026d6:	4603      	mov	r3, r0
 80026d8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80026e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026e4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80026e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 80026ec:	2320      	movs	r3, #32
 80026ee:	e003      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 80026f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d105      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x482>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0e9b      	lsrs	r3, r3, #26
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	e011      	b.n	8002736 <HAL_ADC_ConfigChannel+0x4a6>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002722:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002724:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 800272a:	2320      	movs	r3, #32
 800272c:	e003      	b.n	8002736 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 800272e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002730:	fab3 f383 	clz	r3, r3
 8002734:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002736:	429a      	cmp	r2, r3
 8002738:	d107      	bne.n	800274a <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	2300      	movs	r3, #0
 8002744:	2103      	movs	r1, #3
 8002746:	f7ff f835 	bl	80017b4 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fa7c 	bl	8001c4c <LL_ADC_IsEnabled>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 83ad 	bne.w	8002eb6 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6819      	ldr	r1, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	461a      	mov	r2, r3
 800276a:	f7ff f9fd 	bl	8001b68 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002776:	f040 80d6 	bne.w	8002926 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10b      	bne.n	800279e <HAL_ADC_ConfigChannel+0x50e>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	0e9b      	lsrs	r3, r3, #26
 800278c:	3301      	adds	r3, #1
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	2b09      	cmp	r3, #9
 8002794:	bf94      	ite	ls
 8002796:	2301      	movls	r3, #1
 8002798:	2300      	movhi	r3, #0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	e019      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x542>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80027ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027ae:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80027b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80027b6:	2320      	movs	r3, #32
 80027b8:	e003      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80027ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2b09      	cmp	r3, #9
 80027ca:	bf94      	ite	ls
 80027cc:	2301      	movls	r3, #1
 80027ce:	2300      	movhi	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d04d      	beq.n	8002872 <HAL_ADC_ConfigChannel+0x5e2>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d107      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x562>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	3301      	adds	r3, #1
 80027ea:	069b      	lsls	r3, r3, #26
 80027ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027f0:	e015      	b.n	800281e <HAL_ADC_ConfigChannel+0x58e>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002802:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800280a:	2320      	movs	r3, #32
 800280c:	e003      	b.n	8002816 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800280e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	3301      	adds	r3, #1
 8002818:	069b      	lsls	r3, r3, #26
 800281a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <HAL_ADC_ConfigChannel+0x5ae>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0e9b      	lsrs	r3, r3, #26
 8002830:	3301      	adds	r3, #1
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	e017      	b.n	800286e <HAL_ADC_ConfigChannel+0x5de>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800284c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8002856:	2320      	movs	r3, #32
 8002858:	e003      	b.n	8002862 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 800285a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	3301      	adds	r3, #1
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	2101      	movs	r1, #1
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	4313      	orrs	r3, r2
 8002870:	e04e      	b.n	8002910 <HAL_ADC_ConfigChannel+0x680>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d107      	bne.n	800288e <HAL_ADC_ConfigChannel+0x5fe>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	0e9b      	lsrs	r3, r3, #26
 8002884:	3301      	adds	r3, #1
 8002886:	069b      	lsls	r3, r3, #26
 8002888:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800288c:	e015      	b.n	80028ba <HAL_ADC_ConfigChannel+0x62a>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80028a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80028a6:	2320      	movs	r3, #32
 80028a8:	e003      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80028aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ac:	fab3 f383 	clz	r3, r3
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	3301      	adds	r3, #1
 80028b4:	069b      	lsls	r3, r3, #26
 80028b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HAL_ADC_ConfigChannel+0x64a>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	0e9b      	lsrs	r3, r3, #26
 80028cc:	3301      	adds	r3, #1
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	2101      	movs	r1, #1
 80028d4:	fa01 f303 	lsl.w	r3, r1, r3
 80028d8:	e017      	b.n	800290a <HAL_ADC_ConfigChannel+0x67a>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	61bb      	str	r3, [r7, #24]
  return result;
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 80028f2:	2320      	movs	r3, #32
 80028f4:	e003      	b.n	80028fe <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	fab3 f383 	clz	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	3301      	adds	r3, #1
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	2101      	movs	r1, #1
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	4313      	orrs	r3, r2
 800290c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002910:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	461a      	mov	r2, r3
 800291e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002922:	f7ff f8bd 	bl	8001aa0 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f280 82c3 	bge.w	8002eb6 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a92      	ldr	r2, [pc, #584]	@ (8002b80 <HAL_ADC_ConfigChannel+0x8f0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d004      	beq.n	8002944 <HAL_ADC_ConfigChannel+0x6b4>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a91      	ldr	r2, [pc, #580]	@ (8002b84 <HAL_ADC_ConfigChannel+0x8f4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d101      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x6b8>
 8002944:	4b90      	ldr	r3, [pc, #576]	@ (8002b88 <HAL_ADC_ConfigChannel+0x8f8>)
 8002946:	e000      	b.n	800294a <HAL_ADC_ConfigChannel+0x6ba>
 8002948:	4b90      	ldr	r3, [pc, #576]	@ (8002b8c <HAL_ADC_ConfigChannel+0x8fc>)
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe ff04 	bl	8001758 <LL_ADC_GetCommonPathInternalCh>
 8002950:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a89      	ldr	r2, [pc, #548]	@ (8002b80 <HAL_ADC_ConfigChannel+0x8f0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d004      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x6d8>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a88      	ldr	r2, [pc, #544]	@ (8002b84 <HAL_ADC_ConfigChannel+0x8f4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d10e      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x6f6>
 8002968:	4885      	ldr	r0, [pc, #532]	@ (8002b80 <HAL_ADC_ConfigChannel+0x8f0>)
 800296a:	f7ff f96f 	bl	8001c4c <LL_ADC_IsEnabled>
 800296e:	4604      	mov	r4, r0
 8002970:	4884      	ldr	r0, [pc, #528]	@ (8002b84 <HAL_ADC_ConfigChannel+0x8f4>)
 8002972:	f7ff f96b 	bl	8001c4c <LL_ADC_IsEnabled>
 8002976:	4603      	mov	r3, r0
 8002978:	4323      	orrs	r3, r4
 800297a:	2b00      	cmp	r3, #0
 800297c:	bf0c      	ite	eq
 800297e:	2301      	moveq	r3, #1
 8002980:	2300      	movne	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	e008      	b.n	8002998 <HAL_ADC_ConfigChannel+0x708>
 8002986:	4882      	ldr	r0, [pc, #520]	@ (8002b90 <HAL_ADC_ConfigChannel+0x900>)
 8002988:	f7ff f960 	bl	8001c4c <LL_ADC_IsEnabled>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	bf0c      	ite	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	2300      	movne	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80a6 	beq.w	8002aea <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002b94 <HAL_ADC_ConfigChannel+0x904>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d13c      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d136      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a71      	ldr	r2, [pc, #452]	@ (8002b80 <HAL_ADC_ConfigChannel+0x8f0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00a      	beq.n	80029d4 <HAL_ADC_ConfigChannel+0x744>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a70      	ldr	r2, [pc, #448]	@ (8002b84 <HAL_ADC_ConfigChannel+0x8f4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d005      	beq.n	80029d4 <HAL_ADC_ConfigChannel+0x744>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a70      	ldr	r2, [pc, #448]	@ (8002b90 <HAL_ADC_ConfigChannel+0x900>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	f040 826e 	bne.w	8002eb0 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a69      	ldr	r2, [pc, #420]	@ (8002b80 <HAL_ADC_ConfigChannel+0x8f0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d004      	beq.n	80029e8 <HAL_ADC_ConfigChannel+0x758>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a68      	ldr	r2, [pc, #416]	@ (8002b84 <HAL_ADC_ConfigChannel+0x8f4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d101      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x75c>
 80029e8:	4a67      	ldr	r2, [pc, #412]	@ (8002b88 <HAL_ADC_ConfigChannel+0x8f8>)
 80029ea:	e000      	b.n	80029ee <HAL_ADC_ConfigChannel+0x75e>
 80029ec:	4a67      	ldr	r2, [pc, #412]	@ (8002b8c <HAL_ADC_ConfigChannel+0x8fc>)
 80029ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029f6:	4619      	mov	r1, r3
 80029f8:	4610      	mov	r0, r2
 80029fa:	f7fe fe9a 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029fe:	4b66      	ldr	r3, [pc, #408]	@ (8002b98 <HAL_ADC_ConfigChannel+0x908>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	099b      	lsrs	r3, r3, #6
 8002a04:	4a65      	ldr	r2, [pc, #404]	@ (8002b9c <HAL_ADC_ConfigChannel+0x90c>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	099b      	lsrs	r3, r3, #6
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8002a10:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8002a12:	e002      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f9      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a20:	e246      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x910>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d12b      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d125      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a50      	ldr	r2, [pc, #320]	@ (8002b80 <HAL_ADC_ConfigChannel+0x8f0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00a      	beq.n	8002a58 <HAL_ADC_ConfigChannel+0x7c8>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a4f      	ldr	r2, [pc, #316]	@ (8002b84 <HAL_ADC_ConfigChannel+0x8f4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d005      	beq.n	8002a58 <HAL_ADC_ConfigChannel+0x7c8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a4f      	ldr	r2, [pc, #316]	@ (8002b90 <HAL_ADC_ConfigChannel+0x900>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	f040 822e 	bne.w	8002eb4 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a48      	ldr	r2, [pc, #288]	@ (8002b80 <HAL_ADC_ConfigChannel+0x8f0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d004      	beq.n	8002a6c <HAL_ADC_ConfigChannel+0x7dc>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a47      	ldr	r2, [pc, #284]	@ (8002b84 <HAL_ADC_ConfigChannel+0x8f4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x7e0>
 8002a6c:	4a46      	ldr	r2, [pc, #280]	@ (8002b88 <HAL_ADC_ConfigChannel+0x8f8>)
 8002a6e:	e000      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x7e2>
 8002a70:	4a46      	ldr	r2, [pc, #280]	@ (8002b8c <HAL_ADC_ConfigChannel+0x8fc>)
 8002a72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	f7fe fe58 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a82:	e217      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a46      	ldr	r2, [pc, #280]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x914>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	f040 8213 	bne.w	8002eb6 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f040 820c 	bne.w	8002eb6 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a37      	ldr	r2, [pc, #220]	@ (8002b80 <HAL_ADC_ConfigChannel+0x8f0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00a      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x82e>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a35      	ldr	r2, [pc, #212]	@ (8002b84 <HAL_ADC_ConfigChannel+0x8f4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d005      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x82e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a36      	ldr	r2, [pc, #216]	@ (8002b90 <HAL_ADC_ConfigChannel+0x900>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	f040 81fc 	bne.w	8002eb6 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8002b80 <HAL_ADC_ConfigChannel+0x8f0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d004      	beq.n	8002ad2 <HAL_ADC_ConfigChannel+0x842>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2d      	ldr	r2, [pc, #180]	@ (8002b84 <HAL_ADC_ConfigChannel+0x8f4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x846>
 8002ad2:	4a2d      	ldr	r2, [pc, #180]	@ (8002b88 <HAL_ADC_ConfigChannel+0x8f8>)
 8002ad4:	e000      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x848>
 8002ad6:	4a2d      	ldr	r2, [pc, #180]	@ (8002b8c <HAL_ADC_ConfigChannel+0x8fc>)
 8002ad8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002adc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f7fe fe25 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
 8002ae8:	e1e5      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002aee:	f043 0220 	orr.w	r2, r3, #32
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002afc:	e1db      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	f000 811b 	beq.w	8002d46 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b18:	d004      	beq.n	8002b24 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002b1e:	4a22      	ldr	r2, [pc, #136]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x918>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d107      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe ff6b 	bl	8001a08 <LL_ADC_REG_SetSequencerChAdd>
 8002b32:	e059      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	210f      	movs	r1, #15
 8002b44:	fa01 f303 	lsl.w	r3, r1, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b50:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x8d4>
 8002b58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b5c:	0e9b      	lsrs	r3, r3, #26
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	e027      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x924>
 8002b64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b68:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	60fb      	str	r3, [r7, #12]
  return result;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d117      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8002b7c:	2320      	movs	r3, #32
 8002b7e:	e019      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x924>
 8002b80:	42028000 	.word	0x42028000
 8002b84:	42028100 	.word	0x42028100
 8002b88:	42028300 	.word	0x42028300
 8002b8c:	46021300 	.word	0x46021300
 8002b90:	46021000 	.word	0x46021000
 8002b94:	ce080000 	.word	0xce080000
 8002b98:	20000000 	.word	0x20000000
 8002b9c:	053e2d63 	.word	0x053e2d63
 8002ba0:	ca040000 	.word	0xca040000
 8002ba4:	80000001 	.word	0x80000001
 8002ba8:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	6839      	ldr	r1, [r7, #0]
 8002bb6:	6849      	ldr	r1, [r1, #4]
 8002bb8:	f001 011f 	and.w	r1, r1, #31
 8002bbc:	408b      	lsls	r3, r1
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	089b      	lsrs	r3, r3, #2
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d808      	bhi.n	8002be8 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002be2:	4619      	mov	r1, r3
 8002be4:	f7fe feb0 	bl	8001948 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002bf6:	f7fe ff53 	bl	8001aa0 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f280 8159 	bge.w	8002eb6 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a9b      	ldr	r2, [pc, #620]	@ (8002e78 <HAL_ADC_ConfigChannel+0xbe8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d004      	beq.n	8002c18 <HAL_ADC_ConfigChannel+0x988>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a9a      	ldr	r2, [pc, #616]	@ (8002e7c <HAL_ADC_ConfigChannel+0xbec>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x98c>
 8002c18:	4b99      	ldr	r3, [pc, #612]	@ (8002e80 <HAL_ADC_ConfigChannel+0xbf0>)
 8002c1a:	e000      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x98e>
 8002c1c:	4b99      	ldr	r3, [pc, #612]	@ (8002e84 <HAL_ADC_ConfigChannel+0xbf4>)
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe fd9a 	bl	8001758 <LL_ADC_GetCommonPathInternalCh>
 8002c24:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a96      	ldr	r2, [pc, #600]	@ (8002e88 <HAL_ADC_ConfigChannel+0xbf8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d12b      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d125      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a8d      	ldr	r2, [pc, #564]	@ (8002e78 <HAL_ADC_ConfigChannel+0xbe8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d004      	beq.n	8002c52 <HAL_ADC_ConfigChannel+0x9c2>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a8b      	ldr	r2, [pc, #556]	@ (8002e7c <HAL_ADC_ConfigChannel+0xbec>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x9c6>
 8002c52:	4a8b      	ldr	r2, [pc, #556]	@ (8002e80 <HAL_ADC_ConfigChannel+0xbf0>)
 8002c54:	e000      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x9c8>
 8002c56:	4a8b      	ldr	r2, [pc, #556]	@ (8002e84 <HAL_ADC_ConfigChannel+0xbf4>)
 8002c58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c5c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f7fe fd65 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002c68:	4b88      	ldr	r3, [pc, #544]	@ (8002e8c <HAL_ADC_ConfigChannel+0xbfc>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	099b      	lsrs	r3, r3, #6
 8002c6e:	4a88      	ldr	r2, [pc, #544]	@ (8002e90 <HAL_ADC_ConfigChannel+0xc00>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	099b      	lsrs	r3, r3, #6
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002c7a:	e002      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f9      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002c88:	e045      	b.n	8002d16 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a81      	ldr	r2, [pc, #516]	@ (8002e94 <HAL_ADC_ConfigChannel+0xc04>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d11b      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d115      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a74      	ldr	r2, [pc, #464]	@ (8002e78 <HAL_ADC_ConfigChannel+0xbe8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <HAL_ADC_ConfigChannel+0xa24>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a73      	ldr	r2, [pc, #460]	@ (8002e7c <HAL_ADC_ConfigChannel+0xbec>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0xa28>
 8002cb4:	4a72      	ldr	r2, [pc, #456]	@ (8002e80 <HAL_ADC_ConfigChannel+0xbf0>)
 8002cb6:	e000      	b.n	8002cba <HAL_ADC_ConfigChannel+0xa2a>
 8002cb8:	4a72      	ldr	r2, [pc, #456]	@ (8002e84 <HAL_ADC_ConfigChannel+0xbf4>)
 8002cba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002cbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f7fe fd34 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
 8002cca:	e024      	b.n	8002d16 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a71      	ldr	r2, [pc, #452]	@ (8002e98 <HAL_ADC_ConfigChannel+0xc08>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d11f      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d115      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a64      	ldr	r2, [pc, #400]	@ (8002e78 <HAL_ADC_ConfigChannel+0xbe8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_ADC_ConfigChannel+0xa66>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a62      	ldr	r2, [pc, #392]	@ (8002e7c <HAL_ADC_ConfigChannel+0xbec>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d101      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0xa6a>
 8002cf6:	4a62      	ldr	r2, [pc, #392]	@ (8002e80 <HAL_ADC_ConfigChannel+0xbf0>)
 8002cf8:	e000      	b.n	8002cfc <HAL_ADC_ConfigChannel+0xa6c>
 8002cfa:	4a62      	ldr	r2, [pc, #392]	@ (8002e84 <HAL_ADC_ConfigChannel+0xbf4>)
 8002cfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f7fe fd13 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
 8002d0c:	e003      	b.n	8002d16 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a62      	ldr	r2, [pc, #392]	@ (8002e9c <HAL_ADC_ConfigChannel+0xc0c>)
 8002d14:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a61      	ldr	r2, [pc, #388]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xc10>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	f040 80ca 	bne.w	8002eb6 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 80c3 	bne.w	8002eb6 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0201 	orr.w	r2, r2, #1
 8002d40:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8002d44:	e0b7      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d4e:	d004      	beq.n	8002d5a <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002d54:	4a53      	ldr	r2, [pc, #332]	@ (8002ea4 <HAL_ADC_ConfigChannel+0xc14>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d106      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe fe83 	bl	8001a6e <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f280 80a2 	bge.w	8002eb6 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a40      	ldr	r2, [pc, #256]	@ (8002e78 <HAL_ADC_ConfigChannel+0xbe8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d004      	beq.n	8002d86 <HAL_ADC_ConfigChannel+0xaf6>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a3e      	ldr	r2, [pc, #248]	@ (8002e7c <HAL_ADC_ConfigChannel+0xbec>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0xafa>
 8002d86:	4b3e      	ldr	r3, [pc, #248]	@ (8002e80 <HAL_ADC_ConfigChannel+0xbf0>)
 8002d88:	e000      	b.n	8002d8c <HAL_ADC_ConfigChannel+0xafc>
 8002d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e84 <HAL_ADC_ConfigChannel+0xbf4>)
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe fce3 	bl	8001758 <LL_ADC_GetCommonPathInternalCh>
 8002d92:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a43      	ldr	r2, [pc, #268]	@ (8002ea8 <HAL_ADC_ConfigChannel+0xc18>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d115      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a34      	ldr	r2, [pc, #208]	@ (8002e78 <HAL_ADC_ConfigChannel+0xbe8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d004      	beq.n	8002db4 <HAL_ADC_ConfigChannel+0xb24>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a33      	ldr	r2, [pc, #204]	@ (8002e7c <HAL_ADC_ConfigChannel+0xbec>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0xb28>
 8002db4:	4a32      	ldr	r2, [pc, #200]	@ (8002e80 <HAL_ADC_ConfigChannel+0xbf0>)
 8002db6:	e000      	b.n	8002dba <HAL_ADC_ConfigChannel+0xb2a>
 8002db8:	4a32      	ldr	r2, [pc, #200]	@ (8002e84 <HAL_ADC_ConfigChannel+0xbf4>)
 8002dba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dbe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	f7fe fcb4 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
 8002dca:	e034      	b.n	8002e36 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a36      	ldr	r2, [pc, #216]	@ (8002eac <HAL_ADC_ConfigChannel+0xc1c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d115      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a27      	ldr	r2, [pc, #156]	@ (8002e78 <HAL_ADC_ConfigChannel+0xbe8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d004      	beq.n	8002dea <HAL_ADC_ConfigChannel+0xb5a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a25      	ldr	r2, [pc, #148]	@ (8002e7c <HAL_ADC_ConfigChannel+0xbec>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_ADC_ConfigChannel+0xb5e>
 8002dea:	4a25      	ldr	r2, [pc, #148]	@ (8002e80 <HAL_ADC_ConfigChannel+0xbf0>)
 8002dec:	e000      	b.n	8002df0 <HAL_ADC_ConfigChannel+0xb60>
 8002dee:	4a25      	ldr	r2, [pc, #148]	@ (8002e84 <HAL_ADC_ConfigChannel+0xbf4>)
 8002df0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002df4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	f7fe fc99 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
 8002e00:	e019      	b.n	8002e36 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a24      	ldr	r2, [pc, #144]	@ (8002e98 <HAL_ADC_ConfigChannel+0xc08>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d114      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a19      	ldr	r2, [pc, #100]	@ (8002e78 <HAL_ADC_ConfigChannel+0xbe8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d004      	beq.n	8002e20 <HAL_ADC_ConfigChannel+0xb90>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a18      	ldr	r2, [pc, #96]	@ (8002e7c <HAL_ADC_ConfigChannel+0xbec>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0xb94>
 8002e20:	4a17      	ldr	r2, [pc, #92]	@ (8002e80 <HAL_ADC_ConfigChannel+0xbf0>)
 8002e22:	e000      	b.n	8002e26 <HAL_ADC_ConfigChannel+0xb96>
 8002e24:	4a17      	ldr	r2, [pc, #92]	@ (8002e84 <HAL_ADC_ConfigChannel+0xbf4>)
 8002e26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e2a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4610      	mov	r0, r2
 8002e32:	f7fe fc7e 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a19      	ldr	r2, [pc, #100]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xc10>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d13a      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d134      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0201 	orr.w	r2, r2, #1
 8002e5c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8002e60:	e029      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e66:	f043 0220 	orr.w	r2, r3, #32
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002e74:	e01f      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0xc26>
 8002e76:	bf00      	nop
 8002e78:	42028000 	.word	0x42028000
 8002e7c:	42028100 	.word	0x42028100
 8002e80:	42028300 	.word	0x42028300
 8002e84:	46021300 	.word	0x46021300
 8002e88:	b6002000 	.word	0xb6002000
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	053e2d63 	.word	0x053e2d63
 8002e94:	ba004000 	.word	0xba004000
 8002e98:	80000001 	.word	0x80000001
 8002e9c:	b2001000 	.word	0xb2001000
 8002ea0:	d7200000 	.word	0xd7200000
 8002ea4:	80000010 	.word	0x80000010
 8002ea8:	ce080000 	.word	0xce080000
 8002eac:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eb0:	bf00      	nop
 8002eb2:	e000      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eb4:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8002ebe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	37dc      	adds	r7, #220	@ 0xdc
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd90      	pop	{r4, r7, pc}
 8002eca:	bf00      	nop

08002ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002edc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f10 <__NVIC_SetPriorityGrouping+0x44>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ef4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002efe:	4a04      	ldr	r2, [pc, #16]	@ (8002f10 <__NVIC_SetPriorityGrouping+0x44>)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	60d3      	str	r3, [r2, #12]
}
 8002f04:	bf00      	nop
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f18:	4b04      	ldr	r3, [pc, #16]	@ (8002f2c <__NVIC_GetPriorityGrouping+0x18>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	0a1b      	lsrs	r3, r3, #8
 8002f1e:	f003 0307 	and.w	r3, r3, #7
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	db0b      	blt.n	8002f5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	f003 021f 	and.w	r2, r3, #31
 8002f48:	4907      	ldr	r1, [pc, #28]	@ (8002f68 <__NVIC_EnableIRQ+0x38>)
 8002f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	2001      	movs	r0, #1
 8002f52:	fa00 f202 	lsl.w	r2, r0, r2
 8002f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	e000e100 	.word	0xe000e100

08002f6c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	db12      	blt.n	8002fa4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	f003 021f 	and.w	r2, r3, #31
 8002f84:	490a      	ldr	r1, [pc, #40]	@ (8002fb0 <__NVIC_DisableIRQ+0x44>)
 8002f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f92:	3320      	adds	r3, #32
 8002f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f98:	f3bf 8f4f 	dsb	sy
}
 8002f9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f9e:	f3bf 8f6f 	isb	sy
}
 8002fa2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000e100 	.word	0xe000e100

08002fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	6039      	str	r1, [r7, #0]
 8002fbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	db0a      	blt.n	8002fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	490c      	ldr	r1, [pc, #48]	@ (8003000 <__NVIC_SetPriority+0x4c>)
 8002fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fd2:	0112      	lsls	r2, r2, #4
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fdc:	e00a      	b.n	8002ff4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4908      	ldr	r1, [pc, #32]	@ (8003004 <__NVIC_SetPriority+0x50>)
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	3b04      	subs	r3, #4
 8002fec:	0112      	lsls	r2, r2, #4
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	761a      	strb	r2, [r3, #24]
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000e100 	.word	0xe000e100
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	@ 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f1c3 0307 	rsb	r3, r3, #7
 8003022:	2b04      	cmp	r3, #4
 8003024:	bf28      	it	cs
 8003026:	2304      	movcs	r3, #4
 8003028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	3304      	adds	r3, #4
 800302e:	2b06      	cmp	r3, #6
 8003030:	d902      	bls.n	8003038 <NVIC_EncodePriority+0x30>
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3b03      	subs	r3, #3
 8003036:	e000      	b.n	800303a <NVIC_EncodePriority+0x32>
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800303c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43da      	mvns	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	401a      	ands	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003050:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	fa01 f303 	lsl.w	r3, r1, r3
 800305a:	43d9      	mvns	r1, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003060:	4313      	orrs	r3, r2
         );
}
 8003062:	4618      	mov	r0, r3
 8003064:	3724      	adds	r7, #36	@ 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff ff28 	bl	8002ecc <__NVIC_SetPriorityGrouping>
}
 800307c:	bf00      	nop
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003092:	f7ff ff3f 	bl	8002f14 <__NVIC_GetPriorityGrouping>
 8003096:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	68b9      	ldr	r1, [r7, #8]
 800309c:	6978      	ldr	r0, [r7, #20]
 800309e:	f7ff ffb3 	bl	8003008 <NVIC_EncodePriority>
 80030a2:	4602      	mov	r2, r0
 80030a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff82 	bl	8002fb4 <__NVIC_SetPriority>
}
 80030b0:	bf00      	nop
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff ff32 	bl	8002f30 <__NVIC_EnableIRQ>
}
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80030de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ff42 	bl	8002f6c <__NVIC_DisableIRQ>
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003100:	d301      	bcc.n	8003106 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003102:	2301      	movs	r3, #1
 8003104:	e00d      	b.n	8003122 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003106:	4a0a      	ldr	r2, [pc, #40]	@ (8003130 <HAL_SYSTICK_Config+0x40>)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3b01      	subs	r3, #1
 800310c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800310e:	4b08      	ldr	r3, [pc, #32]	@ (8003130 <HAL_SYSTICK_Config+0x40>)
 8003110:	2200      	movs	r2, #0
 8003112:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003114:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <HAL_SYSTICK_Config+0x40>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a05      	ldr	r2, [pc, #20]	@ (8003130 <HAL_SYSTICK_Config+0x40>)
 800311a:	f043 0303 	orr.w	r3, r3, #3
 800311e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000e010 	.word	0xe000e010

08003134 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b04      	cmp	r3, #4
 8003140:	d844      	bhi.n	80031cc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003142:	a201      	add	r2, pc, #4	@ (adr r2, 8003148 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	0800316b 	.word	0x0800316b
 800314c:	08003189 	.word	0x08003189
 8003150:	080031ab 	.word	0x080031ab
 8003154:	080031cd 	.word	0x080031cd
 8003158:	0800315d 	.word	0x0800315d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800315c:	4b1f      	ldr	r3, [pc, #124]	@ (80031dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1e      	ldr	r2, [pc, #120]	@ (80031dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003162:	f043 0304 	orr.w	r3, r3, #4
 8003166:	6013      	str	r3, [r2, #0]
      break;
 8003168:	e031      	b.n	80031ce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800316a:	4b1c      	ldr	r3, [pc, #112]	@ (80031dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1b      	ldr	r2, [pc, #108]	@ (80031dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8003176:	4b1a      	ldr	r3, [pc, #104]	@ (80031e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800317c:	4a18      	ldr	r2, [pc, #96]	@ (80031e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800317e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003182:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003186:	e022      	b.n	80031ce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003188:	4b14      	ldr	r3, [pc, #80]	@ (80031dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a13      	ldr	r2, [pc, #76]	@ (80031dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800318e:	f023 0304 	bic.w	r3, r3, #4
 8003192:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8003194:	4b12      	ldr	r3, [pc, #72]	@ (80031e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800319a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800319e:	4a10      	ldr	r2, [pc, #64]	@ (80031e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80031a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80031a8:	e011      	b.n	80031ce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80031aa:	4b0c      	ldr	r3, [pc, #48]	@ (80031dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a0b      	ldr	r2, [pc, #44]	@ (80031dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80031b0:	f023 0304 	bic.w	r3, r3, #4
 80031b4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80031b6:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80031b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031bc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80031c0:	4a07      	ldr	r2, [pc, #28]	@ (80031e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80031c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80031ca:	e000      	b.n	80031ce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80031cc:	bf00      	nop
  }
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	e000e010 	.word	0xe000e010
 80031e0:	46020c00 	.word	0x46020c00

080031e4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80031ea:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80031f6:	2304      	movs	r3, #4
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	e021      	b.n	8003240 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80031fc:	4b15      	ldr	r3, [pc, #84]	@ (8003254 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80031fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003202:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003206:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800320e:	d011      	beq.n	8003234 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003216:	d810      	bhi.n	800323a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d004      	beq.n	8003228 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003224:	d003      	beq.n	800322e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003226:	e008      	b.n	800323a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003228:	2300      	movs	r3, #0
 800322a:	607b      	str	r3, [r7, #4]
        break;
 800322c:	e008      	b.n	8003240 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800322e:	2301      	movs	r3, #1
 8003230:	607b      	str	r3, [r7, #4]
        break;
 8003232:	e005      	b.n	8003240 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003234:	2302      	movs	r3, #2
 8003236:	607b      	str	r3, [r7, #4]
        break;
 8003238:	e002      	b.n	8003240 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]
        break;
 800323e:	bf00      	nop
    }
  }
  return systick_source;
 8003240:	687b      	ldr	r3, [r7, #4]
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	e000e010 	.word	0xe000e010
 8003254:	46020c00 	.word	0x46020c00

08003258 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
#if defined(SAES)
  uint32_t tickstart;
#endif /* SAES */

  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0a7      	b.n	80033ba <HAL_CRYP_Init+0x162>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fd fe66 	bl	8000f50 <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  if (hcryp->Instance == AES)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a4e      	ldr	r2, [pc, #312]	@ (80033c4 <HAL_CRYP_Init+0x16c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d116      	bne.n	80032bc <HAL_CRYP_Init+0x64>
  {
    /* Set the key size, data type and Algorithm */
    cr_value = (uint32_t)(hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm | hcryp->Init.KeyMode);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm and mode */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, cr_value);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b46      	ldr	r3, [pc, #280]	@ (80033c8 <HAL_CRYP_Init+0x170>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	430b      	orrs	r3, r1
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e070      	b.n	800339e <HAL_CRYP_Init+0x146>
  }
  else
  {
    /* SAES is initializing, fetching random number from the RNG */
    tickstart = HAL_GetTick();
 80032bc:	f7fe f9f6 	bl	80016ac <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 80032c2:	e01e      	b.n	8003302 <HAL_CRYP_Init+0xaa>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 80032c4:	f7fe f9f2 	bl	80016ac <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b52      	cmp	r3, #82	@ 0x52
 80032d0:	d917      	bls.n	8003302 <HAL_CRYP_Init+0xaa>
      {
        __HAL_CRYP_DISABLE(hcryp);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e6:	f043 0210 	orr.w	r2, r3, #16
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e05b      	b.n	80033ba <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b08      	cmp	r3, #8
 800330e:	d0d9      	beq.n	80032c4 <HAL_CRYP_Init+0x6c>
      }
    }
    /* SAES is initializing, no random number fetching error flagged */
    tickstart = HAL_GetTick();
 8003310:	f7fe f9cc 	bl	80016ac <HAL_GetTick>
 8003314:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8003316:	e01e      	b.n	8003356 <HAL_CRYP_Init+0xfe>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8003318:	f7fe f9c8 	bl	80016ac <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b52      	cmp	r3, #82	@ 0x52
 8003324:	d917      	bls.n	8003356 <HAL_CRYP_Init+0xfe>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0201 	bic.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_RNG;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e031      	b.n	80033ba <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b08      	cmp	r3, #8
 8003364:	d0d8      	beq.n	8003318 <HAL_CRYP_Init+0xc0>
      }
    }
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 800337a:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8003386:	4313      	orrs	r3, r2
 8003388:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm, Key selection and key protection */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD | AES_CR_KEYSEL |
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <HAL_CRYP_Init+0x174>)
 8003392:	4013      	ands	r3, r2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	430b      	orrs	r3, r1
 800339c:	6013      	str	r3, [r2, #0]
               AES_CR_KEYPROT, cr_value);
  }
  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	420c0000 	.word	0x420c0000
 80033c8:	fcfaff99 	.word	0xfcfaff99
 80033cc:	8cf2ff99 	.word	0x8cf2ff99

080033d0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b089      	sub	sp, #36	@ 0x24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80033e2:	e1ba      	b.n	800375a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	2101      	movs	r1, #1
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	fa01 f303 	lsl.w	r3, r1, r3
 80033f0:	4013      	ands	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 81aa 	beq.w	8003754 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a55      	ldr	r2, [pc, #340]	@ (8003558 <HAL_GPIO_Init+0x188>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d15d      	bne.n	80034c4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800340e:	2201      	movs	r2, #1
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	4013      	ands	r3, r2
 800341c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 0201 	and.w	r2, r3, #1
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	4313      	orrs	r3, r2
 8003430:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003438:	4a48      	ldr	r2, [pc, #288]	@ (800355c <HAL_GPIO_Init+0x18c>)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003440:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003442:	4a46      	ldr	r2, [pc, #280]	@ (800355c <HAL_GPIO_Init+0x18c>)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	08da      	lsrs	r2, r3, #3
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	3208      	adds	r2, #8
 8003456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800345a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	220f      	movs	r2, #15
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	69fa      	ldr	r2, [r7, #28]
 800346e:	4013      	ands	r3, r2
 8003470:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	220b      	movs	r2, #11
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	4313      	orrs	r3, r2
 8003484:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	08da      	lsrs	r2, r3, #3
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	3208      	adds	r2, #8
 800348e:	69f9      	ldr	r1, [r7, #28]
 8003490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	2203      	movs	r2, #3
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	2202      	movs	r2, #2
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	e067      	b.n	8003594 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x104>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b12      	cmp	r3, #18
 80034d2:	d145      	bne.n	8003560 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	08da      	lsrs	r2, r3, #3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3208      	adds	r2, #8
 80034dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	220f      	movs	r2, #15
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f003 020f 	and.w	r2, r3, #15
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	4313      	orrs	r3, r2
 8003510:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	08da      	lsrs	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3208      	adds	r2, #8
 800351a:	69f9      	ldr	r1, [r7, #28]
 800351c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	2203      	movs	r2, #3
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	4013      	ands	r3, r2
 8003536:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0203 	and.w	r2, r3, #3
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	4313      	orrs	r3, r2
 800354c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e01e      	b.n	8003594 <HAL_GPIO_Init+0x1c4>
 8003556:	bf00      	nop
 8003558:	46020000 	.word	0x46020000
 800355c:	0800e704 	.word	0x0800e704
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	2203      	movs	r2, #3
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	4013      	ands	r3, r2
 8003576:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0203 	and.w	r2, r3, #3
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	4313      	orrs	r3, r2
 800358c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	69fa      	ldr	r2, [r7, #28]
 8003592:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d00b      	beq.n	80035b4 <HAL_GPIO_Init+0x1e4>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d007      	beq.n	80035b4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035a8:	2b11      	cmp	r3, #17
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b12      	cmp	r3, #18
 80035b2:	d130      	bne.n	8003616 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	2203      	movs	r2, #3
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	69fa      	ldr	r2, [r7, #28]
 80035e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80035ea:	2201      	movs	r2, #1
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	4013      	ands	r3, r2
 80035f8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	f003 0201 	and.w	r2, r3, #1
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	4313      	orrs	r3, r2
 800360e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b03      	cmp	r3, #3
 800361c:	d017      	beq.n	800364e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	2203      	movs	r2, #3
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	4013      	ands	r3, r2
 8003634:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	4313      	orrs	r3, r2
 8003646:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d07c      	beq.n	8003754 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800365a:	4a47      	ldr	r2, [pc, #284]	@ (8003778 <HAL_GPIO_Init+0x3a8>)
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	089b      	lsrs	r3, r3, #2
 8003660:	3318      	adds	r3, #24
 8003662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003666:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	220f      	movs	r2, #15
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	4013      	ands	r3, r2
 800367c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0a9a      	lsrs	r2, r3, #10
 8003682:	4b3e      	ldr	r3, [pc, #248]	@ (800377c <HAL_GPIO_Init+0x3ac>)
 8003684:	4013      	ands	r3, r2
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	f002 0203 	and.w	r2, r2, #3
 800368c:	00d2      	lsls	r2, r2, #3
 800368e:	4093      	lsls	r3, r2
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	4313      	orrs	r3, r2
 8003694:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003696:	4938      	ldr	r1, [pc, #224]	@ (8003778 <HAL_GPIO_Init+0x3a8>)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	089b      	lsrs	r3, r3, #2
 800369c:	3318      	adds	r3, #24
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80036a4:	4b34      	ldr	r3, [pc, #208]	@ (8003778 <HAL_GPIO_Init+0x3a8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	43db      	mvns	r3, r3
 80036ae:	69fa      	ldr	r2, [r7, #28]
 80036b0:	4013      	ands	r3, r2
 80036b2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80036c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003778 <HAL_GPIO_Init+0x3a8>)
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80036ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003778 <HAL_GPIO_Init+0x3a8>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	4013      	ands	r3, r2
 80036dc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80036f2:	4a21      	ldr	r2, [pc, #132]	@ (8003778 <HAL_GPIO_Init+0x3a8>)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80036f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003778 <HAL_GPIO_Init+0x3a8>)
 80036fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036fe:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	43db      	mvns	r3, r3
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	4013      	ands	r3, r2
 8003708:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800371e:	4a16      	ldr	r2, [pc, #88]	@ (8003778 <HAL_GPIO_Init+0x3a8>)
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003726:	4b14      	ldr	r3, [pc, #80]	@ (8003778 <HAL_GPIO_Init+0x3a8>)
 8003728:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800372c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	43db      	mvns	r3, r3
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	4013      	ands	r3, r2
 8003736:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800374c:	4a0a      	ldr	r2, [pc, #40]	@ (8003778 <HAL_GPIO_Init+0x3a8>)
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	3301      	adds	r3, #1
 8003758:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	f47f ae3d 	bne.w	80033e4 <HAL_GPIO_Init+0x14>
  }
}
 800376a:	bf00      	nop
 800376c:	bf00      	nop
 800376e:	3724      	adds	r7, #36	@ 0x24
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	46022000 	.word	0x46022000
 800377c:	002f7f7f 	.word	0x002f7f7f

08003780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	807b      	strh	r3, [r7, #2]
 800378c:	4613      	mov	r3, r2
 800378e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003790:	787b      	ldrb	r3, [r7, #1]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003796:	887a      	ldrh	r2, [r7, #2]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800379c:	e002      	b.n	80037a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800379e:	887a      	ldrh	r2, [r7, #2]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80037ba:	4b0f      	ldr	r3, [pc, #60]	@ (80037f8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d006      	beq.n	80037d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80037c6:	4a0c      	ldr	r2, [pc, #48]	@ (80037f8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80037c8:	88fb      	ldrh	r3, [r7, #6]
 80037ca:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 f814 	bl	80037fc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80037d4:	4b08      	ldr	r3, [pc, #32]	@ (80037f8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	4013      	ands	r3, r2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d006      	beq.n	80037ee <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80037e0:	4a05      	ldr	r2, [pc, #20]	@ (80037f8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f812 	bl	8003812 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	46022000 	.word	0x46022000

080037fc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	4603      	mov	r3, r0
 800381a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e08d      	b.n	8003956 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd fba0 	bl	8000f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2224      	movs	r2, #36	@ 0x24
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003878:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003888:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d107      	bne.n	80038a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	e006      	b.n	80038b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80038ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d108      	bne.n	80038ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038c6:	605a      	str	r2, [r3, #4]
 80038c8:	e007      	b.n	80038da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80038e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69d9      	ldr	r1, [r3, #28]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1a      	ldr	r2, [r3, #32]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b20      	cmp	r3, #32
 8003972:	d138      	bne.n	80039e6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800397e:	2302      	movs	r3, #2
 8003980:	e032      	b.n	80039e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2224      	movs	r2, #36	@ 0x24
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039b0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6819      	ldr	r1, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0201 	orr.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e000      	b.n	80039e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039e6:	2302      	movs	r3, #2
  }
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	d139      	bne.n	8003a7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e033      	b.n	8003a80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2224      	movs	r2, #36	@ 0x24
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 0201 	orr.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
  }
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003a98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
 8003aa8:	e007      	b.n	8003aba <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003aaa:	4b07      	ldr	r3, [pc, #28]	@ (8003ac8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 0204 	bic.w	r2, r3, #4
 8003ab2:	4905      	ldr	r1, [pc, #20]	@ (8003ac8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	40030400 	.word	0x40030400

08003acc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003ad0:	4b05      	ldr	r3, [pc, #20]	@ (8003ae8 <HAL_ICACHE_Enable+0x1c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a04      	ldr	r2, [pc, #16]	@ (8003ae8 <HAL_ICACHE_Enable+0x1c>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	40030400 	.word	0x40030400

08003aec <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e059      	b.n	8003bb2 <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 8003afe:	4b30      	ldr	r3, [pc, #192]	@ (8003bc0 <HAL_PWR_ConfigPVD+0xd4>)
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	492d      	ldr	r1, [pc, #180]	@ (8003bc0 <HAL_PWR_ConfigPVD+0xd4>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003b10:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b16:	4a2b      	ldr	r2, [pc, #172]	@ (8003bc4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b1c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8003b20:	4b28      	ldr	r3, [pc, #160]	@ (8003bc4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b26:	4a27      	ldr	r2, [pc, #156]	@ (8003bc4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8003b30:	4b24      	ldr	r3, [pc, #144]	@ (8003bc4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a23      	ldr	r2, [pc, #140]	@ (8003bc4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8003b3c:	4b21      	ldr	r3, [pc, #132]	@ (8003bc4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a20      	ldr	r2, [pc, #128]	@ (8003bc4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b46:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8003b54:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8003b70:	4b14      	ldr	r3, [pc, #80]	@ (8003bc4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b76:	4a13      	ldr	r2, [pc, #76]	@ (8003bc4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b7c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0c      	ldr	r2, [pc, #48]	@ (8003bc4 <HAL_PWR_ConfigPVD+0xd8>)
 8003b92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8003ba4:	4b07      	ldr	r3, [pc, #28]	@ (8003bc4 <HAL_PWR_ConfigPVD+0xd8>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4a06      	ldr	r2, [pc, #24]	@ (8003bc4 <HAL_PWR_ConfigPVD+0xd8>)
 8003baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bae:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	46020800 	.word	0x46020800
 8003bc4:	46022000 	.word	0x46022000

08003bc8 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 8003bcc:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <HAL_PWR_EnablePVD+0x1c>)
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	4a04      	ldr	r2, [pc, #16]	@ (8003be4 <HAL_PWR_EnablePVD+0x1c>)
 8003bd2:	f043 0310 	orr.w	r3, r3, #16
 8003bd6:	6113      	str	r3, [r2, #16]
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	46020800 	.word	0x46020800

08003be8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003bf0:	4b39      	ldr	r3, [pc, #228]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bf8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d10b      	bne.n	8003c1a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c08:	d905      	bls.n	8003c16 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003c0a:	4b33      	ldr	r3, [pc, #204]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	4a32      	ldr	r2, [pc, #200]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c14:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e057      	b.n	8003cca <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c20:	d90a      	bls.n	8003c38 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003c22:	4b2d      	ldr	r3, [pc, #180]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c34:	60d3      	str	r3, [r2, #12]
 8003c36:	e007      	b.n	8003c48 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003c38:	4b27      	ldr	r3, [pc, #156]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003c40:	4925      	ldr	r1, [pc, #148]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003c48:	4b24      	ldr	r3, [pc, #144]	@ (8003cdc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a24      	ldr	r2, [pc, #144]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	099b      	lsrs	r3, r3, #6
 8003c54:	2232      	movs	r2, #50	@ 0x32
 8003c56:	fb02 f303 	mul.w	r3, r2, r3
 8003c5a:	4a21      	ldr	r2, [pc, #132]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	099b      	lsrs	r3, r3, #6
 8003c62:	3301      	adds	r3, #1
 8003c64:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003c66:	e002      	b.n	8003c6e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d102      	bne.n	8003c80 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f3      	bne.n	8003c68 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d01b      	beq.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003c86:	4b15      	ldr	r3, [pc, #84]	@ (8003cdc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a15      	ldr	r2, [pc, #84]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	099b      	lsrs	r3, r3, #6
 8003c92:	2232      	movs	r2, #50	@ 0x32
 8003c94:	fb02 f303 	mul.w	r3, r2, r3
 8003c98:	4a11      	ldr	r2, [pc, #68]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	099b      	lsrs	r3, r3, #6
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003ca4:	e002      	b.n	8003cac <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003cac:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f3      	bne.n	8003ca6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e000      	b.n	8003cca <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	46020800 	.word	0x46020800
 8003cdc:	20000000 	.word	0x20000000
 8003ce0:	10624dd3 	.word	0x10624dd3

08003ce4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003ce8:	4b04      	ldr	r3, [pc, #16]	@ (8003cfc <HAL_PWREx_GetVoltageRange+0x18>)
 8003cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	46020800 	.word	0x46020800

08003d00 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003d04:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	4a04      	ldr	r2, [pc, #16]	@ (8003d1c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d0a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d0e:	6113      	str	r3, [r2, #16]
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	46020800 	.word	0x46020800

08003d20 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003d24:	4b05      	ldr	r3, [pc, #20]	@ (8003d3c <HAL_PWREx_EnableVddA+0x1c>)
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	4a04      	ldr	r2, [pc, #16]	@ (8003d3c <HAL_PWREx_EnableVddA+0x1c>)
 8003d2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d2e:	6113      	str	r3, [r2, #16]
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	46020800 	.word	0x46020800

08003d40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08e      	sub	sp, #56	@ 0x38
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d102      	bne.n	8003d5a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f000 bec8 	b.w	8004aea <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5a:	4b99      	ldr	r3, [pc, #612]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d64:	4b96      	ldr	r3, [pc, #600]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 816c 	beq.w	8004054 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d007      	beq.n	8003d92 <HAL_RCC_OscConfig+0x52>
 8003d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d84:	2b0c      	cmp	r3, #12
 8003d86:	f040 80de 	bne.w	8003f46 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	f040 80da 	bne.w	8003f46 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d102      	bne.n	8003da0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f000 bea5 	b.w	8004aea <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003da4:	4b86      	ldr	r3, [pc, #536]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <HAL_RCC_OscConfig+0x7a>
 8003db0:	4b83      	ldr	r3, [pc, #524]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003db8:	e005      	b.n	8003dc6 <HAL_RCC_OscConfig+0x86>
 8003dba:	4b81      	ldr	r3, [pc, #516]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003dbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003dc0:	041b      	lsls	r3, r3, #16
 8003dc2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d255      	bcs.n	8003e76 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f001 f9d9 	bl	800518c <RCC_SetFlashLatencyFromMSIRange>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f000 be82 	b.w	8004aea <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003de6:	4b76      	ldr	r3, [pc, #472]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	4a75      	ldr	r2, [pc, #468]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003dec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003df0:	6093      	str	r3, [r2, #8]
 8003df2:	4b73      	ldr	r3, [pc, #460]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	4970      	ldr	r1, [pc, #448]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003e0c:	d309      	bcc.n	8003e22 <HAL_RCC_OscConfig+0xe2>
 8003e0e:	4b6c      	ldr	r3, [pc, #432]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f023 021f 	bic.w	r2, r3, #31
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	4969      	ldr	r1, [pc, #420]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60cb      	str	r3, [r1, #12]
 8003e20:	e07e      	b.n	8003f20 <HAL_RCC_OscConfig+0x1e0>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	da0a      	bge.n	8003e40 <HAL_RCC_OscConfig+0x100>
 8003e2a:	4b65      	ldr	r3, [pc, #404]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	015b      	lsls	r3, r3, #5
 8003e38:	4961      	ldr	r1, [pc, #388]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60cb      	str	r3, [r1, #12]
 8003e3e:	e06f      	b.n	8003f20 <HAL_RCC_OscConfig+0x1e0>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e48:	d30a      	bcc.n	8003e60 <HAL_RCC_OscConfig+0x120>
 8003e4a:	4b5d      	ldr	r3, [pc, #372]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	029b      	lsls	r3, r3, #10
 8003e58:	4959      	ldr	r1, [pc, #356]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60cb      	str	r3, [r1, #12]
 8003e5e:	e05f      	b.n	8003f20 <HAL_RCC_OscConfig+0x1e0>
 8003e60:	4b57      	ldr	r3, [pc, #348]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	03db      	lsls	r3, r3, #15
 8003e6e:	4954      	ldr	r1, [pc, #336]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60cb      	str	r3, [r1, #12]
 8003e74:	e054      	b.n	8003f20 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003e76:	4b52      	ldr	r3, [pc, #328]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	4a51      	ldr	r2, [pc, #324]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003e7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e80:	6093      	str	r3, [r2, #8]
 8003e82:	4b4f      	ldr	r3, [pc, #316]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8e:	494c      	ldr	r1, [pc, #304]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003e9c:	d309      	bcc.n	8003eb2 <HAL_RCC_OscConfig+0x172>
 8003e9e:	4b48      	ldr	r3, [pc, #288]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f023 021f 	bic.w	r2, r3, #31
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	4945      	ldr	r1, [pc, #276]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60cb      	str	r3, [r1, #12]
 8003eb0:	e028      	b.n	8003f04 <HAL_RCC_OscConfig+0x1c4>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	da0a      	bge.n	8003ed0 <HAL_RCC_OscConfig+0x190>
 8003eba:	4b41      	ldr	r3, [pc, #260]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	015b      	lsls	r3, r3, #5
 8003ec8:	493d      	ldr	r1, [pc, #244]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60cb      	str	r3, [r1, #12]
 8003ece:	e019      	b.n	8003f04 <HAL_RCC_OscConfig+0x1c4>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed8:	d30a      	bcc.n	8003ef0 <HAL_RCC_OscConfig+0x1b0>
 8003eda:	4b39      	ldr	r3, [pc, #228]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	029b      	lsls	r3, r3, #10
 8003ee8:	4935      	ldr	r1, [pc, #212]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60cb      	str	r3, [r1, #12]
 8003eee:	e009      	b.n	8003f04 <HAL_RCC_OscConfig+0x1c4>
 8003ef0:	4b33      	ldr	r3, [pc, #204]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	03db      	lsls	r3, r3, #15
 8003efe:	4930      	ldr	r1, [pc, #192]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 f93c 	bl	800518c <RCC_SetFlashLatencyFromMSIRange>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f000 bde5 	b.w	8004aea <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003f20:	f001 f8de 	bl	80050e0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f24:	4b27      	ldr	r3, [pc, #156]	@ (8003fc4 <HAL_RCC_OscConfig+0x284>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fd fb35 	bl	8001598 <HAL_InitTick>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003f34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 808a 	beq.w	8004052 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f42:	f000 bdd2 	b.w	8004aea <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d066      	beq.n	800401c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1b      	ldr	r2, [pc, #108]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f5a:	f7fd fba7 	bl	80016ac <HAL_GetTick>
 8003f5e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003f60:	e009      	b.n	8003f76 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f62:	f7fd fba3 	bl	80016ac <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d902      	bls.n	8003f76 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	f000 bdba 	b.w	8004aea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003f76:	4b12      	ldr	r3, [pc, #72]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0ef      	beq.n	8003f62 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003f82:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	4a0e      	ldr	r2, [pc, #56]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003f88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f8c:	6093      	str	r3, [r2, #8]
 8003f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9a:	4909      	ldr	r1, [pc, #36]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003fa8:	d30e      	bcc.n	8003fc8 <HAL_RCC_OscConfig+0x288>
 8003faa:	4b05      	ldr	r3, [pc, #20]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f023 021f 	bic.w	r2, r3, #31
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	4902      	ldr	r1, [pc, #8]	@ (8003fc0 <HAL_RCC_OscConfig+0x280>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60cb      	str	r3, [r1, #12]
 8003fbc:	e04a      	b.n	8004054 <HAL_RCC_OscConfig+0x314>
 8003fbe:	bf00      	nop
 8003fc0:	46020c00 	.word	0x46020c00
 8003fc4:	20000004 	.word	0x20000004
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	da0a      	bge.n	8003fe6 <HAL_RCC_OscConfig+0x2a6>
 8003fd0:	4b98      	ldr	r3, [pc, #608]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	015b      	lsls	r3, r3, #5
 8003fde:	4995      	ldr	r1, [pc, #596]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60cb      	str	r3, [r1, #12]
 8003fe4:	e036      	b.n	8004054 <HAL_RCC_OscConfig+0x314>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fee:	d30a      	bcc.n	8004006 <HAL_RCC_OscConfig+0x2c6>
 8003ff0:	4b90      	ldr	r3, [pc, #576]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	029b      	lsls	r3, r3, #10
 8003ffe:	498d      	ldr	r1, [pc, #564]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004000:	4313      	orrs	r3, r2
 8004002:	60cb      	str	r3, [r1, #12]
 8004004:	e026      	b.n	8004054 <HAL_RCC_OscConfig+0x314>
 8004006:	4b8b      	ldr	r3, [pc, #556]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	03db      	lsls	r3, r3, #15
 8004014:	4987      	ldr	r1, [pc, #540]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	60cb      	str	r3, [r1, #12]
 800401a:	e01b      	b.n	8004054 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800401c:	4b85      	ldr	r3, [pc, #532]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a84      	ldr	r2, [pc, #528]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004022:	f023 0301 	bic.w	r3, r3, #1
 8004026:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004028:	f7fd fb40 	bl	80016ac <HAL_GetTick>
 800402c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800402e:	e009      	b.n	8004044 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004030:	f7fd fb3c 	bl	80016ac <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d902      	bls.n	8004044 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	f000 bd53 	b.w	8004aea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004044:	4b7b      	ldr	r3, [pc, #492]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1ef      	bne.n	8004030 <HAL_RCC_OscConfig+0x2f0>
 8004050:	e000      	b.n	8004054 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004052:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 808b 	beq.w	8004178 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004064:	2b08      	cmp	r3, #8
 8004066:	d005      	beq.n	8004074 <HAL_RCC_OscConfig+0x334>
 8004068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406a:	2b0c      	cmp	r3, #12
 800406c:	d109      	bne.n	8004082 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800406e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004070:	2b03      	cmp	r3, #3
 8004072:	d106      	bne.n	8004082 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d17d      	bne.n	8004178 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	f000 bd34 	b.w	8004aea <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800408a:	d106      	bne.n	800409a <HAL_RCC_OscConfig+0x35a>
 800408c:	4b69      	ldr	r3, [pc, #420]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a68      	ldr	r2, [pc, #416]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004092:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	e041      	b.n	800411e <HAL_RCC_OscConfig+0x3de>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040a2:	d112      	bne.n	80040ca <HAL_RCC_OscConfig+0x38a>
 80040a4:	4b63      	ldr	r3, [pc, #396]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a62      	ldr	r2, [pc, #392]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80040aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	4b60      	ldr	r3, [pc, #384]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a5f      	ldr	r2, [pc, #380]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80040b6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	4b5d      	ldr	r3, [pc, #372]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a5c      	ldr	r2, [pc, #368]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80040c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	e029      	b.n	800411e <HAL_RCC_OscConfig+0x3de>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80040d2:	d112      	bne.n	80040fa <HAL_RCC_OscConfig+0x3ba>
 80040d4:	4b57      	ldr	r3, [pc, #348]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a56      	ldr	r2, [pc, #344]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80040da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	4b54      	ldr	r3, [pc, #336]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a53      	ldr	r2, [pc, #332]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80040e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	4b51      	ldr	r3, [pc, #324]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a50      	ldr	r2, [pc, #320]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80040f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	e011      	b.n	800411e <HAL_RCC_OscConfig+0x3de>
 80040fa:	4b4e      	ldr	r3, [pc, #312]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a4d      	ldr	r2, [pc, #308]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b4b      	ldr	r3, [pc, #300]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a4a      	ldr	r2, [pc, #296]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 800410c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4b48      	ldr	r3, [pc, #288]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a47      	ldr	r2, [pc, #284]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004118:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800411c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d014      	beq.n	8004150 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004126:	f7fd fac1 	bl	80016ac <HAL_GetTick>
 800412a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800412c:	e009      	b.n	8004142 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800412e:	f7fd fabd 	bl	80016ac <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b64      	cmp	r3, #100	@ 0x64
 800413a:	d902      	bls.n	8004142 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	f000 bcd4 	b.w	8004aea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004142:	4b3c      	ldr	r3, [pc, #240]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0ef      	beq.n	800412e <HAL_RCC_OscConfig+0x3ee>
 800414e:	e013      	b.n	8004178 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004150:	f7fd faac 	bl	80016ac <HAL_GetTick>
 8004154:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004156:	e009      	b.n	800416c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004158:	f7fd faa8 	bl	80016ac <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	@ 0x64
 8004164:	d902      	bls.n	800416c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	f000 bcbf 	b.w	8004aea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800416c:	4b31      	ldr	r3, [pc, #196]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1ef      	bne.n	8004158 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d05f      	beq.n	8004244 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004186:	2b04      	cmp	r3, #4
 8004188:	d005      	beq.n	8004196 <HAL_RCC_OscConfig+0x456>
 800418a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418c:	2b0c      	cmp	r3, #12
 800418e:	d114      	bne.n	80041ba <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004192:	2b02      	cmp	r3, #2
 8004194:	d111      	bne.n	80041ba <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d102      	bne.n	80041a4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	f000 bca3 	b.w	8004aea <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80041a4:	4b23      	ldr	r3, [pc, #140]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	041b      	lsls	r3, r3, #16
 80041b2:	4920      	ldr	r1, [pc, #128]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80041b8:	e044      	b.n	8004244 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d024      	beq.n	800420c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80041c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80041c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041ce:	f7fd fa6d 	bl	80016ac <HAL_GetTick>
 80041d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041d4:	e009      	b.n	80041ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d6:	f7fd fa69 	bl	80016ac <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d902      	bls.n	80041ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	f000 bc80 	b.w	8004aea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ea:	4b12      	ldr	r3, [pc, #72]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0ef      	beq.n	80041d6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80041f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	041b      	lsls	r3, r3, #16
 8004204:	490b      	ldr	r1, [pc, #44]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004206:	4313      	orrs	r3, r2
 8004208:	610b      	str	r3, [r1, #16]
 800420a:	e01b      	b.n	8004244 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800420c:	4b09      	ldr	r3, [pc, #36]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a08      	ldr	r2, [pc, #32]	@ (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004212:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004216:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004218:	f7fd fa48 	bl	80016ac <HAL_GetTick>
 800421c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800421e:	e00b      	b.n	8004238 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004220:	f7fd fa44 	bl	80016ac <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d904      	bls.n	8004238 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	f000 bc5b 	b.w	8004aea <HAL_RCC_OscConfig+0xdaa>
 8004234:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004238:	4baf      	ldr	r3, [pc, #700]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1ed      	bne.n	8004220 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80c8 	beq.w	80043e2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004252:	2300      	movs	r3, #0
 8004254:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004258:	4ba7      	ldr	r3, [pc, #668]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 800425a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b00      	cmp	r3, #0
 8004264:	d111      	bne.n	800428a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004266:	4ba4      	ldr	r3, [pc, #656]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 8004268:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800426c:	4aa2      	ldr	r2, [pc, #648]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 800426e:	f043 0304 	orr.w	r3, r3, #4
 8004272:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004276:	4ba0      	ldr	r3, [pc, #640]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 8004278:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004284:	2301      	movs	r3, #1
 8004286:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800428a:	4b9c      	ldr	r3, [pc, #624]	@ (80044fc <HAL_RCC_OscConfig+0x7bc>)
 800428c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d119      	bne.n	80042ca <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004296:	4b99      	ldr	r3, [pc, #612]	@ (80044fc <HAL_RCC_OscConfig+0x7bc>)
 8004298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429a:	4a98      	ldr	r2, [pc, #608]	@ (80044fc <HAL_RCC_OscConfig+0x7bc>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a2:	f7fd fa03 	bl	80016ac <HAL_GetTick>
 80042a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80042a8:	e009      	b.n	80042be <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042aa:	f7fd f9ff 	bl	80016ac <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d902      	bls.n	80042be <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	f000 bc16 	b.w	8004aea <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80042be:	4b8f      	ldr	r3, [pc, #572]	@ (80044fc <HAL_RCC_OscConfig+0x7bc>)
 80042c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0ef      	beq.n	80042aa <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d05f      	beq.n	8004392 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80042d2:	4b89      	ldr	r3, [pc, #548]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 80042d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042d8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d037      	beq.n	8004358 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d006      	beq.n	8004300 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e3f4      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d01b      	beq.n	8004342 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800430a:	4b7b      	ldr	r3, [pc, #492]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 800430c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004310:	4a79      	ldr	r2, [pc, #484]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 8004312:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004316:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800431a:	f7fd f9c7 	bl	80016ac <HAL_GetTick>
 800431e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004322:	f7fd f9c3 	bl	80016ac <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b05      	cmp	r3, #5
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e3da      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004334:	4b70      	ldr	r3, [pc, #448]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 8004336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800433a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1ef      	bne.n	8004322 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004342:	4b6d      	ldr	r3, [pc, #436]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 8004344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004348:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	4969      	ldr	r1, [pc, #420]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004358:	4b67      	ldr	r3, [pc, #412]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 800435a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800435e:	4a66      	ldr	r2, [pc, #408]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 8004360:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004364:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004368:	f7fd f9a0 	bl	80016ac <HAL_GetTick>
 800436c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004370:	f7fd f99c 	bl	80016ac <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b05      	cmp	r3, #5
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e3b3      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004382:	4b5d      	ldr	r3, [pc, #372]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 8004384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0ef      	beq.n	8004370 <HAL_RCC_OscConfig+0x630>
 8004390:	e01b      	b.n	80043ca <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004392:	4b59      	ldr	r3, [pc, #356]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 8004394:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004398:	4a57      	ldr	r2, [pc, #348]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 800439a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800439e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80043a2:	f7fd f983 	bl	80016ac <HAL_GetTick>
 80043a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043aa:	f7fd f97f 	bl	80016ac <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b05      	cmp	r3, #5
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e396      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80043bc:	4b4e      	ldr	r3, [pc, #312]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 80043be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1ef      	bne.n	80043aa <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043ca:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d107      	bne.n	80043e2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d2:	4b49      	ldr	r3, [pc, #292]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 80043d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043d8:	4a47      	ldr	r2, [pc, #284]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 80043da:	f023 0304 	bic.w	r3, r3, #4
 80043de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 8111 	beq.w	8004612 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80043f0:	2300      	movs	r3, #0
 80043f2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043f6:	4b40      	ldr	r3, [pc, #256]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 80043f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d111      	bne.n	8004428 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004404:	4b3c      	ldr	r3, [pc, #240]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 8004406:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800440a:	4a3b      	ldr	r2, [pc, #236]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 800440c:	f043 0304 	orr.w	r3, r3, #4
 8004410:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004414:	4b38      	ldr	r3, [pc, #224]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 8004416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004422:	2301      	movs	r3, #1
 8004424:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004428:	4b34      	ldr	r3, [pc, #208]	@ (80044fc <HAL_RCC_OscConfig+0x7bc>)
 800442a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d118      	bne.n	8004466 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004434:	4b31      	ldr	r3, [pc, #196]	@ (80044fc <HAL_RCC_OscConfig+0x7bc>)
 8004436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004438:	4a30      	ldr	r2, [pc, #192]	@ (80044fc <HAL_RCC_OscConfig+0x7bc>)
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004440:	f7fd f934 	bl	80016ac <HAL_GetTick>
 8004444:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004448:	f7fd f930 	bl	80016ac <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e347      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800445a:	4b28      	ldr	r3, [pc, #160]	@ (80044fc <HAL_RCC_OscConfig+0x7bc>)
 800445c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d01f      	beq.n	80044b2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	d010      	beq.n	80044a0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800447e:	4b1e      	ldr	r3, [pc, #120]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 8004480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004484:	4a1c      	ldr	r2, [pc, #112]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 8004486:	f043 0304 	orr.w	r3, r3, #4
 800448a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800448e:	4b1a      	ldr	r3, [pc, #104]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 8004490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004494:	4a18      	ldr	r2, [pc, #96]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800449e:	e018      	b.n	80044d2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044a0:	4b15      	ldr	r3, [pc, #84]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 80044a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044a6:	4a14      	ldr	r2, [pc, #80]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 80044a8:	f043 0301 	orr.w	r3, r3, #1
 80044ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044b0:	e00f      	b.n	80044d2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044b2:	4b11      	ldr	r3, [pc, #68]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 80044b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044b8:	4a0f      	ldr	r2, [pc, #60]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80044c2:	4b0d      	ldr	r3, [pc, #52]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 80044c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044c8:	4a0b      	ldr	r2, [pc, #44]	@ (80044f8 <HAL_RCC_OscConfig+0x7b8>)
 80044ca:	f023 0304 	bic.w	r3, r3, #4
 80044ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d057      	beq.n	800458a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80044da:	f7fd f8e7 	bl	80016ac <HAL_GetTick>
 80044de:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044e0:	e00e      	b.n	8004500 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e2:	f7fd f8e3 	bl	80016ac <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d905      	bls.n	8004500 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e2f8      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
 80044f8:	46020c00 	.word	0x46020c00
 80044fc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004500:	4b9c      	ldr	r3, [pc, #624]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 8004502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0e9      	beq.n	80044e2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004516:	2b00      	cmp	r3, #0
 8004518:	d01b      	beq.n	8004552 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800451a:	4b96      	ldr	r3, [pc, #600]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 800451c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004520:	4a94      	ldr	r2, [pc, #592]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 8004522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004526:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800452a:	e00a      	b.n	8004542 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452c:	f7fd f8be 	bl	80016ac <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e2d3      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004542:	4b8c      	ldr	r3, [pc, #560]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 8004544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004548:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ed      	beq.n	800452c <HAL_RCC_OscConfig+0x7ec>
 8004550:	e053      	b.n	80045fa <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004552:	4b88      	ldr	r3, [pc, #544]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 8004554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004558:	4a86      	ldr	r2, [pc, #536]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 800455a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800455e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004562:	e00a      	b.n	800457a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004564:	f7fd f8a2 	bl	80016ac <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004572:	4293      	cmp	r3, r2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e2b7      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800457a:	4b7e      	ldr	r3, [pc, #504]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 800457c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004580:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1ed      	bne.n	8004564 <HAL_RCC_OscConfig+0x824>
 8004588:	e037      	b.n	80045fa <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800458a:	f7fd f88f 	bl	80016ac <HAL_GetTick>
 800458e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004590:	e00a      	b.n	80045a8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7fd f88b 	bl	80016ac <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e2a0      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045a8:	4b72      	ldr	r3, [pc, #456]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 80045aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1ed      	bne.n	8004592 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80045b6:	4b6f      	ldr	r3, [pc, #444]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 80045b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d01a      	beq.n	80045fa <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80045c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 80045c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045ca:	4a6a      	ldr	r2, [pc, #424]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 80045cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045d4:	e00a      	b.n	80045ec <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d6:	f7fd f869 	bl	80016ac <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e27e      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045ec:	4b61      	ldr	r3, [pc, #388]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 80045ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1ed      	bne.n	80045d6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045fa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d107      	bne.n	8004612 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004602:	4b5c      	ldr	r3, [pc, #368]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 8004604:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004608:	4a5a      	ldr	r2, [pc, #360]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 800460a:	f023 0304 	bic.w	r3, r3, #4
 800460e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d036      	beq.n	800468c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d019      	beq.n	800465a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004626:	4b53      	ldr	r3, [pc, #332]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a52      	ldr	r2, [pc, #328]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 800462c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004630:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004632:	f7fd f83b 	bl	80016ac <HAL_GetTick>
 8004636:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800463a:	f7fd f837 	bl	80016ac <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e24e      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800464c:	4b49      	ldr	r3, [pc, #292]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <HAL_RCC_OscConfig+0x8fa>
 8004658:	e018      	b.n	800468c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800465a:	4b46      	ldr	r3, [pc, #280]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a45      	ldr	r2, [pc, #276]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 8004660:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004664:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004666:	f7fd f821 	bl	80016ac <HAL_GetTick>
 800466a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800466e:	f7fd f81d 	bl	80016ac <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e234      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004680:	4b3c      	ldr	r3, [pc, #240]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004694:	2b00      	cmp	r3, #0
 8004696:	d036      	beq.n	8004706 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469c:	2b00      	cmp	r3, #0
 800469e:	d019      	beq.n	80046d4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80046a0:	4b34      	ldr	r3, [pc, #208]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a33      	ldr	r2, [pc, #204]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 80046a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046aa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80046ac:	f7fc fffe 	bl	80016ac <HAL_GetTick>
 80046b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80046b4:	f7fc fffa 	bl	80016ac <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e211      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80046c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCC_OscConfig+0x974>
 80046d2:	e018      	b.n	8004706 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80046d4:	4b27      	ldr	r3, [pc, #156]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a26      	ldr	r2, [pc, #152]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 80046da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046de:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80046e0:	f7fc ffe4 	bl	80016ac <HAL_GetTick>
 80046e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80046e8:	f7fc ffe0 	bl	80016ac <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e1f7      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80046fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d07f      	beq.n	8004812 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004716:	2b00      	cmp	r3, #0
 8004718:	d062      	beq.n	80047e0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800471a:	4b16      	ldr	r3, [pc, #88]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	4a15      	ldr	r2, [pc, #84]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 8004720:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004724:	6093      	str	r3, [r2, #8]
 8004726:	4b13      	ldr	r3, [pc, #76]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004732:	4910      	ldr	r1, [pc, #64]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 8004734:	4313      	orrs	r3, r2
 8004736:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004740:	d309      	bcc.n	8004756 <HAL_RCC_OscConfig+0xa16>
 8004742:	4b0c      	ldr	r3, [pc, #48]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f023 021f 	bic.w	r2, r3, #31
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	4909      	ldr	r1, [pc, #36]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 8004750:	4313      	orrs	r3, r2
 8004752:	60cb      	str	r3, [r1, #12]
 8004754:	e02a      	b.n	80047ac <HAL_RCC_OscConfig+0xa6c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	2b00      	cmp	r3, #0
 800475c:	da0c      	bge.n	8004778 <HAL_RCC_OscConfig+0xa38>
 800475e:	4b05      	ldr	r3, [pc, #20]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	015b      	lsls	r3, r3, #5
 800476c:	4901      	ldr	r1, [pc, #4]	@ (8004774 <HAL_RCC_OscConfig+0xa34>)
 800476e:	4313      	orrs	r3, r2
 8004770:	60cb      	str	r3, [r1, #12]
 8004772:	e01b      	b.n	80047ac <HAL_RCC_OscConfig+0xa6c>
 8004774:	46020c00 	.word	0x46020c00
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004780:	d30a      	bcc.n	8004798 <HAL_RCC_OscConfig+0xa58>
 8004782:	4ba1      	ldr	r3, [pc, #644]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	029b      	lsls	r3, r3, #10
 8004790:	499d      	ldr	r1, [pc, #628]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 8004792:	4313      	orrs	r3, r2
 8004794:	60cb      	str	r3, [r1, #12]
 8004796:	e009      	b.n	80047ac <HAL_RCC_OscConfig+0xa6c>
 8004798:	4b9b      	ldr	r3, [pc, #620]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	03db      	lsls	r3, r3, #15
 80047a6:	4998      	ldr	r1, [pc, #608]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80047ac:	4b96      	ldr	r3, [pc, #600]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a95      	ldr	r2, [pc, #596]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 80047b2:	f043 0310 	orr.w	r3, r3, #16
 80047b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80047b8:	f7fc ff78 	bl	80016ac <HAL_GetTick>
 80047bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80047c0:	f7fc ff74 	bl	80016ac <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e18b      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80047d2:	4b8d      	ldr	r3, [pc, #564]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0xa80>
 80047de:	e018      	b.n	8004812 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80047e0:	4b89      	ldr	r3, [pc, #548]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a88      	ldr	r2, [pc, #544]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 80047e6:	f023 0310 	bic.w	r3, r3, #16
 80047ea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80047ec:	f7fc ff5e 	bl	80016ac <HAL_GetTick>
 80047f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80047f4:	f7fc ff5a 	bl	80016ac <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e171      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004806:	4b80      	ldr	r3, [pc, #512]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 8166 	beq.w	8004ae8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800481c:	2300      	movs	r3, #0
 800481e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004822:	4b79      	ldr	r3, [pc, #484]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b0c      	cmp	r3, #12
 800482c:	f000 80f2 	beq.w	8004a14 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004834:	2b02      	cmp	r3, #2
 8004836:	f040 80c5 	bne.w	80049c4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800483a:	4b73      	ldr	r3, [pc, #460]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a72      	ldr	r2, [pc, #456]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 8004840:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004844:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004846:	f7fc ff31 	bl	80016ac <HAL_GetTick>
 800484a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800484e:	f7fc ff2d 	bl	80016ac <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e144      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004860:	4b69      	ldr	r3, [pc, #420]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f0      	bne.n	800484e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800486c:	4b66      	ldr	r3, [pc, #408]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 800486e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	d111      	bne.n	800489e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800487a:	4b63      	ldr	r3, [pc, #396]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 800487c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004880:	4a61      	ldr	r2, [pc, #388]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 8004882:	f043 0304 	orr.w	r3, r3, #4
 8004886:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800488a:	4b5f      	ldr	r3, [pc, #380]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 800488c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004898:	2301      	movs	r3, #1
 800489a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800489e:	4b5b      	ldr	r3, [pc, #364]	@ (8004a0c <HAL_RCC_OscConfig+0xccc>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048aa:	d102      	bne.n	80048b2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80048ac:	2301      	movs	r3, #1
 80048ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80048b2:	4b56      	ldr	r3, [pc, #344]	@ (8004a0c <HAL_RCC_OscConfig+0xccc>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	4a55      	ldr	r2, [pc, #340]	@ (8004a0c <HAL_RCC_OscConfig+0xccc>)
 80048b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048bc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80048be:	4b52      	ldr	r3, [pc, #328]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 80048c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048c6:	f023 0303 	bic.w	r3, r3, #3
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80048d2:	3a01      	subs	r2, #1
 80048d4:	0212      	lsls	r2, r2, #8
 80048d6:	4311      	orrs	r1, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80048dc:	430a      	orrs	r2, r1
 80048de:	494a      	ldr	r1, [pc, #296]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80048e4:	4b48      	ldr	r3, [pc, #288]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 80048e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048e8:	4b49      	ldr	r3, [pc, #292]	@ (8004a10 <HAL_RCC_OscConfig+0xcd0>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80048f0:	3a01      	subs	r2, #1
 80048f2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80048fa:	3a01      	subs	r2, #1
 80048fc:	0252      	lsls	r2, r2, #9
 80048fe:	b292      	uxth	r2, r2
 8004900:	4311      	orrs	r1, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004906:	3a01      	subs	r2, #1
 8004908:	0412      	lsls	r2, r2, #16
 800490a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800490e:	4311      	orrs	r1, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004914:	3a01      	subs	r2, #1
 8004916:	0612      	lsls	r2, r2, #24
 8004918:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800491c:	430a      	orrs	r2, r1
 800491e:	493a      	ldr	r1, [pc, #232]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 8004920:	4313      	orrs	r3, r2
 8004922:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004924:	4b38      	ldr	r3, [pc, #224]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 8004926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004928:	4a37      	ldr	r2, [pc, #220]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 800492a:	f023 0310 	bic.w	r3, r3, #16
 800492e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004934:	4a34      	ldr	r2, [pc, #208]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800493a:	4b33      	ldr	r3, [pc, #204]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 800493c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493e:	4a32      	ldr	r2, [pc, #200]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 8004940:	f043 0310 	orr.w	r3, r3, #16
 8004944:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004946:	4b30      	ldr	r3, [pc, #192]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 8004948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494a:	f023 020c 	bic.w	r2, r3, #12
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004952:	492d      	ldr	r1, [pc, #180]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 8004954:	4313      	orrs	r3, r2
 8004956:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004958:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800495c:	2b01      	cmp	r3, #1
 800495e:	d105      	bne.n	800496c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004960:	4b2a      	ldr	r3, [pc, #168]	@ (8004a0c <HAL_RCC_OscConfig+0xccc>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4a29      	ldr	r2, [pc, #164]	@ (8004a0c <HAL_RCC_OscConfig+0xccc>)
 8004966:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800496a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800496c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004970:	2b01      	cmp	r3, #1
 8004972:	d107      	bne.n	8004984 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004974:	4b24      	ldr	r3, [pc, #144]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 8004976:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800497a:	4a23      	ldr	r2, [pc, #140]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 800497c:	f023 0304 	bic.w	r3, r3, #4
 8004980:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004984:	4b20      	ldr	r3, [pc, #128]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1f      	ldr	r2, [pc, #124]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 800498a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800498e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004990:	f7fc fe8c 	bl	80016ac <HAL_GetTick>
 8004994:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004998:	f7fc fe88 	bl	80016ac <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e09f      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80049aa:	4b17      	ldr	r3, [pc, #92]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0f0      	beq.n	8004998 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80049b6:	4b14      	ldr	r3, [pc, #80]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 80049b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ba:	4a13      	ldr	r2, [pc, #76]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 80049bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049c0:	6293      	str	r3, [r2, #40]	@ 0x28
 80049c2:	e091      	b.n	8004ae8 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80049c4:	4b10      	ldr	r3, [pc, #64]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a0f      	ldr	r2, [pc, #60]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 80049ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049ce:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80049d0:	f7fc fe6c 	bl	80016ac <HAL_GetTick>
 80049d4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d8:	f7fc fe68 	bl	80016ac <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e07f      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80049ea:	4b07      	ldr	r3, [pc, #28]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f0      	bne.n	80049d8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80049f6:	4b04      	ldr	r3, [pc, #16]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 80049f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fa:	4a03      	ldr	r2, [pc, #12]	@ (8004a08 <HAL_RCC_OscConfig+0xcc8>)
 80049fc:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004a00:	f023 0303 	bic.w	r3, r3, #3
 8004a04:	6293      	str	r3, [r2, #40]	@ 0x28
 8004a06:	e06f      	b.n	8004ae8 <HAL_RCC_OscConfig+0xda8>
 8004a08:	46020c00 	.word	0x46020c00
 8004a0c:	46020800 	.word	0x46020800
 8004a10:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004a14:	4b37      	ldr	r3, [pc, #220]	@ (8004af4 <HAL_RCC_OscConfig+0xdb4>)
 8004a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a18:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a1a:	4b36      	ldr	r3, [pc, #216]	@ (8004af4 <HAL_RCC_OscConfig+0xdb4>)
 8004a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a1e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d039      	beq.n	8004a9c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f003 0203 	and.w	r2, r3, #3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d132      	bne.n	8004a9c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	0a1b      	lsrs	r3, r3, #8
 8004a3a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a42:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d129      	bne.n	8004a9c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d122      	bne.n	8004a9c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a60:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d11a      	bne.n	8004a9c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	0a5b      	lsrs	r3, r3, #9
 8004a6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a72:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d111      	bne.n	8004a9c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	0c1b      	lsrs	r3, r3, #16
 8004a7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a84:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d108      	bne.n	8004a9c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	0e1b      	lsrs	r3, r3, #24
 8004a8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a96:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e024      	b.n	8004aea <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004aa0:	4b14      	ldr	r3, [pc, #80]	@ (8004af4 <HAL_RCC_OscConfig+0xdb4>)
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa4:	08db      	lsrs	r3, r3, #3
 8004aa6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d01a      	beq.n	8004ae8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004ab2:	4b10      	ldr	r3, [pc, #64]	@ (8004af4 <HAL_RCC_OscConfig+0xdb4>)
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8004af4 <HAL_RCC_OscConfig+0xdb4>)
 8004ab8:	f023 0310 	bic.w	r3, r3, #16
 8004abc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abe:	f7fc fdf5 	bl	80016ac <HAL_GetTick>
 8004ac2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004ac4:	bf00      	nop
 8004ac6:	f7fc fdf1 	bl	80016ac <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d0f9      	beq.n	8004ac6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad6:	4a07      	ldr	r2, [pc, #28]	@ (8004af4 <HAL_RCC_OscConfig+0xdb4>)
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004adc:	4b05      	ldr	r3, [pc, #20]	@ (8004af4 <HAL_RCC_OscConfig+0xdb4>)
 8004ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae0:	4a04      	ldr	r2, [pc, #16]	@ (8004af4 <HAL_RCC_OscConfig+0xdb4>)
 8004ae2:	f043 0310 	orr.w	r3, r3, #16
 8004ae6:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3738      	adds	r7, #56	@ 0x38
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	46020c00 	.word	0x46020c00

08004af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e1d9      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b0c:	4b9b      	ldr	r3, [pc, #620]	@ (8004d7c <HAL_RCC_ClockConfig+0x284>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d910      	bls.n	8004b3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1a:	4b98      	ldr	r3, [pc, #608]	@ (8004d7c <HAL_RCC_ClockConfig+0x284>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f023 020f 	bic.w	r2, r3, #15
 8004b22:	4996      	ldr	r1, [pc, #600]	@ (8004d7c <HAL_RCC_ClockConfig+0x284>)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2a:	4b94      	ldr	r3, [pc, #592]	@ (8004d7c <HAL_RCC_ClockConfig+0x284>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e1c1      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d010      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	695a      	ldr	r2, [r3, #20]
 8004b4c:	4b8c      	ldr	r3, [pc, #560]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d908      	bls.n	8004b6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004b58:	4b89      	ldr	r3, [pc, #548]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	4986      	ldr	r1, [pc, #536]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d012      	beq.n	8004b9c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691a      	ldr	r2, [r3, #16]
 8004b7a:	4b81      	ldr	r3, [pc, #516]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	091b      	lsrs	r3, r3, #4
 8004b80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d909      	bls.n	8004b9c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004b88:	4b7d      	ldr	r3, [pc, #500]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	497a      	ldr	r1, [pc, #488]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d010      	beq.n	8004bca <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	4b74      	ldr	r3, [pc, #464]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d908      	bls.n	8004bca <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004bb8:	4b71      	ldr	r3, [pc, #452]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	496e      	ldr	r1, [pc, #440]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d010      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	4b69      	ldr	r3, [pc, #420]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d908      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004be6:	4b66      	ldr	r3, [pc, #408]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f023 020f 	bic.w	r2, r3, #15
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	4963      	ldr	r1, [pc, #396]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 80d2 	beq.w	8004daa <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004c06:	2300      	movs	r3, #0
 8004c08:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d143      	bne.n	8004c9a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c12:	4b5b      	ldr	r3, [pc, #364]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d110      	bne.n	8004c42 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004c20:	4b57      	ldr	r3, [pc, #348]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c26:	4a56      	ldr	r2, [pc, #344]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004c28:	f043 0304 	orr.w	r3, r3, #4
 8004c2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004c30:	4b53      	ldr	r3, [pc, #332]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	60bb      	str	r3, [r7, #8]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004c42:	f7fc fd33 	bl	80016ac <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004c48:	4b4e      	ldr	r3, [pc, #312]	@ (8004d84 <HAL_RCC_ClockConfig+0x28c>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00f      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004c56:	f7fc fd29 	bl	80016ac <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e12b      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004c68:	4b46      	ldr	r3, [pc, #280]	@ (8004d84 <HAL_RCC_ClockConfig+0x28c>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004c74:	7dfb      	ldrb	r3, [r7, #23]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d107      	bne.n	8004c8a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004c7a:	4b41      	ldr	r3, [pc, #260]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c80:	4a3f      	ldr	r2, [pc, #252]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004c82:	f023 0304 	bic.w	r3, r3, #4
 8004c86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d121      	bne.n	8004cda <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e112      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d107      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ca2:	4b37      	ldr	r3, [pc, #220]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d115      	bne.n	8004cda <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e106      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d107      	bne.n	8004cca <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004cba:	4b31      	ldr	r3, [pc, #196]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e0fa      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cca:	4b2d      	ldr	r3, [pc, #180]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e0f2      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004cda:	4b29      	ldr	r3, [pc, #164]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f023 0203 	bic.w	r2, r3, #3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	4926      	ldr	r1, [pc, #152]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004cec:	f7fc fcde 	bl	80016ac <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d112      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cfc:	f7fc fcd6 	bl	80016ac <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e0d6      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d12:	4b1b      	ldr	r3, [pc, #108]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b0c      	cmp	r3, #12
 8004d1c:	d1ee      	bne.n	8004cfc <HAL_RCC_ClockConfig+0x204>
 8004d1e:	e044      	b.n	8004daa <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d112      	bne.n	8004d4e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d28:	e00a      	b.n	8004d40 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d2a:	f7fc fcbf 	bl	80016ac <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e0bf      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d40:	4b0f      	ldr	r3, [pc, #60]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f003 030c 	and.w	r3, r3, #12
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d1ee      	bne.n	8004d2a <HAL_RCC_ClockConfig+0x232>
 8004d4c:	e02d      	b.n	8004daa <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d123      	bne.n	8004d9e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d56:	e00a      	b.n	8004d6e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d58:	f7fc fca8 	bl	80016ac <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e0a8      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d6e:	4b04      	ldr	r3, [pc, #16]	@ (8004d80 <HAL_RCC_ClockConfig+0x288>)
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f003 030c 	and.w	r3, r3, #12
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1ee      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x260>
 8004d7a:	e016      	b.n	8004daa <HAL_RCC_ClockConfig+0x2b2>
 8004d7c:	40022000 	.word	0x40022000
 8004d80:	46020c00 	.word	0x46020c00
 8004d84:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d88:	f7fc fc90 	bl	80016ac <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e090      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ec8 <HAL_RCC_ClockConfig+0x3d0>)
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d1ee      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d010      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	4b43      	ldr	r3, [pc, #268]	@ (8004ec8 <HAL_RCC_ClockConfig+0x3d0>)
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d208      	bcs.n	8004dd8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004dc6:	4b40      	ldr	r3, [pc, #256]	@ (8004ec8 <HAL_RCC_ClockConfig+0x3d0>)
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	f023 020f 	bic.w	r2, r3, #15
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	493d      	ldr	r1, [pc, #244]	@ (8004ec8 <HAL_RCC_ClockConfig+0x3d0>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd8:	4b3c      	ldr	r3, [pc, #240]	@ (8004ecc <HAL_RCC_ClockConfig+0x3d4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d210      	bcs.n	8004e08 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de6:	4b39      	ldr	r3, [pc, #228]	@ (8004ecc <HAL_RCC_ClockConfig+0x3d4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f023 020f 	bic.w	r2, r3, #15
 8004dee:	4937      	ldr	r1, [pc, #220]	@ (8004ecc <HAL_RCC_ClockConfig+0x3d4>)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df6:	4b35      	ldr	r3, [pc, #212]	@ (8004ecc <HAL_RCC_ClockConfig+0x3d4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d001      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e05b      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d010      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d208      	bcs.n	8004e36 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004e24:	4b28      	ldr	r3, [pc, #160]	@ (8004ec8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	4925      	ldr	r1, [pc, #148]	@ (8004ec8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d012      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	4b20      	ldr	r3, [pc, #128]	@ (8004ec8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	091b      	lsrs	r3, r3, #4
 8004e4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d209      	bcs.n	8004e68 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004e54:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	4919      	ldr	r1, [pc, #100]	@ (8004ec8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d010      	beq.n	8004e96 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	4b13      	ldr	r3, [pc, #76]	@ (8004ec8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d208      	bcs.n	8004e96 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004e84:	4b10      	ldr	r3, [pc, #64]	@ (8004ec8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	490d      	ldr	r1, [pc, #52]	@ (8004ec8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004e96:	f000 f821 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec8 <HAL_RCC_ClockConfig+0x3d0>)
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	490a      	ldr	r1, [pc, #40]	@ (8004ed0 <HAL_RCC_ClockConfig+0x3d8>)
 8004ea6:	5ccb      	ldrb	r3, [r1, r3]
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eac:	4a09      	ldr	r2, [pc, #36]	@ (8004ed4 <HAL_RCC_ClockConfig+0x3dc>)
 8004eae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004eb0:	4b09      	ldr	r3, [pc, #36]	@ (8004ed8 <HAL_RCC_ClockConfig+0x3e0>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7fc fb6f 	bl	8001598 <HAL_InitTick>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	73fb      	strb	r3, [r7, #15]

  return status;
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	46020c00 	.word	0x46020c00
 8004ecc:	40022000 	.word	0x40022000
 8004ed0:	0800e6ac 	.word	0x0800e6ac
 8004ed4:	20000000 	.word	0x20000000
 8004ed8:	20000004 	.word	0x20000004

08004edc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b08b      	sub	sp, #44	@ 0x2c
 8004ee0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eea:	4b78      	ldr	r3, [pc, #480]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	f003 030c 	and.w	r3, r3, #12
 8004ef2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ef4:	4b75      	ldr	r3, [pc, #468]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef8:	f003 0303 	and.w	r3, r3, #3
 8004efc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_RCC_GetSysClockFreq+0x34>
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2b0c      	cmp	r3, #12
 8004f08:	d121      	bne.n	8004f4e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d11e      	bne.n	8004f4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004f10:	4b6e      	ldr	r3, [pc, #440]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d107      	bne.n	8004f2c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004f1c:	4b6b      	ldr	r3, [pc, #428]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f22:	0b1b      	lsrs	r3, r3, #12
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f2a:	e005      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004f2c:	4b67      	ldr	r3, [pc, #412]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	0f1b      	lsrs	r3, r3, #28
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f38:	4a65      	ldr	r2, [pc, #404]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f40:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d110      	bne.n	8004f6a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f4c:	e00d      	b.n	8004f6a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f4e:	4b5f      	ldr	r3, [pc, #380]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d102      	bne.n	8004f60 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f5a:	4b5e      	ldr	r3, [pc, #376]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004f5c:	623b      	str	r3, [r7, #32]
 8004f5e:	e004      	b.n	8004f6a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d101      	bne.n	8004f6a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f66:	4b5b      	ldr	r3, [pc, #364]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004f68:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	2b0c      	cmp	r3, #12
 8004f6e:	f040 80a5 	bne.w	80050bc <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004f72:	4b56      	ldr	r3, [pc, #344]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004f7c:	4b53      	ldr	r3, [pc, #332]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f80:	0a1b      	lsrs	r3, r3, #8
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	3301      	adds	r3, #1
 8004f88:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004f8a:	4b50      	ldr	r3, [pc, #320]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8e:	091b      	lsrs	r3, r3, #4
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004f96:	4b4d      	ldr	r3, [pc, #308]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9a:	08db      	lsrs	r3, r3, #3
 8004f9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	fb02 f303 	mul.w	r3, r2, r3
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fae:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d003      	beq.n	8004fc0 <HAL_RCC_GetSysClockFreq+0xe4>
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d022      	beq.n	8005004 <HAL_RCC_GetSysClockFreq+0x128>
 8004fbe:	e043      	b.n	8005048 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80050d8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004fe2:	ed97 6a01 	vldr	s12, [r7, #4]
 8004fe6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80050dc <HAL_RCC_GetSysClockFreq+0x200>
 8004fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005002:	e046      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80050d8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005016:	4b2d      	ldr	r3, [pc, #180]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800501a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005026:	ed97 6a01 	vldr	s12, [r7, #4]
 800502a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80050dc <HAL_RCC_GetSysClockFreq+0x200>
 800502e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005032:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800503a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800503e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005046:	e024      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	ee07 3a90 	vmov	s15, r3
 8005058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005060:	4b1a      	ldr	r3, [pc, #104]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005068:	ee07 3a90 	vmov	s15, r3
 800506c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005070:	ed97 6a01 	vldr	s12, [r7, #4]
 8005074:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80050dc <HAL_RCC_GetSysClockFreq+0x200>
 8005078:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800507c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005080:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005084:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005090:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005092:	4b0e      	ldr	r3, [pc, #56]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005096:	0e1b      	lsrs	r3, r3, #24
 8005098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800509c:	3301      	adds	r3, #1
 800509e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80050ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050b6:	ee17 3a90 	vmov	r3, s15
 80050ba:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80050bc:	6a3b      	ldr	r3, [r7, #32]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	372c      	adds	r7, #44	@ 0x2c
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	46020c00 	.word	0x46020c00
 80050d0:	0800e6c4 	.word	0x0800e6c4
 80050d4:	00f42400 	.word	0x00f42400
 80050d8:	4b742400 	.word	0x4b742400
 80050dc:	46000000 	.word	0x46000000

080050e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80050e4:	f7ff fefa 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 80050e8:	4602      	mov	r2, r0
 80050ea:	4b07      	ldr	r3, [pc, #28]	@ (8005108 <HAL_RCC_GetHCLKFreq+0x28>)
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	4906      	ldr	r1, [pc, #24]	@ (800510c <HAL_RCC_GetHCLKFreq+0x2c>)
 80050f4:	5ccb      	ldrb	r3, [r1, r3]
 80050f6:	fa22 f303 	lsr.w	r3, r2, r3
 80050fa:	4a05      	ldr	r2, [pc, #20]	@ (8005110 <HAL_RCC_GetHCLKFreq+0x30>)
 80050fc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80050fe:	4b04      	ldr	r3, [pc, #16]	@ (8005110 <HAL_RCC_GetHCLKFreq+0x30>)
 8005100:	681b      	ldr	r3, [r3, #0]
}
 8005102:	4618      	mov	r0, r3
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	46020c00 	.word	0x46020c00
 800510c:	0800e6ac 	.word	0x0800e6ac
 8005110:	20000000 	.word	0x20000000

08005114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005118:	f7ff ffe2 	bl	80050e0 <HAL_RCC_GetHCLKFreq>
 800511c:	4602      	mov	r2, r0
 800511e:	4b05      	ldr	r3, [pc, #20]	@ (8005134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	091b      	lsrs	r3, r3, #4
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	4903      	ldr	r1, [pc, #12]	@ (8005138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800512a:	5ccb      	ldrb	r3, [r1, r3]
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005130:	4618      	mov	r0, r3
 8005132:	bd80      	pop	{r7, pc}
 8005134:	46020c00 	.word	0x46020c00
 8005138:	0800e6bc 	.word	0x0800e6bc

0800513c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005140:	f7ff ffce 	bl	80050e0 <HAL_RCC_GetHCLKFreq>
 8005144:	4602      	mov	r2, r0
 8005146:	4b05      	ldr	r3, [pc, #20]	@ (800515c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	0a1b      	lsrs	r3, r3, #8
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	4903      	ldr	r1, [pc, #12]	@ (8005160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005152:	5ccb      	ldrb	r3, [r1, r3]
 8005154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005158:	4618      	mov	r0, r3
 800515a:	bd80      	pop	{r7, pc}
 800515c:	46020c00 	.word	0x46020c00
 8005160:	0800e6bc 	.word	0x0800e6bc

08005164 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005168:	f7ff ffba 	bl	80050e0 <HAL_RCC_GetHCLKFreq>
 800516c:	4602      	mov	r2, r0
 800516e:	4b05      	ldr	r3, [pc, #20]	@ (8005184 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005172:	091b      	lsrs	r3, r3, #4
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	4903      	ldr	r1, [pc, #12]	@ (8005188 <HAL_RCC_GetPCLK3Freq+0x24>)
 800517a:	5ccb      	ldrb	r3, [r1, r3]
 800517c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005180:	4618      	mov	r0, r3
 8005182:	bd80      	pop	{r7, pc}
 8005184:	46020c00 	.word	0x46020c00
 8005188:	0800e6bc 	.word	0x0800e6bc

0800518c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005194:	4b3e      	ldr	r3, [pc, #248]	@ (8005290 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005196:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051a2:	f7fe fd9f 	bl	8003ce4 <HAL_PWREx_GetVoltageRange>
 80051a6:	6178      	str	r0, [r7, #20]
 80051a8:	e019      	b.n	80051de <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051aa:	4b39      	ldr	r3, [pc, #228]	@ (8005290 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80051ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051b0:	4a37      	ldr	r2, [pc, #220]	@ (8005290 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80051b2:	f043 0304 	orr.w	r3, r3, #4
 80051b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80051ba:	4b35      	ldr	r3, [pc, #212]	@ (8005290 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80051bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051c8:	f7fe fd8c 	bl	8003ce4 <HAL_PWREx_GetVoltageRange>
 80051cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051ce:	4b30      	ldr	r3, [pc, #192]	@ (8005290 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80051d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005290 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80051d6:	f023 0304 	bic.w	r3, r3, #4
 80051da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051e4:	d003      	beq.n	80051ee <RCC_SetFlashLatencyFromMSIRange+0x62>
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051ec:	d109      	bne.n	8005202 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051f4:	d202      	bcs.n	80051fc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80051f6:	2301      	movs	r3, #1
 80051f8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80051fa:	e033      	b.n	8005264 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80051fc:	2300      	movs	r3, #0
 80051fe:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005200:	e030      	b.n	8005264 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005208:	d208      	bcs.n	800521c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005210:	d102      	bne.n	8005218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005212:	2303      	movs	r3, #3
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	e025      	b.n	8005264 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e035      	b.n	8005288 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005222:	d90f      	bls.n	8005244 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005230:	d902      	bls.n	8005238 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005232:	2300      	movs	r3, #0
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	e015      	b.n	8005264 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005238:	2301      	movs	r3, #1
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	e012      	b.n	8005264 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	e00f      	b.n	8005264 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800524a:	d109      	bne.n	8005260 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005252:	d102      	bne.n	800525a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005254:	2301      	movs	r3, #1
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	e004      	b.n	8005264 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800525a:	2302      	movs	r3, #2
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	e001      	b.n	8005264 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005260:	2301      	movs	r3, #1
 8005262:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005264:	4b0b      	ldr	r3, [pc, #44]	@ (8005294 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f023 020f 	bic.w	r2, r3, #15
 800526c:	4909      	ldr	r1, [pc, #36]	@ (8005294 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005274:	4b07      	ldr	r3, [pc, #28]	@ (8005294 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	429a      	cmp	r2, r3
 8005280:	d001      	beq.n	8005286 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	46020c00 	.word	0x46020c00
 8005294:	40022000 	.word	0x40022000

08005298 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800529c:	b0c4      	sub	sp, #272	@ 0x110
 800529e:	af00      	add	r7, sp, #0
 80052a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052a4:	2300      	movs	r3, #0
 80052a6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052aa:	2300      	movs	r3, #0
 80052ac:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f002 0401 	and.w	r4, r2, #1
 80052bc:	2500      	movs	r5, #0
 80052be:	ea54 0305 	orrs.w	r3, r4, r5
 80052c2:	d00b      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80052c4:	4bd5      	ldr	r3, [pc, #852]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80052c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052ca:	f023 0103 	bic.w	r1, r3, #3
 80052ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d4:	4ad1      	ldr	r2, [pc, #836]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80052d6:	430b      	orrs	r3, r1
 80052d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	f002 0802 	and.w	r8, r2, #2
 80052e8:	f04f 0900 	mov.w	r9, #0
 80052ec:	ea58 0309 	orrs.w	r3, r8, r9
 80052f0:	d00b      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80052f2:	4bca      	ldr	r3, [pc, #808]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80052f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052f8:	f023 010c 	bic.w	r1, r3, #12
 80052fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005302:	4ac6      	ldr	r2, [pc, #792]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005304:	430b      	orrs	r3, r1
 8005306:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800530a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005312:	f002 0a04 	and.w	sl, r2, #4
 8005316:	f04f 0b00 	mov.w	fp, #0
 800531a:	ea5a 030b 	orrs.w	r3, sl, fp
 800531e:	d00b      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005320:	4bbe      	ldr	r3, [pc, #760]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005326:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800532a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800532e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005330:	4aba      	ldr	r2, [pc, #744]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005332:	430b      	orrs	r3, r1
 8005334:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	f002 0308 	and.w	r3, r2, #8
 8005344:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005348:	2300      	movs	r3, #0
 800534a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800534e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005352:	460b      	mov	r3, r1
 8005354:	4313      	orrs	r3, r2
 8005356:	d00b      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005358:	4bb0      	ldr	r3, [pc, #704]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800535a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800535e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005368:	4aac      	ldr	r2, [pc, #688]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800536a:	430b      	orrs	r3, r1
 800536c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005378:	f002 0310 	and.w	r3, r2, #16
 800537c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005380:	2300      	movs	r3, #0
 8005382:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005386:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800538a:	460b      	mov	r3, r1
 800538c:	4313      	orrs	r3, r2
 800538e:	d00b      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005390:	4ba2      	ldr	r3, [pc, #648]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005396:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800539a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800539e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053a0:	4a9e      	ldr	r2, [pc, #632]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80053a2:	430b      	orrs	r3, r1
 80053a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80053a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80053b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053b8:	2300      	movs	r3, #0
 80053ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053be:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4313      	orrs	r3, r2
 80053c6:	d00b      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80053c8:	4b94      	ldr	r3, [pc, #592]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80053ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053ce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80053d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053d8:	4a90      	ldr	r2, [pc, #576]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80053da:	430b      	orrs	r3, r1
 80053dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	f002 0320 	and.w	r3, r2, #32
 80053ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053f0:	2300      	movs	r3, #0
 80053f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80053f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053fa:	460b      	mov	r3, r1
 80053fc:	4313      	orrs	r3, r2
 80053fe:	d00b      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005400:	4b86      	ldr	r3, [pc, #536]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005402:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005406:	f023 0107 	bic.w	r1, r3, #7
 800540a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800540e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005410:	4a82      	ldr	r2, [pc, #520]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005412:	430b      	orrs	r3, r1
 8005414:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800541c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005420:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005424:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005428:	2300      	movs	r3, #0
 800542a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800542e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005432:	460b      	mov	r3, r1
 8005434:	4313      	orrs	r3, r2
 8005436:	d00b      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005438:	4b78      	ldr	r3, [pc, #480]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800543a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800543e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005448:	4a74      	ldr	r2, [pc, #464]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800544a:	430b      	orrs	r3, r1
 800544c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800545c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005460:	2300      	movs	r3, #0
 8005462:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005466:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800546a:	460b      	mov	r3, r1
 800546c:	4313      	orrs	r3, r2
 800546e:	d00b      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005470:	4b6a      	ldr	r3, [pc, #424]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005476:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800547a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800547e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005480:	4a66      	ldr	r2, [pc, #408]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005482:	430b      	orrs	r3, r1
 8005484:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005494:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005498:	2300      	movs	r3, #0
 800549a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800549e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4313      	orrs	r3, r2
 80054a6:	d00b      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80054a8:	4b5c      	ldr	r3, [pc, #368]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80054aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80054b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054b8:	4a58      	ldr	r2, [pc, #352]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80054ba:	430b      	orrs	r3, r1
 80054bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80054cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054d0:	2300      	movs	r3, #0
 80054d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80054d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80054da:	460b      	mov	r3, r1
 80054dc:	4313      	orrs	r3, r2
 80054de:	d00b      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80054e0:	4b4e      	ldr	r3, [pc, #312]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80054e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054e6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80054ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054f0:	4a4a      	ldr	r2, [pc, #296]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80054f2:	430b      	orrs	r3, r1
 80054f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 80054f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005504:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005508:	2300      	movs	r3, #0
 800550a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800550e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005512:	460b      	mov	r3, r1
 8005514:	4313      	orrs	r3, r2
 8005516:	d00b      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8005518:	4b40      	ldr	r3, [pc, #256]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800551a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800551e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005526:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005528:	4a3c      	ldr	r2, [pc, #240]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800552a:	430b      	orrs	r3, r1
 800552c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8005530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800553c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005540:	2300      	movs	r3, #0
 8005542:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005546:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800554a:	460b      	mov	r3, r1
 800554c:	4313      	orrs	r3, r2
 800554e:	d00c      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8005550:	4b32      	ldr	r3, [pc, #200]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005552:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005556:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800555a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800555e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005562:	4a2e      	ldr	r2, [pc, #184]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005564:	430b      	orrs	r3, r1
 8005566:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800556a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800557a:	2300      	movs	r3, #0
 800557c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005580:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005584:	460b      	mov	r3, r1
 8005586:	4313      	orrs	r3, r2
 8005588:	d00c      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800558a:	4b24      	ldr	r3, [pc, #144]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800558c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005590:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005598:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800559c:	4a1f      	ldr	r2, [pc, #124]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800559e:	430b      	orrs	r3, r1
 80055a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80055b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055b4:	2300      	movs	r3, #0
 80055b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80055be:	460b      	mov	r3, r1
 80055c0:	4313      	orrs	r3, r2
 80055c2:	d00c      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80055c4:	4b15      	ldr	r3, [pc, #84]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80055c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055ca:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80055ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d6:	4a11      	ldr	r2, [pc, #68]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80055d8:	430b      	orrs	r3, r1
 80055da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80055de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80055ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055ee:	2300      	movs	r3, #0
 80055f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055f4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80055f8:	460b      	mov	r3, r1
 80055fa:	4313      	orrs	r3, r2
 80055fc:	d010      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80055fe:	4b07      	ldr	r3, [pc, #28]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005600:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005604:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800560c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005610:	4a02      	ldr	r2, [pc, #8]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005612:	430b      	orrs	r3, r1
 8005614:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005618:	e002      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800561a:	bf00      	nop
 800561c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800562c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005630:	2300      	movs	r3, #0
 8005632:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005636:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800563a:	460b      	mov	r3, r1
 800563c:	4313      	orrs	r3, r2
 800563e:	d04c      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005644:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005648:	2b80      	cmp	r3, #128	@ 0x80
 800564a:	d02d      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800564c:	2b80      	cmp	r3, #128	@ 0x80
 800564e:	d827      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005650:	2b60      	cmp	r3, #96	@ 0x60
 8005652:	d02b      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005654:	2b60      	cmp	r3, #96	@ 0x60
 8005656:	d823      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005658:	2b40      	cmp	r3, #64	@ 0x40
 800565a:	d006      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800565c:	2b40      	cmp	r3, #64	@ 0x40
 800565e:	d81f      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005660:	2b00      	cmp	r3, #0
 8005662:	d009      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005664:	2b20      	cmp	r3, #32
 8005666:	d011      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005668:	e01a      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800566a:	4bbe      	ldr	r3, [pc, #760]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800566c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566e:	4abd      	ldr	r2, [pc, #756]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005674:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005676:	e01a      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800567c:	3308      	adds	r3, #8
 800567e:	4618      	mov	r0, r3
 8005680:	f002 fc32 	bl	8007ee8 <RCCEx_PLL2_Config>
 8005684:	4603      	mov	r3, r0
 8005686:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800568a:	e010      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800568c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005690:	332c      	adds	r3, #44	@ 0x2c
 8005692:	4618      	mov	r0, r3
 8005694:	f002 fcc0 	bl	8008018 <RCCEx_PLL3_Config>
 8005698:	4603      	mov	r3, r0
 800569a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800569e:	e006      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80056a6:	e002      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80056a8:	bf00      	nop
 80056aa:	e000      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80056ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ae:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10d      	bne.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80056b6:	4bab      	ldr	r3, [pc, #684]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056bc:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80056c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056c8:	4aa6      	ldr	r2, [pc, #664]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ca:	430b      	orrs	r3, r1
 80056cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80056d0:	e003      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80056d6:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80056da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80056e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056ea:	2300      	movs	r3, #0
 80056ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056f0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80056f4:	460b      	mov	r3, r1
 80056f6:	4313      	orrs	r3, r2
 80056f8:	d053      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80056fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005706:	d033      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8005708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800570c:	d82c      	bhi.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800570e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005712:	d02f      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8005714:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005718:	d826      	bhi.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800571a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800571e:	d008      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8005720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005724:	d820      	bhi.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800572a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800572e:	d011      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005730:	e01a      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005732:	4b8c      	ldr	r3, [pc, #560]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005736:	4a8b      	ldr	r2, [pc, #556]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800573c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800573e:	e01a      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005744:	3308      	adds	r3, #8
 8005746:	4618      	mov	r0, r3
 8005748:	f002 fbce 	bl	8007ee8 <RCCEx_PLL2_Config>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005752:	e010      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005758:	332c      	adds	r3, #44	@ 0x2c
 800575a:	4618      	mov	r0, r3
 800575c:	f002 fc5c 	bl	8008018 <RCCEx_PLL3_Config>
 8005760:	4603      	mov	r3, r0
 8005762:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005766:	e006      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800576e:	e002      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005770:	bf00      	nop
 8005772:	e000      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005776:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10d      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800577e:	4b79      	ldr	r3, [pc, #484]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005780:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005784:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800578c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005790:	4a74      	ldr	r2, [pc, #464]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005792:	430b      	orrs	r3, r1
 8005794:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005798:	e003      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800579e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80057a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057aa:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80057ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057b0:	2300      	movs	r3, #0
 80057b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80057b8:	460b      	mov	r3, r1
 80057ba:	4313      	orrs	r3, r2
 80057bc:	d046      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80057be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80057c6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80057ca:	d028      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x586>
 80057cc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80057d0:	d821      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80057d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057d6:	d022      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x586>
 80057d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057dc:	d81b      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80057de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057e2:	d01c      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x586>
 80057e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057e8:	d815      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80057ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ee:	d008      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 80057f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057f4:	d80f      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d011      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x586>
 80057fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057fe:	d00e      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005800:	e009      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005806:	3308      	adds	r3, #8
 8005808:	4618      	mov	r0, r3
 800580a:	f002 fb6d 	bl	8007ee8 <RCCEx_PLL2_Config>
 800580e:	4603      	mov	r3, r0
 8005810:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005814:	e004      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800581c:	e000      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 800581e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005820:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10d      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005828:	4b4e      	ldr	r3, [pc, #312]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800582a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800582e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005836:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800583a:	4a4a      	ldr	r2, [pc, #296]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800583c:	430b      	orrs	r3, r1
 800583e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005842:	e003      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005844:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005848:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800584c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005858:	673b      	str	r3, [r7, #112]	@ 0x70
 800585a:	2300      	movs	r3, #0
 800585c:	677b      	str	r3, [r7, #116]	@ 0x74
 800585e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005862:	460b      	mov	r3, r1
 8005864:	4313      	orrs	r3, r2
 8005866:	d03f      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800586c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005870:	2b04      	cmp	r3, #4
 8005872:	d81e      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8005874:	a201      	add	r2, pc, #4	@ (adr r2, 800587c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587a:	bf00      	nop
 800587c:	080058bb 	.word	0x080058bb
 8005880:	08005891 	.word	0x08005891
 8005884:	0800589f 	.word	0x0800589f
 8005888:	080058bb 	.word	0x080058bb
 800588c:	080058bb 	.word	0x080058bb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005890:	4b34      	ldr	r3, [pc, #208]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005894:	4a33      	ldr	r2, [pc, #204]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005896:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800589a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800589c:	e00e      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800589e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058a2:	332c      	adds	r3, #44	@ 0x2c
 80058a4:	4618      	mov	r0, r3
 80058a6:	f002 fbb7 	bl	8008018 <RCCEx_PLL3_Config>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80058b0:	e004      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80058b8:	e000      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 80058ba:	bf00      	nop
    }
    if (ret == HAL_OK)
 80058bc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10d      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80058c4:	4b27      	ldr	r3, [pc, #156]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058ca:	f023 0107 	bic.w	r1, r3, #7
 80058ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058d6:	4a23      	ldr	r2, [pc, #140]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058d8:	430b      	orrs	r3, r1
 80058da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80058de:	e003      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80058e4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80058e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80058f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058f6:	2300      	movs	r3, #0
 80058f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058fa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80058fe:	460b      	mov	r3, r1
 8005900:	4313      	orrs	r3, r2
 8005902:	d04c      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005908:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800590c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005910:	d02a      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8005912:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005916:	d821      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005918:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800591c:	d026      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 800591e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005922:	d81b      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005924:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005928:	d00e      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800592a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800592e:	d815      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01d      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8005934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005938:	d110      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800593a:	4b0a      	ldr	r3, [pc, #40]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800593c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593e:	4a09      	ldr	r2, [pc, #36]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005944:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005946:	e014      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800594c:	332c      	adds	r3, #44	@ 0x2c
 800594e:	4618      	mov	r0, r3
 8005950:	f002 fb62 	bl	8008018 <RCCEx_PLL3_Config>
 8005954:	4603      	mov	r3, r0
 8005956:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800595a:	e00a      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005962:	e006      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8005964:	46020c00 	.word	0x46020c00
        break;
 8005968:	bf00      	nop
 800596a:	e002      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 800596c:	bf00      	nop
 800596e:	e000      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8005970:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005972:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10d      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800597a:	4baf      	ldr	r3, [pc, #700]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800597c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005980:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005988:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800598c:	4aaa      	ldr	r2, [pc, #680]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800598e:	430b      	orrs	r3, r1
 8005990:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005994:	e003      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005996:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800599a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800599e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80059aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80059ac:	2300      	movs	r3, #0
 80059ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80059b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80059b4:	460b      	mov	r3, r1
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f000 80b5 	beq.w	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059bc:	2300      	movs	r3, #0
 80059be:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059c2:	4b9d      	ldr	r3, [pc, #628]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80059c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d113      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059d0:	4b99      	ldr	r3, [pc, #612]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80059d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059d6:	4a98      	ldr	r2, [pc, #608]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80059d8:	f043 0304 	orr.w	r3, r3, #4
 80059dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80059e0:	4b95      	ldr	r3, [pc, #596]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80059e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80059ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 80059f2:	2301      	movs	r3, #1
 80059f4:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80059f8:	4b90      	ldr	r3, [pc, #576]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80059fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fc:	4a8f      	ldr	r2, [pc, #572]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a04:	f7fb fe52 	bl	80016ac <HAL_GetTick>
 8005a08:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005a0c:	e00b      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a0e:	f7fb fe4d 	bl	80016ac <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d903      	bls.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005a24:	e005      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005a26:	4b85      	ldr	r3, [pc, #532]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0ed      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8005a32:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d165      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a3a:	4b7f      	ldr	r3, [pc, #508]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a44:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d023      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x800>
 8005a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a54:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d01b      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a60:	4b75      	ldr	r3, [pc, #468]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005a62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a6a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a6e:	4b72      	ldr	r3, [pc, #456]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a74:	4a70      	ldr	r2, [pc, #448]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a7e:	4b6e      	ldr	r3, [pc, #440]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005a80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a84:	4a6c      	ldr	r2, [pc, #432]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a8e:	4a6a      	ldr	r2, [pc, #424]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d019      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa4:	f7fb fe02 	bl	80016ac <HAL_GetTick>
 8005aa8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aac:	e00d      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aae:	f7fb fdfd 	bl	80016ac <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab8:	1ad2      	subs	r2, r2, r3
 8005aba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d903      	bls.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8005ac8:	e006      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aca:	4b5b      	ldr	r3, [pc, #364]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0ea      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8005ad8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10d      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005ae0:	4b55      	ldr	r3, [pc, #340]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005ae2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ae6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aee:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005af2:	4a51      	ldr	r2, [pc, #324]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005af4:	430b      	orrs	r3, r1
 8005af6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005afa:	e008      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005afc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005b00:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8005b04:	e003      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b06:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005b0a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b0e:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d107      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b16:	4b48      	ldr	r3, [pc, #288]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b1c:	4a46      	ldr	r2, [pc, #280]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005b1e:	f023 0304 	bic.w	r3, r3, #4
 8005b22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005b32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b34:	2300      	movs	r3, #0
 8005b36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b38:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	d042      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b4a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005b4e:	d022      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8005b50:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005b54:	d81b      	bhi.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8005b56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b5a:	d011      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8005b5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b60:	d815      	bhi.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d019      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x902>
 8005b66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b6a:	d110      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b70:	3308      	adds	r3, #8
 8005b72:	4618      	mov	r0, r3
 8005b74:	f002 f9b8 	bl	8007ee8 <RCCEx_PLL2_Config>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005b7e:	e00d      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b80:	4b2d      	ldr	r3, [pc, #180]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b84:	4a2c      	ldr	r2, [pc, #176]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b8a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005b8c:	e006      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005b94:	e002      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005b96:	bf00      	nop
 8005b98:	e000      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005b9a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005b9c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10d      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005ba4:	4b24      	ldr	r3, [pc, #144]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005baa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005bb6:	4a20      	ldr	r2, [pc, #128]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005bbe:	e003      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005bc4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005bd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bda:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005bde:	460b      	mov	r3, r1
 8005be0:	4313      	orrs	r3, r2
 8005be2:	d031      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005be8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bf0:	d00b      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005bf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bf6:	d804      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c00:	d007      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005c08:	e004      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005c0a:	bf00      	nop
 8005c0c:	e002      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005c0e:	bf00      	nop
 8005c10:	e000      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005c12:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005c14:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d111      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005c1c:	4b06      	ldr	r3, [pc, #24]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005c1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c2e:	4a02      	ldr	r2, [pc, #8]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005c30:	430b      	orrs	r3, r1
 8005c32:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005c36:	e007      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8005c38:	46020c00 	.word	0x46020c00
 8005c3c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c40:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005c44:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005c54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c56:	2300      	movs	r3, #0
 8005c58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c5a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4313      	orrs	r3, r2
 8005c62:	d00c      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005c64:	4bb2      	ldr	r3, [pc, #712]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005c66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c6a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c76:	4aae      	ldr	r2, [pc, #696]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c86:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005c8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005c94:	460b      	mov	r3, r1
 8005c96:	4313      	orrs	r3, r2
 8005c98:	d019      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ca2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ca6:	d105      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ca8:	4ba1      	ldr	r3, [pc, #644]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cac:	4aa0      	ldr	r2, [pc, #640]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005cae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cb2:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005cb4:	4b9e      	ldr	r3, [pc, #632]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005cb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cba:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005cc6:	4a9a      	ldr	r2, [pc, #616]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005cda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cdc:	2300      	movs	r3, #0
 8005cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ce0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	d00c      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005cea:	4b91      	ldr	r3, [pc, #580]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cf0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cf8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005cfc:	4a8c      	ldr	r2, [pc, #560]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005cfe:	430b      	orrs	r3, r1
 8005d00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005d10:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d12:	2300      	movs	r3, #0
 8005d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d16:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	d00c      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005d20:	4b83      	ldr	r3, [pc, #524]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d26:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d2e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005d32:	4a7f      	ldr	r2, [pc, #508]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005d34:	430b      	orrs	r3, r1
 8005d36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d48:	2300      	movs	r3, #0
 8005d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d4c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005d50:	460b      	mov	r3, r1
 8005d52:	4313      	orrs	r3, r2
 8005d54:	d00c      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005d56:	4b76      	ldr	r3, [pc, #472]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d5c:	f023 0218 	bic.w	r2, r3, #24
 8005d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d64:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005d68:	4971      	ldr	r1, [pc, #452]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005d7c:	623b      	str	r3, [r7, #32]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d82:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d86:	460b      	mov	r3, r1
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	d032      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d90:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005d94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d98:	d105      	bne.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d9a:	4b65      	ldr	r3, [pc, #404]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9e:	4a64      	ldr	r2, [pc, #400]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005da4:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005daa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005dae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005db2:	d108      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005db8:	3308      	adds	r3, #8
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f002 f894 	bl	8007ee8 <RCCEx_PLL2_Config>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 8005dc6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10d      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005dce:	4b58      	ldr	r3, [pc, #352]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005dd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005dd4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ddc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005de0:	4953      	ldr	r1, [pc, #332]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005de8:	e003      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dea:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005dee:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8005df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	61b9      	str	r1, [r7, #24]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	61fb      	str	r3, [r7, #28]
 8005e04:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	d04a      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8005e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e16:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005e1a:	d01e      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8005e1c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005e20:	d825      	bhi.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8005e22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e26:	d00e      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8005e28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e2c:	d81f      	bhi.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d021      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8005e32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e36:	d11a      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e38:	4b3d      	ldr	r3, [pc, #244]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005e3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e42:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005e44:	e018      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f002 f84b 	bl	8007ee8 <RCCEx_PLL2_Config>
 8005e52:	4603      	mov	r3, r0
 8005e54:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005e58:	e00e      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e5e:	332c      	adds	r3, #44	@ 0x2c
 8005e60:	4618      	mov	r0, r3
 8005e62:	f002 f8d9 	bl	8008018 <RCCEx_PLL3_Config>
 8005e66:	4603      	mov	r3, r0
 8005e68:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005e6c:	e004      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005e74:	e000      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 8005e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e78:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10d      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8005e80:	4b2b      	ldr	r3, [pc, #172]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005e82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e8e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e92:	4927      	ldr	r1, [pc, #156]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005e9a:	e003      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005ea0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	d03d      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ec8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ecc:	d00e      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005ece:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ed2:	d815      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d017      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005edc:	d110      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ede:	4b14      	ldr	r3, [pc, #80]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee2:	4a13      	ldr	r2, [pc, #76]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ee8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005eea:	e00e      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f001 fff8 	bl	8007ee8 <RCCEx_PLL2_Config>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005efe:	e004      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005f06:	e000      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8005f08:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005f0a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d110      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005f12:	4b07      	ldr	r3, [pc, #28]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f18:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f24:	4902      	ldr	r1, [pc, #8]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005f2c:	e006      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8005f2e:	bf00      	nop
 8005f30:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f34:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005f38:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005f48:	60bb      	str	r3, [r7, #8]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f52:	460b      	mov	r3, r1
 8005f54:	4313      	orrs	r3, r2
 8005f56:	d00c      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005f58:	4b2c      	ldr	r3, [pc, #176]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005f5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f5e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f66:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005f6a:	4928      	ldr	r1, [pc, #160]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8005f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	6039      	str	r1, [r7, #0]
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	607b      	str	r3, [r7, #4]
 8005f84:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	d036      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8005f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005f96:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005f9a:	d00d      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005f9c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005fa0:	d811      	bhi.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8005fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fa6:	d012      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fac:	d80b      	bhi.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00d      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb6:	d106      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005fb8:	4b14      	ldr	r3, [pc, #80]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fbc:	4a13      	ldr	r2, [pc, #76]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005fbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fc2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8005fc4:	e004      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005fcc:	e000      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8005fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fd0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10d      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8005fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005fda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005fde:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fe6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005fea:	4908      	ldr	r1, [pc, #32]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005ff2:	e003      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005ff8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005ffc:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8006000:	4618      	mov	r0, r3
 8006002:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8006006:	46bd      	mov	sp, r7
 8006008:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800600c:	46020c00 	.word	0x46020c00

08006010 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006010:	b480      	push	{r7}
 8006012:	b089      	sub	sp, #36	@ 0x24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006018:	4ba6      	ldr	r3, [pc, #664]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800601a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800601c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006020:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006022:	4ba4      	ldr	r3, [pc, #656]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800602c:	4ba1      	ldr	r3, [pc, #644]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800602e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006030:	0a1b      	lsrs	r3, r3, #8
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	3301      	adds	r3, #1
 8006038:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800603a:	4b9e      	ldr	r3, [pc, #632]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800603c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603e:	091b      	lsrs	r3, r3, #4
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006046:	4b9b      	ldr	r3, [pc, #620]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604a:	08db      	lsrs	r3, r3, #3
 800604c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	fb02 f303 	mul.w	r3, r2, r3
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b03      	cmp	r3, #3
 8006066:	d062      	beq.n	800612e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2b03      	cmp	r3, #3
 800606c:	f200 8081 	bhi.w	8006172 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d024      	beq.n	80060c0 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2b02      	cmp	r3, #2
 800607a:	d17a      	bne.n	8006172 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	ee07 3a90 	vmov	s15, r3
 8006082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006086:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80062b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800608a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800608e:	4b89      	ldr	r3, [pc, #548]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006096:	ee07 3a90 	vmov	s15, r3
 800609a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800609e:	ed97 6a02 	vldr	s12, [r7, #8]
 80060a2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80060a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80060ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060be:	e08f      	b.n	80061e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80060c0:	4b7c      	ldr	r3, [pc, #496]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d005      	beq.n	80060d8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80060cc:	4b79      	ldr	r3, [pc, #484]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	0f1b      	lsrs	r3, r3, #28
 80060d2:	f003 030f 	and.w	r3, r3, #15
 80060d6:	e006      	b.n	80060e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80060d8:	4b76      	ldr	r3, [pc, #472]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80060de:	041b      	lsls	r3, r3, #16
 80060e0:	0f1b      	lsrs	r3, r3, #28
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	4a76      	ldr	r2, [pc, #472]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80060e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060ec:	ee07 3a90 	vmov	s15, r3
 80060f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	ee07 3a90 	vmov	s15, r3
 8006108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006110:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800611c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006120:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006128:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800612c:	e058      	b.n	80061e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	ee07 3a90 	vmov	s15, r3
 8006134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006138:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80062b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800613c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006140:	4b5c      	ldr	r3, [pc, #368]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006148:	ee07 3a90 	vmov	s15, r3
 800614c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006150:	ed97 6a02 	vldr	s12, [r7, #8]
 8006154:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006158:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800615c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006160:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006164:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006170:	e036      	b.n	80061e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006172:	4b50      	ldr	r3, [pc, #320]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800617e:	4b4d      	ldr	r3, [pc, #308]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	0f1b      	lsrs	r3, r3, #28
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	e006      	b.n	8006198 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800618a:	4b4a      	ldr	r3, [pc, #296]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800618c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006190:	041b      	lsls	r3, r3, #16
 8006192:	0f1b      	lsrs	r3, r3, #28
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	4a49      	ldr	r2, [pc, #292]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800619a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	ee07 3a90 	vmov	s15, r3
 80061ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061be:	ed97 6a02 	vldr	s12, [r7, #8]
 80061c2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80061c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80061d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061de:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80061e0:	4b34      	ldr	r3, [pc, #208]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d017      	beq.n	800621c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80061ec:	4b31      	ldr	r3, [pc, #196]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061f0:	0a5b      	lsrs	r3, r3, #9
 80061f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80061fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006202:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006206:	edd7 6a07 	vldr	s13, [r7, #28]
 800620a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800620e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006212:	ee17 2a90 	vmov	r2, s15
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	e002      	b.n	8006222 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006222:	4b24      	ldr	r3, [pc, #144]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d017      	beq.n	800625e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800622e:	4b21      	ldr	r3, [pc, #132]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006232:	0c1b      	lsrs	r3, r3, #16
 8006234:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006238:	ee07 3a90 	vmov	s15, r3
 800623c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006240:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006244:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006248:	edd7 6a07 	vldr	s13, [r7, #28]
 800624c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006254:	ee17 2a90 	vmov	r2, s15
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	605a      	str	r2, [r3, #4]
 800625c:	e002      	b.n	8006264 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006264:	4b13      	ldr	r3, [pc, #76]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006268:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d017      	beq.n	80062a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006270:	4b10      	ldr	r3, [pc, #64]	@ (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006274:	0e1b      	lsrs	r3, r3, #24
 8006276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006282:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006286:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800628a:	edd7 6a07 	vldr	s13, [r7, #28]
 800628e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006296:	ee17 2a90 	vmov	r2, s15
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800629e:	e002      	b.n	80062a6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	609a      	str	r2, [r3, #8]
}
 80062a6:	bf00      	nop
 80062a8:	3724      	adds	r7, #36	@ 0x24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	46020c00 	.word	0x46020c00
 80062b8:	4b742400 	.word	0x4b742400
 80062bc:	46000000 	.word	0x46000000
 80062c0:	0800e6c4 	.word	0x0800e6c4

080062c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b089      	sub	sp, #36	@ 0x24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80062cc:	4ba6      	ldr	r3, [pc, #664]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80062d6:	4ba4      	ldr	r3, [pc, #656]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80062e0:	4ba1      	ldr	r3, [pc, #644]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e4:	0a1b      	lsrs	r3, r3, #8
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	3301      	adds	r3, #1
 80062ec:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80062ee:	4b9e      	ldr	r3, [pc, #632]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f2:	091b      	lsrs	r3, r3, #4
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80062fa:	4b9b      	ldr	r3, [pc, #620]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fe:	08db      	lsrs	r3, r3, #3
 8006300:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	fb02 f303 	mul.w	r3, r2, r3
 800630a:	ee07 3a90 	vmov	s15, r3
 800630e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006312:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b03      	cmp	r3, #3
 800631a:	d062      	beq.n	80063e2 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2b03      	cmp	r3, #3
 8006320:	f200 8081 	bhi.w	8006426 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d024      	beq.n	8006374 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2b02      	cmp	r3, #2
 800632e:	d17a      	bne.n	8006426 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	ee07 3a90 	vmov	s15, r3
 8006336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800656c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800633e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006342:	4b89      	ldr	r3, [pc, #548]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006352:	ed97 6a02 	vldr	s12, [r7, #8]
 8006356:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800635a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800635e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006366:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800636a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006372:	e08f      	b.n	8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006374:	4b7c      	ldr	r3, [pc, #496]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d005      	beq.n	800638c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006380:	4b79      	ldr	r3, [pc, #484]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	0f1b      	lsrs	r3, r3, #28
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	e006      	b.n	800639a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800638c:	4b76      	ldr	r3, [pc, #472]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800638e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006392:	041b      	lsls	r3, r3, #16
 8006394:	0f1b      	lsrs	r3, r3, #28
 8006396:	f003 030f 	and.w	r3, r3, #15
 800639a:	4a76      	ldr	r2, [pc, #472]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800639c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063a0:	ee07 3a90 	vmov	s15, r3
 80063a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	ee07 3a90 	vmov	s15, r3
 80063bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80063c4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80063c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80063d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063e0:	e058      	b.n	8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	ee07 3a90 	vmov	s15, r3
 80063e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ec:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800656c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80063f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063f4:	4b5c      	ldr	r3, [pc, #368]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80063f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fc:	ee07 3a90 	vmov	s15, r3
 8006400:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006404:	ed97 6a02 	vldr	s12, [r7, #8]
 8006408:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800640c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006410:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006414:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006418:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800641c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006420:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006424:	e036      	b.n	8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006426:	4b50      	ldr	r3, [pc, #320]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d005      	beq.n	800643e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006432:	4b4d      	ldr	r3, [pc, #308]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	0f1b      	lsrs	r3, r3, #28
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	e006      	b.n	800644c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800643e:	4b4a      	ldr	r3, [pc, #296]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006440:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006444:	041b      	lsls	r3, r3, #16
 8006446:	0f1b      	lsrs	r3, r3, #28
 8006448:	f003 030f 	and.w	r3, r3, #15
 800644c:	4a49      	ldr	r2, [pc, #292]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800644e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006452:	ee07 3a90 	vmov	s15, r3
 8006456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	ee07 3a90 	vmov	s15, r3
 8006460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006472:	ed97 6a02 	vldr	s12, [r7, #8]
 8006476:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800647a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800647e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006486:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800648a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800648e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006492:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006494:	4b34      	ldr	r3, [pc, #208]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d017      	beq.n	80064d0 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064a0:	4b31      	ldr	r3, [pc, #196]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a4:	0a5b      	lsrs	r3, r3, #9
 80064a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80064b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064b6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80064be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064c6:	ee17 2a90 	vmov	r2, s15
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	e002      	b.n	80064d6 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80064d6:	4b24      	ldr	r3, [pc, #144]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d017      	beq.n	8006512 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064e2:	4b21      	ldr	r3, [pc, #132]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e6:	0c1b      	lsrs	r3, r3, #16
 80064e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064ec:	ee07 3a90 	vmov	s15, r3
 80064f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80064f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064f8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006508:	ee17 2a90 	vmov	r2, s15
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	605a      	str	r2, [r3, #4]
 8006510:	e002      	b.n	8006518 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006518:	4b13      	ldr	r3, [pc, #76]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800651a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d017      	beq.n	8006554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006524:	4b10      	ldr	r3, [pc, #64]	@ (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006528:	0e1b      	lsrs	r3, r3, #24
 800652a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800652e:	ee07 3a90 	vmov	s15, r3
 8006532:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006536:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800653a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800653e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800654a:	ee17 2a90 	vmov	r2, s15
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006552:	e002      	b.n	800655a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	609a      	str	r2, [r3, #8]
}
 800655a:	bf00      	nop
 800655c:	3724      	adds	r7, #36	@ 0x24
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	46020c00 	.word	0x46020c00
 800656c:	4b742400 	.word	0x4b742400
 8006570:	46000000 	.word	0x46000000
 8006574:	0800e6c4 	.word	0x0800e6c4

08006578 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006578:	b480      	push	{r7}
 800657a:	b089      	sub	sp, #36	@ 0x24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006580:	4ba6      	ldr	r3, [pc, #664]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006588:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800658a:	4ba4      	ldr	r3, [pc, #656]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800658c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006594:	4ba1      	ldr	r3, [pc, #644]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006598:	0a1b      	lsrs	r3, r3, #8
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	3301      	adds	r3, #1
 80065a0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80065a2:	4b9e      	ldr	r3, [pc, #632]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a6:	091b      	lsrs	r3, r3, #4
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80065ae:	4b9b      	ldr	r3, [pc, #620]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b2:	08db      	lsrs	r3, r3, #3
 80065b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	fb02 f303 	mul.w	r3, r2, r3
 80065be:	ee07 3a90 	vmov	s15, r3
 80065c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065c6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d062      	beq.n	8006696 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	f200 8081 	bhi.w	80066da <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d024      	beq.n	8006628 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d17a      	bne.n	80066da <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	ee07 3a90 	vmov	s15, r3
 80065ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ee:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006820 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80065f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f6:	4b89      	ldr	r3, [pc, #548]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fe:	ee07 3a90 	vmov	s15, r3
 8006602:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006606:	ed97 6a02 	vldr	s12, [r7, #8]
 800660a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800660e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006612:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800661a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800661e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006622:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8006626:	e08f      	b.n	8006748 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006628:	4b7c      	ldr	r3, [pc, #496]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006634:	4b79      	ldr	r3, [pc, #484]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	0f1b      	lsrs	r3, r3, #28
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	e006      	b.n	800664e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8006640:	4b76      	ldr	r3, [pc, #472]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006642:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006646:	041b      	lsls	r3, r3, #16
 8006648:	0f1b      	lsrs	r3, r3, #28
 800664a:	f003 030f 	and.w	r3, r3, #15
 800664e:	4a76      	ldr	r2, [pc, #472]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006654:	ee07 3a90 	vmov	s15, r3
 8006658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	ee07 3a90 	vmov	s15, r3
 8006662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006674:	ed97 6a02 	vldr	s12, [r7, #8]
 8006678:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800667c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006684:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006688:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800668c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006690:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006694:	e058      	b.n	8006748 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	ee07 3a90 	vmov	s15, r3
 800669c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006820 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80066a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066a8:	4b5c      	ldr	r3, [pc, #368]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b0:	ee07 3a90 	vmov	s15, r3
 80066b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80066b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80066bc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80066c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80066c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80066c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80066d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066d8:	e036      	b.n	8006748 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80066da:	4b50      	ldr	r3, [pc, #320]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d005      	beq.n	80066f2 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80066e6:	4b4d      	ldr	r3, [pc, #308]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	0f1b      	lsrs	r3, r3, #28
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	e006      	b.n	8006700 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80066f2:	4b4a      	ldr	r3, [pc, #296]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066f8:	041b      	lsls	r3, r3, #16
 80066fa:	0f1b      	lsrs	r3, r3, #28
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	4a49      	ldr	r2, [pc, #292]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006706:	ee07 3a90 	vmov	s15, r3
 800670a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	ee07 3a90 	vmov	s15, r3
 8006714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006718:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	ee07 3a90 	vmov	s15, r3
 8006722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006726:	ed97 6a02 	vldr	s12, [r7, #8]
 800672a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800672e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800673a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800673e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006742:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006746:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006748:	4b34      	ldr	r3, [pc, #208]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800674a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d017      	beq.n	8006784 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006754:	4b31      	ldr	r3, [pc, #196]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006758:	0a5b      	lsrs	r3, r3, #9
 800675a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006766:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800676a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800676e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800677a:	ee17 2a90 	vmov	r2, s15
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	e002      	b.n	800678a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800678a:	4b24      	ldr	r3, [pc, #144]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800678c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800678e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d017      	beq.n	80067c6 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006796:	4b21      	ldr	r3, [pc, #132]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679a:	0c1b      	lsrs	r3, r3, #16
 800679c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067a0:	ee07 3a90 	vmov	s15, r3
 80067a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80067a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067ac:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80067b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067bc:	ee17 2a90 	vmov	r2, s15
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	605a      	str	r2, [r3, #4]
 80067c4:	e002      	b.n	80067cc <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80067cc:	4b13      	ldr	r3, [pc, #76]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d017      	beq.n	8006808 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067d8:	4b10      	ldr	r3, [pc, #64]	@ (800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067dc:	0e1b      	lsrs	r3, r3, #24
 80067de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80067ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067ee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067fe:	ee17 2a90 	vmov	r2, s15
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006806:	e002      	b.n	800680e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	609a      	str	r2, [r3, #8]
}
 800680e:	bf00      	nop
 8006810:	3724      	adds	r7, #36	@ 0x24
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	46020c00 	.word	0x46020c00
 8006820:	4b742400 	.word	0x4b742400
 8006824:	46000000 	.word	0x46000000
 8006828:	0800e6c4 	.word	0x0800e6c4

0800682c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08e      	sub	sp, #56	@ 0x38
 8006830:	af00      	add	r7, sp, #0
 8006832:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006836:	e9d7 2300 	ldrd	r2, r3, [r7]
 800683a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800683e:	430b      	orrs	r3, r1
 8006840:	d145      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006842:	4ba7      	ldr	r3, [pc, #668]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006848:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800684c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800684e:	4ba4      	ldr	r3, [pc, #656]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b02      	cmp	r3, #2
 800685a:	d108      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800685c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006862:	d104      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006864:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006868:	637b      	str	r3, [r7, #52]	@ 0x34
 800686a:	f001 bb31 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800686e:	4b9c      	ldr	r3, [pc, #624]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006874:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006878:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800687c:	d114      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800687e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006884:	d110      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006886:	4b96      	ldr	r3, [pc, #600]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800688c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006890:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006894:	d103      	bne.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006896:	23fa      	movs	r3, #250	@ 0xfa
 8006898:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800689a:	f001 bb19 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800689e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80068a2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068a4:	f001 bb14 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80068a8:	4b8d      	ldr	r3, [pc, #564]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068b4:	d107      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068bc:	d103      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80068be:	4b89      	ldr	r3, [pc, #548]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80068c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068c2:	f001 bb05 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ca:	f001 bb01 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80068ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068d2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80068d6:	430b      	orrs	r3, r1
 80068d8:	d151      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80068da:	4b81      	ldr	r3, [pc, #516]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068e0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80068e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80068e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e8:	2b80      	cmp	r3, #128	@ 0x80
 80068ea:	d035      	beq.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80068ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ee:	2b80      	cmp	r3, #128	@ 0x80
 80068f0:	d841      	bhi.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80068f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f4:	2b60      	cmp	r3, #96	@ 0x60
 80068f6:	d02a      	beq.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80068f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fa:	2b60      	cmp	r3, #96	@ 0x60
 80068fc:	d83b      	bhi.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	2b40      	cmp	r3, #64	@ 0x40
 8006902:	d009      	beq.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006906:	2b40      	cmp	r3, #64	@ 0x40
 8006908:	d835      	bhi.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00c      	beq.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006912:	2b20      	cmp	r3, #32
 8006914:	d012      	beq.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006916:	e02e      	b.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff fb77 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006924:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006926:	f001 bad3 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800692a:	f107 0318 	add.w	r3, r7, #24
 800692e:	4618      	mov	r0, r3
 8006930:	f7ff fcc8 	bl	80062c4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006938:	f001 baca 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800693c:	f107 030c 	add.w	r3, r7, #12
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff fe19 	bl	8006578 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800694a:	f001 bac1 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800694e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006952:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006954:	f001 babc 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006958:	4b61      	ldr	r3, [pc, #388]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006964:	d103      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006966:	4b60      	ldr	r3, [pc, #384]	@ (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006968:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800696a:	f001 bab1 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006972:	f001 baad 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800697a:	f001 baa9 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800697e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006982:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006986:	430b      	orrs	r3, r1
 8006988:	d158      	bne.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800698a:	4b55      	ldr	r3, [pc, #340]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800698c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006990:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006994:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800699c:	d03b      	beq.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800699e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069a4:	d846      	bhi.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80069a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069ac:	d02e      	beq.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80069ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069b4:	d83e      	bhi.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80069b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069bc:	d00b      	beq.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069c4:	d836      	bhi.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80069c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00d      	beq.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80069cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069d2:	d012      	beq.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80069d4:	e02e      	b.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff fb18 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80069e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069e4:	f001 ba74 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069e8:	f107 0318 	add.w	r3, r7, #24
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff fc69 	bl	80062c4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069f6:	f001 ba6b 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069fa:	f107 030c 	add.w	r3, r7, #12
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff fdba 	bl	8006578 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a08:	f001 ba62 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006a0c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006a10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a12:	f001 ba5d 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a16:	4b32      	ldr	r3, [pc, #200]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a22:	d103      	bne.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006a24:	4b30      	ldr	r3, [pc, #192]	@ (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006a26:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a28:	f001 ba52 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a30:	f001 ba4e 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a38:	f001 ba4a 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a40:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006a44:	430b      	orrs	r3, r1
 8006a46:	d126      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006a48:	4b25      	ldr	r3, [pc, #148]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a52:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006a54:	4b22      	ldr	r3, [pc, #136]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a60:	d106      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d103      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006a68:	4b1f      	ldr	r3, [pc, #124]	@ (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a6c:	f001 ba30 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006a70:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a7c:	d107      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a84:	d103      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006a86:	4b19      	ldr	r3, [pc, #100]	@ (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a8a:	f001 ba21 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a92:	f001 ba1d 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006a96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a9a:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006a9e:	430b      	orrs	r3, r1
 8006aa0:	d16e      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006aa8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006aac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006ab4:	d03d      	beq.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006abc:	d85c      	bhi.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ac4:	d014      	beq.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006acc:	d854      	bhi.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d01f      	beq.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ada:	d012      	beq.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006adc:	e04c      	b.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006ade:	bf00      	nop
 8006ae0:	46020c00 	.word	0x46020c00
 8006ae4:	0007a120 	.word	0x0007a120
 8006ae8:	00f42400 	.word	0x00f42400
 8006aec:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff fa8b 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006afe:	f001 b9e7 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b02:	f107 0318 	add.w	r3, r7, #24
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff fbdc 	bl	80062c4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b10:	f001 b9de 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006b14:	4ba7      	ldr	r3, [pc, #668]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b20:	d103      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006b22:	4ba5      	ldr	r3, [pc, #660]	@ (8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b24:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b26:	f001 b9d3 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b2e:	f001 b9cf 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b32:	4ba0      	ldr	r3, [pc, #640]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b20      	cmp	r3, #32
 8006b3c:	d118      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b3e:	4b9d      	ldr	r3, [pc, #628]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006b4a:	4b9a      	ldr	r3, [pc, #616]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	0e1b      	lsrs	r3, r3, #24
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	e006      	b.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006b56:	4b97      	ldr	r3, [pc, #604]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b5c:	041b      	lsls	r3, r3, #16
 8006b5e:	0e1b      	lsrs	r3, r3, #24
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	4a95      	ldr	r2, [pc, #596]	@ (8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b6a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b6c:	f001 b9b0 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b74:	f001 b9ac 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b7c:	f001 b9a8 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b84:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	d17f      	bne.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006b8c:	4b89      	ldr	r3, [pc, #548]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b96:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d165      	bne.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006b9e:	4b85      	ldr	r3, [pc, #532]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ba4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006ba8:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bac:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006bb0:	d034      	beq.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006bb8:	d853      	bhi.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bc0:	d00b      	beq.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bc8:	d84b      	bhi.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d016      	beq.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006bd6:	d009      	beq.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006bd8:	e043      	b.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff fa16 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006be8:	f001 b972 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bec:	f107 0318 	add.w	r3, r7, #24
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff fb67 	bl	80062c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006bfa:	f001 b969 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c0a:	d103      	bne.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006c0c:	4b6a      	ldr	r3, [pc, #424]	@ (8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c0e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006c10:	f001 b95e 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006c18:	f001 b95a 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c1c:	4b65      	ldr	r3, [pc, #404]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	d118      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c28:	4b62      	ldr	r3, [pc, #392]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d005      	beq.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006c34:	4b5f      	ldr	r3, [pc, #380]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	0e1b      	lsrs	r3, r3, #24
 8006c3a:	f003 030f 	and.w	r3, r3, #15
 8006c3e:	e006      	b.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006c40:	4b5c      	ldr	r3, [pc, #368]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c46:	041b      	lsls	r3, r3, #16
 8006c48:	0e1b      	lsrs	r3, r3, #24
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	4a5b      	ldr	r2, [pc, #364]	@ (8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c54:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006c56:	f001 b93b 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006c5e:	f001 b937 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 8006c62:	2300      	movs	r3, #0
 8006c64:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006c66:	f001 b933 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c70:	d108      	bne.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff f9ca 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c80:	f001 b926 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c88:	f001 b922 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006c8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c90:	1e51      	subs	r1, r2, #1
 8006c92:	430b      	orrs	r3, r1
 8006c94:	d136      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006c96:	4b47      	ldr	r3, [pc, #284]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c9c:	f003 0303 	and.w	r3, r3, #3
 8006ca0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d104      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006ca8:	f7fe fa48 	bl	800513c <HAL_RCC_GetPCLK2Freq>
 8006cac:	6378      	str	r0, [r7, #52]	@ 0x34
 8006cae:	f001 b90f 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d104      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006cb8:	f7fe f910 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8006cbc:	6378      	str	r0, [r7, #52]	@ 0x34
 8006cbe:	f001 b907 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006cc2:	4b3c      	ldr	r3, [pc, #240]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cce:	d106      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d103      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8006cd6:	4b3a      	ldr	r3, [pc, #232]	@ (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cda:	f001 b8f9 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006cde:	4b35      	ldr	r3, [pc, #212]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d107      	bne.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d104      	bne.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8006cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cf8:	f001 b8ea 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d00:	f001 b8e6 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d08:	1e91      	subs	r1, r2, #2
 8006d0a:	430b      	orrs	r3, r1
 8006d0c:	d136      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006d0e:	4b29      	ldr	r3, [pc, #164]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d14:	f003 030c 	and.w	r3, r3, #12
 8006d18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d104      	bne.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d20:	f7fe f9f8 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8006d24:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d26:	f001 b8d3 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	2b04      	cmp	r3, #4
 8006d2e:	d104      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d30:	f7fe f8d4 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8006d34:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d36:	f001 b8cb 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d46:	d106      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4a:	2b08      	cmp	r3, #8
 8006d4c:	d103      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d52:	f001 b8bd 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006d56:	4b17      	ldr	r3, [pc, #92]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d107      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d66:	2b0c      	cmp	r3, #12
 8006d68:	d104      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006d6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d70:	f001 b8ae 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d78:	f001 b8aa 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006d7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d80:	1f11      	subs	r1, r2, #4
 8006d82:	430b      	orrs	r3, r1
 8006d84:	d13f      	bne.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006d86:	4b0b      	ldr	r3, [pc, #44]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d8c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d90:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d104      	bne.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d98:	f7fe f9bc 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8006d9c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d9e:	f001 b897 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da4:	2b10      	cmp	r3, #16
 8006da6:	d10d      	bne.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006da8:	f7fe f898 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8006dac:	6378      	str	r0, [r7, #52]	@ 0x34
 8006dae:	f001 b88f 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8006db2:	bf00      	nop
 8006db4:	46020c00 	.word	0x46020c00
 8006db8:	02dc6c00 	.word	0x02dc6c00
 8006dbc:	0800e6c4 	.word	0x0800e6c4
 8006dc0:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006dc4:	4ba8      	ldr	r3, [pc, #672]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dd0:	d106      	bne.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd4:	2b20      	cmp	r3, #32
 8006dd6:	d103      	bne.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8006dd8:	4ba4      	ldr	r3, [pc, #656]	@ (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ddc:	f001 b878 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006de0:	4ba1      	ldr	r3, [pc, #644]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006de2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d107      	bne.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df0:	2b30      	cmp	r3, #48	@ 0x30
 8006df2:	d104      	bne.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006df4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dfa:	f001 b869 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e02:	f001 b865 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006e06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e0a:	f1a2 0108 	sub.w	r1, r2, #8
 8006e0e:	430b      	orrs	r3, r1
 8006e10:	d136      	bne.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006e12:	4b95      	ldr	r3, [pc, #596]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e18:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006e1c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d104      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e24:	f7fe f976 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8006e28:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e2a:	f001 b851 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e30:	2b40      	cmp	r3, #64	@ 0x40
 8006e32:	d104      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e34:	f7fe f852 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8006e38:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e3a:	f001 b849 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006e3e:	4b8a      	ldr	r3, [pc, #552]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e4a:	d106      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4e:	2b80      	cmp	r3, #128	@ 0x80
 8006e50:	d103      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8006e52:	4b86      	ldr	r3, [pc, #536]	@ (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e56:	f001 b83b 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006e5a:	4b83      	ldr	r3, [pc, #524]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e60:	f003 0302 	and.w	r3, r3, #2
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d107      	bne.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e6c:	d104      	bne.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8006e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e74:	f001 b82c 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e7c:	f001 b828 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e84:	f1a2 0110 	sub.w	r1, r2, #16
 8006e88:	430b      	orrs	r3, r1
 8006e8a:	d139      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006e8c:	4b76      	ldr	r3, [pc, #472]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e96:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d104      	bne.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e9e:	f7fe f939 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8006ea2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ea4:	f001 b814 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eae:	d104      	bne.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006eb0:	f7fe f814 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8006eb4:	6378      	str	r0, [r7, #52]	@ 0x34
 8006eb6:	f001 b80b 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006eba:	4b6b      	ldr	r3, [pc, #428]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ec6:	d107      	bne.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ece:	d103      	bne.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8006ed0:	4b66      	ldr	r3, [pc, #408]	@ (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ed4:	f000 bffc 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006ed8:	4b63      	ldr	r3, [pc, #396]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006eda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d108      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006eec:	d104      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8006eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef4:	f000 bfec 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006efc:	f000 bfe8 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8006f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f04:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8006f08:	430b      	orrs	r3, r1
 8006f0a:	d139      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006f0c:	4b56      	ldr	r3, [pc, #344]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006f0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f16:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d104      	bne.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f1e:	f7fe f8f9 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8006f22:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f24:	f000 bfd4 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8006f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f2e:	d104      	bne.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f30:	f7fd ffd4 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8006f34:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f36:	f000 bfcb 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006f3a:	4b4b      	ldr	r3, [pc, #300]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f46:	d107      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f4e:	d103      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8006f50:	4b46      	ldr	r3, [pc, #280]	@ (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f54:	f000 bfbc 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006f58:	4b43      	ldr	r3, [pc, #268]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d108      	bne.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8006f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f6c:	d104      	bne.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8006f6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f74:	f000 bfac 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f7c:	f000 bfa8 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f84:	f1a2 0120 	sub.w	r1, r2, #32
 8006f88:	430b      	orrs	r3, r1
 8006f8a:	d158      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006f8c:	4b36      	ldr	r3, [pc, #216]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006f8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d104      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006f9e:	f7fe f8e1 	bl	8005164 <HAL_RCC_GetPCLK3Freq>
 8006fa2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fa4:	f000 bf94 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d104      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006fae:	f7fd ff95 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8006fb2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fb4:	f000 bf8c 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fc4:	d106      	bne.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d103      	bne.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8006fcc:	4b27      	ldr	r3, [pc, #156]	@ (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fd0:	f000 bf7e 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006fd4:	4b24      	ldr	r3, [pc, #144]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006fd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d107      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe4:	2b03      	cmp	r3, #3
 8006fe6:	d104      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8006fe8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fee:	f000 bf6f 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	2b20      	cmp	r3, #32
 8006ffc:	d11b      	bne.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007000:	2b04      	cmp	r3, #4
 8007002:	d118      	bne.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007004:	4b18      	ldr	r3, [pc, #96]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d005      	beq.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8007010:	4b15      	ldr	r3, [pc, #84]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	0e1b      	lsrs	r3, r3, #24
 8007016:	f003 030f 	and.w	r3, r3, #15
 800701a:	e006      	b.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800701c:	4b12      	ldr	r3, [pc, #72]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800701e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007022:	041b      	lsls	r3, r3, #16
 8007024:	0e1b      	lsrs	r3, r3, #24
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	4a11      	ldr	r2, [pc, #68]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800702c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007030:	637b      	str	r3, [r7, #52]	@ 0x34
 8007032:	f000 bf4d 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	637b      	str	r3, [r7, #52]	@ 0x34
 800703a:	f000 bf49 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800703e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007042:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007046:	430b      	orrs	r3, r1
 8007048:	d172      	bne.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800704a:	4b07      	ldr	r3, [pc, #28]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800704c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007050:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007054:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800705c:	d10a      	bne.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800705e:	f7fd ff3d 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8007062:	6378      	str	r0, [r7, #52]	@ 0x34
 8007064:	f000 bf34 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007068:	46020c00 	.word	0x46020c00
 800706c:	00f42400 	.word	0x00f42400
 8007070:	0800e6c4 	.word	0x0800e6c4
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800707a:	d108      	bne.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800707c:	f107 0318 	add.w	r3, r7, #24
 8007080:	4618      	mov	r0, r3
 8007082:	f7ff f91f 	bl	80062c4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	637b      	str	r3, [r7, #52]	@ 0x34
 800708a:	f000 bf21 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	2b00      	cmp	r3, #0
 8007092:	d104      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007094:	f7fe f824 	bl	80050e0 <HAL_RCC_GetHCLKFreq>
 8007098:	6378      	str	r0, [r7, #52]	@ 0x34
 800709a:	f000 bf19 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80070a4:	d122      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070a6:	4bb0      	ldr	r3, [pc, #704]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0320 	and.w	r3, r3, #32
 80070ae:	2b20      	cmp	r3, #32
 80070b0:	d118      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070b2:	4bad      	ldr	r3, [pc, #692]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d005      	beq.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 80070be:	4baa      	ldr	r3, [pc, #680]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	0e1b      	lsrs	r3, r3, #24
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	e006      	b.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 80070ca:	4ba7      	ldr	r3, [pc, #668]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80070cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070d0:	041b      	lsls	r3, r3, #16
 80070d2:	0e1b      	lsrs	r3, r3, #24
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	4aa4      	ldr	r2, [pc, #656]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80070da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070de:	637b      	str	r3, [r7, #52]	@ 0x34
 80070e0:	f000 bef6 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070e8:	f000 bef2 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80070ec:	4b9e      	ldr	r3, [pc, #632]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070f8:	d107      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007100:	d103      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8007102:	4b9b      	ldr	r3, [pc, #620]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8007104:	637b      	str	r3, [r7, #52]	@ 0x34
 8007106:	f000 bee3 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800710a:	4b97      	ldr	r3, [pc, #604]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007116:	d107      	bne.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8007118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800711e:	d103      	bne.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8007120:	4b93      	ldr	r3, [pc, #588]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8007122:	637b      	str	r3, [r7, #52]	@ 0x34
 8007124:	f000 bed4 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	637b      	str	r3, [r7, #52]	@ 0x34
 800712c:	f000 bed0 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007134:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007138:	430b      	orrs	r3, r1
 800713a:	d158      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800713c:	4b8a      	ldr	r3, [pc, #552]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800713e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714a:	2b04      	cmp	r3, #4
 800714c:	d84b      	bhi.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800714e:	a201      	add	r2, pc, #4	@ (adr r2, 8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8007150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007154:	0800718d 	.word	0x0800718d
 8007158:	08007169 	.word	0x08007169
 800715c:	0800717b 	.word	0x0800717b
 8007160:	08007197 	.word	0x08007197
 8007164:	080071a1 	.word	0x080071a1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007168:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800716c:	4618      	mov	r0, r3
 800716e:	f7fe ff4f 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007174:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007176:	f000 beab 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800717a:	f107 030c 	add.w	r3, r7, #12
 800717e:	4618      	mov	r0, r3
 8007180:	f7ff f9fa 	bl	8006578 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007188:	f000 bea2 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800718c:	f7fd ffa8 	bl	80050e0 <HAL_RCC_GetHCLKFreq>
 8007190:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007192:	f000 be9d 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007196:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800719a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800719c:	f000 be98 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80071a0:	4b71      	ldr	r3, [pc, #452]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b20      	cmp	r3, #32
 80071aa:	d118      	bne.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071ac:	4b6e      	ldr	r3, [pc, #440]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d005      	beq.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80071b8:	4b6b      	ldr	r3, [pc, #428]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	0e1b      	lsrs	r3, r3, #24
 80071be:	f003 030f 	and.w	r3, r3, #15
 80071c2:	e006      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 80071c4:	4b68      	ldr	r3, [pc, #416]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80071c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071ca:	041b      	lsls	r3, r3, #16
 80071cc:	0e1b      	lsrs	r3, r3, #24
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	4a66      	ldr	r2, [pc, #408]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80071d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071d8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071da:	f000 be79 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071e2:	f000 be75 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071ea:	f000 be71 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80071ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f2:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80071f6:	430b      	orrs	r3, r1
 80071f8:	d167      	bne.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80071fa:	4b5b      	ldr	r3, [pc, #364]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80071fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007200:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007204:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007208:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800720c:	d036      	beq.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800720e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007210:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007214:	d855      	bhi.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800721c:	d029      	beq.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800721e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007220:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007224:	d84d      	bhi.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800722c:	d013      	beq.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800722e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007230:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007234:	d845      	bhi.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	2b00      	cmp	r3, #0
 800723a:	d015      	beq.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800723c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007242:	d13e      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007244:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007248:	4618      	mov	r0, r3
 800724a:	f7fe fee1 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007250:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007252:	f000 be3d 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007256:	f107 030c 	add.w	r3, r7, #12
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff f98c 	bl	8006578 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007264:	f000 be34 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007268:	f7fd ff3a 	bl	80050e0 <HAL_RCC_GetHCLKFreq>
 800726c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800726e:	f000 be2f 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007272:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007276:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007278:	f000 be2a 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800727c:	4b3a      	ldr	r3, [pc, #232]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0320 	and.w	r3, r3, #32
 8007284:	2b20      	cmp	r3, #32
 8007286:	d118      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007288:	4b37      	ldr	r3, [pc, #220]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8007294:	4b34      	ldr	r3, [pc, #208]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	0e1b      	lsrs	r3, r3, #24
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	e006      	b.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80072a0:	4b31      	ldr	r3, [pc, #196]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80072a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072a6:	041b      	lsls	r3, r3, #16
 80072a8:	0e1b      	lsrs	r3, r3, #24
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	4a2f      	ldr	r2, [pc, #188]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80072b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072b6:	f000 be0b 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072be:	f000 be07 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072c6:	f000 be03 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80072ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072ce:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80072d2:	430b      	orrs	r3, r1
 80072d4:	d152      	bne.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80072d6:	4b24      	ldr	r3, [pc, #144]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80072d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80072e0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80072e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80072e8:	f7fd ff14 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 80072ec:	6378      	str	r0, [r7, #52]	@ 0x34
 80072ee:	f000 bdef 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80072f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072f8:	d104      	bne.n	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80072fa:	f7fd fdef 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 80072fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8007300:	f000 bde6 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007304:	4b18      	ldr	r3, [pc, #96]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800730c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007310:	d107      	bne.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8007312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007314:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007318:	d103      	bne.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800731a:	4b15      	ldr	r3, [pc, #84]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800731c:	637b      	str	r3, [r7, #52]	@ 0x34
 800731e:	f000 bdd7 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007322:	4b11      	ldr	r3, [pc, #68]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0320 	and.w	r3, r3, #32
 800732a:	2b20      	cmp	r3, #32
 800732c:	d122      	bne.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800732e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007330:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007334:	d11e      	bne.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007336:	4b0c      	ldr	r3, [pc, #48]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d005      	beq.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8007342:	4b09      	ldr	r3, [pc, #36]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	0e1b      	lsrs	r3, r3, #24
 8007348:	f003 030f 	and.w	r3, r3, #15
 800734c:	e006      	b.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800734e:	4b06      	ldr	r3, [pc, #24]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007350:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007354:	041b      	lsls	r3, r3, #16
 8007356:	0e1b      	lsrs	r3, r3, #24
 8007358:	f003 030f 	and.w	r3, r3, #15
 800735c:	4a03      	ldr	r2, [pc, #12]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800735e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007362:	637b      	str	r3, [r7, #52]	@ 0x34
 8007364:	f000 bdb4 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007368:	46020c00 	.word	0x46020c00
 800736c:	0800e6c4 	.word	0x0800e6c4
 8007370:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	637b      	str	r3, [r7, #52]	@ 0x34
 8007378:	f000 bdaa 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800737c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007380:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007384:	430b      	orrs	r3, r1
 8007386:	d14c      	bne.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007388:	4ba8      	ldr	r3, [pc, #672]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800738a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800738e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007392:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007396:	2b00      	cmp	r3, #0
 8007398:	d104      	bne.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800739a:	f7fd febb 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 800739e:	6378      	str	r0, [r7, #52]	@ 0x34
 80073a0:	f000 bd96 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80073a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073aa:	d104      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80073ac:	f7fd fd96 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 80073b0:	6378      	str	r0, [r7, #52]	@ 0x34
 80073b2:	f000 bd8d 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80073b6:	4b9d      	ldr	r3, [pc, #628]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073c2:	d107      	bne.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80073c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ca:	d103      	bne.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 80073cc:	4b98      	ldr	r3, [pc, #608]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80073ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80073d0:	f000 bd7e 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80073d4:	4b95      	ldr	r3, [pc, #596]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0320 	and.w	r3, r3, #32
 80073dc:	2b20      	cmp	r3, #32
 80073de:	d11c      	bne.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 80073e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073e6:	d118      	bne.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073e8:	4b90      	ldr	r3, [pc, #576]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d005      	beq.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80073f4:	4b8d      	ldr	r3, [pc, #564]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	0e1b      	lsrs	r3, r3, #24
 80073fa:	f003 030f 	and.w	r3, r3, #15
 80073fe:	e006      	b.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8007400:	4b8a      	ldr	r3, [pc, #552]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007406:	041b      	lsls	r3, r3, #16
 8007408:	0e1b      	lsrs	r3, r3, #24
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	4a89      	ldr	r2, [pc, #548]	@ (8007634 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007414:	637b      	str	r3, [r7, #52]	@ 0x34
 8007416:	f000 bd5b 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	637b      	str	r3, [r7, #52]	@ 0x34
 800741e:	f000 bd57 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007422:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007426:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800742a:	430b      	orrs	r3, r1
 800742c:	d158      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800742e:	4b7f      	ldr	r3, [pc, #508]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007434:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007438:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800743a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743c:	2bc0      	cmp	r3, #192	@ 0xc0
 800743e:	d028      	beq.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8007440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007442:	2bc0      	cmp	r3, #192	@ 0xc0
 8007444:	d848      	bhi.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	2b80      	cmp	r3, #128	@ 0x80
 800744a:	d00e      	beq.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800744c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744e:	2b80      	cmp	r3, #128	@ 0x80
 8007450:	d842      	bhi.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8007458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745a:	2b40      	cmp	r3, #64	@ 0x40
 800745c:	d014      	beq.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800745e:	e03b      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007460:	f7fd fe80 	bl	8005164 <HAL_RCC_GetPCLK3Freq>
 8007464:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007466:	f000 bd33 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800746a:	4b70      	ldr	r3, [pc, #448]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007476:	d103      	bne.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8007478:	4b6d      	ldr	r3, [pc, #436]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800747a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800747c:	f000 bd28 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007484:	f000 bd24 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007488:	f7fd fd28 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 800748c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800748e:	f000 bd1f 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007492:	4b66      	ldr	r3, [pc, #408]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0320 	and.w	r3, r3, #32
 800749a:	2b20      	cmp	r3, #32
 800749c:	d118      	bne.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800749e:	4b63      	ldr	r3, [pc, #396]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d005      	beq.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 80074aa:	4b60      	ldr	r3, [pc, #384]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	0e1b      	lsrs	r3, r3, #24
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	e006      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 80074b6:	4b5d      	ldr	r3, [pc, #372]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80074b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074bc:	041b      	lsls	r3, r3, #16
 80074be:	0e1b      	lsrs	r3, r3, #24
 80074c0:	f003 030f 	and.w	r3, r3, #15
 80074c4:	4a5b      	ldr	r2, [pc, #364]	@ (8007634 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80074c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074cc:	f000 bd00 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074d4:	f000 bcfc 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074dc:	f000 bcf8 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80074e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074e4:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80074e8:	430b      	orrs	r3, r1
 80074ea:	d14c      	bne.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80074ec:	4b4f      	ldr	r3, [pc, #316]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80074ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80074f6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80074f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d104      	bne.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80074fe:	f7fd fe09 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8007502:	6378      	str	r0, [r7, #52]	@ 0x34
 8007504:	f000 bce4 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800750e:	d104      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007510:	f7fd fce4 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8007514:	6378      	str	r0, [r7, #52]	@ 0x34
 8007516:	f000 bcdb 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800751a:	4b44      	ldr	r3, [pc, #272]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007526:	d107      	bne.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8007528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800752e:	d103      	bne.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8007530:	4b3f      	ldr	r3, [pc, #252]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007532:	637b      	str	r3, [r7, #52]	@ 0x34
 8007534:	f000 bccc 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007538:	4b3c      	ldr	r3, [pc, #240]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0320 	and.w	r3, r3, #32
 8007540:	2b20      	cmp	r3, #32
 8007542:	d11c      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8007544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007546:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800754a:	d118      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800754c:	4b37      	ldr	r3, [pc, #220]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d005      	beq.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8007558:	4b34      	ldr	r3, [pc, #208]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	0e1b      	lsrs	r3, r3, #24
 800755e:	f003 030f 	and.w	r3, r3, #15
 8007562:	e006      	b.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8007564:	4b31      	ldr	r3, [pc, #196]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800756a:	041b      	lsls	r3, r3, #16
 800756c:	0e1b      	lsrs	r3, r3, #24
 800756e:	f003 030f 	and.w	r3, r3, #15
 8007572:	4a30      	ldr	r2, [pc, #192]	@ (8007634 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007578:	637b      	str	r3, [r7, #52]	@ 0x34
 800757a:	f000 bca9 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800757e:	2300      	movs	r3, #0
 8007580:	637b      	str	r3, [r7, #52]	@ 0x34
 8007582:	f000 bca5 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8007586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800758a:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800758e:	430b      	orrs	r3, r1
 8007590:	d152      	bne.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8007592:	4b26      	ldr	r3, [pc, #152]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007594:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007598:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800759c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800759e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d104      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80075a4:	f7fd fdb6 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 80075a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80075aa:	f000 bc91 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 80075ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075b4:	d104      	bne.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80075b6:	f7fd fc91 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 80075ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80075bc:	f000 bc88 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 80075c0:	4b1a      	ldr	r3, [pc, #104]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075cc:	d107      	bne.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 80075ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075d4:	d103      	bne.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 80075d6:	4b16      	ldr	r3, [pc, #88]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80075d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80075da:	f000 bc79 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 80075de:	4b13      	ldr	r3, [pc, #76]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0320 	and.w	r3, r3, #32
 80075e6:	2b20      	cmp	r3, #32
 80075e8:	d11c      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80075ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075f0:	d118      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075f2:	4b0e      	ldr	r3, [pc, #56]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d005      	beq.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 80075fe:	4b0b      	ldr	r3, [pc, #44]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	0e1b      	lsrs	r3, r3, #24
 8007604:	f003 030f 	and.w	r3, r3, #15
 8007608:	e006      	b.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800760a:	4b08      	ldr	r3, [pc, #32]	@ (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800760c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007610:	041b      	lsls	r3, r3, #16
 8007612:	0e1b      	lsrs	r3, r3, #24
 8007614:	f003 030f 	and.w	r3, r3, #15
 8007618:	4a06      	ldr	r2, [pc, #24]	@ (8007634 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800761a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800761e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007620:	f000 bc56 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8007624:	2300      	movs	r3, #0
 8007626:	637b      	str	r3, [r7, #52]	@ 0x34
 8007628:	f000 bc52 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800762c:	46020c00 	.word	0x46020c00
 8007630:	00f42400 	.word	0x00f42400
 8007634:	0800e6c4 	.word	0x0800e6c4
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8007638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800763c:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8007640:	430b      	orrs	r3, r1
 8007642:	d14a      	bne.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8007644:	4ba5      	ldr	r3, [pc, #660]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007646:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800764a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800764e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	2b00      	cmp	r3, #0
 8007654:	d104      	bne.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007656:	f7fd fd5d 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 800765a:	6378      	str	r0, [r7, #52]	@ 0x34
 800765c:	f000 bc38 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8007660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007662:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007666:	d104      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007668:	f7fd fc38 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 800766c:	6378      	str	r0, [r7, #52]	@ 0x34
 800766e:	f000 bc2f 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8007672:	4b9a      	ldr	r3, [pc, #616]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800767a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800767e:	d107      	bne.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007682:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007686:	d103      	bne.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8007688:	4b95      	ldr	r3, [pc, #596]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800768a:	637b      	str	r3, [r7, #52]	@ 0x34
 800768c:	f000 bc20 	b.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8007690:	4b92      	ldr	r3, [pc, #584]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0320 	and.w	r3, r3, #32
 8007698:	2b20      	cmp	r3, #32
 800769a:	d11b      	bne.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 800769c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80076a2:	d117      	bne.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076a4:	4b8d      	ldr	r3, [pc, #564]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d005      	beq.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 80076b0:	4b8a      	ldr	r3, [pc, #552]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	0e1b      	lsrs	r3, r3, #24
 80076b6:	f003 030f 	and.w	r3, r3, #15
 80076ba:	e006      	b.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 80076bc:	4b87      	ldr	r3, [pc, #540]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80076be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076c2:	041b      	lsls	r3, r3, #16
 80076c4:	0e1b      	lsrs	r3, r3, #24
 80076c6:	f003 030f 	and.w	r3, r3, #15
 80076ca:	4a86      	ldr	r2, [pc, #536]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80076cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80076d2:	e3fd      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076d8:	e3fa      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80076da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076de:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80076e2:	430b      	orrs	r3, r1
 80076e4:	d164      	bne.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80076e6:	4b7d      	ldr	r3, [pc, #500]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80076e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076f0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80076f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d120      	bne.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80076f8:	4b78      	ldr	r3, [pc, #480]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0320 	and.w	r3, r3, #32
 8007700:	2b20      	cmp	r3, #32
 8007702:	d117      	bne.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007704:	4b75      	ldr	r3, [pc, #468]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 8007710:	4b72      	ldr	r3, [pc, #456]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	0e1b      	lsrs	r3, r3, #24
 8007716:	f003 030f 	and.w	r3, r3, #15
 800771a:	e006      	b.n	800772a <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 800771c:	4b6f      	ldr	r3, [pc, #444]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800771e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007722:	041b      	lsls	r3, r3, #16
 8007724:	0e1b      	lsrs	r3, r3, #24
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	4a6e      	ldr	r2, [pc, #440]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800772c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007730:	637b      	str	r3, [r7, #52]	@ 0x34
 8007732:	e3cd      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	637b      	str	r3, [r7, #52]	@ 0x34
 8007738:	e3ca      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800773a:	4b68      	ldr	r3, [pc, #416]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800773c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007744:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007748:	d112      	bne.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 800774a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007750:	d10e      	bne.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007752:	4b62      	ldr	r3, [pc, #392]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800775c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007760:	d102      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 8007762:	23fa      	movs	r3, #250	@ 0xfa
 8007764:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007766:	e3b3      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8007768:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800776c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800776e:	e3af      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007770:	4b5a      	ldr	r3, [pc, #360]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800777c:	d106      	bne.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007784:	d102      	bne.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 8007786:	4b56      	ldr	r3, [pc, #344]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007788:	637b      	str	r3, [r7, #52]	@ 0x34
 800778a:	e3a1      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800778c:	4b53      	ldr	r3, [pc, #332]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800778e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b02      	cmp	r3, #2
 8007798:	d107      	bne.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 800779a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077a0:	d103      	bne.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 80077a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80077a8:	e392      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ae:	e38f      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80077b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077b4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80077b8:	430b      	orrs	r3, r1
 80077ba:	d164      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80077bc:	4b47      	ldr	r3, [pc, #284]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80077be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077c2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80077c6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80077c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d120      	bne.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80077ce:	4b43      	ldr	r3, [pc, #268]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	2b20      	cmp	r3, #32
 80077d8:	d117      	bne.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80077da:	4b40      	ldr	r3, [pc, #256]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d005      	beq.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 80077e6:	4b3d      	ldr	r3, [pc, #244]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	0e1b      	lsrs	r3, r3, #24
 80077ec:	f003 030f 	and.w	r3, r3, #15
 80077f0:	e006      	b.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 80077f2:	4b3a      	ldr	r3, [pc, #232]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80077f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077f8:	041b      	lsls	r3, r3, #16
 80077fa:	0e1b      	lsrs	r3, r3, #24
 80077fc:	f003 030f 	and.w	r3, r3, #15
 8007800:	4a38      	ldr	r2, [pc, #224]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007806:	637b      	str	r3, [r7, #52]	@ 0x34
 8007808:	e362      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	637b      	str	r3, [r7, #52]	@ 0x34
 800780e:	e35f      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007810:	4b32      	ldr	r3, [pc, #200]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007812:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007816:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800781a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800781e:	d112      	bne.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 8007820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007826:	d10e      	bne.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007828:	4b2c      	ldr	r3, [pc, #176]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800782a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800782e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007836:	d102      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 8007838:	23fa      	movs	r3, #250	@ 0xfa
 800783a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800783c:	e348      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800783e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007842:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007844:	e344      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007846:	4b25      	ldr	r3, [pc, #148]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800784e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007852:	d106      	bne.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 8007854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007856:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800785a:	d102      	bne.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 800785c:	4b20      	ldr	r3, [pc, #128]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800785e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007860:	e336      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007862:	4b1e      	ldr	r3, [pc, #120]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007868:	f003 0302 	and.w	r3, r3, #2
 800786c:	2b02      	cmp	r3, #2
 800786e:	d107      	bne.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 8007870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007872:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007876:	d103      	bne.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 8007878:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800787c:	637b      	str	r3, [r7, #52]	@ 0x34
 800787e:	e327      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	637b      	str	r3, [r7, #52]	@ 0x34
 8007884:	e324      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800788a:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800788e:	430b      	orrs	r3, r1
 8007890:	d14e      	bne.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007892:	4b12      	ldr	r3, [pc, #72]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007898:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800789c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800789e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d103      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80078a4:	f7fd fc36 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 80078a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80078aa:	e311      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80078ac:	4b0b      	ldr	r3, [pc, #44]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80078ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078ba:	d119      	bne.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 80078bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078c2:	d115      	bne.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078c4:	4b05      	ldr	r3, [pc, #20]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80078c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078d2:	d109      	bne.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 80078d4:	23fa      	movs	r3, #250	@ 0xfa
 80078d6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078d8:	e2fa      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80078da:	bf00      	nop
 80078dc:	46020c00 	.word	0x46020c00
 80078e0:	00f42400 	.word	0x00f42400
 80078e4:	0800e6c4 	.word	0x0800e6c4
      }
      else
      {
        frequency = LSI_VALUE;
 80078e8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80078ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078ee:	e2ef      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80078f0:	4ba8      	ldr	r3, [pc, #672]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078fc:	d106      	bne.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 80078fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007900:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007904:	d102      	bne.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 8007906:	4ba4      	ldr	r3, [pc, #656]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007908:	637b      	str	r3, [r7, #52]	@ 0x34
 800790a:	e2e1      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800790c:	4ba1      	ldr	r3, [pc, #644]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800790e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b02      	cmp	r3, #2
 8007918:	d107      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 800791a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007920:	d103      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 8007922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007926:	637b      	str	r3, [r7, #52]	@ 0x34
 8007928:	e2d2      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	637b      	str	r3, [r7, #52]	@ 0x34
 800792e:	e2cf      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007934:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007938:	430b      	orrs	r3, r1
 800793a:	d12d      	bne.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800793c:	4b95      	ldr	r3, [pc, #596]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800793e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007942:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007946:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007948:	4b92      	ldr	r3, [pc, #584]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007950:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007954:	d105      	bne.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 8007956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007958:	2b00      	cmp	r3, #0
 800795a:	d102      	bne.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 800795c:	4b8e      	ldr	r3, [pc, #568]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800795e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007960:	e2b6      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007968:	d107      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800796a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800796e:	4618      	mov	r0, r3
 8007970:	f7fe fb4e 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007976:	637b      	str	r3, [r7, #52]	@ 0x34
 8007978:	e2aa      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800797a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007980:	d107      	bne.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007982:	f107 0318 	add.w	r3, r7, #24
 8007986:	4618      	mov	r0, r3
 8007988:	f7fe fc9c 	bl	80062c4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007990:	e29e      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007992:	2300      	movs	r3, #0
 8007994:	637b      	str	r3, [r7, #52]	@ 0x34
 8007996:	e29b      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800799c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80079a0:	430b      	orrs	r3, r1
 80079a2:	d156      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80079a4:	4b7b      	ldr	r3, [pc, #492]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80079a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079aa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80079ae:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80079b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079b6:	d028      	beq.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 80079b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079be:	d845      	bhi.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079c6:	d013      	beq.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 80079c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079ce:	d83d      	bhi.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 80079d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d004      	beq.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 80079d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079dc:	d004      	beq.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 80079de:	e035      	b.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80079e0:	f7fd fbac 	bl	800513c <HAL_RCC_GetPCLK2Freq>
 80079e4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80079e6:	e273      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80079e8:	f7fd fa78 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 80079ec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80079ee:	e26f      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079f0:	4b68      	ldr	r3, [pc, #416]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079fc:	d102      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 80079fe:	4b66      	ldr	r3, [pc, #408]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007a00:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a02:	e265      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a08:	e262      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a0a:	4b62      	ldr	r3, [pc, #392]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0320 	and.w	r3, r3, #32
 8007a12:	2b20      	cmp	r3, #32
 8007a14:	d117      	bne.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a16:	4b5f      	ldr	r3, [pc, #380]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d005      	beq.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 8007a22:	4b5c      	ldr	r3, [pc, #368]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	0e1b      	lsrs	r3, r3, #24
 8007a28:	f003 030f 	and.w	r3, r3, #15
 8007a2c:	e006      	b.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 8007a2e:	4b59      	ldr	r3, [pc, #356]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a34:	041b      	lsls	r3, r3, #16
 8007a36:	0e1b      	lsrs	r3, r3, #24
 8007a38:	f003 030f 	and.w	r3, r3, #15
 8007a3c:	4a57      	ldr	r2, [pc, #348]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a42:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a44:	e244      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a4a:	e241      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a50:	e23e      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a56:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007a5a:	430b      	orrs	r3, r1
 8007a5c:	d156      	bne.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007a5e:	4b4d      	ldr	r3, [pc, #308]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a68:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a70:	d028      	beq.n	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 8007a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a78:	d845      	bhi.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a80:	d013      	beq.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8007a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a88:	d83d      	bhi.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d004      	beq.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a96:	d004      	beq.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8007a98:	e035      	b.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007a9a:	f7fd fb3b 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8007a9e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007aa0:	e216      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007aa2:	f7fd fa1b 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8007aa6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007aa8:	e212      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ab6:	d102      	bne.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 8007ab8:	4b37      	ldr	r3, [pc, #220]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007aba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007abc:	e208      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ac2:	e205      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007ac4:	4b33      	ldr	r3, [pc, #204]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b20      	cmp	r3, #32
 8007ace:	d117      	bne.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ad0:	4b30      	ldr	r3, [pc, #192]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8007adc:	4b2d      	ldr	r3, [pc, #180]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	0e1b      	lsrs	r3, r3, #24
 8007ae2:	f003 030f 	and.w	r3, r3, #15
 8007ae6:	e006      	b.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 8007ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007aea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007aee:	041b      	lsls	r3, r3, #16
 8007af0:	0e1b      	lsrs	r3, r3, #24
 8007af2:	f003 030f 	and.w	r3, r3, #15
 8007af6:	4a29      	ldr	r2, [pc, #164]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007afc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007afe:	e1e7      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b04:	e1e4      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007b06:	2300      	movs	r3, #0
 8007b08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b0a:	e1e1      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b10:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007b14:	430b      	orrs	r3, r1
 8007b16:	d17c      	bne.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007b18:	4b1e      	ldr	r3, [pc, #120]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007b1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b1e:	f003 0318 	and.w	r3, r3, #24
 8007b22:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b26:	2b18      	cmp	r3, #24
 8007b28:	d870      	bhi.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 8007b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007ba1 	.word	0x08007ba1
 8007b34:	08007c0d 	.word	0x08007c0d
 8007b38:	08007c0d 	.word	0x08007c0d
 8007b3c:	08007c0d 	.word	0x08007c0d
 8007b40:	08007c0d 	.word	0x08007c0d
 8007b44:	08007c0d 	.word	0x08007c0d
 8007b48:	08007c0d 	.word	0x08007c0d
 8007b4c:	08007c0d 	.word	0x08007c0d
 8007b50:	08007ba9 	.word	0x08007ba9
 8007b54:	08007c0d 	.word	0x08007c0d
 8007b58:	08007c0d 	.word	0x08007c0d
 8007b5c:	08007c0d 	.word	0x08007c0d
 8007b60:	08007c0d 	.word	0x08007c0d
 8007b64:	08007c0d 	.word	0x08007c0d
 8007b68:	08007c0d 	.word	0x08007c0d
 8007b6c:	08007c0d 	.word	0x08007c0d
 8007b70:	08007bb1 	.word	0x08007bb1
 8007b74:	08007c0d 	.word	0x08007c0d
 8007b78:	08007c0d 	.word	0x08007c0d
 8007b7c:	08007c0d 	.word	0x08007c0d
 8007b80:	08007c0d 	.word	0x08007c0d
 8007b84:	08007c0d 	.word	0x08007c0d
 8007b88:	08007c0d 	.word	0x08007c0d
 8007b8c:	08007c0d 	.word	0x08007c0d
 8007b90:	08007bcb 	.word	0x08007bcb
 8007b94:	46020c00 	.word	0x46020c00
 8007b98:	00f42400 	.word	0x00f42400
 8007b9c:	0800e6c4 	.word	0x0800e6c4
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007ba0:	f7fd fae0 	bl	8005164 <HAL_RCC_GetPCLK3Freq>
 8007ba4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007ba6:	e193      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007ba8:	f7fd f998 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8007bac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007bae:	e18f      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007bb0:	4b9f      	ldr	r3, [pc, #636]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bbc:	d102      	bne.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 8007bbe:	4b9d      	ldr	r3, [pc, #628]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8007bc0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007bc2:	e185      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bc8:	e182      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007bca:	4b99      	ldr	r3, [pc, #612]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b20      	cmp	r3, #32
 8007bd4:	d117      	bne.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bd6:	4b96      	ldr	r3, [pc, #600]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d005      	beq.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 8007be2:	4b93      	ldr	r3, [pc, #588]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	0e1b      	lsrs	r3, r3, #24
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	e006      	b.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 8007bee:	4b90      	ldr	r3, [pc, #576]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007bf4:	041b      	lsls	r3, r3, #16
 8007bf6:	0e1b      	lsrs	r3, r3, #24
 8007bf8:	f003 030f 	and.w	r3, r3, #15
 8007bfc:	4a8e      	ldr	r2, [pc, #568]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c02:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c04:	e164      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c0a:	e161      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c10:	e15e      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c16:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007c1a:	430b      	orrs	r3, r1
 8007c1c:	d155      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007c1e:	4b84      	ldr	r3, [pc, #528]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007c20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c24:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007c28:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c30:	d013      	beq.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 8007c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c38:	d844      	bhi.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c40:	d013      	beq.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 8007c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c48:	d83c      	bhi.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d014      	beq.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 8007c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c56:	d014      	beq.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8007c58:	e034      	b.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c5a:	f107 0318 	add.w	r3, r7, #24
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fe fb30 	bl	80062c4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c68:	e132      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe f9ce 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c78:	e12a      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007c7a:	f7fd f92f 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8007c7e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007c80:	e126      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c82:	4b6b      	ldr	r3, [pc, #428]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0320 	and.w	r3, r3, #32
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	d117      	bne.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c8e:	4b68      	ldr	r3, [pc, #416]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d005      	beq.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 8007c9a:	4b65      	ldr	r3, [pc, #404]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	0e1b      	lsrs	r3, r3, #24
 8007ca0:	f003 030f 	and.w	r3, r3, #15
 8007ca4:	e006      	b.n	8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 8007ca6:	4b62      	ldr	r3, [pc, #392]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007cac:	041b      	lsls	r3, r3, #16
 8007cae:	0e1b      	lsrs	r3, r3, #24
 8007cb0:	f003 030f 	and.w	r3, r3, #15
 8007cb4:	4a60      	ldr	r2, [pc, #384]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007cbc:	e108      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cc2:	e105      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cc8:	e102      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8007cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cce:	1e59      	subs	r1, r3, #1
 8007cd0:	ea52 0301 	orrs.w	r3, r2, r1
 8007cd4:	d13c      	bne.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8007cd6:	4b56      	ldr	r3, [pc, #344]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007cd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007cdc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007ce0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007ce8:	d027      	beq.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8007cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007cf0:	d82b      	bhi.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007cf8:	d017      	beq.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d00:	d823      	bhi.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8007d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d004      	beq.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 8007d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d0e:	d004      	beq.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8007d10:	e01b      	b.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007d12:	f7fd f8e3 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8007d16:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007d18:	e0da      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe f976 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d28:	e0d2      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d2a:	f107 0318 	add.w	r3, r7, #24
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe fac8 	bl	80062c4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d38:	e0ca      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d3a:	f107 030c 	add.w	r3, r7, #12
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fe fc1a 	bl	8006578 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d48:	e0c2      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d4e:	e0bf      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d54:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007d58:	430b      	orrs	r3, r1
 8007d5a:	d131      	bne.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007d5c:	4b34      	ldr	r3, [pc, #208]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007d5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d66:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007d68:	4b31      	ldr	r3, [pc, #196]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d106      	bne.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 8007d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d103      	bne.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 8007d7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d82:	e0a5      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007d84:	4b2a      	ldr	r3, [pc, #168]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007d86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d92:	d112      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 8007d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d9a:	d10e      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d9c:	4b24      	ldr	r3, [pc, #144]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007da6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007daa:	d102      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 8007dac:	23fa      	movs	r3, #250	@ 0xfa
 8007dae:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007db0:	e08e      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8007db2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007db6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007db8:	e08a      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dbe:	e087      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dc4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	d13b      	bne.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007dcc:	4b18      	ldr	r3, [pc, #96]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007dce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007dd2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007dd6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007dd8:	4b15      	ldr	r3, [pc, #84]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007de4:	d105      	bne.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 8007de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d102      	bne.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 8007dec:	4b13      	ldr	r3, [pc, #76]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8007dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007df0:	e06e      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007df2:	4b0f      	ldr	r3, [pc, #60]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007dfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dfe:	d106      	bne.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 8007e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e06:	d102      	bne.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007e08:	4b0d      	ldr	r3, [pc, #52]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8007e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e0c:	e060      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007e0e:	4b08      	ldr	r3, [pc, #32]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e1a:	d106      	bne.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e22:	d102      	bne.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 8007e24:	4b03      	ldr	r3, [pc, #12]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8007e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e28:	e052      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e2e:	e04f      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007e30:	46020c00 	.word	0x46020c00
 8007e34:	00f42400 	.word	0x00f42400
 8007e38:	0800e6c4 	.word	0x0800e6c4
 8007e3c:	02dc6c00 	.word	0x02dc6c00
 8007e40:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8007e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e48:	f1a3 0108 	sub.w	r1, r3, #8
 8007e4c:	ea52 0301 	orrs.w	r3, r2, r1
 8007e50:	d13c      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8007e52:	4b22      	ldr	r3, [pc, #136]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8007e54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e58:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007e5c:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8007e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e6a:	d105      	bne.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d102      	bne.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 8007e72:	4b1b      	ldr	r3, [pc, #108]	@ (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 8007e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e76:	e02b      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8007e78:	4b18      	ldr	r3, [pc, #96]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e84:	d106      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e8c:	d102      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 8007e8e:	4b15      	ldr	r3, [pc, #84]	@ (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8007e90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e92:	e01d      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8007e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e9a:	d107      	bne.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fe f8b5 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eaa:	e011      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8007eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eae:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007eb2:	d108      	bne.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fe f8a9 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec0:	085b      	lsrs	r3, r3, #1
 8007ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ec4:	e004      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eca:	e001      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3738      	adds	r7, #56	@ 0x38
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	46020c00 	.word	0x46020c00
 8007ee0:	00f42400 	.word	0x00f42400
 8007ee4:	007a1200 	.word	0x007a1200

08007ee8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007ef0:	4b47      	ldr	r3, [pc, #284]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a46      	ldr	r2, [pc, #280]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007ef6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007efa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007efc:	f7f9 fbd6 	bl	80016ac <HAL_GetTick>
 8007f00:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f02:	e008      	b.n	8007f16 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f04:	f7f9 fbd2 	bl	80016ac <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d901      	bls.n	8007f16 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e077      	b.n	8008006 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f16:	4b3e      	ldr	r3, [pc, #248]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1f0      	bne.n	8007f04 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007f22:	4b3b      	ldr	r3, [pc, #236]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f26:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007f2a:	f023 0303 	bic.w	r3, r3, #3
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6811      	ldr	r1, [r2, #0]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	6852      	ldr	r2, [r2, #4]
 8007f36:	3a01      	subs	r2, #1
 8007f38:	0212      	lsls	r2, r2, #8
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	4934      	ldr	r1, [pc, #208]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007f42:	4b33      	ldr	r3, [pc, #204]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007f44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f46:	4b33      	ldr	r3, [pc, #204]	@ (8008014 <RCCEx_PLL2_Config+0x12c>)
 8007f48:	4013      	ands	r3, r2
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	6892      	ldr	r2, [r2, #8]
 8007f4e:	3a01      	subs	r2, #1
 8007f50:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	68d2      	ldr	r2, [r2, #12]
 8007f58:	3a01      	subs	r2, #1
 8007f5a:	0252      	lsls	r2, r2, #9
 8007f5c:	b292      	uxth	r2, r2
 8007f5e:	4311      	orrs	r1, r2
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	6912      	ldr	r2, [r2, #16]
 8007f64:	3a01      	subs	r2, #1
 8007f66:	0412      	lsls	r2, r2, #16
 8007f68:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007f6c:	4311      	orrs	r1, r2
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	6952      	ldr	r2, [r2, #20]
 8007f72:	3a01      	subs	r2, #1
 8007f74:	0612      	lsls	r2, r2, #24
 8007f76:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	4924      	ldr	r1, [pc, #144]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007f82:	4b23      	ldr	r3, [pc, #140]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f86:	f023 020c 	bic.w	r2, r3, #12
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	4920      	ldr	r1, [pc, #128]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007f94:	4b1e      	ldr	r3, [pc, #120]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	491c      	ldr	r1, [pc, #112]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa6:	4a1a      	ldr	r2, [pc, #104]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007fa8:	f023 0310 	bic.w	r3, r3, #16
 8007fac:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007fae:	4b18      	ldr	r3, [pc, #96]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fb6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	69d2      	ldr	r2, [r2, #28]
 8007fbe:	00d2      	lsls	r2, r2, #3
 8007fc0:	4913      	ldr	r1, [pc, #76]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007fc6:	4b12      	ldr	r3, [pc, #72]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fca:	4a11      	ldr	r2, [pc, #68]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007fcc:	f043 0310 	orr.w	r3, r3, #16
 8007fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007fd8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007fdc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007fde:	f7f9 fb65 	bl	80016ac <HAL_GetTick>
 8007fe2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007fe4:	e008      	b.n	8007ff8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007fe6:	f7f9 fb61 	bl	80016ac <HAL_GetTick>
 8007fea:	4602      	mov	r2, r0
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d901      	bls.n	8007ff8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e006      	b.n	8008006 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ff8:	4b05      	ldr	r3, [pc, #20]	@ (8008010 <RCCEx_PLL2_Config+0x128>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0f0      	beq.n	8007fe6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008004:	2300      	movs	r3, #0

}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	46020c00 	.word	0x46020c00
 8008014:	80800000 	.word	0x80800000

08008018 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008020:	4b47      	ldr	r3, [pc, #284]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a46      	ldr	r2, [pc, #280]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 8008026:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800802a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800802c:	f7f9 fb3e 	bl	80016ac <HAL_GetTick>
 8008030:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008032:	e008      	b.n	8008046 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008034:	f7f9 fb3a 	bl	80016ac <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d901      	bls.n	8008046 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e077      	b.n	8008136 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008046:	4b3e      	ldr	r3, [pc, #248]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f0      	bne.n	8008034 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008052:	4b3b      	ldr	r3, [pc, #236]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 8008054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008056:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800805a:	f023 0303 	bic.w	r3, r3, #3
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	6811      	ldr	r1, [r2, #0]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6852      	ldr	r2, [r2, #4]
 8008066:	3a01      	subs	r2, #1
 8008068:	0212      	lsls	r2, r2, #8
 800806a:	430a      	orrs	r2, r1
 800806c:	4934      	ldr	r1, [pc, #208]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 800806e:	4313      	orrs	r3, r2
 8008070:	630b      	str	r3, [r1, #48]	@ 0x30
 8008072:	4b33      	ldr	r3, [pc, #204]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 8008074:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008076:	4b33      	ldr	r3, [pc, #204]	@ (8008144 <RCCEx_PLL3_Config+0x12c>)
 8008078:	4013      	ands	r3, r2
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	6892      	ldr	r2, [r2, #8]
 800807e:	3a01      	subs	r2, #1
 8008080:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	68d2      	ldr	r2, [r2, #12]
 8008088:	3a01      	subs	r2, #1
 800808a:	0252      	lsls	r2, r2, #9
 800808c:	b292      	uxth	r2, r2
 800808e:	4311      	orrs	r1, r2
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	6912      	ldr	r2, [r2, #16]
 8008094:	3a01      	subs	r2, #1
 8008096:	0412      	lsls	r2, r2, #16
 8008098:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800809c:	4311      	orrs	r1, r2
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	6952      	ldr	r2, [r2, #20]
 80080a2:	3a01      	subs	r2, #1
 80080a4:	0612      	lsls	r2, r2, #24
 80080a6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80080aa:	430a      	orrs	r2, r1
 80080ac:	4924      	ldr	r1, [pc, #144]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 80080ae:	4313      	orrs	r3, r2
 80080b0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80080b2:	4b23      	ldr	r3, [pc, #140]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 80080b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b6:	f023 020c 	bic.w	r2, r3, #12
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	4920      	ldr	r1, [pc, #128]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80080c4:	4b1e      	ldr	r3, [pc, #120]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 80080c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	491c      	ldr	r1, [pc, #112]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80080d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 80080d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d6:	4a1a      	ldr	r2, [pc, #104]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 80080d8:	f023 0310 	bic.w	r3, r3, #16
 80080dc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80080de:	4b18      	ldr	r3, [pc, #96]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 80080e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080e6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	69d2      	ldr	r2, [r2, #28]
 80080ee:	00d2      	lsls	r2, r2, #3
 80080f0:	4913      	ldr	r1, [pc, #76]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80080f6:	4b12      	ldr	r3, [pc, #72]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 80080f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080fa:	4a11      	ldr	r2, [pc, #68]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 80080fc:	f043 0310 	orr.w	r3, r3, #16
 8008100:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008102:	4b0f      	ldr	r3, [pc, #60]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a0e      	ldr	r2, [pc, #56]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 8008108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800810c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800810e:	f7f9 facd 	bl	80016ac <HAL_GetTick>
 8008112:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008114:	e008      	b.n	8008128 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008116:	f7f9 fac9 	bl	80016ac <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e006      	b.n	8008136 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008128:	4b05      	ldr	r3, [pc, #20]	@ (8008140 <RCCEx_PLL3_Config+0x128>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0f0      	beq.n	8008116 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	46020c00 	.word	0x46020c00
 8008144:	80800000 	.word	0x80800000

08008148 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e0fb      	b.n	8008352 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a7f      	ldr	r2, [pc, #508]	@ (800835c <HAL_SPI_Init+0x214>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d004      	beq.n	800816e <HAL_SPI_Init+0x26>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a7d      	ldr	r2, [pc, #500]	@ (8008360 <HAL_SPI_Init+0x218>)
 800816a:	4293      	cmp	r3, r2
 800816c:	e000      	b.n	8008170 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800816e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a78      	ldr	r2, [pc, #480]	@ (800835c <HAL_SPI_Init+0x214>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d004      	beq.n	800818a <HAL_SPI_Init+0x42>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a76      	ldr	r2, [pc, #472]	@ (8008360 <HAL_SPI_Init+0x218>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d105      	bne.n	8008196 <HAL_SPI_Init+0x4e>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	2b0f      	cmp	r3, #15
 8008190:	d901      	bls.n	8008196 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e0dd      	b.n	8008352 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fc14 	bl	80089c4 <SPI_GetPacketSize>
 800819c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a6e      	ldr	r2, [pc, #440]	@ (800835c <HAL_SPI_Init+0x214>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d004      	beq.n	80081b2 <HAL_SPI_Init+0x6a>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a6c      	ldr	r2, [pc, #432]	@ (8008360 <HAL_SPI_Init+0x218>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d102      	bne.n	80081b8 <HAL_SPI_Init+0x70>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d816      	bhi.n	80081e6 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80081bc:	4a69      	ldr	r2, [pc, #420]	@ (8008364 <HAL_SPI_Init+0x21c>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d00e      	beq.n	80081e0 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a68      	ldr	r2, [pc, #416]	@ (8008368 <HAL_SPI_Init+0x220>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d009      	beq.n	80081e0 <HAL_SPI_Init+0x98>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a66      	ldr	r2, [pc, #408]	@ (800836c <HAL_SPI_Init+0x224>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d004      	beq.n	80081e0 <HAL_SPI_Init+0x98>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a65      	ldr	r2, [pc, #404]	@ (8008370 <HAL_SPI_Init+0x228>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d104      	bne.n	80081ea <HAL_SPI_Init+0xa2>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b10      	cmp	r3, #16
 80081e4:	d901      	bls.n	80081ea <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e0b3      	b.n	8008352 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d106      	bne.n	8008204 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7f8 ff32 	bl	8001068 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2202      	movs	r2, #2
 8008208:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0201 	bic.w	r2, r2, #1
 800821a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008226:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008230:	d119      	bne.n	8008266 <HAL_SPI_Init+0x11e>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800823a:	d103      	bne.n	8008244 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008240:	2b00      	cmp	r3, #0
 8008242:	d008      	beq.n	8008256 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10c      	bne.n	8008266 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008250:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008254:	d107      	bne.n	8008266 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008264:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00f      	beq.n	8008292 <HAL_SPI_Init+0x14a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	2b06      	cmp	r3, #6
 8008278:	d90b      	bls.n	8008292 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	430a      	orrs	r2, r1
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	e007      	b.n	80082a2 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80082a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	69da      	ldr	r2, [r3, #28]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082aa:	431a      	orrs	r2, r3
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	431a      	orrs	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082b4:	ea42 0103 	orr.w	r1, r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68da      	ldr	r2, [r3, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082cc:	431a      	orrs	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d2:	431a      	orrs	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	431a      	orrs	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	431a      	orrs	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	431a      	orrs	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	431a      	orrs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	431a      	orrs	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	431a      	orrs	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008302:	431a      	orrs	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008308:	431a      	orrs	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800830e:	ea42 0103 	orr.w	r1, r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	46002000 	.word	0x46002000
 8008360:	56002000 	.word	0x56002000
 8008364:	40013000 	.word	0x40013000
 8008368:	50013000 	.word	0x50013000
 800836c:	40003800 	.word	0x40003800
 8008370:	50003800 	.word	0x50003800

08008374 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b08c      	sub	sp, #48	@ 0x30
 8008378:	af02      	add	r7, sp, #8
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
 8008380:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3320      	adds	r3, #32
 8008388:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3330      	adds	r3, #48	@ 0x30
 8008390:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008392:	f7f9 f98b 	bl	80016ac <HAL_GetTick>
 8008396:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8008398:	887b      	ldrh	r3, [r7, #2]
 800839a:	847b      	strh	r3, [r7, #34]	@ 0x22
  initial_RxXferCount = Size;
 800839c:	887b      	ldrh	r3, [r7, #2]
 800839e:	843b      	strh	r3, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d001      	beq.n	80083b0 <HAL_SPI_TransmitReceive+0x3c>
  {
    return HAL_BUSY;
 80083ac:	2302      	movs	r3, #2
 80083ae:	e237      	b.n	8008820 <HAL_SPI_TransmitReceive+0x4ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d005      	beq.n	80083c2 <HAL_SPI_TransmitReceive+0x4e>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d002      	beq.n	80083c2 <HAL_SPI_TransmitReceive+0x4e>
 80083bc:	887b      	ldrh	r3, [r7, #2]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <HAL_SPI_TransmitReceive+0x52>
  {
    return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e22c      	b.n	8008820 <HAL_SPI_TransmitReceive+0x4ac>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d101      	bne.n	80083d4 <HAL_SPI_TransmitReceive+0x60>
 80083d0:	2302      	movs	r3, #2
 80083d2:	e225      	b.n	8008820 <HAL_SPI_TransmitReceive+0x4ac>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2205      	movs	r2, #5
 80083e0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	887a      	ldrh	r2, [r7, #2]
 80083f6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	887a      	ldrh	r2, [r7, #2]
 80083fe:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	887a      	ldrh	r2, [r7, #2]
 800840c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	887a      	ldrh	r2, [r7, #2]
 8008414:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8008432:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a6c      	ldr	r2, [pc, #432]	@ (80085ec <HAL_SPI_TransmitReceive+0x278>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00e      	beq.n	800845c <HAL_SPI_TransmitReceive+0xe8>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a6b      	ldr	r2, [pc, #428]	@ (80085f0 <HAL_SPI_TransmitReceive+0x27c>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d009      	beq.n	800845c <HAL_SPI_TransmitReceive+0xe8>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a69      	ldr	r2, [pc, #420]	@ (80085f4 <HAL_SPI_TransmitReceive+0x280>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d004      	beq.n	800845c <HAL_SPI_TransmitReceive+0xe8>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a68      	ldr	r2, [pc, #416]	@ (80085f8 <HAL_SPI_TransmitReceive+0x284>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d102      	bne.n	8008462 <HAL_SPI_TransmitReceive+0xee>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800845c:	2310      	movs	r3, #16
 800845e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008460:	e001      	b.n	8008466 <HAL_SPI_TransmitReceive+0xf2>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8008462:	2308      	movs	r3, #8
 8008464:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	0c1b      	lsrs	r3, r3, #16
 800846e:	041b      	lsls	r3, r3, #16
 8008470:	8879      	ldrh	r1, [r7, #2]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	6812      	ldr	r2, [r2, #0]
 8008476:	430b      	orrs	r3, r1
 8008478:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f042 0201 	orr.w	r2, r2, #1
 8008488:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	69db      	ldr	r3, [r3, #28]
 8008490:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10c      	bne.n	80084b2 <HAL_SPI_TransmitReceive+0x13e>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084a0:	d107      	bne.n	80084b2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	2b0f      	cmp	r3, #15
 80084b8:	f240 808e 	bls.w	80085d8 <HAL_SPI_TransmitReceive+0x264>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a4a      	ldr	r2, [pc, #296]	@ (80085ec <HAL_SPI_TransmitReceive+0x278>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d00e      	beq.n	80084e4 <HAL_SPI_TransmitReceive+0x170>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a49      	ldr	r2, [pc, #292]	@ (80085f0 <HAL_SPI_TransmitReceive+0x27c>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d009      	beq.n	80084e4 <HAL_SPI_TransmitReceive+0x170>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a47      	ldr	r2, [pc, #284]	@ (80085f4 <HAL_SPI_TransmitReceive+0x280>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d004      	beq.n	80084e4 <HAL_SPI_TransmitReceive+0x170>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a46      	ldr	r2, [pc, #280]	@ (80085f8 <HAL_SPI_TransmitReceive+0x284>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d179      	bne.n	80085d8 <HAL_SPI_TransmitReceive+0x264>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80084e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e6:	089b      	lsrs	r3, r3, #2
 80084e8:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80084ea:	e06e      	b.n	80085ca <HAL_SPI_TransmitReceive+0x256>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d120      	bne.n	800853c <HAL_SPI_TransmitReceive+0x1c8>
 80084fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01d      	beq.n	800853c <HAL_SPI_TransmitReceive+0x1c8>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008500:	8c3a      	ldrh	r2, [r7, #32]
 8008502:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8008504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008506:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008508:	429a      	cmp	r2, r3
 800850a:	d217      	bcs.n	800853c <HAL_SPI_TransmitReceive+0x1c8>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6812      	ldr	r2, [r2, #0]
 8008516:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800851c:	1d1a      	adds	r2, r3, #4
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008528:	b29b      	uxth	r3, r3
 800852a:	3b01      	subs	r3, #1
 800852c:	b29a      	uxth	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800853a:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	695a      	ldr	r2, [r3, #20]
 8008542:	f248 0308 	movw	r3, #32776	@ 0x8008
 8008546:	4013      	ands	r3, r2
 8008548:	2b00      	cmp	r3, #0
 800854a:	d01a      	beq.n	8008582 <HAL_SPI_TransmitReceive+0x20e>
 800854c:	8c3b      	ldrh	r3, [r7, #32]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d017      	beq.n	8008582 <HAL_SPI_TransmitReceive+0x20e>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800855a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800855c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008562:	1d1a      	adds	r2, r3, #4
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount --;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800856e:	b29b      	uxth	r3, r3
 8008570:	3b01      	subs	r3, #1
 8008572:	b29a      	uxth	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008580:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008582:	f7f9 f893 	bl	80016ac <HAL_GetTick>
 8008586:	4602      	mov	r2, r0
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800858e:	429a      	cmp	r2, r3
 8008590:	d803      	bhi.n	800859a <HAL_SPI_TransmitReceive+0x226>
 8008592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008594:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008598:	d102      	bne.n	80085a0 <HAL_SPI_TransmitReceive+0x22c>
 800859a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859c:	2b00      	cmp	r3, #0
 800859e:	d114      	bne.n	80085ca <HAL_SPI_TransmitReceive+0x256>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f000 f941 	bl	8008828 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e12a      	b.n	8008820 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80085ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d18d      	bne.n	80084ec <HAL_SPI_TransmitReceive+0x178>
 80085d0:	8c3b      	ldrh	r3, [r7, #32]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d18a      	bne.n	80084ec <HAL_SPI_TransmitReceive+0x178>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80085d6:	e0fd      	b.n	80087d4 <HAL_SPI_TransmitReceive+0x460>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	2b07      	cmp	r3, #7
 80085de:	f240 80f3 	bls.w	80087c8 <HAL_SPI_TransmitReceive+0x454>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80085e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e4:	085b      	lsrs	r3, r3, #1
 80085e6:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80085e8:	e075      	b.n	80086d6 <HAL_SPI_TransmitReceive+0x362>
 80085ea:	bf00      	nop
 80085ec:	40013000 	.word	0x40013000
 80085f0:	50013000 	.word	0x50013000
 80085f4:	40003800 	.word	0x40003800
 80085f8:	50003800 	.word	0x50003800
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b02      	cmp	r3, #2
 8008608:	d11f      	bne.n	800864a <HAL_SPI_TransmitReceive+0x2d6>
 800860a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800860c:	2b00      	cmp	r3, #0
 800860e:	d01c      	beq.n	800864a <HAL_SPI_TransmitReceive+0x2d6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008610:	8c3a      	ldrh	r2, [r7, #32]
 8008612:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8008614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008616:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008618:	429a      	cmp	r2, r3
 800861a:	d216      	bcs.n	800864a <HAL_SPI_TransmitReceive+0x2d6>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008620:	881a      	ldrh	r2, [r3, #0]
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800862a:	1c9a      	adds	r2, r3, #2
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008636:	b29b      	uxth	r3, r3
 8008638:	3b01      	subs	r3, #1
 800863a:	b29a      	uxth	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008648:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	f003 0301 	and.w	r3, r3, #1
 8008654:	2b01      	cmp	r3, #1
 8008656:	d11a      	bne.n	800868e <HAL_SPI_TransmitReceive+0x31a>
 8008658:	8c3b      	ldrh	r3, [r7, #32]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d017      	beq.n	800868e <HAL_SPI_TransmitReceive+0x31a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	8812      	ldrh	r2, [r2, #0]
 8008666:	b292      	uxth	r2, r2
 8008668:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800866e:	1c9a      	adds	r2, r3, #2
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800867a:	b29b      	uxth	r3, r3
 800867c:	3b01      	subs	r3, #1
 800867e:	b29a      	uxth	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800868c:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800868e:	f7f9 f80d 	bl	80016ac <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800869a:	429a      	cmp	r2, r3
 800869c:	d803      	bhi.n	80086a6 <HAL_SPI_TransmitReceive+0x332>
 800869e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086a4:	d102      	bne.n	80086ac <HAL_SPI_TransmitReceive+0x338>
 80086a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d114      	bne.n	80086d6 <HAL_SPI_TransmitReceive+0x362>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 f8bb 	bl	8008828 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e0a4      	b.n	8008820 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80086d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d18f      	bne.n	80085fc <HAL_SPI_TransmitReceive+0x288>
 80086dc:	8c3b      	ldrh	r3, [r7, #32]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d18c      	bne.n	80085fc <HAL_SPI_TransmitReceive+0x288>
 80086e2:	e077      	b.n	80087d4 <HAL_SPI_TransmitReceive+0x460>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d121      	bne.n	8008736 <HAL_SPI_TransmitReceive+0x3c2>
 80086f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d01e      	beq.n	8008736 <HAL_SPI_TransmitReceive+0x3c2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80086f8:	8c3a      	ldrh	r2, [r7, #32]
 80086fa:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80086fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fe:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008700:	429a      	cmp	r2, r3
 8008702:	d218      	bcs.n	8008736 <HAL_SPI_TransmitReceive+0x3c2>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3320      	adds	r3, #32
 800870e:	7812      	ldrb	r2, [r2, #0]
 8008710:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008716:	1c5a      	adds	r2, r3, #1
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008722:	b29b      	uxth	r3, r3
 8008724:	3b01      	subs	r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008734:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	2b01      	cmp	r3, #1
 8008742:	d11d      	bne.n	8008780 <HAL_SPI_TransmitReceive+0x40c>
 8008744:	8c3b      	ldrh	r3, [r7, #32]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d01a      	beq.n	8008780 <HAL_SPI_TransmitReceive+0x40c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008756:	7812      	ldrb	r2, [r2, #0]
 8008758:	b2d2      	uxtb	r2, r2
 800875a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008760:	1c5a      	adds	r2, r3, #1
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800876c:	b29b      	uxth	r3, r3
 800876e:	3b01      	subs	r3, #1
 8008770:	b29a      	uxth	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800877e:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008780:	f7f8 ff94 	bl	80016ac <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800878c:	429a      	cmp	r2, r3
 800878e:	d803      	bhi.n	8008798 <HAL_SPI_TransmitReceive+0x424>
 8008790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008792:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008796:	d102      	bne.n	800879e <HAL_SPI_TransmitReceive+0x42a>
 8008798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879a:	2b00      	cmp	r3, #0
 800879c:	d114      	bne.n	80087c8 <HAL_SPI_TransmitReceive+0x454>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 f842 	bl	8008828 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e02b      	b.n	8008820 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80087c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d18a      	bne.n	80086e4 <HAL_SPI_TransmitReceive+0x370>
 80087ce:	8c3b      	ldrh	r3, [r7, #32]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d187      	bne.n	80086e4 <HAL_SPI_TransmitReceive+0x370>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087da:	2200      	movs	r2, #0
 80087dc:	2108      	movs	r1, #8
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 f8c2 	bl	8008968 <SPI_WaitOnFlagUntilTimeout>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d007      	beq.n	80087fa <HAL_SPI_TransmitReceive+0x486>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087f0:	f043 0220 	orr.w	r2, r3, #32
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f000 f814 	bl	8008828 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <HAL_SPI_TransmitReceive+0x4aa>
  {
    return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e000      	b.n	8008820 <HAL_SPI_TransmitReceive+0x4ac>
  }
  else
  {
    return HAL_OK;
 800881e:	2300      	movs	r3, #0
  }
}
 8008820:	4618      	mov	r0, r3
 8008822:	3728      	adds	r7, #40	@ 0x28
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	699a      	ldr	r2, [r3, #24]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f042 0208 	orr.w	r2, r2, #8
 8008846:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	699a      	ldr	r2, [r3, #24]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f042 0210 	orr.w	r2, r2, #16
 8008856:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f022 0201 	bic.w	r2, r2, #1
 8008866:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	6812      	ldr	r2, [r2, #0]
 8008872:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8008876:	f023 0303 	bic.w	r3, r3, #3
 800887a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800888a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b04      	cmp	r3, #4
 8008896:	d014      	beq.n	80088c2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f003 0320 	and.w	r3, r3, #32
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00f      	beq.n	80088c2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	699a      	ldr	r2, [r3, #24]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f042 0220 	orr.w	r2, r2, #32
 80088c0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d014      	beq.n	80088f8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00f      	beq.n	80088f8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088de:	f043 0204 	orr.w	r2, r3, #4
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	699a      	ldr	r2, [r3, #24]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088f6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00f      	beq.n	8008922 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008908:	f043 0201 	orr.w	r2, r3, #1
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	699a      	ldr	r2, [r3, #24]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008920:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00f      	beq.n	800894c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008932:	f043 0208 	orr.w	r2, r3, #8
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	699a      	ldr	r2, [r3, #24]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800894a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800895c:	bf00      	nop
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	603b      	str	r3, [r7, #0]
 8008974:	4613      	mov	r3, r2
 8008976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008978:	e010      	b.n	800899c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800897a:	f7f8 fe97 	bl	80016ac <HAL_GetTick>
 800897e:	4602      	mov	r2, r0
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	429a      	cmp	r2, r3
 8008988:	d803      	bhi.n	8008992 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008990:	d102      	bne.n	8008998 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e00f      	b.n	80089bc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	695a      	ldr	r2, [r3, #20]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	4013      	ands	r3, r2
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	bf0c      	ite	eq
 80089ac:	2301      	moveq	r3, #1
 80089ae:	2300      	movne	r3, #0
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	461a      	mov	r2, r3
 80089b4:	79fb      	ldrb	r3, [r7, #7]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d0df      	beq.n	800897a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089d0:	095b      	lsrs	r3, r3, #5
 80089d2:	3301      	adds	r3, #1
 80089d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	3301      	adds	r3, #1
 80089dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	3307      	adds	r3, #7
 80089e2:	08db      	lsrs	r3, r3, #3
 80089e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	fb02 f303 	mul.w	r3, r2, r3
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b083      	sub	sp, #12
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d12e      	bne.n	8008a6e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d101      	bne.n	8008a1e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	e028      	b.n	8008a70 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2202      	movs	r2, #2
 8008a2a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f022 0201 	bic.w	r2, r2, #1
 8008a3c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008a4a:	ea42 0103 	orr.w	r1, r2, r3
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	689a      	ldr	r2, [r3, #8]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	430a      	orrs	r2, r1
 8008a58:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	e000      	b.n	8008a70 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
  }
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e042      	b.n	8008b14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d106      	bne.n	8008aa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7f8 fb4b 	bl	800113c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2224      	movs	r2, #36	@ 0x24
 8008aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f022 0201 	bic.w	r2, r2, #1
 8008abc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f9d6 	bl	8008e78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f825 	bl	8008b1c <UART_SetConfig>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d101      	bne.n	8008adc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e01b      	b.n	8008b14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685a      	ldr	r2, [r3, #4]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689a      	ldr	r2, [r3, #8]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f042 0201 	orr.w	r2, r2, #1
 8008b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fa55 	bl	8008fbc <UART_CheckIdleState>
 8008b12:	4603      	mov	r3, r0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b20:	b094      	sub	sp, #80	@ 0x50
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	4b83      	ldr	r3, [pc, #524]	@ (8008d40 <UART_SetConfig+0x224>)
 8008b32:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b36:	689a      	ldr	r2, [r3, #8]
 8008b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	431a      	orrs	r2, r3
 8008b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	497c      	ldr	r1, [pc, #496]	@ (8008d44 <UART_SetConfig+0x228>)
 8008b54:	4019      	ands	r1, r3
 8008b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b5c:	430b      	orrs	r3, r1
 8008b5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6c:	68d9      	ldr	r1, [r3, #12]
 8008b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	ea40 0301 	orr.w	r3, r0, r1
 8008b76:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	4b6f      	ldr	r3, [pc, #444]	@ (8008d40 <UART_SetConfig+0x224>)
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d009      	beq.n	8008b9c <UART_SetConfig+0x80>
 8008b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	4b6e      	ldr	r3, [pc, #440]	@ (8008d48 <UART_SetConfig+0x22c>)
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d004      	beq.n	8008b9c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b94:	6a1a      	ldr	r2, [r3, #32]
 8008b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008ba6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bb0:	430b      	orrs	r3, r1
 8008bb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bba:	f023 000f 	bic.w	r0, r3, #15
 8008bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	ea40 0301 	orr.w	r3, r0, r1
 8008bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	4b5e      	ldr	r3, [pc, #376]	@ (8008d4c <UART_SetConfig+0x230>)
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d102      	bne.n	8008bdc <UART_SetConfig+0xc0>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bda:	e032      	b.n	8008c42 <UART_SetConfig+0x126>
 8008bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	4b5b      	ldr	r3, [pc, #364]	@ (8008d50 <UART_SetConfig+0x234>)
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d102      	bne.n	8008bec <UART_SetConfig+0xd0>
 8008be6:	2302      	movs	r3, #2
 8008be8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bea:	e02a      	b.n	8008c42 <UART_SetConfig+0x126>
 8008bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	4b58      	ldr	r3, [pc, #352]	@ (8008d54 <UART_SetConfig+0x238>)
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d102      	bne.n	8008bfc <UART_SetConfig+0xe0>
 8008bf6:	2304      	movs	r3, #4
 8008bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bfa:	e022      	b.n	8008c42 <UART_SetConfig+0x126>
 8008bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	4b55      	ldr	r3, [pc, #340]	@ (8008d58 <UART_SetConfig+0x23c>)
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d102      	bne.n	8008c0c <UART_SetConfig+0xf0>
 8008c06:	2308      	movs	r3, #8
 8008c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c0a:	e01a      	b.n	8008c42 <UART_SetConfig+0x126>
 8008c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	4b52      	ldr	r3, [pc, #328]	@ (8008d5c <UART_SetConfig+0x240>)
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d102      	bne.n	8008c1c <UART_SetConfig+0x100>
 8008c16:	2310      	movs	r3, #16
 8008c18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c1a:	e012      	b.n	8008c42 <UART_SetConfig+0x126>
 8008c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	4b4f      	ldr	r3, [pc, #316]	@ (8008d60 <UART_SetConfig+0x244>)
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d103      	bne.n	8008c2e <UART_SetConfig+0x112>
 8008c26:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8008c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c2c:	e009      	b.n	8008c42 <UART_SetConfig+0x126>
 8008c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	4b43      	ldr	r3, [pc, #268]	@ (8008d40 <UART_SetConfig+0x224>)
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d102      	bne.n	8008c3e <UART_SetConfig+0x122>
 8008c38:	2320      	movs	r3, #32
 8008c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c3c:	e001      	b.n	8008c42 <UART_SetConfig+0x126>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	4b3e      	ldr	r3, [pc, #248]	@ (8008d40 <UART_SetConfig+0x224>)
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d005      	beq.n	8008c58 <UART_SetConfig+0x13c>
 8008c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	4b3d      	ldr	r3, [pc, #244]	@ (8008d48 <UART_SetConfig+0x22c>)
 8008c52:	429a      	cmp	r2, r3
 8008c54:	f040 8088 	bne.w	8008d68 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008c58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	623b      	str	r3, [r7, #32]
 8008c5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008c60:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c64:	f7fd fde2 	bl	800682c <HAL_RCCEx_GetPeriphCLKFreq>
 8008c68:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 80eb 	beq.w	8008e48 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c76:	4a3b      	ldr	r2, [pc, #236]	@ (8008d64 <UART_SetConfig+0x248>)
 8008c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c80:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c84:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c88:	685a      	ldr	r2, [r3, #4]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	005b      	lsls	r3, r3, #1
 8008c8e:	4413      	add	r3, r2
 8008c90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d305      	bcc.n	8008ca2 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d903      	bls.n	8008caa <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008ca8:	e048      	b.n	8008d3c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cac:	2200      	movs	r2, #0
 8008cae:	61bb      	str	r3, [r7, #24]
 8008cb0:	61fa      	str	r2, [r7, #28]
 8008cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb6:	4a2b      	ldr	r2, [pc, #172]	@ (8008d64 <UART_SetConfig+0x248>)
 8008cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	613b      	str	r3, [r7, #16]
 8008cc2:	617a      	str	r2, [r7, #20]
 8008cc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008cc8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ccc:	f7f7 fae0 	bl	8000290 <__aeabi_uldivmod>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	f04f 0200 	mov.w	r2, #0
 8008cdc:	f04f 0300 	mov.w	r3, #0
 8008ce0:	020b      	lsls	r3, r1, #8
 8008ce2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ce6:	0202      	lsls	r2, r0, #8
 8008ce8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cea:	6849      	ldr	r1, [r1, #4]
 8008cec:	0849      	lsrs	r1, r1, #1
 8008cee:	2000      	movs	r0, #0
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	4605      	mov	r5, r0
 8008cf4:	eb12 0804 	adds.w	r8, r2, r4
 8008cf8:	eb43 0905 	adc.w	r9, r3, r5
 8008cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	60bb      	str	r3, [r7, #8]
 8008d04:	60fa      	str	r2, [r7, #12]
 8008d06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d0a:	4640      	mov	r0, r8
 8008d0c:	4649      	mov	r1, r9
 8008d0e:	f7f7 fabf 	bl	8000290 <__aeabi_uldivmod>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	4613      	mov	r3, r2
 8008d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d20:	d308      	bcc.n	8008d34 <UART_SetConfig+0x218>
 8008d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d28:	d204      	bcs.n	8008d34 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8008d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008d30:	60da      	str	r2, [r3, #12]
 8008d32:	e003      	b.n	8008d3c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008d3a:	e085      	b.n	8008e48 <UART_SetConfig+0x32c>
 8008d3c:	e084      	b.n	8008e48 <UART_SetConfig+0x32c>
 8008d3e:	bf00      	nop
 8008d40:	46002400 	.word	0x46002400
 8008d44:	cfff69f3 	.word	0xcfff69f3
 8008d48:	56002400 	.word	0x56002400
 8008d4c:	40013800 	.word	0x40013800
 8008d50:	40004400 	.word	0x40004400
 8008d54:	40004800 	.word	0x40004800
 8008d58:	40004c00 	.word	0x40004c00
 8008d5c:	40005000 	.word	0x40005000
 8008d60:	40006400 	.word	0x40006400
 8008d64:	0800e784 	.word	0x0800e784
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d6a:	69db      	ldr	r3, [r3, #28]
 8008d6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d70:	d13c      	bne.n	8008dec <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d74:	2200      	movs	r2, #0
 8008d76:	603b      	str	r3, [r7, #0]
 8008d78:	607a      	str	r2, [r7, #4]
 8008d7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d7e:	f7fd fd55 	bl	800682c <HAL_RCCEx_GetPeriphCLKFreq>
 8008d82:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d05e      	beq.n	8008e48 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d8e:	4a39      	ldr	r2, [pc, #228]	@ (8008e74 <UART_SetConfig+0x358>)
 8008d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d94:	461a      	mov	r2, r3
 8008d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d9c:	005a      	lsls	r2, r3, #1
 8008d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	085b      	lsrs	r3, r3, #1
 8008da4:	441a      	add	r2, r3
 8008da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008db2:	2b0f      	cmp	r3, #15
 8008db4:	d916      	bls.n	8008de4 <UART_SetConfig+0x2c8>
 8008db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dbc:	d212      	bcs.n	8008de4 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	f023 030f 	bic.w	r3, r3, #15
 8008dc6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dca:	085b      	lsrs	r3, r3, #1
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	f003 0307 	and.w	r3, r3, #7
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008de0:	60da      	str	r2, [r3, #12]
 8008de2:	e031      	b.n	8008e48 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008dea:	e02d      	b.n	8008e48 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008dec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dee:	2200      	movs	r2, #0
 8008df0:	469a      	mov	sl, r3
 8008df2:	4693      	mov	fp, r2
 8008df4:	4650      	mov	r0, sl
 8008df6:	4659      	mov	r1, fp
 8008df8:	f7fd fd18 	bl	800682c <HAL_RCCEx_GetPeriphCLKFreq>
 8008dfc:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008dfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d021      	beq.n	8008e48 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e08:	4a1a      	ldr	r2, [pc, #104]	@ (8008e74 <UART_SetConfig+0x358>)
 8008e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e12:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	085b      	lsrs	r3, r3, #1
 8008e1c:	441a      	add	r2, r3
 8008e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e2a:	2b0f      	cmp	r3, #15
 8008e2c:	d909      	bls.n	8008e42 <UART_SetConfig+0x326>
 8008e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e34:	d205      	bcs.n	8008e42 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	60da      	str	r2, [r3, #12]
 8008e40:	e002      	b.n	8008e48 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e52:	2201      	movs	r2, #1
 8008e54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e60:	2200      	movs	r2, #0
 8008e62:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008e64:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3750      	adds	r7, #80	@ 0x50
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e72:	bf00      	nop
 8008e74:	0800e784 	.word	0x0800e784

08008e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e84:	f003 0308 	and.w	r3, r3, #8
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00a      	beq.n	8008ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00a      	beq.n	8008ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	430a      	orrs	r2, r1
 8008ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec8:	f003 0302 	and.w	r3, r3, #2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00a      	beq.n	8008ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	430a      	orrs	r2, r1
 8008ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eea:	f003 0304 	and.w	r3, r3, #4
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00a      	beq.n	8008f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	430a      	orrs	r2, r1
 8008f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f0c:	f003 0310 	and.w	r3, r3, #16
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00a      	beq.n	8008f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	430a      	orrs	r2, r1
 8008f28:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f2e:	f003 0320 	and.w	r3, r3, #32
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00a      	beq.n	8008f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d01a      	beq.n	8008f8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f76:	d10a      	bne.n	8008f8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	430a      	orrs	r2, r1
 8008f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00a      	beq.n	8008fb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	430a      	orrs	r2, r1
 8008fae:	605a      	str	r2, [r3, #4]
  }
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b098      	sub	sp, #96	@ 0x60
 8008fc0:	af02      	add	r7, sp, #8
 8008fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fcc:	f7f8 fb6e 	bl	80016ac <HAL_GetTick>
 8008fd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0308 	and.w	r3, r3, #8
 8008fdc:	2b08      	cmp	r3, #8
 8008fde:	d12f      	bne.n	8009040 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fe0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f88e 	bl	8009110 <UART_WaitOnFlagUntilTimeout>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d022      	beq.n	8009040 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800900a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800900e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	461a      	mov	r2, r3
 8009016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009018:	647b      	str	r3, [r7, #68]	@ 0x44
 800901a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800901e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e6      	bne.n	8008ffa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2220      	movs	r2, #32
 8009030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e063      	b.n	8009108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0304 	and.w	r3, r3, #4
 800904a:	2b04      	cmp	r3, #4
 800904c:	d149      	bne.n	80090e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800904e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009056:	2200      	movs	r2, #0
 8009058:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f857 	bl	8009110 <UART_WaitOnFlagUntilTimeout>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d03c      	beq.n	80090e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	623b      	str	r3, [r7, #32]
   return(result);
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800907c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009086:	633b      	str	r3, [r7, #48]	@ 0x30
 8009088:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800908c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e6      	bne.n	8009068 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3308      	adds	r3, #8
 80090a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	e853 3f00 	ldrex	r3, [r3]
 80090a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f023 0301 	bic.w	r3, r3, #1
 80090b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3308      	adds	r3, #8
 80090b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090ba:	61fa      	str	r2, [r7, #28]
 80090bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090be:	69b9      	ldr	r1, [r7, #24]
 80090c0:	69fa      	ldr	r2, [r7, #28]
 80090c2:	e841 2300 	strex	r3, r2, [r1]
 80090c6:	617b      	str	r3, [r7, #20]
   return(result);
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1e5      	bne.n	800909a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2220      	movs	r2, #32
 80090d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e012      	b.n	8009108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2220      	movs	r2, #32
 80090e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3758      	adds	r7, #88	@ 0x58
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	603b      	str	r3, [r7, #0]
 800911c:	4613      	mov	r3, r2
 800911e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009120:	e04f      	b.n	80091c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009128:	d04b      	beq.n	80091c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800912a:	f7f8 fabf 	bl	80016ac <HAL_GetTick>
 800912e:	4602      	mov	r2, r0
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	69ba      	ldr	r2, [r7, #24]
 8009136:	429a      	cmp	r2, r3
 8009138:	d302      	bcc.n	8009140 <UART_WaitOnFlagUntilTimeout+0x30>
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009140:	2303      	movs	r3, #3
 8009142:	e04e      	b.n	80091e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0304 	and.w	r3, r3, #4
 800914e:	2b00      	cmp	r3, #0
 8009150:	d037      	beq.n	80091c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2b80      	cmp	r3, #128	@ 0x80
 8009156:	d034      	beq.n	80091c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2b40      	cmp	r3, #64	@ 0x40
 800915c:	d031      	beq.n	80091c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	f003 0308 	and.w	r3, r3, #8
 8009168:	2b08      	cmp	r3, #8
 800916a:	d110      	bne.n	800918e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2208      	movs	r2, #8
 8009172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 f838 	bl	80091ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2208      	movs	r2, #8
 800917e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e029      	b.n	80091e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800919c:	d111      	bne.n	80091c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80091a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f000 f81e 	bl	80091ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2220      	movs	r2, #32
 80091b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e00f      	b.n	80091e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	69da      	ldr	r2, [r3, #28]
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	4013      	ands	r3, r2
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	bf0c      	ite	eq
 80091d2:	2301      	moveq	r3, #1
 80091d4:	2300      	movne	r3, #0
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	461a      	mov	r2, r3
 80091da:	79fb      	ldrb	r3, [r7, #7]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d0a0      	beq.n	8009122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b095      	sub	sp, #84	@ 0x54
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091fa:	e853 3f00 	ldrex	r3, [r3]
 80091fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009202:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	461a      	mov	r2, r3
 800920e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009210:	643b      	str	r3, [r7, #64]	@ 0x40
 8009212:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009214:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009216:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009218:	e841 2300 	strex	r3, r2, [r1]
 800921c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800921e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1e6      	bne.n	80091f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	3308      	adds	r3, #8
 800922a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922c:	6a3b      	ldr	r3, [r7, #32]
 800922e:	e853 3f00 	ldrex	r3, [r3]
 8009232:	61fb      	str	r3, [r7, #28]
   return(result);
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800923a:	f023 0301 	bic.w	r3, r3, #1
 800923e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3308      	adds	r3, #8
 8009246:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009248:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800924a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800924e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009250:	e841 2300 	strex	r3, r2, [r1]
 8009254:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1e3      	bne.n	8009224 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009260:	2b01      	cmp	r3, #1
 8009262:	d118      	bne.n	8009296 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	e853 3f00 	ldrex	r3, [r3]
 8009270:	60bb      	str	r3, [r7, #8]
   return(result);
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	f023 0310 	bic.w	r3, r3, #16
 8009278:	647b      	str	r3, [r7, #68]	@ 0x44
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009282:	61bb      	str	r3, [r7, #24]
 8009284:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009286:	6979      	ldr	r1, [r7, #20]
 8009288:	69ba      	ldr	r2, [r7, #24]
 800928a:	e841 2300 	strex	r3, r2, [r1]
 800928e:	613b      	str	r3, [r7, #16]
   return(result);
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1e6      	bne.n	8009264 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2220      	movs	r2, #32
 800929a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80092aa:	bf00      	nop
 80092ac:	3754      	adds	r7, #84	@ 0x54
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b085      	sub	sp, #20
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d101      	bne.n	80092cc <HAL_UARTEx_DisableFifoMode+0x16>
 80092c8:	2302      	movs	r3, #2
 80092ca:	e027      	b.n	800931c <HAL_UARTEx_DisableFifoMode+0x66>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2224      	movs	r2, #36	@ 0x24
 80092d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f022 0201 	bic.w	r2, r2, #1
 80092f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80092fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2220      	movs	r2, #32
 800930e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009338:	2b01      	cmp	r3, #1
 800933a:	d101      	bne.n	8009340 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800933c:	2302      	movs	r3, #2
 800933e:	e02d      	b.n	800939c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2224      	movs	r2, #36	@ 0x24
 800934c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f022 0201 	bic.w	r2, r2, #1
 8009366:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	430a      	orrs	r2, r1
 800937a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f84f 	bl	8009420 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2220      	movs	r2, #32
 800938e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d101      	bne.n	80093bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093b8:	2302      	movs	r3, #2
 80093ba:	e02d      	b.n	8009418 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2224      	movs	r2, #36	@ 0x24
 80093c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f022 0201 	bic.w	r2, r2, #1
 80093e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	430a      	orrs	r2, r1
 80093f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f811 	bl	8009420 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2220      	movs	r2, #32
 800940a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800942c:	2b00      	cmp	r3, #0
 800942e:	d108      	bne.n	8009442 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009440:	e031      	b.n	80094a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009442:	2308      	movs	r3, #8
 8009444:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009446:	2308      	movs	r3, #8
 8009448:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	0e5b      	lsrs	r3, r3, #25
 8009452:	b2db      	uxtb	r3, r3
 8009454:	f003 0307 	and.w	r3, r3, #7
 8009458:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	0f5b      	lsrs	r3, r3, #29
 8009462:	b2db      	uxtb	r3, r3
 8009464:	f003 0307 	and.w	r3, r3, #7
 8009468:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800946a:	7bbb      	ldrb	r3, [r7, #14]
 800946c:	7b3a      	ldrb	r2, [r7, #12]
 800946e:	4911      	ldr	r1, [pc, #68]	@ (80094b4 <UARTEx_SetNbDataToProcess+0x94>)
 8009470:	5c8a      	ldrb	r2, [r1, r2]
 8009472:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009476:	7b3a      	ldrb	r2, [r7, #12]
 8009478:	490f      	ldr	r1, [pc, #60]	@ (80094b8 <UARTEx_SetNbDataToProcess+0x98>)
 800947a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800947c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009480:	b29a      	uxth	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	7b7a      	ldrb	r2, [r7, #13]
 800948c:	4909      	ldr	r1, [pc, #36]	@ (80094b4 <UARTEx_SetNbDataToProcess+0x94>)
 800948e:	5c8a      	ldrb	r2, [r1, r2]
 8009490:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009494:	7b7a      	ldrb	r2, [r7, #13]
 8009496:	4908      	ldr	r1, [pc, #32]	@ (80094b8 <UARTEx_SetNbDataToProcess+0x98>)
 8009498:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800949a:	fb93 f3f2 	sdiv	r3, r3, r2
 800949e:	b29a      	uxth	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80094a6:	bf00      	nop
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	0800e79c 	.word	0x0800e79c
 80094b8:	0800e7a4 	.word	0x0800e7a4

080094bc <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
    /* Initialize WiFi GPIO pins */
    GPIO_InitTypeDef GPIO_InitStruct;

    /* Configure GPIO pins : PA1 PA2 PA0 - we are using ST GPIO definitions for winc1500 */
    GPIO_InitStruct.Pin   = CONF_WINC_PIN_RESET;
 80094c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80094c6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80094c8:	2301      	movs	r3, #1
 80094ca:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;    // GPIO_PULLDOWN;
 80094cc:	2300      	movs	r3, #0
 80094ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80094d0:	2300      	movs	r3, #0
 80094d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = 0;
 80094d4:	2300      	movs	r3, #0
 80094d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CONF_WINC_PORT_RESET, &GPIO_InitStruct);
 80094d8:	1d3b      	adds	r3, r7, #4
 80094da:	4619      	mov	r1, r3
 80094dc:	481d      	ldr	r0, [pc, #116]	@ (8009554 <init_chip_pins+0x98>)
 80094de:	f7f9 ff77 	bl	80033d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_CHIP_ENABLE;
 80094e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80094e6:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(CONF_WINC_PORT_CHIP_ENABLE, &GPIO_InitStruct);
 80094e8:	1d3b      	adds	r3, r7, #4
 80094ea:	4619      	mov	r1, r3
 80094ec:	481a      	ldr	r0, [pc, #104]	@ (8009558 <init_chip_pins+0x9c>)
 80094ee:	f7f9 ff6f 	bl	80033d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_WAKE;
 80094f2:	2340      	movs	r3, #64	@ 0x40
 80094f4:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CONF_WINC_PORT_WAKE, &GPIO_InitStruct);
 80094f6:	1d3b      	adds	r3, r7, #4
 80094f8:	4619      	mov	r1, r3
 80094fa:	4818      	ldr	r0, [pc, #96]	@ (800955c <init_chip_pins+0xa0>)
 80094fc:	f7f9 ff68 	bl	80033d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_POWER_ENABLE;
 8009500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009504:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CONF_WINC_PORT_POWER_ENABLE, &GPIO_InitStruct);
 8009506:	1d3b      	adds	r3, r7, #4
 8009508:	4619      	mov	r1, r3
 800950a:	4815      	ldr	r0, [pc, #84]	@ (8009560 <init_chip_pins+0xa4>)
 800950c:	f7f9 ff60 	bl	80033d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE;
 8009510:	2340      	movs	r3, #64	@ 0x40
 8009512:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE, &GPIO_InitStruct);
 8009514:	1d3b      	adds	r3, r7, #4
 8009516:	4619      	mov	r1, r3
 8009518:	480f      	ldr	r0, [pc, #60]	@ (8009558 <init_chip_pins+0x9c>)
 800951a:	f7f9 ff59 	bl	80033d0 <HAL_GPIO_Init>

    /* Set INIT value */
    HAL_GPIO_WritePin(CONF_WINC_PORT_POWER_ENABLE,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_RESET);
 800951e:	2200      	movs	r2, #0
 8009520:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009524:	480e      	ldr	r0, [pc, #56]	@ (8009560 <init_chip_pins+0xa4>)
 8009526:	f7fa f92b 	bl	8003780 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_SET);
 800952a:	2201      	movs	r2, #1
 800952c:	2140      	movs	r1, #64	@ 0x40
 800952e:	480a      	ldr	r0, [pc, #40]	@ (8009558 <init_chip_pins+0x9c>)
 8009530:	f7fa f926 	bl	8003780 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_CHIP_ENABLE,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_RESET);
 8009534:	2200      	movs	r2, #0
 8009536:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800953a:	4807      	ldr	r0, [pc, #28]	@ (8009558 <init_chip_pins+0x9c>)
 800953c:	f7fa f920 	bl	8003780 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_RESET,CONF_WINC_PIN_RESET,GPIO_PIN_RESET);
 8009540:	2200      	movs	r2, #0
 8009542:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009546:	4803      	ldr	r0, [pc, #12]	@ (8009554 <init_chip_pins+0x98>)
 8009548:	f7fa f91a 	bl	8003780 <HAL_GPIO_WritePin>

}
 800954c:	bf00      	nop
 800954e:	3718      	adds	r7, #24
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	42020c00 	.word	0x42020c00
 8009558:	42020400 	.word	0x42020400
 800955c:	42020800 	.word	0x42020800
 8009560:	42020000 	.word	0x42020000

08009564 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	af00      	add	r7, sp, #0
	/* Initialize chip IOs. */
	init_chip_pins();
 8009568:	f7ff ffa8 	bl	80094bc <init_chip_pins>

	/* Perform chip reset. */
	nm_bsp_reset();
 800956c:	f000 f804 	bl	8009578 <nm_bsp_reset>

	return M2M_SUCCESS;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	bd80      	pop	{r7, pc}
	...

08009578 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	af00      	add	r7, sp, #0
    /* Set Power sequence of GPIO lines */
    /* -------------------------------- */

    /* Power enable (3.3V) - 3V3_DC2DC_EN output */
    HAL_GPIO_WritePin(CONF_WINC_PORT_POWER_ENABLE,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_SET);
 800957c:	2201      	movs	r2, #1
 800957e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009582:	4811      	ldr	r0, [pc, #68]	@ (80095c8 <nm_bsp_reset+0x50>)
 8009584:	f7fa f8fc 	bl	8003780 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8009588:	2064      	movs	r0, #100	@ 0x64
 800958a:	f7f8 f89b 	bl	80016c4 <HAL_Delay>

    /* Level Shifter Translate enable - LEVEL_TRNSLT_EN output */
    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_RESET);
 800958e:	2200      	movs	r2, #0
 8009590:	2140      	movs	r1, #64	@ 0x40
 8009592:	480e      	ldr	r0, [pc, #56]	@ (80095cc <nm_bsp_reset+0x54>)
 8009594:	f7fa f8f4 	bl	8003780 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8009598:	2064      	movs	r0, #100	@ 0x64
 800959a:	f7f8 f893 	bl	80016c4 <HAL_Delay>

    /* Set CHIP enable */
	HAL_GPIO_WritePin(CONF_WINC_PORT_CHIP_ENABLE,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
 800959e:	2201      	movs	r2, #1
 80095a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80095a4:	4809      	ldr	r0, [pc, #36]	@ (80095cc <nm_bsp_reset+0x54>)
 80095a6:	f7fa f8eb 	bl	8003780 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80095aa:	2064      	movs	r0, #100	@ 0x64
 80095ac:	f7f8 f88a 	bl	80016c4 <HAL_Delay>

    /* Set RSTN 1.8V */
    HAL_GPIO_WritePin(CONF_WINC_PORT_RESET,CONF_WINC_PIN_RESET,GPIO_PIN_SET);
 80095b0:	2201      	movs	r2, #1
 80095b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80095b6:	4806      	ldr	r0, [pc, #24]	@ (80095d0 <nm_bsp_reset+0x58>)
 80095b8:	f7fa f8e2 	bl	8003780 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80095bc:	2064      	movs	r0, #100	@ 0x64
 80095be:	f7f8 f881 	bl	80016c4 <HAL_Delay>

}
 80095c2:	bf00      	nop
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	42020000 	.word	0x42020000
 80095cc:	42020400 	.word	0x42020400
 80095d0:	42020c00 	.word	0x42020c00

080095d4 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
    /* use FreeRTOS delay */
    HAL_Delay(u32TimeMsec);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7f8 f871 	bl	80016c4 <HAL_Delay>
}
 80095e2:	bf00      	nop
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
	...

080095ec <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b088      	sub	sp, #32
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    /* EXTI2 init ISR function - called from nm_bsp_register_isr() */

     __GPIOC_CLK_ENABLE();
 80095f4:	4b13      	ldr	r3, [pc, #76]	@ (8009644 <nm_bsp_register_isr+0x58>)
 80095f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095fa:	4a12      	ldr	r2, [pc, #72]	@ (8009644 <nm_bsp_register_isr+0x58>)
 80095fc:	f043 0304 	orr.w	r3, r3, #4
 8009600:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009604:	4b0f      	ldr	r3, [pc, #60]	@ (8009644 <nm_bsp_register_isr+0x58>)
 8009606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800960a:	f003 0304 	and.w	r3, r3, #4
 800960e:	60bb      	str	r3, [r7, #8]
 8009610:	68bb      	ldr	r3, [r7, #8]
	 //__GPIOA_CLK_ENABLE();

    /*Configure GPIO pin : PA2 */
    GPIO_InitStruct.Pin   = CONF_WINC_SPI_INT_PIN;
 8009612:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009616:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8009618:	4b0b      	ldr	r3, [pc, #44]	@ (8009648 <nm_bsp_register_isr+0x5c>)
 800961a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CONF_WINC_SPI_INT_PORT, &GPIO_InitStruct);
 8009620:	f107 030c 	add.w	r3, r7, #12
 8009624:	4619      	mov	r1, r3
 8009626:	4809      	ldr	r0, [pc, #36]	@ (800964c <nm_bsp_register_isr+0x60>)
 8009628:	f7f9 fed2 	bl	80033d0 <HAL_GPIO_Init>

    /* EXTI 2 (PA2) interrupt init*/
    HAL_NVIC_SetPriority(CONF_WINC_EXTI_IRQN, 0x00, 0);
 800962c:	2200      	movs	r2, #0
 800962e:	2100      	movs	r1, #0
 8009630:	2017      	movs	r0, #23
 8009632:	f7f9 fd27 	bl	8003084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CONF_WINC_EXTI_IRQN);
 8009636:	2017      	movs	r0, #23
 8009638:	f7f9 fd3e 	bl	80030b8 <HAL_NVIC_EnableIRQ>
	/* Enable and set EXTI line 15_10 Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
#endif

}
 800963c:	bf00      	nop
 800963e:	3720      	adds	r7, #32
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	46020c00 	.word	0x46020c00
 8009648:	10210000 	.word	0x10210000
 800964c:	42020c00 	.word	0x42020c00

08009650 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	71fb      	strb	r3, [r7, #7]
    if (1 == u8Enable)
 800965a:	79fb      	ldrb	r3, [r7, #7]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d108      	bne.n	8009672 <nm_bsp_interrupt_ctrl+0x22>
    {
        HAL_NVIC_SetPriority((IRQn_Type)(CONF_WINC_EXTI_IRQN), 0x01, 0);
 8009660:	2200      	movs	r2, #0
 8009662:	2101      	movs	r1, #1
 8009664:	2017      	movs	r0, #23
 8009666:	f7f9 fd0d 	bl	8003084 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 800966a:	2017      	movs	r0, #23
 800966c:	f7f9 fd24 	bl	80030b8 <HAL_NVIC_EnableIRQ>
    }
    else
    {
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
    }
}
 8009670:	e002      	b.n	8009678 <nm_bsp_interrupt_ctrl+0x28>
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 8009672:	2017      	movs	r0, #23
 8009674:	f7f9 fd2e 	bl	80030d4 <HAL_NVIC_DisableIRQ>
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <spi_select_slave>:
*	@fn		spi_select_slave
*	@brief	Select slave chip select: true - select, false - deselect
*	@return	None
*/
static void spi_select_slave(const uint8_t select)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	4603      	mov	r3, r0
 8009688:	71fb      	strb	r3, [r7, #7]
    if (select)
 800968a:	79fb      	ldrb	r3, [r7, #7]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d006      	beq.n	800969e <spi_select_slave+0x1e>
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_RESET);
 8009690:	2200      	movs	r2, #0
 8009692:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009696:	4807      	ldr	r0, [pc, #28]	@ (80096b4 <spi_select_slave+0x34>)
 8009698:	f7fa f872 	bl	8003780 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
    }
}
 800969c:	e005      	b.n	80096aa <spi_select_slave+0x2a>
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 800969e:	2201      	movs	r2, #1
 80096a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80096a4:	4803      	ldr	r0, [pc, #12]	@ (80096b4 <spi_select_slave+0x34>)
 80096a6:	f7fa f86b 	bl	8003780 <HAL_GPIO_WritePin>
}
 80096aa:	bf00      	nop
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	42020c00 	.word	0x42020c00

080096b8 <nm_spi_rw>:
	return M2M_SUCCESS;
}
#else

sint8 nm_spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af02      	add	r7, sp, #8
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	4613      	mov	r3, r2
 80096c4:	80fb      	strh	r3, [r7, #6]
   HAL_StatusTypeDef status;

    /* Start SPI transaction - polling method */
  	spi_select_slave(true);
 80096c6:	2001      	movs	r0, #1
 80096c8:	f7ff ffda 	bl	8009680 <spi_select_slave>


    /* Transmit/Recieve */
    if (pu8Mosi == NULL)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10b      	bne.n	80096ea <nm_spi_rw+0x32>
	{
		status = HAL_SPI_TransmitReceive(&hspiWifi,spiDummyBuf,pu8Miso,u16Sz,1000);
 80096d2:	88fb      	ldrh	r3, [r7, #6]
 80096d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80096d8:	9200      	str	r2, [sp, #0]
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	4921      	ldr	r1, [pc, #132]	@ (8009764 <nm_spi_rw+0xac>)
 80096de:	4822      	ldr	r0, [pc, #136]	@ (8009768 <nm_spi_rw+0xb0>)
 80096e0:	f7fe fe48 	bl	8008374 <HAL_SPI_TransmitReceive>
 80096e4:	4603      	mov	r3, r0
 80096e6:	75fb      	strb	r3, [r7, #23]
 80096e8:	e01f      	b.n	800972a <nm_spi_rw+0x72>
    }
    else if(pu8Miso == NULL)
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d111      	bne.n	8009714 <nm_spi_rw+0x5c>
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,spiDummyBuf,u16Sz,1000);
 80096f0:	88fb      	ldrh	r3, [r7, #6]
 80096f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80096f6:	9200      	str	r2, [sp, #0]
 80096f8:	4a1a      	ldr	r2, [pc, #104]	@ (8009764 <nm_spi_rw+0xac>)
 80096fa:	68f9      	ldr	r1, [r7, #12]
 80096fc:	481a      	ldr	r0, [pc, #104]	@ (8009768 <nm_spi_rw+0xb0>)
 80096fe:	f7fe fe39 	bl	8008374 <HAL_SPI_TransmitReceive>
 8009702:	4603      	mov	r3, r0
 8009704:	75fb      	strb	r3, [r7, #23]
        memset(spiDummyBuf,0, u16Sz);
 8009706:	88fb      	ldrh	r3, [r7, #6]
 8009708:	461a      	mov	r2, r3
 800970a:	2100      	movs	r1, #0
 800970c:	4815      	ldr	r0, [pc, #84]	@ (8009764 <nm_spi_rw+0xac>)
 800970e:	f003 fb2b 	bl	800cd68 <memset>
 8009712:	e00a      	b.n	800972a <nm_spi_rw+0x72>
    }
    else
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,pu8Miso,u16Sz,1000);
 8009714:	88fb      	ldrh	r3, [r7, #6]
 8009716:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800971a:	9200      	str	r2, [sp, #0]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	68f9      	ldr	r1, [r7, #12]
 8009720:	4811      	ldr	r0, [pc, #68]	@ (8009768 <nm_spi_rw+0xb0>)
 8009722:	f7fe fe27 	bl	8008374 <HAL_SPI_TransmitReceive>
 8009726:	4603      	mov	r3, r0
 8009728:	75fb      	strb	r3, [r7, #23]
    }

    /* Handle Transmit/Recieve error */
    if (status != HAL_OK)
 800972a:	7dfb      	ldrb	r3, [r7, #23]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d010      	beq.n	8009752 <nm_spi_rw+0x9a>
    {
        M2M_ERR("%s: HAL_SPI_TransmitReceive failed. error (%d)\n",__FUNCTION__,status);
 8009730:	22b2      	movs	r2, #178	@ 0xb2
 8009732:	490e      	ldr	r1, [pc, #56]	@ (800976c <nm_spi_rw+0xb4>)
 8009734:	480e      	ldr	r0, [pc, #56]	@ (8009770 <nm_spi_rw+0xb8>)
 8009736:	f003 f9c7 	bl	800cac8 <iprintf>
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	461a      	mov	r2, r3
 800973e:	490b      	ldr	r1, [pc, #44]	@ (800976c <nm_spi_rw+0xb4>)
 8009740:	480c      	ldr	r0, [pc, #48]	@ (8009774 <nm_spi_rw+0xbc>)
 8009742:	f003 f9c1 	bl	800cac8 <iprintf>
 8009746:	200d      	movs	r0, #13
 8009748:	f003 f9d0 	bl	800caec <putchar>
        return status;
 800974c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009750:	e003      	b.n	800975a <nm_spi_rw+0xa2>
    }

  	spi_select_slave(false);
 8009752:	2000      	movs	r0, #0
 8009754:	f7ff ff94 	bl	8009680 <spi_select_slave>

	return M2M_SUCCESS;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	200004d4 	.word	0x200004d4
 8009768:	20000444 	.word	0x20000444
 800976c:	0800e7ac 	.word	0x0800e7ac
 8009770:	0800d890 	.word	0x0800d890
 8009774:	0800d8a4 	.word	0x0800d8a4

08009778 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
 8009780:	2300      	movs	r3, #0
 8009782:	73fb      	strb	r3, [r7, #15]

	 /* WiFi SPI init function - called from nm_bus_init() */

	hspiWifi.Instance			   = SPI_WIFI;
 8009784:	4b20      	ldr	r3, [pc, #128]	@ (8009808 <nm_bus_init+0x90>)
 8009786:	4a21      	ldr	r2, [pc, #132]	@ (800980c <nm_bus_init+0x94>)
 8009788:	601a      	str	r2, [r3, #0]
	hspiWifi.Init.Mode			   = SPI_MODE_MASTER;
 800978a:	4b1f      	ldr	r3, [pc, #124]	@ (8009808 <nm_bus_init+0x90>)
 800978c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8009790:	605a      	str	r2, [r3, #4]
	hspiWifi.Init.Direction 	   = SPI_DIRECTION_2LINES;
 8009792:	4b1d      	ldr	r3, [pc, #116]	@ (8009808 <nm_bus_init+0x90>)
 8009794:	2200      	movs	r2, #0
 8009796:	609a      	str	r2, [r3, #8]
	hspiWifi.Init.DataSize		   = SPI_DATASIZE_8BIT;
 8009798:	4b1b      	ldr	r3, [pc, #108]	@ (8009808 <nm_bus_init+0x90>)
 800979a:	2207      	movs	r2, #7
 800979c:	60da      	str	r2, [r3, #12]
	hspiWifi.Init.CLKPolarity	   = SPI_POLARITY_LOW;
 800979e:	4b1a      	ldr	r3, [pc, #104]	@ (8009808 <nm_bus_init+0x90>)
 80097a0:	2200      	movs	r2, #0
 80097a2:	611a      	str	r2, [r3, #16]
	hspiWifi.Init.CLKPhase		   = SPI_PHASE_1EDGE;
 80097a4:	4b18      	ldr	r3, [pc, #96]	@ (8009808 <nm_bus_init+0x90>)
 80097a6:	2200      	movs	r2, #0
 80097a8:	615a      	str	r2, [r3, #20]
	hspiWifi.Init.NSS			   = SPI_NSS_SOFT;
 80097aa:	4b17      	ldr	r3, [pc, #92]	@ (8009808 <nm_bus_init+0x90>)
 80097ac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80097b0:	619a      	str	r2, [r3, #24]
	hspiWifi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80097b2:	4b15      	ldr	r3, [pc, #84]	@ (8009808 <nm_bus_init+0x90>)
 80097b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80097b8:	61da      	str	r2, [r3, #28]
	hspiWifi.Init.FirstBit		   = SPI_FIRSTBIT_MSB;
 80097ba:	4b13      	ldr	r3, [pc, #76]	@ (8009808 <nm_bus_init+0x90>)
 80097bc:	2200      	movs	r2, #0
 80097be:	621a      	str	r2, [r3, #32]
	hspiWifi.Init.TIMode		   = SPI_TIMODE_DISABLE;
 80097c0:	4b11      	ldr	r3, [pc, #68]	@ (8009808 <nm_bus_init+0x90>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	625a      	str	r2, [r3, #36]	@ 0x24
	hspiWifi.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 80097c6:	4b10      	ldr	r3, [pc, #64]	@ (8009808 <nm_bus_init+0x90>)
 80097c8:	2200      	movs	r2, #0
 80097ca:	629a      	str	r2, [r3, #40]	@ 0x28
	hspiWifi.Init.CRCPolynomial    = 10;
 80097cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009808 <nm_bus_init+0x90>)
 80097ce:	220a      	movs	r2, #10
 80097d0:	62da      	str	r2, [r3, #44]	@ 0x2c
//	  hspiWifi.Init.CRCLength		 = SPI_CRC_LENGTH_DATASIZE;
//	  hspiWifi.Init.NSSPMode		 = SPI_NSS_PULSE_DISABLE;
	if (HAL_SPI_Init(&hspiWifi) != HAL_OK)
 80097d2:	480d      	ldr	r0, [pc, #52]	@ (8009808 <nm_bus_init+0x90>)
 80097d4:	f7fe fcb8 	bl	8008148 <HAL_SPI_Init>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00a      	beq.n	80097f4 <nm_bus_init+0x7c>
	{
		M2M_ERR("SPI bus Initialization error\r\n");
 80097de:	22f6      	movs	r2, #246	@ 0xf6
 80097e0:	490b      	ldr	r1, [pc, #44]	@ (8009810 <nm_bus_init+0x98>)
 80097e2:	480c      	ldr	r0, [pc, #48]	@ (8009814 <nm_bus_init+0x9c>)
 80097e4:	f003 f970 	bl	800cac8 <iprintf>
 80097e8:	480b      	ldr	r0, [pc, #44]	@ (8009818 <nm_bus_init+0xa0>)
 80097ea:	f003 f9dd 	bl	800cba8 <puts>
 80097ee:	200d      	movs	r0, #13
 80097f0:	f003 f97c 	bl	800caec <putchar>
	}

	HAL_SPI_MspInit(&hspiWifi);
 80097f4:	4804      	ldr	r0, [pc, #16]	@ (8009808 <nm_bus_init+0x90>)
 80097f6:	f7f7 fc37 	bl	8001068 <HAL_SPI_MspInit>
	return result;
 80097fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	20000444 	.word	0x20000444
 800980c:	40013000 	.word	0x40013000
 8009810:	0800e7b8 	.word	0x0800e7b8
 8009814:	0800d890 	.word	0x0800d890
 8009818:	0800d8d4 	.word	0x0800d8d4

0800981c <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
 800981c:	b480      	push	{r7}
 800981e:	af00      	add	r7, sp, #0
	return M2M_SUCCESS;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8 *pDst, uint8 *pSrc, uint32 sz)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
    if(sz == 0) return;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d010      	beq.n	8009860 <m2m_memcpy+0x34>
    do
    {
        *pDst = *pSrc;
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	781a      	ldrb	r2, [r3, #0]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	701a      	strb	r2, [r3, #0]
        pDst++;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3301      	adds	r3, #1
 800984a:	60fb      	str	r3, [r7, #12]
        pSrc++;
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	3301      	adds	r3, #1
 8009850:	60bb      	str	r3, [r7, #8]
    } while(--sz);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	3b01      	subs	r3, #1
 8009856:	607b      	str	r3, [r7, #4]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1ef      	bne.n	800983e <m2m_memcpy+0x12>
 800985e:	e000      	b.n	8009862 <m2m_memcpy+0x36>
    if(sz == 0) return;
 8009860:	bf00      	nop
}
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <m2m_memset>:

    return cs;
}

void m2m_memset(uint8 *pBuf, uint8 val, uint32 sz)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	460b      	mov	r3, r1
 8009876:	607a      	str	r2, [r7, #4]
 8009878:	72fb      	strb	r3, [r7, #11]
    if(sz == 0) return;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00c      	beq.n	800989a <m2m_memset+0x2e>
    do
    {
        *pBuf = val;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	7afa      	ldrb	r2, [r7, #11]
 8009884:	701a      	strb	r2, [r3, #0]
        pBuf++;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3301      	adds	r3, #1
 800988a:	60fb      	str	r3, [r7, #12]
    } while(--sz);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	3b01      	subs	r3, #1
 8009890:	607b      	str	r3, [r7, #4]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1f3      	bne.n	8009880 <m2m_memset+0x14>
 8009898:	e000      	b.n	800989c <m2m_memset+0x30>
    if(sz == 0) return;
 800989a:	bf00      	nop
}
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <m2m_strlen>:

uint16 m2m_strlen(uint8 *pcStr)
{
 80098a6:	b480      	push	{r7}
 80098a8:	b085      	sub	sp, #20
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
    uint16  u16StrLen = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	81fb      	strh	r3, [r7, #14]
    while(*pcStr)
 80098b2:	e005      	b.n	80098c0 <m2m_strlen+0x1a>
    {
        u16StrLen ++;
 80098b4:	89fb      	ldrh	r3, [r7, #14]
 80098b6:	3301      	adds	r3, #1
 80098b8:	81fb      	strh	r3, [r7, #14]
        pcStr++;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	3301      	adds	r3, #1
 80098be:	607b      	str	r3, [r7, #4]
    while(*pcStr)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1f5      	bne.n	80098b4 <m2m_strlen+0xe>
    }
    return u16StrLen;
 80098c8:	89fb      	ldrh	r3, [r7, #14]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
	...

080098d8 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
 80098d8:	b480      	push	{r7}
 80098da:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
 80098dc:	4b05      	ldr	r3, [pc, #20]	@ (80098f4 <isr+0x1c>)
 80098de:	78db      	ldrb	r3, [r3, #3]
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	3301      	adds	r3, #1
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	4b03      	ldr	r3, [pc, #12]	@ (80098f4 <isr+0x1c>)
 80098e8:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
 80098ea:	bf00      	nop
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr
 80098f4:	20000600 	.word	0x20000600

080098f8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 80098fe:	2300      	movs	r3, #0
 8009900:	71fb      	strb	r3, [r7, #7]

	gstrHifCxt.u8HifRXDone = 0;
 8009902:	4b14      	ldr	r3, [pc, #80]	@ (8009954 <hif_set_rx_done+0x5c>)
 8009904:	2200      	movs	r2, #0
 8009906:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
 8009908:	2001      	movs	r0, #1
 800990a:	f7ff fea1 	bl	8009650 <nm_bsp_interrupt_ctrl>
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
 800990e:	463b      	mov	r3, r7
 8009910:	4619      	mov	r1, r3
 8009912:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009916:	f001 fca7 	bl	800b268 <nm_read_reg_with_ret>
 800991a:	4603      	mov	r3, r0
 800991c:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800991e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10f      	bne.n	8009946 <hif_set_rx_done+0x4e>
	/* Set RX Done */
	reg |= NBIT1;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	f043 0302 	orr.w	r3, r3, #2
 800992c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	4619      	mov	r1, r3
 8009932:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009936:	f001 fca5 	bl	800b284 <nm_write_reg>
 800993a:	4603      	mov	r3, r0
 800993c:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800993e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009942:	2b00      	cmp	r3, #0
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
 8009944:	e000      	b.n	8009948 <hif_set_rx_done+0x50>
	if(ret != M2M_SUCCESS)goto ERR1;
 8009946:	bf00      	nop
	return ret;
 8009948:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	20000600 	.word	0x20000600

08009958 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	4603      	mov	r3, r0
 8009960:	603a      	str	r2, [r7, #0]
 8009962:	71fb      	strb	r3, [r7, #7]
 8009964:	460b      	mov	r3, r1
 8009966:	80bb      	strh	r3, [r7, #4]


}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800997a:	2300      	movs	r3, #0
 800997c:	71fb      	strb	r3, [r7, #7]
	if(gstrHifCxt.u8HifRXDone)
 800997e:	4b14      	ldr	r3, [pc, #80]	@ (80099d0 <hif_chip_wake+0x5c>)
 8009980:	789b      	ldrb	r3, [r3, #2]
 8009982:	b2db      	uxtb	r3, r3
 8009984:	2b00      	cmp	r3, #0
 8009986:	d002      	beq.n	800998e <hif_chip_wake+0x1a>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
 8009988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800998c:	e01c      	b.n	80099c8 <hif_chip_wake+0x54>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
 800998e:	4b10      	ldr	r3, [pc, #64]	@ (80099d0 <hif_chip_wake+0x5c>)
 8009990:	785b      	ldrb	r3, [r3, #1]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10c      	bne.n	80099b2 <hif_chip_wake+0x3e>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 8009998:	4b0d      	ldr	r3, [pc, #52]	@ (80099d0 <hif_chip_wake+0x5c>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	b2db      	uxtb	r3, r3
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d007      	beq.n	80099b2 <hif_chip_wake+0x3e>
		{
			ret = chip_wake();
 80099a2:	f001 fa57 	bl	800ae54 <chip_wake>
 80099a6:	4603      	mov	r3, r0
 80099a8:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 80099aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d107      	bne.n	80099c2 <hif_chip_wake+0x4e>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
 80099b2:	4b07      	ldr	r3, [pc, #28]	@ (80099d0 <hif_chip_wake+0x5c>)
 80099b4:	785b      	ldrb	r3, [r3, #1]
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	3301      	adds	r3, #1
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	4b04      	ldr	r3, [pc, #16]	@ (80099d0 <hif_chip_wake+0x5c>)
 80099be:	705a      	strb	r2, [r3, #1]
 80099c0:	e000      	b.n	80099c4 <hif_chip_wake+0x50>
			if(ret != M2M_SUCCESS)goto ERR1;
 80099c2:	bf00      	nop
ERR1:
	return ret;
 80099c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	20000600 	.word	0x20000600

080099d4 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
 80099d4:	b480      	push	{r7}
 80099d6:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
 80099d8:	4b08      	ldr	r3, [pc, #32]	@ (80099fc <hif_chip_sleep_sc+0x28>)
 80099da:	785b      	ldrb	r3, [r3, #1]
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d006      	beq.n	80099f0 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
 80099e2:	4b06      	ldr	r3, [pc, #24]	@ (80099fc <hif_chip_sleep_sc+0x28>)
 80099e4:	785b      	ldrb	r3, [r3, #1]
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	3b01      	subs	r3, #1
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	4b03      	ldr	r3, [pc, #12]	@ (80099fc <hif_chip_sleep_sc+0x28>)
 80099ee:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	20000600 	.word	0x20000600

08009a00 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 8009a06:	2300      	movs	r3, #0
 8009a08:	71fb      	strb	r3, [r7, #7]

	if(gstrHifCxt.u8ChipSleep >= 1)
 8009a0a:	4b12      	ldr	r3, [pc, #72]	@ (8009a54 <hif_chip_sleep+0x54>)
 8009a0c:	785b      	ldrb	r3, [r3, #1]
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d006      	beq.n	8009a22 <hif_chip_sleep+0x22>
	{
		gstrHifCxt.u8ChipSleep--;
 8009a14:	4b0f      	ldr	r3, [pc, #60]	@ (8009a54 <hif_chip_sleep+0x54>)
 8009a16:	785b      	ldrb	r3, [r3, #1]
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	b2da      	uxtb	r2, r3
 8009a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a54 <hif_chip_sleep+0x54>)
 8009a20:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
 8009a22:	4b0c      	ldr	r3, [pc, #48]	@ (8009a54 <hif_chip_sleep+0x54>)
 8009a24:	785b      	ldrb	r3, [r3, #1]
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d10c      	bne.n	8009a46 <hif_chip_sleep+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 8009a2c:	4b09      	ldr	r3, [pc, #36]	@ (8009a54 <hif_chip_sleep+0x54>)
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d007      	beq.n	8009a46 <hif_chip_sleep+0x46>
		{
			ret = chip_sleep();
 8009a36:	f001 f9a9 	bl	800ad8c <chip_sleep>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 8009a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	e000      	b.n	8009a48 <hif_chip_sleep+0x48>
		}
		else
		{
		}
	}
ERR1:
 8009a46:	bf00      	nop
	return ret;
 8009a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	20000600 	.word	0x20000600

08009a58 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
 8009a60:	222c      	movs	r2, #44	@ 0x2c
 8009a62:	2100      	movs	r1, #0
 8009a64:	4807      	ldr	r0, [pc, #28]	@ (8009a84 <hif_init+0x2c>)
 8009a66:	f7ff ff01 	bl	800986c <m2m_memset>
	nm_bsp_register_isr(isr);
 8009a6a:	4807      	ldr	r0, [pc, #28]	@ (8009a88 <hif_init+0x30>)
 8009a6c:	f7ff fdbe 	bl	80095ec <nm_bsp_register_isr>
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
 8009a70:	4906      	ldr	r1, [pc, #24]	@ (8009a8c <hif_init+0x34>)
 8009a72:	2003      	movs	r0, #3
 8009a74:	f000 fc46 	bl	800a304 <hif_register_cb>
	return M2M_SUCCESS;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	20000600 	.word	0x20000600
 8009a88:	080098d9 	.word	0x080098d9
 8009a8c:	08009959 	.word	0x08009959

08009a90 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b088      	sub	sp, #32
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	603a      	str	r2, [r7, #0]
 8009a98:	461a      	mov	r2, r3
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	71fb      	strb	r3, [r7, #7]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	71bb      	strb	r3, [r7, #6]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	80bb      	strh	r3, [r7, #4]
	sint8		ret = M2M_ERR_SEND;
 8009aa6:	23ff      	movs	r3, #255	@ 0xff
 8009aa8:	77fb      	strb	r3, [r7, #31]
	tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
 8009aaa:	79bb      	ldrb	r3, [r7, #6]
 8009aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	767b      	strb	r3, [r7, #25]
	strHif.u8Gid		= u8Gid;
 8009ab4:	79fb      	ldrb	r3, [r7, #7]
 8009ab6:	763b      	strb	r3, [r7, #24]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 8009ab8:	2308      	movs	r3, #8
 8009aba:	837b      	strh	r3, [r7, #26]
	if(pu8DataBuf != NULL)
 8009abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d008      	beq.n	8009ad4 <hif_send+0x44>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
 8009ac2:	8b7a      	ldrh	r2, [r7, #26]
 8009ac4:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8009ac6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009ac8:	440b      	add	r3, r1
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	4413      	add	r3, r2
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	837b      	strh	r3, [r7, #26]
 8009ad2:	e004      	b.n	8009ade <hif_send+0x4e>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
 8009ad4:	8b7a      	ldrh	r2, [r7, #26]
 8009ad6:	88bb      	ldrh	r3, [r7, #4]
 8009ad8:	4413      	add	r3, r2
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	837b      	strh	r3, [r7, #26]
	}
    if (strHif.u16Length <= M2M_HIF_MAX_PACKET_SIZE)
 8009ade:	8b7b      	ldrh	r3, [r7, #26]
 8009ae0:	f240 623c 	movw	r2, #1596	@ 0x63c
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	f200 80f3 	bhi.w	8009cd0 <hif_send+0x240>
    {
	ret = hif_chip_wake();
 8009aea:	f7ff ff43 	bl	8009974 <hif_chip_wake>
 8009aee:	4603      	mov	r3, r0
 8009af0:	77fb      	strb	r3, [r7, #31]
	if(ret == M2M_SUCCESS)
 8009af2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f040 80dd 	bne.w	8009cb6 <hif_send+0x226>
	{
		volatile uint32 reg, dma_addr = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
 8009b00:	2300      	movs	r3, #0
 8009b02:	81fb      	strh	r3, [r7, #14]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
 8009b04:	2300      	movs	r3, #0
 8009b06:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
 8009b08:	79fa      	ldrb	r2, [r7, #7]
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
 8009b10:	79bb      	ldrb	r3, [r7, #6]
 8009b12:	021a      	lsls	r2, r3, #8
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
 8009b1a:	8b7b      	ldrh	r3, [r7, #26]
 8009b1c:	041a      	lsls	r2, r3, #16
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	4619      	mov	r1, r3
 8009b28:	f241 008c 	movw	r0, #4236	@ 0x108c
 8009b2c:	f001 fbaa 	bl	800b284 <nm_write_reg>
 8009b30:	4603      	mov	r3, r0
 8009b32:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 8009b34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f040 80e3 	bne.w	8009d04 <hif_send+0x274>

		reg = 0UL;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f043 0302 	orr.w	r3, r3, #2
 8009b48:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	f241 0078 	movw	r0, #4216	@ 0x1078
 8009b52:	f001 fb97 	bl	800b284 <nm_write_reg>
 8009b56:	4603      	mov	r3, r0
 8009b58:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 8009b5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f040 80d2 	bne.w	8009d08 <hif_send+0x278>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
 8009b64:	2300      	movs	r3, #0
 8009b66:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
 8009b68:	2300      	movs	r3, #0
 8009b6a:	81fb      	strh	r3, [r7, #14]
 8009b6c:	e03b      	b.n	8009be6 <hif_send+0x156>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
 8009b6e:	f107 0314 	add.w	r3, r7, #20
 8009b72:	4619      	mov	r1, r3
 8009b74:	f241 0078 	movw	r0, #4216	@ 0x1078
 8009b78:	f001 fb76 	bl	800b268 <nm_read_reg_with_ret>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	77fb      	strb	r3, [r7, #31]
			if(ret != M2M_SUCCESS) break;
 8009b80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d134      	bne.n	8009bf2 <hif_send+0x162>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
 8009b88:	89fb      	ldrh	r3, [r7, #14]
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009b90:	d310      	bcc.n	8009bb4 <hif_send+0x124>
				if(cnt < 501) {
 8009b92:	89fb      	ldrh	r3, [r7, #14]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009b9a:	d808      	bhi.n	8009bae <hif_send+0x11e>
					M2M_INFO("Slowing down...\n");
 8009b9c:	4862      	ldr	r0, [pc, #392]	@ (8009d28 <hif_send+0x298>)
 8009b9e:	f002 ff93 	bl	800cac8 <iprintf>
 8009ba2:	4862      	ldr	r0, [pc, #392]	@ (8009d2c <hif_send+0x29c>)
 8009ba4:	f003 f800 	bl	800cba8 <puts>
 8009ba8:	200d      	movs	r0, #13
 8009baa:	f002 ff9f 	bl	800caec <putchar>
				}
				nm_bsp_sleep(1);
 8009bae:	2001      	movs	r0, #1
 8009bb0:	f7ff fd10 	bl	80095d4 <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	f003 0302 	and.w	r3, r3, #2
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10e      	bne.n	8009bdc <hif_send+0x14c>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
 8009bbe:	f107 0310 	add.w	r3, r7, #16
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	485a      	ldr	r0, [pc, #360]	@ (8009d30 <hif_send+0x2a0>)
 8009bc6:	f001 fb4f 	bl	800b268 <nm_read_reg_with_ret>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	77fb      	strb	r3, [r7, #31]
				if(ret != M2M_SUCCESS) {
 8009bce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00f      	beq.n	8009bf6 <hif_send+0x166>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	613b      	str	r3, [r7, #16]
					goto ERR1;
 8009bda:	e09c      	b.n	8009d16 <hif_send+0x286>
		for(cnt = 0; cnt < 1000; cnt ++)
 8009bdc:	89fb      	ldrh	r3, [r7, #14]
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	3301      	adds	r3, #1
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	81fb      	strh	r3, [r7, #14]
 8009be6:	89fb      	ldrh	r3, [r7, #14]
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009bee:	d3be      	bcc.n	8009b6e <hif_send+0xde>
 8009bf0:	e002      	b.n	8009bf8 <hif_send+0x168>
			if(ret != M2M_SUCCESS) break;
 8009bf2:	bf00      	nop
 8009bf4:	e000      	b.n	8009bf8 <hif_send+0x168>
				}
				/*in case of success break */
				break;
 8009bf6:	bf00      	nop
			}
		}

		if (dma_addr != 0)
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d054      	beq.n	8009ca8 <hif_send+0x218>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 8009c02:	8b7b      	ldrh	r3, [r7, #26]
 8009c04:	837b      	strh	r3, [r7, #26]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	f107 0118 	add.w	r1, r7, #24
 8009c0c:	2208      	movs	r2, #8
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f001 fbb4 	bl	800b37c <nm_write_block>
 8009c14:	4603      	mov	r3, r0
 8009c16:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 8009c18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d175      	bne.n	8009d0c <hif_send+0x27c>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	3308      	adds	r3, #8
 8009c24:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00f      	beq.n	8009c4c <hif_send+0x1bc>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	88ba      	ldrh	r2, [r7, #4]
 8009c30:	6839      	ldr	r1, [r7, #0]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f001 fba2 	bl	800b37c <nm_write_block>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 8009c3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d165      	bne.n	8009d10 <hif_send+0x280>
				u32CurrAddr += u16CtrlBufSize;
 8009c44:	88ba      	ldrh	r2, [r7, #4]
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	4413      	add	r3, r2
 8009c4a:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
 8009c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d016      	beq.n	8009c80 <hif_send+0x1f0>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
 8009c52:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009c54:	88bb      	ldrh	r3, [r7, #4]
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	461a      	mov	r2, r3
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009c64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c66:	4618      	mov	r0, r3
 8009c68:	f001 fb88 	bl	800b37c <nm_write_block>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 8009c70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d14d      	bne.n	8009d14 <hif_send+0x284>
				u32CurrAddr += u16DataSize;
 8009c78:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f043 0302 	orr.w	r3, r3, #2
 8009c8c:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	4619      	mov	r1, r3
 8009c92:	f241 006c 	movw	r0, #4204	@ 0x106c
 8009c96:	f001 faf5 	bl	800b284 <nm_write_reg>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 8009c9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d027      	beq.n	8009cf6 <hif_send+0x266>
 8009ca6:	e036      	b.n	8009d16 <hif_send+0x286>
		}
		else
		{
			ret = hif_chip_sleep();
 8009ca8:	f7ff feaa 	bl	8009a00 <hif_chip_sleep>
 8009cac:	4603      	mov	r3, r0
 8009cae:	77fb      	strb	r3, [r7, #31]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
 8009cb0:	23fd      	movs	r3, #253	@ 0xfd
 8009cb2:	77fb      	strb	r3, [r7, #31]
			goto ERR2;
 8009cb4:	e031      	b.n	8009d1a <hif_send+0x28a>
		}
	}
	else
	{
            M2M_ERR("(HIF)Failed to wakeup the chip\n");
 8009cb6:	f44f 72cb 	mov.w	r2, #406	@ 0x196
 8009cba:	491e      	ldr	r1, [pc, #120]	@ (8009d34 <hif_send+0x2a4>)
 8009cbc:	481e      	ldr	r0, [pc, #120]	@ (8009d38 <hif_send+0x2a8>)
 8009cbe:	f002 ff03 	bl	800cac8 <iprintf>
 8009cc2:	481e      	ldr	r0, [pc, #120]	@ (8009d3c <hif_send+0x2ac>)
 8009cc4:	f002 ff70 	bl	800cba8 <puts>
 8009cc8:	200d      	movs	r0, #13
 8009cca:	f002 ff0f 	bl	800caec <putchar>
            goto ERR2;
 8009cce:	e024      	b.n	8009d1a <hif_send+0x28a>
        }
	}
	else
	{
        M2M_ERR("HIF message length (%d) exceeds max length (%d)\n",strHif.u16Length, M2M_HIF_MAX_PACKET_SIZE);
 8009cd0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8009cd4:	4917      	ldr	r1, [pc, #92]	@ (8009d34 <hif_send+0x2a4>)
 8009cd6:	4818      	ldr	r0, [pc, #96]	@ (8009d38 <hif_send+0x2a8>)
 8009cd8:	f002 fef6 	bl	800cac8 <iprintf>
 8009cdc:	8b7b      	ldrh	r3, [r7, #26]
 8009cde:	f240 623c 	movw	r2, #1596	@ 0x63c
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	4816      	ldr	r0, [pc, #88]	@ (8009d40 <hif_send+0x2b0>)
 8009ce6:	f002 feef 	bl	800cac8 <iprintf>
 8009cea:	200d      	movs	r0, #13
 8009cec:	f002 fefe 	bl	800caec <putchar>
        ret = M2M_ERR_SEND;
 8009cf0:	23ff      	movs	r3, #255	@ 0xff
 8009cf2:	77fb      	strb	r3, [r7, #31]
		goto ERR2;
 8009cf4:	e011      	b.n	8009d1a <hif_send+0x28a>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
 8009cf6:	f7ff fe83 	bl	8009a00 <hif_chip_sleep>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	77fb      	strb	r3, [r7, #31]
	return ret;
 8009cfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009d02:	e00c      	b.n	8009d1e <hif_send+0x28e>
		if(M2M_SUCCESS != ret) goto ERR1;
 8009d04:	bf00      	nop
 8009d06:	e006      	b.n	8009d16 <hif_send+0x286>
		if(M2M_SUCCESS != ret) goto ERR1;
 8009d08:	bf00      	nop
 8009d0a:	e004      	b.n	8009d16 <hif_send+0x286>
			if(M2M_SUCCESS != ret) goto ERR1;
 8009d0c:	bf00      	nop
 8009d0e:	e002      	b.n	8009d16 <hif_send+0x286>
				if(M2M_SUCCESS != ret) goto ERR1;
 8009d10:	bf00      	nop
 8009d12:	e000      	b.n	8009d16 <hif_send+0x286>
				if(M2M_SUCCESS != ret) goto ERR1;
 8009d14:	bf00      	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
 8009d16:	f7ff fe5d 	bl	80099d4 <hif_chip_sleep_sc>
ERR2:
	/*logical error*/
	return ret;
 8009d1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3720      	adds	r7, #32
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	0800d908 	.word	0x0800d908
 8009d2c:	0800d914 	.word	0x0800d914
 8009d30:	00150400 	.word	0x00150400
 8009d34:	0800e7c4 	.word	0x0800e7c4
 8009d38:	0800d924 	.word	0x0800d924
 8009d3c:	0800d938 	.word	0x0800d938
 8009d40:	0800d958 	.word	0x0800d958

08009d44 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	73fb      	strb	r3, [r7, #15]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 8009d4e:	f107 0308 	add.w	r3, r7, #8
 8009d52:	4619      	mov	r1, r3
 8009d54:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009d58:	f001 fa86 	bl	800b268 <nm_read_reg_with_ret>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	73fb      	strb	r3, [r7, #15]
	if(M2M_SUCCESS == ret)
 8009d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f040 81b2 	bne.w	800a0ce <hif_isr+0x38a>
	{
		if(reg & 0x1)	/* New interrupt has been received */
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f000 819d 	beq.w	800a0b0 <hif_isr+0x36c>
		{
			uint16 size;

			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	f023 0301 	bic.w	r3, r3, #1
 8009d7c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	4619      	mov	r1, r3
 8009d82:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009d86:	f001 fa7d 	bl	800b284 <nm_write_reg>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	73fb      	strb	r3, [r7, #15]
			if(ret != M2M_SUCCESS)goto ERR1;
 8009d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f040 81a8 	bne.w	800a0e8 <hif_isr+0x3a4>
			gstrHifCxt.u8HifRXDone = 1;
 8009d98:	4ba1      	ldr	r3, [pc, #644]	@ (800a020 <hif_isr+0x2dc>)
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	089b      	lsrs	r3, r3, #2
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009da8:	81bb      	strh	r3, [r7, #12]
			if (size > 0) {
 8009daa:	89bb      	ldrh	r3, [r7, #12]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 8170 	beq.w	800a092 <hif_isr+0x34e>
				uint32 address = 0;
 8009db2:	2300      	movs	r3, #0
 8009db4:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
 8009db6:	463b      	mov	r3, r7
 8009db8:	4619      	mov	r1, r3
 8009dba:	f241 0084 	movw	r0, #4228	@ 0x1084
 8009dbe:	f001 fa53 	bl	800b268 <nm_read_reg_with_ret>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	73fb      	strb	r3, [r7, #15]
				if(M2M_SUCCESS != ret)
 8009dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00c      	beq.n	8009de8 <hif_isr+0xa4>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
 8009dce:	f240 12cd 	movw	r2, #461	@ 0x1cd
 8009dd2:	4994      	ldr	r1, [pc, #592]	@ (800a024 <hif_isr+0x2e0>)
 8009dd4:	4894      	ldr	r0, [pc, #592]	@ (800a028 <hif_isr+0x2e4>)
 8009dd6:	f002 fe77 	bl	800cac8 <iprintf>
 8009dda:	4894      	ldr	r0, [pc, #592]	@ (800a02c <hif_isr+0x2e8>)
 8009ddc:	f002 fee4 	bl	800cba8 <puts>
 8009de0:	200d      	movs	r0, #13
 8009de2:	f002 fe83 	bl	800caec <putchar>
					goto ERR1;
 8009de6:	e180      	b.n	800a0ea <hif_isr+0x3a6>
				}
				gstrHifCxt.u32RxAddr = address;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	4a8d      	ldr	r2, [pc, #564]	@ (800a020 <hif_isr+0x2dc>)
 8009dec:	6093      	str	r3, [r2, #8]
				gstrHifCxt.u32RxSize = size;
 8009dee:	89bb      	ldrh	r3, [r7, #12]
 8009df0:	4a8b      	ldr	r2, [pc, #556]	@ (800a020 <hif_isr+0x2dc>)
 8009df2:	60d3      	str	r3, [r2, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	1d39      	adds	r1, r7, #4
 8009df8:	2204      	movs	r2, #4
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f001 fa62 	bl	800b2c4 <nm_read_block>
 8009e00:	4603      	mov	r3, r0
 8009e02:	73fb      	strb	r3, [r7, #15]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
 8009e04:	88fb      	ldrh	r3, [r7, #6]
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	80fb      	strh	r3, [r7, #6]
				if(M2M_SUCCESS != ret)
 8009e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00c      	beq.n	8009e2c <hif_isr+0xe8>
				{
					M2M_ERR("(hif) address bus fail\n");
 8009e12:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8009e16:	4983      	ldr	r1, [pc, #524]	@ (800a024 <hif_isr+0x2e0>)
 8009e18:	4883      	ldr	r0, [pc, #524]	@ (800a028 <hif_isr+0x2e4>)
 8009e1a:	f002 fe55 	bl	800cac8 <iprintf>
 8009e1e:	4884      	ldr	r0, [pc, #528]	@ (800a030 <hif_isr+0x2ec>)
 8009e20:	f002 fec2 	bl	800cba8 <puts>
 8009e24:	200d      	movs	r0, #13
 8009e26:	f002 fe61 	bl	800caec <putchar>
					goto ERR1;
 8009e2a:	e15e      	b.n	800a0ea <hif_isr+0x3a6>
				}
				if(strHif.u16Length != size)
 8009e2c:	88fb      	ldrh	r3, [r7, #6]
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	89ba      	ldrh	r2, [r7, #12]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d01f      	beq.n	8009e76 <hif_isr+0x132>
				{
					if((size - strHif.u16Length) > 4)
 8009e36:	89bb      	ldrh	r3, [r7, #12]
 8009e38:	88fa      	ldrh	r2, [r7, #6]
 8009e3a:	b292      	uxth	r2, r2
 8009e3c:	1a9b      	subs	r3, r3, r2
 8009e3e:	2b04      	cmp	r3, #4
 8009e40:	dd19      	ble.n	8009e76 <hif_isr+0x132>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
 8009e42:	f240 12dd 	movw	r2, #477	@ 0x1dd
 8009e46:	4977      	ldr	r1, [pc, #476]	@ (800a024 <hif_isr+0x2e0>)
 8009e48:	4877      	ldr	r0, [pc, #476]	@ (800a028 <hif_isr+0x2e4>)
 8009e4a:	f002 fe3d 	bl	800cac8 <iprintf>
 8009e4e:	89b9      	ldrh	r1, [r7, #12]
 8009e50:	88fb      	ldrh	r3, [r7, #6]
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	461a      	mov	r2, r3
 8009e56:	793b      	ldrb	r3, [r7, #4]
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	797b      	ldrb	r3, [r7, #5]
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	4603      	mov	r3, r0
 8009e64:	4873      	ldr	r0, [pc, #460]	@ (800a034 <hif_isr+0x2f0>)
 8009e66:	f002 fe2f 	bl	800cac8 <iprintf>
 8009e6a:	200d      	movs	r0, #13
 8009e6c:	f002 fe3e 	bl	800caec <putchar>
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						ret = M2M_ERR_BUS_FAIL;
 8009e70:	23fa      	movs	r3, #250	@ 0xfa
 8009e72:	73fb      	strb	r3, [r7, #15]
						goto ERR1;
 8009e74:	e139      	b.n	800a0ea <hif_isr+0x3a6>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
 8009e76:	793b      	ldrb	r3, [r7, #4]
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d11c      	bne.n	8009eb8 <hif_isr+0x174>
				{
					if(gstrHifCxt.pfWifiCb)
 8009e7e:	4b68      	ldr	r3, [pc, #416]	@ (800a020 <hif_isr+0x2dc>)
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00b      	beq.n	8009e9e <hif_isr+0x15a>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009e86:	4b66      	ldr	r3, [pc, #408]	@ (800a020 <hif_isr+0x2dc>)
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	797a      	ldrb	r2, [r7, #5]
 8009e8c:	b2d0      	uxtb	r0, r2
 8009e8e:	88fa      	ldrh	r2, [r7, #6]
 8009e90:	b292      	uxth	r2, r2
 8009e92:	3a08      	subs	r2, #8
 8009e94:	b291      	uxth	r1, r2
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	3208      	adds	r2, #8
 8009e9a:	4798      	blx	r3
 8009e9c:	e0da      	b.n	800a054 <hif_isr+0x310>
					else
						M2M_ERR("WIFI callback is not registered\n");
 8009e9e:	f240 12e9 	movw	r2, #489	@ 0x1e9
 8009ea2:	4960      	ldr	r1, [pc, #384]	@ (800a024 <hif_isr+0x2e0>)
 8009ea4:	4860      	ldr	r0, [pc, #384]	@ (800a028 <hif_isr+0x2e4>)
 8009ea6:	f002 fe0f 	bl	800cac8 <iprintf>
 8009eaa:	4863      	ldr	r0, [pc, #396]	@ (800a038 <hif_isr+0x2f4>)
 8009eac:	f002 fe7c 	bl	800cba8 <puts>
 8009eb0:	200d      	movs	r0, #13
 8009eb2:	f002 fe1b 	bl	800caec <putchar>
 8009eb6:	e0cd      	b.n	800a054 <hif_isr+0x310>
				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
 8009eb8:	793b      	ldrb	r3, [r7, #4]
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d11c      	bne.n	8009efa <hif_isr+0x1b6>
				{
					if(gstrHifCxt.pfIpCb)
 8009ec0:	4b57      	ldr	r3, [pc, #348]	@ (800a020 <hif_isr+0x2dc>)
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00b      	beq.n	8009ee0 <hif_isr+0x19c>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009ec8:	4b55      	ldr	r3, [pc, #340]	@ (800a020 <hif_isr+0x2dc>)
 8009eca:	695b      	ldr	r3, [r3, #20]
 8009ecc:	797a      	ldrb	r2, [r7, #5]
 8009ece:	b2d0      	uxtb	r0, r2
 8009ed0:	88fa      	ldrh	r2, [r7, #6]
 8009ed2:	b292      	uxth	r2, r2
 8009ed4:	3a08      	subs	r2, #8
 8009ed6:	b291      	uxth	r1, r2
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	3208      	adds	r2, #8
 8009edc:	4798      	blx	r3
 8009ede:	e0b9      	b.n	800a054 <hif_isr+0x310>
					else
						M2M_ERR("Socket callback is not registered\n");
 8009ee0:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 8009ee4:	494f      	ldr	r1, [pc, #316]	@ (800a024 <hif_isr+0x2e0>)
 8009ee6:	4850      	ldr	r0, [pc, #320]	@ (800a028 <hif_isr+0x2e4>)
 8009ee8:	f002 fdee 	bl	800cac8 <iprintf>
 8009eec:	4853      	ldr	r0, [pc, #332]	@ (800a03c <hif_isr+0x2f8>)
 8009eee:	f002 fe5b 	bl	800cba8 <puts>
 8009ef2:	200d      	movs	r0, #13
 8009ef4:	f002 fdfa 	bl	800caec <putchar>
 8009ef8:	e0ac      	b.n	800a054 <hif_isr+0x310>
				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
 8009efa:	793b      	ldrb	r3, [r7, #4]
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	2b04      	cmp	r3, #4
 8009f00:	d11c      	bne.n	8009f3c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfOtaCb)
 8009f02:	4b47      	ldr	r3, [pc, #284]	@ (800a020 <hif_isr+0x2dc>)
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00b      	beq.n	8009f22 <hif_isr+0x1de>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009f0a:	4b45      	ldr	r3, [pc, #276]	@ (800a020 <hif_isr+0x2dc>)
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	797a      	ldrb	r2, [r7, #5]
 8009f10:	b2d0      	uxtb	r0, r2
 8009f12:	88fa      	ldrh	r2, [r7, #6]
 8009f14:	b292      	uxth	r2, r2
 8009f16:	3a08      	subs	r2, #8
 8009f18:	b291      	uxth	r1, r2
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	3208      	adds	r2, #8
 8009f1e:	4798      	blx	r3
 8009f20:	e098      	b.n	800a054 <hif_isr+0x310>
					else
						M2M_ERR("Ota callback is not registered\n");
 8009f22:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8009f26:	493f      	ldr	r1, [pc, #252]	@ (800a024 <hif_isr+0x2e0>)
 8009f28:	483f      	ldr	r0, [pc, #252]	@ (800a028 <hif_isr+0x2e4>)
 8009f2a:	f002 fdcd 	bl	800cac8 <iprintf>
 8009f2e:	4844      	ldr	r0, [pc, #272]	@ (800a040 <hif_isr+0x2fc>)
 8009f30:	f002 fe3a 	bl	800cba8 <puts>
 8009f34:	200d      	movs	r0, #13
 8009f36:	f002 fdd9 	bl	800caec <putchar>
 8009f3a:	e08b      	b.n	800a054 <hif_isr+0x310>
				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
 8009f3c:	793b      	ldrb	r3, [r7, #4]
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b06      	cmp	r3, #6
 8009f42:	d11c      	bne.n	8009f7e <hif_isr+0x23a>
				{
					if(gstrHifCxt.pfCryptoCb)
 8009f44:	4b36      	ldr	r3, [pc, #216]	@ (800a020 <hif_isr+0x2dc>)
 8009f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00b      	beq.n	8009f64 <hif_isr+0x220>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009f4c:	4b34      	ldr	r3, [pc, #208]	@ (800a020 <hif_isr+0x2dc>)
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f50:	797a      	ldrb	r2, [r7, #5]
 8009f52:	b2d0      	uxtb	r0, r2
 8009f54:	88fa      	ldrh	r2, [r7, #6]
 8009f56:	b292      	uxth	r2, r2
 8009f58:	3a08      	subs	r2, #8
 8009f5a:	b291      	uxth	r1, r2
 8009f5c:	683a      	ldr	r2, [r7, #0]
 8009f5e:	3208      	adds	r2, #8
 8009f60:	4798      	blx	r3
 8009f62:	e077      	b.n	800a054 <hif_isr+0x310>
					else
						M2M_ERR("Crypto callback is not registered\n");
 8009f64:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 8009f68:	492e      	ldr	r1, [pc, #184]	@ (800a024 <hif_isr+0x2e0>)
 8009f6a:	482f      	ldr	r0, [pc, #188]	@ (800a028 <hif_isr+0x2e4>)
 8009f6c:	f002 fdac 	bl	800cac8 <iprintf>
 8009f70:	4834      	ldr	r0, [pc, #208]	@ (800a044 <hif_isr+0x300>)
 8009f72:	f002 fe19 	bl	800cba8 <puts>
 8009f76:	200d      	movs	r0, #13
 8009f78:	f002 fdb8 	bl	800caec <putchar>
 8009f7c:	e06a      	b.n	800a054 <hif_isr+0x310>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
 8009f7e:	793b      	ldrb	r3, [r7, #4]
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b07      	cmp	r3, #7
 8009f84:	d11c      	bne.n	8009fc0 <hif_isr+0x27c>
				{
					if(gstrHifCxt.pfSigmaCb)
 8009f86:	4b26      	ldr	r3, [pc, #152]	@ (800a020 <hif_isr+0x2dc>)
 8009f88:	69db      	ldr	r3, [r3, #28]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00b      	beq.n	8009fa6 <hif_isr+0x262>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009f8e:	4b24      	ldr	r3, [pc, #144]	@ (800a020 <hif_isr+0x2dc>)
 8009f90:	69db      	ldr	r3, [r3, #28]
 8009f92:	797a      	ldrb	r2, [r7, #5]
 8009f94:	b2d0      	uxtb	r0, r2
 8009f96:	88fa      	ldrh	r2, [r7, #6]
 8009f98:	b292      	uxth	r2, r2
 8009f9a:	3a08      	subs	r2, #8
 8009f9c:	b291      	uxth	r1, r2
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	3208      	adds	r2, #8
 8009fa2:	4798      	blx	r3
 8009fa4:	e056      	b.n	800a054 <hif_isr+0x310>
					else
						M2M_ERR("Sigma callback is not registered\n");
 8009fa6:	f240 2205 	movw	r2, #517	@ 0x205
 8009faa:	491e      	ldr	r1, [pc, #120]	@ (800a024 <hif_isr+0x2e0>)
 8009fac:	481e      	ldr	r0, [pc, #120]	@ (800a028 <hif_isr+0x2e4>)
 8009fae:	f002 fd8b 	bl	800cac8 <iprintf>
 8009fb2:	4825      	ldr	r0, [pc, #148]	@ (800a048 <hif_isr+0x304>)
 8009fb4:	f002 fdf8 	bl	800cba8 <puts>
 8009fb8:	200d      	movs	r0, #13
 8009fba:	f002 fd97 	bl	800caec <putchar>
 8009fbe:	e049      	b.n	800a054 <hif_isr+0x310>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
 8009fc0:	793b      	ldrb	r3, [r7, #4]
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	2b05      	cmp	r3, #5
 8009fc6:	d11c      	bne.n	800a002 <hif_isr+0x2be>
				{
				    if(gstrHifCxt.pfSslCb)
 8009fc8:	4b15      	ldr	r3, [pc, #84]	@ (800a020 <hif_isr+0x2dc>)
 8009fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00b      	beq.n	8009fe8 <hif_isr+0x2a4>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009fd0:	4b13      	ldr	r3, [pc, #76]	@ (800a020 <hif_isr+0x2dc>)
 8009fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd4:	797a      	ldrb	r2, [r7, #5]
 8009fd6:	b2d0      	uxtb	r0, r2
 8009fd8:	88fa      	ldrh	r2, [r7, #6]
 8009fda:	b292      	uxth	r2, r2
 8009fdc:	3a08      	subs	r2, #8
 8009fde:	b291      	uxth	r1, r2
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	3208      	adds	r2, #8
 8009fe4:	4798      	blx	r3
 8009fe6:	e035      	b.n	800a054 <hif_isr+0x310>
                    else
                        M2M_ERR("SSL callback is not registered\n");
 8009fe8:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8009fec:	490d      	ldr	r1, [pc, #52]	@ (800a024 <hif_isr+0x2e0>)
 8009fee:	480e      	ldr	r0, [pc, #56]	@ (800a028 <hif_isr+0x2e4>)
 8009ff0:	f002 fd6a 	bl	800cac8 <iprintf>
 8009ff4:	4815      	ldr	r0, [pc, #84]	@ (800a04c <hif_isr+0x308>)
 8009ff6:	f002 fdd7 	bl	800cba8 <puts>
 8009ffa:	200d      	movs	r0, #13
 8009ffc:	f002 fd76 	bl	800caec <putchar>
 800a000:	e028      	b.n	800a054 <hif_isr+0x310>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
 800a002:	f44f 7204 	mov.w	r2, #528	@ 0x210
 800a006:	4907      	ldr	r1, [pc, #28]	@ (800a024 <hif_isr+0x2e0>)
 800a008:	4807      	ldr	r0, [pc, #28]	@ (800a028 <hif_isr+0x2e4>)
 800a00a:	f002 fd5d 	bl	800cac8 <iprintf>
 800a00e:	4810      	ldr	r0, [pc, #64]	@ (800a050 <hif_isr+0x30c>)
 800a010:	f002 fdca 	bl	800cba8 <puts>
 800a014:	200d      	movs	r0, #13
 800a016:	f002 fd69 	bl	800caec <putchar>
					ret = M2M_ERR_BUS_FAIL;
 800a01a:	23fa      	movs	r3, #250	@ 0xfa
 800a01c:	73fb      	strb	r3, [r7, #15]
					goto ERR1;
 800a01e:	e064      	b.n	800a0ea <hif_isr+0x3a6>
 800a020:	20000600 	.word	0x20000600
 800a024:	0800e7d0 	.word	0x0800e7d0
 800a028:	0800d924 	.word	0x0800d924
 800a02c:	0800d98c 	.word	0x0800d98c
 800a030:	0800d9b0 	.word	0x0800d9b0
 800a034:	0800d9c8 	.word	0x0800d9c8
 800a038:	0800da08 	.word	0x0800da08
 800a03c:	0800da28 	.word	0x0800da28
 800a040:	0800da4c 	.word	0x0800da4c
 800a044:	0800da6c 	.word	0x0800da6c
 800a048:	0800da90 	.word	0x0800da90
 800a04c:	0800dab4 	.word	0x0800dab4
 800a050:	0800dad4 	.word	0x0800dad4
				}
				if(gstrHifCxt.u8HifRXDone)
 800a054:	4b28      	ldr	r3, [pc, #160]	@ (800a0f8 <hif_isr+0x3b4>)
 800a056:	789b      	ldrb	r3, [r3, #2]
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d045      	beq.n	800a0ea <hif_isr+0x3a6>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
 800a05e:	f240 2216 	movw	r2, #534	@ 0x216
 800a062:	4926      	ldr	r1, [pc, #152]	@ (800a0fc <hif_isr+0x3b8>)
 800a064:	4826      	ldr	r0, [pc, #152]	@ (800a100 <hif_isr+0x3bc>)
 800a066:	f002 fd2f 	bl	800cac8 <iprintf>
 800a06a:	793b      	ldrb	r3, [r7, #4]
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	4619      	mov	r1, r3
 800a070:	797b      	ldrb	r3, [r7, #5]
 800a072:	b2db      	uxtb	r3, r3
 800a074:	461a      	mov	r2, r3
 800a076:	4823      	ldr	r0, [pc, #140]	@ (800a104 <hif_isr+0x3c0>)
 800a078:	f002 fd26 	bl	800cac8 <iprintf>
 800a07c:	200d      	movs	r0, #13
 800a07e:	f002 fd35 	bl	800caec <putchar>
					ret = hif_set_rx_done();
 800a082:	f7ff fc39 	bl	80098f8 <hif_set_rx_done>
 800a086:	4603      	mov	r3, r0
 800a088:	73fb      	strb	r3, [r7, #15]
					if(ret != M2M_SUCCESS) goto ERR1;
 800a08a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	e02b      	b.n	800a0ea <hif_isr+0x3a6>
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
 800a092:	f240 221d 	movw	r2, #541	@ 0x21d
 800a096:	4919      	ldr	r1, [pc, #100]	@ (800a0fc <hif_isr+0x3b8>)
 800a098:	4819      	ldr	r0, [pc, #100]	@ (800a100 <hif_isr+0x3bc>)
 800a09a:	f002 fd15 	bl	800cac8 <iprintf>
 800a09e:	481a      	ldr	r0, [pc, #104]	@ (800a108 <hif_isr+0x3c4>)
 800a0a0:	f002 fd82 	bl	800cba8 <puts>
 800a0a4:	200d      	movs	r0, #13
 800a0a6:	f002 fd21 	bl	800caec <putchar>
				ret = M2M_ERR_RCV;
 800a0aa:	23fe      	movs	r3, #254	@ 0xfe
 800a0ac:	73fb      	strb	r3, [r7, #15]
				goto ERR1;
 800a0ae:	e01c      	b.n	800a0ea <hif_isr+0x3a6>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
 800a0b0:	f240 2225 	movw	r2, #549	@ 0x225
 800a0b4:	4911      	ldr	r1, [pc, #68]	@ (800a0fc <hif_isr+0x3b8>)
 800a0b6:	4812      	ldr	r0, [pc, #72]	@ (800a100 <hif_isr+0x3bc>)
 800a0b8:	f002 fd06 	bl	800cac8 <iprintf>
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4812      	ldr	r0, [pc, #72]	@ (800a10c <hif_isr+0x3c8>)
 800a0c2:	f002 fd01 	bl	800cac8 <iprintf>
 800a0c6:	200d      	movs	r0, #13
 800a0c8:	f002 fd10 	bl	800caec <putchar>
			goto ERR1;
 800a0cc:	e00d      	b.n	800a0ea <hif_isr+0x3a6>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Failed to Read interrupt reg\n");
 800a0ce:	f240 222d 	movw	r2, #557	@ 0x22d
 800a0d2:	490a      	ldr	r1, [pc, #40]	@ (800a0fc <hif_isr+0x3b8>)
 800a0d4:	480a      	ldr	r0, [pc, #40]	@ (800a100 <hif_isr+0x3bc>)
 800a0d6:	f002 fcf7 	bl	800cac8 <iprintf>
 800a0da:	480d      	ldr	r0, [pc, #52]	@ (800a110 <hif_isr+0x3cc>)
 800a0dc:	f002 fd64 	bl	800cba8 <puts>
 800a0e0:	200d      	movs	r0, #13
 800a0e2:	f002 fd03 	bl	800caec <putchar>
		goto ERR1;
 800a0e6:	e000      	b.n	800a0ea <hif_isr+0x3a6>
			if(ret != M2M_SUCCESS)goto ERR1;
 800a0e8:	bf00      	nop
	}

ERR1:
	return ret;
 800a0ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	20000600 	.word	0x20000600
 800a0fc:	0800e7d0 	.word	0x0800e7d0
 800a100:	0800d924 	.word	0x0800d924
 800a104:	0800daec 	.word	0x0800daec
 800a108:	0800db18 	.word	0x0800db18
 800a10c:	0800db2c 	.word	0x0800db2c
 800a110:	0800db48 	.word	0x0800db48

0800a114 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
 800a11a:	2300      	movs	r3, #0
 800a11c:	71fb      	strb	r3, [r7, #7]
	
	gstrHifCxt.u8Yield = 0;
 800a11e:	4b29      	ldr	r3, [pc, #164]	@ (800a1c4 <hif_handle_isr+0xb0>)
 800a120:	2200      	movs	r2, #0
 800a122:	711a      	strb	r2, [r3, #4]
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
 800a124:	e03e      	b.n	800a1a4 <hif_handle_isr+0x90>
         * during which the ISR could fire again.
         * If LEVEL interrupt is used instead of EDGE then the atomicity isn't needed since the interrupt
         * is turned off in the ISR and back on again only after the interrupt has been serviced in hif_isr(). */

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(0);
 800a126:	2000      	movs	r0, #0
 800a128:	f7ff fa92 	bl	8009650 <nm_bsp_interrupt_ctrl>
#endif

		gstrHifCxt.u8Interrupt--;
 800a12c:	4b25      	ldr	r3, [pc, #148]	@ (800a1c4 <hif_handle_isr+0xb0>)
 800a12e:	78db      	ldrb	r3, [r3, #3]
 800a130:	b2db      	uxtb	r3, r3
 800a132:	3b01      	subs	r3, #1
 800a134:	b2da      	uxtb	r2, r3
 800a136:	4b23      	ldr	r3, [pc, #140]	@ (800a1c4 <hif_handle_isr+0xb0>)
 800a138:	70da      	strb	r2, [r3, #3]

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(1);
 800a13a:	2001      	movs	r0, #1
 800a13c:	f7ff fa88 	bl	8009650 <nm_bsp_interrupt_ctrl>
#endif

		uint8 retries = 5;
 800a140:	2305      	movs	r3, #5
 800a142:	71bb      	strb	r3, [r7, #6]
		while(1)
		{
			ret = hif_isr();
 800a144:	f7ff fdfe 	bl	8009d44 <hif_isr>
 800a148:	4603      	mov	r3, r0
 800a14a:	71fb      	strb	r3, [r7, #7]
			if(ret == M2M_SUCCESS) {
 800a14c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d026      	beq.n	800a1a2 <hif_handle_isr+0x8e>
				/*we will try forever until we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				retries--;
 800a154:	79bb      	ldrb	r3, [r7, #6]
 800a156:	3b01      	subs	r3, #1
 800a158:	71bb      	strb	r3, [r7, #6]
				if(!retries)
 800a15a:	79bb      	ldrb	r3, [r7, #6]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10f      	bne.n	800a180 <hif_handle_isr+0x6c>
				{
					M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
 800a160:	f240 2267 	movw	r2, #615	@ 0x267
 800a164:	4918      	ldr	r1, [pc, #96]	@ (800a1c8 <hif_handle_isr+0xb4>)
 800a166:	4819      	ldr	r0, [pc, #100]	@ (800a1cc <hif_handle_isr+0xb8>)
 800a168:	f002 fcae 	bl	800cac8 <iprintf>
 800a16c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a170:	4619      	mov	r1, r3
 800a172:	4817      	ldr	r0, [pc, #92]	@ (800a1d0 <hif_handle_isr+0xbc>)
 800a174:	f002 fca8 	bl	800cac8 <iprintf>
 800a178:	200d      	movs	r0, #13
 800a17a:	f002 fcb7 	bl	800caec <putchar>
					break;
 800a17e:	e011      	b.n	800a1a4 <hif_handle_isr+0x90>
				}
				else
					M2M_ERR("(HIF) Failed to handle interrupt %d try again... (%u)\n", ret, retries);
 800a180:	f240 226b 	movw	r2, #619	@ 0x26b
 800a184:	4910      	ldr	r1, [pc, #64]	@ (800a1c8 <hif_handle_isr+0xb4>)
 800a186:	4811      	ldr	r0, [pc, #68]	@ (800a1cc <hif_handle_isr+0xb8>)
 800a188:	f002 fc9e 	bl	800cac8 <iprintf>
 800a18c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a190:	79ba      	ldrb	r2, [r7, #6]
 800a192:	4619      	mov	r1, r3
 800a194:	480f      	ldr	r0, [pc, #60]	@ (800a1d4 <hif_handle_isr+0xc0>)
 800a196:	f002 fc97 	bl	800cac8 <iprintf>
 800a19a:	200d      	movs	r0, #13
 800a19c:	f002 fca6 	bl	800caec <putchar>
			ret = hif_isr();
 800a1a0:	e7d0      	b.n	800a144 <hif_handle_isr+0x30>
				break;
 800a1a2:	bf00      	nop
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
 800a1a4:	4b07      	ldr	r3, [pc, #28]	@ (800a1c4 <hif_handle_isr+0xb0>)
 800a1a6:	78db      	ldrb	r3, [r3, #3]
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d004      	beq.n	800a1b8 <hif_handle_isr+0xa4>
 800a1ae:	4b05      	ldr	r3, [pc, #20]	@ (800a1c4 <hif_handle_isr+0xb0>)
 800a1b0:	791b      	ldrb	r3, [r3, #4]
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d0b6      	beq.n	800a126 <hif_handle_isr+0x12>
			}
		}
	}

	return ret;
 800a1b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	20000600 	.word	0x20000600
 800a1c8:	0800e7d8 	.word	0x0800e7d8
 800a1cc:	0800d924 	.word	0x0800d924
 800a1d0:	0800db6c 	.word	0x0800db6c
 800a1d4:	0800dbb4 	.word	0x0800dbb4

0800a1d8 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	4611      	mov	r1, r2
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	80fb      	strh	r3, [r7, #6]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	717b      	strb	r3, [r7, #5]
	sint8 ret = M2M_SUCCESS;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	75fb      	strb	r3, [r7, #23]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d005      	beq.n	800a204 <hif_receive+0x2c>
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d002      	beq.n	800a204 <hif_receive+0x2c>
 800a1fe:	88fb      	ldrh	r3, [r7, #6]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d116      	bne.n	800a232 <hif_receive+0x5a>
	{
		if(isDone)
 800a204:	797b      	ldrb	r3, [r7, #5]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d004      	beq.n	800a214 <hif_receive+0x3c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
 800a20a:	f7ff fb75 	bl	80098f8 <hif_set_rx_done>
 800a20e:	4603      	mov	r3, r0
 800a210:	75fb      	strb	r3, [r7, #23]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
 800a212:	e065      	b.n	800a2e0 <hif_receive+0x108>
			ret = M2M_ERR_FAIL;
 800a214:	23f4      	movs	r3, #244	@ 0xf4
 800a216:	75fb      	strb	r3, [r7, #23]
			M2M_ERR(" hif_receive: Invalid argument\n");
 800a218:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a21c:	4933      	ldr	r1, [pc, #204]	@ (800a2ec <hif_receive+0x114>)
 800a21e:	4834      	ldr	r0, [pc, #208]	@ (800a2f0 <hif_receive+0x118>)
 800a220:	f002 fc52 	bl	800cac8 <iprintf>
 800a224:	4833      	ldr	r0, [pc, #204]	@ (800a2f4 <hif_receive+0x11c>)
 800a226:	f002 fcbf 	bl	800cba8 <puts>
 800a22a:	200d      	movs	r0, #13
 800a22c:	f002 fc5e 	bl	800caec <putchar>
		goto ERR1;
 800a230:	e056      	b.n	800a2e0 <hif_receive+0x108>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
 800a232:	88fa      	ldrh	r2, [r7, #6]
 800a234:	4b30      	ldr	r3, [pc, #192]	@ (800a2f8 <hif_receive+0x120>)
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d912      	bls.n	800a262 <hif_receive+0x8a>
	{
		ret = M2M_ERR_FAIL;
 800a23c:	23f4      	movs	r3, #244	@ 0xf4
 800a23e:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Size is larger than the received buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
 800a240:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800a244:	4929      	ldr	r1, [pc, #164]	@ (800a2ec <hif_receive+0x114>)
 800a246:	482a      	ldr	r0, [pc, #168]	@ (800a2f0 <hif_receive+0x118>)
 800a248:	f002 fc3e 	bl	800cac8 <iprintf>
 800a24c:	88fb      	ldrh	r3, [r7, #6]
 800a24e:	4a2a      	ldr	r2, [pc, #168]	@ (800a2f8 <hif_receive+0x120>)
 800a250:	68d2      	ldr	r2, [r2, #12]
 800a252:	4619      	mov	r1, r3
 800a254:	4829      	ldr	r0, [pc, #164]	@ (800a2fc <hif_receive+0x124>)
 800a256:	f002 fc37 	bl	800cac8 <iprintf>
 800a25a:	200d      	movs	r0, #13
 800a25c:	f002 fc46 	bl	800caec <putchar>
		goto ERR1;
 800a260:	e03e      	b.n	800a2e0 <hif_receive+0x108>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
 800a262:	4b25      	ldr	r3, [pc, #148]	@ (800a2f8 <hif_receive+0x120>)
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d309      	bcc.n	800a280 <hif_receive+0xa8>
 800a26c:	88fa      	ldrh	r2, [r7, #6]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	441a      	add	r2, r3
 800a272:	4b21      	ldr	r3, [pc, #132]	@ (800a2f8 <hif_receive+0x120>)
 800a274:	6899      	ldr	r1, [r3, #8]
 800a276:	4b20      	ldr	r3, [pc, #128]	@ (800a2f8 <hif_receive+0x120>)
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	440b      	add	r3, r1
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d90e      	bls.n	800a29e <hif_receive+0xc6>
	{
		ret = M2M_ERR_FAIL;
 800a280:	23f4      	movs	r3, #244	@ 0xf4
 800a282:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Address beyond the received buffer address and length\n");
 800a284:	f240 229a 	movw	r2, #666	@ 0x29a
 800a288:	4918      	ldr	r1, [pc, #96]	@ (800a2ec <hif_receive+0x114>)
 800a28a:	4819      	ldr	r0, [pc, #100]	@ (800a2f0 <hif_receive+0x118>)
 800a28c:	f002 fc1c 	bl	800cac8 <iprintf>
 800a290:	481b      	ldr	r0, [pc, #108]	@ (800a300 <hif_receive+0x128>)
 800a292:	f002 fc89 	bl	800cba8 <puts>
 800a296:	200d      	movs	r0, #13
 800a298:	f002 fc28 	bl	800caec <putchar>
		goto ERR1;
 800a29c:	e020      	b.n	800a2e0 <hif_receive+0x108>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
 800a29e:	88fb      	ldrh	r3, [r7, #6]
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	68b9      	ldr	r1, [r7, #8]
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f001 f80d 	bl	800b2c4 <nm_read_block>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	75fb      	strb	r3, [r7, #23]
	if(ret != M2M_SUCCESS)goto ERR1;
 800a2ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d111      	bne.n	800a2da <hif_receive+0x102>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
 800a2b6:	4b10      	ldr	r3, [pc, #64]	@ (800a2f8 <hif_receive+0x120>)
 800a2b8:	689a      	ldr	r2, [r3, #8]
 800a2ba:	4b0f      	ldr	r3, [pc, #60]	@ (800a2f8 <hif_receive+0x120>)
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	441a      	add	r2, r3
 800a2c0:	88f9      	ldrh	r1, [r7, #6]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	440b      	add	r3, r1
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d002      	beq.n	800a2d0 <hif_receive+0xf8>
 800a2ca:	797b      	ldrb	r3, [r7, #5]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d006      	beq.n	800a2de <hif_receive+0x106>
	{
		/* set RX done */
		ret = hif_set_rx_done();
 800a2d0:	f7ff fb12 	bl	80098f8 <hif_set_rx_done>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	75fb      	strb	r3, [r7, #23]
 800a2d8:	e002      	b.n	800a2e0 <hif_receive+0x108>
	if(ret != M2M_SUCCESS)goto ERR1;
 800a2da:	bf00      	nop
 800a2dc:	e000      	b.n	800a2e0 <hif_receive+0x108>
	}

ERR1:
 800a2de:	bf00      	nop
	return ret;
 800a2e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3718      	adds	r7, #24
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	0800e7e8 	.word	0x0800e7e8
 800a2f0:	0800d924 	.word	0x0800d924
 800a2f4:	0800dbec 	.word	0x0800dbec
 800a2f8:	20000600 	.word	0x20000600
 800a2fc:	0800dc0c 	.word	0x0800dc0c
 800a300:	0800dc54 	.word	0x0800dc54

0800a304 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	4603      	mov	r3, r0
 800a30c:	6039      	str	r1, [r7, #0]
 800a30e:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800a310:	2300      	movs	r3, #0
 800a312:	73fb      	strb	r3, [r7, #15]
	switch(u8Grp)
 800a314:	79fb      	ldrb	r3, [r7, #7]
 800a316:	3b01      	subs	r3, #1
 800a318:	2b06      	cmp	r3, #6
 800a31a:	d82d      	bhi.n	800a378 <hif_register_cb+0x74>
 800a31c:	a201      	add	r2, pc, #4	@ (adr r2, 800a324 <hif_register_cb+0x20>)
 800a31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a322:	bf00      	nop
 800a324:	0800a349 	.word	0x0800a349
 800a328:	0800a341 	.word	0x0800a341
 800a32c:	0800a359 	.word	0x0800a359
 800a330:	0800a351 	.word	0x0800a351
 800a334:	0800a371 	.word	0x0800a371
 800a338:	0800a361 	.word	0x0800a361
 800a33c:	0800a369 	.word	0x0800a369
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
 800a340:	4a19      	ldr	r2, [pc, #100]	@ (800a3a8 <hif_register_cb+0xa4>)
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	6153      	str	r3, [r2, #20]
			break;
 800a346:	e028      	b.n	800a39a <hif_register_cb+0x96>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
 800a348:	4a17      	ldr	r2, [pc, #92]	@ (800a3a8 <hif_register_cb+0xa4>)
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	6113      	str	r3, [r2, #16]
			break;
 800a34e:	e024      	b.n	800a39a <hif_register_cb+0x96>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
 800a350:	4a15      	ldr	r2, [pc, #84]	@ (800a3a8 <hif_register_cb+0xa4>)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	6193      	str	r3, [r2, #24]
			break;
 800a356:	e020      	b.n	800a39a <hif_register_cb+0x96>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
 800a358:	4a13      	ldr	r2, [pc, #76]	@ (800a3a8 <hif_register_cb+0xa4>)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	6213      	str	r3, [r2, #32]
			break;
 800a35e:	e01c      	b.n	800a39a <hif_register_cb+0x96>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
 800a360:	4a11      	ldr	r2, [pc, #68]	@ (800a3a8 <hif_register_cb+0xa4>)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	6253      	str	r3, [r2, #36]	@ 0x24
			break;
 800a366:	e018      	b.n	800a39a <hif_register_cb+0x96>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
 800a368:	4a0f      	ldr	r2, [pc, #60]	@ (800a3a8 <hif_register_cb+0xa4>)
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	61d3      	str	r3, [r2, #28]
			break;
 800a36e:	e014      	b.n	800a39a <hif_register_cb+0x96>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
 800a370:	4a0d      	ldr	r2, [pc, #52]	@ (800a3a8 <hif_register_cb+0xa4>)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	6293      	str	r3, [r2, #40]	@ 0x28
			break;
 800a376:	e010      	b.n	800a39a <hif_register_cb+0x96>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
 800a378:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800a37c:	490b      	ldr	r1, [pc, #44]	@ (800a3ac <hif_register_cb+0xa8>)
 800a37e:	480c      	ldr	r0, [pc, #48]	@ (800a3b0 <hif_register_cb+0xac>)
 800a380:	f002 fba2 	bl	800cac8 <iprintf>
 800a384:	79fb      	ldrb	r3, [r7, #7]
 800a386:	4619      	mov	r1, r3
 800a388:	480a      	ldr	r0, [pc, #40]	@ (800a3b4 <hif_register_cb+0xb0>)
 800a38a:	f002 fb9d 	bl	800cac8 <iprintf>
 800a38e:	200d      	movs	r0, #13
 800a390:	f002 fbac 	bl	800caec <putchar>
			ret = M2M_ERR_FAIL;
 800a394:	23f4      	movs	r3, #244	@ 0xf4
 800a396:	73fb      	strb	r3, [r7, #15]
			break;
 800a398:	bf00      	nop
	}
	return ret;
 800a39a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	20000600 	.word	0x20000600
 800a3ac:	0800e7f4 	.word	0x0800e7f4
 800a3b0:	0800d924 	.word	0x0800d924
 800a3b4:	0800dc98 	.word	0x0800dc98

0800a3b8 <m2m_wifi_cb>:
                HIF address.
@param[in]  grp
                HIF group type.
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b0ae      	sub	sp, #184	@ 0xb8
 800a3bc:	af02      	add	r7, sp, #8
 800a3be:	4603      	mov	r3, r0
 800a3c0:	603a      	str	r2, [r7, #0]
 800a3c2:	71fb      	strb	r3, [r7, #7]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	80bb      	strh	r3, [r7, #4]
    uint8 rx_buf[8];
    if(u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 800a3c8:	79fb      	ldrb	r3, [r7, #7]
 800a3ca:	2b2c      	cmp	r3, #44	@ 0x2c
 800a3cc:	d117      	bne.n	800a3fe <m2m_wifi_cb+0x46>
    {
        tstrM2mWifiStateChanged strState;
        if(hif_receive(u32Addr, (uint8 *) &strState, sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
 800a3ce:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	2204      	movs	r2, #4
 800a3d6:	6838      	ldr	r0, [r7, #0]
 800a3d8:	f7ff fefe 	bl	800a1d8 <hif_receive>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f040 81cd 	bne.w	800a77e <m2m_wifi_cb+0x3c6>
        {
            if(gpfAppWifiCb)
 800a3e4:	4bae      	ldr	r3, [pc, #696]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 81c8 	beq.w	800a77e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
 800a3ee:	4bac      	ldr	r3, [pc, #688]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	202c      	movs	r0, #44	@ 0x2c
 800a3fa:	4798      	blx	r3
#endif  /* ETH_MODE */
    else
    {
        M2M_ERR("REQ Not defined %d\n", u8OpCode);
    }
}
 800a3fc:	e1bf      	b.n	800a77e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
 800a3fe:	79fb      	ldrb	r3, [r7, #7]
 800a400:	2b1b      	cmp	r3, #27
 800a402:	d117      	bne.n	800a434 <m2m_wifi_cb+0x7c>
        if(hif_receive(u32Addr, (uint8 *) &strSysTime, sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
 800a404:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 800a408:	2300      	movs	r3, #0
 800a40a:	2208      	movs	r2, #8
 800a40c:	6838      	ldr	r0, [r7, #0]
 800a40e:	f7ff fee3 	bl	800a1d8 <hif_receive>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	f040 81b2 	bne.w	800a77e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a41a:	4ba1      	ldr	r3, [pc, #644]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	f000 81ad 	beq.w	800a77e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
 800a424:	4b9e      	ldr	r3, [pc, #632]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800a42c:	4611      	mov	r1, r2
 800a42e:	201b      	movs	r0, #27
 800a430:	4798      	blx	r3
}
 800a432:	e1a4      	b.n	800a77e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
 800a434:	79fb      	ldrb	r3, [r7, #7]
 800a436:	2b06      	cmp	r3, #6
 800a438:	d117      	bne.n	800a46a <m2m_wifi_cb+0xb2>
        if(hif_receive(u32Addr, (uint8 *)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
 800a43a:	f107 0108 	add.w	r1, r7, #8
 800a43e:	2301      	movs	r3, #1
 800a440:	2230      	movs	r2, #48	@ 0x30
 800a442:	6838      	ldr	r0, [r7, #0]
 800a444:	f7ff fec8 	bl	800a1d8 <hif_receive>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f040 8197 	bne.w	800a77e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a450:	4b93      	ldr	r3, [pc, #588]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 8192 	beq.w	800a77e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
 800a45a:	4b91      	ldr	r3, [pc, #580]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f107 0208 	add.w	r2, r7, #8
 800a462:	4611      	mov	r1, r2
 800a464:	2006      	movs	r0, #6
 800a466:	4798      	blx	r3
}
 800a468:	e189      	b.n	800a77e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
 800a46a:	79fb      	ldrb	r3, [r7, #7]
 800a46c:	2b0e      	cmp	r3, #14
 800a46e:	f000 8186 	beq.w	800a77e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
 800a472:	79fb      	ldrb	r3, [r7, #7]
 800a474:	2b32      	cmp	r3, #50	@ 0x32
 800a476:	d117      	bne.n	800a4a8 <m2m_wifi_cb+0xf0>
        if(hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
 800a478:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 800a47c:	2300      	movs	r3, #0
 800a47e:	2218      	movs	r2, #24
 800a480:	6838      	ldr	r0, [r7, #0]
 800a482:	f7ff fea9 	bl	800a1d8 <hif_receive>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f040 8178 	bne.w	800a77e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a48e:	4b84      	ldr	r3, [pc, #528]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	f000 8173 	beq.w	800a77e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
 800a498:	4b81      	ldr	r3, [pc, #516]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 800a4a0:	4611      	mov	r1, r2
 800a4a2:	2032      	movs	r0, #50	@ 0x32
 800a4a4:	4798      	blx	r3
}
 800a4a6:	e16a      	b.n	800a77e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_REQ_DHCP_FAILURE)
 800a4a8:	79fb      	ldrb	r3, [r7, #7]
 800a4aa:	2b3d      	cmp	r3, #61	@ 0x3d
 800a4ac:	d114      	bne.n	800a4d8 <m2m_wifi_cb+0x120>
        if(hif_receive(u32Addr, NULL, 0, 1) == M2M_SUCCESS)
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	6838      	ldr	r0, [r7, #0]
 800a4b6:	f7ff fe8f 	bl	800a1d8 <hif_receive>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f040 815e 	bne.w	800a77e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a4c2:	4b77      	ldr	r3, [pc, #476]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f000 8159 	beq.w	800a77e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_REQ_DHCP_FAILURE, NULL);
 800a4cc:	4b74      	ldr	r3, [pc, #464]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	203d      	movs	r0, #61	@ 0x3d
 800a4d4:	4798      	blx	r3
}
 800a4d6:	e152      	b.n	800a77e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_REQ_WPS)
 800a4d8:	79fb      	ldrb	r3, [r7, #7]
 800a4da:	2b2f      	cmp	r3, #47	@ 0x2f
 800a4dc:	d11e      	bne.n	800a51c <m2m_wifi_cb+0x164>
        m2m_memset((uint8 *)&strWps, 0, sizeof(tstrM2MWPSInfo));
 800a4de:	f107 0308 	add.w	r3, r7, #8
 800a4e2:	2264      	movs	r2, #100	@ 0x64
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7ff f9c0 	bl	800986c <m2m_memset>
        if(hif_receive(u32Addr, (uint8 *)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
 800a4ec:	f107 0108 	add.w	r1, r7, #8
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	2264      	movs	r2, #100	@ 0x64
 800a4f4:	6838      	ldr	r0, [r7, #0]
 800a4f6:	f7ff fe6f 	bl	800a1d8 <hif_receive>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f040 813e 	bne.w	800a77e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a502:	4b67      	ldr	r3, [pc, #412]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	f000 8139 	beq.w	800a77e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
 800a50c:	4b64      	ldr	r3, [pc, #400]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f107 0208 	add.w	r2, r7, #8
 800a514:	4611      	mov	r1, r2
 800a516:	202f      	movs	r0, #47	@ 0x2f
 800a518:	4798      	blx	r3
}
 800a51a:	e130      	b.n	800a77e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
 800a51c:	79fb      	ldrb	r3, [r7, #7]
 800a51e:	2b34      	cmp	r3, #52	@ 0x34
 800a520:	d132      	bne.n	800a588 <m2m_wifi_cb+0x1d0>
        if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
 800a522:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800a526:	2300      	movs	r3, #0
 800a528:	2204      	movs	r2, #4
 800a52a:	6838      	ldr	r0, [r7, #0]
 800a52c:	f7ff fe54 	bl	800a1d8 <hif_receive>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	f040 8123 	bne.w	800a77e <m2m_wifi_cb+0x3c6>
            M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n",
 800a538:	485a      	ldr	r0, [pc, #360]	@ (800a6a4 <m2m_wifi_cb+0x2ec>)
 800a53a:	f002 fac5 	bl	800cac8 <iprintf>
 800a53e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a542:	b2db      	uxtb	r3, r3
 800a544:	4619      	mov	r1, r3
 800a546:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a54a:	0a1b      	lsrs	r3, r3, #8
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	461a      	mov	r2, r3
 800a550:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a554:	0c1b      	lsrs	r3, r3, #16
 800a556:	b2db      	uxtb	r3, r3
 800a558:	4618      	mov	r0, r3
 800a55a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a55e:	0e1b      	lsrs	r3, r3, #24
 800a560:	b2db      	uxtb	r3, r3
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	4603      	mov	r3, r0
 800a566:	4850      	ldr	r0, [pc, #320]	@ (800a6a8 <m2m_wifi_cb+0x2f0>)
 800a568:	f002 faae 	bl	800cac8 <iprintf>
 800a56c:	200d      	movs	r0, #13
 800a56e:	f002 fabd 	bl	800caec <putchar>
            if(gpfAppWifiCb)
 800a572:	4b4b      	ldr	r3, [pc, #300]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	f000 8101 	beq.w	800a77e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
 800a57c:	4b48      	ldr	r3, [pc, #288]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2100      	movs	r1, #0
 800a582:	2034      	movs	r0, #52	@ 0x34
 800a584:	4798      	blx	r3
}
 800a586:	e0fa      	b.n	800a77e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
 800a588:	79fb      	ldrb	r3, [r7, #7]
 800a58a:	2b11      	cmp	r3, #17
 800a58c:	d11e      	bne.n	800a5cc <m2m_wifi_cb+0x214>
        gu8scanInProgress = 0;
 800a58e:	4b47      	ldr	r3, [pc, #284]	@ (800a6ac <m2m_wifi_cb+0x2f4>)
 800a590:	2200      	movs	r2, #0
 800a592:	701a      	strb	r2, [r3, #0]
        if(hif_receive(u32Addr, (uint8 *)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 800a594:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 800a598:	2300      	movs	r3, #0
 800a59a:	2204      	movs	r2, #4
 800a59c:	6838      	ldr	r0, [r7, #0]
 800a59e:	f7ff fe1b 	bl	800a1d8 <hif_receive>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f040 80ea 	bne.w	800a77e <m2m_wifi_cb+0x3c6>
            gu8ChNum = strState.u8NumofCh;
 800a5aa:	f897 207c 	ldrb.w	r2, [r7, #124]	@ 0x7c
 800a5ae:	4b40      	ldr	r3, [pc, #256]	@ (800a6b0 <m2m_wifi_cb+0x2f8>)
 800a5b0:	701a      	strb	r2, [r3, #0]
            if(gpfAppWifiCb)
 800a5b2:	4b3b      	ldr	r3, [pc, #236]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 80e1 	beq.w	800a77e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
 800a5bc:	4b38      	ldr	r3, [pc, #224]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	2011      	movs	r0, #17
 800a5c8:	4798      	blx	r3
}
 800a5ca:	e0d8      	b.n	800a77e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
 800a5cc:	79fb      	ldrb	r3, [r7, #7]
 800a5ce:	2b13      	cmp	r3, #19
 800a5d0:	d117      	bne.n	800a602 <m2m_wifi_cb+0x24a>
        if(hif_receive(u32Addr, (uint8 *)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
 800a5d2:	f107 0108 	add.w	r1, r7, #8
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	222c      	movs	r2, #44	@ 0x2c
 800a5da:	6838      	ldr	r0, [r7, #0]
 800a5dc:	f7ff fdfc 	bl	800a1d8 <hif_receive>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f040 80cb 	bne.w	800a77e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a5e8:	4b2d      	ldr	r3, [pc, #180]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f000 80c6 	beq.w	800a77e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
 800a5f2:	4b2b      	ldr	r3, [pc, #172]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f107 0208 	add.w	r2, r7, #8
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	2013      	movs	r0, #19
 800a5fe:	4798      	blx	r3
}
 800a600:	e0bd      	b.n	800a77e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
 800a602:	79fb      	ldrb	r3, [r7, #7]
 800a604:	2b04      	cmp	r3, #4
 800a606:	d117      	bne.n	800a638 <m2m_wifi_cb+0x280>
        if(hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800a608:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800a60c:	2300      	movs	r3, #0
 800a60e:	2204      	movs	r2, #4
 800a610:	6838      	ldr	r0, [r7, #0]
 800a612:	f7ff fde1 	bl	800a1d8 <hif_receive>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f040 80b0 	bne.w	800a77e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a61e:	4b20      	ldr	r3, [pc, #128]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	f000 80ab 	beq.w	800a77e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
 800a628:	4b1d      	ldr	r3, [pc, #116]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800a630:	4611      	mov	r1, r2
 800a632:	2004      	movs	r0, #4
 800a634:	4798      	blx	r3
}
 800a636:	e0a2      	b.n	800a77e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
 800a638:	79fb      	ldrb	r3, [r7, #7]
 800a63a:	2b65      	cmp	r3, #101	@ 0x65
 800a63c:	d117      	bne.n	800a66e <m2m_wifi_cb+0x2b6>
        if(hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800a63e:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800a642:	2300      	movs	r3, #0
 800a644:	2204      	movs	r2, #4
 800a646:	6838      	ldr	r0, [r7, #0]
 800a648:	f7ff fdc6 	bl	800a1d8 <hif_receive>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f040 8095 	bne.w	800a77e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a654:	4b12      	ldr	r3, [pc, #72]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f000 8090 	beq.w	800a77e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
 800a65e:	4b10      	ldr	r3, [pc, #64]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800a666:	4611      	mov	r1, r2
 800a668:	2065      	movs	r0, #101	@ 0x65
 800a66a:	4798      	blx	r3
}
 800a66c:	e087      	b.n	800a77e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
 800a66e:	79fb      	ldrb	r3, [r7, #7]
 800a670:	2b09      	cmp	r3, #9
 800a672:	d11f      	bne.n	800a6b4 <m2m_wifi_cb+0x2fc>
        if(hif_receive(u32Addr, (uint8 *)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
 800a674:	f107 0108 	add.w	r1, r7, #8
 800a678:	2301      	movs	r3, #1
 800a67a:	2264      	movs	r2, #100	@ 0x64
 800a67c:	6838      	ldr	r0, [r7, #0]
 800a67e:	f7ff fdab 	bl	800a1d8 <hif_receive>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d17a      	bne.n	800a77e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a688:	4b05      	ldr	r3, [pc, #20]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d076      	beq.n	800a77e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
 800a690:	4b03      	ldr	r3, [pc, #12]	@ (800a6a0 <m2m_wifi_cb+0x2e8>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f107 0208 	add.w	r2, r7, #8
 800a698:	4611      	mov	r1, r2
 800a69a:	2009      	movs	r0, #9
 800a69c:	4798      	blx	r3
}
 800a69e:	e06e      	b.n	800a77e <m2m_wifi_cb+0x3c6>
 800a6a0:	20000630 	.word	0x20000630
 800a6a4:	0800dca4 	.word	0x0800dca4
 800a6a8:	0800dcb0 	.word	0x0800dcb0
 800a6ac:	20000634 	.word	0x20000634
 800a6b0:	2000062c 	.word	0x2000062c
    else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
 800a6b4:	79fb      	ldrb	r3, [r7, #7]
 800a6b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6b8:	d115      	bne.n	800a6e6 <m2m_wifi_cb+0x32e>
        if(hif_receive(u32Addr, (uint8 *)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
 800a6ba:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800a6be:	2301      	movs	r3, #1
 800a6c0:	2204      	movs	r2, #4
 800a6c2:	6838      	ldr	r0, [r7, #0]
 800a6c4:	f7ff fd88 	bl	800a1d8 <hif_receive>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d157      	bne.n	800a77e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a6ce:	4b2e      	ldr	r3, [pc, #184]	@ (800a788 <m2m_wifi_cb+0x3d0>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d053      	beq.n	800a77e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
 800a6d6:	4b2c      	ldr	r3, [pc, #176]	@ (800a788 <m2m_wifi_cb+0x3d0>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800a6de:	4611      	mov	r1, r2
 800a6e0:	202a      	movs	r0, #42	@ 0x2a
 800a6e2:	4798      	blx	r3
}
 800a6e4:	e04b      	b.n	800a77e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_REQRSP_DELETE_APID)
 800a6e6:	79fb      	ldrb	r3, [r7, #7]
 800a6e8:	2b27      	cmp	r3, #39	@ 0x27
 800a6ea:	d115      	bne.n	800a718 <m2m_wifi_cb+0x360>
        if(hif_receive(u32Addr, (uint8 *)&strResp, sizeof(tstrM2MGenericResp), 0) == M2M_SUCCESS)
 800a6ec:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	2204      	movs	r2, #4
 800a6f4:	6838      	ldr	r0, [r7, #0]
 800a6f6:	f7ff fd6f 	bl	800a1d8 <hif_receive>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d13e      	bne.n	800a77e <m2m_wifi_cb+0x3c6>
            if(gpfAppWifiCb)
 800a700:	4b21      	ldr	r3, [pc, #132]	@ (800a788 <m2m_wifi_cb+0x3d0>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d03a      	beq.n	800a77e <m2m_wifi_cb+0x3c6>
                gpfAppWifiCb(M2M_WIFI_REQRSP_DELETE_APID, &strResp);
 800a708:	4b1f      	ldr	r3, [pc, #124]	@ (800a788 <m2m_wifi_cb+0x3d0>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800a710:	4611      	mov	r1, r2
 800a712:	2027      	movs	r0, #39	@ 0x27
 800a714:	4798      	blx	r3
}
 800a716:	e032      	b.n	800a77e <m2m_wifi_cb+0x3c6>
    else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
 800a718:	79fb      	ldrb	r3, [r7, #7]
 800a71a:	2b20      	cmp	r3, #32
 800a71c:	d121      	bne.n	800a762 <m2m_wifi_cb+0x3aa>
        if(hif_receive(u32Addr, (uint8 *)&strPrng, sizeof(tstrPrng), 0) == M2M_SUCCESS)
 800a71e:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800a722:	2300      	movs	r3, #0
 800a724:	2208      	movs	r2, #8
 800a726:	6838      	ldr	r0, [r7, #0]
 800a728:	f7ff fd56 	bl	800a1d8 <hif_receive>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d125      	bne.n	800a77e <m2m_wifi_cb+0x3c6>
            if(hif_receive(u32Addr + sizeof(tstrPrng), strPrng.pu8RngBuff, strPrng.u16PrngSize, 1) == M2M_SUCCESS)
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	f103 0008 	add.w	r0, r3, #8
 800a738:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a73a:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 800a73e:	2301      	movs	r3, #1
 800a740:	f7ff fd4a 	bl	800a1d8 <hif_receive>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d119      	bne.n	800a77e <m2m_wifi_cb+0x3c6>
                if(gpfAppWifiCb)
 800a74a:	4b0f      	ldr	r3, [pc, #60]	@ (800a788 <m2m_wifi_cb+0x3d0>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d015      	beq.n	800a77e <m2m_wifi_cb+0x3c6>
                    gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG, &strPrng);
 800a752:	4b0d      	ldr	r3, [pc, #52]	@ (800a788 <m2m_wifi_cb+0x3d0>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800a75a:	4611      	mov	r1, r2
 800a75c:	2020      	movs	r0, #32
 800a75e:	4798      	blx	r3
}
 800a760:	e00d      	b.n	800a77e <m2m_wifi_cb+0x3c6>
        M2M_ERR("REQ Not defined %d\n", u8OpCode);
 800a762:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 800a766:	4909      	ldr	r1, [pc, #36]	@ (800a78c <m2m_wifi_cb+0x3d4>)
 800a768:	4809      	ldr	r0, [pc, #36]	@ (800a790 <m2m_wifi_cb+0x3d8>)
 800a76a:	f002 f9ad 	bl	800cac8 <iprintf>
 800a76e:	79fb      	ldrb	r3, [r7, #7]
 800a770:	4619      	mov	r1, r3
 800a772:	4808      	ldr	r0, [pc, #32]	@ (800a794 <m2m_wifi_cb+0x3dc>)
 800a774:	f002 f9a8 	bl	800cac8 <iprintf>
 800a778:	200d      	movs	r0, #13
 800a77a:	f002 f9b7 	bl	800caec <putchar>
}
 800a77e:	bf00      	nop
 800a780:	37b0      	adds	r7, #176	@ 0xb0
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	20000630 	.word	0x20000630
 800a78c:	0800e804 	.word	0x0800e804
 800a790:	0800dcd0 	.word	0x0800dcd0
 800a794:	0800dce4 	.word	0x0800dce4

0800a798 <m2m_validate_ap_parameters>:
_EXIT0:
    return ret;
}

static sint8 m2m_validate_ap_parameters(CONST tstrM2MAPModeConfig *pstrM2MAPModeConfig)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
    sint8 s8Ret = M2M_SUCCESS;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73fb      	strb	r3, [r7, #15]
    /* Check for incoming pointer */
    if(pstrM2MAPModeConfig == NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10e      	bne.n	800a7c8 <m2m_validate_ap_parameters+0x30>
    {
        M2M_ERR("INVALID POINTER\n");
 800a7aa:	f44f 729b 	mov.w	r2, #310	@ 0x136
 800a7ae:	4951      	ldr	r1, [pc, #324]	@ (800a8f4 <m2m_validate_ap_parameters+0x15c>)
 800a7b0:	4851      	ldr	r0, [pc, #324]	@ (800a8f8 <m2m_validate_ap_parameters+0x160>)
 800a7b2:	f002 f989 	bl	800cac8 <iprintf>
 800a7b6:	4851      	ldr	r0, [pc, #324]	@ (800a8fc <m2m_validate_ap_parameters+0x164>)
 800a7b8:	f002 f9f6 	bl	800cba8 <puts>
 800a7bc:	200d      	movs	r0, #13
 800a7be:	f002 f995 	bl	800caec <putchar>
        s8Ret = M2M_ERR_FAIL;
 800a7c2:	23f4      	movs	r3, #244	@ 0xf4
 800a7c4:	73fb      	strb	r3, [r7, #15]
        goto ERR1;
 800a7c6:	e08e      	b.n	800a8e6 <m2m_validate_ap_parameters+0x14e>
    }
    /* Check for SSID */
    if((m2m_strlen((uint8 *)pstrM2MAPModeConfig->strApConfig.au8SSID) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPModeConfig->strApConfig.au8SSID) >= M2M_MAX_SSID_LEN))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7ff f86b 	bl	80098a6 <m2m_strlen>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d006      	beq.n	800a7e4 <m2m_validate_ap_parameters+0x4c>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7ff f864 	bl	80098a6 <m2m_strlen>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b20      	cmp	r3, #32
 800a7e2:	d90e      	bls.n	800a802 <m2m_validate_ap_parameters+0x6a>
    {
        M2M_ERR("INVALID SSID\n");
 800a7e4:	f240 123d 	movw	r2, #317	@ 0x13d
 800a7e8:	4942      	ldr	r1, [pc, #264]	@ (800a8f4 <m2m_validate_ap_parameters+0x15c>)
 800a7ea:	4843      	ldr	r0, [pc, #268]	@ (800a8f8 <m2m_validate_ap_parameters+0x160>)
 800a7ec:	f002 f96c 	bl	800cac8 <iprintf>
 800a7f0:	4843      	ldr	r0, [pc, #268]	@ (800a900 <m2m_validate_ap_parameters+0x168>)
 800a7f2:	f002 f9d9 	bl	800cba8 <puts>
 800a7f6:	200d      	movs	r0, #13
 800a7f8:	f002 f978 	bl	800caec <putchar>
        s8Ret = M2M_ERR_FAIL;
 800a7fc:	23f4      	movs	r3, #244	@ 0xf4
 800a7fe:	73fb      	strb	r3, [r7, #15]
        goto ERR1;
 800a800:	e071      	b.n	800a8e6 <m2m_validate_ap_parameters+0x14e>
    }
    /* Check for Channel */
    if(pstrM2MAPModeConfig->strApConfig.u8ListenChannel > M2M_WIFI_CH_14 || pstrM2MAPModeConfig->strApConfig.u8ListenChannel < M2M_WIFI_CH_1)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a808:	2b0e      	cmp	r3, #14
 800a80a:	d804      	bhi.n	800a816 <m2m_validate_ap_parameters+0x7e>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10e      	bne.n	800a834 <m2m_validate_ap_parameters+0x9c>
    {
        M2M_ERR("INVALID CH\n");
 800a816:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800a81a:	4936      	ldr	r1, [pc, #216]	@ (800a8f4 <m2m_validate_ap_parameters+0x15c>)
 800a81c:	4836      	ldr	r0, [pc, #216]	@ (800a8f8 <m2m_validate_ap_parameters+0x160>)
 800a81e:	f002 f953 	bl	800cac8 <iprintf>
 800a822:	4838      	ldr	r0, [pc, #224]	@ (800a904 <m2m_validate_ap_parameters+0x16c>)
 800a824:	f002 f9c0 	bl	800cba8 <puts>
 800a828:	200d      	movs	r0, #13
 800a82a:	f002 f95f 	bl	800caec <putchar>
        s8Ret = M2M_ERR_FAIL;
 800a82e:	23f4      	movs	r3, #244	@ 0xf4
 800a830:	73fb      	strb	r3, [r7, #15]
        goto ERR1;
 800a832:	e058      	b.n	800a8e6 <m2m_validate_ap_parameters+0x14e>
    }
    /* Check for DHCP Server IP address */
    if(!(pstrM2MAPModeConfig->strApConfig.au8DHCPServerIP[0] || pstrM2MAPModeConfig->strApConfig.au8DHCPServerIP[1]))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d118      	bne.n	800a870 <m2m_validate_ap_parameters+0xd8>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a844:	2b00      	cmp	r3, #0
 800a846:	d113      	bne.n	800a870 <m2m_validate_ap_parameters+0xd8>
    {
        if(!(pstrM2MAPModeConfig->strApConfig.au8DHCPServerIP[2]))
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d10e      	bne.n	800a870 <m2m_validate_ap_parameters+0xd8>
        {
            M2M_ERR("INVALID DHCP SERVER IP\n");
 800a852:	f240 124d 	movw	r2, #333	@ 0x14d
 800a856:	4927      	ldr	r1, [pc, #156]	@ (800a8f4 <m2m_validate_ap_parameters+0x15c>)
 800a858:	4827      	ldr	r0, [pc, #156]	@ (800a8f8 <m2m_validate_ap_parameters+0x160>)
 800a85a:	f002 f935 	bl	800cac8 <iprintf>
 800a85e:	482a      	ldr	r0, [pc, #168]	@ (800a908 <m2m_validate_ap_parameters+0x170>)
 800a860:	f002 f9a2 	bl	800cba8 <puts>
 800a864:	200d      	movs	r0, #13
 800a866:	f002 f941 	bl	800caec <putchar>
            s8Ret = M2M_ERR_FAIL;
 800a86a:	23f4      	movs	r3, #244	@ 0xf4
 800a86c:	73fb      	strb	r3, [r7, #15]
            goto ERR1;
 800a86e:	e03a      	b.n	800a8e6 <m2m_validate_ap_parameters+0x14e>
        }
    }
    /* Check for Security */
    if(pstrM2MAPModeConfig->strApConfig.u8SecType == M2M_WIFI_SEC_OPEN)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a876:	2b01      	cmp	r3, #1
 800a878:	d034      	beq.n	800a8e4 <m2m_validate_ap_parameters+0x14c>
    {
        goto ERR1;
    }
    else if(pstrM2MAPModeConfig->strApConfig.u8SecType == M2M_WIFI_SEC_WEP)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a880:	2b03      	cmp	r3, #3
 800a882:	d102      	bne.n	800a88a <m2m_validate_ap_parameters+0xf2>
    {
        /* As of 19.7.5 the WEP protocol is deprecated */
        s8Ret = M2M_ERR_FAIL;
 800a884:	23f4      	movs	r3, #244	@ 0xf4
 800a886:	73fb      	strb	r3, [r7, #15]
        goto ERR1;
 800a888:	e02d      	b.n	800a8e6 <m2m_validate_ap_parameters+0x14e>
    }
    else if(pstrM2MAPModeConfig->strApConfig.u8SecType == M2M_WIFI_SEC_WPA_PSK)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a890:	2b02      	cmp	r3, #2
 800a892:	d118      	bne.n	800a8c6 <m2m_validate_ap_parameters+0x12e>
    {
        /* Check for WPA Key size */
        if(((pstrM2MAPModeConfig->strApConfig.u8KeySz + 1) < M2M_MIN_PSK_LEN) || ((pstrM2MAPModeConfig->strApConfig.u8KeySz + 1) > M2M_MAX_PSK_LEN))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a89a:	2b07      	cmp	r3, #7
 800a89c:	d904      	bls.n	800a8a8 <m2m_validate_ap_parameters+0x110>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a8a4:	2b40      	cmp	r3, #64	@ 0x40
 800a8a6:	d91e      	bls.n	800a8e6 <m2m_validate_ap_parameters+0x14e>
        {
            M2M_ERR("INVALID WPA KEY SIZE\n");
 800a8a8:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 800a8ac:	4911      	ldr	r1, [pc, #68]	@ (800a8f4 <m2m_validate_ap_parameters+0x15c>)
 800a8ae:	4812      	ldr	r0, [pc, #72]	@ (800a8f8 <m2m_validate_ap_parameters+0x160>)
 800a8b0:	f002 f90a 	bl	800cac8 <iprintf>
 800a8b4:	4815      	ldr	r0, [pc, #84]	@ (800a90c <m2m_validate_ap_parameters+0x174>)
 800a8b6:	f002 f977 	bl	800cba8 <puts>
 800a8ba:	200d      	movs	r0, #13
 800a8bc:	f002 f916 	bl	800caec <putchar>
            s8Ret = M2M_ERR_FAIL;
 800a8c0:	23f4      	movs	r3, #244	@ 0xf4
 800a8c2:	73fb      	strb	r3, [r7, #15]
            goto ERR1;
 800a8c4:	e00f      	b.n	800a8e6 <m2m_validate_ap_parameters+0x14e>
        }
    }
    else
    {
        M2M_ERR("INVALID AUTHENTICATION MODE\n");
 800a8c6:	f240 1269 	movw	r2, #361	@ 0x169
 800a8ca:	490a      	ldr	r1, [pc, #40]	@ (800a8f4 <m2m_validate_ap_parameters+0x15c>)
 800a8cc:	480a      	ldr	r0, [pc, #40]	@ (800a8f8 <m2m_validate_ap_parameters+0x160>)
 800a8ce:	f002 f8fb 	bl	800cac8 <iprintf>
 800a8d2:	480f      	ldr	r0, [pc, #60]	@ (800a910 <m2m_validate_ap_parameters+0x178>)
 800a8d4:	f002 f968 	bl	800cba8 <puts>
 800a8d8:	200d      	movs	r0, #13
 800a8da:	f002 f907 	bl	800caec <putchar>
        s8Ret = M2M_ERR_FAIL;
 800a8de:	23f4      	movs	r3, #244	@ 0xf4
 800a8e0:	73fb      	strb	r3, [r7, #15]
        goto ERR1;
 800a8e2:	e000      	b.n	800a8e6 <m2m_validate_ap_parameters+0x14e>
        goto ERR1;
 800a8e4:	bf00      	nop
    }

ERR1:
    return s8Ret;
 800a8e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	0800e810 	.word	0x0800e810
 800a8f8:	0800dcd0 	.word	0x0800dcd0
 800a8fc:	0800dcf8 	.word	0x0800dcf8
 800a900:	0800dd08 	.word	0x0800dd08
 800a904:	0800dd18 	.word	0x0800dd18
 800a908:	0800dd24 	.word	0x0800dd24
 800a90c:	0800dd3c 	.word	0x0800dd3c
 800a910:	0800dd54 	.word	0x0800dd54

0800a914 <m2m_wifi_init_hold>:
    s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8 *)pCRL, sizeof(tstrTlsCrlInfo), 0);
    return s8Ret;
}

sint8 m2m_wifi_init_hold(void)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
    sint8 ret = M2M_ERR_FAIL;
 800a91a:	23f4      	movs	r3, #244	@ 0xf4
 800a91c:	71fb      	strb	r3, [r7, #7]

    /* Apply device specific initialization. */
    ret = nm_drv_init_hold();
 800a91e:	f000 fe17 	bl	800b550 <nm_drv_init_hold>
 800a922:	4603      	mov	r3, r0
 800a924:	71fb      	strb	r3, [r7, #7]

    if(M2M_SUCCESS == ret)
 800a926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d102      	bne.n	800a934 <m2m_wifi_init_hold+0x20>
        gu8WifiState = WIFI_STATE_INIT;
 800a92e:	4b04      	ldr	r3, [pc, #16]	@ (800a940 <m2m_wifi_init_hold+0x2c>)
 800a930:	2201      	movs	r2, #1
 800a932:	701a      	strb	r2, [r3, #0]

    return ret;
 800a934:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	2000062d 	.word	0x2000062d

0800a944 <m2m_wifi_init_start>:

sint8 m2m_wifi_init_start(tstrWifiInitParam *pWifiInitParam)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b090      	sub	sp, #64	@ 0x40
 800a948:	af02      	add	r7, sp, #8
 800a94a:	6078      	str	r0, [r7, #4]
    tstrM2mRev strtmp;
    sint8 ret = M2M_SUCCESS;
 800a94c:	2300      	movs	r3, #0
 800a94e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
 800a952:	2301      	movs	r3, #1
 800a954:	72fb      	strb	r3, [r7, #11]

    if(pWifiInitParam == NULL) {
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d103      	bne.n	800a964 <m2m_wifi_init_start+0x20>
        ret = M2M_ERR_FAIL;
 800a95c:	23f4      	movs	r3, #244	@ 0xf4
 800a95e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        goto _EXIT0;
 800a962:	e090      	b.n	800aa86 <m2m_wifi_init_start+0x142>
    }

    gpfAppWifiCb = pWifiInitParam->pfAppWifiCb;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a4a      	ldr	r2, [pc, #296]	@ (800aa94 <m2m_wifi_init_start+0x150>)
 800a96a:	6013      	str	r3, [r2, #0]
    gu16ethRcvBufSize = pWifiInitParam->strEthInitParam.u16ethRcvBufSize;
	if (pWifiInitParam->strEthInitParam.u8EthernetEnable)		
		u8WifiMode = M2M_WIFI_MODE_ETHERNET;
#endif /* ETH_MODE */

    gu8scanInProgress = 0;
 800a96c:	4b4a      	ldr	r3, [pc, #296]	@ (800aa98 <m2m_wifi_init_start+0x154>)
 800a96e:	2200      	movs	r2, #0
 800a970:	701a      	strb	r2, [r3, #0]
    /* Apply device specific initialization. */
    ret = nm_drv_init_start(&u8WifiMode);
 800a972:	f107 030b 	add.w	r3, r7, #11
 800a976:	4618      	mov	r0, r3
 800a978:	f000 fe28 	bl	800b5cc <nm_drv_init_start>
 800a97c:	4603      	mov	r3, r0
 800a97e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if(ret != M2M_SUCCESS) goto _EXIT0;
 800a982:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a986:	2b00      	cmp	r3, #0
 800a988:	d17a      	bne.n	800aa80 <m2m_wifi_init_start+0x13c>

    gu8WifiState = WIFI_STATE_START;
 800a98a:	4b44      	ldr	r3, [pc, #272]	@ (800aa9c <m2m_wifi_init_start+0x158>)
 800a98c:	2202      	movs	r2, #2
 800a98e:	701a      	strb	r2, [r3, #0]

    /* Initialize host interface module */
    ret = hif_init(NULL);
 800a990:	2000      	movs	r0, #0
 800a992:	f7ff f861 	bl	8009a58 <hif_init>
 800a996:	4603      	mov	r3, r0
 800a998:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if(ret != M2M_SUCCESS) goto _EXIT1;
 800a99c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d165      	bne.n	800aa70 <m2m_wifi_init_start+0x12c>

    hif_register_cb(M2M_REQ_GROUP_WIFI, m2m_wifi_cb);
 800a9a4:	493e      	ldr	r1, [pc, #248]	@ (800aaa0 <m2m_wifi_init_start+0x15c>)
 800a9a6:	2001      	movs	r0, #1
 800a9a8:	f7ff fcac 	bl	800a304 <hif_register_cb>

    ret = nm_get_firmware_full_info(&strtmp);
 800a9ac:	f107 030c 	add.w	r3, r7, #12
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f000 fd2d 	bl	800b410 <nm_get_firmware_full_info>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
 800a9bc:	4839      	ldr	r0, [pc, #228]	@ (800aaa4 <m2m_wifi_init_start+0x160>)
 800a9be:	f002 f883 	bl	800cac8 <iprintf>
 800a9c2:	7c3b      	ldrb	r3, [r7, #16]
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	7c7b      	ldrb	r3, [r7, #17]
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	7cbb      	ldrb	r3, [r7, #18]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a9d0:	9300      	str	r3, [sp, #0]
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	4834      	ldr	r0, [pc, #208]	@ (800aaa8 <m2m_wifi_init_start+0x164>)
 800a9d6:	f002 f877 	bl	800cac8 <iprintf>
 800a9da:	200d      	movs	r0, #13
 800a9dc:	f002 f886 	bl	800caec <putchar>
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
 800a9e0:	4830      	ldr	r0, [pc, #192]	@ (800aaa4 <m2m_wifi_init_start+0x160>)
 800a9e2:	f002 f871 	bl	800cac8 <iprintf>
 800a9e6:	f107 030c 	add.w	r3, r7, #12
 800a9ea:	f103 0216 	add.w	r2, r3, #22
 800a9ee:	f107 030c 	add.w	r3, r7, #12
 800a9f2:	330a      	adds	r3, #10
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	482d      	ldr	r0, [pc, #180]	@ (800aaac <m2m_wifi_init_start+0x168>)
 800a9f8:	f002 f866 	bl	800cac8 <iprintf>
 800a9fc:	200d      	movs	r0, #13
 800a9fe:	f002 f875 	bl	800caec <putchar>
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
 800aa02:	4828      	ldr	r0, [pc, #160]	@ (800aaa4 <m2m_wifi_init_start+0x160>)
 800aa04:	f002 f860 	bl	800cac8 <iprintf>
 800aa08:	7cfb      	ldrb	r3, [r7, #19]
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	7d3b      	ldrb	r3, [r7, #20]
 800aa0e:	461a      	mov	r2, r3
 800aa10:	7d7b      	ldrb	r3, [r7, #21]
 800aa12:	4827      	ldr	r0, [pc, #156]	@ (800aab0 <m2m_wifi_init_start+0x16c>)
 800aa14:	f002 f858 	bl	800cac8 <iprintf>
 800aa18:	200d      	movs	r0, #13
 800aa1a:	f002 f867 	bl	800caec <putchar>
	M2M_INFO("Driver ver: %u.%u.%u \n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 800aa1e:	4821      	ldr	r0, [pc, #132]	@ (800aaa4 <m2m_wifi_init_start+0x160>)
 800aa20:	f002 f852 	bl	800cac8 <iprintf>
 800aa24:	2307      	movs	r3, #7
 800aa26:	2207      	movs	r2, #7
 800aa28:	2113      	movs	r1, #19
 800aa2a:	4822      	ldr	r0, [pc, #136]	@ (800aab4 <m2m_wifi_init_start+0x170>)
 800aa2c:	f002 f84c 	bl	800cac8 <iprintf>
 800aa30:	200d      	movs	r0, #13
 800aa32:	f002 f85b 	bl	800caec <putchar>
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
 800aa36:	481b      	ldr	r0, [pc, #108]	@ (800aaa4 <m2m_wifi_init_start+0x160>)
 800aa38:	f002 f846 	bl	800cac8 <iprintf>
 800aa3c:	4a1e      	ldr	r2, [pc, #120]	@ (800aab8 <m2m_wifi_init_start+0x174>)
 800aa3e:	491f      	ldr	r1, [pc, #124]	@ (800aabc <m2m_wifi_init_start+0x178>)
 800aa40:	481f      	ldr	r0, [pc, #124]	@ (800aac0 <m2m_wifi_init_start+0x17c>)
 800aa42:	f002 f841 	bl	800cac8 <iprintf>
 800aa46:	200d      	movs	r0, #13
 800aa48:	f002 f850 	bl	800caec <putchar>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
 800aa4c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800aa50:	f113 0f0d 	cmn.w	r3, #13
 800aa54:	d116      	bne.n	800aa84 <m2m_wifi_init_start+0x140>
	{
		M2M_ERR("Mismatch Firmware Version\n");
 800aa56:	f240 12db 	movw	r2, #475	@ 0x1db
 800aa5a:	491a      	ldr	r1, [pc, #104]	@ (800aac4 <m2m_wifi_init_start+0x180>)
 800aa5c:	481a      	ldr	r0, [pc, #104]	@ (800aac8 <m2m_wifi_init_start+0x184>)
 800aa5e:	f002 f833 	bl	800cac8 <iprintf>
 800aa62:	481a      	ldr	r0, [pc, #104]	@ (800aacc <m2m_wifi_init_start+0x188>)
 800aa64:	f002 f8a0 	bl	800cba8 <puts>
 800aa68:	200d      	movs	r0, #13
 800aa6a:	f002 f83f 	bl	800caec <putchar>
	}

    goto _EXIT0;
 800aa6e:	e009      	b.n	800aa84 <m2m_wifi_init_start+0x140>
    if(ret != M2M_SUCCESS) goto _EXIT1;
 800aa70:	bf00      	nop

_EXIT1:
    gu8WifiState = WIFI_STATE_DEINIT;
 800aa72:	4b0a      	ldr	r3, [pc, #40]	@ (800aa9c <m2m_wifi_init_start+0x158>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	701a      	strb	r2, [r3, #0]
    nm_drv_deinit(NULL);
 800aa78:	2000      	movs	r0, #0
 800aa7a:	f000 fe05 	bl	800b688 <nm_drv_deinit>
 800aa7e:	e002      	b.n	800aa86 <m2m_wifi_init_start+0x142>
    if(ret != M2M_SUCCESS) goto _EXIT0;
 800aa80:	bf00      	nop
 800aa82:	e000      	b.n	800aa86 <m2m_wifi_init_start+0x142>
    goto _EXIT0;
 800aa84:	bf00      	nop
_EXIT0:

    return ret;
 800aa86:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3738      	adds	r7, #56	@ 0x38
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	20000630 	.word	0x20000630
 800aa98:	20000634 	.word	0x20000634
 800aa9c:	2000062d 	.word	0x2000062d
 800aaa0:	0800a3b9 	.word	0x0800a3b9
 800aaa4:	0800dca4 	.word	0x0800dca4
 800aaa8:	0800ddf8 	.word	0x0800ddf8
 800aaac:	0800de20 	.word	0x0800de20
 800aab0:	0800de3c 	.word	0x0800de3c
 800aab4:	0800de60 	.word	0x0800de60
 800aab8:	0800de78 	.word	0x0800de78
 800aabc:	0800de84 	.word	0x0800de84
 800aac0:	0800de90 	.word	0x0800de90
 800aac4:	0800e82c 	.word	0x0800e82c
 800aac8:	0800dcd0 	.word	0x0800dcd0
 800aacc:	0800dea8 	.word	0x0800dea8

0800aad0 <m2m_wifi_init>:

sint8 m2m_wifi_init(tstrWifiInitParam *pWifiInitParam)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 800aad8:	2300      	movs	r3, #0
 800aada:	73fb      	strb	r3, [r7, #15]

    ret = m2m_wifi_init_hold();
 800aadc:	f7ff ff1a 	bl	800a914 <m2m_wifi_init_hold>
 800aae0:	4603      	mov	r3, r0
 800aae2:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 800aae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d104      	bne.n	800aaf6 <m2m_wifi_init+0x26>
    {
        ret = m2m_wifi_init_start(pWifiInitParam);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f7ff ff29 	bl	800a944 <m2m_wifi_init_start>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 800aaf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <m2m_wifi_handle_events>:
{
    hif_yield();
}

sint8 m2m_wifi_handle_events(void *arg)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b082      	sub	sp, #8
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
    return hif_handle_isr();
 800ab0a:	f7ff fb03 	bl	800a114 <hif_handle_isr>
 800ab0e:	4603      	mov	r3, r0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <m2m_wifi_enable_ap>:
    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISABLE_P2P, NULL, 0, NULL, 0, 0);
    return ret;
}

sint8 m2m_wifi_enable_ap(CONST tstrM2MAPConfig *pstrM2MAPConfig)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b0a8      	sub	sp, #160	@ 0xa0
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
    tstrM2MAPModeConfig strM2MAPModeConfig;

    m2m_memcpy((uint8 *)&strM2MAPModeConfig.strApConfig, (uint8 *)pstrM2MAPConfig, sizeof(tstrM2MAPConfig));
 800ab20:	f107 030c 	add.w	r3, r7, #12
 800ab24:	2288      	movs	r2, #136	@ 0x88
 800ab26:	6879      	ldr	r1, [r7, #4]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fe fe7f 	bl	800982c <m2m_memcpy>
    m2m_memcpy(strM2MAPModeConfig.strApConfigExt.au8DefRouterIP, pstrM2MAPConfig->au8DHCPServerIP, 4);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f103 0141 	add.w	r1, r3, #65	@ 0x41
 800ab34:	f107 030c 	add.w	r3, r7, #12
 800ab38:	3388      	adds	r3, #136	@ 0x88
 800ab3a:	2204      	movs	r2, #4
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fe fe75 	bl	800982c <m2m_memcpy>
    m2m_memcpy(strM2MAPModeConfig.strApConfigExt.au8DNSServerIP, pstrM2MAPConfig->au8DHCPServerIP, 4);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f103 0141 	add.w	r1, r3, #65	@ 0x41
 800ab48:	f107 030c 	add.w	r3, r7, #12
 800ab4c:	338c      	adds	r3, #140	@ 0x8c
 800ab4e:	2204      	movs	r2, #4
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fe fe6b 	bl	800982c <m2m_memcpy>

    strM2MAPModeConfig.strApConfigExt.au8SubnetMask[0] = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c

    return m2m_wifi_enable_ap_ext(&strM2MAPModeConfig);
 800ab5c:	f107 030c 	add.w	r3, r7, #12
 800ab60:	4618      	mov	r0, r3
 800ab62:	f000 f805 	bl	800ab70 <m2m_wifi_enable_ap_ext>
 800ab66:	4603      	mov	r3, r0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	37a0      	adds	r7, #160	@ 0xa0
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <m2m_wifi_enable_ap_ext>:

sint8 m2m_wifi_enable_ap_ext(CONST tstrM2MAPModeConfig *pstrM2MAPModeConfig)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b088      	sub	sp, #32
 800ab74:	af04      	add	r7, sp, #16
 800ab76:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_ERR_FAIL;
 800ab78:	23f4      	movs	r3, #244	@ 0xf4
 800ab7a:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS == m2m_validate_ap_parameters(pstrM2MAPModeConfig))
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f7ff fe0b 	bl	800a798 <m2m_validate_ap_parameters>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10d      	bne.n	800aba4 <m2m_wifi_enable_ap_ext+0x34>
    {
        ret = hif_send(M2M_REQ_GROUP_WIFI, (M2M_REQ_DATA_PKT|M2M_WIFI_REQ_ENABLE_AP), NULL, 0, (uint8 *)pstrM2MAPModeConfig, sizeof(tstrM2MAPModeConfig), 0);
 800ab88:	2300      	movs	r3, #0
 800ab8a:	9302      	str	r3, [sp, #8]
 800ab8c:	2394      	movs	r3, #148	@ 0x94
 800ab8e:	9301      	str	r3, [sp, #4]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	2300      	movs	r3, #0
 800ab96:	2200      	movs	r2, #0
 800ab98:	21c6      	movs	r1, #198	@ 0xc6
 800ab9a:	2001      	movs	r0, #1
 800ab9c:	f7fe ff78 	bl	8009a90 <hif_send>
 800aba0:	4603      	mov	r3, r0
 800aba2:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 800aba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <chip_apply_conf>:

#define TIMEOUT						(20000) // ITCO: replace (0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800abb8:	2300      	movs	r3, #0
 800abba:	75fb      	strb	r3, [r7, #23]
	uint32 val32 = u32Conf;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800abc6:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
 800abc8:	6939      	ldr	r1, [r7, #16]
 800abca:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 800abce:	f000 fb59 	bl	800b284 <nm_write_reg>
		if(val32 != 0) {
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d013      	beq.n	800ac00 <chip_apply_conf+0x50>
			uint32 reg = 0;
 800abd8:	2300      	movs	r3, #0
 800abda:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
 800abdc:	f107 030c 	add.w	r3, r7, #12
 800abe0:	4619      	mov	r1, r3
 800abe2:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 800abe6:	f000 fb3f 	bl	800b268 <nm_read_reg_with_ret>
 800abea:	4603      	mov	r3, r0
 800abec:	75fb      	strb	r3, [r7, #23]
			if(ret == M2M_SUCCESS) {
 800abee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1e8      	bne.n	800abc8 <chip_apply_conf+0x18>
				if(reg == val32)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d002      	beq.n	800ac04 <chip_apply_conf+0x54>
		nm_write_reg(rNMI_GP_REG_1, val32);
 800abfe:	e7e3      	b.n	800abc8 <chip_apply_conf+0x18>
					break;
			}
		} else {
			break;
 800ac00:	bf00      	nop
 800ac02:	e000      	b.n	800ac06 <chip_apply_conf+0x56>
					break;
 800ac04:	bf00      	nop
		}
	} while(1);

	return M2M_SUCCESS;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3718      	adds	r7, #24
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	71fb      	strb	r3, [r7, #7]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
 800ac1e:	463b      	mov	r3, r7
 800ac20:	4619      	mov	r1, r3
 800ac22:	f241 4008 	movw	r0, #5128	@ 0x1408
 800ac26:	f000 fb1f 	bl	800b268 <nm_read_reg_with_ret>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800ac2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d12b      	bne.n	800ac8e <enable_interrupts+0x7e>

	reg |= ((uint32) 1 << 8);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac3c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	4619      	mov	r1, r3
 800ac42:	f241 4008 	movw	r0, #5128	@ 0x1408
 800ac46:	f000 fb1d 	bl	800b284 <nm_write_reg>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800ac4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d11d      	bne.n	800ac92 <enable_interrupts+0x82>

	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
 800ac56:	463b      	mov	r3, r7
 800ac58:	4619      	mov	r1, r3
 800ac5a:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800ac5e:	f000 fb03 	bl	800b268 <nm_read_reg_with_ret>
 800ac62:	4603      	mov	r3, r0
 800ac64:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800ac66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d113      	bne.n	800ac96 <enable_interrupts+0x86>

	reg |= ((uint32) 1 << 16);
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac74:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	4619      	mov	r1, r3
 800ac7a:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800ac7e:	f000 fb01 	bl	800b284 <nm_write_reg>
 800ac82:	4603      	mov	r3, r0
 800ac84:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800ac86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac8a:	2b00      	cmp	r3, #0
ERR1:
 800ac8c:	e004      	b.n	800ac98 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800ac8e:	bf00      	nop
 800ac90:	e002      	b.n	800ac98 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800ac92:	bf00      	nop
 800ac94:	e000      	b.n	800ac98 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800ac96:	bf00      	nop
	return ret;
 800ac98:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
 800acaa:	4b31      	ldr	r3, [pc, #196]	@ (800ad70 <nmi_get_chipid+0xcc>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d157      	bne.n	800ad62 <nmi_get_chipid+0xbe>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
 800acb2:	492f      	ldr	r1, [pc, #188]	@ (800ad70 <nmi_get_chipid+0xcc>)
 800acb4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800acb8:	f000 fad6 	bl	800b268 <nm_read_reg_with_ret>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d004      	beq.n	800accc <nmi_get_chipid+0x28>
			chipid = 0;
 800acc2:	4b2b      	ldr	r3, [pc, #172]	@ (800ad70 <nmi_get_chipid+0xcc>)
 800acc4:	2200      	movs	r2, #0
 800acc6:	601a      	str	r2, [r3, #0]
			return 0;
 800acc8:	2300      	movs	r3, #0
 800acca:	e04c      	b.n	800ad66 <nmi_get_chipid+0xc2>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 800accc:	1d3b      	adds	r3, r7, #4
 800acce:	4619      	mov	r1, r3
 800acd0:	f241 30f4 	movw	r0, #5108	@ 0x13f4
 800acd4:	f000 fac8 	bl	800b268 <nm_read_reg_with_ret>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d004      	beq.n	800ace8 <nmi_get_chipid+0x44>
			chipid = 0;
 800acde:	4b24      	ldr	r3, [pc, #144]	@ (800ad70 <nmi_get_chipid+0xcc>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	601a      	str	r2, [r3, #0]
			return 0;
 800ace4:	2300      	movs	r3, #0
 800ace6:	e03e      	b.n	800ad66 <nmi_get_chipid+0xc2>
		}

		if (chipid == 0x1002a0)  {
 800ace8:	4b21      	ldr	r3, [pc, #132]	@ (800ad70 <nmi_get_chipid+0xcc>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a21      	ldr	r2, [pc, #132]	@ (800ad74 <nmi_get_chipid+0xd0>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d106      	bne.n	800ad00 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d028      	beq.n	800ad4a <nmi_get_chipid+0xa6>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
 800acf8:	4b1d      	ldr	r3, [pc, #116]	@ (800ad70 <nmi_get_chipid+0xcc>)
 800acfa:	4a1f      	ldr	r2, [pc, #124]	@ (800ad78 <nmi_get_chipid+0xd4>)
 800acfc:	601a      	str	r2, [r3, #0]
 800acfe:	e024      	b.n	800ad4a <nmi_get_chipid+0xa6>
			}
		} else if(chipid == 0x1002b0) {
 800ad00:	4b1b      	ldr	r3, [pc, #108]	@ (800ad70 <nmi_get_chipid+0xcc>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a1d      	ldr	r2, [pc, #116]	@ (800ad7c <nmi_get_chipid+0xd8>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d10d      	bne.n	800ad26 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2b03      	cmp	r3, #3
 800ad0e:	d01c      	beq.n	800ad4a <nmi_get_chipid+0xa6>
			} else if(rfrevid == 4) { /* 1002B1 */
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b04      	cmp	r3, #4
 800ad14:	d103      	bne.n	800ad1e <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
 800ad16:	4b16      	ldr	r3, [pc, #88]	@ (800ad70 <nmi_get_chipid+0xcc>)
 800ad18:	4a19      	ldr	r2, [pc, #100]	@ (800ad80 <nmi_get_chipid+0xdc>)
 800ad1a:	601a      	str	r2, [r3, #0]
 800ad1c:	e015      	b.n	800ad4a <nmi_get_chipid+0xa6>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
 800ad1e:	4b14      	ldr	r3, [pc, #80]	@ (800ad70 <nmi_get_chipid+0xcc>)
 800ad20:	4a18      	ldr	r2, [pc, #96]	@ (800ad84 <nmi_get_chipid+0xe0>)
 800ad22:	601a      	str	r2, [r3, #0]
 800ad24:	e011      	b.n	800ad4a <nmi_get_chipid+0xa6>
			}
		}else if(chipid == 0x1000F0) {
 800ad26:	4b12      	ldr	r3, [pc, #72]	@ (800ad70 <nmi_get_chipid+0xcc>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a17      	ldr	r2, [pc, #92]	@ (800ad88 <nmi_get_chipid+0xe4>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d10c      	bne.n	800ad4a <nmi_get_chipid+0xa6>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
 800ad30:	490f      	ldr	r1, [pc, #60]	@ (800ad70 <nmi_get_chipid+0xcc>)
 800ad32:	f44f 106c 	mov.w	r0, #3866624	@ 0x3b0000
 800ad36:	f000 fa97 	bl	800b268 <nm_read_reg_with_ret>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d004      	beq.n	800ad4a <nmi_get_chipid+0xa6>
			chipid = 0;
 800ad40:	4b0b      	ldr	r3, [pc, #44]	@ (800ad70 <nmi_get_chipid+0xcc>)
 800ad42:	2200      	movs	r2, #0
 800ad44:	601a      	str	r2, [r3, #0]
			return 0;
 800ad46:	2300      	movs	r3, #0
 800ad48:	e00d      	b.n	800ad66 <nmi_get_chipid+0xc2>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
 800ad4a:	4b09      	ldr	r3, [pc, #36]	@ (800ad70 <nmi_get_chipid+0xcc>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800ad52:	4a07      	ldr	r2, [pc, #28]	@ (800ad70 <nmi_get_chipid+0xcc>)
 800ad54:	6013      	str	r3, [r2, #0]
		chipid |= 0x050000;
 800ad56:	4b06      	ldr	r3, [pc, #24]	@ (800ad70 <nmi_get_chipid+0xcc>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800ad5e:	4a04      	ldr	r2, [pc, #16]	@ (800ad70 <nmi_get_chipid+0xcc>)
 800ad60:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
 800ad62:	4b03      	ldr	r3, [pc, #12]	@ (800ad70 <nmi_get_chipid+0xcc>)
 800ad64:	681b      	ldr	r3, [r3, #0]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	20000638 	.word	0x20000638
 800ad74:	001002a0 	.word	0x001002a0
 800ad78:	001002a1 	.word	0x001002a1
 800ad7c:	001002b0 	.word	0x001002b0
 800ad80:	001002b1 	.word	0x001002b1
 800ad84:	001002b2 	.word	0x001002b2
 800ad88:	001000f0 	.word	0x001000f0

0800ad8c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800ad92:	2300      	movs	r3, #0
 800ad94:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800ad96:	463b      	mov	r3, r7
 800ad98:	4619      	mov	r1, r3
 800ad9a:	2010      	movs	r0, #16
 800ad9c:	f000 fa64 	bl	800b268 <nm_read_reg_with_ret>
 800ada0:	4603      	mov	r3, r0
 800ada2:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS) goto ERR1;
 800ada4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d144      	bne.n	800ae36 <chip_sleep+0xaa>
		if((reg & NBIT0) == 0) break;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	f003 0301 	and.w	r3, r3, #1
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d000      	beq.n	800adb8 <chip_sleep+0x2c>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800adb6:	e7ee      	b.n	800ad96 <chip_sleep+0xa>
		if((reg & NBIT0) == 0) break;
 800adb8:	bf00      	nop
	}

	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800adba:	463b      	mov	r3, r7
 800adbc:	4619      	mov	r1, r3
 800adbe:	2001      	movs	r0, #1
 800adc0:	f000 fa52 	bl	800b268 <nm_read_reg_with_ret>
 800adc4:	4603      	mov	r3, r0
 800adc6:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800adc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d134      	bne.n	800ae3a <chip_sleep+0xae>
	if(reg & NBIT1)
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	f003 0302 	and.w	r3, r3, #2
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00e      	beq.n	800adf8 <chip_sleep+0x6c>
	{
		reg &=~NBIT1;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	f023 0302 	bic.w	r3, r3, #2
 800ade0:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	4619      	mov	r1, r3
 800ade6:	2001      	movs	r0, #1
 800ade8:	f000 fa4c 	bl	800b284 <nm_write_reg>
 800adec:	4603      	mov	r3, r0
 800adee:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800adf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d122      	bne.n	800ae3e <chip_sleep+0xb2>
	}

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800adf8:	463b      	mov	r3, r7
 800adfa:	4619      	mov	r1, r3
 800adfc:	200b      	movs	r0, #11
 800adfe:	f000 fa33 	bl	800b268 <nm_read_reg_with_ret>
 800ae02:	4603      	mov	r3, r0
 800ae04:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800ae06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d119      	bne.n	800ae42 <chip_sleep+0xb6>
	if(reg & NBIT0)
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	f003 0301 	and.w	r3, r3, #1
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d016      	beq.n	800ae46 <chip_sleep+0xba>
	{
		reg &= ~NBIT0;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	f023 0301 	bic.w	r3, r3, #1
 800ae1e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	4619      	mov	r1, r3
 800ae24:	200b      	movs	r0, #11
 800ae26:	f000 fa2d 	bl	800b284 <nm_write_reg>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800ae2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae32:	2b00      	cmp	r3, #0
	}

ERR1:
 800ae34:	e007      	b.n	800ae46 <chip_sleep+0xba>
		if(ret != M2M_SUCCESS) goto ERR1;
 800ae36:	bf00      	nop
 800ae38:	e006      	b.n	800ae48 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800ae3a:	bf00      	nop
 800ae3c:	e004      	b.n	800ae48 <chip_sleep+0xbc>
		if(ret != M2M_SUCCESS)goto ERR1;
 800ae3e:	bf00      	nop
 800ae40:	e002      	b.n	800ae48 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800ae42:	bf00      	nop
 800ae44:	e000      	b.n	800ae48 <chip_sleep+0xbc>
ERR1:
 800ae46:	bf00      	nop
	return ret;
 800ae48:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <chip_wake>:
sint8 chip_wake(void)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	73fb      	strb	r3, [r7, #15]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	607b      	str	r3, [r7, #4]
 800ae62:	2300      	movs	r3, #0
 800ae64:	603b      	str	r3, [r7, #0]
 800ae66:	2300      	movs	r3, #0
 800ae68:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800ae6a:	1d3b      	adds	r3, r7, #4
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	200b      	movs	r0, #11
 800ae70:	f000 f9fa 	bl	800b268 <nm_read_reg_with_ret>
 800ae74:	4603      	mov	r3, r0
 800ae76:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800ae78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d16d      	bne.n	800af5c <chip_wake+0x108>

	if(!(reg & NBIT0))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10c      	bne.n	800aea4 <chip_wake+0x50>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f043 0301 	orr.w	r3, r3, #1
 800ae90:	4619      	mov	r1, r3
 800ae92:	200b      	movs	r0, #11
 800ae94:	f000 f9f6 	bl	800b284 <nm_write_reg>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800ae9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d15d      	bne.n	800af60 <chip_wake+0x10c>
	}

	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800aea4:	1d3b      	adds	r3, r7, #4
 800aea6:	4619      	mov	r1, r3
 800aea8:	2001      	movs	r0, #1
 800aeaa:	f000 f9dd 	bl	800b268 <nm_read_reg_with_ret>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800aeb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d154      	bne.n	800af64 <chip_wake+0x110>
	/* Set bit 1 */
	if(!(reg & NBIT1))
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f003 0302 	and.w	r3, r3, #2
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d000      	beq.n	800aec6 <chip_wake+0x72>
 800aec4:	e00d      	b.n	800aee2 <chip_wake+0x8e>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f043 0302 	orr.w	r3, r3, #2
 800aecc:	4619      	mov	r1, r3
 800aece:	2001      	movs	r0, #1
 800aed0:	f000 f9d8 	bl	800b284 <nm_write_reg>
 800aed4:	4603      	mov	r3, r0
 800aed6:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 800aed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d000      	beq.n	800aee2 <chip_wake+0x8e>
 800aee0:	e041      	b.n	800af66 <chip_wake+0x112>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 800aee2:	463b      	mov	r3, r7
 800aee4:	4619      	mov	r1, r3
 800aee6:	200f      	movs	r0, #15
 800aee8:	f000 f9be 	bl	800b268 <nm_read_reg_with_ret>
 800aeec:	4603      	mov	r3, r0
 800aeee:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) {
 800aef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d010      	beq.n	800af1a <chip_wake+0xc6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
 800aef8:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 800aefc:	491d      	ldr	r1, [pc, #116]	@ (800af74 <chip_wake+0x120>)
 800aefe:	481e      	ldr	r0, [pc, #120]	@ (800af78 <chip_wake+0x124>)
 800af00:	f001 fde2 	bl	800cac8 <iprintf>
 800af04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	4619      	mov	r1, r3
 800af0c:	481b      	ldr	r0, [pc, #108]	@ (800af7c <chip_wake+0x128>)
 800af0e:	f001 fddb 	bl	800cac8 <iprintf>
 800af12:	200d      	movs	r0, #13
 800af14:	f001 fdea 	bl	800caec <putchar>
			goto _WAKE_EXIT;
 800af18:	e025      	b.n	800af66 <chip_wake+0x112>
		}
		if(clk_status_reg & NBIT2) {
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	f003 0304 	and.w	r3, r3, #4
 800af20:	2b00      	cmp	r3, #0
 800af22:	d117      	bne.n	800af54 <chip_wake+0x100>
			break;
		}
		nm_bsp_sleep(2);
 800af24:	2002      	movs	r0, #2
 800af26:	f7fe fb55 	bl	80095d4 <nm_bsp_sleep>
		trials++;
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	3301      	adds	r3, #1
 800af2e:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	2b04      	cmp	r3, #4
 800af34:	d9d5      	bls.n	800aee2 <chip_wake+0x8e>
		{
			M2M_ERR("Failed to wakup the chip\n");
 800af36:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800af3a:	490e      	ldr	r1, [pc, #56]	@ (800af74 <chip_wake+0x120>)
 800af3c:	480e      	ldr	r0, [pc, #56]	@ (800af78 <chip_wake+0x124>)
 800af3e:	f001 fdc3 	bl	800cac8 <iprintf>
 800af42:	480f      	ldr	r0, [pc, #60]	@ (800af80 <chip_wake+0x12c>)
 800af44:	f001 fe30 	bl	800cba8 <puts>
 800af48:	200d      	movs	r0, #13
 800af4a:	f001 fdcf 	bl	800caec <putchar>
			ret = M2M_ERR_TIME_OUT;
 800af4e:	23fc      	movs	r3, #252	@ 0xfc
 800af50:	73fb      	strb	r3, [r7, #15]
			goto _WAKE_EXIT;
 800af52:	e008      	b.n	800af66 <chip_wake+0x112>
			break;
 800af54:	bf00      	nop
		}
	}while(1);

	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
 800af56:	f000 f96f 	bl	800b238 <nm_bus_reset>
 800af5a:	e004      	b.n	800af66 <chip_wake+0x112>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800af5c:	bf00      	nop
 800af5e:	e002      	b.n	800af66 <chip_wake+0x112>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800af60:	bf00      	nop
 800af62:	e000      	b.n	800af66 <chip_wake+0x112>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800af64:	bf00      	nop

_WAKE_EXIT:
	return ret;
 800af66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	0800e840 	.word	0x0800e840
 800af78:	0800df9c 	.word	0x0800df9c
 800af7c:	0800dfb0 	.word	0x0800dfb0
 800af80:	0800dfc8 	.word	0x0800dfc8

0800af84 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b088      	sub	sp, #32
 800af88:	af00      	add	r7, sp, #0
 800af8a:	4603      	mov	r3, r0
 800af8c:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800af8e:	2300      	movs	r3, #0
 800af90:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800af92:	2300      	movs	r3, #0
 800af94:	61bb      	str	r3, [r7, #24]
 800af96:	2300      	movs	r3, #0
 800af98:	617b      	str	r3, [r7, #20]
	uint32 u32GpReg1 = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	613b      	str	r3, [r7, #16]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
 800af9e:	4b44      	ldr	r3, [pc, #272]	@ (800b0b0 <wait_for_bootrom+0x12c>)
 800afa0:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
 800afa2:	2300      	movs	r3, #0
 800afa4:	61bb      	str	r3, [r7, #24]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800afa6:	f241 0014 	movw	r0, #4116	@ 0x1014
 800afaa:	f000 f951 	bl	800b250 <nm_read_reg>
 800afae:	61b8      	str	r0, [r7, #24]
		if (reg & 0x80000000) {
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	db03      	blt.n	800afbe <wait_for_bootrom+0x3a>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
 800afb6:	2001      	movs	r0, #1
 800afb8:	f7fe fb0c 	bl	80095d4 <nm_bsp_sleep>
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800afbc:	e7f3      	b.n	800afa6 <wait_for_bootrom+0x22>
			break;
 800afbe:	bf00      	nop
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
 800afc0:	483c      	ldr	r0, [pc, #240]	@ (800b0b4 <wait_for_bootrom+0x130>)
 800afc2:	f000 f945 	bl	800b250 <nm_read_reg>
 800afc6:	61b8      	str	r0, [r7, #24]
	reg &= 0x1;
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	f003 0301 	and.w	r3, r3, #1
 800afce:	61bb      	str	r3, [r7, #24]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d119      	bne.n	800b00a <wait_for_bootrom+0x86>
	{
		reg = 0;
 800afd6:	2300      	movs	r3, #0
 800afd8:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
 800afda:	e012      	b.n	800b002 <wait_for_bootrom+0x7e>
		{
			nm_bsp_sleep(1);
 800afdc:	2001      	movs	r0, #1
 800afde:	f7fe faf9 	bl	80095d4 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
 800afe2:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 800afe6:	f000 f933 	bl	800b250 <nm_read_reg>
 800afea:	61b8      	str	r0, [r7, #24]

			if(++cnt > (uint32)TIMEOUT)
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	3301      	adds	r3, #1
 800aff0:	617b      	str	r3, [r7, #20]
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800aff8:	4293      	cmp	r3, r2
 800affa:	d902      	bls.n	800b002 <wait_for_bootrom+0x7e>
			{
				M2M_DBG("failed to load firmware from flash.\n");
				ret = M2M_ERR_INIT;
 800affc:	23fb      	movs	r3, #251	@ 0xfb
 800affe:	77fb      	strb	r3, [r7, #31]
				goto ERR2;
 800b000:	e04f      	b.n	800b0a2 <wait_for_bootrom+0x11e>
		while(reg != M2M_FINISH_BOOT_ROM)
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	4a2c      	ldr	r2, [pc, #176]	@ (800b0b8 <wait_for_bootrom+0x134>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d1e8      	bne.n	800afdc <wait_for_bootrom+0x58>
			}
		}
	}

	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
 800b00a:	79fb      	ldrb	r3, [r7, #7]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d10a      	bne.n	800b026 <wait_for_bootrom+0xa2>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800b010:	492a      	ldr	r1, [pc, #168]	@ (800b0bc <wait_for_bootrom+0x138>)
 800b012:	482b      	ldr	r0, [pc, #172]	@ (800b0c0 <wait_for_bootrom+0x13c>)
 800b014:	f000 f936 	bl	800b284 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
 800b018:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 800b01c:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b020:	f000 f930 	bl	800b284 <nm_write_reg>
 800b024:	e01c      	b.n	800b060 <wait_for_bootrom+0xdc>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
 800b026:	79fb      	ldrb	r3, [r7, #7]
 800b028:	2b03      	cmp	r3, #3
 800b02a:	d109      	bne.n	800b040 <wait_for_bootrom+0xbc>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800b02c:	4923      	ldr	r1, [pc, #140]	@ (800b0bc <wait_for_bootrom+0x138>)
 800b02e:	4824      	ldr	r0, [pc, #144]	@ (800b0c0 <wait_for_bootrom+0x13c>)
 800b030:	f000 f928 	bl	800b284 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
 800b034:	2100      	movs	r1, #0
 800b036:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b03a:	f000 f923 	bl	800b284 <nm_write_reg>
 800b03e:	e00f      	b.n	800b060 <wait_for_bootrom+0xdc>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
 800b040:	79fb      	ldrb	r3, [r7, #7]
 800b042:	2b04      	cmp	r3, #4
 800b044:	d107      	bne.n	800b056 <wait_for_bootrom+0xd2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
 800b046:	2380      	movs	r3, #128	@ 0x80
 800b048:	613b      	str	r3, [r7, #16]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800b04a:	68f9      	ldr	r1, [r7, #12]
 800b04c:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b050:	f000 f918 	bl	800b284 <nm_write_reg>
 800b054:	e004      	b.n	800b060 <wait_for_bootrom+0xdc>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800b056:	68f9      	ldr	r1, [r7, #12]
 800b058:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b05c:	f000 f912 	bl	800b284 <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
 800b060:	f7ff fe20 	bl	800aca4 <nmi_get_chipid>
 800b064:	4603      	mov	r3, r0
 800b066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b06a:	f5b3 7f68 	cmp.w	r3, #928	@ 0x3a0
 800b06e:	d306      	bcc.n	800b07e <wait_for_bootrom+0xfa>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	f043 0302 	orr.w	r3, r3, #2
 800b076:	4618      	mov	r0, r3
 800b078:	f7ff fd9a 	bl	800abb0 <chip_apply_conf>
 800b07c:	e002      	b.n	800b084 <wait_for_bootrom+0x100>
	} else {
		chip_apply_conf(u32GpReg1);
 800b07e:	6938      	ldr	r0, [r7, #16]
 800b080:	f7ff fd96 	bl	800abb0 <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
 800b084:	480f      	ldr	r0, [pc, #60]	@ (800b0c4 <wait_for_bootrom+0x140>)
 800b086:	f001 fd1f 	bl	800cac8 <iprintf>
 800b08a:	68f9      	ldr	r1, [r7, #12]
 800b08c:	480e      	ldr	r0, [pc, #56]	@ (800b0c8 <wait_for_bootrom+0x144>)
 800b08e:	f001 fd1b 	bl	800cac8 <iprintf>
 800b092:	200d      	movs	r0, #13
 800b094:	f001 fd2a 	bl	800caec <putchar>

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
 800b098:	490c      	ldr	r1, [pc, #48]	@ (800b0cc <wait_for_bootrom+0x148>)
 800b09a:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 800b09e:	f000 f8f1 	bl	800b284 <nm_write_reg>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
 800b0a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3720      	adds	r7, #32
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	13771377 	.word	0x13771377
 800b0b4:	000207bc 	.word	0x000207bc
 800b0b8:	10add09e 	.word	0x10add09e
 800b0bc:	3c1cd57d 	.word	0x3c1cd57d
 800b0c0:	000207ac 	.word	0x000207ac
 800b0c4:	0800dfe4 	.word	0x0800dfe4
 800b0c8:	0800dff0 	.word	0x0800dff0
 800b0cc:	ef522f61 	.word	0xef522f61

0800b0d0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b088      	sub	sp, #32
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	61bb      	str	r3, [r7, #24]
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
 800b0e6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800b0ea:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
 800b0ec:	f241 038c 	movw	r3, #4236	@ 0x108c
 800b0f0:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 800b0f2:	4b1a      	ldr	r3, [pc, #104]	@ (800b15c <wait_for_firmware_start+0x8c>)
 800b0f4:	60bb      	str	r3, [r7, #8]

	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
 800b0f6:	79fb      	ldrb	r3, [r7, #7]
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	d002      	beq.n	800b102 <wait_for_firmware_start+0x32>
 800b0fc:	79fb      	ldrb	r3, [r7, #7]
 800b0fe:	2b03      	cmp	r3, #3
 800b100:	d116      	bne.n	800b130 <wait_for_firmware_start+0x60>
		regAddress = NMI_REV_REG;
 800b102:	4b17      	ldr	r3, [pc, #92]	@ (800b160 <wait_for_firmware_start+0x90>)
 800b104:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
 800b106:	4b17      	ldr	r3, [pc, #92]	@ (800b164 <wait_for_firmware_start+0x94>)
 800b108:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}


	while (checkValue != reg)
 800b10a:	e011      	b.n	800b130 <wait_for_firmware_start+0x60>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
 800b10c:	2002      	movs	r0, #2
 800b10e:	f7fe fa61 	bl	80095d4 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	4618      	mov	r0, r3
 800b116:	f000 f89b 	bl	800b250 <nm_read_reg>
 800b11a:	61b8      	str	r0, [r7, #24]
		if(++cnt >= u32Timeout)
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	3301      	adds	r3, #1
 800b120:	617b      	str	r3, [r7, #20]
 800b122:	697a      	ldr	r2, [r7, #20]
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	429a      	cmp	r2, r3
 800b128:	d302      	bcc.n	800b130 <wait_for_firmware_start+0x60>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
 800b12a:	23fb      	movs	r3, #251	@ 0xfb
 800b12c:	77fb      	strb	r3, [r7, #31]
			goto ERR;
 800b12e:	e00e      	b.n	800b14e <wait_for_firmware_start+0x7e>
	while (checkValue != reg)
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	69ba      	ldr	r2, [r7, #24]
 800b134:	429a      	cmp	r2, r3
 800b136:	d1e9      	bne.n	800b10c <wait_for_firmware_start+0x3c>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	4a08      	ldr	r2, [pc, #32]	@ (800b15c <wait_for_firmware_start+0x8c>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d105      	bne.n	800b14c <wait_for_firmware_start+0x7c>
	{
		nm_write_reg(NMI_STATE_REG, 0);
 800b140:	2100      	movs	r1, #0
 800b142:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b146:	f000 f89d 	bl	800b284 <nm_write_reg>
 800b14a:	e000      	b.n	800b14e <wait_for_firmware_start+0x7e>
	}
ERR:
 800b14c:	bf00      	nop
	return ret;
 800b14e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3720      	adds	r7, #32
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	02532636 	.word	0x02532636
 800b160:	000207ac 	.word	0x000207ac
 800b164:	d75dc1c3 	.word	0xd75dc1c3

0800b168 <chip_deinit>:

sint8 chip_deinit(void)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800b16e:	2300      	movs	r3, #0
 800b170:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 800b172:	463b      	mov	r3, r7
 800b174:	4619      	mov	r1, r3
 800b176:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800b17a:	f000 f875 	bl	800b268 <nm_read_reg_with_ret>
 800b17e:	4603      	mov	r3, r0
 800b180:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800b182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00c      	beq.n	800b1a4 <chip_deinit+0x3c>
		M2M_ERR("failed to de-initialize\n");
 800b18a:	f240 2205 	movw	r2, #517	@ 0x205
 800b18e:	4917      	ldr	r1, [pc, #92]	@ (800b1ec <chip_deinit+0x84>)
 800b190:	4817      	ldr	r0, [pc, #92]	@ (800b1f0 <chip_deinit+0x88>)
 800b192:	f001 fc99 	bl	800cac8 <iprintf>
 800b196:	4817      	ldr	r0, [pc, #92]	@ (800b1f4 <chip_deinit+0x8c>)
 800b198:	f001 fd06 	bl	800cba8 <puts>
 800b19c:	200d      	movs	r0, #13
 800b19e:	f001 fca5 	bl	800caec <putchar>
		goto ERR1;
 800b1a2:	e01d      	b.n	800b1e0 <chip_deinit+0x78>
	}
	reg &= ~(1 << 10);
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b1aa:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800b1b4:	f000 f866 	bl	800b284 <nm_write_reg>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800b1bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00c      	beq.n	800b1de <chip_deinit+0x76>
		M2M_ERR("failed to de-initialize\n");
 800b1c4:	f240 220b 	movw	r2, #523	@ 0x20b
 800b1c8:	4908      	ldr	r1, [pc, #32]	@ (800b1ec <chip_deinit+0x84>)
 800b1ca:	4809      	ldr	r0, [pc, #36]	@ (800b1f0 <chip_deinit+0x88>)
 800b1cc:	f001 fc7c 	bl	800cac8 <iprintf>
 800b1d0:	4808      	ldr	r0, [pc, #32]	@ (800b1f4 <chip_deinit+0x8c>)
 800b1d2:	f001 fce9 	bl	800cba8 <puts>
 800b1d6:	200d      	movs	r0, #13
 800b1d8:	f001 fc88 	bl	800caec <putchar>
		goto ERR1;
 800b1dc:	e000      	b.n	800b1e0 <chip_deinit+0x78>
	}

ERR1:
 800b1de:	bf00      	nop
	return ret;
 800b1e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	0800e84c 	.word	0x0800e84c
 800b1f0:	0800df9c 	.word	0x0800df9c
 800b1f4:	0800e008 	.word	0x0800e008

0800b1f8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800b200:	2300      	movs	r3, #0
 800b202:	73fb      	strb	r3, [r7, #15]
	ret = nm_bus_init(pvInitVal);
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f7fe fab7 	bl	8009778 <nm_bus_init>
 800b20a:	4603      	mov	r3, r0
 800b20c:	73fb      	strb	r3, [r7, #15]
	return ret;
 800b20e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b082      	sub	sp, #8
 800b21e:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800b220:	2300      	movs	r3, #0
 800b222:	71fb      	strb	r3, [r7, #7]
	ret = nm_bus_deinit();
 800b224:	f7fe fafa 	bl	800981c <nm_bus_deinit>
 800b228:	4603      	mov	r3, r0
 800b22a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800b22c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800b23e:	2300      	movs	r3, #0
 800b240:	71fb      	strb	r3, [r7, #7]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
 800b242:	f000 fce5 	bl	800bc10 <nm_spi_reset>
 800b246:	4603      	mov	r3, r0
#else
#error "Please define bus usage"
#endif

	return ret;
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f001 f9c3 	bl	800c5e4 <nm_spi_read_reg>
 800b25e:	4603      	mov	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Please define bus usage"
#endif

}
 800b260:	4618      	mov	r0, r3
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 800b272:	6839      	ldr	r1, [r7, #0]
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 ffa1 	bl	800c1bc <nm_spi_read_reg_with_ret>
 800b27a:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Please define bus usage"
#endif
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
 800b28e:	6839      	ldr	r1, [r7, #0]
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 fe5d 	bl	800bf50 <nm_spi_write_reg>
 800b296:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Please define bus usage"
#endif
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
 800b2ae:	88fb      	ldrh	r3, [r7, #6]
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	68b9      	ldr	r1, [r7, #8]
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f001 f9a4 	bl	800c602 <nm_spi_read_block>
 800b2ba:	4603      	mov	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Please define bus usage"
#endif

}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b086      	sub	sp, #24
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800b2d0:	4b20      	ldr	r3, [pc, #128]	@ (800b354 <nm_read_block+0x90>)
 800b2d2:	881b      	ldrh	r3, [r3, #0]
 800b2d4:	3b08      	subs	r3, #8
 800b2d6:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800b2e0:	8a3b      	ldrh	r3, [r7, #16]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d80f      	bhi.n	800b308 <nm_read_block+0x44>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	b292      	uxth	r2, r2
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f7ff ffd3 	bl	800b2a0 <p_nm_read_block>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	7cfb      	ldrb	r3, [r7, #19]
 800b300:	4413      	add	r3, r2
 800b302:	b2db      	uxtb	r3, r3
 800b304:	74fb      	strb	r3, [r7, #19]
			break;
 800b306:	e01f      	b.n	800b348 <nm_read_block+0x84>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	4413      	add	r3, r2
 800b30e:	8a3a      	ldrh	r2, [r7, #16]
 800b310:	4619      	mov	r1, r3
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f7ff ffc4 	bl	800b2a0 <p_nm_read_block>
 800b318:	4603      	mov	r3, r0
 800b31a:	b2da      	uxtb	r2, r3
 800b31c:	7cfb      	ldrb	r3, [r7, #19]
 800b31e:	4413      	add	r3, r2
 800b320:	b2db      	uxtb	r3, r3
 800b322:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800b324:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d10c      	bne.n	800b346 <nm_read_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800b32c:	8a3b      	ldrh	r3, [r7, #16]
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800b334:	8a3b      	ldrh	r3, [r7, #16]
 800b336:	697a      	ldr	r2, [r7, #20]
 800b338:	4413      	add	r3, r2
 800b33a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800b33c:	8a3b      	ldrh	r3, [r7, #16]
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	4413      	add	r3, r2
 800b342:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800b344:	e7cc      	b.n	800b2e0 <nm_read_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800b346:	bf00      	nop
		}
	}

	return s8Ret;
 800b348:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3718      	adds	r7, #24
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	2000000c 	.word	0x2000000c

0800b358 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	4613      	mov	r3, r2
 800b364:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
 800b366:	88fb      	ldrh	r3, [r7, #6]
 800b368:	461a      	mov	r2, r3
 800b36a:	68b9      	ldr	r1, [r7, #8]
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f001 f966 	bl	800c63e <nm_spi_write_block>
 800b372:	4603      	mov	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Please define bus usage"
#endif

}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800b388:	4b20      	ldr	r3, [pc, #128]	@ (800b40c <nm_write_block+0x90>)
 800b38a:	881b      	ldrh	r3, [r3, #0]
 800b38c:	3b08      	subs	r3, #8
 800b38e:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800b390:	2300      	movs	r3, #0
 800b392:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800b394:	2300      	movs	r3, #0
 800b396:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800b398:	8a3b      	ldrh	r3, [r7, #16]
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d80f      	bhi.n	800b3c0 <nm_write_block+0x44>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	b292      	uxth	r2, r2
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	68f8      	ldr	r0, [r7, #12]
 800b3ae:	f7ff ffd3 	bl	800b358 <p_nm_write_block>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	b2da      	uxtb	r2, r3
 800b3b6:	7cfb      	ldrb	r3, [r7, #19]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	74fb      	strb	r3, [r7, #19]
			break;
 800b3be:	e01f      	b.n	800b400 <nm_write_block+0x84>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800b3c0:	68ba      	ldr	r2, [r7, #8]
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	8a3a      	ldrh	r2, [r7, #16]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f7ff ffc4 	bl	800b358 <p_nm_write_block>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	b2da      	uxtb	r2, r3
 800b3d4:	7cfb      	ldrb	r3, [r7, #19]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800b3dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d10c      	bne.n	800b3fe <nm_write_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800b3e4:	8a3b      	ldrh	r3, [r7, #16]
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800b3ec:	8a3b      	ldrh	r3, [r7, #16]
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800b3f4:	8a3b      	ldrh	r3, [r7, #16]
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800b3fc:	e7cc      	b.n	800b398 <nm_write_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800b3fe:	bf00      	nop
		}
	}

	return s8Ret;
 800b400:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3718      	adds	r7, #24
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	2000000c 	.word	0x2000000c

0800b410 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b088      	sub	sp, #32
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
 800b418:	2300      	movs	r3, #0
 800b41a:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
 800b41c:	2300      	movs	r3, #0
 800b41e:	77fb      	strb	r3, [r7, #31]
	tstrGpRegs strgp = {0};
 800b420:	f107 030c 	add.w	r3, r7, #12
 800b424:	2200      	movs	r2, #0
 800b426:	601a      	str	r2, [r3, #0]
 800b428:	605a      	str	r2, [r3, #4]
	if (pstrRev != NULL)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f000 8086 	beq.w	800b53e <nm_get_firmware_full_info+0x12e>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
 800b432:	2228      	movs	r2, #40	@ 0x28
 800b434:	2100      	movs	r1, #0
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f7fe fa18 	bl	800986c <m2m_memset>
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
 800b43c:	f107 0314 	add.w	r3, r7, #20
 800b440:	4619      	mov	r1, r3
 800b442:	4842      	ldr	r0, [pc, #264]	@ (800b54c <nm_get_firmware_full_info+0x13c>)
 800b444:	f7ff ff10 	bl	800b268 <nm_read_reg_with_ret>
 800b448:	4603      	mov	r3, r0
 800b44a:	77fb      	strb	r3, [r7, #31]
		if(ret == M2M_SUCCESS)
 800b44c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d174      	bne.n	800b53e <nm_get_firmware_full_info+0x12e>
		{
			if(reg != 0)
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d06e      	beq.n	800b538 <nm_get_firmware_full_info+0x128>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800b460:	f107 010c 	add.w	r1, r7, #12
 800b464:	2208      	movs	r2, #8
 800b466:	4618      	mov	r0, r3
 800b468:	f7ff ff2c 	bl	800b2c4 <nm_read_block>
 800b46c:	4603      	mov	r3, r0
 800b46e:	77fb      	strb	r3, [r7, #31]
				if(ret == M2M_SUCCESS)
 800b470:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d163      	bne.n	800b540 <nm_get_firmware_full_info+0x130>
				{
					reg = strgp.u32Firmware_Ota_rev;
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	b29b      	uxth	r3, r3
 800b480:	617b      	str	r3, [r7, #20]
					if(reg != 0)
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d054      	beq.n	800b532 <nm_get_firmware_full_info+0x122>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800b48e:	2228      	movs	r2, #40	@ 0x28
 800b490:	6879      	ldr	r1, [r7, #4]
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff ff16 	bl	800b2c4 <nm_read_block>
 800b498:	4603      	mov	r3, r0
 800b49a:	77fb      	strb	r3, [r7, #31]
						if(ret == M2M_SUCCESS)
 800b49c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d14d      	bne.n	800b540 <nm_get_firmware_full_info+0x130>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	791b      	ldrb	r3, [r3, #4]
 800b4a8:	021b      	lsls	r3, r3, #8
 800b4aa:	b21a      	sxth	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	795b      	ldrb	r3, [r3, #5]
 800b4b0:	011b      	lsls	r3, r3, #4
 800b4b2:	b21b      	sxth	r3, r3
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	b21b      	sxth	r3, r3
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	b21a      	sxth	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	799b      	ldrb	r3, [r3, #6]
 800b4c0:	b21b      	sxth	r3, r3
 800b4c2:	f003 030f 	and.w	r3, r3, #15
 800b4c6:	b21b      	sxth	r3, r3
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	b21b      	sxth	r3, r3
 800b4cc:	83bb      	strh	r3, [r7, #28]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 800b4ce:	f241 3377 	movw	r3, #4983	@ 0x1377
 800b4d2:	837b      	strh	r3, [r7, #26]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	79db      	ldrb	r3, [r3, #7]
 800b4d8:	021b      	lsls	r3, r3, #8
 800b4da:	b21a      	sxth	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	7a1b      	ldrb	r3, [r3, #8]
 800b4e0:	011b      	lsls	r3, r3, #4
 800b4e2:	b21b      	sxth	r3, r3
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	b21b      	sxth	r3, r3
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	b21a      	sxth	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	7a5b      	ldrb	r3, [r3, #9]
 800b4f0:	b21b      	sxth	r3, r3
 800b4f2:	f003 030f 	and.w	r3, r3, #15
 800b4f6:	b21b      	sxth	r3, r3
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	b21b      	sxth	r3, r3
 800b4fc:	833b      	strh	r3, [r7, #24]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
 800b4fe:	8bbb      	ldrh	r3, [r7, #28]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d005      	beq.n	800b510 <nm_get_firmware_full_info+0x100>
 800b504:	8b3b      	ldrh	r3, [r7, #24]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d002      	beq.n	800b510 <nm_get_firmware_full_info+0x100>
 800b50a:	8b3b      	ldrh	r3, [r7, #24]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d102      	bne.n	800b516 <nm_get_firmware_full_info+0x106>
								ret = M2M_ERR_FAIL;
 800b510:	23f4      	movs	r3, #244	@ 0xf4
 800b512:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800b514:	e014      	b.n	800b540 <nm_get_firmware_full_info+0x130>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
 800b516:	8b7a      	ldrh	r2, [r7, #26]
 800b518:	8b3b      	ldrh	r3, [r7, #24]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d202      	bcs.n	800b524 <nm_get_firmware_full_info+0x114>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
 800b51e:	23f3      	movs	r3, #243	@ 0xf3
 800b520:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800b522:	e00d      	b.n	800b540 <nm_get_firmware_full_info+0x130>
							}
							if(curr_drv_ver >  curr_firm_ver) {
 800b524:	8b7a      	ldrh	r2, [r7, #26]
 800b526:	8bbb      	ldrh	r3, [r7, #28]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d909      	bls.n	800b540 <nm_get_firmware_full_info+0x130>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
 800b52c:	23f3      	movs	r3, #243	@ 0xf3
 800b52e:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800b530:	e006      	b.n	800b540 <nm_get_firmware_full_info+0x130>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
 800b532:	23f4      	movs	r3, #244	@ 0xf4
 800b534:	77fb      	strb	r3, [r7, #31]
 800b536:	e003      	b.n	800b540 <nm_get_firmware_full_info+0x130>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
 800b538:	23f4      	movs	r3, #244	@ 0xf4
 800b53a:	77fb      	strb	r3, [r7, #31]
 800b53c:	e000      	b.n	800b540 <nm_get_firmware_full_info+0x130>
			}
		}
	}
EXIT:
 800b53e:	bf00      	nop
	return ret;
 800b540:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b544:	4618      	mov	r0, r3
 800b546:	3720      	adds	r7, #32
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	000c0008 	.word	0x000c0008

0800b550 <nm_drv_init_hold>:
ERR1:
	return ret;
}

sint8 nm_drv_init_hold(void)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800b556:	2300      	movs	r3, #0
 800b558:	71fb      	strb	r3, [r7, #7]

	ret = nm_bus_iface_init(NULL);
 800b55a:	2000      	movs	r0, #0
 800b55c:	f7ff fe4c 	bl	800b1f8 <nm_bus_iface_init>
 800b560:	4603      	mov	r3, r0
 800b562:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) {
 800b564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d00f      	beq.n	800b58c <nm_drv_init_hold+0x3c>
		M2M_ERR("[nmi start]: fail init bus\n");
 800b56c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800b570:	4911      	ldr	r1, [pc, #68]	@ (800b5b8 <nm_drv_init_hold+0x68>)
 800b572:	4812      	ldr	r0, [pc, #72]	@ (800b5bc <nm_drv_init_hold+0x6c>)
 800b574:	f001 faa8 	bl	800cac8 <iprintf>
 800b578:	4811      	ldr	r0, [pc, #68]	@ (800b5c0 <nm_drv_init_hold+0x70>)
 800b57a:	f001 fb15 	bl	800cba8 <puts>
 800b57e:	200d      	movs	r0, #13
 800b580:	f001 fab4 	bl	800caec <putchar>
		goto ERR1;
 800b584:	bf00      	nop

	return ret;
ERR2:
	nm_bus_iface_deinit();
ERR1:
	return ret;
 800b586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b58a:	e010      	b.n	800b5ae <nm_drv_init_hold+0x5e>
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
 800b58c:	480d      	ldr	r0, [pc, #52]	@ (800b5c4 <nm_drv_init_hold+0x74>)
 800b58e:	f001 fa9b 	bl	800cac8 <iprintf>
 800b592:	f7ff fb87 	bl	800aca4 <nmi_get_chipid>
 800b596:	4603      	mov	r3, r0
 800b598:	4619      	mov	r1, r3
 800b59a:	480b      	ldr	r0, [pc, #44]	@ (800b5c8 <nm_drv_init_hold+0x78>)
 800b59c:	f001 fa94 	bl	800cac8 <iprintf>
 800b5a0:	200d      	movs	r0, #13
 800b5a2:	f001 faa3 	bl	800caec <putchar>
	nm_spi_init();
 800b5a6:	f000 ff7f 	bl	800c4a8 <nm_spi_init>
	return ret;
 800b5aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	0800e858 	.word	0x0800e858
 800b5bc:	0800e020 	.word	0x0800e020
 800b5c0:	0800e034 	.word	0x0800e034
 800b5c4:	0800e050 	.word	0x0800e050
 800b5c8:	0800e05c 	.word	0x0800e05c

0800b5cc <nm_drv_init_start>:

sint8 nm_drv_init_start(void * arg)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	73fb      	strb	r3, [r7, #15]
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	73bb      	strb	r3, [r7, #14]

	if(NULL != arg) {
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00a      	beq.n	800b5f8 <nm_drv_init_start+0x2c>
		u8Mode = *((uint8 *)arg);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	73bb      	strb	r3, [r7, #14]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
 800b5e8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d002      	beq.n	800b5f4 <nm_drv_init_start+0x28>
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
 800b5f0:	2b04      	cmp	r3, #4
 800b5f2:	d901      	bls.n	800b5f8 <nm_drv_init_start+0x2c>
			u8Mode = M2M_WIFI_MODE_NORMAL;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	73bb      	strb	r3, [r7, #14]
		}
	}

	ret = wait_for_bootrom(u8Mode);
 800b5f8:	7bbb      	ldrb	r3, [r7, #14]
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7ff fcc2 	bl	800af84 <wait_for_bootrom>
 800b600:	4603      	mov	r3, r0
 800b602:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d127      	bne.n	800b65c <nm_drv_init_start+0x90>
		goto ERR2;
	}

	ret = wait_for_firmware_start(u8Mode);
 800b60c:	7bbb      	ldrb	r3, [r7, #14]
 800b60e:	4618      	mov	r0, r3
 800b610:	f7ff fd5e 	bl	800b0d0 <wait_for_firmware_start>
 800b614:	4603      	mov	r3, r0
 800b616:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d11f      	bne.n	800b660 <nm_drv_init_start+0x94>
		goto ERR2;
	}

	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
 800b620:	7bbb      	ldrb	r3, [r7, #14]
 800b622:	2b02      	cmp	r3, #2
 800b624:	d022      	beq.n	800b66c <nm_drv_init_start+0xa0>
 800b626:	7bbb      	ldrb	r3, [r7, #14]
 800b628:	2b03      	cmp	r3, #3
 800b62a:	d01f      	beq.n	800b66c <nm_drv_init_start+0xa0>
		goto ERR1;
	} else {
		/*continue running*/
	}

	ret = enable_interrupts();
 800b62c:	f7ff faf0 	bl	800ac10 <enable_interrupts>
 800b630:	4603      	mov	r3, r0
 800b632:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00c      	beq.n	800b656 <nm_drv_init_start+0x8a>
		M2M_ERR("failed to enable interrupts..\n");
 800b63c:	f44f 72a7 	mov.w	r2, #334	@ 0x14e
 800b640:	490e      	ldr	r1, [pc, #56]	@ (800b67c <nm_drv_init_start+0xb0>)
 800b642:	480f      	ldr	r0, [pc, #60]	@ (800b680 <nm_drv_init_start+0xb4>)
 800b644:	f001 fa40 	bl	800cac8 <iprintf>
 800b648:	480e      	ldr	r0, [pc, #56]	@ (800b684 <nm_drv_init_start+0xb8>)
 800b64a:	f001 faad 	bl	800cba8 <puts>
 800b64e:	200d      	movs	r0, #13
 800b650:	f001 fa4c 	bl	800caec <putchar>
		goto ERR2;
 800b654:	e005      	b.n	800b662 <nm_drv_init_start+0x96>
	}

	return ret;
 800b656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b65a:	e00a      	b.n	800b672 <nm_drv_init_start+0xa6>
		goto ERR2;
 800b65c:	bf00      	nop
 800b65e:	e000      	b.n	800b662 <nm_drv_init_start+0x96>
		goto ERR2;
 800b660:	bf00      	nop
ERR2:
	nm_bus_iface_deinit();
 800b662:	f7ff fdda 	bl	800b21a <nm_bus_iface_deinit>
#ifdef CONF_WINC_USE_SPI
	nm_spi_deinit();
 800b666:	f000 ffaf 	bl	800c5c8 <nm_spi_deinit>
 800b66a:	e000      	b.n	800b66e <nm_drv_init_start+0xa2>
		goto ERR1;
 800b66c:	bf00      	nop
#endif
ERR1:
	return ret;
 800b66e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	0800e86c 	.word	0x0800e86c
 800b680:	0800e020 	.word	0x0800e020
 800b684:	0800e06c 	.word	0x0800e06c

0800b688 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
 800b690:	f7ff fd6a 	bl	800b168 <chip_deinit>
 800b694:	4603      	mov	r3, r0
 800b696:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00c      	beq.n	800b6ba <nm_drv_deinit+0x32>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
 800b6a0:	f240 127f 	movw	r2, #383	@ 0x17f
 800b6a4:	491e      	ldr	r1, [pc, #120]	@ (800b720 <nm_drv_deinit+0x98>)
 800b6a6:	481f      	ldr	r0, [pc, #124]	@ (800b724 <nm_drv_deinit+0x9c>)
 800b6a8:	f001 fa0e 	bl	800cac8 <iprintf>
 800b6ac:	481e      	ldr	r0, [pc, #120]	@ (800b728 <nm_drv_deinit+0xa0>)
 800b6ae:	f001 fa7b 	bl	800cba8 <puts>
 800b6b2:	200d      	movs	r0, #13
 800b6b4:	f001 fa1a 	bl	800caec <putchar>
		goto ERR1;
 800b6b8:	e02c      	b.n	800b714 <nm_drv_deinit+0x8c>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	f001 f84a 	bl	800c754 <spi_flash_enable>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b6c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00c      	beq.n	800b6e6 <nm_drv_deinit+0x5e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
 800b6cc:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 800b6d0:	4913      	ldr	r1, [pc, #76]	@ (800b720 <nm_drv_deinit+0x98>)
 800b6d2:	4814      	ldr	r0, [pc, #80]	@ (800b724 <nm_drv_deinit+0x9c>)
 800b6d4:	f001 f9f8 	bl	800cac8 <iprintf>
 800b6d8:	4814      	ldr	r0, [pc, #80]	@ (800b72c <nm_drv_deinit+0xa4>)
 800b6da:	f001 fa65 	bl	800cba8 <puts>
 800b6de:	200d      	movs	r0, #13
 800b6e0:	f001 fa04 	bl	800caec <putchar>
		goto ERR1;
 800b6e4:	e016      	b.n	800b714 <nm_drv_deinit+0x8c>
	}

	ret = nm_bus_iface_deinit();
 800b6e6:	f7ff fd98 	bl	800b21a <nm_bus_iface_deinit>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b6ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00c      	beq.n	800b710 <nm_drv_deinit+0x88>
		M2M_ERR("[nmi stop]: fail init bus\n");
 800b6f6:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 800b6fa:	4909      	ldr	r1, [pc, #36]	@ (800b720 <nm_drv_deinit+0x98>)
 800b6fc:	4809      	ldr	r0, [pc, #36]	@ (800b724 <nm_drv_deinit+0x9c>)
 800b6fe:	f001 f9e3 	bl	800cac8 <iprintf>
 800b702:	480b      	ldr	r0, [pc, #44]	@ (800b730 <nm_drv_deinit+0xa8>)
 800b704:	f001 fa50 	bl	800cba8 <puts>
 800b708:	200d      	movs	r0, #13
 800b70a:	f001 f9ef 	bl	800caec <putchar>
		goto ERR1;
 800b70e:	e001      	b.n	800b714 <nm_drv_deinit+0x8c>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
 800b710:	f000 ff5a 	bl	800c5c8 <nm_spi_deinit>
#endif

ERR1:
	return ret;
 800b714:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	0800e880 	.word	0x0800e880
 800b724:	0800e020 	.word	0x0800e020
 800b728:	0800e08c 	.word	0x0800e08c
 800b72c:	0800e0ac 	.word	0x0800e0ac
 800b730:	0800e0d0 	.word	0x0800e0d0

0800b734 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static inline sint8 nmi_spi_read(uint8 *b, uint16 sz)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	460b      	mov	r3, r1
 800b73e:	807b      	strh	r3, [r7, #2]
    return nm_spi_rw(NULL, b, sz);
 800b740:	887b      	ldrh	r3, [r7, #2]
 800b742:	461a      	mov	r2, r3
 800b744:	6879      	ldr	r1, [r7, #4]
 800b746:	2000      	movs	r0, #0
 800b748:	f7fd ffb6 	bl	80096b8 <nm_spi_rw>
 800b74c:	4603      	mov	r3, r0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <nmi_spi_write>:
static inline sint8 nmi_spi_write(uint8 *b, uint16 sz)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b082      	sub	sp, #8
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	460b      	mov	r3, r1
 800b760:	807b      	strh	r3, [r7, #2]
    return nm_spi_rw(b, NULL, sz);
 800b762:	887b      	ldrh	r3, [r7, #2]
 800b764:	461a      	mov	r2, r3
 800b766:	2100      	movs	r1, #0
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f7fd ffa5 	bl	80096b8 <nm_spi_rw>
 800b76e:	4603      	mov	r3, r0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <nmi_spi_writeread>:
static sint8 nmi_spi_writeread(uint8 *bw, uint8 *br, uint16 sz)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	4613      	mov	r3, r2
 800b784:	80fb      	strh	r3, [r7, #6]
    return nm_spi_rw(bw, br, sz);
 800b786:	88fb      	ldrh	r3, [r7, #6]
 800b788:	461a      	mov	r2, r3
 800b78a:	68b9      	ldr	r1, [r7, #8]
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f7fd ff93 	bl	80096b8 <nm_spi_rw>
 800b792:	4603      	mov	r3, r0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static inline uint8 crc7_byte(uint8 crc, uint8 data)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	460a      	mov	r2, r1
 800b7a6:	71fb      	strb	r3, [r7, #7]
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	71bb      	strb	r3, [r7, #6]
	return crc7_syndrome_table[(crc << 1) ^ data];
 800b7ac:	79fb      	ldrb	r3, [r7, #7]
 800b7ae:	005a      	lsls	r2, r3, #1
 800b7b0:	79bb      	ldrb	r3, [r7, #6]
 800b7b2:	4053      	eors	r3, r2
 800b7b4:	4a03      	ldr	r2, [pc, #12]	@ (800b7c4 <crc7_byte+0x28>)
 800b7b6:	5cd3      	ldrb	r3, [r2, r3]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr
 800b7c4:	0800e890 	.word	0x0800e890

0800b7c8 <crc7>:

static inline uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
 800b7d4:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800b7d6:	e00a      	b.n	800b7ee <crc7+0x26>
		crc = crc7_byte(crc, *buffer++);
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	1c5a      	adds	r2, r3, #1
 800b7dc:	60ba      	str	r2, [r7, #8]
 800b7de:	781a      	ldrb	r2, [r3, #0]
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7ff ffd9 	bl	800b79c <crc7_byte>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	1e5a      	subs	r2, r3, #1
 800b7f2:	607a      	str	r2, [r7, #4]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d1ef      	bne.n	800b7d8 <crc7+0x10>
	return crc;
 800b7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
	...

0800b804 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b088      	sub	sp, #32
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60b9      	str	r1, [r7, #8]
 800b80c:	607a      	str	r2, [r7, #4]
 800b80e:	603b      	str	r3, [r7, #0]
 800b810:	4603      	mov	r3, r0
 800b812:	73fb      	strb	r3, [r7, #15]
	uint8 bc[9];
	uint8 len = 5;
 800b814:	2305      	movs	r3, #5
 800b816:	77fb      	strb	r3, [r7, #31]
	sint8 result = N_OK;
 800b818:	2300      	movs	r3, #0
 800b81a:	77bb      	strb	r3, [r7, #30]

	bc[0] = cmd;
 800b81c:	7bfb      	ldrb	r3, [r7, #15]
 800b81e:	753b      	strb	r3, [r7, #20]
	switch (cmd) {
 800b820:	7bfb      	ldrb	r3, [r7, #15]
 800b822:	3bc1      	subs	r3, #193	@ 0xc1
 800b824:	2b0e      	cmp	r3, #14
 800b826:	f200 80cc 	bhi.w	800b9c2 <spi_cmd+0x1be>
 800b82a:	a201      	add	r2, pc, #4	@ (adr r2, 800b830 <spi_cmd+0x2c>)
 800b82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b830:	0800b8e9 	.word	0x0800b8e9
 800b834:	0800b8e9 	.word	0x0800b8e9
 800b838:	0800b945 	.word	0x0800b945
 800b83c:	0800b889 	.word	0x0800b889
 800b840:	0800b8b3 	.word	0x0800b8b3
 800b844:	0800b8c5 	.word	0x0800b8c5
 800b848:	0800b913 	.word	0x0800b913
 800b84c:	0800b913 	.word	0x0800b913
 800b850:	0800b989 	.word	0x0800b989
 800b854:	0800b86d 	.word	0x0800b86d
 800b858:	0800b9c3 	.word	0x0800b9c3
 800b85c:	0800b9c3 	.word	0x0800b9c3
 800b860:	0800b9c3 	.word	0x0800b9c3
 800b864:	0800b9c3 	.word	0x0800b9c3
 800b868:	0800b8d7 	.word	0x0800b8d7
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	0c1b      	lsrs	r3, r3, #16
 800b870:	b2db      	uxtb	r3, r3
 800b872:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	0a1b      	lsrs	r3, r3, #8
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b882:	2305      	movs	r3, #5
 800b884:	77fb      	strb	r3, [r7, #31]
		break;
 800b886:	e09f      	b.n	800b9c8 <spi_cmd+0x1c4>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	0a1b      	lsrs	r3, r3, #8
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800b890:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b894:	2b00      	cmp	r3, #0
 800b896:	d004      	beq.n	800b8a2 <spi_cmd+0x9e>
 800b898:	7d7b      	ldrb	r3, [r7, #21]
 800b89a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)adr;
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b8ac:	2305      	movs	r3, #5
 800b8ae:	77fb      	strb	r3, [r7, #31]
		break;
 800b8b0:	e08a      	b.n	800b9c8 <spi_cmd+0x1c4>
#if defined(CMD_TERMINATE)
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b8be:	2305      	movs	r3, #5
 800b8c0:	77fb      	strb	r3, [r7, #31]
		break;
 800b8c2:	e081      	b.n	800b9c8 <spi_cmd+0x1c4>
#endif
#if defined(CMD_REPEAT)
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b8d0:	2305      	movs	r3, #5
 800b8d2:	77fb      	strb	r3, [r7, #31]
		break;
 800b8d4:	e078      	b.n	800b9c8 <spi_cmd+0x1c4>
#endif
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
 800b8d6:	23ff      	movs	r3, #255	@ 0xff
 800b8d8:	757b      	strb	r3, [r7, #21]
		bc[2] = 0xff;
 800b8da:	23ff      	movs	r3, #255	@ 0xff
 800b8dc:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0xff;
 800b8de:	23ff      	movs	r3, #255	@ 0xff
 800b8e0:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b8e2:	2305      	movs	r3, #5
 800b8e4:	77fb      	strb	r3, [r7, #31]
		break;
 800b8e6:	e06f      	b.n	800b9c8 <spi_cmd+0x1c4>
#if defined(CMD_DMA_WRITE) || defined(CMD_DMA_READ)
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	0c1b      	lsrs	r3, r3, #16
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	0a1b      	lsrs	r3, r3, #8
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 8);
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	0a1b      	lsrs	r3, r3, #8
 800b902:	b2db      	uxtb	r3, r3
 800b904:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz);
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	767b      	strb	r3, [r7, #25]
		len = 7;
 800b90c:	2307      	movs	r3, #7
 800b90e:	77fb      	strb	r3, [r7, #31]
		break;
 800b910:	e05a      	b.n	800b9c8 <spi_cmd+0x1c4>
#endif
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	0c1b      	lsrs	r3, r3, #16
 800b916:	b2db      	uxtb	r3, r3
 800b918:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	0a1b      	lsrs	r3, r3, #8
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	b2db      	uxtb	r3, r3
 800b926:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 16);
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	0c1b      	lsrs	r3, r3, #16
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz >> 8);
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	0a1b      	lsrs	r3, r3, #8
 800b934:	b2db      	uxtb	r3, r3
 800b936:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(sz);
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800b93e:	2308      	movs	r3, #8
 800b940:	77fb      	strb	r3, [r7, #31]
		break;
 800b942:	e041      	b.n	800b9c8 <spi_cmd+0x1c4>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	0a1b      	lsrs	r3, r3, #8
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800b94c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b950:	2b00      	cmp	r3, #0
 800b952:	d004      	beq.n	800b95e <spi_cmd+0x15a>
 800b954:	7d7b      	ldrb	r3, [r7, #21]
 800b956:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr);
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	b2db      	uxtb	r3, r3
 800b962:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(u32data >> 24);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	0e1b      	lsrs	r3, r3, #24
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 16);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	0c1b      	lsrs	r3, r3, #16
 800b970:	b2db      	uxtb	r3, r3
 800b972:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 8);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	0a1b      	lsrs	r3, r3, #8
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800b982:	2308      	movs	r3, #8
 800b984:	77fb      	strb	r3, [r7, #31]
		break;
 800b986:	e01f      	b.n	800b9c8 <spi_cmd+0x1c4>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	0c1b      	lsrs	r3, r3, #16
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	0a1b      	lsrs	r3, r3, #8
 800b994:	b2db      	uxtb	r3, r3
 800b996:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(adr);
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 24);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	0e1b      	lsrs	r3, r3, #24
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 16);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	0c1b      	lsrs	r3, r3, #16
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data >> 8);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	0a1b      	lsrs	r3, r3, #8
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	76bb      	strb	r3, [r7, #26]
		bc[7] = (uint8)(u32data);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	76fb      	strb	r3, [r7, #27]
		len = 9;
 800b9bc:	2309      	movs	r3, #9
 800b9be:	77fb      	strb	r3, [r7, #31]
		break;
 800b9c0:	e002      	b.n	800b9c8 <spi_cmd+0x1c4>
	default:
		result = N_FAIL;
 800b9c2:	23ff      	movs	r3, #255	@ 0xff
 800b9c4:	77bb      	strb	r3, [r7, #30]
		break;
 800b9c6:	bf00      	nop
	}

    if(result == N_OK) {
 800b9c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d133      	bne.n	800ba38 <spi_cmd+0x234>
		if (!gu8Crc_off)
 800b9d0:	4b1c      	ldr	r3, [pc, #112]	@ (800ba44 <spi_cmd+0x240>)
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d113      	bne.n	800ba00 <spi_cmd+0x1fc>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 800b9d8:	7ffb      	ldrb	r3, [r7, #31]
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	461a      	mov	r2, r3
 800b9de:	f107 0314 	add.w	r3, r7, #20
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	207f      	movs	r0, #127	@ 0x7f
 800b9e6:	f7ff feef 	bl	800b7c8 <crc7>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	7ffb      	ldrb	r3, [r7, #31]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	0052      	lsls	r2, r2, #1
 800b9f4:	b2d2      	uxtb	r2, r2
 800b9f6:	3320      	adds	r3, #32
 800b9f8:	443b      	add	r3, r7
 800b9fa:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800b9fe:	e002      	b.n	800ba06 <spi_cmd+0x202>
		else
			len-=1;
 800ba00:	7ffb      	ldrb	r3, [r7, #31]
 800ba02:	3b01      	subs	r3, #1
 800ba04:	77fb      	strb	r3, [r7, #31]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 800ba06:	7ffb      	ldrb	r3, [r7, #31]
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	f107 0314 	add.w	r3, r7, #20
 800ba0e:	4611      	mov	r1, r2
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7ff fea0 	bl	800b756 <nmi_spi_write>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00d      	beq.n	800ba38 <spi_cmd+0x234>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
 800ba1c:	f240 1203 	movw	r2, #259	@ 0x103
 800ba20:	4909      	ldr	r1, [pc, #36]	@ (800ba48 <spi_cmd+0x244>)
 800ba22:	480a      	ldr	r0, [pc, #40]	@ (800ba4c <spi_cmd+0x248>)
 800ba24:	f001 f850 	bl	800cac8 <iprintf>
 800ba28:	4809      	ldr	r0, [pc, #36]	@ (800ba50 <spi_cmd+0x24c>)
 800ba2a:	f001 f8bd 	bl	800cba8 <puts>
 800ba2e:	200d      	movs	r0, #13
 800ba30:	f001 f85c 	bl	800caec <putchar>
			result = N_FAIL;
 800ba34:	23ff      	movs	r3, #255	@ 0xff
 800ba36:	77bb      	strb	r3, [r7, #30]
		}
	}

	return result;
 800ba38:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3720      	adds	r7, #32
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	2000063c 	.word	0x2000063c
 800ba48:	0800e990 	.word	0x0800e990
 800ba4c:	0800e0ec 	.word	0x0800e0ec
 800ba50:	0800e100 	.word	0x0800e100

0800ba54 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	71fb      	strb	r3, [r7, #7]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	73bb      	strb	r3, [r7, #14]

    if (!gu8Crc_off)
 800ba62:	4b27      	ldr	r3, [pc, #156]	@ (800bb00 <spi_data_rsp+0xac>)
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d102      	bne.n	800ba70 <spi_data_rsp+0x1c>
		len = 2;
 800ba6a:	2302      	movs	r3, #2
 800ba6c:	73fb      	strb	r3, [r7, #15]
 800ba6e:	e001      	b.n	800ba74 <spi_data_rsp+0x20>
	else
		len = 3;
 800ba70:	2303      	movs	r3, #3
 800ba72:	73fb      	strb	r3, [r7, #15]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
 800ba76:	b29a      	uxth	r2, r3
 800ba78:	f107 0308 	add.w	r3, r7, #8
 800ba7c:	4611      	mov	r1, r2
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7ff fe58 	bl	800b734 <nmi_spi_read>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d00e      	beq.n	800baa8 <spi_data_rsp+0x54>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
 800ba8a:	f240 1217 	movw	r2, #279	@ 0x117
 800ba8e:	491d      	ldr	r1, [pc, #116]	@ (800bb04 <spi_data_rsp+0xb0>)
 800ba90:	481d      	ldr	r0, [pc, #116]	@ (800bb08 <spi_data_rsp+0xb4>)
 800ba92:	f001 f819 	bl	800cac8 <iprintf>
 800ba96:	481d      	ldr	r0, [pc, #116]	@ (800bb0c <spi_data_rsp+0xb8>)
 800ba98:	f001 f886 	bl	800cba8 <puts>
 800ba9c:	200d      	movs	r0, #13
 800ba9e:	f001 f825 	bl	800caec <putchar>
		result = N_FAIL;
 800baa2:	23ff      	movs	r3, #255	@ 0xff
 800baa4:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800baa6:	e024      	b.n	800baf2 <spi_data_rsp+0x9e>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
 800baa8:	7bfb      	ldrb	r3, [r7, #15]
 800baaa:	3b01      	subs	r3, #1
 800baac:	3310      	adds	r3, #16
 800baae:	443b      	add	r3, r7
 800bab0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d107      	bne.n	800bac8 <spi_data_rsp+0x74>
 800bab8:	7bfb      	ldrb	r3, [r7, #15]
 800baba:	3b02      	subs	r3, #2
 800babc:	3310      	adds	r3, #16
 800babe:	443b      	add	r3, r7
 800bac0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800bac4:	2bc3      	cmp	r3, #195	@ 0xc3
 800bac6:	d013      	beq.n	800baf0 <spi_data_rsp+0x9c>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
 800bac8:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 800bacc:	490d      	ldr	r1, [pc, #52]	@ (800bb04 <spi_data_rsp+0xb0>)
 800bace:	480e      	ldr	r0, [pc, #56]	@ (800bb08 <spi_data_rsp+0xb4>)
 800bad0:	f000 fffa 	bl	800cac8 <iprintf>
 800bad4:	7a3b      	ldrb	r3, [r7, #8]
 800bad6:	4619      	mov	r1, r3
 800bad8:	7a7b      	ldrb	r3, [r7, #9]
 800bada:	461a      	mov	r2, r3
 800badc:	7abb      	ldrb	r3, [r7, #10]
 800bade:	480c      	ldr	r0, [pc, #48]	@ (800bb10 <spi_data_rsp+0xbc>)
 800bae0:	f000 fff2 	bl	800cac8 <iprintf>
 800bae4:	200d      	movs	r0, #13
 800bae6:	f001 f801 	bl	800caec <putchar>
		result = N_FAIL;
 800baea:	23ff      	movs	r3, #255	@ 0xff
 800baec:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800baee:	e000      	b.n	800baf2 <spi_data_rsp+0x9e>
	}
_fail_:
 800baf0:	bf00      	nop

	return result;
 800baf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	2000063c 	.word	0x2000063c
 800bb04:	0800e998 	.word	0x0800e998
 800bb08:	0800e0ec 	.word	0x0800e0ec
 800bb0c:	0800e12c 	.word	0x0800e12c
 800bb10:	0800e14c 	.word	0x0800e14c

0800bb14 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	71fb      	strb	r3, [r7, #7]
	uint8 rsp;
	sint8 result = N_OK;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	73fb      	strb	r3, [r7, #15]

	/**
		Command/Control response
	**/
#if defined(CMD_TERMINATE)
    if(cmd == CMD_TERMINATE) {
 800bb22:	79fb      	ldrb	r3, [r7, #7]
 800bb24:	2bc5      	cmp	r3, #197	@ 0xc5
 800bb26:	d10b      	bne.n	800bb40 <spi_cmd_rsp+0x2c>
        if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800bb28:	f107 030d 	add.w	r3, r7, #13
 800bb2c:	2101      	movs	r1, #1
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7ff fe00 	bl	800b734 <nmi_spi_read>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d002      	beq.n	800bb40 <spi_cmd_rsp+0x2c>
            result = N_FAIL;
 800bb3a:	23ff      	movs	r3, #255	@ 0xff
 800bb3c:	73fb      	strb	r3, [r7, #15]
            goto _fail_;
 800bb3e:	e05a      	b.n	800bbf6 <spi_cmd_rsp+0xe2>
        }
    }
#endif
#if defined(CMD_REPEAT)
    if(cmd == CMD_REPEAT) {
 800bb40:	79fb      	ldrb	r3, [r7, #7]
 800bb42:	2bc6      	cmp	r3, #198	@ 0xc6
 800bb44:	d10b      	bne.n	800bb5e <spi_cmd_rsp+0x4a>
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800bb46:	f107 030d 	add.w	r3, r7, #13
 800bb4a:	2101      	movs	r1, #1
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7ff fdf1 	bl	800b734 <nmi_spi_read>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <spi_cmd_rsp+0x4a>
			result = N_FAIL;
 800bb58:	23ff      	movs	r3, #255	@ 0xff
 800bb5a:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800bb5c:	e04b      	b.n	800bbf6 <spi_cmd_rsp+0xe2>
		}
	}
#endif

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800bb5e:	230a      	movs	r3, #10
 800bb60:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800bb62:	f107 030d 	add.w	r3, r7, #13
 800bb66:	2101      	movs	r1, #1
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7ff fde3 	bl	800b734 <nmi_spi_read>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00e      	beq.n	800bb92 <spi_cmd_rsp+0x7e>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
 800bb74:	f44f 72a3 	mov.w	r2, #326	@ 0x146
 800bb78:	4922      	ldr	r1, [pc, #136]	@ (800bc04 <spi_cmd_rsp+0xf0>)
 800bb7a:	4823      	ldr	r0, [pc, #140]	@ (800bc08 <spi_cmd_rsp+0xf4>)
 800bb7c:	f000 ffa4 	bl	800cac8 <iprintf>
 800bb80:	4822      	ldr	r0, [pc, #136]	@ (800bc0c <spi_cmd_rsp+0xf8>)
 800bb82:	f001 f811 	bl	800cba8 <puts>
 800bb86:	200d      	movs	r0, #13
 800bb88:	f000 ffb0 	bl	800caec <putchar>
			result = N_FAIL;
 800bb8c:	23ff      	movs	r3, #255	@ 0xff
 800bb8e:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800bb90:	e031      	b.n	800bbf6 <spi_cmd_rsp+0xe2>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 800bb92:	7b7b      	ldrb	r3, [r7, #13]
 800bb94:	79fa      	ldrb	r2, [r7, #7]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d007      	beq.n	800bbaa <spi_cmd_rsp+0x96>
 800bb9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb9e:	b2da      	uxtb	r2, r3
 800bba0:	3a01      	subs	r2, #1
 800bba2:	b2d2      	uxtb	r2, r2
 800bba4:	73ba      	strb	r2, [r7, #14]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	dcdb      	bgt.n	800bb62 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800bbaa:	230a      	movs	r3, #10
 800bbac:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800bbae:	f107 030d 	add.w	r3, r7, #13
 800bbb2:	2101      	movs	r1, #1
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7ff fdbd 	bl	800b734 <nmi_spi_read>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00e      	beq.n	800bbde <spi_cmd_rsp+0xca>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
 800bbc0:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 800bbc4:	490f      	ldr	r1, [pc, #60]	@ (800bc04 <spi_cmd_rsp+0xf0>)
 800bbc6:	4810      	ldr	r0, [pc, #64]	@ (800bc08 <spi_cmd_rsp+0xf4>)
 800bbc8:	f000 ff7e 	bl	800cac8 <iprintf>
 800bbcc:	480f      	ldr	r0, [pc, #60]	@ (800bc0c <spi_cmd_rsp+0xf8>)
 800bbce:	f000 ffeb 	bl	800cba8 <puts>
 800bbd2:	200d      	movs	r0, #13
 800bbd4:	f000 ff8a 	bl	800caec <putchar>
			result = N_FAIL;
 800bbd8:	23ff      	movs	r3, #255	@ 0xff
 800bbda:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800bbdc:	e00b      	b.n	800bbf6 <spi_cmd_rsp+0xe2>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 800bbde:	7b7b      	ldrb	r3, [r7, #13]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d007      	beq.n	800bbf4 <spi_cmd_rsp+0xe0>
 800bbe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbe8:	b2da      	uxtb	r2, r3
 800bbea:	3a01      	subs	r2, #1
 800bbec:	b2d2      	uxtb	r2, r2
 800bbee:	73ba      	strb	r2, [r7, #14]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	dcdc      	bgt.n	800bbae <spi_cmd_rsp+0x9a>

_fail_:
 800bbf4:	bf00      	nop

	return result;
 800bbf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	0800e9a8 	.word	0x0800e9a8
 800bc08:	0800e0ec 	.word	0x0800e0ec
 800bc0c:	0800e17c 	.word	0x0800e17c

0800bc10 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b086      	sub	sp, #24
 800bc14:	af02      	add	r7, sp, #8
	//M2M_INFO("Reset Spi\n");
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800bc16:	2300      	movs	r3, #0
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	2100      	movs	r1, #0
 800bc20:	20cf      	movs	r0, #207	@ 0xcf
 800bc22:	f7ff fdef 	bl	800b804 <spi_cmd>

	if(spi_cmd_rsp(CMD_RESET) != N_OK) {
 800bc26:	20cf      	movs	r0, #207	@ 0xcf
 800bc28:	f7ff ff74 	bl	800bb14 <spi_cmd_rsp>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d028      	beq.n	800bc84 <nm_spi_reset+0x74>
		// Reset command failed, need to send repeated 1's until reset occurs
		uint8 w_buf[8] = {0xFF};
 800bc32:	23ff      	movs	r3, #255	@ 0xff
 800bc34:	60bb      	str	r3, [r7, #8]
 800bc36:	2300      	movs	r3, #0
 800bc38:	60fb      	str	r3, [r7, #12]
		uint8 r_buf[8];
		M2M_ERR("[nmi spi]: Failed rst cmd response\n");
 800bc3a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800bc3e:	4914      	ldr	r1, [pc, #80]	@ (800bc90 <nm_spi_reset+0x80>)
 800bc40:	4814      	ldr	r0, [pc, #80]	@ (800bc94 <nm_spi_reset+0x84>)
 800bc42:	f000 ff41 	bl	800cac8 <iprintf>
 800bc46:	4814      	ldr	r0, [pc, #80]	@ (800bc98 <nm_spi_reset+0x88>)
 800bc48:	f000 ffae 	bl	800cba8 <puts>
 800bc4c:	200d      	movs	r0, #13
 800bc4e:	f000 ff4d 	bl	800caec <putchar>
		nmi_spi_writeread(w_buf, r_buf, 8);
 800bc52:	4639      	mov	r1, r7
 800bc54:	f107 0308 	add.w	r3, r7, #8
 800bc58:	2208      	movs	r2, #8
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7ff fd8c 	bl	800b778 <nmi_spi_writeread>
		if(r_buf[7] != 0xFF)
 800bc60:	79fb      	ldrb	r3, [r7, #7]
 800bc62:	2bff      	cmp	r3, #255	@ 0xff
 800bc64:	d00e      	beq.n	800bc84 <nm_spi_reset+0x74>
		{
			M2M_ERR("[nmi spi]: Failed repeated reset\n");
 800bc66:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800bc6a:	4909      	ldr	r1, [pc, #36]	@ (800bc90 <nm_spi_reset+0x80>)
 800bc6c:	4809      	ldr	r0, [pc, #36]	@ (800bc94 <nm_spi_reset+0x84>)
 800bc6e:	f000 ff2b 	bl	800cac8 <iprintf>
 800bc72:	480a      	ldr	r0, [pc, #40]	@ (800bc9c <nm_spi_reset+0x8c>)
 800bc74:	f000 ff98 	bl	800cba8 <puts>
 800bc78:	200d      	movs	r0, #13
 800bc7a:	f000 ff37 	bl	800caec <putchar>
			return N_FAIL;
 800bc7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc82:	e000      	b.n	800bc86 <nm_spi_reset+0x76>
		}
	}
	return N_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	0800e9b4 	.word	0x0800e9b4
 800bc94:	0800e0ec 	.word	0x0800e0ec
 800bc98:	0800e1b0 	.word	0x0800e1b0
 800bc9c:	0800e1d4 	.word	0x0800e1d4

0800bca0 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	807b      	strh	r3, [r7, #2]
 800bcac:	4613      	mov	r3, r2
 800bcae:	707b      	strb	r3, [r7, #1]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	747b      	strb	r3, [r7, #17]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	82bb      	strh	r3, [r7, #20]
	do {
		if (sz <= DATA_PKT_SZ)
 800bcb8:	887b      	ldrh	r3, [r7, #2]
 800bcba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcbe:	d802      	bhi.n	800bcc6 <spi_data_read+0x26>
			nbytes = sz;
 800bcc0:	887b      	ldrh	r3, [r7, #2]
 800bcc2:	827b      	strh	r3, [r7, #18]
 800bcc4:	e002      	b.n	800bccc <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800bcc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bcca:	827b      	strh	r3, [r7, #18]

		/**
			Data Response header
		**/
		retry = SPI_RESP_RETRY_COUNT;
 800bccc:	230a      	movs	r3, #10
 800bcce:	82fb      	strh	r3, [r7, #22]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800bcd0:	f107 030b 	add.w	r3, r7, #11
 800bcd4:	2101      	movs	r1, #1
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7ff fd2c 	bl	800b734 <nmi_spi_read>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00e      	beq.n	800bd00 <spi_data_read+0x60>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
 800bce2:	f44f 72c5 	mov.w	r2, #394	@ 0x18a
 800bce6:	4942      	ldr	r1, [pc, #264]	@ (800bdf0 <spi_data_read+0x150>)
 800bce8:	4842      	ldr	r0, [pc, #264]	@ (800bdf4 <spi_data_read+0x154>)
 800bcea:	f000 feed 	bl	800cac8 <iprintf>
 800bcee:	4842      	ldr	r0, [pc, #264]	@ (800bdf8 <spi_data_read+0x158>)
 800bcf0:	f000 ff5a 	bl	800cba8 <puts>
 800bcf4:	200d      	movs	r0, #13
 800bcf6:	f000 fef9 	bl	800caec <putchar>
				result = N_FAIL;
 800bcfa:	23ff      	movs	r3, #255	@ 0xff
 800bcfc:	747b      	strb	r3, [r7, #17]
				break;
 800bcfe:	e00e      	b.n	800bd1e <spi_data_read+0x7e>
			}
            if((rsp & 0xf0) == 0xf0)
 800bd00:	7afb      	ldrb	r3, [r7, #11]
 800bd02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bd06:	2bf0      	cmp	r3, #240	@ 0xf0
 800bd08:	d008      	beq.n	800bd1c <spi_data_read+0x7c>
				break;
		} while (retry--);
 800bd0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	3a01      	subs	r2, #1
 800bd12:	b292      	uxth	r2, r2
 800bd14:	82fa      	strh	r2, [r7, #22]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1da      	bne.n	800bcd0 <spi_data_read+0x30>
 800bd1a:	e000      	b.n	800bd1e <spi_data_read+0x7e>
				break;
 800bd1c:	bf00      	nop

		if (result == N_FAIL)
 800bd1e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800bd22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd26:	d05c      	beq.n	800bde2 <spi_data_read+0x142>
			break;

		if (retry <= 0) {
 800bd28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	dc10      	bgt.n	800bd52 <spi_data_read+0xb2>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
 800bd30:	f44f 72cb 	mov.w	r2, #406	@ 0x196
 800bd34:	492e      	ldr	r1, [pc, #184]	@ (800bdf0 <spi_data_read+0x150>)
 800bd36:	482f      	ldr	r0, [pc, #188]	@ (800bdf4 <spi_data_read+0x154>)
 800bd38:	f000 fec6 	bl	800cac8 <iprintf>
 800bd3c:	7afb      	ldrb	r3, [r7, #11]
 800bd3e:	4619      	mov	r1, r3
 800bd40:	482e      	ldr	r0, [pc, #184]	@ (800bdfc <spi_data_read+0x15c>)
 800bd42:	f000 fec1 	bl	800cac8 <iprintf>
 800bd46:	200d      	movs	r0, #13
 800bd48:	f000 fed0 	bl	800caec <putchar>
			result = N_FAIL;
 800bd4c:	23ff      	movs	r3, #255	@ 0xff
 800bd4e:	747b      	strb	r3, [r7, #17]
			break;
 800bd50:	e048      	b.n	800bde4 <spi_data_read+0x144>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 800bd52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	4413      	add	r3, r2
 800bd5a:	8a7a      	ldrh	r2, [r7, #18]
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7ff fce8 	bl	800b734 <nmi_spi_read>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00e      	beq.n	800bd88 <spi_data_read+0xe8>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
 800bd6a:	f240 129f 	movw	r2, #415	@ 0x19f
 800bd6e:	4920      	ldr	r1, [pc, #128]	@ (800bdf0 <spi_data_read+0x150>)
 800bd70:	4820      	ldr	r0, [pc, #128]	@ (800bdf4 <spi_data_read+0x154>)
 800bd72:	f000 fea9 	bl	800cac8 <iprintf>
 800bd76:	4822      	ldr	r0, [pc, #136]	@ (800be00 <spi_data_read+0x160>)
 800bd78:	f000 ff16 	bl	800cba8 <puts>
 800bd7c:	200d      	movs	r0, #13
 800bd7e:	f000 feb5 	bl	800caec <putchar>
			result = N_FAIL;
 800bd82:	23ff      	movs	r3, #255	@ 0xff
 800bd84:	747b      	strb	r3, [r7, #17]
			break;
 800bd86:	e02d      	b.n	800bde4 <spi_data_read+0x144>
		}
		if(!clockless)
 800bd88:	787b      	ldrb	r3, [r7, #1]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d11b      	bne.n	800bdc6 <spi_data_read+0x126>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
 800bd8e:	4b1d      	ldr	r3, [pc, #116]	@ (800be04 <spi_data_read+0x164>)
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d117      	bne.n	800bdc6 <spi_data_read+0x126>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 800bd96:	f107 030c 	add.w	r3, r7, #12
 800bd9a:	2102      	movs	r1, #2
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7ff fcc9 	bl	800b734 <nmi_spi_read>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00e      	beq.n	800bdc6 <spi_data_read+0x126>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
 800bda8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800bdac:	4910      	ldr	r1, [pc, #64]	@ (800bdf0 <spi_data_read+0x150>)
 800bdae:	4811      	ldr	r0, [pc, #68]	@ (800bdf4 <spi_data_read+0x154>)
 800bdb0:	f000 fe8a 	bl	800cac8 <iprintf>
 800bdb4:	4814      	ldr	r0, [pc, #80]	@ (800be08 <spi_data_read+0x168>)
 800bdb6:	f000 fef7 	bl	800cba8 <puts>
 800bdba:	200d      	movs	r0, #13
 800bdbc:	f000 fe96 	bl	800caec <putchar>
					result = N_FAIL;
 800bdc0:	23ff      	movs	r3, #255	@ 0xff
 800bdc2:	747b      	strb	r3, [r7, #17]
					break;
 800bdc4:	e00e      	b.n	800bde4 <spi_data_read+0x144>
				}
			}
		}
		ix += nbytes;
 800bdc6:	8aba      	ldrh	r2, [r7, #20]
 800bdc8:	8a7b      	ldrh	r3, [r7, #18]
 800bdca:	4413      	add	r3, r2
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	82bb      	strh	r3, [r7, #20]
		sz -= nbytes;
 800bdd0:	8a7b      	ldrh	r3, [r7, #18]
 800bdd2:	887a      	ldrh	r2, [r7, #2]
 800bdd4:	1ad3      	subs	r3, r2, r3
 800bdd6:	807b      	strh	r3, [r7, #2]

	} while (sz);
 800bdd8:	887b      	ldrh	r3, [r7, #2]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f47f af6c 	bne.w	800bcb8 <spi_data_read+0x18>
 800bde0:	e000      	b.n	800bde4 <spi_data_read+0x144>
			break;
 800bde2:	bf00      	nop

	return result;
 800bde4:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	0800e9c4 	.word	0x0800e9c4
 800bdf4:	0800e0ec 	.word	0x0800e0ec
 800bdf8:	0800e1f8 	.word	0x0800e1f8
 800bdfc:	0800e22c 	.word	0x0800e22c
 800be00:	0800e25c 	.word	0x0800e25c
 800be04:	2000063c 	.word	0x2000063c
 800be08:	0800e28c 	.word	0x0800e28c

0800be0c <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b086      	sub	sp, #24
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	460b      	mov	r3, r1
 800be16:	807b      	strh	r3, [r7, #2]
    sint16 ix = 0;
 800be18:	2300      	movs	r3, #0
 800be1a:	82fb      	strh	r3, [r7, #22]
	uint16 nbytes;
    sint8 result = N_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	74fb      	strb	r3, [r7, #19]
	uint8 cmd, order, crc[2] = {0};
 800be20:	2300      	movs	r3, #0
 800be22:	81bb      	strh	r3, [r7, #12]

	/**
		Data
	**/
	do {
		if (sz <= DATA_PKT_SZ)
 800be24:	887b      	ldrh	r3, [r7, #2]
 800be26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be2a:	d802      	bhi.n	800be32 <spi_data_write+0x26>
			nbytes = sz;
 800be2c:	887b      	ldrh	r3, [r7, #2]
 800be2e:	82bb      	strh	r3, [r7, #20]
 800be30:	e002      	b.n	800be38 <spi_data_write+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800be32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800be36:	82bb      	strh	r3, [r7, #20]

		/**
			Write command
		**/
		cmd = 0xf0;
 800be38:	23f0      	movs	r3, #240	@ 0xf0
 800be3a:	747b      	strb	r3, [r7, #17]
		if (ix == 0)  {
 800be3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d109      	bne.n	800be58 <spi_data_write+0x4c>
			if (sz <= DATA_PKT_SZ)
 800be44:	887b      	ldrh	r3, [r7, #2]
 800be46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be4a:	d802      	bhi.n	800be52 <spi_data_write+0x46>
				order = 0x3;
 800be4c:	2303      	movs	r3, #3
 800be4e:	74bb      	strb	r3, [r7, #18]
 800be50:	e00b      	b.n	800be6a <spi_data_write+0x5e>
			else
				order = 0x1;
 800be52:	2301      	movs	r3, #1
 800be54:	74bb      	strb	r3, [r7, #18]
 800be56:	e008      	b.n	800be6a <spi_data_write+0x5e>
		} else {
			if (sz <= DATA_PKT_SZ)
 800be58:	887b      	ldrh	r3, [r7, #2]
 800be5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be5e:	d802      	bhi.n	800be66 <spi_data_write+0x5a>
				order = 0x3;
 800be60:	2303      	movs	r3, #3
 800be62:	74bb      	strb	r3, [r7, #18]
 800be64:	e001      	b.n	800be6a <spi_data_write+0x5e>
			else
				order = 0x2;
 800be66:	2302      	movs	r3, #2
 800be68:	74bb      	strb	r3, [r7, #18]
		}
		cmd |= order;
 800be6a:	7c7a      	ldrb	r2, [r7, #17]
 800be6c:	7cbb      	ldrb	r3, [r7, #18]
 800be6e:	4313      	orrs	r3, r2
 800be70:	b2db      	uxtb	r3, r3
 800be72:	747b      	strb	r3, [r7, #17]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 800be74:	f107 0311 	add.w	r3, r7, #17
 800be78:	2101      	movs	r1, #1
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7ff fc6b 	bl	800b756 <nmi_spi_write>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00e      	beq.n	800bea4 <spi_data_write+0x98>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
 800be86:	f44f 72ed 	mov.w	r2, #474	@ 0x1da
 800be8a:	492b      	ldr	r1, [pc, #172]	@ (800bf38 <spi_data_write+0x12c>)
 800be8c:	482b      	ldr	r0, [pc, #172]	@ (800bf3c <spi_data_write+0x130>)
 800be8e:	f000 fe1b 	bl	800cac8 <iprintf>
 800be92:	482b      	ldr	r0, [pc, #172]	@ (800bf40 <spi_data_write+0x134>)
 800be94:	f000 fe88 	bl	800cba8 <puts>
 800be98:	200d      	movs	r0, #13
 800be9a:	f000 fe27 	bl	800caec <putchar>
			result = N_FAIL;
 800be9e:	23ff      	movs	r3, #255	@ 0xff
 800bea0:	74fb      	strb	r3, [r7, #19]
			break;
 800bea2:	e043      	b.n	800bf2c <spi_data_write+0x120>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 800bea4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	4413      	add	r3, r2
 800beac:	8aba      	ldrh	r2, [r7, #20]
 800beae:	4611      	mov	r1, r2
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7ff fc50 	bl	800b756 <nmi_spi_write>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00e      	beq.n	800beda <spi_data_write+0xce>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
 800bebc:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800bec0:	491d      	ldr	r1, [pc, #116]	@ (800bf38 <spi_data_write+0x12c>)
 800bec2:	481e      	ldr	r0, [pc, #120]	@ (800bf3c <spi_data_write+0x130>)
 800bec4:	f000 fe00 	bl	800cac8 <iprintf>
 800bec8:	481e      	ldr	r0, [pc, #120]	@ (800bf44 <spi_data_write+0x138>)
 800beca:	f000 fe6d 	bl	800cba8 <puts>
 800bece:	200d      	movs	r0, #13
 800bed0:	f000 fe0c 	bl	800caec <putchar>
			result = N_FAIL;
 800bed4:	23ff      	movs	r3, #255	@ 0xff
 800bed6:	74fb      	strb	r3, [r7, #19]
			break;
 800bed8:	e028      	b.n	800bf2c <spi_data_write+0x120>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
 800beda:	4b1b      	ldr	r3, [pc, #108]	@ (800bf48 <spi_data_write+0x13c>)
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d117      	bne.n	800bf12 <spi_data_write+0x106>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 800bee2:	f107 030c 	add.w	r3, r7, #12
 800bee6:	2102      	movs	r1, #2
 800bee8:	4618      	mov	r0, r3
 800beea:	f7ff fc34 	bl	800b756 <nmi_spi_write>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00e      	beq.n	800bf12 <spi_data_write+0x106>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
 800bef4:	f240 12ed 	movw	r2, #493	@ 0x1ed
 800bef8:	490f      	ldr	r1, [pc, #60]	@ (800bf38 <spi_data_write+0x12c>)
 800befa:	4810      	ldr	r0, [pc, #64]	@ (800bf3c <spi_data_write+0x130>)
 800befc:	f000 fde4 	bl	800cac8 <iprintf>
 800bf00:	4812      	ldr	r0, [pc, #72]	@ (800bf4c <spi_data_write+0x140>)
 800bf02:	f000 fe51 	bl	800cba8 <puts>
 800bf06:	200d      	movs	r0, #13
 800bf08:	f000 fdf0 	bl	800caec <putchar>
				result = N_FAIL;
 800bf0c:	23ff      	movs	r3, #255	@ 0xff
 800bf0e:	74fb      	strb	r3, [r7, #19]
				break;
 800bf10:	e00c      	b.n	800bf2c <spi_data_write+0x120>
			}
		}

		ix += nbytes;
 800bf12:	8afa      	ldrh	r2, [r7, #22]
 800bf14:	8abb      	ldrh	r3, [r7, #20]
 800bf16:	4413      	add	r3, r2
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	82fb      	strh	r3, [r7, #22]
		sz -= nbytes;
 800bf1c:	887a      	ldrh	r2, [r7, #2]
 800bf1e:	8abb      	ldrh	r3, [r7, #20]
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	807b      	strh	r3, [r7, #2]
	} while (sz);
 800bf24:	887b      	ldrh	r3, [r7, #2]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f47f af7c 	bne.w	800be24 <spi_data_write+0x18>


	return result;
 800bf2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3718      	adds	r7, #24
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	0800e9d4 	.word	0x0800e9d4
 800bf3c:	0800e0ec 	.word	0x0800e0ec
 800bf40:	0800e2c0 	.word	0x0800e2c0
 800bf44:	0800e2f8 	.word	0x0800e2f8
 800bf48:	2000063c 	.word	0x2000063c
 800bf4c:	0800e32c 	.word	0x0800e32c

0800bf50 <nm_spi_write_reg>:
 *  @param[in]  u32Val
 *                  Value to be written to the register
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_write_reg(uint32 addr, uint32 u32data)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b086      	sub	sp, #24
 800bf54:	af02      	add	r7, sp, #8
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800bf5a:	230a      	movs	r3, #10
 800bf5c:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_WRITE;
 800bf62:	23c9      	movs	r3, #201	@ 0xc9
 800bf64:	737b      	strb	r3, [r7, #13]
	uint8 clockless = 0;
 800bf66:	2300      	movs	r3, #0
 800bf68:	733b      	strb	r3, [r7, #12]
	
_RETRY_:	
	if (addr <= 0x30)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2b30      	cmp	r3, #48	@ 0x30
 800bf6e:	d803      	bhi.n	800bf78 <nm_spi_write_reg+0x28>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
 800bf70:	23c3      	movs	r3, #195	@ 0xc3
 800bf72:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 800bf74:	2301      	movs	r3, #1
 800bf76:	733b      	strb	r3, [r7, #12]
	}

	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 800bf78:	7b78      	ldrb	r0, [r7, #13]
 800bf7a:	7b3b      	ldrb	r3, [r7, #12]
 800bf7c:	9300      	str	r3, [sp, #0]
 800bf7e:	2304      	movs	r3, #4
 800bf80:	683a      	ldr	r2, [r7, #0]
 800bf82:	6879      	ldr	r1, [r7, #4]
 800bf84:	f7ff fc3e 	bl	800b804 <spi_cmd>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800bf8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00d      	beq.n	800bfb0 <nm_spi_write_reg+0x60>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
 800bf94:	f240 2223 	movw	r2, #547	@ 0x223
 800bf98:	492a      	ldr	r1, [pc, #168]	@ (800c044 <nm_spi_write_reg+0xf4>)
 800bf9a:	482b      	ldr	r0, [pc, #172]	@ (800c048 <nm_spi_write_reg+0xf8>)
 800bf9c:	f000 fd94 	bl	800cac8 <iprintf>
 800bfa0:	6879      	ldr	r1, [r7, #4]
 800bfa2:	482a      	ldr	r0, [pc, #168]	@ (800c04c <nm_spi_write_reg+0xfc>)
 800bfa4:	f000 fd90 	bl	800cac8 <iprintf>
 800bfa8:	200d      	movs	r0, #13
 800bfaa:	f000 fd9f 	bl	800caec <putchar>
		goto _FAIL_;
 800bfae:	e018      	b.n	800bfe2 <nm_spi_write_reg+0x92>
	}

	result = spi_cmd_rsp(cmd);
 800bfb0:	7b7b      	ldrb	r3, [r7, #13]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff fdae 	bl	800bb14 <spi_cmd_rsp>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800bfbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d00d      	beq.n	800bfe0 <nm_spi_write_reg+0x90>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
 800bfc4:	f240 2229 	movw	r2, #553	@ 0x229
 800bfc8:	491e      	ldr	r1, [pc, #120]	@ (800c044 <nm_spi_write_reg+0xf4>)
 800bfca:	481f      	ldr	r0, [pc, #124]	@ (800c048 <nm_spi_write_reg+0xf8>)
 800bfcc:	f000 fd7c 	bl	800cac8 <iprintf>
 800bfd0:	6879      	ldr	r1, [r7, #4]
 800bfd2:	481f      	ldr	r0, [pc, #124]	@ (800c050 <nm_spi_write_reg+0x100>)
 800bfd4:	f000 fd78 	bl	800cac8 <iprintf>
 800bfd8:	200d      	movs	r0, #13
 800bfda:	f000 fd87 	bl	800caec <putchar>
		goto _FAIL_;
 800bfde:	e000      	b.n	800bfe2 <nm_spi_write_reg+0x92>
	}
_FAIL_:
 800bfe0:	bf00      	nop
	if(result != N_OK)
 800bfe2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d026      	beq.n	800c038 <nm_spi_write_reg+0xe8>
	{
		nm_bsp_sleep(1);
 800bfea:	2001      	movs	r0, #1
 800bfec:	f7fd faf2 	bl	80095d4 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800bff0:	2300      	movs	r3, #0
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	2300      	movs	r3, #0
 800bff6:	2200      	movs	r2, #0
 800bff8:	2100      	movs	r1, #0
 800bffa:	20cf      	movs	r0, #207	@ 0xcf
 800bffc:	f7ff fc02 	bl	800b804 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800c000:	20cf      	movs	r0, #207	@ 0xcf
 800c002:	f7ff fd87 	bl	800bb14 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %x %x\n",retry,addr,u32data);
 800c006:	f240 2232 	movw	r2, #562	@ 0x232
 800c00a:	490e      	ldr	r1, [pc, #56]	@ (800c044 <nm_spi_write_reg+0xf4>)
 800c00c:	480e      	ldr	r0, [pc, #56]	@ (800c048 <nm_spi_write_reg+0xf8>)
 800c00e:	f000 fd5b 	bl	800cac8 <iprintf>
 800c012:	7bf9      	ldrb	r1, [r7, #15]
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	480e      	ldr	r0, [pc, #56]	@ (800c054 <nm_spi_write_reg+0x104>)
 800c01a:	f000 fd55 	bl	800cac8 <iprintf>
 800c01e:	200d      	movs	r0, #13
 800c020:	f000 fd64 	bl	800caec <putchar>
		nm_bsp_sleep(1);
 800c024:	2001      	movs	r0, #1
 800c026:	f7fd fad5 	bl	80095d4 <nm_bsp_sleep>
		retry--;
 800c02a:	7bfb      	ldrb	r3, [r7, #15]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800c030:	7bfb      	ldrb	r3, [r7, #15]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d000      	beq.n	800c038 <nm_spi_write_reg+0xe8>
 800c036:	e798      	b.n	800bf6a <nm_spi_write_reg+0x1a>
	}

	return result;
 800c038:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	0800e9e4 	.word	0x0800e9e4
 800c048:	0800e0ec 	.word	0x0800e0ec
 800c04c:	0800e364 	.word	0x0800e364
 800c050:	0800e390 	.word	0x0800e390
 800c054:	0800e3c8 	.word	0x0800e3c8

0800c058 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b088      	sub	sp, #32
 800c05c:	af02      	add	r7, sp, #8
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	4613      	mov	r3, r2
 800c064:	80fb      	strh	r3, [r7, #6]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800c066:	230a      	movs	r3, #10
 800c068:	75bb      	strb	r3, [r7, #22]
	uint8 cmd = CMD_DMA_EXT_WRITE;
 800c06a:	23c7      	movs	r3, #199	@ 0xc7
 800c06c:	757b      	strb	r3, [r7, #21]
_RETRY_:
	/**
		Command
	**/
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
 800c06e:	88fb      	ldrh	r3, [r7, #6]
 800c070:	2b01      	cmp	r3, #1
 800c072:	d101      	bne.n	800c078 <nm_spi_write+0x20>
		size = 2;
 800c074:	2302      	movs	r3, #2
 800c076:	80fb      	strh	r3, [r7, #6]

	result = spi_cmd(cmd, addr, 0, size,0);
 800c078:	88fb      	ldrh	r3, [r7, #6]
 800c07a:	7d78      	ldrb	r0, [r7, #21]
 800c07c:	2200      	movs	r2, #0
 800c07e:	9200      	str	r2, [sp, #0]
 800c080:	2200      	movs	r2, #0
 800c082:	68f9      	ldr	r1, [r7, #12]
 800c084:	f7ff fbbe 	bl	800b804 <spi_cmd>
 800c088:	4603      	mov	r3, r0
 800c08a:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800c08c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00d      	beq.n	800c0b0 <nm_spi_write+0x58>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
 800c094:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 800c098:	4942      	ldr	r1, [pc, #264]	@ (800c1a4 <nm_spi_write+0x14c>)
 800c09a:	4843      	ldr	r0, [pc, #268]	@ (800c1a8 <nm_spi_write+0x150>)
 800c09c:	f000 fd14 	bl	800cac8 <iprintf>
 800c0a0:	68f9      	ldr	r1, [r7, #12]
 800c0a2:	4842      	ldr	r0, [pc, #264]	@ (800c1ac <nm_spi_write+0x154>)
 800c0a4:	f000 fd10 	bl	800cac8 <iprintf>
 800c0a8:	200d      	movs	r0, #13
 800c0aa:	f000 fd1f 	bl	800caec <putchar>
		goto _FAIL_;
 800c0ae:	e047      	b.n	800c140 <nm_spi_write+0xe8>
	}

	result = spi_cmd_rsp(cmd);
 800c0b0:	7d7b      	ldrb	r3, [r7, #21]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7ff fd2e 	bl	800bb14 <spi_cmd_rsp>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800c0bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00d      	beq.n	800c0e0 <nm_spi_write+0x88>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
 800c0c4:	f240 2252 	movw	r2, #594	@ 0x252
 800c0c8:	4936      	ldr	r1, [pc, #216]	@ (800c1a4 <nm_spi_write+0x14c>)
 800c0ca:	4837      	ldr	r0, [pc, #220]	@ (800c1a8 <nm_spi_write+0x150>)
 800c0cc:	f000 fcfc 	bl	800cac8 <iprintf>
 800c0d0:	68f9      	ldr	r1, [r7, #12]
 800c0d2:	4837      	ldr	r0, [pc, #220]	@ (800c1b0 <nm_spi_write+0x158>)
 800c0d4:	f000 fcf8 	bl	800cac8 <iprintf>
 800c0d8:	200d      	movs	r0, #13
 800c0da:	f000 fd07 	bl	800caec <putchar>
		goto _FAIL_;
 800c0de:	e02f      	b.n	800c140 <nm_spi_write+0xe8>
	}

	/**
		Data
	**/
	result = spi_data_write(buf, size);
 800c0e0:	88fb      	ldrh	r3, [r7, #6]
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	68b8      	ldr	r0, [r7, #8]
 800c0e6:	f7ff fe91 	bl	800be0c <spi_data_write>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800c0ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00c      	beq.n	800c110 <nm_spi_write+0xb8>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
 800c0f6:	f240 225b 	movw	r2, #603	@ 0x25b
 800c0fa:	492a      	ldr	r1, [pc, #168]	@ (800c1a4 <nm_spi_write+0x14c>)
 800c0fc:	482a      	ldr	r0, [pc, #168]	@ (800c1a8 <nm_spi_write+0x150>)
 800c0fe:	f000 fce3 	bl	800cac8 <iprintf>
 800c102:	482c      	ldr	r0, [pc, #176]	@ (800c1b4 <nm_spi_write+0x15c>)
 800c104:	f000 fd50 	bl	800cba8 <puts>
 800c108:	200d      	movs	r0, #13
 800c10a:	f000 fcef 	bl	800caec <putchar>
		goto _FAIL_;
 800c10e:	e017      	b.n	800c140 <nm_spi_write+0xe8>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
 800c110:	7d7b      	ldrb	r3, [r7, #21]
 800c112:	4618      	mov	r0, r3
 800c114:	f7ff fc9e 	bl	800ba54 <spi_data_rsp>
 800c118:	4603      	mov	r3, r0
 800c11a:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800c11c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d00c      	beq.n	800c13e <nm_spi_write+0xe6>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
 800c124:	f240 2263 	movw	r2, #611	@ 0x263
 800c128:	491e      	ldr	r1, [pc, #120]	@ (800c1a4 <nm_spi_write+0x14c>)
 800c12a:	481f      	ldr	r0, [pc, #124]	@ (800c1a8 <nm_spi_write+0x150>)
 800c12c:	f000 fccc 	bl	800cac8 <iprintf>
 800c130:	4820      	ldr	r0, [pc, #128]	@ (800c1b4 <nm_spi_write+0x15c>)
 800c132:	f000 fd39 	bl	800cba8 <puts>
 800c136:	200d      	movs	r0, #13
 800c138:	f000 fcd8 	bl	800caec <putchar>
		goto _FAIL_;
 800c13c:	e000      	b.n	800c140 <nm_spi_write+0xe8>
	}
	
_FAIL_:
 800c13e:	bf00      	nop
	if(result != N_OK)
 800c140:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d026      	beq.n	800c196 <nm_spi_write+0x13e>
	{
		nm_bsp_sleep(1);
 800c148:	2001      	movs	r0, #1
 800c14a:	f7fd fa43 	bl	80095d4 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800c14e:	2300      	movs	r3, #0
 800c150:	9300      	str	r3, [sp, #0]
 800c152:	2300      	movs	r3, #0
 800c154:	2200      	movs	r2, #0
 800c156:	2100      	movs	r1, #0
 800c158:	20cf      	movs	r0, #207	@ 0xcf
 800c15a:	f7ff fb53 	bl	800b804 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800c15e:	20cf      	movs	r0, #207	@ 0xcf
 800c160:	f7ff fcd8 	bl	800bb14 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %x %d\n",retry,addr,size);
 800c164:	f240 226d 	movw	r2, #621	@ 0x26d
 800c168:	490e      	ldr	r1, [pc, #56]	@ (800c1a4 <nm_spi_write+0x14c>)
 800c16a:	480f      	ldr	r0, [pc, #60]	@ (800c1a8 <nm_spi_write+0x150>)
 800c16c:	f000 fcac 	bl	800cac8 <iprintf>
 800c170:	7db9      	ldrb	r1, [r7, #22]
 800c172:	88fb      	ldrh	r3, [r7, #6]
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	4810      	ldr	r0, [pc, #64]	@ (800c1b8 <nm_spi_write+0x160>)
 800c178:	f000 fca6 	bl	800cac8 <iprintf>
 800c17c:	200d      	movs	r0, #13
 800c17e:	f000 fcb5 	bl	800caec <putchar>
		nm_bsp_sleep(1);
 800c182:	2001      	movs	r0, #1
 800c184:	f7fd fa26 	bl	80095d4 <nm_bsp_sleep>
		retry--;
 800c188:	7dbb      	ldrb	r3, [r7, #22]
 800c18a:	3b01      	subs	r3, #1
 800c18c:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800c18e:	7dbb      	ldrb	r3, [r7, #22]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d000      	beq.n	800c196 <nm_spi_write+0x13e>
 800c194:	e76b      	b.n	800c06e <nm_spi_write+0x16>
	}


	return result;
 800c196:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3718      	adds	r7, #24
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	0800e9f8 	.word	0x0800e9f8
 800c1a8:	0800e0ec 	.word	0x0800e0ec
 800c1ac:	0800e3e4 	.word	0x0800e3e4
 800c1b0:	0800e414 	.word	0x0800e414
 800c1b4:	0800e44c 	.word	0x0800e44c
 800c1b8:	0800e474 	.word	0x0800e474

0800c1bc <nm_spi_read_reg_with_ret>:
 *  @param[out] pu32RetVal
 *                  Pointer to u32 variable used to return the read value
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_read_reg_with_ret(uint32 addr, uint32 *u32data)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b086      	sub	sp, #24
 800c1c0:	af02      	add	r7, sp, #8
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800c1c6:	230a      	movs	r3, #10
 800c1c8:	73fb      	strb	r3, [r7, #15]
	volatile sint8 result = N_OK;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	733b      	strb	r3, [r7, #12]
	uint8 cmd = CMD_SINGLE_READ;
 800c1ce:	23ca      	movs	r3, #202	@ 0xca
 800c1d0:	73bb      	strb	r3, [r7, #14]
	uint8 tmp[4];
	uint8 clockless = 0;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	737b      	strb	r3, [r7, #13]

_RETRY_:

	if (addr <= 0xff)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2bff      	cmp	r3, #255	@ 0xff
 800c1da:	d803      	bhi.n	800c1e4 <nm_spi_read_reg_with_ret+0x28>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
 800c1dc:	23c4      	movs	r3, #196	@ 0xc4
 800c1de:	73bb      	strb	r3, [r7, #14]
		clockless = 1;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	737b      	strb	r3, [r7, #13]
	}

	result = spi_cmd(cmd, addr, 0, 4, clockless);
 800c1e4:	7bb8      	ldrb	r0, [r7, #14]
 800c1e6:	7b7b      	ldrb	r3, [r7, #13]
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	2304      	movs	r3, #4
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	6879      	ldr	r1, [r7, #4]
 800c1f0:	f7ff fb08 	bl	800b804 <spi_cmd>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800c1f8:	7b3b      	ldrb	r3, [r7, #12]
 800c1fa:	b25b      	sxtb	r3, r3
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00d      	beq.n	800c21c <nm_spi_read_reg_with_ret+0x60>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
 800c200:	f240 2295 	movw	r2, #661	@ 0x295
 800c204:	493d      	ldr	r1, [pc, #244]	@ (800c2fc <nm_spi_read_reg_with_ret+0x140>)
 800c206:	483e      	ldr	r0, [pc, #248]	@ (800c300 <nm_spi_read_reg_with_ret+0x144>)
 800c208:	f000 fc5e 	bl	800cac8 <iprintf>
 800c20c:	6879      	ldr	r1, [r7, #4]
 800c20e:	483d      	ldr	r0, [pc, #244]	@ (800c304 <nm_spi_read_reg_with_ret+0x148>)
 800c210:	f000 fc5a 	bl	800cac8 <iprintf>
 800c214:	200d      	movs	r0, #13
 800c216:	f000 fc69 	bl	800caec <putchar>
		goto _FAIL_;
 800c21a:	e03e      	b.n	800c29a <nm_spi_read_reg_with_ret+0xde>
	}

	result = spi_cmd_rsp(cmd);
 800c21c:	7bbb      	ldrb	r3, [r7, #14]
 800c21e:	4618      	mov	r0, r3
 800c220:	f7ff fc78 	bl	800bb14 <spi_cmd_rsp>
 800c224:	4603      	mov	r3, r0
 800c226:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800c228:	7b3b      	ldrb	r3, [r7, #12]
 800c22a:	b25b      	sxtb	r3, r3
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00d      	beq.n	800c24c <nm_spi_read_reg_with_ret+0x90>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
 800c230:	f240 229b 	movw	r2, #667	@ 0x29b
 800c234:	4931      	ldr	r1, [pc, #196]	@ (800c2fc <nm_spi_read_reg_with_ret+0x140>)
 800c236:	4832      	ldr	r0, [pc, #200]	@ (800c300 <nm_spi_read_reg_with_ret+0x144>)
 800c238:	f000 fc46 	bl	800cac8 <iprintf>
 800c23c:	6879      	ldr	r1, [r7, #4]
 800c23e:	4832      	ldr	r0, [pc, #200]	@ (800c308 <nm_spi_read_reg_with_ret+0x14c>)
 800c240:	f000 fc42 	bl	800cac8 <iprintf>
 800c244:	200d      	movs	r0, #13
 800c246:	f000 fc51 	bl	800caec <putchar>
		goto _FAIL_;
 800c24a:	e026      	b.n	800c29a <nm_spi_read_reg_with_ret+0xde>
	}

	/* to avoid endianness issues */
	result = spi_data_read(&tmp[0], 4, clockless);
 800c24c:	7b7a      	ldrb	r2, [r7, #13]
 800c24e:	f107 0308 	add.w	r3, r7, #8
 800c252:	2104      	movs	r1, #4
 800c254:	4618      	mov	r0, r3
 800c256:	f7ff fd23 	bl	800bca0 <spi_data_read>
 800c25a:	4603      	mov	r3, r0
 800c25c:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800c25e:	7b3b      	ldrb	r3, [r7, #12]
 800c260:	b25b      	sxtb	r3, r3
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00c      	beq.n	800c280 <nm_spi_read_reg_with_ret+0xc4>
		M2M_ERR("[nmi spi]: Failed data read...\n");
 800c266:	f240 22a2 	movw	r2, #674	@ 0x2a2
 800c26a:	4924      	ldr	r1, [pc, #144]	@ (800c2fc <nm_spi_read_reg_with_ret+0x140>)
 800c26c:	4824      	ldr	r0, [pc, #144]	@ (800c300 <nm_spi_read_reg_with_ret+0x144>)
 800c26e:	f000 fc2b 	bl	800cac8 <iprintf>
 800c272:	4826      	ldr	r0, [pc, #152]	@ (800c30c <nm_spi_read_reg_with_ret+0x150>)
 800c274:	f000 fc98 	bl	800cba8 <puts>
 800c278:	200d      	movs	r0, #13
 800c27a:	f000 fc37 	bl	800caec <putchar>
		goto _FAIL_;
 800c27e:	e00c      	b.n	800c29a <nm_spi_read_reg_with_ret+0xde>
	}

	*u32data = tmp[0] |
 800c280:	7a3b      	ldrb	r3, [r7, #8]
 800c282:	461a      	mov	r2, r3
		((uint32)tmp[1] << 8) |
 800c284:	7a7b      	ldrb	r3, [r7, #9]
 800c286:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
 800c288:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
 800c28a:	7abb      	ldrb	r3, [r7, #10]
 800c28c:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
 800c28e:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
 800c290:	7afb      	ldrb	r3, [r7, #11]
 800c292:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
 800c294:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
 800c29a:	7b3b      	ldrb	r3, [r7, #12]
 800c29c:	b25b      	sxtb	r3, r3
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d026      	beq.n	800c2f0 <nm_spi_read_reg_with_ret+0x134>
	{
		nm_bsp_sleep(1);
 800c2a2:	2001      	movs	r0, #1
 800c2a4:	f7fd f996 	bl	80095d4 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	2100      	movs	r1, #0
 800c2b2:	20cf      	movs	r0, #207	@ 0xcf
 800c2b4:	f7ff faa6 	bl	800b804 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800c2b8:	20cf      	movs	r0, #207	@ 0xcf
 800c2ba:	f7ff fc2b 	bl	800bb14 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
 800c2be:	f240 22b1 	movw	r2, #689	@ 0x2b1
 800c2c2:	490e      	ldr	r1, [pc, #56]	@ (800c2fc <nm_spi_read_reg_with_ret+0x140>)
 800c2c4:	480e      	ldr	r0, [pc, #56]	@ (800c300 <nm_spi_read_reg_with_ret+0x144>)
 800c2c6:	f000 fbff 	bl	800cac8 <iprintf>
 800c2ca:	7bfb      	ldrb	r3, [r7, #15]
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	480f      	ldr	r0, [pc, #60]	@ (800c310 <nm_spi_read_reg_with_ret+0x154>)
 800c2d2:	f000 fbf9 	bl	800cac8 <iprintf>
 800c2d6:	200d      	movs	r0, #13
 800c2d8:	f000 fc08 	bl	800caec <putchar>
		nm_bsp_sleep(1);
 800c2dc:	2001      	movs	r0, #1
 800c2de:	f7fd f979 	bl	80095d4 <nm_bsp_sleep>
		retry--;
 800c2e2:	7bfb      	ldrb	r3, [r7, #15]
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800c2e8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d000      	beq.n	800c2f0 <nm_spi_read_reg_with_ret+0x134>
 800c2ee:	e772      	b.n	800c1d6 <nm_spi_read_reg_with_ret+0x1a>
	}
		
	return result;
 800c2f0:	7b3b      	ldrb	r3, [r7, #12]
 800c2f2:	b25b      	sxtb	r3, r3
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3710      	adds	r7, #16
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	0800ea08 	.word	0x0800ea08
 800c300:	0800e0ec 	.word	0x0800e0ec
 800c304:	0800e490 	.word	0x0800e490
 800c308:	0800e4bc 	.word	0x0800e4bc
 800c30c:	0800e4f0 	.word	0x0800e4f0
 800c310:	0800e510 	.word	0x0800e510

0800c314 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b088      	sub	sp, #32
 800c318:	af02      	add	r7, sp, #8
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	4613      	mov	r3, r2
 800c320:	80fb      	strh	r3, [r7, #6]
	uint8 cmd = CMD_DMA_EXT_READ;
 800c322:	23c8      	movs	r3, #200	@ 0xc8
 800c324:	753b      	strb	r3, [r7, #20]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800c326:	230a      	movs	r3, #10
 800c328:	75bb      	strb	r3, [r7, #22]
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
 800c32a:	2300      	movs	r3, #0
 800c32c:	757b      	strb	r3, [r7, #21]
_RETRY_:

	/**
		Command
	**/
	if (size == 1)
 800c32e:	88fb      	ldrh	r3, [r7, #6]
 800c330:	2b01      	cmp	r3, #1
 800c332:	d103      	bne.n	800c33c <nm_spi_read+0x28>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
 800c334:	2302      	movs	r3, #2
 800c336:	80fb      	strh	r3, [r7, #6]
		single_byte_workaround = 1;
 800c338:	2301      	movs	r3, #1
 800c33a:	757b      	strb	r3, [r7, #21]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
 800c33c:	88fb      	ldrh	r3, [r7, #6]
 800c33e:	7d38      	ldrb	r0, [r7, #20]
 800c340:	2200      	movs	r2, #0
 800c342:	9200      	str	r2, [sp, #0]
 800c344:	2200      	movs	r2, #0
 800c346:	68f9      	ldr	r1, [r7, #12]
 800c348:	f7ff fa5c 	bl	800b804 <spi_cmd>
 800c34c:	4603      	mov	r3, r0
 800c34e:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800c350:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00d      	beq.n	800c374 <nm_spi_read+0x60>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
 800c358:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800c35c:	493f      	ldr	r1, [pc, #252]	@ (800c45c <nm_spi_read+0x148>)
 800c35e:	4840      	ldr	r0, [pc, #256]	@ (800c460 <nm_spi_read+0x14c>)
 800c360:	f000 fbb2 	bl	800cac8 <iprintf>
 800c364:	68f9      	ldr	r1, [r7, #12]
 800c366:	483f      	ldr	r0, [pc, #252]	@ (800c464 <nm_spi_read+0x150>)
 800c368:	f000 fbae 	bl	800cac8 <iprintf>
 800c36c:	200d      	movs	r0, #13
 800c36e:	f000 fbbd 	bl	800caec <putchar>
		goto _FAIL_;
 800c372:	e041      	b.n	800c3f8 <nm_spi_read+0xe4>
	}

	result = spi_cmd_rsp(cmd);
 800c374:	7d3b      	ldrb	r3, [r7, #20]
 800c376:	4618      	mov	r0, r3
 800c378:	f7ff fbcc 	bl	800bb14 <spi_cmd_rsp>
 800c37c:	4603      	mov	r3, r0
 800c37e:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800c380:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00d      	beq.n	800c3a4 <nm_spi_read+0x90>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
 800c388:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800c38c:	4933      	ldr	r1, [pc, #204]	@ (800c45c <nm_spi_read+0x148>)
 800c38e:	4834      	ldr	r0, [pc, #208]	@ (800c460 <nm_spi_read+0x14c>)
 800c390:	f000 fb9a 	bl	800cac8 <iprintf>
 800c394:	68f9      	ldr	r1, [r7, #12]
 800c396:	4834      	ldr	r0, [pc, #208]	@ (800c468 <nm_spi_read+0x154>)
 800c398:	f000 fb96 	bl	800cac8 <iprintf>
 800c39c:	200d      	movs	r0, #13
 800c39e:	f000 fba5 	bl	800caec <putchar>
		goto _FAIL_;
 800c3a2:	e029      	b.n	800c3f8 <nm_spi_read+0xe4>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
 800c3a4:	7d7b      	ldrb	r3, [r7, #21]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00c      	beq.n	800c3c4 <nm_spi_read+0xb0>
	{
		result = spi_data_read(tmp, size,0);
 800c3aa:	88f9      	ldrh	r1, [r7, #6]
 800c3ac:	f107 0310 	add.w	r3, r7, #16
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7ff fc74 	bl	800bca0 <spi_data_read>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	75fb      	strb	r3, [r7, #23]
		buf[0] = tmp[0];
 800c3bc:	7c3a      	ldrb	r2, [r7, #16]
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	701a      	strb	r2, [r3, #0]
 800c3c2:	e007      	b.n	800c3d4 <nm_spi_read+0xc0>
	}
	else
		result = spi_data_read(buf, size,0);
 800c3c4:	88fb      	ldrh	r3, [r7, #6]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	68b8      	ldr	r0, [r7, #8]
 800c3cc:	f7ff fc68 	bl	800bca0 <spi_data_read>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	75fb      	strb	r3, [r7, #23]

	if (result != N_OK) {
 800c3d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00c      	beq.n	800c3f6 <nm_spi_read+0xe2>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
 800c3dc:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800c3e0:	491e      	ldr	r1, [pc, #120]	@ (800c45c <nm_spi_read+0x148>)
 800c3e2:	481f      	ldr	r0, [pc, #124]	@ (800c460 <nm_spi_read+0x14c>)
 800c3e4:	f000 fb70 	bl	800cac8 <iprintf>
 800c3e8:	4820      	ldr	r0, [pc, #128]	@ (800c46c <nm_spi_read+0x158>)
 800c3ea:	f000 fbdd 	bl	800cba8 <puts>
 800c3ee:	200d      	movs	r0, #13
 800c3f0:	f000 fb7c 	bl	800caec <putchar>
		goto _FAIL_;
 800c3f4:	e000      	b.n	800c3f8 <nm_spi_read+0xe4>
	}

_FAIL_:
 800c3f6:	bf00      	nop
	if(result != N_OK)
 800c3f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d026      	beq.n	800c44e <nm_spi_read+0x13a>
	{
		nm_bsp_sleep(1);
 800c400:	2001      	movs	r0, #1
 800c402:	f7fd f8e7 	bl	80095d4 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800c406:	2300      	movs	r3, #0
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	2300      	movs	r3, #0
 800c40c:	2200      	movs	r2, #0
 800c40e:	2100      	movs	r1, #0
 800c410:	20cf      	movs	r0, #207	@ 0xcf
 800c412:	f7ff f9f7 	bl	800b804 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800c416:	20cf      	movs	r0, #207	@ 0xcf
 800c418:	f7ff fb7c 	bl	800bb14 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
 800c41c:	f240 22ef 	movw	r2, #751	@ 0x2ef
 800c420:	490e      	ldr	r1, [pc, #56]	@ (800c45c <nm_spi_read+0x148>)
 800c422:	480f      	ldr	r0, [pc, #60]	@ (800c460 <nm_spi_read+0x14c>)
 800c424:	f000 fb50 	bl	800cac8 <iprintf>
 800c428:	7db9      	ldrb	r1, [r7, #22]
 800c42a:	88fb      	ldrh	r3, [r7, #6]
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	4810      	ldr	r0, [pc, #64]	@ (800c470 <nm_spi_read+0x15c>)
 800c430:	f000 fb4a 	bl	800cac8 <iprintf>
 800c434:	200d      	movs	r0, #13
 800c436:	f000 fb59 	bl	800caec <putchar>
		nm_bsp_sleep(1);
 800c43a:	2001      	movs	r0, #1
 800c43c:	f7fd f8ca 	bl	80095d4 <nm_bsp_sleep>
		retry--;
 800c440:	7dbb      	ldrb	r3, [r7, #22]
 800c442:	3b01      	subs	r3, #1
 800c444:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800c446:	7dbb      	ldrb	r3, [r7, #22]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d000      	beq.n	800c44e <nm_spi_read+0x13a>
 800c44c:	e76f      	b.n	800c32e <nm_spi_read+0x1a>
	}

	return result;
 800c44e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c452:	4618      	mov	r0, r3
 800c454:	3718      	adds	r7, #24
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	0800ea24 	.word	0x0800ea24
 800c460:	0800e0ec 	.word	0x0800e0ec
 800c464:	0800e528 	.word	0x0800e528
 800c468:	0800e558 	.word	0x0800e558
 800c46c:	0800e590 	.word	0x0800e590
 800c470:	0800e5b8 	.word	0x0800e5b8

0800c474 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
 800c47a:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800c47e:	f000 f8b1 	bl	800c5e4 <nm_spi_read_reg>
 800c482:	6078      	str	r0, [r7, #4]
	val32 &= ~(0x7 << 4);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c48a:	607b      	str	r3, [r7, #4]
            break;
        case 4096:
            val32 |= (4 << 4);
            break;
        case 8192:
            val32 |= (5 << 4);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800c492:	607b      	str	r3, [r7, #4]
            break;
 800c494:	bf00      	nop
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
 800c496:	6879      	ldr	r1, [r7, #4]
 800c498:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800c49c:	f7ff fd58 	bl	800bf50 <nm_spi_write_reg>
}
 800c4a0:	bf00      	nop
 800c4a2:	3708      	adds	r7, #8
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <nm_spi_init>:
*	@fn		nm_spi_init
*	@brief	Initialize the SPI
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_spi_init(void)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
 800c4b2:	4b3e      	ldr	r3, [pc, #248]	@ (800c5ac <nm_spi_init+0x104>)
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	701a      	strb	r2, [r3, #0]

    if(nm_spi_read_reg_with_ret(NMI_SPI_PROTOCOL_CONFIG, &reg) != M2M_SUCCESS) {
 800c4b8:	463b      	mov	r3, r7
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800c4c0:	f7ff fe7c 	bl	800c1bc <nm_spi_read_reg_with_ret>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d026      	beq.n	800c518 <nm_spi_init+0x70>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
 800c4ca:	4b38      	ldr	r3, [pc, #224]	@ (800c5ac <nm_spi_init+0x104>)
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retrying with CRC off...\n");
 800c4d0:	f240 3231 	movw	r2, #817	@ 0x331
 800c4d4:	4936      	ldr	r1, [pc, #216]	@ (800c5b0 <nm_spi_init+0x108>)
 800c4d6:	4837      	ldr	r0, [pc, #220]	@ (800c5b4 <nm_spi_init+0x10c>)
 800c4d8:	f000 faf6 	bl	800cac8 <iprintf>
 800c4dc:	4836      	ldr	r0, [pc, #216]	@ (800c5b8 <nm_spi_init+0x110>)
 800c4de:	f000 fb63 	bl	800cba8 <puts>
 800c4e2:	200d      	movs	r0, #13
 800c4e4:	f000 fb02 	bl	800caec <putchar>
        if(nm_spi_read_reg_with_ret(NMI_SPI_PROTOCOL_CONFIG, &reg) != M2M_SUCCESS) {
 800c4e8:	463b      	mov	r3, r7
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800c4f0:	f7ff fe64 	bl	800c1bc <nm_spi_read_reg_with_ret>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00e      	beq.n	800c518 <nm_spi_init+0x70>
			// Read failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
 800c4fa:	f44f 724d 	mov.w	r2, #820	@ 0x334
 800c4fe:	492c      	ldr	r1, [pc, #176]	@ (800c5b0 <nm_spi_init+0x108>)
 800c500:	482c      	ldr	r0, [pc, #176]	@ (800c5b4 <nm_spi_init+0x10c>)
 800c502:	f000 fae1 	bl	800cac8 <iprintf>
 800c506:	482d      	ldr	r0, [pc, #180]	@ (800c5bc <nm_spi_init+0x114>)
 800c508:	f000 fb4e 	bl	800cba8 <puts>
 800c50c:	200d      	movs	r0, #13
 800c50e:	f000 faed 	bl	800caec <putchar>
            return M2M_ERR_BUS_FAIL;
 800c512:	f06f 0305 	mvn.w	r3, #5
 800c516:	e045      	b.n	800c5a4 <nm_spi_init+0xfc>
		}
	}
	if(gu8Crc_off == 0)
 800c518:	4b24      	ldr	r3, [pc, #144]	@ (800c5ac <nm_spi_init+0x104>)
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d126      	bne.n	800c56e <nm_spi_init+0xc6>
	{
		reg &= ~0xc;	/* disable crc checking */
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	f023 030c 	bic.w	r3, r3, #12
 800c526:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c52e:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800c536:	603b      	str	r3, [r7, #0]
        if(nm_spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg) != M2M_SUCCESS) {
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	4619      	mov	r1, r3
 800c53c:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800c540:	f7ff fd06 	bl	800bf50 <nm_spi_write_reg>
 800c544:	4603      	mov	r3, r0
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00e      	beq.n	800c568 <nm_spi_init+0xc0>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
 800c54a:	f240 323e 	movw	r2, #830	@ 0x33e
 800c54e:	4918      	ldr	r1, [pc, #96]	@ (800c5b0 <nm_spi_init+0x108>)
 800c550:	4818      	ldr	r0, [pc, #96]	@ (800c5b4 <nm_spi_init+0x10c>)
 800c552:	f000 fab9 	bl	800cac8 <iprintf>
 800c556:	481a      	ldr	r0, [pc, #104]	@ (800c5c0 <nm_spi_init+0x118>)
 800c558:	f000 fb26 	bl	800cba8 <puts>
 800c55c:	200d      	movs	r0, #13
 800c55e:	f000 fac5 	bl	800caec <putchar>
            return M2M_ERR_BUS_FAIL;
 800c562:	f06f 0305 	mvn.w	r3, #5
 800c566:	e01d      	b.n	800c5a4 <nm_spi_init+0xfc>
		}
		gu8Crc_off = 1;
 800c568:	4b10      	ldr	r3, [pc, #64]	@ (800c5ac <nm_spi_init+0x104>)
 800c56a:	2201      	movs	r2, #1
 800c56c:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
    if(nm_spi_read_reg_with_ret(0x1000, &chipid) != M2M_SUCCESS) {
 800c56e:	1d3b      	adds	r3, r7, #4
 800c570:	4619      	mov	r1, r3
 800c572:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800c576:	f7ff fe21 	bl	800c1bc <nm_spi_read_reg_with_ret>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00e      	beq.n	800c59e <nm_spi_init+0xf6>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
 800c580:	f44f 7252 	mov.w	r2, #840	@ 0x348
 800c584:	490a      	ldr	r1, [pc, #40]	@ (800c5b0 <nm_spi_init+0x108>)
 800c586:	480b      	ldr	r0, [pc, #44]	@ (800c5b4 <nm_spi_init+0x10c>)
 800c588:	f000 fa9e 	bl	800cac8 <iprintf>
 800c58c:	480d      	ldr	r0, [pc, #52]	@ (800c5c4 <nm_spi_init+0x11c>)
 800c58e:	f000 fb0b 	bl	800cba8 <puts>
 800c592:	200d      	movs	r0, #13
 800c594:	f000 faaa 	bl	800caec <putchar>
		return M2M_ERR_BUS_FAIL;
 800c598:	f06f 0305 	mvn.w	r3, #5
 800c59c:	e002      	b.n	800c5a4 <nm_spi_init+0xfc>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
 800c59e:	f7ff ff69 	bl	800c474 <spi_init_pkt_sz>


	return M2M_SUCCESS;
 800c5a2:	2300      	movs	r3, #0
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	2000063c 	.word	0x2000063c
 800c5b0:	0800ea30 	.word	0x0800ea30
 800c5b4:	0800e0ec 	.word	0x0800e0ec
 800c5b8:	0800e5d4 	.word	0x0800e5d4
 800c5bc:	0800e624 	.word	0x0800e624
 800c5c0:	0800e650 	.word	0x0800e650
 800c5c4:	0800e684 	.word	0x0800e684

0800c5c8 <nm_spi_deinit>:
*	@fn		nm_spi_init
*	@brief	DeInitialize the SPI 
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
*/ 
sint8 nm_spi_deinit(void)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
 800c5cc:	4b04      	ldr	r3, [pc, #16]	@ (800c5e0 <nm_spi_deinit+0x18>)
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	2000063c 	.word	0x2000063c

0800c5e4 <nm_spi_read_reg>:
*	@param [in]	u32Addr
*				Register address
*	@return	Register value
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

    nm_spi_read_reg_with_ret(u32Addr, &u32Val);
 800c5ec:	f107 030c 	add.w	r3, r7, #12
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7ff fde2 	bl	800c1bc <nm_spi_read_reg_with_ret>

	return u32Val;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b086      	sub	sp, #24
 800c606:	af00      	add	r7, sp, #0
 800c608:	60f8      	str	r0, [r7, #12]
 800c60a:	60b9      	str	r1, [r7, #8]
 800c60c:	4613      	mov	r3, r2
 800c60e:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 800c610:	88fb      	ldrh	r3, [r7, #6]
 800c612:	461a      	mov	r2, r3
 800c614:	68b9      	ldr	r1, [r7, #8]
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f7ff fe7c 	bl	800c314 <nm_spi_read>
 800c61c:	4603      	mov	r3, r0
 800c61e:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800c620:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d102      	bne.n	800c62e <nm_spi_read_block+0x2c>
 800c628:	2300      	movs	r3, #0
 800c62a:	75fb      	strb	r3, [r7, #23]
 800c62c:	e001      	b.n	800c632 <nm_spi_read_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800c62e:	23fa      	movs	r3, #250	@ 0xfa
 800c630:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800c632:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3718      	adds	r7, #24
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b086      	sub	sp, #24
 800c642:	af00      	add	r7, sp, #0
 800c644:	60f8      	str	r0, [r7, #12]
 800c646:	60b9      	str	r1, [r7, #8]
 800c648:	4613      	mov	r3, r2
 800c64a:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 800c64c:	88fb      	ldrh	r3, [r7, #6]
 800c64e:	461a      	mov	r2, r3
 800c650:	68b9      	ldr	r1, [r7, #8]
 800c652:	68f8      	ldr	r0, [r7, #12]
 800c654:	f7ff fd00 	bl	800c058 <nm_spi_write>
 800c658:	4603      	mov	r3, r0
 800c65a:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800c65c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d102      	bne.n	800c66a <nm_spi_write_block+0x2c>
 800c664:	2300      	movs	r3, #0
 800c666:	75fb      	strb	r3, [r7, #23]
 800c668:	e001      	b.n	800c66e <nm_spi_write_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800c66a:	23fa      	movs	r3, #250	@ 0xfa
 800c66c:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800c66e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c672:	4618      	mov	r0, r3
 800c674:	3718      	adds	r7, #24
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
	...

0800c67c <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800c682:	463b      	mov	r3, r7
 800c684:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	22b9      	movs	r2, #185	@ 0xb9
 800c68a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800c68c:	2100      	movs	r1, #0
 800c68e:	4810      	ldr	r0, [pc, #64]	@ (800c6d0 <spi_flash_enter_low_power_mode+0x54>)
 800c690:	f7fe fdf8 	bl	800b284 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	4619      	mov	r1, r3
 800c69a:	480e      	ldr	r0, [pc, #56]	@ (800c6d4 <spi_flash_enter_low_power_mode+0x58>)
 800c69c:	f7fe fdf2 	bl	800b284 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800c6a0:	2101      	movs	r1, #1
 800c6a2:	480d      	ldr	r0, [pc, #52]	@ (800c6d8 <spi_flash_enter_low_power_mode+0x5c>)
 800c6a4:	f7fe fdee 	bl	800b284 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	480c      	ldr	r0, [pc, #48]	@ (800c6dc <spi_flash_enter_low_power_mode+0x60>)
 800c6ac:	f7fe fdea 	bl	800b284 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
 800c6b0:	2181      	movs	r1, #129	@ 0x81
 800c6b2:	480b      	ldr	r0, [pc, #44]	@ (800c6e0 <spi_flash_enter_low_power_mode+0x64>)
 800c6b4:	f7fe fde6 	bl	800b284 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800c6b8:	bf00      	nop
 800c6ba:	480a      	ldr	r0, [pc, #40]	@ (800c6e4 <spi_flash_enter_low_power_mode+0x68>)
 800c6bc:	f7fe fdc8 	bl	800b250 <nm_read_reg>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d1f9      	bne.n	800c6ba <spi_flash_enter_low_power_mode+0x3e>
}
 800c6c6:	bf00      	nop
 800c6c8:	bf00      	nop
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	00010208 	.word	0x00010208
 800c6d4:	0001020c 	.word	0x0001020c
 800c6d8:	00010214 	.word	0x00010214
 800c6dc:	0001021c 	.word	0x0001021c
 800c6e0:	00010204 	.word	0x00010204
 800c6e4:	00010218 	.word	0x00010218

0800c6e8 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800c6ee:	463b      	mov	r3, r7
 800c6f0:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	22ab      	movs	r2, #171	@ 0xab
 800c6f6:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	4810      	ldr	r0, [pc, #64]	@ (800c73c <spi_flash_leave_low_power_mode+0x54>)
 800c6fc:	f7fe fdc2 	bl	800b284 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	4619      	mov	r1, r3
 800c706:	480e      	ldr	r0, [pc, #56]	@ (800c740 <spi_flash_leave_low_power_mode+0x58>)
 800c708:	f7fe fdbc 	bl	800b284 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800c70c:	2101      	movs	r1, #1
 800c70e:	480d      	ldr	r0, [pc, #52]	@ (800c744 <spi_flash_leave_low_power_mode+0x5c>)
 800c710:	f7fe fdb8 	bl	800b284 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800c714:	2100      	movs	r1, #0
 800c716:	480c      	ldr	r0, [pc, #48]	@ (800c748 <spi_flash_leave_low_power_mode+0x60>)
 800c718:	f7fe fdb4 	bl	800b284 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
 800c71c:	2181      	movs	r1, #129	@ 0x81
 800c71e:	480b      	ldr	r0, [pc, #44]	@ (800c74c <spi_flash_leave_low_power_mode+0x64>)
 800c720:	f7fe fdb0 	bl	800b284 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800c724:	bf00      	nop
 800c726:	480a      	ldr	r0, [pc, #40]	@ (800c750 <spi_flash_leave_low_power_mode+0x68>)
 800c728:	f7fe fd92 	bl	800b250 <nm_read_reg>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d1f9      	bne.n	800c726 <spi_flash_leave_low_power_mode+0x3e>
}
 800c732:	bf00      	nop
 800c734:	bf00      	nop
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	00010208 	.word	0x00010208
 800c740:	0001020c 	.word	0x0001020c
 800c744:	00010214 	.word	0x00010214
 800c748:	0001021c 	.word	0x0001021c
 800c74c:	00010204 	.word	0x00010204
 800c750:	00010218 	.word	0x00010218

0800c754 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	4603      	mov	r3, r0
 800c75c:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = M2M_SUCCESS;
 800c75e:	2300      	movs	r3, #0
 800c760:	73fb      	strb	r3, [r7, #15]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
 800c762:	f7fe fa9f 	bl	800aca4 <nmi_get_chipid>
 800c766:	4603      	mov	r3, r0
 800c768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c76c:	f5b3 7f68 	cmp.w	r3, #928	@ 0x3a0
 800c770:	d331      	bcc.n	800c7d6 <spi_flash_enable+0x82>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
 800c772:	f107 0308 	add.w	r3, r7, #8
 800c776:	4619      	mov	r1, r3
 800c778:	f241 4010 	movw	r0, #5136	@ 0x1410
 800c77c:	f7fe fd74 	bl	800b268 <nm_read_reg_with_ret>
 800c780:	4603      	mov	r3, r0
 800c782:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != M2M_SUCCESS) {
 800c784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d126      	bne.n	800c7da <spi_flash_enable+0x86>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	f023 63ee 	bic.w	r3, r3, #124780544	@ 0x7700000
 800c792:	f423 23ee 	bic.w	r3, r3, #487424	@ 0x77000
 800c796:	60bb      	str	r3, [r7, #8]
		if(enable) {
 800c798:	79fb      	ldrb	r3, [r7, #7]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d00e      	beq.n	800c7bc <spi_flash_enable+0x68>
			u32Val |= ((0x1111ul) << 12);
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	f043 7388 	orr.w	r3, r3, #17825792	@ 0x1100000
 800c7a4:	f443 3388 	orr.w	r3, r3, #69632	@ 0x11000
 800c7a8:	60bb      	str	r3, [r7, #8]
			nm_write_reg(0x1410, u32Val);
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	f241 4010 	movw	r0, #5136	@ 0x1410
 800c7b2:	f7fe fd67 	bl	800b284 <nm_write_reg>
			spi_flash_leave_low_power_mode();
 800c7b6:	f7ff ff97 	bl	800c6e8 <spi_flash_leave_low_power_mode>
 800c7ba:	e00f      	b.n	800c7dc <spi_flash_enable+0x88>
		} else {
			spi_flash_enter_low_power_mode();
 800c7bc:	f7ff ff5e 	bl	800c67c <spi_flash_enter_low_power_mode>
			/* Disable pinmux to SPI flash to minimize leakage. */
			u32Val |= ((0x0010ul) << 12);
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c7c6:	60bb      	str	r3, [r7, #8]
			nm_write_reg(0x1410, u32Val);
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	f241 4010 	movw	r0, #5136	@ 0x1410
 800c7d0:	f7fe fd58 	bl	800b284 <nm_write_reg>
 800c7d4:	e002      	b.n	800c7dc <spi_flash_enable+0x88>
		}
	}
ERR1:
 800c7d6:	bf00      	nop
 800c7d8:	e000      	b.n	800c7dc <spi_flash_enable+0x88>
			goto ERR1;
 800c7da:	bf00      	nop
	return s8Ret;
 800c7dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3710      	adds	r7, #16
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <sbrk_aligned>:
 800c7e8:	b570      	push	{r4, r5, r6, lr}
 800c7ea:	4e0f      	ldr	r6, [pc, #60]	@ (800c828 <sbrk_aligned+0x40>)
 800c7ec:	460c      	mov	r4, r1
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	6831      	ldr	r1, [r6, #0]
 800c7f2:	b911      	cbnz	r1, 800c7fa <sbrk_aligned+0x12>
 800c7f4:	f000 faf4 	bl	800cde0 <_sbrk_r>
 800c7f8:	6030      	str	r0, [r6, #0]
 800c7fa:	4621      	mov	r1, r4
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	f000 faef 	bl	800cde0 <_sbrk_r>
 800c802:	1c43      	adds	r3, r0, #1
 800c804:	d103      	bne.n	800c80e <sbrk_aligned+0x26>
 800c806:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c80a:	4620      	mov	r0, r4
 800c80c:	bd70      	pop	{r4, r5, r6, pc}
 800c80e:	1cc4      	adds	r4, r0, #3
 800c810:	f024 0403 	bic.w	r4, r4, #3
 800c814:	42a0      	cmp	r0, r4
 800c816:	d0f8      	beq.n	800c80a <sbrk_aligned+0x22>
 800c818:	1a21      	subs	r1, r4, r0
 800c81a:	4628      	mov	r0, r5
 800c81c:	f000 fae0 	bl	800cde0 <_sbrk_r>
 800c820:	3001      	adds	r0, #1
 800c822:	d1f2      	bne.n	800c80a <sbrk_aligned+0x22>
 800c824:	e7ef      	b.n	800c806 <sbrk_aligned+0x1e>
 800c826:	bf00      	nop
 800c828:	20000640 	.word	0x20000640

0800c82c <_malloc_r>:
 800c82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c830:	1ccd      	adds	r5, r1, #3
 800c832:	4606      	mov	r6, r0
 800c834:	f025 0503 	bic.w	r5, r5, #3
 800c838:	3508      	adds	r5, #8
 800c83a:	2d0c      	cmp	r5, #12
 800c83c:	bf38      	it	cc
 800c83e:	250c      	movcc	r5, #12
 800c840:	2d00      	cmp	r5, #0
 800c842:	db01      	blt.n	800c848 <_malloc_r+0x1c>
 800c844:	42a9      	cmp	r1, r5
 800c846:	d904      	bls.n	800c852 <_malloc_r+0x26>
 800c848:	230c      	movs	r3, #12
 800c84a:	6033      	str	r3, [r6, #0]
 800c84c:	2000      	movs	r0, #0
 800c84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c852:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c928 <_malloc_r+0xfc>
 800c856:	f000 f869 	bl	800c92c <__malloc_lock>
 800c85a:	f8d8 3000 	ldr.w	r3, [r8]
 800c85e:	461c      	mov	r4, r3
 800c860:	bb44      	cbnz	r4, 800c8b4 <_malloc_r+0x88>
 800c862:	4629      	mov	r1, r5
 800c864:	4630      	mov	r0, r6
 800c866:	f7ff ffbf 	bl	800c7e8 <sbrk_aligned>
 800c86a:	1c43      	adds	r3, r0, #1
 800c86c:	4604      	mov	r4, r0
 800c86e:	d158      	bne.n	800c922 <_malloc_r+0xf6>
 800c870:	f8d8 4000 	ldr.w	r4, [r8]
 800c874:	4627      	mov	r7, r4
 800c876:	2f00      	cmp	r7, #0
 800c878:	d143      	bne.n	800c902 <_malloc_r+0xd6>
 800c87a:	2c00      	cmp	r4, #0
 800c87c:	d04b      	beq.n	800c916 <_malloc_r+0xea>
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	4639      	mov	r1, r7
 800c882:	4630      	mov	r0, r6
 800c884:	eb04 0903 	add.w	r9, r4, r3
 800c888:	f000 faaa 	bl	800cde0 <_sbrk_r>
 800c88c:	4581      	cmp	r9, r0
 800c88e:	d142      	bne.n	800c916 <_malloc_r+0xea>
 800c890:	6821      	ldr	r1, [r4, #0]
 800c892:	4630      	mov	r0, r6
 800c894:	1a6d      	subs	r5, r5, r1
 800c896:	4629      	mov	r1, r5
 800c898:	f7ff ffa6 	bl	800c7e8 <sbrk_aligned>
 800c89c:	3001      	adds	r0, #1
 800c89e:	d03a      	beq.n	800c916 <_malloc_r+0xea>
 800c8a0:	6823      	ldr	r3, [r4, #0]
 800c8a2:	442b      	add	r3, r5
 800c8a4:	6023      	str	r3, [r4, #0]
 800c8a6:	f8d8 3000 	ldr.w	r3, [r8]
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	bb62      	cbnz	r2, 800c908 <_malloc_r+0xdc>
 800c8ae:	f8c8 7000 	str.w	r7, [r8]
 800c8b2:	e00f      	b.n	800c8d4 <_malloc_r+0xa8>
 800c8b4:	6822      	ldr	r2, [r4, #0]
 800c8b6:	1b52      	subs	r2, r2, r5
 800c8b8:	d420      	bmi.n	800c8fc <_malloc_r+0xd0>
 800c8ba:	2a0b      	cmp	r2, #11
 800c8bc:	d917      	bls.n	800c8ee <_malloc_r+0xc2>
 800c8be:	1961      	adds	r1, r4, r5
 800c8c0:	42a3      	cmp	r3, r4
 800c8c2:	6025      	str	r5, [r4, #0]
 800c8c4:	bf18      	it	ne
 800c8c6:	6059      	strne	r1, [r3, #4]
 800c8c8:	6863      	ldr	r3, [r4, #4]
 800c8ca:	bf08      	it	eq
 800c8cc:	f8c8 1000 	streq.w	r1, [r8]
 800c8d0:	5162      	str	r2, [r4, r5]
 800c8d2:	604b      	str	r3, [r1, #4]
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	f000 f82f 	bl	800c938 <__malloc_unlock>
 800c8da:	f104 000b 	add.w	r0, r4, #11
 800c8de:	1d23      	adds	r3, r4, #4
 800c8e0:	f020 0007 	bic.w	r0, r0, #7
 800c8e4:	1ac2      	subs	r2, r0, r3
 800c8e6:	bf1c      	itt	ne
 800c8e8:	1a1b      	subne	r3, r3, r0
 800c8ea:	50a3      	strne	r3, [r4, r2]
 800c8ec:	e7af      	b.n	800c84e <_malloc_r+0x22>
 800c8ee:	6862      	ldr	r2, [r4, #4]
 800c8f0:	42a3      	cmp	r3, r4
 800c8f2:	bf0c      	ite	eq
 800c8f4:	f8c8 2000 	streq.w	r2, [r8]
 800c8f8:	605a      	strne	r2, [r3, #4]
 800c8fa:	e7eb      	b.n	800c8d4 <_malloc_r+0xa8>
 800c8fc:	4623      	mov	r3, r4
 800c8fe:	6864      	ldr	r4, [r4, #4]
 800c900:	e7ae      	b.n	800c860 <_malloc_r+0x34>
 800c902:	463c      	mov	r4, r7
 800c904:	687f      	ldr	r7, [r7, #4]
 800c906:	e7b6      	b.n	800c876 <_malloc_r+0x4a>
 800c908:	461a      	mov	r2, r3
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	42a3      	cmp	r3, r4
 800c90e:	d1fb      	bne.n	800c908 <_malloc_r+0xdc>
 800c910:	2300      	movs	r3, #0
 800c912:	6053      	str	r3, [r2, #4]
 800c914:	e7de      	b.n	800c8d4 <_malloc_r+0xa8>
 800c916:	230c      	movs	r3, #12
 800c918:	4630      	mov	r0, r6
 800c91a:	6033      	str	r3, [r6, #0]
 800c91c:	f000 f80c 	bl	800c938 <__malloc_unlock>
 800c920:	e794      	b.n	800c84c <_malloc_r+0x20>
 800c922:	6005      	str	r5, [r0, #0]
 800c924:	e7d6      	b.n	800c8d4 <_malloc_r+0xa8>
 800c926:	bf00      	nop
 800c928:	20000644 	.word	0x20000644

0800c92c <__malloc_lock>:
 800c92c:	4801      	ldr	r0, [pc, #4]	@ (800c934 <__malloc_lock+0x8>)
 800c92e:	f000 baa4 	b.w	800ce7a <__retarget_lock_acquire_recursive>
 800c932:	bf00      	nop
 800c934:	20000788 	.word	0x20000788

0800c938 <__malloc_unlock>:
 800c938:	4801      	ldr	r0, [pc, #4]	@ (800c940 <__malloc_unlock+0x8>)
 800c93a:	f000 ba9f 	b.w	800ce7c <__retarget_lock_release_recursive>
 800c93e:	bf00      	nop
 800c940:	20000788 	.word	0x20000788

0800c944 <std>:
 800c944:	2300      	movs	r3, #0
 800c946:	b510      	push	{r4, lr}
 800c948:	4604      	mov	r4, r0
 800c94a:	6083      	str	r3, [r0, #8]
 800c94c:	8181      	strh	r1, [r0, #12]
 800c94e:	4619      	mov	r1, r3
 800c950:	6643      	str	r3, [r0, #100]	@ 0x64
 800c952:	81c2      	strh	r2, [r0, #14]
 800c954:	2208      	movs	r2, #8
 800c956:	6183      	str	r3, [r0, #24]
 800c958:	e9c0 3300 	strd	r3, r3, [r0]
 800c95c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c960:	305c      	adds	r0, #92	@ 0x5c
 800c962:	f000 fa01 	bl	800cd68 <memset>
 800c966:	4b0d      	ldr	r3, [pc, #52]	@ (800c99c <std+0x58>)
 800c968:	6224      	str	r4, [r4, #32]
 800c96a:	6263      	str	r3, [r4, #36]	@ 0x24
 800c96c:	4b0c      	ldr	r3, [pc, #48]	@ (800c9a0 <std+0x5c>)
 800c96e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c970:	4b0c      	ldr	r3, [pc, #48]	@ (800c9a4 <std+0x60>)
 800c972:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c974:	4b0c      	ldr	r3, [pc, #48]	@ (800c9a8 <std+0x64>)
 800c976:	6323      	str	r3, [r4, #48]	@ 0x30
 800c978:	4b0c      	ldr	r3, [pc, #48]	@ (800c9ac <std+0x68>)
 800c97a:	429c      	cmp	r4, r3
 800c97c:	d006      	beq.n	800c98c <std+0x48>
 800c97e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c982:	4294      	cmp	r4, r2
 800c984:	d002      	beq.n	800c98c <std+0x48>
 800c986:	33d0      	adds	r3, #208	@ 0xd0
 800c988:	429c      	cmp	r4, r3
 800c98a:	d105      	bne.n	800c998 <std+0x54>
 800c98c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c994:	f000 ba70 	b.w	800ce78 <__retarget_lock_init_recursive>
 800c998:	bd10      	pop	{r4, pc}
 800c99a:	bf00      	nop
 800c99c:	0800cbb9 	.word	0x0800cbb9
 800c9a0:	0800cbdb 	.word	0x0800cbdb
 800c9a4:	0800cc13 	.word	0x0800cc13
 800c9a8:	0800cc37 	.word	0x0800cc37
 800c9ac:	20000648 	.word	0x20000648

0800c9b0 <stdio_exit_handler>:
 800c9b0:	4a02      	ldr	r2, [pc, #8]	@ (800c9bc <stdio_exit_handler+0xc>)
 800c9b2:	4903      	ldr	r1, [pc, #12]	@ (800c9c0 <stdio_exit_handler+0x10>)
 800c9b4:	4803      	ldr	r0, [pc, #12]	@ (800c9c4 <stdio_exit_handler+0x14>)
 800c9b6:	f000 b869 	b.w	800ca8c <_fwalk_sglue>
 800c9ba:	bf00      	nop
 800c9bc:	20000010 	.word	0x20000010
 800c9c0:	0800d5c5 	.word	0x0800d5c5
 800c9c4:	20000020 	.word	0x20000020

0800c9c8 <cleanup_stdio>:
 800c9c8:	6841      	ldr	r1, [r0, #4]
 800c9ca:	4b0c      	ldr	r3, [pc, #48]	@ (800c9fc <cleanup_stdio+0x34>)
 800c9cc:	4299      	cmp	r1, r3
 800c9ce:	b510      	push	{r4, lr}
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	d001      	beq.n	800c9d8 <cleanup_stdio+0x10>
 800c9d4:	f000 fdf6 	bl	800d5c4 <_fflush_r>
 800c9d8:	68a1      	ldr	r1, [r4, #8]
 800c9da:	4b09      	ldr	r3, [pc, #36]	@ (800ca00 <cleanup_stdio+0x38>)
 800c9dc:	4299      	cmp	r1, r3
 800c9de:	d002      	beq.n	800c9e6 <cleanup_stdio+0x1e>
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f000 fdef 	bl	800d5c4 <_fflush_r>
 800c9e6:	68e1      	ldr	r1, [r4, #12]
 800c9e8:	4b06      	ldr	r3, [pc, #24]	@ (800ca04 <cleanup_stdio+0x3c>)
 800c9ea:	4299      	cmp	r1, r3
 800c9ec:	d004      	beq.n	800c9f8 <cleanup_stdio+0x30>
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9f4:	f000 bde6 	b.w	800d5c4 <_fflush_r>
 800c9f8:	bd10      	pop	{r4, pc}
 800c9fa:	bf00      	nop
 800c9fc:	20000648 	.word	0x20000648
 800ca00:	200006b0 	.word	0x200006b0
 800ca04:	20000718 	.word	0x20000718

0800ca08 <global_stdio_init.part.0>:
 800ca08:	b510      	push	{r4, lr}
 800ca0a:	4b0b      	ldr	r3, [pc, #44]	@ (800ca38 <global_stdio_init.part.0+0x30>)
 800ca0c:	2104      	movs	r1, #4
 800ca0e:	4c0b      	ldr	r4, [pc, #44]	@ (800ca3c <global_stdio_init.part.0+0x34>)
 800ca10:	4a0b      	ldr	r2, [pc, #44]	@ (800ca40 <global_stdio_init.part.0+0x38>)
 800ca12:	4620      	mov	r0, r4
 800ca14:	601a      	str	r2, [r3, #0]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f7ff ff94 	bl	800c944 <std>
 800ca1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ca20:	2201      	movs	r2, #1
 800ca22:	2109      	movs	r1, #9
 800ca24:	f7ff ff8e 	bl	800c944 <std>
 800ca28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ca2c:	2202      	movs	r2, #2
 800ca2e:	2112      	movs	r1, #18
 800ca30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca34:	f7ff bf86 	b.w	800c944 <std>
 800ca38:	20000780 	.word	0x20000780
 800ca3c:	20000648 	.word	0x20000648
 800ca40:	0800c9b1 	.word	0x0800c9b1

0800ca44 <__sfp_lock_acquire>:
 800ca44:	4801      	ldr	r0, [pc, #4]	@ (800ca4c <__sfp_lock_acquire+0x8>)
 800ca46:	f000 ba18 	b.w	800ce7a <__retarget_lock_acquire_recursive>
 800ca4a:	bf00      	nop
 800ca4c:	20000789 	.word	0x20000789

0800ca50 <__sfp_lock_release>:
 800ca50:	4801      	ldr	r0, [pc, #4]	@ (800ca58 <__sfp_lock_release+0x8>)
 800ca52:	f000 ba13 	b.w	800ce7c <__retarget_lock_release_recursive>
 800ca56:	bf00      	nop
 800ca58:	20000789 	.word	0x20000789

0800ca5c <__sinit>:
 800ca5c:	b510      	push	{r4, lr}
 800ca5e:	4604      	mov	r4, r0
 800ca60:	f7ff fff0 	bl	800ca44 <__sfp_lock_acquire>
 800ca64:	6a23      	ldr	r3, [r4, #32]
 800ca66:	b11b      	cbz	r3, 800ca70 <__sinit+0x14>
 800ca68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca6c:	f7ff bff0 	b.w	800ca50 <__sfp_lock_release>
 800ca70:	4b04      	ldr	r3, [pc, #16]	@ (800ca84 <__sinit+0x28>)
 800ca72:	6223      	str	r3, [r4, #32]
 800ca74:	4b04      	ldr	r3, [pc, #16]	@ (800ca88 <__sinit+0x2c>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1f5      	bne.n	800ca68 <__sinit+0xc>
 800ca7c:	f7ff ffc4 	bl	800ca08 <global_stdio_init.part.0>
 800ca80:	e7f2      	b.n	800ca68 <__sinit+0xc>
 800ca82:	bf00      	nop
 800ca84:	0800c9c9 	.word	0x0800c9c9
 800ca88:	20000780 	.word	0x20000780

0800ca8c <_fwalk_sglue>:
 800ca8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca90:	4607      	mov	r7, r0
 800ca92:	4688      	mov	r8, r1
 800ca94:	4614      	mov	r4, r2
 800ca96:	2600      	movs	r6, #0
 800ca98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca9c:	f1b9 0901 	subs.w	r9, r9, #1
 800caa0:	d505      	bpl.n	800caae <_fwalk_sglue+0x22>
 800caa2:	6824      	ldr	r4, [r4, #0]
 800caa4:	2c00      	cmp	r4, #0
 800caa6:	d1f7      	bne.n	800ca98 <_fwalk_sglue+0xc>
 800caa8:	4630      	mov	r0, r6
 800caaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caae:	89ab      	ldrh	r3, [r5, #12]
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d907      	bls.n	800cac4 <_fwalk_sglue+0x38>
 800cab4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cab8:	3301      	adds	r3, #1
 800caba:	d003      	beq.n	800cac4 <_fwalk_sglue+0x38>
 800cabc:	4629      	mov	r1, r5
 800cabe:	4638      	mov	r0, r7
 800cac0:	47c0      	blx	r8
 800cac2:	4306      	orrs	r6, r0
 800cac4:	3568      	adds	r5, #104	@ 0x68
 800cac6:	e7e9      	b.n	800ca9c <_fwalk_sglue+0x10>

0800cac8 <iprintf>:
 800cac8:	b40f      	push	{r0, r1, r2, r3}
 800caca:	b507      	push	{r0, r1, r2, lr}
 800cacc:	4906      	ldr	r1, [pc, #24]	@ (800cae8 <iprintf+0x20>)
 800cace:	ab04      	add	r3, sp, #16
 800cad0:	6808      	ldr	r0, [r1, #0]
 800cad2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cad6:	6881      	ldr	r1, [r0, #8]
 800cad8:	9301      	str	r3, [sp, #4]
 800cada:	f000 fa45 	bl	800cf68 <_vfiprintf_r>
 800cade:	b003      	add	sp, #12
 800cae0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cae4:	b004      	add	sp, #16
 800cae6:	4770      	bx	lr
 800cae8:	2000001c 	.word	0x2000001c

0800caec <putchar>:
 800caec:	4b02      	ldr	r3, [pc, #8]	@ (800caf8 <putchar+0xc>)
 800caee:	4601      	mov	r1, r0
 800caf0:	6818      	ldr	r0, [r3, #0]
 800caf2:	6882      	ldr	r2, [r0, #8]
 800caf4:	f000 bdef 	b.w	800d6d6 <_putc_r>
 800caf8:	2000001c 	.word	0x2000001c

0800cafc <_puts_r>:
 800cafc:	6a03      	ldr	r3, [r0, #32]
 800cafe:	b570      	push	{r4, r5, r6, lr}
 800cb00:	4605      	mov	r5, r0
 800cb02:	460e      	mov	r6, r1
 800cb04:	6884      	ldr	r4, [r0, #8]
 800cb06:	b90b      	cbnz	r3, 800cb0c <_puts_r+0x10>
 800cb08:	f7ff ffa8 	bl	800ca5c <__sinit>
 800cb0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb0e:	07db      	lsls	r3, r3, #31
 800cb10:	d405      	bmi.n	800cb1e <_puts_r+0x22>
 800cb12:	89a3      	ldrh	r3, [r4, #12]
 800cb14:	0598      	lsls	r0, r3, #22
 800cb16:	d402      	bmi.n	800cb1e <_puts_r+0x22>
 800cb18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb1a:	f000 f9ae 	bl	800ce7a <__retarget_lock_acquire_recursive>
 800cb1e:	89a3      	ldrh	r3, [r4, #12]
 800cb20:	0719      	lsls	r1, r3, #28
 800cb22:	d502      	bpl.n	800cb2a <_puts_r+0x2e>
 800cb24:	6923      	ldr	r3, [r4, #16]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d135      	bne.n	800cb96 <_puts_r+0x9a>
 800cb2a:	4621      	mov	r1, r4
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	f000 f8c5 	bl	800ccbc <__swsetup_r>
 800cb32:	b380      	cbz	r0, 800cb96 <_puts_r+0x9a>
 800cb34:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800cb38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb3a:	07da      	lsls	r2, r3, #31
 800cb3c:	d405      	bmi.n	800cb4a <_puts_r+0x4e>
 800cb3e:	89a3      	ldrh	r3, [r4, #12]
 800cb40:	059b      	lsls	r3, r3, #22
 800cb42:	d402      	bmi.n	800cb4a <_puts_r+0x4e>
 800cb44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb46:	f000 f999 	bl	800ce7c <__retarget_lock_release_recursive>
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	bd70      	pop	{r4, r5, r6, pc}
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	da04      	bge.n	800cb5c <_puts_r+0x60>
 800cb52:	69a2      	ldr	r2, [r4, #24]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	dc17      	bgt.n	800cb88 <_puts_r+0x8c>
 800cb58:	290a      	cmp	r1, #10
 800cb5a:	d015      	beq.n	800cb88 <_puts_r+0x8c>
 800cb5c:	6823      	ldr	r3, [r4, #0]
 800cb5e:	1c5a      	adds	r2, r3, #1
 800cb60:	6022      	str	r2, [r4, #0]
 800cb62:	7019      	strb	r1, [r3, #0]
 800cb64:	68a3      	ldr	r3, [r4, #8]
 800cb66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cb6a:	3b01      	subs	r3, #1
 800cb6c:	60a3      	str	r3, [r4, #8]
 800cb6e:	2900      	cmp	r1, #0
 800cb70:	d1ed      	bne.n	800cb4e <_puts_r+0x52>
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	da11      	bge.n	800cb9a <_puts_r+0x9e>
 800cb76:	4622      	mov	r2, r4
 800cb78:	210a      	movs	r1, #10
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	f000 f85f 	bl	800cc3e <__swbuf_r>
 800cb80:	3001      	adds	r0, #1
 800cb82:	d0d7      	beq.n	800cb34 <_puts_r+0x38>
 800cb84:	250a      	movs	r5, #10
 800cb86:	e7d7      	b.n	800cb38 <_puts_r+0x3c>
 800cb88:	4622      	mov	r2, r4
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	f000 f857 	bl	800cc3e <__swbuf_r>
 800cb90:	3001      	adds	r0, #1
 800cb92:	d1e7      	bne.n	800cb64 <_puts_r+0x68>
 800cb94:	e7ce      	b.n	800cb34 <_puts_r+0x38>
 800cb96:	3e01      	subs	r6, #1
 800cb98:	e7e4      	b.n	800cb64 <_puts_r+0x68>
 800cb9a:	6823      	ldr	r3, [r4, #0]
 800cb9c:	1c5a      	adds	r2, r3, #1
 800cb9e:	6022      	str	r2, [r4, #0]
 800cba0:	220a      	movs	r2, #10
 800cba2:	701a      	strb	r2, [r3, #0]
 800cba4:	e7ee      	b.n	800cb84 <_puts_r+0x88>
	...

0800cba8 <puts>:
 800cba8:	4b02      	ldr	r3, [pc, #8]	@ (800cbb4 <puts+0xc>)
 800cbaa:	4601      	mov	r1, r0
 800cbac:	6818      	ldr	r0, [r3, #0]
 800cbae:	f7ff bfa5 	b.w	800cafc <_puts_r>
 800cbb2:	bf00      	nop
 800cbb4:	2000001c 	.word	0x2000001c

0800cbb8 <__sread>:
 800cbb8:	b510      	push	{r4, lr}
 800cbba:	460c      	mov	r4, r1
 800cbbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc0:	f000 f8fc 	bl	800cdbc <_read_r>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	bfab      	itete	ge
 800cbc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cbca:	89a3      	ldrhlt	r3, [r4, #12]
 800cbcc:	181b      	addge	r3, r3, r0
 800cbce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cbd2:	bfac      	ite	ge
 800cbd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cbd6:	81a3      	strhlt	r3, [r4, #12]
 800cbd8:	bd10      	pop	{r4, pc}

0800cbda <__swrite>:
 800cbda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbde:	461f      	mov	r7, r3
 800cbe0:	898b      	ldrh	r3, [r1, #12]
 800cbe2:	4605      	mov	r5, r0
 800cbe4:	460c      	mov	r4, r1
 800cbe6:	05db      	lsls	r3, r3, #23
 800cbe8:	4616      	mov	r6, r2
 800cbea:	d505      	bpl.n	800cbf8 <__swrite+0x1e>
 800cbec:	2302      	movs	r3, #2
 800cbee:	2200      	movs	r2, #0
 800cbf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf4:	f000 f8d0 	bl	800cd98 <_lseek_r>
 800cbf8:	89a3      	ldrh	r3, [r4, #12]
 800cbfa:	4632      	mov	r2, r6
 800cbfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc00:	4628      	mov	r0, r5
 800cc02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc06:	81a3      	strh	r3, [r4, #12]
 800cc08:	463b      	mov	r3, r7
 800cc0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc0e:	f000 b8f7 	b.w	800ce00 <_write_r>

0800cc12 <__sseek>:
 800cc12:	b510      	push	{r4, lr}
 800cc14:	460c      	mov	r4, r1
 800cc16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc1a:	f000 f8bd 	bl	800cd98 <_lseek_r>
 800cc1e:	1c43      	adds	r3, r0, #1
 800cc20:	89a3      	ldrh	r3, [r4, #12]
 800cc22:	bf15      	itete	ne
 800cc24:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cc26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cc2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc2e:	81a3      	strheq	r3, [r4, #12]
 800cc30:	bf18      	it	ne
 800cc32:	81a3      	strhne	r3, [r4, #12]
 800cc34:	bd10      	pop	{r4, pc}

0800cc36 <__sclose>:
 800cc36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc3a:	f000 b89d 	b.w	800cd78 <_close_r>

0800cc3e <__swbuf_r>:
 800cc3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc40:	460e      	mov	r6, r1
 800cc42:	4614      	mov	r4, r2
 800cc44:	4605      	mov	r5, r0
 800cc46:	b118      	cbz	r0, 800cc50 <__swbuf_r+0x12>
 800cc48:	6a03      	ldr	r3, [r0, #32]
 800cc4a:	b90b      	cbnz	r3, 800cc50 <__swbuf_r+0x12>
 800cc4c:	f7ff ff06 	bl	800ca5c <__sinit>
 800cc50:	69a3      	ldr	r3, [r4, #24]
 800cc52:	60a3      	str	r3, [r4, #8]
 800cc54:	89a3      	ldrh	r3, [r4, #12]
 800cc56:	071a      	lsls	r2, r3, #28
 800cc58:	d501      	bpl.n	800cc5e <__swbuf_r+0x20>
 800cc5a:	6923      	ldr	r3, [r4, #16]
 800cc5c:	b943      	cbnz	r3, 800cc70 <__swbuf_r+0x32>
 800cc5e:	4621      	mov	r1, r4
 800cc60:	4628      	mov	r0, r5
 800cc62:	f000 f82b 	bl	800ccbc <__swsetup_r>
 800cc66:	b118      	cbz	r0, 800cc70 <__swbuf_r+0x32>
 800cc68:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cc6c:	4638      	mov	r0, r7
 800cc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc70:	6823      	ldr	r3, [r4, #0]
 800cc72:	b2f6      	uxtb	r6, r6
 800cc74:	6922      	ldr	r2, [r4, #16]
 800cc76:	4637      	mov	r7, r6
 800cc78:	1a98      	subs	r0, r3, r2
 800cc7a:	6963      	ldr	r3, [r4, #20]
 800cc7c:	4283      	cmp	r3, r0
 800cc7e:	dc05      	bgt.n	800cc8c <__swbuf_r+0x4e>
 800cc80:	4621      	mov	r1, r4
 800cc82:	4628      	mov	r0, r5
 800cc84:	f000 fc9e 	bl	800d5c4 <_fflush_r>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	d1ed      	bne.n	800cc68 <__swbuf_r+0x2a>
 800cc8c:	68a3      	ldr	r3, [r4, #8]
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	60a3      	str	r3, [r4, #8]
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	1c5a      	adds	r2, r3, #1
 800cc96:	6022      	str	r2, [r4, #0]
 800cc98:	701e      	strb	r6, [r3, #0]
 800cc9a:	1c43      	adds	r3, r0, #1
 800cc9c:	6962      	ldr	r2, [r4, #20]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d004      	beq.n	800ccac <__swbuf_r+0x6e>
 800cca2:	89a3      	ldrh	r3, [r4, #12]
 800cca4:	07db      	lsls	r3, r3, #31
 800cca6:	d5e1      	bpl.n	800cc6c <__swbuf_r+0x2e>
 800cca8:	2e0a      	cmp	r6, #10
 800ccaa:	d1df      	bne.n	800cc6c <__swbuf_r+0x2e>
 800ccac:	4621      	mov	r1, r4
 800ccae:	4628      	mov	r0, r5
 800ccb0:	f000 fc88 	bl	800d5c4 <_fflush_r>
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d0d9      	beq.n	800cc6c <__swbuf_r+0x2e>
 800ccb8:	e7d6      	b.n	800cc68 <__swbuf_r+0x2a>
	...

0800ccbc <__swsetup_r>:
 800ccbc:	b538      	push	{r3, r4, r5, lr}
 800ccbe:	4b29      	ldr	r3, [pc, #164]	@ (800cd64 <__swsetup_r+0xa8>)
 800ccc0:	4605      	mov	r5, r0
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	6818      	ldr	r0, [r3, #0]
 800ccc6:	b118      	cbz	r0, 800ccd0 <__swsetup_r+0x14>
 800ccc8:	6a03      	ldr	r3, [r0, #32]
 800ccca:	b90b      	cbnz	r3, 800ccd0 <__swsetup_r+0x14>
 800cccc:	f7ff fec6 	bl	800ca5c <__sinit>
 800ccd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccd4:	0719      	lsls	r1, r3, #28
 800ccd6:	d422      	bmi.n	800cd1e <__swsetup_r+0x62>
 800ccd8:	06da      	lsls	r2, r3, #27
 800ccda:	d407      	bmi.n	800ccec <__swsetup_r+0x30>
 800ccdc:	2209      	movs	r2, #9
 800ccde:	602a      	str	r2, [r5, #0]
 800cce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cce4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cce8:	81a3      	strh	r3, [r4, #12]
 800ccea:	e033      	b.n	800cd54 <__swsetup_r+0x98>
 800ccec:	0758      	lsls	r0, r3, #29
 800ccee:	d512      	bpl.n	800cd16 <__swsetup_r+0x5a>
 800ccf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccf2:	b141      	cbz	r1, 800cd06 <__swsetup_r+0x4a>
 800ccf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccf8:	4299      	cmp	r1, r3
 800ccfa:	d002      	beq.n	800cd02 <__swsetup_r+0x46>
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	f000 f8bf 	bl	800ce80 <_free_r>
 800cd02:	2300      	movs	r3, #0
 800cd04:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd06:	89a3      	ldrh	r3, [r4, #12]
 800cd08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cd0c:	81a3      	strh	r3, [r4, #12]
 800cd0e:	2300      	movs	r3, #0
 800cd10:	6063      	str	r3, [r4, #4]
 800cd12:	6923      	ldr	r3, [r4, #16]
 800cd14:	6023      	str	r3, [r4, #0]
 800cd16:	89a3      	ldrh	r3, [r4, #12]
 800cd18:	f043 0308 	orr.w	r3, r3, #8
 800cd1c:	81a3      	strh	r3, [r4, #12]
 800cd1e:	6923      	ldr	r3, [r4, #16]
 800cd20:	b94b      	cbnz	r3, 800cd36 <__swsetup_r+0x7a>
 800cd22:	89a3      	ldrh	r3, [r4, #12]
 800cd24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd2c:	d003      	beq.n	800cd36 <__swsetup_r+0x7a>
 800cd2e:	4621      	mov	r1, r4
 800cd30:	4628      	mov	r0, r5
 800cd32:	f000 fc94 	bl	800d65e <__smakebuf_r>
 800cd36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd3a:	f013 0201 	ands.w	r2, r3, #1
 800cd3e:	d00a      	beq.n	800cd56 <__swsetup_r+0x9a>
 800cd40:	2200      	movs	r2, #0
 800cd42:	60a2      	str	r2, [r4, #8]
 800cd44:	6962      	ldr	r2, [r4, #20]
 800cd46:	4252      	negs	r2, r2
 800cd48:	61a2      	str	r2, [r4, #24]
 800cd4a:	6922      	ldr	r2, [r4, #16]
 800cd4c:	b942      	cbnz	r2, 800cd60 <__swsetup_r+0xa4>
 800cd4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd52:	d1c5      	bne.n	800cce0 <__swsetup_r+0x24>
 800cd54:	bd38      	pop	{r3, r4, r5, pc}
 800cd56:	0799      	lsls	r1, r3, #30
 800cd58:	bf58      	it	pl
 800cd5a:	6962      	ldrpl	r2, [r4, #20]
 800cd5c:	60a2      	str	r2, [r4, #8]
 800cd5e:	e7f4      	b.n	800cd4a <__swsetup_r+0x8e>
 800cd60:	2000      	movs	r0, #0
 800cd62:	e7f7      	b.n	800cd54 <__swsetup_r+0x98>
 800cd64:	2000001c 	.word	0x2000001c

0800cd68 <memset>:
 800cd68:	4402      	add	r2, r0
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d100      	bne.n	800cd72 <memset+0xa>
 800cd70:	4770      	bx	lr
 800cd72:	f803 1b01 	strb.w	r1, [r3], #1
 800cd76:	e7f9      	b.n	800cd6c <memset+0x4>

0800cd78 <_close_r>:
 800cd78:	b538      	push	{r3, r4, r5, lr}
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	4d05      	ldr	r5, [pc, #20]	@ (800cd94 <_close_r+0x1c>)
 800cd7e:	4604      	mov	r4, r0
 800cd80:	4608      	mov	r0, r1
 800cd82:	602b      	str	r3, [r5, #0]
 800cd84:	f7f4 fb0c 	bl	80013a0 <_close>
 800cd88:	1c43      	adds	r3, r0, #1
 800cd8a:	d102      	bne.n	800cd92 <_close_r+0x1a>
 800cd8c:	682b      	ldr	r3, [r5, #0]
 800cd8e:	b103      	cbz	r3, 800cd92 <_close_r+0x1a>
 800cd90:	6023      	str	r3, [r4, #0]
 800cd92:	bd38      	pop	{r3, r4, r5, pc}
 800cd94:	20000784 	.word	0x20000784

0800cd98 <_lseek_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	4604      	mov	r4, r0
 800cd9c:	4d06      	ldr	r5, [pc, #24]	@ (800cdb8 <_lseek_r+0x20>)
 800cd9e:	4608      	mov	r0, r1
 800cda0:	4611      	mov	r1, r2
 800cda2:	2200      	movs	r2, #0
 800cda4:	602a      	str	r2, [r5, #0]
 800cda6:	461a      	mov	r2, r3
 800cda8:	f7f4 fb21 	bl	80013ee <_lseek>
 800cdac:	1c43      	adds	r3, r0, #1
 800cdae:	d102      	bne.n	800cdb6 <_lseek_r+0x1e>
 800cdb0:	682b      	ldr	r3, [r5, #0]
 800cdb2:	b103      	cbz	r3, 800cdb6 <_lseek_r+0x1e>
 800cdb4:	6023      	str	r3, [r4, #0]
 800cdb6:	bd38      	pop	{r3, r4, r5, pc}
 800cdb8:	20000784 	.word	0x20000784

0800cdbc <_read_r>:
 800cdbc:	b538      	push	{r3, r4, r5, lr}
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	4d06      	ldr	r5, [pc, #24]	@ (800cddc <_read_r+0x20>)
 800cdc2:	4608      	mov	r0, r1
 800cdc4:	4611      	mov	r1, r2
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	602a      	str	r2, [r5, #0]
 800cdca:	461a      	mov	r2, r3
 800cdcc:	f7f4 faaf 	bl	800132e <_read>
 800cdd0:	1c43      	adds	r3, r0, #1
 800cdd2:	d102      	bne.n	800cdda <_read_r+0x1e>
 800cdd4:	682b      	ldr	r3, [r5, #0]
 800cdd6:	b103      	cbz	r3, 800cdda <_read_r+0x1e>
 800cdd8:	6023      	str	r3, [r4, #0]
 800cdda:	bd38      	pop	{r3, r4, r5, pc}
 800cddc:	20000784 	.word	0x20000784

0800cde0 <_sbrk_r>:
 800cde0:	b538      	push	{r3, r4, r5, lr}
 800cde2:	2300      	movs	r3, #0
 800cde4:	4d05      	ldr	r5, [pc, #20]	@ (800cdfc <_sbrk_r+0x1c>)
 800cde6:	4604      	mov	r4, r0
 800cde8:	4608      	mov	r0, r1
 800cdea:	602b      	str	r3, [r5, #0]
 800cdec:	f7f4 fb0c 	bl	8001408 <_sbrk>
 800cdf0:	1c43      	adds	r3, r0, #1
 800cdf2:	d102      	bne.n	800cdfa <_sbrk_r+0x1a>
 800cdf4:	682b      	ldr	r3, [r5, #0]
 800cdf6:	b103      	cbz	r3, 800cdfa <_sbrk_r+0x1a>
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	bd38      	pop	{r3, r4, r5, pc}
 800cdfc:	20000784 	.word	0x20000784

0800ce00 <_write_r>:
 800ce00:	b538      	push	{r3, r4, r5, lr}
 800ce02:	4604      	mov	r4, r0
 800ce04:	4d06      	ldr	r5, [pc, #24]	@ (800ce20 <_write_r+0x20>)
 800ce06:	4608      	mov	r0, r1
 800ce08:	4611      	mov	r1, r2
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	602a      	str	r2, [r5, #0]
 800ce0e:	461a      	mov	r2, r3
 800ce10:	f7f4 faaa 	bl	8001368 <_write>
 800ce14:	1c43      	adds	r3, r0, #1
 800ce16:	d102      	bne.n	800ce1e <_write_r+0x1e>
 800ce18:	682b      	ldr	r3, [r5, #0]
 800ce1a:	b103      	cbz	r3, 800ce1e <_write_r+0x1e>
 800ce1c:	6023      	str	r3, [r4, #0]
 800ce1e:	bd38      	pop	{r3, r4, r5, pc}
 800ce20:	20000784 	.word	0x20000784

0800ce24 <__errno>:
 800ce24:	4b01      	ldr	r3, [pc, #4]	@ (800ce2c <__errno+0x8>)
 800ce26:	6818      	ldr	r0, [r3, #0]
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	2000001c 	.word	0x2000001c

0800ce30 <__libc_init_array>:
 800ce30:	b570      	push	{r4, r5, r6, lr}
 800ce32:	4d0d      	ldr	r5, [pc, #52]	@ (800ce68 <__libc_init_array+0x38>)
 800ce34:	2600      	movs	r6, #0
 800ce36:	4c0d      	ldr	r4, [pc, #52]	@ (800ce6c <__libc_init_array+0x3c>)
 800ce38:	1b64      	subs	r4, r4, r5
 800ce3a:	10a4      	asrs	r4, r4, #2
 800ce3c:	42a6      	cmp	r6, r4
 800ce3e:	d109      	bne.n	800ce54 <__libc_init_array+0x24>
 800ce40:	4d0b      	ldr	r5, [pc, #44]	@ (800ce70 <__libc_init_array+0x40>)
 800ce42:	2600      	movs	r6, #0
 800ce44:	4c0b      	ldr	r4, [pc, #44]	@ (800ce74 <__libc_init_array+0x44>)
 800ce46:	f000 fcab 	bl	800d7a0 <_init>
 800ce4a:	1b64      	subs	r4, r4, r5
 800ce4c:	10a4      	asrs	r4, r4, #2
 800ce4e:	42a6      	cmp	r6, r4
 800ce50:	d105      	bne.n	800ce5e <__libc_init_array+0x2e>
 800ce52:	bd70      	pop	{r4, r5, r6, pc}
 800ce54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce58:	3601      	adds	r6, #1
 800ce5a:	4798      	blx	r3
 800ce5c:	e7ee      	b.n	800ce3c <__libc_init_array+0xc>
 800ce5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce62:	3601      	adds	r6, #1
 800ce64:	4798      	blx	r3
 800ce66:	e7f2      	b.n	800ce4e <__libc_init_array+0x1e>
 800ce68:	0800ea78 	.word	0x0800ea78
 800ce6c:	0800ea78 	.word	0x0800ea78
 800ce70:	0800ea78 	.word	0x0800ea78
 800ce74:	0800ea7c 	.word	0x0800ea7c

0800ce78 <__retarget_lock_init_recursive>:
 800ce78:	4770      	bx	lr

0800ce7a <__retarget_lock_acquire_recursive>:
 800ce7a:	4770      	bx	lr

0800ce7c <__retarget_lock_release_recursive>:
 800ce7c:	4770      	bx	lr
	...

0800ce80 <_free_r>:
 800ce80:	b538      	push	{r3, r4, r5, lr}
 800ce82:	4605      	mov	r5, r0
 800ce84:	2900      	cmp	r1, #0
 800ce86:	d041      	beq.n	800cf0c <_free_r+0x8c>
 800ce88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce8c:	1f0c      	subs	r4, r1, #4
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	bfb8      	it	lt
 800ce92:	18e4      	addlt	r4, r4, r3
 800ce94:	f7ff fd4a 	bl	800c92c <__malloc_lock>
 800ce98:	4a1d      	ldr	r2, [pc, #116]	@ (800cf10 <_free_r+0x90>)
 800ce9a:	6813      	ldr	r3, [r2, #0]
 800ce9c:	b933      	cbnz	r3, 800ceac <_free_r+0x2c>
 800ce9e:	6063      	str	r3, [r4, #4]
 800cea0:	6014      	str	r4, [r2, #0]
 800cea2:	4628      	mov	r0, r5
 800cea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cea8:	f7ff bd46 	b.w	800c938 <__malloc_unlock>
 800ceac:	42a3      	cmp	r3, r4
 800ceae:	d908      	bls.n	800cec2 <_free_r+0x42>
 800ceb0:	6820      	ldr	r0, [r4, #0]
 800ceb2:	1821      	adds	r1, r4, r0
 800ceb4:	428b      	cmp	r3, r1
 800ceb6:	bf01      	itttt	eq
 800ceb8:	6819      	ldreq	r1, [r3, #0]
 800ceba:	685b      	ldreq	r3, [r3, #4]
 800cebc:	1809      	addeq	r1, r1, r0
 800cebe:	6021      	streq	r1, [r4, #0]
 800cec0:	e7ed      	b.n	800ce9e <_free_r+0x1e>
 800cec2:	461a      	mov	r2, r3
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	b10b      	cbz	r3, 800cecc <_free_r+0x4c>
 800cec8:	42a3      	cmp	r3, r4
 800ceca:	d9fa      	bls.n	800cec2 <_free_r+0x42>
 800cecc:	6811      	ldr	r1, [r2, #0]
 800cece:	1850      	adds	r0, r2, r1
 800ced0:	42a0      	cmp	r0, r4
 800ced2:	d10b      	bne.n	800ceec <_free_r+0x6c>
 800ced4:	6820      	ldr	r0, [r4, #0]
 800ced6:	4401      	add	r1, r0
 800ced8:	1850      	adds	r0, r2, r1
 800ceda:	6011      	str	r1, [r2, #0]
 800cedc:	4283      	cmp	r3, r0
 800cede:	d1e0      	bne.n	800cea2 <_free_r+0x22>
 800cee0:	6818      	ldr	r0, [r3, #0]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	4408      	add	r0, r1
 800cee6:	6053      	str	r3, [r2, #4]
 800cee8:	6010      	str	r0, [r2, #0]
 800ceea:	e7da      	b.n	800cea2 <_free_r+0x22>
 800ceec:	d902      	bls.n	800cef4 <_free_r+0x74>
 800ceee:	230c      	movs	r3, #12
 800cef0:	602b      	str	r3, [r5, #0]
 800cef2:	e7d6      	b.n	800cea2 <_free_r+0x22>
 800cef4:	6820      	ldr	r0, [r4, #0]
 800cef6:	1821      	adds	r1, r4, r0
 800cef8:	428b      	cmp	r3, r1
 800cefa:	bf02      	ittt	eq
 800cefc:	6819      	ldreq	r1, [r3, #0]
 800cefe:	685b      	ldreq	r3, [r3, #4]
 800cf00:	1809      	addeq	r1, r1, r0
 800cf02:	6063      	str	r3, [r4, #4]
 800cf04:	bf08      	it	eq
 800cf06:	6021      	streq	r1, [r4, #0]
 800cf08:	6054      	str	r4, [r2, #4]
 800cf0a:	e7ca      	b.n	800cea2 <_free_r+0x22>
 800cf0c:	bd38      	pop	{r3, r4, r5, pc}
 800cf0e:	bf00      	nop
 800cf10:	20000644 	.word	0x20000644

0800cf14 <__sfputc_r>:
 800cf14:	6893      	ldr	r3, [r2, #8]
 800cf16:	3b01      	subs	r3, #1
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	6093      	str	r3, [r2, #8]
 800cf1c:	b410      	push	{r4}
 800cf1e:	da08      	bge.n	800cf32 <__sfputc_r+0x1e>
 800cf20:	6994      	ldr	r4, [r2, #24]
 800cf22:	42a3      	cmp	r3, r4
 800cf24:	db01      	blt.n	800cf2a <__sfputc_r+0x16>
 800cf26:	290a      	cmp	r1, #10
 800cf28:	d103      	bne.n	800cf32 <__sfputc_r+0x1e>
 800cf2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf2e:	f7ff be86 	b.w	800cc3e <__swbuf_r>
 800cf32:	6813      	ldr	r3, [r2, #0]
 800cf34:	1c58      	adds	r0, r3, #1
 800cf36:	6010      	str	r0, [r2, #0]
 800cf38:	4608      	mov	r0, r1
 800cf3a:	7019      	strb	r1, [r3, #0]
 800cf3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf40:	4770      	bx	lr

0800cf42 <__sfputs_r>:
 800cf42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf44:	4606      	mov	r6, r0
 800cf46:	460f      	mov	r7, r1
 800cf48:	4614      	mov	r4, r2
 800cf4a:	18d5      	adds	r5, r2, r3
 800cf4c:	42ac      	cmp	r4, r5
 800cf4e:	d101      	bne.n	800cf54 <__sfputs_r+0x12>
 800cf50:	2000      	movs	r0, #0
 800cf52:	e007      	b.n	800cf64 <__sfputs_r+0x22>
 800cf54:	463a      	mov	r2, r7
 800cf56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	f7ff ffda 	bl	800cf14 <__sfputc_r>
 800cf60:	1c43      	adds	r3, r0, #1
 800cf62:	d1f3      	bne.n	800cf4c <__sfputs_r+0xa>
 800cf64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf68 <_vfiprintf_r>:
 800cf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6c:	460d      	mov	r5, r1
 800cf6e:	b09d      	sub	sp, #116	@ 0x74
 800cf70:	4614      	mov	r4, r2
 800cf72:	4698      	mov	r8, r3
 800cf74:	4606      	mov	r6, r0
 800cf76:	b118      	cbz	r0, 800cf80 <_vfiprintf_r+0x18>
 800cf78:	6a03      	ldr	r3, [r0, #32]
 800cf7a:	b90b      	cbnz	r3, 800cf80 <_vfiprintf_r+0x18>
 800cf7c:	f7ff fd6e 	bl	800ca5c <__sinit>
 800cf80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf82:	07d9      	lsls	r1, r3, #31
 800cf84:	d405      	bmi.n	800cf92 <_vfiprintf_r+0x2a>
 800cf86:	89ab      	ldrh	r3, [r5, #12]
 800cf88:	059a      	lsls	r2, r3, #22
 800cf8a:	d402      	bmi.n	800cf92 <_vfiprintf_r+0x2a>
 800cf8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf8e:	f7ff ff74 	bl	800ce7a <__retarget_lock_acquire_recursive>
 800cf92:	89ab      	ldrh	r3, [r5, #12]
 800cf94:	071b      	lsls	r3, r3, #28
 800cf96:	d501      	bpl.n	800cf9c <_vfiprintf_r+0x34>
 800cf98:	692b      	ldr	r3, [r5, #16]
 800cf9a:	b99b      	cbnz	r3, 800cfc4 <_vfiprintf_r+0x5c>
 800cf9c:	4629      	mov	r1, r5
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	f7ff fe8c 	bl	800ccbc <__swsetup_r>
 800cfa4:	b170      	cbz	r0, 800cfc4 <_vfiprintf_r+0x5c>
 800cfa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfa8:	07dc      	lsls	r4, r3, #31
 800cfaa:	d504      	bpl.n	800cfb6 <_vfiprintf_r+0x4e>
 800cfac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cfb0:	b01d      	add	sp, #116	@ 0x74
 800cfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb6:	89ab      	ldrh	r3, [r5, #12]
 800cfb8:	0598      	lsls	r0, r3, #22
 800cfba:	d4f7      	bmi.n	800cfac <_vfiprintf_r+0x44>
 800cfbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfbe:	f7ff ff5d 	bl	800ce7c <__retarget_lock_release_recursive>
 800cfc2:	e7f3      	b.n	800cfac <_vfiprintf_r+0x44>
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfca:	f04f 0901 	mov.w	r9, #1
 800cfce:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d184 <_vfiprintf_r+0x21c>
 800cfd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfd4:	2320      	movs	r3, #32
 800cfd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cfda:	2330      	movs	r3, #48	@ 0x30
 800cfdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cfe0:	4623      	mov	r3, r4
 800cfe2:	469a      	mov	sl, r3
 800cfe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfe8:	b10a      	cbz	r2, 800cfee <_vfiprintf_r+0x86>
 800cfea:	2a25      	cmp	r2, #37	@ 0x25
 800cfec:	d1f9      	bne.n	800cfe2 <_vfiprintf_r+0x7a>
 800cfee:	ebba 0b04 	subs.w	fp, sl, r4
 800cff2:	d00b      	beq.n	800d00c <_vfiprintf_r+0xa4>
 800cff4:	465b      	mov	r3, fp
 800cff6:	4622      	mov	r2, r4
 800cff8:	4629      	mov	r1, r5
 800cffa:	4630      	mov	r0, r6
 800cffc:	f7ff ffa1 	bl	800cf42 <__sfputs_r>
 800d000:	3001      	adds	r0, #1
 800d002:	f000 80a7 	beq.w	800d154 <_vfiprintf_r+0x1ec>
 800d006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d008:	445a      	add	r2, fp
 800d00a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d00c:	f89a 3000 	ldrb.w	r3, [sl]
 800d010:	2b00      	cmp	r3, #0
 800d012:	f000 809f 	beq.w	800d154 <_vfiprintf_r+0x1ec>
 800d016:	2300      	movs	r3, #0
 800d018:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d01c:	f10a 0a01 	add.w	sl, sl, #1
 800d020:	9304      	str	r3, [sp, #16]
 800d022:	9307      	str	r3, [sp, #28]
 800d024:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d028:	931a      	str	r3, [sp, #104]	@ 0x68
 800d02a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d02e:	4654      	mov	r4, sl
 800d030:	2205      	movs	r2, #5
 800d032:	4854      	ldr	r0, [pc, #336]	@ (800d184 <_vfiprintf_r+0x21c>)
 800d034:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d038:	f000 fba4 	bl	800d784 <memchr>
 800d03c:	9a04      	ldr	r2, [sp, #16]
 800d03e:	b9d8      	cbnz	r0, 800d078 <_vfiprintf_r+0x110>
 800d040:	06d1      	lsls	r1, r2, #27
 800d042:	bf44      	itt	mi
 800d044:	2320      	movmi	r3, #32
 800d046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d04a:	0713      	lsls	r3, r2, #28
 800d04c:	bf44      	itt	mi
 800d04e:	232b      	movmi	r3, #43	@ 0x2b
 800d050:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d054:	f89a 3000 	ldrb.w	r3, [sl]
 800d058:	2b2a      	cmp	r3, #42	@ 0x2a
 800d05a:	d015      	beq.n	800d088 <_vfiprintf_r+0x120>
 800d05c:	9a07      	ldr	r2, [sp, #28]
 800d05e:	4654      	mov	r4, sl
 800d060:	2000      	movs	r0, #0
 800d062:	f04f 0c0a 	mov.w	ip, #10
 800d066:	4621      	mov	r1, r4
 800d068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d06c:	3b30      	subs	r3, #48	@ 0x30
 800d06e:	2b09      	cmp	r3, #9
 800d070:	d94b      	bls.n	800d10a <_vfiprintf_r+0x1a2>
 800d072:	b1b0      	cbz	r0, 800d0a2 <_vfiprintf_r+0x13a>
 800d074:	9207      	str	r2, [sp, #28]
 800d076:	e014      	b.n	800d0a2 <_vfiprintf_r+0x13a>
 800d078:	eba0 0308 	sub.w	r3, r0, r8
 800d07c:	46a2      	mov	sl, r4
 800d07e:	fa09 f303 	lsl.w	r3, r9, r3
 800d082:	4313      	orrs	r3, r2
 800d084:	9304      	str	r3, [sp, #16]
 800d086:	e7d2      	b.n	800d02e <_vfiprintf_r+0xc6>
 800d088:	9b03      	ldr	r3, [sp, #12]
 800d08a:	1d19      	adds	r1, r3, #4
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	9103      	str	r1, [sp, #12]
 800d092:	bfbb      	ittet	lt
 800d094:	425b      	neglt	r3, r3
 800d096:	f042 0202 	orrlt.w	r2, r2, #2
 800d09a:	9307      	strge	r3, [sp, #28]
 800d09c:	9307      	strlt	r3, [sp, #28]
 800d09e:	bfb8      	it	lt
 800d0a0:	9204      	strlt	r2, [sp, #16]
 800d0a2:	7823      	ldrb	r3, [r4, #0]
 800d0a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0a6:	d10a      	bne.n	800d0be <_vfiprintf_r+0x156>
 800d0a8:	7863      	ldrb	r3, [r4, #1]
 800d0aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0ac:	d132      	bne.n	800d114 <_vfiprintf_r+0x1ac>
 800d0ae:	9b03      	ldr	r3, [sp, #12]
 800d0b0:	3402      	adds	r4, #2
 800d0b2:	1d1a      	adds	r2, r3, #4
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0ba:	9203      	str	r2, [sp, #12]
 800d0bc:	9305      	str	r3, [sp, #20]
 800d0be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d194 <_vfiprintf_r+0x22c>
 800d0c2:	2203      	movs	r2, #3
 800d0c4:	7821      	ldrb	r1, [r4, #0]
 800d0c6:	4650      	mov	r0, sl
 800d0c8:	f000 fb5c 	bl	800d784 <memchr>
 800d0cc:	b138      	cbz	r0, 800d0de <_vfiprintf_r+0x176>
 800d0ce:	eba0 000a 	sub.w	r0, r0, sl
 800d0d2:	2240      	movs	r2, #64	@ 0x40
 800d0d4:	9b04      	ldr	r3, [sp, #16]
 800d0d6:	3401      	adds	r4, #1
 800d0d8:	4082      	lsls	r2, r0
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	9304      	str	r3, [sp, #16]
 800d0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0e2:	2206      	movs	r2, #6
 800d0e4:	4828      	ldr	r0, [pc, #160]	@ (800d188 <_vfiprintf_r+0x220>)
 800d0e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0ea:	f000 fb4b 	bl	800d784 <memchr>
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	d03f      	beq.n	800d172 <_vfiprintf_r+0x20a>
 800d0f2:	4b26      	ldr	r3, [pc, #152]	@ (800d18c <_vfiprintf_r+0x224>)
 800d0f4:	bb1b      	cbnz	r3, 800d13e <_vfiprintf_r+0x1d6>
 800d0f6:	9b03      	ldr	r3, [sp, #12]
 800d0f8:	3307      	adds	r3, #7
 800d0fa:	f023 0307 	bic.w	r3, r3, #7
 800d0fe:	3308      	adds	r3, #8
 800d100:	9303      	str	r3, [sp, #12]
 800d102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d104:	443b      	add	r3, r7
 800d106:	9309      	str	r3, [sp, #36]	@ 0x24
 800d108:	e76a      	b.n	800cfe0 <_vfiprintf_r+0x78>
 800d10a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d10e:	460c      	mov	r4, r1
 800d110:	2001      	movs	r0, #1
 800d112:	e7a8      	b.n	800d066 <_vfiprintf_r+0xfe>
 800d114:	2300      	movs	r3, #0
 800d116:	3401      	adds	r4, #1
 800d118:	f04f 0c0a 	mov.w	ip, #10
 800d11c:	4619      	mov	r1, r3
 800d11e:	9305      	str	r3, [sp, #20]
 800d120:	4620      	mov	r0, r4
 800d122:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d126:	3a30      	subs	r2, #48	@ 0x30
 800d128:	2a09      	cmp	r2, #9
 800d12a:	d903      	bls.n	800d134 <_vfiprintf_r+0x1cc>
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d0c6      	beq.n	800d0be <_vfiprintf_r+0x156>
 800d130:	9105      	str	r1, [sp, #20]
 800d132:	e7c4      	b.n	800d0be <_vfiprintf_r+0x156>
 800d134:	fb0c 2101 	mla	r1, ip, r1, r2
 800d138:	4604      	mov	r4, r0
 800d13a:	2301      	movs	r3, #1
 800d13c:	e7f0      	b.n	800d120 <_vfiprintf_r+0x1b8>
 800d13e:	ab03      	add	r3, sp, #12
 800d140:	462a      	mov	r2, r5
 800d142:	a904      	add	r1, sp, #16
 800d144:	4630      	mov	r0, r6
 800d146:	9300      	str	r3, [sp, #0]
 800d148:	4b11      	ldr	r3, [pc, #68]	@ (800d190 <_vfiprintf_r+0x228>)
 800d14a:	f3af 8000 	nop.w
 800d14e:	4607      	mov	r7, r0
 800d150:	1c78      	adds	r0, r7, #1
 800d152:	d1d6      	bne.n	800d102 <_vfiprintf_r+0x19a>
 800d154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d156:	07d9      	lsls	r1, r3, #31
 800d158:	d405      	bmi.n	800d166 <_vfiprintf_r+0x1fe>
 800d15a:	89ab      	ldrh	r3, [r5, #12]
 800d15c:	059a      	lsls	r2, r3, #22
 800d15e:	d402      	bmi.n	800d166 <_vfiprintf_r+0x1fe>
 800d160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d162:	f7ff fe8b 	bl	800ce7c <__retarget_lock_release_recursive>
 800d166:	89ab      	ldrh	r3, [r5, #12]
 800d168:	065b      	lsls	r3, r3, #25
 800d16a:	f53f af1f 	bmi.w	800cfac <_vfiprintf_r+0x44>
 800d16e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d170:	e71e      	b.n	800cfb0 <_vfiprintf_r+0x48>
 800d172:	ab03      	add	r3, sp, #12
 800d174:	462a      	mov	r2, r5
 800d176:	a904      	add	r1, sp, #16
 800d178:	4630      	mov	r0, r6
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	4b04      	ldr	r3, [pc, #16]	@ (800d190 <_vfiprintf_r+0x228>)
 800d17e:	f000 f87d 	bl	800d27c <_printf_i>
 800d182:	e7e4      	b.n	800d14e <_vfiprintf_r+0x1e6>
 800d184:	0800ea3c 	.word	0x0800ea3c
 800d188:	0800ea46 	.word	0x0800ea46
 800d18c:	00000000 	.word	0x00000000
 800d190:	0800cf43 	.word	0x0800cf43
 800d194:	0800ea42 	.word	0x0800ea42

0800d198 <_printf_common>:
 800d198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d19c:	4616      	mov	r6, r2
 800d19e:	4698      	mov	r8, r3
 800d1a0:	688a      	ldr	r2, [r1, #8]
 800d1a2:	4607      	mov	r7, r0
 800d1a4:	690b      	ldr	r3, [r1, #16]
 800d1a6:	460c      	mov	r4, r1
 800d1a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	bfb8      	it	lt
 800d1b0:	4613      	movlt	r3, r2
 800d1b2:	6033      	str	r3, [r6, #0]
 800d1b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d1b8:	b10a      	cbz	r2, 800d1be <_printf_common+0x26>
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	6033      	str	r3, [r6, #0]
 800d1be:	6823      	ldr	r3, [r4, #0]
 800d1c0:	0699      	lsls	r1, r3, #26
 800d1c2:	bf42      	ittt	mi
 800d1c4:	6833      	ldrmi	r3, [r6, #0]
 800d1c6:	3302      	addmi	r3, #2
 800d1c8:	6033      	strmi	r3, [r6, #0]
 800d1ca:	6825      	ldr	r5, [r4, #0]
 800d1cc:	f015 0506 	ands.w	r5, r5, #6
 800d1d0:	d106      	bne.n	800d1e0 <_printf_common+0x48>
 800d1d2:	f104 0a19 	add.w	sl, r4, #25
 800d1d6:	68e3      	ldr	r3, [r4, #12]
 800d1d8:	6832      	ldr	r2, [r6, #0]
 800d1da:	1a9b      	subs	r3, r3, r2
 800d1dc:	42ab      	cmp	r3, r5
 800d1de:	dc2b      	bgt.n	800d238 <_printf_common+0xa0>
 800d1e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d1e4:	6822      	ldr	r2, [r4, #0]
 800d1e6:	3b00      	subs	r3, #0
 800d1e8:	bf18      	it	ne
 800d1ea:	2301      	movne	r3, #1
 800d1ec:	0692      	lsls	r2, r2, #26
 800d1ee:	d430      	bmi.n	800d252 <_printf_common+0xba>
 800d1f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d1f4:	4641      	mov	r1, r8
 800d1f6:	4638      	mov	r0, r7
 800d1f8:	47c8      	blx	r9
 800d1fa:	3001      	adds	r0, #1
 800d1fc:	d023      	beq.n	800d246 <_printf_common+0xae>
 800d1fe:	6823      	ldr	r3, [r4, #0]
 800d200:	341a      	adds	r4, #26
 800d202:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d206:	f003 0306 	and.w	r3, r3, #6
 800d20a:	2b04      	cmp	r3, #4
 800d20c:	bf0a      	itet	eq
 800d20e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800d212:	2500      	movne	r5, #0
 800d214:	6833      	ldreq	r3, [r6, #0]
 800d216:	f04f 0600 	mov.w	r6, #0
 800d21a:	bf08      	it	eq
 800d21c:	1aed      	subeq	r5, r5, r3
 800d21e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d222:	bf08      	it	eq
 800d224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d228:	4293      	cmp	r3, r2
 800d22a:	bfc4      	itt	gt
 800d22c:	1a9b      	subgt	r3, r3, r2
 800d22e:	18ed      	addgt	r5, r5, r3
 800d230:	42b5      	cmp	r5, r6
 800d232:	d11a      	bne.n	800d26a <_printf_common+0xd2>
 800d234:	2000      	movs	r0, #0
 800d236:	e008      	b.n	800d24a <_printf_common+0xb2>
 800d238:	2301      	movs	r3, #1
 800d23a:	4652      	mov	r2, sl
 800d23c:	4641      	mov	r1, r8
 800d23e:	4638      	mov	r0, r7
 800d240:	47c8      	blx	r9
 800d242:	3001      	adds	r0, #1
 800d244:	d103      	bne.n	800d24e <_printf_common+0xb6>
 800d246:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d24e:	3501      	adds	r5, #1
 800d250:	e7c1      	b.n	800d1d6 <_printf_common+0x3e>
 800d252:	18e1      	adds	r1, r4, r3
 800d254:	1c5a      	adds	r2, r3, #1
 800d256:	2030      	movs	r0, #48	@ 0x30
 800d258:	3302      	adds	r3, #2
 800d25a:	4422      	add	r2, r4
 800d25c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d264:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d268:	e7c2      	b.n	800d1f0 <_printf_common+0x58>
 800d26a:	2301      	movs	r3, #1
 800d26c:	4622      	mov	r2, r4
 800d26e:	4641      	mov	r1, r8
 800d270:	4638      	mov	r0, r7
 800d272:	47c8      	blx	r9
 800d274:	3001      	adds	r0, #1
 800d276:	d0e6      	beq.n	800d246 <_printf_common+0xae>
 800d278:	3601      	adds	r6, #1
 800d27a:	e7d9      	b.n	800d230 <_printf_common+0x98>

0800d27c <_printf_i>:
 800d27c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d280:	7e0f      	ldrb	r7, [r1, #24]
 800d282:	4691      	mov	r9, r2
 800d284:	4680      	mov	r8, r0
 800d286:	460c      	mov	r4, r1
 800d288:	2f78      	cmp	r7, #120	@ 0x78
 800d28a:	469a      	mov	sl, r3
 800d28c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d28e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d292:	d807      	bhi.n	800d2a4 <_printf_i+0x28>
 800d294:	2f62      	cmp	r7, #98	@ 0x62
 800d296:	d80a      	bhi.n	800d2ae <_printf_i+0x32>
 800d298:	2f00      	cmp	r7, #0
 800d29a:	f000 80d2 	beq.w	800d442 <_printf_i+0x1c6>
 800d29e:	2f58      	cmp	r7, #88	@ 0x58
 800d2a0:	f000 80b9 	beq.w	800d416 <_printf_i+0x19a>
 800d2a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d2ac:	e03a      	b.n	800d324 <_printf_i+0xa8>
 800d2ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d2b2:	2b15      	cmp	r3, #21
 800d2b4:	d8f6      	bhi.n	800d2a4 <_printf_i+0x28>
 800d2b6:	a101      	add	r1, pc, #4	@ (adr r1, 800d2bc <_printf_i+0x40>)
 800d2b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2bc:	0800d315 	.word	0x0800d315
 800d2c0:	0800d329 	.word	0x0800d329
 800d2c4:	0800d2a5 	.word	0x0800d2a5
 800d2c8:	0800d2a5 	.word	0x0800d2a5
 800d2cc:	0800d2a5 	.word	0x0800d2a5
 800d2d0:	0800d2a5 	.word	0x0800d2a5
 800d2d4:	0800d329 	.word	0x0800d329
 800d2d8:	0800d2a5 	.word	0x0800d2a5
 800d2dc:	0800d2a5 	.word	0x0800d2a5
 800d2e0:	0800d2a5 	.word	0x0800d2a5
 800d2e4:	0800d2a5 	.word	0x0800d2a5
 800d2e8:	0800d429 	.word	0x0800d429
 800d2ec:	0800d353 	.word	0x0800d353
 800d2f0:	0800d3e3 	.word	0x0800d3e3
 800d2f4:	0800d2a5 	.word	0x0800d2a5
 800d2f8:	0800d2a5 	.word	0x0800d2a5
 800d2fc:	0800d44b 	.word	0x0800d44b
 800d300:	0800d2a5 	.word	0x0800d2a5
 800d304:	0800d353 	.word	0x0800d353
 800d308:	0800d2a5 	.word	0x0800d2a5
 800d30c:	0800d2a5 	.word	0x0800d2a5
 800d310:	0800d3eb 	.word	0x0800d3eb
 800d314:	6833      	ldr	r3, [r6, #0]
 800d316:	1d1a      	adds	r2, r3, #4
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	6032      	str	r2, [r6, #0]
 800d31c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d320:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d324:	2301      	movs	r3, #1
 800d326:	e09d      	b.n	800d464 <_printf_i+0x1e8>
 800d328:	6833      	ldr	r3, [r6, #0]
 800d32a:	6820      	ldr	r0, [r4, #0]
 800d32c:	1d19      	adds	r1, r3, #4
 800d32e:	6031      	str	r1, [r6, #0]
 800d330:	0606      	lsls	r6, r0, #24
 800d332:	d501      	bpl.n	800d338 <_printf_i+0xbc>
 800d334:	681d      	ldr	r5, [r3, #0]
 800d336:	e003      	b.n	800d340 <_printf_i+0xc4>
 800d338:	0645      	lsls	r5, r0, #25
 800d33a:	d5fb      	bpl.n	800d334 <_printf_i+0xb8>
 800d33c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d340:	2d00      	cmp	r5, #0
 800d342:	da03      	bge.n	800d34c <_printf_i+0xd0>
 800d344:	232d      	movs	r3, #45	@ 0x2d
 800d346:	426d      	negs	r5, r5
 800d348:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d34c:	4859      	ldr	r0, [pc, #356]	@ (800d4b4 <_printf_i+0x238>)
 800d34e:	230a      	movs	r3, #10
 800d350:	e011      	b.n	800d376 <_printf_i+0xfa>
 800d352:	6821      	ldr	r1, [r4, #0]
 800d354:	6833      	ldr	r3, [r6, #0]
 800d356:	0608      	lsls	r0, r1, #24
 800d358:	f853 5b04 	ldr.w	r5, [r3], #4
 800d35c:	d402      	bmi.n	800d364 <_printf_i+0xe8>
 800d35e:	0649      	lsls	r1, r1, #25
 800d360:	bf48      	it	mi
 800d362:	b2ad      	uxthmi	r5, r5
 800d364:	2f6f      	cmp	r7, #111	@ 0x6f
 800d366:	6033      	str	r3, [r6, #0]
 800d368:	4852      	ldr	r0, [pc, #328]	@ (800d4b4 <_printf_i+0x238>)
 800d36a:	bf14      	ite	ne
 800d36c:	230a      	movne	r3, #10
 800d36e:	2308      	moveq	r3, #8
 800d370:	2100      	movs	r1, #0
 800d372:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d376:	6866      	ldr	r6, [r4, #4]
 800d378:	2e00      	cmp	r6, #0
 800d37a:	60a6      	str	r6, [r4, #8]
 800d37c:	bfa2      	ittt	ge
 800d37e:	6821      	ldrge	r1, [r4, #0]
 800d380:	f021 0104 	bicge.w	r1, r1, #4
 800d384:	6021      	strge	r1, [r4, #0]
 800d386:	b90d      	cbnz	r5, 800d38c <_printf_i+0x110>
 800d388:	2e00      	cmp	r6, #0
 800d38a:	d04b      	beq.n	800d424 <_printf_i+0x1a8>
 800d38c:	4616      	mov	r6, r2
 800d38e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d392:	fb03 5711 	mls	r7, r3, r1, r5
 800d396:	5dc7      	ldrb	r7, [r0, r7]
 800d398:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d39c:	462f      	mov	r7, r5
 800d39e:	460d      	mov	r5, r1
 800d3a0:	42bb      	cmp	r3, r7
 800d3a2:	d9f4      	bls.n	800d38e <_printf_i+0x112>
 800d3a4:	2b08      	cmp	r3, #8
 800d3a6:	d10b      	bne.n	800d3c0 <_printf_i+0x144>
 800d3a8:	6823      	ldr	r3, [r4, #0]
 800d3aa:	07df      	lsls	r7, r3, #31
 800d3ac:	d508      	bpl.n	800d3c0 <_printf_i+0x144>
 800d3ae:	6923      	ldr	r3, [r4, #16]
 800d3b0:	6861      	ldr	r1, [r4, #4]
 800d3b2:	4299      	cmp	r1, r3
 800d3b4:	bfde      	ittt	le
 800d3b6:	2330      	movle	r3, #48	@ 0x30
 800d3b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3bc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d3c0:	1b92      	subs	r2, r2, r6
 800d3c2:	6122      	str	r2, [r4, #16]
 800d3c4:	464b      	mov	r3, r9
 800d3c6:	aa03      	add	r2, sp, #12
 800d3c8:	4621      	mov	r1, r4
 800d3ca:	4640      	mov	r0, r8
 800d3cc:	f8cd a000 	str.w	sl, [sp]
 800d3d0:	f7ff fee2 	bl	800d198 <_printf_common>
 800d3d4:	3001      	adds	r0, #1
 800d3d6:	d14a      	bne.n	800d46e <_printf_i+0x1f2>
 800d3d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3dc:	b004      	add	sp, #16
 800d3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3e2:	6823      	ldr	r3, [r4, #0]
 800d3e4:	f043 0320 	orr.w	r3, r3, #32
 800d3e8:	6023      	str	r3, [r4, #0]
 800d3ea:	2778      	movs	r7, #120	@ 0x78
 800d3ec:	4832      	ldr	r0, [pc, #200]	@ (800d4b8 <_printf_i+0x23c>)
 800d3ee:	6823      	ldr	r3, [r4, #0]
 800d3f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d3f4:	061f      	lsls	r7, r3, #24
 800d3f6:	6831      	ldr	r1, [r6, #0]
 800d3f8:	f851 5b04 	ldr.w	r5, [r1], #4
 800d3fc:	d402      	bmi.n	800d404 <_printf_i+0x188>
 800d3fe:	065f      	lsls	r7, r3, #25
 800d400:	bf48      	it	mi
 800d402:	b2ad      	uxthmi	r5, r5
 800d404:	6031      	str	r1, [r6, #0]
 800d406:	07d9      	lsls	r1, r3, #31
 800d408:	bf44      	itt	mi
 800d40a:	f043 0320 	orrmi.w	r3, r3, #32
 800d40e:	6023      	strmi	r3, [r4, #0]
 800d410:	b11d      	cbz	r5, 800d41a <_printf_i+0x19e>
 800d412:	2310      	movs	r3, #16
 800d414:	e7ac      	b.n	800d370 <_printf_i+0xf4>
 800d416:	4827      	ldr	r0, [pc, #156]	@ (800d4b4 <_printf_i+0x238>)
 800d418:	e7e9      	b.n	800d3ee <_printf_i+0x172>
 800d41a:	6823      	ldr	r3, [r4, #0]
 800d41c:	f023 0320 	bic.w	r3, r3, #32
 800d420:	6023      	str	r3, [r4, #0]
 800d422:	e7f6      	b.n	800d412 <_printf_i+0x196>
 800d424:	4616      	mov	r6, r2
 800d426:	e7bd      	b.n	800d3a4 <_printf_i+0x128>
 800d428:	6833      	ldr	r3, [r6, #0]
 800d42a:	6825      	ldr	r5, [r4, #0]
 800d42c:	1d18      	adds	r0, r3, #4
 800d42e:	6961      	ldr	r1, [r4, #20]
 800d430:	6030      	str	r0, [r6, #0]
 800d432:	062e      	lsls	r6, r5, #24
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	d501      	bpl.n	800d43c <_printf_i+0x1c0>
 800d438:	6019      	str	r1, [r3, #0]
 800d43a:	e002      	b.n	800d442 <_printf_i+0x1c6>
 800d43c:	0668      	lsls	r0, r5, #25
 800d43e:	d5fb      	bpl.n	800d438 <_printf_i+0x1bc>
 800d440:	8019      	strh	r1, [r3, #0]
 800d442:	2300      	movs	r3, #0
 800d444:	4616      	mov	r6, r2
 800d446:	6123      	str	r3, [r4, #16]
 800d448:	e7bc      	b.n	800d3c4 <_printf_i+0x148>
 800d44a:	6833      	ldr	r3, [r6, #0]
 800d44c:	2100      	movs	r1, #0
 800d44e:	1d1a      	adds	r2, r3, #4
 800d450:	6032      	str	r2, [r6, #0]
 800d452:	681e      	ldr	r6, [r3, #0]
 800d454:	6862      	ldr	r2, [r4, #4]
 800d456:	4630      	mov	r0, r6
 800d458:	f000 f994 	bl	800d784 <memchr>
 800d45c:	b108      	cbz	r0, 800d462 <_printf_i+0x1e6>
 800d45e:	1b80      	subs	r0, r0, r6
 800d460:	6060      	str	r0, [r4, #4]
 800d462:	6863      	ldr	r3, [r4, #4]
 800d464:	6123      	str	r3, [r4, #16]
 800d466:	2300      	movs	r3, #0
 800d468:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d46c:	e7aa      	b.n	800d3c4 <_printf_i+0x148>
 800d46e:	6923      	ldr	r3, [r4, #16]
 800d470:	4632      	mov	r2, r6
 800d472:	4649      	mov	r1, r9
 800d474:	4640      	mov	r0, r8
 800d476:	47d0      	blx	sl
 800d478:	3001      	adds	r0, #1
 800d47a:	d0ad      	beq.n	800d3d8 <_printf_i+0x15c>
 800d47c:	6823      	ldr	r3, [r4, #0]
 800d47e:	079b      	lsls	r3, r3, #30
 800d480:	d413      	bmi.n	800d4aa <_printf_i+0x22e>
 800d482:	68e0      	ldr	r0, [r4, #12]
 800d484:	9b03      	ldr	r3, [sp, #12]
 800d486:	4298      	cmp	r0, r3
 800d488:	bfb8      	it	lt
 800d48a:	4618      	movlt	r0, r3
 800d48c:	e7a6      	b.n	800d3dc <_printf_i+0x160>
 800d48e:	2301      	movs	r3, #1
 800d490:	4632      	mov	r2, r6
 800d492:	4649      	mov	r1, r9
 800d494:	4640      	mov	r0, r8
 800d496:	47d0      	blx	sl
 800d498:	3001      	adds	r0, #1
 800d49a:	d09d      	beq.n	800d3d8 <_printf_i+0x15c>
 800d49c:	3501      	adds	r5, #1
 800d49e:	68e3      	ldr	r3, [r4, #12]
 800d4a0:	9903      	ldr	r1, [sp, #12]
 800d4a2:	1a5b      	subs	r3, r3, r1
 800d4a4:	42ab      	cmp	r3, r5
 800d4a6:	dcf2      	bgt.n	800d48e <_printf_i+0x212>
 800d4a8:	e7eb      	b.n	800d482 <_printf_i+0x206>
 800d4aa:	2500      	movs	r5, #0
 800d4ac:	f104 0619 	add.w	r6, r4, #25
 800d4b0:	e7f5      	b.n	800d49e <_printf_i+0x222>
 800d4b2:	bf00      	nop
 800d4b4:	0800ea4d 	.word	0x0800ea4d
 800d4b8:	0800ea5e 	.word	0x0800ea5e

0800d4bc <__sflush_r>:
 800d4bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4c4:	0716      	lsls	r6, r2, #28
 800d4c6:	4605      	mov	r5, r0
 800d4c8:	460c      	mov	r4, r1
 800d4ca:	d454      	bmi.n	800d576 <__sflush_r+0xba>
 800d4cc:	684b      	ldr	r3, [r1, #4]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	dc02      	bgt.n	800d4d8 <__sflush_r+0x1c>
 800d4d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	dd48      	ble.n	800d56a <__sflush_r+0xae>
 800d4d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4da:	2e00      	cmp	r6, #0
 800d4dc:	d045      	beq.n	800d56a <__sflush_r+0xae>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d4e4:	682f      	ldr	r7, [r5, #0]
 800d4e6:	6a21      	ldr	r1, [r4, #32]
 800d4e8:	602b      	str	r3, [r5, #0]
 800d4ea:	d030      	beq.n	800d54e <__sflush_r+0x92>
 800d4ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d4ee:	89a3      	ldrh	r3, [r4, #12]
 800d4f0:	0759      	lsls	r1, r3, #29
 800d4f2:	d505      	bpl.n	800d500 <__sflush_r+0x44>
 800d4f4:	6863      	ldr	r3, [r4, #4]
 800d4f6:	1ad2      	subs	r2, r2, r3
 800d4f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d4fa:	b10b      	cbz	r3, 800d500 <__sflush_r+0x44>
 800d4fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d4fe:	1ad2      	subs	r2, r2, r3
 800d500:	2300      	movs	r3, #0
 800d502:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d504:	6a21      	ldr	r1, [r4, #32]
 800d506:	4628      	mov	r0, r5
 800d508:	47b0      	blx	r6
 800d50a:	1c43      	adds	r3, r0, #1
 800d50c:	89a3      	ldrh	r3, [r4, #12]
 800d50e:	d106      	bne.n	800d51e <__sflush_r+0x62>
 800d510:	6829      	ldr	r1, [r5, #0]
 800d512:	291d      	cmp	r1, #29
 800d514:	d82b      	bhi.n	800d56e <__sflush_r+0xb2>
 800d516:	4a2a      	ldr	r2, [pc, #168]	@ (800d5c0 <__sflush_r+0x104>)
 800d518:	410a      	asrs	r2, r1
 800d51a:	07d6      	lsls	r6, r2, #31
 800d51c:	d427      	bmi.n	800d56e <__sflush_r+0xb2>
 800d51e:	2200      	movs	r2, #0
 800d520:	04d9      	lsls	r1, r3, #19
 800d522:	6062      	str	r2, [r4, #4]
 800d524:	6922      	ldr	r2, [r4, #16]
 800d526:	6022      	str	r2, [r4, #0]
 800d528:	d504      	bpl.n	800d534 <__sflush_r+0x78>
 800d52a:	1c42      	adds	r2, r0, #1
 800d52c:	d101      	bne.n	800d532 <__sflush_r+0x76>
 800d52e:	682b      	ldr	r3, [r5, #0]
 800d530:	b903      	cbnz	r3, 800d534 <__sflush_r+0x78>
 800d532:	6560      	str	r0, [r4, #84]	@ 0x54
 800d534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d536:	602f      	str	r7, [r5, #0]
 800d538:	b1b9      	cbz	r1, 800d56a <__sflush_r+0xae>
 800d53a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d53e:	4299      	cmp	r1, r3
 800d540:	d002      	beq.n	800d548 <__sflush_r+0x8c>
 800d542:	4628      	mov	r0, r5
 800d544:	f7ff fc9c 	bl	800ce80 <_free_r>
 800d548:	2300      	movs	r3, #0
 800d54a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d54c:	e00d      	b.n	800d56a <__sflush_r+0xae>
 800d54e:	2301      	movs	r3, #1
 800d550:	4628      	mov	r0, r5
 800d552:	47b0      	blx	r6
 800d554:	4602      	mov	r2, r0
 800d556:	1c50      	adds	r0, r2, #1
 800d558:	d1c9      	bne.n	800d4ee <__sflush_r+0x32>
 800d55a:	682b      	ldr	r3, [r5, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d0c6      	beq.n	800d4ee <__sflush_r+0x32>
 800d560:	2b1d      	cmp	r3, #29
 800d562:	d001      	beq.n	800d568 <__sflush_r+0xac>
 800d564:	2b16      	cmp	r3, #22
 800d566:	d11d      	bne.n	800d5a4 <__sflush_r+0xe8>
 800d568:	602f      	str	r7, [r5, #0]
 800d56a:	2000      	movs	r0, #0
 800d56c:	e021      	b.n	800d5b2 <__sflush_r+0xf6>
 800d56e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d572:	b21b      	sxth	r3, r3
 800d574:	e01a      	b.n	800d5ac <__sflush_r+0xf0>
 800d576:	690f      	ldr	r7, [r1, #16]
 800d578:	2f00      	cmp	r7, #0
 800d57a:	d0f6      	beq.n	800d56a <__sflush_r+0xae>
 800d57c:	0793      	lsls	r3, r2, #30
 800d57e:	680e      	ldr	r6, [r1, #0]
 800d580:	600f      	str	r7, [r1, #0]
 800d582:	bf0c      	ite	eq
 800d584:	694b      	ldreq	r3, [r1, #20]
 800d586:	2300      	movne	r3, #0
 800d588:	eba6 0807 	sub.w	r8, r6, r7
 800d58c:	608b      	str	r3, [r1, #8]
 800d58e:	f1b8 0f00 	cmp.w	r8, #0
 800d592:	ddea      	ble.n	800d56a <__sflush_r+0xae>
 800d594:	4643      	mov	r3, r8
 800d596:	463a      	mov	r2, r7
 800d598:	6a21      	ldr	r1, [r4, #32]
 800d59a:	4628      	mov	r0, r5
 800d59c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d59e:	47b0      	blx	r6
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	dc08      	bgt.n	800d5b6 <__sflush_r+0xfa>
 800d5a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d5b0:	81a3      	strh	r3, [r4, #12]
 800d5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b6:	4407      	add	r7, r0
 800d5b8:	eba8 0800 	sub.w	r8, r8, r0
 800d5bc:	e7e7      	b.n	800d58e <__sflush_r+0xd2>
 800d5be:	bf00      	nop
 800d5c0:	dfbffffe 	.word	0xdfbffffe

0800d5c4 <_fflush_r>:
 800d5c4:	b538      	push	{r3, r4, r5, lr}
 800d5c6:	690b      	ldr	r3, [r1, #16]
 800d5c8:	4605      	mov	r5, r0
 800d5ca:	460c      	mov	r4, r1
 800d5cc:	b913      	cbnz	r3, 800d5d4 <_fflush_r+0x10>
 800d5ce:	2500      	movs	r5, #0
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	bd38      	pop	{r3, r4, r5, pc}
 800d5d4:	b118      	cbz	r0, 800d5de <_fflush_r+0x1a>
 800d5d6:	6a03      	ldr	r3, [r0, #32]
 800d5d8:	b90b      	cbnz	r3, 800d5de <_fflush_r+0x1a>
 800d5da:	f7ff fa3f 	bl	800ca5c <__sinit>
 800d5de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d0f3      	beq.n	800d5ce <_fflush_r+0xa>
 800d5e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d5e8:	07d0      	lsls	r0, r2, #31
 800d5ea:	d404      	bmi.n	800d5f6 <_fflush_r+0x32>
 800d5ec:	0599      	lsls	r1, r3, #22
 800d5ee:	d402      	bmi.n	800d5f6 <_fflush_r+0x32>
 800d5f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5f2:	f7ff fc42 	bl	800ce7a <__retarget_lock_acquire_recursive>
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	4621      	mov	r1, r4
 800d5fa:	f7ff ff5f 	bl	800d4bc <__sflush_r>
 800d5fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d600:	4605      	mov	r5, r0
 800d602:	07da      	lsls	r2, r3, #31
 800d604:	d4e4      	bmi.n	800d5d0 <_fflush_r+0xc>
 800d606:	89a3      	ldrh	r3, [r4, #12]
 800d608:	059b      	lsls	r3, r3, #22
 800d60a:	d4e1      	bmi.n	800d5d0 <_fflush_r+0xc>
 800d60c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d60e:	f7ff fc35 	bl	800ce7c <__retarget_lock_release_recursive>
 800d612:	e7dd      	b.n	800d5d0 <_fflush_r+0xc>

0800d614 <__swhatbuf_r>:
 800d614:	b570      	push	{r4, r5, r6, lr}
 800d616:	460c      	mov	r4, r1
 800d618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d61c:	b096      	sub	sp, #88	@ 0x58
 800d61e:	4615      	mov	r5, r2
 800d620:	2900      	cmp	r1, #0
 800d622:	461e      	mov	r6, r3
 800d624:	da0c      	bge.n	800d640 <__swhatbuf_r+0x2c>
 800d626:	89a3      	ldrh	r3, [r4, #12]
 800d628:	2100      	movs	r1, #0
 800d62a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d62e:	bf14      	ite	ne
 800d630:	2340      	movne	r3, #64	@ 0x40
 800d632:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d636:	2000      	movs	r0, #0
 800d638:	6031      	str	r1, [r6, #0]
 800d63a:	602b      	str	r3, [r5, #0]
 800d63c:	b016      	add	sp, #88	@ 0x58
 800d63e:	bd70      	pop	{r4, r5, r6, pc}
 800d640:	466a      	mov	r2, sp
 800d642:	f000 f87d 	bl	800d740 <_fstat_r>
 800d646:	2800      	cmp	r0, #0
 800d648:	dbed      	blt.n	800d626 <__swhatbuf_r+0x12>
 800d64a:	9901      	ldr	r1, [sp, #4]
 800d64c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d650:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d654:	4259      	negs	r1, r3
 800d656:	4159      	adcs	r1, r3
 800d658:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d65c:	e7eb      	b.n	800d636 <__swhatbuf_r+0x22>

0800d65e <__smakebuf_r>:
 800d65e:	898b      	ldrh	r3, [r1, #12]
 800d660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d662:	079d      	lsls	r5, r3, #30
 800d664:	4606      	mov	r6, r0
 800d666:	460c      	mov	r4, r1
 800d668:	d507      	bpl.n	800d67a <__smakebuf_r+0x1c>
 800d66a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d66e:	6023      	str	r3, [r4, #0]
 800d670:	6123      	str	r3, [r4, #16]
 800d672:	2301      	movs	r3, #1
 800d674:	6163      	str	r3, [r4, #20]
 800d676:	b003      	add	sp, #12
 800d678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d67a:	ab01      	add	r3, sp, #4
 800d67c:	466a      	mov	r2, sp
 800d67e:	f7ff ffc9 	bl	800d614 <__swhatbuf_r>
 800d682:	9f00      	ldr	r7, [sp, #0]
 800d684:	4605      	mov	r5, r0
 800d686:	4630      	mov	r0, r6
 800d688:	4639      	mov	r1, r7
 800d68a:	f7ff f8cf 	bl	800c82c <_malloc_r>
 800d68e:	b948      	cbnz	r0, 800d6a4 <__smakebuf_r+0x46>
 800d690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d694:	059a      	lsls	r2, r3, #22
 800d696:	d4ee      	bmi.n	800d676 <__smakebuf_r+0x18>
 800d698:	f023 0303 	bic.w	r3, r3, #3
 800d69c:	f043 0302 	orr.w	r3, r3, #2
 800d6a0:	81a3      	strh	r3, [r4, #12]
 800d6a2:	e7e2      	b.n	800d66a <__smakebuf_r+0xc>
 800d6a4:	89a3      	ldrh	r3, [r4, #12]
 800d6a6:	6020      	str	r0, [r4, #0]
 800d6a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6ac:	81a3      	strh	r3, [r4, #12]
 800d6ae:	9b01      	ldr	r3, [sp, #4]
 800d6b0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d6b4:	b15b      	cbz	r3, 800d6ce <__smakebuf_r+0x70>
 800d6b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f000 f852 	bl	800d764 <_isatty_r>
 800d6c0:	b128      	cbz	r0, 800d6ce <__smakebuf_r+0x70>
 800d6c2:	89a3      	ldrh	r3, [r4, #12]
 800d6c4:	f023 0303 	bic.w	r3, r3, #3
 800d6c8:	f043 0301 	orr.w	r3, r3, #1
 800d6cc:	81a3      	strh	r3, [r4, #12]
 800d6ce:	89a3      	ldrh	r3, [r4, #12]
 800d6d0:	431d      	orrs	r5, r3
 800d6d2:	81a5      	strh	r5, [r4, #12]
 800d6d4:	e7cf      	b.n	800d676 <__smakebuf_r+0x18>

0800d6d6 <_putc_r>:
 800d6d6:	b570      	push	{r4, r5, r6, lr}
 800d6d8:	460d      	mov	r5, r1
 800d6da:	4614      	mov	r4, r2
 800d6dc:	4606      	mov	r6, r0
 800d6de:	b118      	cbz	r0, 800d6e8 <_putc_r+0x12>
 800d6e0:	6a03      	ldr	r3, [r0, #32]
 800d6e2:	b90b      	cbnz	r3, 800d6e8 <_putc_r+0x12>
 800d6e4:	f7ff f9ba 	bl	800ca5c <__sinit>
 800d6e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6ea:	07d8      	lsls	r0, r3, #31
 800d6ec:	d405      	bmi.n	800d6fa <_putc_r+0x24>
 800d6ee:	89a3      	ldrh	r3, [r4, #12]
 800d6f0:	0599      	lsls	r1, r3, #22
 800d6f2:	d402      	bmi.n	800d6fa <_putc_r+0x24>
 800d6f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6f6:	f7ff fbc0 	bl	800ce7a <__retarget_lock_acquire_recursive>
 800d6fa:	68a3      	ldr	r3, [r4, #8]
 800d6fc:	3b01      	subs	r3, #1
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	60a3      	str	r3, [r4, #8]
 800d702:	da05      	bge.n	800d710 <_putc_r+0x3a>
 800d704:	69a2      	ldr	r2, [r4, #24]
 800d706:	4293      	cmp	r3, r2
 800d708:	db12      	blt.n	800d730 <_putc_r+0x5a>
 800d70a:	b2eb      	uxtb	r3, r5
 800d70c:	2b0a      	cmp	r3, #10
 800d70e:	d00f      	beq.n	800d730 <_putc_r+0x5a>
 800d710:	6823      	ldr	r3, [r4, #0]
 800d712:	1c5a      	adds	r2, r3, #1
 800d714:	6022      	str	r2, [r4, #0]
 800d716:	701d      	strb	r5, [r3, #0]
 800d718:	b2ed      	uxtb	r5, r5
 800d71a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d71c:	07da      	lsls	r2, r3, #31
 800d71e:	d405      	bmi.n	800d72c <_putc_r+0x56>
 800d720:	89a3      	ldrh	r3, [r4, #12]
 800d722:	059b      	lsls	r3, r3, #22
 800d724:	d402      	bmi.n	800d72c <_putc_r+0x56>
 800d726:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d728:	f7ff fba8 	bl	800ce7c <__retarget_lock_release_recursive>
 800d72c:	4628      	mov	r0, r5
 800d72e:	bd70      	pop	{r4, r5, r6, pc}
 800d730:	4629      	mov	r1, r5
 800d732:	4622      	mov	r2, r4
 800d734:	4630      	mov	r0, r6
 800d736:	f7ff fa82 	bl	800cc3e <__swbuf_r>
 800d73a:	4605      	mov	r5, r0
 800d73c:	e7ed      	b.n	800d71a <_putc_r+0x44>
	...

0800d740 <_fstat_r>:
 800d740:	b538      	push	{r3, r4, r5, lr}
 800d742:	2300      	movs	r3, #0
 800d744:	4d06      	ldr	r5, [pc, #24]	@ (800d760 <_fstat_r+0x20>)
 800d746:	4604      	mov	r4, r0
 800d748:	4608      	mov	r0, r1
 800d74a:	4611      	mov	r1, r2
 800d74c:	602b      	str	r3, [r5, #0]
 800d74e:	f7f3 fe33 	bl	80013b8 <_fstat>
 800d752:	1c43      	adds	r3, r0, #1
 800d754:	d102      	bne.n	800d75c <_fstat_r+0x1c>
 800d756:	682b      	ldr	r3, [r5, #0]
 800d758:	b103      	cbz	r3, 800d75c <_fstat_r+0x1c>
 800d75a:	6023      	str	r3, [r4, #0]
 800d75c:	bd38      	pop	{r3, r4, r5, pc}
 800d75e:	bf00      	nop
 800d760:	20000784 	.word	0x20000784

0800d764 <_isatty_r>:
 800d764:	b538      	push	{r3, r4, r5, lr}
 800d766:	2300      	movs	r3, #0
 800d768:	4d05      	ldr	r5, [pc, #20]	@ (800d780 <_isatty_r+0x1c>)
 800d76a:	4604      	mov	r4, r0
 800d76c:	4608      	mov	r0, r1
 800d76e:	602b      	str	r3, [r5, #0]
 800d770:	f7f3 fe32 	bl	80013d8 <_isatty>
 800d774:	1c43      	adds	r3, r0, #1
 800d776:	d102      	bne.n	800d77e <_isatty_r+0x1a>
 800d778:	682b      	ldr	r3, [r5, #0]
 800d77a:	b103      	cbz	r3, 800d77e <_isatty_r+0x1a>
 800d77c:	6023      	str	r3, [r4, #0]
 800d77e:	bd38      	pop	{r3, r4, r5, pc}
 800d780:	20000784 	.word	0x20000784

0800d784 <memchr>:
 800d784:	b2c9      	uxtb	r1, r1
 800d786:	4603      	mov	r3, r0
 800d788:	4402      	add	r2, r0
 800d78a:	b510      	push	{r4, lr}
 800d78c:	4293      	cmp	r3, r2
 800d78e:	4618      	mov	r0, r3
 800d790:	d101      	bne.n	800d796 <memchr+0x12>
 800d792:	2000      	movs	r0, #0
 800d794:	e003      	b.n	800d79e <memchr+0x1a>
 800d796:	7804      	ldrb	r4, [r0, #0]
 800d798:	3301      	adds	r3, #1
 800d79a:	428c      	cmp	r4, r1
 800d79c:	d1f6      	bne.n	800d78c <memchr+0x8>
 800d79e:	bd10      	pop	{r4, pc}

0800d7a0 <_init>:
 800d7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7a2:	bf00      	nop
 800d7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7a6:	bc08      	pop	{r3}
 800d7a8:	469e      	mov	lr, r3
 800d7aa:	4770      	bx	lr

0800d7ac <_fini>:
 800d7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ae:	bf00      	nop
 800d7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7b2:	bc08      	pop	{r3}
 800d7b4:	469e      	mov	lr, r3
 800d7b6:	4770      	bx	lr
